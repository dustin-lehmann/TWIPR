
RC_v4_BoardExtender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006878  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08006a04  08006a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a54  08006a54  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08006a54  08006a54  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a54  08006a54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006a54  08006a54  00016a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a5c  08006a5c  00016a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  2000000c  08006a6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000adc  08006a6c  00020adc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f84  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003884  00000000  00000000  00037003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  0003a888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e56  00000000  00000000  0003bb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024af0  00000000  00000000  0003c97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000176af  00000000  00000000  0006146e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1365  00000000  00000000  00078b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004c7c  00000000  00000000  00149e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0014eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080069ec 	.word	0x080069ec

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080069ec 	.word	0x080069ec

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d0:	f000 fd93 	bl	8000cfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d4:	f000 f813 	bl	80001fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 fa74 	bl	80006c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80001dc:	f000 fa4c 	bl	8000678 <MX_DMA_Init>
  MX_I2C1_Init();
 80001e0:	f000 f860 	bl	80002a4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80001e4:	f000 f89e 	bl	8000324 <MX_I2C2_Init>
  MX_TIM15_Init();
 80001e8:	f000 f9c2 	bl	8000570 <MX_TIM15_Init>
  MX_TIM1_Init();
 80001ec:	f000 f8da 	bl	80003a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001f0:	f000 f966 	bl	80004c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  firmware_init();
 80001f4:	f005 fe06 	bl	8005e04 <firmware_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  firmware_update();
 80001f8:	f005 fe7c 	bl	8005ef4 <firmware_update>
 80001fc:	e7fc      	b.n	80001f8 <main+0x2c>

080001fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fe:	b580      	push	{r7, lr}
 8000200:	b096      	sub	sp, #88	; 0x58
 8000202:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2244      	movs	r2, #68	; 0x44
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f006 fbc0 	bl	8006992 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000212:	463b      	mov	r3, r7
 8000214:	2200      	movs	r2, #0
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	605a      	str	r2, [r3, #4]
 800021a:	609a      	str	r2, [r3, #8]
 800021c:	60da      	str	r2, [r3, #12]
 800021e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000220:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000224:	f003 f826 	bl	8003274 <HAL_PWREx_ControlVoltageScaling>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800022e:	f000 fabb 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000232:	2310      	movs	r3, #16
 8000234:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000236:	2301      	movs	r3, #1
 8000238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800023e:	2360      	movs	r3, #96	; 0x60
 8000240:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000242:	2302      	movs	r3, #2
 8000244:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000246:	2301      	movs	r3, #1
 8000248:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800024a:	2301      	movs	r3, #1
 800024c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800024e:	2310      	movs	r3, #16
 8000250:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000252:	2307      	movs	r3, #7
 8000254:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000256:	2302      	movs	r3, #2
 8000258:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800025a:	2302      	movs	r3, #2
 800025c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	4618      	mov	r0, r3
 8000264:	f003 f85c 	bl	8003320 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800026e:	f000 fa9b 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000276:	2303      	movs	r3, #3
 8000278:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000286:	463b      	mov	r3, r7
 8000288:	2101      	movs	r1, #1
 800028a:	4618      	mov	r0, r3
 800028c:	f003 fc5c 	bl	8003b48 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000296:	f000 fa87 	bl	80007a8 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3758      	adds	r7, #88	; 0x58
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002a8:	4b1b      	ldr	r3, [pc, #108]	; (8000318 <MX_I2C1_Init+0x74>)
 80002aa:	4a1c      	ldr	r2, [pc, #112]	; (800031c <MX_I2C1_Init+0x78>)
 80002ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80002ae:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <MX_I2C1_Init+0x74>)
 80002b0:	4a1b      	ldr	r2, [pc, #108]	; (8000320 <MX_I2C1_Init+0x7c>)
 80002b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 2;
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <MX_I2C1_Init+0x74>)
 80002b6:	2202      	movs	r2, #2
 80002b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ba:	4b17      	ldr	r3, [pc, #92]	; (8000318 <MX_I2C1_Init+0x74>)
 80002bc:	2201      	movs	r2, #1
 80002be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002c0:	4b15      	ldr	r3, [pc, #84]	; (8000318 <MX_I2C1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002c6:	4b14      	ldr	r3, [pc, #80]	; (8000318 <MX_I2C1_Init+0x74>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <MX_I2C1_Init+0x74>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002d2:	4b11      	ldr	r3, [pc, #68]	; (8000318 <MX_I2C1_Init+0x74>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <MX_I2C1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80002de:	480e      	ldr	r0, [pc, #56]	; (8000318 <MX_I2C1_Init+0x74>)
 80002e0:	f001 fac0 	bl	8001864 <HAL_I2C_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80002ea:	f000 fa5d 	bl	80007a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002ee:	2100      	movs	r1, #0
 80002f0:	4809      	ldr	r0, [pc, #36]	; (8000318 <MX_I2C1_Init+0x74>)
 80002f2:	f002 ff19 	bl	8003128 <HAL_I2CEx_ConfigAnalogFilter>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80002fc:	f000 fa54 	bl	80007a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000300:	2100      	movs	r1, #0
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <MX_I2C1_Init+0x74>)
 8000304:	f002 ff5b 	bl	80031be <HAL_I2CEx_ConfigDigitalFilter>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800030e:	f000 fa4b 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000028 	.word	0x20000028
 800031c:	40005400 	.word	0x40005400
 8000320:	00707cbb 	.word	0x00707cbb

08000324 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000328:	4b1b      	ldr	r3, [pc, #108]	; (8000398 <MX_I2C2_Init+0x74>)
 800032a:	4a1c      	ldr	r2, [pc, #112]	; (800039c <MX_I2C2_Init+0x78>)
 800032c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <MX_I2C2_Init+0x74>)
 8000330:	4a1b      	ldr	r2, [pc, #108]	; (80003a0 <MX_I2C2_Init+0x7c>)
 8000332:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 2;
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <MX_I2C2_Init+0x74>)
 8000336:	2202      	movs	r2, #2
 8000338:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800033a:	4b17      	ldr	r3, [pc, #92]	; (8000398 <MX_I2C2_Init+0x74>)
 800033c:	2201      	movs	r2, #1
 800033e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000340:	4b15      	ldr	r3, [pc, #84]	; (8000398 <MX_I2C2_Init+0x74>)
 8000342:	2200      	movs	r2, #0
 8000344:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000346:	4b14      	ldr	r3, [pc, #80]	; (8000398 <MX_I2C2_Init+0x74>)
 8000348:	2200      	movs	r2, #0
 800034a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800034c:	4b12      	ldr	r3, [pc, #72]	; (8000398 <MX_I2C2_Init+0x74>)
 800034e:	2200      	movs	r2, #0
 8000350:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000352:	4b11      	ldr	r3, [pc, #68]	; (8000398 <MX_I2C2_Init+0x74>)
 8000354:	2200      	movs	r2, #0
 8000356:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000358:	4b0f      	ldr	r3, [pc, #60]	; (8000398 <MX_I2C2_Init+0x74>)
 800035a:	2200      	movs	r2, #0
 800035c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800035e:	480e      	ldr	r0, [pc, #56]	; (8000398 <MX_I2C2_Init+0x74>)
 8000360:	f001 fa80 	bl	8001864 <HAL_I2C_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800036a:	f000 fa1d 	bl	80007a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800036e:	2100      	movs	r1, #0
 8000370:	4809      	ldr	r0, [pc, #36]	; (8000398 <MX_I2C2_Init+0x74>)
 8000372:	f002 fed9 	bl	8003128 <HAL_I2CEx_ConfigAnalogFilter>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800037c:	f000 fa14 	bl	80007a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000380:	2100      	movs	r1, #0
 8000382:	4805      	ldr	r0, [pc, #20]	; (8000398 <MX_I2C2_Init+0x74>)
 8000384:	f002 ff1b 	bl	80031be <HAL_I2CEx_ConfigDigitalFilter>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800038e:	f000 fa0b 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000007c 	.word	0x2000007c
 800039c:	40005800 	.word	0x40005800
 80003a0:	00707cbb 	.word	0x00707cbb

080003a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b096      	sub	sp, #88	; 0x58
 80003a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80003b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003ba:	2200      	movs	r2, #0
 80003bc:	601a      	str	r2, [r3, #0]
 80003be:	605a      	str	r2, [r3, #4]
 80003c0:	609a      	str	r2, [r3, #8]
 80003c2:	60da      	str	r2, [r3, #12]
 80003c4:	611a      	str	r2, [r3, #16]
 80003c6:	615a      	str	r2, [r3, #20]
 80003c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	222c      	movs	r2, #44	; 0x2c
 80003ce:	2100      	movs	r1, #0
 80003d0:	4618      	mov	r0, r3
 80003d2:	f006 fade 	bl	8006992 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <MX_TIM1_Init+0x114>)
 80003d8:	4a38      	ldr	r2, [pc, #224]	; (80004bc <MX_TIM1_Init+0x118>)
 80003da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003dc:	4b36      	ldr	r3, [pc, #216]	; (80004b8 <MX_TIM1_Init+0x114>)
 80003de:	2200      	movs	r2, #0
 80003e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003e2:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <MX_TIM1_Init+0x114>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39;
 80003e8:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <MX_TIM1_Init+0x114>)
 80003ea:	2227      	movs	r2, #39	; 0x27
 80003ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003ee:	4b32      	ldr	r3, [pc, #200]	; (80004b8 <MX_TIM1_Init+0x114>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <MX_TIM1_Init+0x114>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003fa:	4b2f      	ldr	r3, [pc, #188]	; (80004b8 <MX_TIM1_Init+0x114>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000400:	482d      	ldr	r0, [pc, #180]	; (80004b8 <MX_TIM1_Init+0x114>)
 8000402:	f004 f897 	bl	8004534 <HAL_TIM_PWM_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800040c:	f000 f9cc 	bl	80007a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000410:	2300      	movs	r3, #0
 8000412:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000414:	2300      	movs	r3, #0
 8000416:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000418:	2300      	movs	r3, #0
 800041a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800041c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000420:	4619      	mov	r1, r3
 8000422:	4825      	ldr	r0, [pc, #148]	; (80004b8 <MX_TIM1_Init+0x114>)
 8000424:	f005 fa26 	bl	8005874 <HAL_TIMEx_MasterConfigSynchronization>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800042e:	f000 f9bb 	bl	80007a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000432:	2360      	movs	r3, #96	; 0x60
 8000434:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800043a:	2300      	movs	r3, #0
 800043c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800043e:	2300      	movs	r3, #0
 8000440:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000442:	2300      	movs	r3, #0
 8000444:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000446:	2300      	movs	r3, #0
 8000448:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800044a:	2300      	movs	r3, #0
 800044c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800044e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000452:	2200      	movs	r2, #0
 8000454:	4619      	mov	r1, r3
 8000456:	4818      	ldr	r0, [pc, #96]	; (80004b8 <MX_TIM1_Init+0x114>)
 8000458:	f004 fd0a 	bl	8004e70 <HAL_TIM_PWM_ConfigChannel>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000462:	f000 f9a1 	bl	80007a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800046a:	2300      	movs	r3, #0
 800046c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800047a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800047e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000484:	2300      	movs	r3, #0
 8000486:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000488:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800048c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800048e:	2300      	movs	r3, #0
 8000490:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000492:	2300      	movs	r3, #0
 8000494:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	4619      	mov	r1, r3
 800049a:	4807      	ldr	r0, [pc, #28]	; (80004b8 <MX_TIM1_Init+0x114>)
 800049c:	f005 fa50 	bl	8005940 <HAL_TIMEx_ConfigBreakDeadTime>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80004a6:	f000 f97f 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004aa:	4803      	ldr	r0, [pc, #12]	; (80004b8 <MX_TIM1_Init+0x114>)
 80004ac:	f000 fb04 	bl	8000ab8 <HAL_TIM_MspPostInit>

}
 80004b0:	bf00      	nop
 80004b2:	3758      	adds	r7, #88	; 0x58
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	200000d0 	.word	0x200000d0
 80004bc:	40012c00 	.word	0x40012c00

080004c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d2:	463b      	mov	r3, r7
 80004d4:	2200      	movs	r2, #0
 80004d6:	601a      	str	r2, [r3, #0]
 80004d8:	605a      	str	r2, [r3, #4]
 80004da:	609a      	str	r2, [r3, #8]
 80004dc:	60da      	str	r2, [r3, #12]
 80004de:	611a      	str	r2, [r3, #16]
 80004e0:	615a      	str	r2, [r3, #20]
 80004e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004e4:	4b21      	ldr	r3, [pc, #132]	; (800056c <MX_TIM2_Init+0xac>)
 80004e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80004ec:	4b1f      	ldr	r3, [pc, #124]	; (800056c <MX_TIM2_Init+0xac>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004f2:	4b1e      	ldr	r3, [pc, #120]	; (800056c <MX_TIM2_Init+0xac>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 80004f8:	4b1c      	ldr	r3, [pc, #112]	; (800056c <MX_TIM2_Init+0xac>)
 80004fa:	2227      	movs	r2, #39	; 0x27
 80004fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fe:	4b1b      	ldr	r3, [pc, #108]	; (800056c <MX_TIM2_Init+0xac>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000504:	4b19      	ldr	r3, [pc, #100]	; (800056c <MX_TIM2_Init+0xac>)
 8000506:	2200      	movs	r2, #0
 8000508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800050a:	4818      	ldr	r0, [pc, #96]	; (800056c <MX_TIM2_Init+0xac>)
 800050c:	f004 f812 	bl	8004534 <HAL_TIM_PWM_Init>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000516:	f000 f947 	bl	80007a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800051a:	2300      	movs	r3, #0
 800051c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800051e:	2300      	movs	r3, #0
 8000520:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000522:	f107 031c 	add.w	r3, r7, #28
 8000526:	4619      	mov	r1, r3
 8000528:	4810      	ldr	r0, [pc, #64]	; (800056c <MX_TIM2_Init+0xac>)
 800052a:	f005 f9a3 	bl	8005874 <HAL_TIMEx_MasterConfigSynchronization>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000534:	f000 f938 	bl	80007a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000538:	2360      	movs	r3, #96	; 0x60
 800053a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000540:	2300      	movs	r3, #0
 8000542:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000548:	463b      	mov	r3, r7
 800054a:	2200      	movs	r2, #0
 800054c:	4619      	mov	r1, r3
 800054e:	4807      	ldr	r0, [pc, #28]	; (800056c <MX_TIM2_Init+0xac>)
 8000550:	f004 fc8e 	bl	8004e70 <HAL_TIM_PWM_ConfigChannel>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800055a:	f000 f925 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800055e:	4803      	ldr	r0, [pc, #12]	; (800056c <MX_TIM2_Init+0xac>)
 8000560:	f000 faaa 	bl	8000ab8 <HAL_TIM_MspPostInit>

}
 8000564:	bf00      	nop
 8000566:	3728      	adds	r7, #40	; 0x28
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	2000011c 	.word	0x2000011c

08000570 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	; 0x58
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000576:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000582:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
 8000592:	615a      	str	r2, [r3, #20]
 8000594:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	222c      	movs	r2, #44	; 0x2c
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f006 f9f8 	bl	8006992 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80005a2:	4b33      	ldr	r3, [pc, #204]	; (8000670 <MX_TIM15_Init+0x100>)
 80005a4:	4a33      	ldr	r2, [pc, #204]	; (8000674 <MX_TIM15_Init+0x104>)
 80005a6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 5;
 80005a8:	4b31      	ldr	r3, [pc, #196]	; (8000670 <MX_TIM15_Init+0x100>)
 80005aa:	2205      	movs	r2, #5
 80005ac:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ae:	4b30      	ldr	r3, [pc, #192]	; (8000670 <MX_TIM15_Init+0x100>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80005b4:	4b2e      	ldr	r3, [pc, #184]	; (8000670 <MX_TIM15_Init+0x100>)
 80005b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80005ba:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005bc:	4b2c      	ldr	r3, [pc, #176]	; (8000670 <MX_TIM15_Init+0x100>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80005c2:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <MX_TIM15_Init+0x100>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <MX_TIM15_Init+0x100>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80005ce:	4828      	ldr	r0, [pc, #160]	; (8000670 <MX_TIM15_Init+0x100>)
 80005d0:	f003 ffb0 	bl	8004534 <HAL_TIM_PWM_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80005da:	f000 f8e5 	bl	80007a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005de:	2300      	movs	r3, #0
 80005e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80005e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005ea:	4619      	mov	r1, r3
 80005ec:	4820      	ldr	r0, [pc, #128]	; (8000670 <MX_TIM15_Init+0x100>)
 80005ee:	f005 f941 	bl	8005874 <HAL_TIMEx_MasterConfigSynchronization>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80005f8:	f000 f8d6 	bl	80007a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005fc:	2360      	movs	r3, #96	; 0x60
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000600:	2300      	movs	r3, #0
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000604:	2300      	movs	r3, #0
 8000606:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000608:	2300      	movs	r3, #0
 800060a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000610:	2300      	movs	r3, #0
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000614:	2300      	movs	r3, #0
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000618:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800061c:	2200      	movs	r2, #0
 800061e:	4619      	mov	r1, r3
 8000620:	4813      	ldr	r0, [pc, #76]	; (8000670 <MX_TIM15_Init+0x100>)
 8000622:	f004 fc25 	bl	8004e70 <HAL_TIM_PWM_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800062c:	f000 f8bc 	bl	80007a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000648:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4619      	mov	r1, r3
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <MX_TIM15_Init+0x100>)
 8000654:	f005 f974 	bl	8005940 <HAL_TIMEx_ConfigBreakDeadTime>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 800065e:	f000 f8a3 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000662:	4803      	ldr	r0, [pc, #12]	; (8000670 <MX_TIM15_Init+0x100>)
 8000664:	f000 fa28 	bl	8000ab8 <HAL_TIM_MspPostInit>

}
 8000668:	bf00      	nop
 800066a:	3758      	adds	r7, #88	; 0x58
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000168 	.word	0x20000168
 8000674:	40014000 	.word	0x40014000

08000678 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_DMA_Init+0x48>)
 8000680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000682:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <MX_DMA_Init+0x48>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6493      	str	r3, [r2, #72]	; 0x48
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <MX_DMA_Init+0x48>)
 800068c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	200c      	movs	r0, #12
 800069c:	f000 fca1 	bl	8000fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80006a0:	200c      	movs	r0, #12
 80006a2:	f000 fcba 	bl	800101a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	200f      	movs	r0, #15
 80006ac:	f000 fc99 	bl	8000fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80006b0:	200f      	movs	r0, #15
 80006b2:	f000 fcb2 	bl	800101a <HAL_NVIC_EnableIRQ>

}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b31      	ldr	r3, [pc, #196]	; (80007a0 <MX_GPIO_Init+0xdc>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a30      	ldr	r2, [pc, #192]	; (80007a0 <MX_GPIO_Init+0xdc>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b2e      	ldr	r3, [pc, #184]	; (80007a0 <MX_GPIO_Init+0xdc>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b2b      	ldr	r3, [pc, #172]	; (80007a0 <MX_GPIO_Init+0xdc>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a2a      	ldr	r2, [pc, #168]	; (80007a0 <MX_GPIO_Init+0xdc>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <MX_GPIO_Init+0xdc>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENABLE_SD_Pin|LED_ERROR_Pin|ENABLE_CM4_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f242 0148 	movw	r1, #8264	; 0x2048
 8000710:	4824      	ldr	r0, [pc, #144]	; (80007a4 <MX_GPIO_Init+0xe0>)
 8000712:	f001 f875 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_STATUS_GPIO_Port, LED_STATUS_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800071c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000720:	f001 f86e 	bl	8001800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USER_BUTTON_1_Pin SD_CARD_SWITCH_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_1_Pin|SD_CARD_SWITCH_Pin;
 8000724:	f241 0304 	movw	r3, #4100	; 0x1004
 8000728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4619      	mov	r1, r3
 8000738:	481a      	ldr	r0, [pc, #104]	; (80007a4 <MX_GPIO_Init+0xe0>)
 800073a:	f000 fecf 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_SD_Pin LED_ERROR_Pin ENABLE_CM4_Pin */
  GPIO_InitStruct.Pin = ENABLE_SD_Pin|LED_ERROR_Pin|ENABLE_CM4_Pin;
 800073e:	f242 0348 	movw	r3, #8264	; 0x2048
 8000742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	4619      	mov	r1, r3
 8000756:	4813      	ldr	r0, [pc, #76]	; (80007a4 <MX_GPIO_Init+0xe0>)
 8000758:	f000 fec0 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_ON_BOARD_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_ON_BOARD_Pin;
 800075c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_ON_BOARD_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	4619      	mov	r1, r3
 8000770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000774:	f000 feb2 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_STATUS_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin;
 8000778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800077c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_STATUS_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4619      	mov	r1, r3
 8000790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000794:	f000 fea2 	bl	80014dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000798:	bf00      	nop
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000400 	.word	0x48000400

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_MspInit+0x44>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007be:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <HAL_MspInit+0x44>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6613      	str	r3, [r2, #96]	; 0x60
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_MspInit+0x44>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_MspInit+0x44>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	4a08      	ldr	r2, [pc, #32]	; (80007f8 <HAL_MspInit+0x44>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007dc:	6593      	str	r3, [r2, #88]	; 0x58
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <HAL_MspInit+0x44>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0a2      	sub	sp, #136	; 0x88
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	f107 0318 	add.w	r3, r7, #24
 8000818:	225c      	movs	r2, #92	; 0x5c
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f006 f8b8 	bl	8006992 <memset>
  if(hi2c->Instance==I2C1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a50      	ldr	r2, [pc, #320]	; (8000968 <HAL_I2C_MspInit+0x16c>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d14a      	bne.n	80008c2 <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000830:	2300      	movs	r3, #0
 8000832:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000834:	f107 0318 	add.w	r3, r7, #24
 8000838:	4618      	mov	r0, r3
 800083a:	f003 fb71 	bl	8003f20 <HAL_RCCEx_PeriphCLKConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000844:	f7ff ffb0 	bl	80007a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b48      	ldr	r3, [pc, #288]	; (800096c <HAL_I2C_MspInit+0x170>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084c:	4a47      	ldr	r2, [pc, #284]	; (800096c <HAL_I2C_MspInit+0x170>)
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000854:	4b45      	ldr	r3, [pc, #276]	; (800096c <HAL_I2C_MspInit+0x170>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000858:	f003 0301 	and.w	r3, r3, #1
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000860:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000864:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000866:	2312      	movs	r3, #18
 8000868:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000874:	2304      	movs	r3, #4
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f000 fe2a 	bl	80014dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <HAL_I2C_MspInit+0x170>)
 800088a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088c:	4a37      	ldr	r2, [pc, #220]	; (800096c <HAL_I2C_MspInit+0x170>)
 800088e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000892:	6593      	str	r3, [r2, #88]	; 0x58
 8000894:	4b35      	ldr	r3, [pc, #212]	; (800096c <HAL_I2C_MspInit+0x170>)
 8000896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800089c:	613b      	str	r3, [r7, #16]
 800089e:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	201f      	movs	r0, #31
 80008a6:	f000 fb9c 	bl	8000fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008aa:	201f      	movs	r0, #31
 80008ac:	f000 fbb5 	bl	800101a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2100      	movs	r1, #0
 80008b4:	2020      	movs	r0, #32
 80008b6:	f000 fb94 	bl	8000fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008ba:	2020      	movs	r0, #32
 80008bc:	f000 fbad 	bl	800101a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80008c0:	e04d      	b.n	800095e <HAL_I2C_MspInit+0x162>
  else if(hi2c->Instance==I2C2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a2a      	ldr	r2, [pc, #168]	; (8000970 <HAL_I2C_MspInit+0x174>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d148      	bne.n	800095e <HAL_I2C_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d4:	f107 0318 	add.w	r3, r7, #24
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 fb21 	bl	8003f20 <HAL_RCCEx_PeriphCLKConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <HAL_I2C_MspInit+0xec>
      Error_Handler();
 80008e4:	f7ff ff60 	bl	80007a8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e8:	4b20      	ldr	r3, [pc, #128]	; (800096c <HAL_I2C_MspInit+0x170>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ec:	4a1f      	ldr	r2, [pc, #124]	; (800096c <HAL_I2C_MspInit+0x170>)
 80008ee:	f043 0302 	orr.w	r3, r3, #2
 80008f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f4:	4b1d      	ldr	r3, [pc, #116]	; (800096c <HAL_I2C_MspInit+0x170>)
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f8:	f003 0302 	and.w	r3, r3, #2
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000900:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000904:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000906:	2312      	movs	r3, #18
 8000908:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000914:	2304      	movs	r3, #4
 8000916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800091e:	4619      	mov	r1, r3
 8000920:	4814      	ldr	r0, [pc, #80]	; (8000974 <HAL_I2C_MspInit+0x178>)
 8000922:	f000 fddb 	bl	80014dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_I2C_MspInit+0x170>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_I2C_MspInit+0x170>)
 800092c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000930:	6593      	str	r3, [r2, #88]	; 0x58
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_I2C_MspInit+0x170>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2021      	movs	r0, #33	; 0x21
 8000944:	f000 fb4d 	bl	8000fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000948:	2021      	movs	r0, #33	; 0x21
 800094a:	f000 fb66 	bl	800101a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2022      	movs	r0, #34	; 0x22
 8000954:	f000 fb45 	bl	8000fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8000958:	2022      	movs	r0, #34	; 0x22
 800095a:	f000 fb5e 	bl	800101a <HAL_NVIC_EnableIRQ>
}
 800095e:	bf00      	nop
 8000960:	3788      	adds	r7, #136	; 0x88
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40005400 	.word	0x40005400
 800096c:	40021000 	.word	0x40021000
 8000970:	40005800 	.word	0x40005800
 8000974:	48000400 	.word	0x48000400

08000978 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a45      	ldr	r2, [pc, #276]	; (8000a9c <HAL_TIM_PWM_MspInit+0x124>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d136      	bne.n	80009f8 <HAL_TIM_PWM_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800098a:	4b45      	ldr	r3, [pc, #276]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 800098c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098e:	4a44      	ldr	r2, [pc, #272]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000994:	6613      	str	r3, [r2, #96]	; 0x60
 8000996:	4b42      	ldr	r3, [pc, #264]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80009a2:	4b40      	ldr	r3, [pc, #256]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009a4:	4a40      	ldr	r2, [pc, #256]	; (8000aa8 <HAL_TIM_PWM_MspInit+0x130>)
 80009a6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 80009a8:	4b3e      	ldr	r3, [pc, #248]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009aa:	2207      	movs	r2, #7
 80009ac:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ae:	4b3d      	ldr	r3, [pc, #244]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009b0:	2210      	movs	r2, #16
 80009b2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80009b4:	4b3b      	ldr	r3, [pc, #236]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80009ba:	4b3a      	ldr	r3, [pc, #232]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009bc:	2280      	movs	r2, #128	; 0x80
 80009be:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009c0:	4b38      	ldr	r3, [pc, #224]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009c6:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009c8:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80009ce:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80009d4:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80009da:	4832      	ldr	r0, [pc, #200]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009dc:	f000 fb38 	bl	8001050 <HAL_DMA_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_TIM_PWM_MspInit+0x72>
    {
      Error_Handler();
 80009e6:	f7ff fedf 	bl	80007a8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009ee:	625a      	str	r2, [r3, #36]	; 0x24
 80009f0:	4a2c      	ldr	r2, [pc, #176]	; (8000aa4 <HAL_TIM_PWM_MspInit+0x12c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80009f6:	e04c      	b.n	8000a92 <HAL_TIM_PWM_MspInit+0x11a>
  else if(htim_pwm->Instance==TIM2)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a00:	d136      	bne.n	8000a70 <HAL_TIM_PWM_MspInit+0xf8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a02:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	4a26      	ldr	r2, [pc, #152]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a0e:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 8000a1a:	4b24      	ldr	r3, [pc, #144]	; (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a1c:	4a24      	ldr	r2, [pc, #144]	; (8000ab0 <HAL_TIM_PWM_MspInit+0x138>)
 8000a1e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a28:	2210      	movs	r2, #16
 8000a2a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000a32:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3e:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000a52:	4816      	ldr	r0, [pc, #88]	; (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a54:	f000 fafc 	bl	8001050 <HAL_DMA_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_TIM_PWM_MspInit+0xea>
      Error_Handler();
 8000a5e:	f7ff fea3 	bl	80007a8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a11      	ldr	r2, [pc, #68]	; (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
 8000a68:	4a10      	ldr	r2, [pc, #64]	; (8000aac <HAL_TIM_PWM_MspInit+0x134>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000a6e:	e010      	b.n	8000a92 <HAL_TIM_PWM_MspInit+0x11a>
  else if(htim_pwm->Instance==TIM15)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0f      	ldr	r2, [pc, #60]	; (8000ab4 <HAL_TIM_PWM_MspInit+0x13c>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d10b      	bne.n	8000a92 <HAL_TIM_PWM_MspInit+0x11a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7e:	4a08      	ldr	r2, [pc, #32]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a84:	6613      	str	r3, [r2, #96]	; 0x60
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <HAL_TIM_PWM_MspInit+0x128>)
 8000a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40012c00 	.word	0x40012c00
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	200001b4 	.word	0x200001b4
 8000aa8:	4002001c 	.word	0x4002001c
 8000aac:	200001fc 	.word	0x200001fc
 8000ab0:	40020058 	.word	0x40020058
 8000ab4:	40014000 	.word	0x40014000

08000ab8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a35      	ldr	r2, [pc, #212]	; (8000bac <HAL_TIM_MspPostInit+0xf4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d11e      	bne.n	8000b18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	4a34      	ldr	r2, [pc, #208]	; (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae6:	4b32      	ldr	r3, [pc, #200]	; (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b12:	f000 fce3 	bl	80014dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000b16:	e044      	b.n	8000ba2 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b20:	d11d      	bne.n	8000b5e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	4a22      	ldr	r2, [pc, #136]	; (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f000 fcc0 	bl	80014dc <HAL_GPIO_Init>
}
 8000b5c:	e021      	b.n	8000ba2 <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM15)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <HAL_TIM_MspPostInit+0xfc>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d11c      	bne.n	8000ba2 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6c:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <HAL_TIM_MspPostInit+0xf8>)
 8000b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b80:	2304      	movs	r3, #4
 8000b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8000b90:	230e      	movs	r3, #14
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9e:	f000 fc9d 	bl	80014dc <HAL_GPIO_Init>
}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40012c00 	.word	0x40012c00
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40014000 	.word	0x40014000

08000bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bbc:	e7fe      	b.n	8000bbc <NMI_Handler+0x4>

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f8ce 	bl	8000da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <DMA1_Channel2_IRQHandler+0x10>)
 8000c12:	f000 fb76 	bl	8001302 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200001b4 	.word	0x200001b4

08000c20 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <DMA1_Channel5_IRQHandler+0x10>)
 8000c26:	f000 fb6c 	bl	8001302 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001fc 	.word	0x200001fc

08000c34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <I2C1_EV_IRQHandler+0x10>)
 8000c3a:	f001 f833 	bl	8001ca4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000028 	.word	0x20000028

08000c48 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <I2C1_ER_IRQHandler+0x10>)
 8000c4e:	f001 f843 	bl	8001cd8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000028 	.word	0x20000028

08000c5c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <I2C2_EV_IRQHandler+0x10>)
 8000c62:	f001 f81f 	bl	8001ca4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000007c 	.word	0x2000007c

08000c70 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <I2C2_ER_IRQHandler+0x10>)
 8000c76:	f001 f82f 	bl	8001cd8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000007c 	.word	0x2000007c

08000c84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cac:	f7ff ffea 	bl	8000c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb2:	490d      	ldr	r1, [pc, #52]	; (8000ce8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <LoopForever+0xe>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	; (8000cf4 <LoopForever+0x16>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f005 fe65 	bl	80069a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cda:	f7ff fa77 	bl	80001cc <main>

08000cde <LoopForever>:

LoopForever:
    b LoopForever
 8000cde:	e7fe      	b.n	8000cde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ce0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cec:	08006a60 	.word	0x08006a60
  ldr r2, =_sbss
 8000cf0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cf4:	20000adc 	.word	0x20000adc

08000cf8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC1_IRQHandler>

08000cfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d04:	2003      	movs	r0, #3
 8000d06:	f000 f961 	bl	8000fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d0a:	200f      	movs	r0, #15
 8000d0c:	f000 f80e 	bl	8000d2c <HAL_InitTick>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d002      	beq.n	8000d1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	e001      	b.n	8000d20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d1c:	f7ff fd4a 	bl	80007b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d20:	79fb      	ldrb	r3, [r7, #7]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_InitTick+0x6c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d023      	beq.n	8000d88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_InitTick+0x70>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_InitTick+0x6c>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f96d 	bl	8001036 <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10f      	bne.n	8000d82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d809      	bhi.n	8000d7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f000 f937 	bl	8000fe2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <HAL_InitTick+0x74>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e007      	b.n	8000d8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	73fb      	strb	r3, [r7, #15]
 8000d80:	e004      	b.n	8000d8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	73fb      	strb	r3, [r7, #15]
 8000d86:	e001      	b.n	8000d8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	20000004 	.word	0x20000004

08000da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_IncTick+0x20>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x24>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <HAL_IncTick+0x24>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000244 	.word	0x20000244

08000dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <HAL_GetTick+0x14>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000244 	.word	0x20000244

08000de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff ffee 	bl	8000dcc <HAL_GetTick>
 8000df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dfc:	d005      	beq.n	8000e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_Delay+0x44>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4413      	add	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e0a:	bf00      	nop
 8000e0c:	f7ff ffde 	bl	8000dcc <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d8f7      	bhi.n	8000e0c <HAL_Delay+0x28>
  {
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000008 	.word	0x20000008

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db0b      	blt.n	8000eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 021f 	and.w	r2, r3, #31
 8000ea8:	4907      	ldr	r1, [pc, #28]	; (8000ec8 <__NVIC_EnableIRQ+0x38>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000e100 	.word	0xe000e100

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	; (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f98:	d301      	bcc.n	8000f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e00f      	b.n	8000fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <SysTick_Config+0x40>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa6:	210f      	movs	r1, #15
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f7ff ff8e 	bl	8000ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <SysTick_Config+0x40>)
 8000fb8:	2207      	movs	r2, #7
 8000fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	e000e010 	.word	0xe000e010

08000fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff29 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
 8000fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff4:	f7ff ff3e 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000ff8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f7ff ff8e 	bl	8000f20 <NVIC_EncodePriority>
 8001004:	4602      	mov	r2, r0
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff5d 	bl	8000ecc <__NVIC_SetPriority>
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff31 	bl	8000e90 <__NVIC_EnableIRQ>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ffa2 	bl	8000f88 <SysTick_Config>
 8001044:	4603      	mov	r3, r0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e098      	b.n	8001194 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	4b4d      	ldr	r3, [pc, #308]	; (80011a0 <HAL_DMA_Init+0x150>)
 800106a:	429a      	cmp	r2, r3
 800106c:	d80f      	bhi.n	800108e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	4b4b      	ldr	r3, [pc, #300]	; (80011a4 <HAL_DMA_Init+0x154>)
 8001076:	4413      	add	r3, r2
 8001078:	4a4b      	ldr	r2, [pc, #300]	; (80011a8 <HAL_DMA_Init+0x158>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	009a      	lsls	r2, r3, #2
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a48      	ldr	r2, [pc, #288]	; (80011ac <HAL_DMA_Init+0x15c>)
 800108a:	641a      	str	r2, [r3, #64]	; 0x40
 800108c:	e00e      	b.n	80010ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <HAL_DMA_Init+0x160>)
 8001096:	4413      	add	r3, r2
 8001098:	4a43      	ldr	r2, [pc, #268]	; (80011a8 <HAL_DMA_Init+0x158>)
 800109a:	fba2 2303 	umull	r2, r3, r2, r3
 800109e:	091b      	lsrs	r3, r3, #4
 80010a0:	009a      	lsls	r2, r3, #2
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <HAL_DMA_Init+0x164>)
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2202      	movs	r2, #2
 80010b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80010c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80010d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001106:	d039      	beq.n	800117c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	4a27      	ldr	r2, [pc, #156]	; (80011ac <HAL_DMA_Init+0x15c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d11a      	bne.n	8001148 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001112:	4b29      	ldr	r3, [pc, #164]	; (80011b8 <HAL_DMA_Init+0x168>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f003 031c 	and.w	r3, r3, #28
 800111e:	210f      	movs	r1, #15
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	4924      	ldr	r1, [pc, #144]	; (80011b8 <HAL_DMA_Init+0x168>)
 8001128:	4013      	ands	r3, r2
 800112a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_DMA_Init+0x168>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6859      	ldr	r1, [r3, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001138:	f003 031c 	and.w	r3, r3, #28
 800113c:	fa01 f303 	lsl.w	r3, r1, r3
 8001140:	491d      	ldr	r1, [pc, #116]	; (80011b8 <HAL_DMA_Init+0x168>)
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]
 8001146:	e019      	b.n	800117c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <HAL_DMA_Init+0x16c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001150:	f003 031c 	and.w	r3, r3, #28
 8001154:	210f      	movs	r1, #15
 8001156:	fa01 f303 	lsl.w	r3, r1, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	4917      	ldr	r1, [pc, #92]	; (80011bc <HAL_DMA_Init+0x16c>)
 800115e:	4013      	ands	r3, r2
 8001160:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_DMA_Init+0x16c>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6859      	ldr	r1, [r3, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f003 031c 	and.w	r3, r3, #28
 8001172:	fa01 f303 	lsl.w	r3, r1, r3
 8001176:	4911      	ldr	r1, [pc, #68]	; (80011bc <HAL_DMA_Init+0x16c>)
 8001178:	4313      	orrs	r3, r2
 800117a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	40020407 	.word	0x40020407
 80011a4:	bffdfff8 	.word	0xbffdfff8
 80011a8:	cccccccd 	.word	0xcccccccd
 80011ac:	40020000 	.word	0x40020000
 80011b0:	bffdfbf8 	.word	0xbffdfbf8
 80011b4:	40020400 	.word	0x40020400
 80011b8:	400200a8 	.word	0x400200a8
 80011bc:	400204a8 	.word	0x400204a8

080011c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
 80011cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_DMA_Start_IT+0x20>
 80011dc:	2302      	movs	r3, #2
 80011de:	e04b      	b.n	8001278 <HAL_DMA_Start_IT+0xb8>
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d13a      	bne.n	800126a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2202      	movs	r2, #2
 80011f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0201 	bic.w	r2, r2, #1
 8001210:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f000 f92f 	bl	800147c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	2b00      	cmp	r3, #0
 8001224:	d008      	beq.n	8001238 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 020e 	orr.w	r2, r2, #14
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e00f      	b.n	8001258 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0204 	bic.w	r2, r2, #4
 8001246:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 020a 	orr.w	r2, r2, #10
 8001256:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0201 	orr.w	r2, r2, #1
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e005      	b.n	8001276 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001272:	2302      	movs	r3, #2
 8001274:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001276:	7dfb      	ldrb	r3, [r7, #23]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d005      	beq.n	80012a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2204      	movs	r2, #4
 800129c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e029      	b.n	80012f8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f022 020e 	bic.w	r2, r2, #14
 80012b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0201 	bic.w	r2, r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	f003 021c 	and.w	r2, r3, #28
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	2101      	movs	r1, #1
 80012d2:	fa01 f202 	lsl.w	r2, r1, r2
 80012d6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	4798      	blx	r3
    }
  }
  return status;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b084      	sub	sp, #16
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f003 031c 	and.w	r3, r3, #28
 8001322:	2204      	movs	r2, #4
 8001324:	409a      	lsls	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4013      	ands	r3, r2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d026      	beq.n	800137c <HAL_DMA_IRQHandler+0x7a>
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d021      	beq.n	800137c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	2b00      	cmp	r3, #0
 8001344:	d107      	bne.n	8001356 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0204 	bic.w	r2, r2, #4
 8001354:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	f003 021c 	and.w	r2, r3, #28
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	2104      	movs	r1, #4
 8001364:	fa01 f202 	lsl.w	r2, r1, r2
 8001368:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	2b00      	cmp	r3, #0
 8001370:	d071      	beq.n	8001456 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800137a:	e06c      	b.n	8001456 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	f003 031c 	and.w	r3, r3, #28
 8001384:	2202      	movs	r2, #2
 8001386:	409a      	lsls	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4013      	ands	r3, r2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d02e      	beq.n	80013ee <HAL_DMA_IRQHandler+0xec>
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d029      	beq.n	80013ee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0320 	and.w	r3, r3, #32
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d10b      	bne.n	80013c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 020a 	bic.w	r2, r2, #10
 80013b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c4:	f003 021c 	and.w	r2, r3, #28
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	2102      	movs	r1, #2
 80013ce:	fa01 f202 	lsl.w	r2, r1, r2
 80013d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d038      	beq.n	8001456 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80013ec:	e033      	b.n	8001456 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f003 031c 	and.w	r3, r3, #28
 80013f6:	2208      	movs	r2, #8
 80013f8:	409a      	lsls	r2, r3
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d02a      	beq.n	8001458 <HAL_DMA_IRQHandler+0x156>
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d025      	beq.n	8001458 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 020e 	bic.w	r2, r2, #14
 800141a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001420:	f003 021c 	and.w	r2, r3, #28
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	2101      	movs	r1, #1
 800142a:	fa01 f202 	lsl.w	r2, r1, r2
 800142e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2201      	movs	r2, #1
 8001434:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800144a:	2b00      	cmp	r3, #0
 800144c:	d004      	beq.n	8001458 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001456:	bf00      	nop
 8001458:	bf00      	nop
}
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800146e:	b2db      	uxtb	r3, r3
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148e:	f003 021c 	and.w	r2, r3, #28
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f202 	lsl.w	r2, r1, r2
 800149c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b10      	cmp	r3, #16
 80014ac:	d108      	bne.n	80014c0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014be:	e007      	b.n	80014d0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ea:	e154      	b.n	8001796 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2101      	movs	r1, #1
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	4013      	ands	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8146 	beq.w	8001790 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 0303 	and.w	r3, r3, #3
 800150c:	2b01      	cmp	r3, #1
 800150e:	d005      	beq.n	800151c <HAL_GPIO_Init+0x40>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d130      	bne.n	800157e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001552:	2201      	movs	r2, #1
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	091b      	lsrs	r3, r3, #4
 8001568:	f003 0201 	and.w	r2, r3, #1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b03      	cmp	r3, #3
 8001588:	d017      	beq.n	80015ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43db      	mvns	r3, r3
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d123      	bne.n	800160e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	08da      	lsrs	r2, r3, #3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3208      	adds	r2, #8
 80015ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	220f      	movs	r2, #15
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	691a      	ldr	r2, [r3, #16]
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	08da      	lsrs	r2, r3, #3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3208      	adds	r2, #8
 8001608:	6939      	ldr	r1, [r7, #16]
 800160a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 0203 	and.w	r2, r3, #3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80a0 	beq.w	8001790 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001650:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <HAL_GPIO_Init+0x2d8>)
 8001652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001654:	4a57      	ldr	r2, [pc, #348]	; (80017b4 <HAL_GPIO_Init+0x2d8>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6613      	str	r3, [r2, #96]	; 0x60
 800165c:	4b55      	ldr	r3, [pc, #340]	; (80017b4 <HAL_GPIO_Init+0x2d8>)
 800165e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001668:	4a53      	ldr	r2, [pc, #332]	; (80017b8 <HAL_GPIO_Init+0x2dc>)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001692:	d019      	beq.n	80016c8 <HAL_GPIO_Init+0x1ec>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a49      	ldr	r2, [pc, #292]	; (80017bc <HAL_GPIO_Init+0x2e0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d013      	beq.n	80016c4 <HAL_GPIO_Init+0x1e8>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a48      	ldr	r2, [pc, #288]	; (80017c0 <HAL_GPIO_Init+0x2e4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d00d      	beq.n	80016c0 <HAL_GPIO_Init+0x1e4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a47      	ldr	r2, [pc, #284]	; (80017c4 <HAL_GPIO_Init+0x2e8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d007      	beq.n	80016bc <HAL_GPIO_Init+0x1e0>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a46      	ldr	r2, [pc, #280]	; (80017c8 <HAL_GPIO_Init+0x2ec>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d101      	bne.n	80016b8 <HAL_GPIO_Init+0x1dc>
 80016b4:	2304      	movs	r3, #4
 80016b6:	e008      	b.n	80016ca <HAL_GPIO_Init+0x1ee>
 80016b8:	2307      	movs	r3, #7
 80016ba:	e006      	b.n	80016ca <HAL_GPIO_Init+0x1ee>
 80016bc:	2303      	movs	r3, #3
 80016be:	e004      	b.n	80016ca <HAL_GPIO_Init+0x1ee>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e002      	b.n	80016ca <HAL_GPIO_Init+0x1ee>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_GPIO_Init+0x1ee>
 80016c8:	2300      	movs	r3, #0
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	4093      	lsls	r3, r2
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016da:	4937      	ldr	r1, [pc, #220]	; (80017b8 <HAL_GPIO_Init+0x2dc>)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016e8:	4b38      	ldr	r3, [pc, #224]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800170c:	4a2f      	ldr	r2, [pc, #188]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001712:	4b2e      	ldr	r3, [pc, #184]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	43db      	mvns	r3, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4313      	orrs	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001736:	4a25      	ldr	r2, [pc, #148]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	43db      	mvns	r3, r3
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	4013      	ands	r3, r2
 800174a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d003      	beq.n	8001760 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001760:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800178a:	4a10      	ldr	r2, [pc, #64]	; (80017cc <HAL_GPIO_Init+0x2f0>)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	fa22 f303 	lsr.w	r3, r2, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f47f aea3 	bne.w	80014ec <HAL_GPIO_Init+0x10>
  }
}
 80017a6:	bf00      	nop
 80017a8:	bf00      	nop
 80017aa:	371c      	adds	r7, #28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	48000400 	.word	0x48000400
 80017c0:	48000800 	.word	0x48000800
 80017c4:	48000c00 	.word	0x48000c00
 80017c8:	48001000 	.word	0x48001000
 80017cc:	40010400 	.word	0x40010400

080017d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	887b      	ldrh	r3, [r7, #2]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d002      	beq.n	80017ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
 80017ec:	e001      	b.n	80017f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr

08001800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	807b      	strh	r3, [r7, #2]
 800180c:	4613      	mov	r3, r2
 800180e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001810:	787b      	ldrb	r3, [r7, #1]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800181c:	e002      	b.n	8001824 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	43d9      	mvns	r1, r3
 800184e:	887b      	ldrh	r3, [r7, #2]
 8001850:	400b      	ands	r3, r1
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e08d      	b.n	8001992 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7fe ffb6 	bl	80007fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2224      	movs	r2, #36	; 0x24
 8001894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0201 	bic.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d107      	bne.n	80018de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	e006      	b.n	80018ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689a      	ldr	r2, [r3, #8]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d108      	bne.n	8001906 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	e007      	b.n	8001916 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001914:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001928:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001938:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691a      	ldr	r2, [r3, #16]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69d9      	ldr	r1, [r3, #28]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1a      	ldr	r2, [r3, #32]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2220      	movs	r2, #32
 800197e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	4613      	mov	r3, r2
 80019aa:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80019b8:	2b28      	cmp	r3, #40	; 0x28
 80019ba:	f040 8098 	bne.w	8001aee <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d105      	bne.n	80019d6 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e08c      	b.n	8001af0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80019d6:	f248 0101 	movw	r1, #32769	; 0x8001
 80019da:	68f8      	ldr	r0, [r7, #12]
 80019dc:	f001 fb46 	bl	800306c <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e080      	b.n	8001af0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b2a      	cmp	r3, #42	; 0x2a
 8001a00:	d12a      	bne.n	8001a58 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001a02:	2102      	movs	r1, #2
 8001a04:	68f8      	ldr	r0, [r7, #12]
 8001a06:	f001 fb31 	bl	800306c <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a18:	d11e      	bne.n	8001a58 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a28:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d012      	beq.n	8001a58 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a36:	4a30      	ldr	r2, [pc, #192]	; (8001af8 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8001a38:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fc1e 	bl	8001280 <HAL_DMA_Abort_IT>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a54:	4610      	mov	r0, r2
 8001a56:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2229      	movs	r2, #41	; 0x29
 8001a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2220      	movs	r2, #32
 8001a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a7c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	88fa      	ldrh	r2, [r7, #6]
 8001a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4a17      	ldr	r2, [pc, #92]	; (8001afc <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8001a9e:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	bf0c      	ite	eq
 8001aae:	2301      	moveq	r3, #1
 8001ab0:	2300      	movne	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	0c1b      	lsrs	r3, r3, #16
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d106      	bne.n	8001ad8 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8001aca:	7dfb      	ldrb	r3, [r7, #23]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8001ae0:	f248 0101 	movw	r1, #32769	; 0x8001
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f001 fa3d 	bl	8002f64 <I2C_Enable_IRQ>

    return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
  }
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	08002ec3 	.word	0x08002ec3
 8001afc:	08001df7 	.word	0x08001df7

08001b00 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001b1c:	2b28      	cmp	r3, #40	; 0x28
 8001b1e:	f040 8098 	bne.w	8001c52 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d105      	bne.n	8001b3a <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e08c      	b.n	8001c54 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001b3a:	f248 0102 	movw	r1, #32770	; 0x8002
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f001 fa94 	bl	800306c <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e080      	b.n	8001c54 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b29      	cmp	r3, #41	; 0x29
 8001b64:	d12a      	bne.n	8001bbc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001b66:	2101      	movs	r1, #1
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f001 fa7f 	bl	800306c <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b7c:	d11e      	bne.n	8001bbc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d012      	beq.n	8001bbc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	4a30      	ldr	r2, [pc, #192]	; (8001c5c <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fb6c 	bl	8001280 <HAL_DMA_Abort_IT>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d006      	beq.n	8001bbc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb4:	68fa      	ldr	r2, [r7, #12]
 8001bb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	222a      	movs	r2, #42	; 0x2a
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001be0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	68ba      	ldr	r2, [r7, #8]
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	88fa      	ldrh	r2, [r7, #6]
 8001bec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	bf0c      	ite	eq
 8001c12:	2301      	moveq	r3, #1
 8001c14:	2300      	movne	r3, #0
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2208      	movs	r2, #8
 8001c3a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001c44:	f248 0102 	movw	r1, #32770	; 0x8002
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f001 f98b 	bl	8002f64 <I2C_Enable_IRQ>

    return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
  }
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	08002ec3 	.word	0x08002ec3
 8001c60:	08001df7 	.word	0x08001df7

08001c64 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b20      	cmp	r3, #32
 8001c76:	d10d      	bne.n	8001c94 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2228      	movs	r2, #40	; 0x28
 8001c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a07      	ldr	r2, [pc, #28]	; (8001ca0 <HAL_I2C_EnableListen_IT+0x3c>)
 8001c84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f001 f96a 	bl	8002f64 <I2C_Enable_IRQ>

    return HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e000      	b.n	8001c96 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8001c94:	2302      	movs	r3, #2
  }
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	08001df7 	.word	0x08001df7

08001ca4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	68f9      	ldr	r1, [r7, #12]
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00f      	beq.n	8001d1a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00a      	beq.n	8001d1a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d18:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00f      	beq.n	8001d44 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00a      	beq.n	8001d44 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f043 0208 	orr.w	r2, r3, #8
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d42:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00f      	beq.n	8001d6e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00a      	beq.n	8001d6e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5c:	f043 0202 	orr.w	r2, r3, #2
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 030b 	and.w	r3, r3, #11
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001d7e:	68f9      	ldr	r1, [r7, #12]
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 ff63 	bl	8002c4c <I2C_ITError>
  }
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b083      	sub	sp, #12
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e06:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <I2C_Slave_ISR_IT+0x24>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e0e1      	b.n	8001fde <I2C_Slave_ISR_IT+0x1e8>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	f003 0320 	and.w	r3, r3, #32
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001e36:	6939      	ldr	r1, [r7, #16]
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 fda1 	bl	8002980 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d04b      	beq.n	8001ee0 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d046      	beq.n	8001ee0 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d128      	bne.n	8001eae <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b28      	cmp	r3, #40	; 0x28
 8001e66:	d108      	bne.n	8001e7a <I2C_Slave_ISR_IT+0x84>
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e6e:	d104      	bne.n	8001e7a <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001e70:	6939      	ldr	r1, [r7, #16]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 fe96 	bl	8002ba4 <I2C_ITListenCplt>
 8001e78:	e031      	b.n	8001ede <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b29      	cmp	r3, #41	; 0x29
 8001e84:	d10e      	bne.n	8001ea4 <I2C_Slave_ISR_IT+0xae>
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e8c:	d00a      	beq.n	8001ea4 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2210      	movs	r2, #16
 8001e94:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 ffef 	bl	8002e7a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 fc4a 	bl	8002736 <I2C_ITSlaveSeqCplt>
 8001ea2:	e01c      	b.n	8001ede <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001eac:	e08f      	b.n	8001fce <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2210      	movs	r2, #16
 8001eb4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eba:	f043 0204 	orr.w	r2, r3, #4
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <I2C_Slave_ISR_IT+0xda>
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ece:	d17e      	bne.n	8001fce <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 feb8 	bl	8002c4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001edc:	e077      	b.n	8001fce <I2C_Slave_ISR_IT+0x1d8>
 8001ede:	e076      	b.n	8001fce <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d02f      	beq.n	8001f4a <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d02a      	beq.n	8001f4a <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d018      	beq.n	8001f30 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	1c5a      	adds	r2, r3, #1
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d14b      	bne.n	8001fd2 <I2C_Slave_ISR_IT+0x1dc>
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f40:	d047      	beq.n	8001fd2 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 fbf7 	bl	8002736 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001f48:	e043      	b.n	8001fd2 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d004      	beq.n	8001f68 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001f5e:	6939      	ldr	r1, [r7, #16]
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f000 fb27 	bl	80025b4 <I2C_ITAddrCplt>
 8001f66:	e035      	b.n	8001fd4 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d030      	beq.n	8001fd4 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d02b      	beq.n	8001fd4 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d018      	beq.n	8001fb8 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	781a      	ldrb	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	851a      	strh	r2, [r3, #40]	; 0x28
 8001fb6:	e00d      	b.n	8001fd4 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fbe:	d002      	beq.n	8001fc6 <I2C_Slave_ISR_IT+0x1d0>
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 fbb5 	bl	8002736 <I2C_ITSlaveSeqCplt>
 8001fcc:	e002      	b.n	8001fd4 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001fce:	bf00      	nop
 8001fd0:	e000      	b.n	8001fd4 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001fd2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b088      	sub	sp, #32
 8001fea:	af02      	add	r7, sp, #8
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <I2C_Master_ISR_DMA+0x1a>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e0d9      	b.n	80021b4 <I2C_Master_ISR_DMA+0x1ce>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	d016      	beq.n	8002040 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002018:	2b00      	cmp	r3, #0
 800201a:	d011      	beq.n	8002040 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2210      	movs	r2, #16
 8002022:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	f043 0204 	orr.w	r2, r3, #4
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002030:	2120      	movs	r1, #32
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 ff96 	bl	8002f64 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 ff1e 	bl	8002e7a <I2C_Flush_TXDR>
 800203e:	e0b4      	b.n	80021aa <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002046:	2b00      	cmp	r3, #0
 8002048:	d071      	beq.n	800212e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002050:	2b00      	cmp	r3, #0
 8002052:	d06c      	beq.n	800212e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002062:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002068:	b29b      	uxth	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d04e      	beq.n	800210c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	b29b      	uxth	r3, r3
 8002076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800207a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	2bff      	cmp	r3, #255	; 0xff
 8002084:	d906      	bls.n	8002094 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	22ff      	movs	r2, #255	; 0xff
 800208a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800208c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	e010      	b.n	80020b6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29a      	uxth	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020a6:	d003      	beq.n	80020b0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	e002      	b.n	80020b6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80020b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	8a79      	ldrh	r1, [r7, #18]
 80020be:	2300      	movs	r3, #0
 80020c0:	9300      	str	r3, [sp, #0]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 ff1b 	bl	8002f00 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b22      	cmp	r3, #34	; 0x22
 80020e6:	d108      	bne.n	80020fa <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020f6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80020f8:	e057      	b.n	80021aa <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002108:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800210a:	e04e      	b.n	80021aa <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800211a:	d003      	beq.n	8002124 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 facd 	bl	80026bc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002122:	e042      	b.n	80021aa <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002124:	2140      	movs	r1, #64	; 0x40
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	f000 fd90 	bl	8002c4c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800212c:	e03d      	b.n	80021aa <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b00      	cmp	r3, #0
 8002136:	d028      	beq.n	800218a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800213e:	2b00      	cmp	r3, #0
 8002140:	d023      	beq.n	800218a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d119      	bne.n	8002180 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800215a:	d025      	beq.n	80021a8 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002160:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002164:	d108      	bne.n	8002178 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002174:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002176:	e017      	b.n	80021a8 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 fa9f 	bl	80026bc <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800217e:	e013      	b.n	80021a8 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002180:	2140      	movs	r1, #64	; 0x40
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 fd62 	bl	8002c4c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002188:	e00e      	b.n	80021a8 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800219a:	2b00      	cmp	r3, #0
 800219c:	d005      	beq.n	80021aa <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fb25 	bl	80027f0 <I2C_ITMasterCplt>
 80021a6:	e000      	b.n	80021aa <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80021a8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3718      	adds	r7, #24
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}

080021bc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	60b9      	str	r1, [r7, #8]
 80021c6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80021c8:	4b8d      	ldr	r3, [pc, #564]	; (8002400 <I2C_Mem_ISR_DMA+0x244>)
 80021ca:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <I2C_Mem_ISR_DMA+0x1e>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e10e      	b.n	80023f8 <I2C_Mem_ISR_DMA+0x23c>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f003 0310 	and.w	r3, r3, #16
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d016      	beq.n	800221a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d011      	beq.n	800221a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2210      	movs	r2, #16
 80021fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f043 0204 	orr.w	r2, r3, #4
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800220a:	2120      	movs	r1, #32
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f000 fea9 	bl	8002f64 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 fe31 	bl	8002e7a <I2C_Flush_TXDR>
 8002218:	e0e9      	b.n	80023ee <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00e      	beq.n	8002242 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002236:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f04f 32ff 	mov.w	r2, #4294967295
 800223e:	651a      	str	r2, [r3, #80]	; 0x50
 8002240:	e0d5      	b.n	80023ee <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002248:	2b00      	cmp	r3, #0
 800224a:	d05f      	beq.n	800230c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002252:	2b00      	cmp	r3, #0
 8002254:	d05a      	beq.n	800230c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002256:	2101      	movs	r1, #1
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 ff07 	bl	800306c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800225e:	2110      	movs	r1, #16
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fe7f 	bl	8002f64 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226a:	b29b      	uxth	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d048      	beq.n	8002302 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29b      	uxth	r3, r3
 8002276:	2bff      	cmp	r3, #255	; 0xff
 8002278:	d910      	bls.n	800229c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	22ff      	movs	r2, #255	; 0xff
 800227e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002284:	b299      	uxth	r1, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800228a:	b2da      	uxtb	r2, r3
 800228c:	2300      	movs	r3, #0
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f000 fe33 	bl	8002f00 <I2C_TransferConfig>
 800229a:	e011      	b.n	80022c0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022aa:	b299      	uxth	r1, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	2300      	movs	r3, #0
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 fe20 	bl	8002f00 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b22      	cmp	r3, #34	; 0x22
 80022dc:	d108      	bne.n	80022f0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80022ee:	e07e      	b.n	80023ee <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022fe:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002300:	e075      	b.n	80023ee <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002302:	2140      	movs	r1, #64	; 0x40
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fca1 	bl	8002c4c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800230a:	e070      	b.n	80023ee <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d05d      	beq.n	80023d2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800231c:	2b00      	cmp	r3, #0
 800231e:	d058      	beq.n	80023d2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002320:	2101      	movs	r1, #1
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fea2 	bl	800306c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8002328:	2110      	movs	r1, #16
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 fe1a 	bl	8002f64 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b22      	cmp	r3, #34	; 0x22
 800233a:	d101      	bne.n	8002340 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <I2C_Mem_ISR_DMA+0x248>)
 800233e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	2bff      	cmp	r3, #255	; 0xff
 8002348:	d910      	bls.n	800236c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	22ff      	movs	r2, #255	; 0xff
 800234e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	b299      	uxth	r1, r3
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	b2da      	uxtb	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f000 fdcb 	bl	8002f00 <I2C_TransferConfig>
 800236a:	e011      	b.n	8002390 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237a:	b299      	uxth	r1, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	b2da      	uxtb	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fdb8 	bl	8002f00 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29a      	uxth	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b22      	cmp	r3, #34	; 0x22
 80023ac:	d108      	bne.n	80023c0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023bc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023be:	e016      	b.n	80023ee <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ce:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023d0:	e00d      	b.n	80023ee <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f003 0320 	and.w	r3, r3, #32
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fa01 	bl	80027f0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	80002000 	.word	0x80002000
 8002404:	80002400 	.word	0x80002400

08002408 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <I2C_Slave_ISR_DMA+0x24>
 8002428:	2302      	movs	r3, #2
 800242a:	e0bf      	b.n	80025ac <I2C_Slave_ISR_DMA+0x1a4>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f003 0320 	and.w	r3, r3, #32
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fa98 	bl	8002980 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 8095 	beq.w	8002586 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 808f 	beq.w	8002586 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d104      	bne.n	800247c <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002478:	2b00      	cmp	r3, #0
 800247a:	d07d      	beq.n	8002578 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00c      	beq.n	800249e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d007      	beq.n	800249e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 800249a:	2301      	movs	r3, #1
 800249c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d007      	beq.n	80024c0 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80024bc:	2301      	movs	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d128      	bne.n	8002518 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b28      	cmp	r3, #40	; 0x28
 80024d0:	d108      	bne.n	80024e4 <I2C_Slave_ISR_DMA+0xdc>
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80024d8:	d104      	bne.n	80024e4 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 fb61 	bl	8002ba4 <I2C_ITListenCplt>
 80024e2:	e048      	b.n	8002576 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b29      	cmp	r3, #41	; 0x29
 80024ee:	d10e      	bne.n	800250e <I2C_Slave_ISR_DMA+0x106>
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024f6:	d00a      	beq.n	800250e <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2210      	movs	r2, #16
 80024fe:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 fcba 	bl	8002e7a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f915 	bl	8002736 <I2C_ITSlaveSeqCplt>
 800250c:	e033      	b.n	8002576 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2210      	movs	r2, #16
 8002514:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002516:	e034      	b.n	8002582 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2210      	movs	r2, #16
 800251e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002524:	f043 0204 	orr.w	r2, r3, #4
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002532:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <I2C_Slave_ISR_DMA+0x13a>
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002540:	d11f      	bne.n	8002582 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002542:	7dfb      	ldrb	r3, [r7, #23]
 8002544:	2b21      	cmp	r3, #33	; 0x21
 8002546:	d002      	beq.n	800254e <I2C_Slave_ISR_DMA+0x146>
 8002548:	7dfb      	ldrb	r3, [r7, #23]
 800254a:	2b29      	cmp	r3, #41	; 0x29
 800254c:	d103      	bne.n	8002556 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2221      	movs	r2, #33	; 0x21
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
 8002554:	e008      	b.n	8002568 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002556:	7dfb      	ldrb	r3, [r7, #23]
 8002558:	2b22      	cmp	r3, #34	; 0x22
 800255a:	d002      	beq.n	8002562 <I2C_Slave_ISR_DMA+0x15a>
 800255c:	7dfb      	ldrb	r3, [r7, #23]
 800255e:	2b2a      	cmp	r3, #42	; 0x2a
 8002560:	d102      	bne.n	8002568 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2222      	movs	r2, #34	; 0x22
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	4619      	mov	r1, r3
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fb6c 	bl	8002c4c <I2C_ITError>
      if (treatdmanack == 1U)
 8002574:	e005      	b.n	8002582 <I2C_Slave_ISR_DMA+0x17a>
 8002576:	e004      	b.n	8002582 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2210      	movs	r2, #16
 800257e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002580:	e00f      	b.n	80025a2 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 8002582:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002584:	e00d      	b.n	80025a2 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f809 	bl	80025b4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025ca:	2b28      	cmp	r3, #40	; 0x28
 80025cc:	d16a      	bne.n	80026a4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	0c1b      	lsrs	r3, r3, #16
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	0c1b      	lsrs	r3, r3, #16
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80025ec:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025fa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	b29b      	uxth	r3, r3
 8002604:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002608:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d138      	bne.n	8002684 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002612:	897b      	ldrh	r3, [r7, #10]
 8002614:	09db      	lsrs	r3, r3, #7
 8002616:	b29a      	uxth	r2, r3
 8002618:	89bb      	ldrh	r3, [r7, #12]
 800261a:	4053      	eors	r3, r2
 800261c:	b29b      	uxth	r3, r3
 800261e:	f003 0306 	and.w	r3, r3, #6
 8002622:	2b00      	cmp	r3, #0
 8002624:	d11c      	bne.n	8002660 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002626:	897b      	ldrh	r3, [r7, #10]
 8002628:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002638:	2b02      	cmp	r3, #2
 800263a:	d13b      	bne.n	80026b4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2208      	movs	r2, #8
 8002648:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002652:	89ba      	ldrh	r2, [r7, #12]
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	4619      	mov	r1, r3
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f003 fd8f 	bl	800617c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800265e:	e029      	b.n	80026b4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002660:	893b      	ldrh	r3, [r7, #8]
 8002662:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fcff 	bl	800306c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002676:	89ba      	ldrh	r2, [r7, #12]
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	4619      	mov	r1, r3
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f003 fd7d 	bl	800617c <HAL_I2C_AddrCallback>
}
 8002682:	e017      	b.n	80026b4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fcef 	bl	800306c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002696:	89ba      	ldrh	r2, [r7, #12]
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f003 fd6d 	bl	800617c <HAL_I2C_AddrCallback>
}
 80026a2:	e007      	b.n	80026b4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2208      	movs	r2, #8
 80026aa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b21      	cmp	r3, #33	; 0x21
 80026d6:	d115      	bne.n	8002704 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2211      	movs	r2, #17
 80026e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026ec:	2101      	movs	r1, #1
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fcbc 	bl	800306c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fb46 	bl	8001d8e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002702:	e014      	b.n	800272e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2220      	movs	r2, #32
 8002708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2212      	movs	r2, #18
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002718:	2102      	movs	r1, #2
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 fca6 	bl	800306c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff fb3a 	bl	8001da2 <HAL_I2C_MasterRxCpltCallback>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	e00c      	b.n	8002784 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002782:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b29      	cmp	r3, #41	; 0x29
 800278e:	d112      	bne.n	80027b6 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2228      	movs	r2, #40	; 0x28
 8002794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2221      	movs	r2, #33	; 0x21
 800279c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800279e:	2101      	movs	r1, #1
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fc63 	bl	800306c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f003 fd0f 	bl	80061d2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80027b4:	e017      	b.n	80027e6 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b2a      	cmp	r3, #42	; 0x2a
 80027c0:	d111      	bne.n	80027e6 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2228      	movs	r2, #40	; 0x28
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2222      	movs	r2, #34	; 0x22
 80027ce:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80027d0:	2102      	movs	r1, #2
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fc4a 	bl	800306c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f003 fce4 	bl	80061ae <HAL_I2C_SlaveRxCpltCallback>
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2220      	movs	r2, #32
 8002804:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b21      	cmp	r3, #33	; 0x21
 8002810:	d107      	bne.n	8002822 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002812:	2101      	movs	r1, #1
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fc29 	bl	800306c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2211      	movs	r2, #17
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
 8002820:	e00c      	b.n	800283c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b22      	cmp	r3, #34	; 0x22
 800282c:	d106      	bne.n	800283c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800282e:	2102      	movs	r1, #2
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fc1b 	bl	800306c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2212      	movs	r2, #18
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <I2C_ITMasterCplt+0x188>)
 8002848:	400b      	ands	r3, r1
 800284a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a49      	ldr	r2, [pc, #292]	; (800297c <I2C_ITMasterCplt+0x18c>)
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2210      	movs	r2, #16
 8002868:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	f043 0204 	orr.w	r2, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b60      	cmp	r3, #96	; 0x60
 8002880:	d10a      	bne.n	8002898 <I2C_ITMasterCplt+0xa8>
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	b2db      	uxtb	r3, r3
 8002894:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002896:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 faee 	bl	8002e7a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b60      	cmp	r3, #96	; 0x60
 80028ae:	d002      	beq.n	80028b6 <I2C_ITMasterCplt+0xc6>
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d006      	beq.n	80028c4 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	4619      	mov	r1, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f9c5 	bl	8002c4c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80028c2:	e054      	b.n	800296e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b21      	cmp	r3, #33	; 0x21
 80028ce:	d124      	bne.n	800291a <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b40      	cmp	r3, #64	; 0x40
 80028e8:	d10b      	bne.n	8002902 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff fa5b 	bl	8001db6 <HAL_I2C_MemTxCpltCallback>
}
 8002900:	e035      	b.n	800296e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff fa3b 	bl	8001d8e <HAL_I2C_MasterTxCpltCallback>
}
 8002918:	e029      	b.n	800296e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b22      	cmp	r3, #34	; 0x22
 8002924:	d123      	bne.n	800296e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b40      	cmp	r3, #64	; 0x40
 800293e:	d10b      	bne.n	8002958 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff fa3a 	bl	8001dca <HAL_I2C_MemRxCpltCallback>
}
 8002956:	e00a      	b.n	800296e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff fa1a 	bl	8001da2 <HAL_I2C_MasterRxCpltCallback>
}
 800296e:	bf00      	nop
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	fe00e800 	.word	0xfe00e800
 800297c:	ffff0000 	.word	0xffff0000

08002980 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2220      	movs	r2, #32
 80029a4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	2b21      	cmp	r3, #33	; 0x21
 80029aa:	d002      	beq.n	80029b2 <I2C_ITSlaveCplt+0x32>
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	2b29      	cmp	r3, #41	; 0x29
 80029b0:	d108      	bne.n	80029c4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80029b2:	f248 0101 	movw	r1, #32769	; 0x8001
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fb58 	bl	800306c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2221      	movs	r2, #33	; 0x21
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
 80029c2:	e019      	b.n	80029f8 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	2b22      	cmp	r3, #34	; 0x22
 80029c8:	d002      	beq.n	80029d0 <I2C_ITSlaveCplt+0x50>
 80029ca:	7bfb      	ldrb	r3, [r7, #15]
 80029cc:	2b2a      	cmp	r3, #42	; 0x2a
 80029ce:	d108      	bne.n	80029e2 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80029d0:	f248 0102 	movw	r1, #32770	; 0x8002
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fb49 	bl	800306c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2222      	movs	r2, #34	; 0x22
 80029de:	631a      	str	r2, [r3, #48]	; 0x30
 80029e0:	e00a      	b.n	80029f8 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b28      	cmp	r3, #40	; 0x28
 80029e6:	d107      	bne.n	80029f8 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80029e8:	f248 0103 	movw	r1, #32771	; 0x8003
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fb3d 	bl	800306c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a06:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6859      	ldr	r1, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	4b62      	ldr	r3, [pc, #392]	; (8002b9c <I2C_ITSlaveCplt+0x21c>)
 8002a14:	400b      	ands	r3, r1
 8002a16:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 fa2e 	bl	8002e7a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d013      	beq.n	8002a50 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a36:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01f      	beq.n	8002a80 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a4e:	e017      	b.n	8002a80 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d012      	beq.n	8002a80 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a68:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d006      	beq.n	8002a80 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d020      	beq.n	8002acc <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f023 0304 	bic.w	r3, r3, #4
 8002a90:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d005      	beq.n	8002ae2 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f043 0204 	orr.w	r2, r3, #4
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d010      	beq.n	8002b1a <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	4619      	mov	r1, r3
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f8a4 	bl	8002c4c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b28      	cmp	r3, #40	; 0x28
 8002b0e:	d141      	bne.n	8002b94 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002b10:	6979      	ldr	r1, [r7, #20]
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f846 	bl	8002ba4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b18:	e03c      	b.n	8002b94 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b22:	d014      	beq.n	8002b4e <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff fe06 	bl	8002736 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ba0 <I2C_ITSlaveCplt+0x220>)
 8002b2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f003 fb06 	bl	8006158 <HAL_I2C_ListenCpltCallback>
}
 8002b4c:	e022      	b.n	8002b94 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b22      	cmp	r3, #34	; 0x22
 8002b58:	d10e      	bne.n	8002b78 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f003 fb1c 	bl	80061ae <HAL_I2C_SlaveRxCpltCallback>
}
 8002b76:	e00d      	b.n	8002b94 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f003 fb1f 	bl	80061d2 <HAL_I2C_SlaveTxCpltCallback>
}
 8002b94:	bf00      	nop
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	fe00e800 	.word	0xfe00e800
 8002ba0:	ffff0000 	.word	0xffff0000

08002ba4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a25      	ldr	r2, [pc, #148]	; (8002c48 <I2C_ITListenCplt+0xa4>)
 8002bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d022      	beq.n	8002c20 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d012      	beq.n	8002c20 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	f043 0204 	orr.w	r2, r3, #4
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c20:	f248 0103 	movw	r1, #32771	; 0x8003
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 fa21 	bl	800306c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2210      	movs	r2, #16
 8002c30:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f003 fa8c 	bl	8006158 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	ffff0000 	.word	0xffff0000

08002c4c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c5c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a6d      	ldr	r2, [pc, #436]	; (8002e20 <I2C_ITError+0x1d4>)
 8002c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b28      	cmp	r3, #40	; 0x28
 8002c82:	d005      	beq.n	8002c90 <I2C_ITError+0x44>
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b29      	cmp	r3, #41	; 0x29
 8002c88:	d002      	beq.n	8002c90 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8002c8e:	d10b      	bne.n	8002ca8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002c90:	2103      	movs	r1, #3
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f9ea 	bl	800306c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2228      	movs	r2, #40	; 0x28
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a60      	ldr	r2, [pc, #384]	; (8002e24 <I2C_ITError+0x1d8>)
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ca6:	e030      	b.n	8002d0a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ca8:	f248 0103 	movw	r1, #32771	; 0x8003
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f9dd 	bl	800306c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f8e1 	bl	8002e7a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b60      	cmp	r3, #96	; 0x60
 8002cc2:	d01f      	beq.n	8002d04 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d114      	bne.n	8002d04 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d109      	bne.n	8002cfc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2210      	movs	r2, #16
 8002cee:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f043 0204 	orr.w	r2, r3, #4
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2220      	movs	r2, #32
 8002d02:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d039      	beq.n	8002d8c <I2C_ITError+0x140>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b11      	cmp	r3, #17
 8002d1c:	d002      	beq.n	8002d24 <I2C_ITError+0xd8>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b21      	cmp	r3, #33	; 0x21
 8002d22:	d133      	bne.n	8002d8c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d32:	d107      	bne.n	8002d44 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d42:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7fe fb89 	bl	8001460 <HAL_DMA_GetState>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d017      	beq.n	8002d84 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	4a33      	ldr	r2, [pc, #204]	; (8002e28 <I2C_ITError+0x1dc>)
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe fa89 	bl	8001280 <HAL_DMA_Abort_IT>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d04d      	beq.n	8002e10 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d82:	e045      	b.n	8002e10 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f851 	bl	8002e2c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d8a:	e041      	b.n	8002e10 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d039      	beq.n	8002e08 <I2C_ITError+0x1bc>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b12      	cmp	r3, #18
 8002d98:	d002      	beq.n	8002da0 <I2C_ITError+0x154>
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	2b22      	cmp	r3, #34	; 0x22
 8002d9e:	d133      	bne.n	8002e08 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dae:	d107      	bne.n	8002dc0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dbe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fe fb4b 	bl	8001460 <HAL_DMA_GetState>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d017      	beq.n	8002e00 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <I2C_ITError+0x1dc>)
 8002dd6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7fe fa4b 	bl	8001280 <HAL_DMA_Abort_IT>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d011      	beq.n	8002e14 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002dfe:	e009      	b.n	8002e14 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f813 	bl	8002e2c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e06:	e005      	b.n	8002e14 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f80f 	bl	8002e2c <I2C_TreatErrorCallback>
  }
}
 8002e0e:	e002      	b.n	8002e16 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002e10:	bf00      	nop
 8002e12:	e000      	b.n	8002e16 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e14:	bf00      	nop
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	ffff0000 	.word	0xffff0000
 8002e24:	08001df7 	.word	0x08001df7
 8002e28:	08002ec3 	.word	0x08002ec3

08002e2c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b60      	cmp	r3, #96	; 0x60
 8002e3e:	d10e      	bne.n	8002e5e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f003 f9e3 	bl	8006222 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e5c:	e009      	b.n	8002e72 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f003 f9c2 	bl	80061f6 <HAL_I2C_ErrorCallback>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d103      	bne.n	8002e98 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2200      	movs	r2, #0
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d007      	beq.n	8002eb6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699a      	ldr	r2, [r3, #24]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	619a      	str	r2, [r3, #24]
  }
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002edc:	2200      	movs	r2, #0
 8002ede:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eec:	2200      	movs	r2, #0
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f7ff ff9b 	bl	8002e2c <I2C_TreatErrorCallback>
}
 8002ef6:	bf00      	nop
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607b      	str	r3, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	817b      	strh	r3, [r7, #10]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f12:	897b      	ldrh	r3, [r7, #10]
 8002f14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f18:	7a7b      	ldrb	r3, [r7, #9]
 8002f1a:	041b      	lsls	r3, r3, #16
 8002f1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	0d5b      	lsrs	r3, r3, #21
 8002f3a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <I2C_TransferConfig+0x60>)
 8002f40:	430b      	orrs	r3, r1
 8002f42:	43db      	mvns	r3, r3
 8002f44:	ea02 0103 	and.w	r1, r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f52:	bf00      	nop
 8002f54:	371c      	adds	r7, #28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	03ff63ff 	.word	0x03ff63ff

08002f64 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f78:	4a39      	ldr	r2, [pc, #228]	; (8003060 <I2C_Enable_IRQ+0xfc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d032      	beq.n	8002fe4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8002f82:	4a38      	ldr	r2, [pc, #224]	; (8003064 <I2C_Enable_IRQ+0x100>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d02d      	beq.n	8002fe4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8002f8c:	4a36      	ldr	r2, [pc, #216]	; (8003068 <I2C_Enable_IRQ+0x104>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d028      	beq.n	8002fe4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002f92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	da03      	bge.n	8002fa2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002fa0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002fb2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002fb4:	887b      	ldrh	r3, [r7, #2]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002fc4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002fc6:	887b      	ldrh	r3, [r7, #2]
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d103      	bne.n	8002fd4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002fd2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fd4:	887b      	ldrh	r3, [r7, #2]
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d133      	bne.n	8003042 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f043 0320 	orr.w	r3, r3, #32
 8002fe0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002fe2:	e02e      	b.n	8003042 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002fe4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	da03      	bge.n	8002ff4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002ff2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002ff4:	887b      	ldrh	r3, [r7, #2]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003004:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003006:	887b      	ldrh	r3, [r7, #2]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003016:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003018:	887b      	ldrh	r3, [r7, #2]
 800301a:	2b10      	cmp	r3, #16
 800301c:	d103      	bne.n	8003026 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003024:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	2b20      	cmp	r3, #32
 800302a:	d103      	bne.n	8003034 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003032:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003034:	887b      	ldrh	r3, [r7, #2]
 8003036:	2b40      	cmp	r3, #64	; 0x40
 8003038:	d103      	bne.n	8003042 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003040:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	08001fe7 	.word	0x08001fe7
 8003064:	08002409 	.word	0x08002409
 8003068:	080021bd 	.word	0x080021bd

0800306c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800307c:	887b      	ldrh	r3, [r7, #2]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00f      	beq.n	80030a6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800308c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800309a:	2b28      	cmp	r3, #40	; 0x28
 800309c:	d003      	beq.n	80030a6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80030a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80030a6:	887b      	ldrh	r3, [r7, #2]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00f      	beq.n	80030d0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80030b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030c4:	2b28      	cmp	r3, #40	; 0x28
 80030c6:	d003      	beq.n	80030d0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80030ce:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80030d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	da03      	bge.n	80030e0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80030de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80030e0:	887b      	ldrh	r3, [r7, #2]
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	d103      	bne.n	80030ee <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80030ee:	887b      	ldrh	r3, [r7, #2]
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d103      	bne.n	80030fc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f043 0320 	orr.w	r3, r3, #32
 80030fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80030fc:	887b      	ldrh	r3, [r7, #2]
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d103      	bne.n	800310a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003108:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6819      	ldr	r1, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	43da      	mvns	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	400a      	ands	r2, r1
 800311a:	601a      	str	r2, [r3, #0]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b20      	cmp	r3, #32
 800313c:	d138      	bne.n	80031b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003148:	2302      	movs	r3, #2
 800314a:	e032      	b.n	80031b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2224      	movs	r2, #36	; 0x24
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f022 0201 	bic.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800317a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6819      	ldr	r1, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d139      	bne.n	8003248 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031de:	2302      	movs	r3, #2
 80031e0:	e033      	b.n	800324a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2224      	movs	r2, #36	; 0x24
 80031ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0201 	bic.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003210:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4313      	orrs	r3, r2
 800321a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0201 	orr.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	e000      	b.n	800324a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003248:	2302      	movs	r3, #2
  }
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800325c:	4b04      	ldr	r3, [pc, #16]	; (8003270 <HAL_PWREx_GetVoltageRange+0x18>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003264:	4618      	mov	r0, r3
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40007000 	.word	0x40007000

08003274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003282:	d130      	bne.n	80032e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003284:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800328c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003290:	d038      	beq.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800329a:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800329c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2232      	movs	r2, #50	; 0x32
 80032a8:	fb02 f303 	mul.w	r3, r2, r3
 80032ac:	4a1b      	ldr	r2, [pc, #108]	; (800331c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032ae:	fba2 2303 	umull	r2, r3, r2, r3
 80032b2:	0c9b      	lsrs	r3, r3, #18
 80032b4:	3301      	adds	r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b8:	e002      	b.n	80032c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3b01      	subs	r3, #1
 80032be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c0:	4b14      	ldr	r3, [pc, #80]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032cc:	d102      	bne.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f2      	bne.n	80032ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032e0:	d110      	bne.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e00f      	b.n	8003306 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f2:	d007      	beq.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80032f4:	4b07      	ldr	r3, [pc, #28]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032fc:	4a05      	ldr	r2, [pc, #20]	; (8003314 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003302:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40007000 	.word	0x40007000
 8003318:	20000000 	.word	0x20000000
 800331c:	431bde83 	.word	0x431bde83

08003320 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f000 bc02 	b.w	8003b38 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003334:	4b96      	ldr	r3, [pc, #600]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800333e:	4b94      	ldr	r3, [pc, #592]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80e4 	beq.w	800351e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <HAL_RCC_OscConfig+0x4c>
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2b0c      	cmp	r3, #12
 8003360:	f040 808b 	bne.w	800347a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2b01      	cmp	r3, #1
 8003368:	f040 8087 	bne.w	800347a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800336c:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_OscConfig+0x64>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e3d9      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a1a      	ldr	r2, [r3, #32]
 8003388:	4b81      	ldr	r3, [pc, #516]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <HAL_RCC_OscConfig+0x7e>
 8003394:	4b7e      	ldr	r3, [pc, #504]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800339c:	e005      	b.n	80033aa <HAL_RCC_OscConfig+0x8a>
 800339e:	4b7c      	ldr	r3, [pc, #496]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d223      	bcs.n	80033f6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fd54 	bl	8003e60 <RCC_SetFlashLatencyFromMSIRange>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e3ba      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c2:	4b73      	ldr	r3, [pc, #460]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a72      	ldr	r2, [pc, #456]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033c8:	f043 0308 	orr.w	r3, r3, #8
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b70      	ldr	r3, [pc, #448]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	496d      	ldr	r1, [pc, #436]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e0:	4b6b      	ldr	r3, [pc, #428]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	4968      	ldr	r1, [pc, #416]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
 80033f4:	e025      	b.n	8003442 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f6:	4b66      	ldr	r3, [pc, #408]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a65      	ldr	r2, [pc, #404]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80033fc:	f043 0308 	orr.w	r3, r3, #8
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b63      	ldr	r3, [pc, #396]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4960      	ldr	r1, [pc, #384]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003414:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	495b      	ldr	r1, [pc, #364]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fd14 	bl	8003e60 <RCC_SetFlashLatencyFromMSIRange>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e37a      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003442:	f000 fc81 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8003446:	4602      	mov	r2, r0
 8003448:	4b51      	ldr	r3, [pc, #324]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	4950      	ldr	r1, [pc, #320]	; (8003594 <HAL_RCC_OscConfig+0x274>)
 8003454:	5ccb      	ldrb	r3, [r1, r3]
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	4a4e      	ldr	r2, [pc, #312]	; (8003598 <HAL_RCC_OscConfig+0x278>)
 8003460:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003462:	4b4e      	ldr	r3, [pc, #312]	; (800359c <HAL_RCC_OscConfig+0x27c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd fc60 	bl	8000d2c <HAL_InitTick>
 800346c:	4603      	mov	r3, r0
 800346e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003470:	7bfb      	ldrb	r3, [r7, #15]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d052      	beq.n	800351c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	e35e      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d032      	beq.n	80034e8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003482:	4b43      	ldr	r3, [pc, #268]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a42      	ldr	r2, [pc, #264]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800348e:	f7fd fc9d 	bl	8000dcc <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003496:	f7fd fc99 	bl	8000dcc <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e347      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a8:	4b39      	ldr	r3, [pc, #228]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034b4:	4b36      	ldr	r3, [pc, #216]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a35      	ldr	r2, [pc, #212]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034ba:	f043 0308 	orr.w	r3, r3, #8
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b33      	ldr	r3, [pc, #204]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4930      	ldr	r1, [pc, #192]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034d2:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	021b      	lsls	r3, r3, #8
 80034e0:	492b      	ldr	r1, [pc, #172]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	604b      	str	r3, [r1, #4]
 80034e6:	e01a      	b.n	800351e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034e8:	4b29      	ldr	r3, [pc, #164]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a28      	ldr	r2, [pc, #160]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 80034ee:	f023 0301 	bic.w	r3, r3, #1
 80034f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034f4:	f7fd fc6a 	bl	8000dcc <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034fc:	f7fd fc66 	bl	8000dcc <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e314      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x1dc>
 800351a:	e000      	b.n	800351e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800351c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d073      	beq.n	8003612 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d005      	beq.n	800353c <HAL_RCC_OscConfig+0x21c>
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b0c      	cmp	r3, #12
 8003534:	d10e      	bne.n	8003554 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b03      	cmp	r3, #3
 800353a:	d10b      	bne.n	8003554 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	4b14      	ldr	r3, [pc, #80]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d063      	beq.n	8003610 <HAL_RCC_OscConfig+0x2f0>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d15f      	bne.n	8003610 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e2f1      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355c:	d106      	bne.n	800356c <HAL_RCC_OscConfig+0x24c>
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a0b      	ldr	r2, [pc, #44]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e025      	b.n	80035b8 <HAL_RCC_OscConfig+0x298>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003574:	d114      	bne.n	80035a0 <HAL_RCC_OscConfig+0x280>
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a05      	ldr	r2, [pc, #20]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 800357c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b03      	ldr	r3, [pc, #12]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a02      	ldr	r2, [pc, #8]	; (8003590 <HAL_RCC_OscConfig+0x270>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e013      	b.n	80035b8 <HAL_RCC_OscConfig+0x298>
 8003590:	40021000 	.word	0x40021000
 8003594:	08006a14 	.word	0x08006a14
 8003598:	20000000 	.word	0x20000000
 800359c:	20000004 	.word	0x20000004
 80035a0:	4ba0      	ldr	r3, [pc, #640]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a9f      	ldr	r2, [pc, #636]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b9d      	ldr	r3, [pc, #628]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a9c      	ldr	r2, [pc, #624]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d013      	beq.n	80035e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fd fc04 	bl	8000dcc <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c8:	f7fd fc00 	bl	8000dcc <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	; 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e2ae      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035da:	4b92      	ldr	r3, [pc, #584]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0f0      	beq.n	80035c8 <HAL_RCC_OscConfig+0x2a8>
 80035e6:	e014      	b.n	8003612 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fd fbf0 	bl	8000dcc <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f0:	f7fd fbec 	bl	8000dcc <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	; 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e29a      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003602:	4b88      	ldr	r3, [pc, #544]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x2d0>
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d060      	beq.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d005      	beq.n	8003630 <HAL_RCC_OscConfig+0x310>
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d119      	bne.n	800365e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d116      	bne.n	800365e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003630:	4b7c      	ldr	r3, [pc, #496]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_OscConfig+0x328>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e277      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003648:	4b76      	ldr	r3, [pc, #472]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	061b      	lsls	r3, r3, #24
 8003656:	4973      	ldr	r1, [pc, #460]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003658:	4313      	orrs	r3, r2
 800365a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800365c:	e040      	b.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d023      	beq.n	80036ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003666:	4b6f      	ldr	r3, [pc, #444]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a6e      	ldr	r2, [pc, #440]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800366c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003670:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7fd fbab 	bl	8000dcc <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367a:	f7fd fba7 	bl	8000dcc <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e255      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800368c:	4b65      	ldr	r3, [pc, #404]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003698:	4b62      	ldr	r3, [pc, #392]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	495f      	ldr	r1, [pc, #380]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
 80036ac:	e018      	b.n	80036e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ae:	4b5d      	ldr	r3, [pc, #372]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a5c      	ldr	r2, [pc, #368]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fd fb87 	bl	8000dcc <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c2:	f7fd fb83 	bl	8000dcc <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e231      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036d4:	4b53      	ldr	r3, [pc, #332]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f0      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d03c      	beq.n	8003766 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d01c      	beq.n	800372e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036f4:	4b4b      	ldr	r3, [pc, #300]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036fa:	4a4a      	ldr	r2, [pc, #296]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003704:	f7fd fb62 	bl	8000dcc <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800370c:	f7fd fb5e 	bl	8000dcc <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e20c      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800371e:	4b41      	ldr	r3, [pc, #260]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003720:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ef      	beq.n	800370c <HAL_RCC_OscConfig+0x3ec>
 800372c:	e01b      	b.n	8003766 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372e:	4b3d      	ldr	r3, [pc, #244]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003734:	4a3b      	ldr	r2, [pc, #236]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003736:	f023 0301 	bic.w	r3, r3, #1
 800373a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373e:	f7fd fb45 	bl	8000dcc <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003746:	f7fd fb41 	bl	8000dcc <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e1ef      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003758:	4b32      	ldr	r3, [pc, #200]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800375a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1ef      	bne.n	8003746 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80a6 	beq.w	80038c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003774:	2300      	movs	r3, #0
 8003776:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003778:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10d      	bne.n	80037a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003788:	4a26      	ldr	r2, [pc, #152]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 800378a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800378e:	6593      	str	r3, [r2, #88]	; 0x58
 8003790:	4b24      	ldr	r3, [pc, #144]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	60bb      	str	r3, [r7, #8]
 800379a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800379c:	2301      	movs	r3, #1
 800379e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a0:	4b21      	ldr	r3, [pc, #132]	; (8003828 <HAL_RCC_OscConfig+0x508>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d118      	bne.n	80037de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ac:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <HAL_RCC_OscConfig+0x508>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <HAL_RCC_OscConfig+0x508>)
 80037b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037b8:	f7fd fb08 	bl	8000dcc <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c0:	f7fd fb04 	bl	8000dcc <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e1b2      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <HAL_RCC_OscConfig+0x508>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d108      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4d8>
 80037e6:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80037e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ec:	4a0d      	ldr	r2, [pc, #52]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037f6:	e029      	b.n	800384c <HAL_RCC_OscConfig+0x52c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	d115      	bne.n	800382c <HAL_RCC_OscConfig+0x50c>
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	4a07      	ldr	r2, [pc, #28]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003816:	4a03      	ldr	r2, [pc, #12]	; (8003824 <HAL_RCC_OscConfig+0x504>)
 8003818:	f043 0301 	orr.w	r3, r3, #1
 800381c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003820:	e014      	b.n	800384c <HAL_RCC_OscConfig+0x52c>
 8003822:	bf00      	nop
 8003824:	40021000 	.word	0x40021000
 8003828:	40007000 	.word	0x40007000
 800382c:	4b9a      	ldr	r3, [pc, #616]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 800382e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003832:	4a99      	ldr	r2, [pc, #612]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800383c:	4b96      	ldr	r3, [pc, #600]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	4a95      	ldr	r2, [pc, #596]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003844:	f023 0304 	bic.w	r3, r3, #4
 8003848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d016      	beq.n	8003882 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003854:	f7fd faba 	bl	8000dcc <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385a:	e00a      	b.n	8003872 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385c:	f7fd fab6 	bl	8000dcc <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	; 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e162      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003872:	4b89      	ldr	r3, [pc, #548]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d0ed      	beq.n	800385c <HAL_RCC_OscConfig+0x53c>
 8003880:	e015      	b.n	80038ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003882:	f7fd faa3 	bl	8000dcc <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003888:	e00a      	b.n	80038a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388a:	f7fd fa9f 	bl	8000dcc <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	f241 3288 	movw	r2, #5000	; 0x1388
 8003898:	4293      	cmp	r3, r2
 800389a:	d901      	bls.n	80038a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e14b      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038a0:	4b7d      	ldr	r3, [pc, #500]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80038a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ed      	bne.n	800388a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ae:	7ffb      	ldrb	r3, [r7, #31]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b4:	4b78      	ldr	r3, [pc, #480]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	4a77      	ldr	r2, [pc, #476]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80038ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0320 	and.w	r3, r3, #32
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d03c      	beq.n	8003946 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d01c      	beq.n	800390e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038d4:	4b70      	ldr	r3, [pc, #448]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80038d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038da:	4a6f      	ldr	r2, [pc, #444]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7fd fa72 	bl	8000dcc <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ec:	f7fd fa6e 	bl	8000dcc <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e11c      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038fe:	4b66      	ldr	r3, [pc, #408]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003900:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0ef      	beq.n	80038ec <HAL_RCC_OscConfig+0x5cc>
 800390c:	e01b      	b.n	8003946 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800390e:	4b62      	ldr	r3, [pc, #392]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003910:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003914:	4a60      	ldr	r2, [pc, #384]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391e:	f7fd fa55 	bl	8000dcc <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003926:	f7fd fa51 	bl	8000dcc <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e0ff      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003938:	4b57      	ldr	r3, [pc, #348]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 800393a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1ef      	bne.n	8003926 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 80f3 	beq.w	8003b36 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	2b02      	cmp	r3, #2
 8003956:	f040 80c9 	bne.w	8003aec <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800395a:	4b4f      	ldr	r3, [pc, #316]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	f003 0203 	and.w	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	429a      	cmp	r2, r3
 800396c:	d12c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	3b01      	subs	r3, #1
 800397a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d123      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800398c:	429a      	cmp	r2, r3
 800398e:	d11b      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d113      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	085b      	lsrs	r3, r3, #1
 80039ac:	3b01      	subs	r3, #1
 80039ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d109      	bne.n	80039c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	3b01      	subs	r3, #1
 80039c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d06b      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d062      	beq.n	8003a94 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80039ce:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e0ac      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80039de:	4b2e      	ldr	r3, [pc, #184]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a2d      	ldr	r2, [pc, #180]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 80039e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039ea:	f7fd f9ef 	bl	8000dcc <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f2:	f7fd f9eb 	bl	8000dcc <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e099      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a04:	4b24      	ldr	r3, [pc, #144]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f0      	bne.n	80039f2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a10:	4b21      	ldr	r3, [pc, #132]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	4b21      	ldr	r3, [pc, #132]	; (8003a9c <HAL_RCC_OscConfig+0x77c>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a20:	3a01      	subs	r2, #1
 8003a22:	0112      	lsls	r2, r2, #4
 8003a24:	4311      	orrs	r1, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a2a:	0212      	lsls	r2, r2, #8
 8003a2c:	4311      	orrs	r1, r2
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a32:	0852      	lsrs	r2, r2, #1
 8003a34:	3a01      	subs	r2, #1
 8003a36:	0552      	lsls	r2, r2, #21
 8003a38:	4311      	orrs	r1, r2
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a3e:	0852      	lsrs	r2, r2, #1
 8003a40:	3a01      	subs	r2, #1
 8003a42:	0652      	lsls	r2, r2, #25
 8003a44:	4311      	orrs	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a4a:	06d2      	lsls	r2, r2, #27
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	4912      	ldr	r1, [pc, #72]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003a54:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0f      	ldr	r2, [pc, #60]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a60:	4b0d      	ldr	r3, [pc, #52]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a0c      	ldr	r2, [pc, #48]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a6c:	f7fd f9ae 	bl	8000dcc <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fd f9aa 	bl	8000dcc <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e058      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a86:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <HAL_RCC_OscConfig+0x778>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a92:	e050      	b.n	8003b36 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e04f      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa0:	4b27      	ldr	r3, [pc, #156]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d144      	bne.n	8003b36 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003aac:	4b24      	ldr	r3, [pc, #144]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a23      	ldr	r2, [pc, #140]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ab8:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	4a20      	ldr	r2, [pc, #128]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ac4:	f7fd f982 	bl	8000dcc <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003acc:	f7fd f97e 	bl	8000dcc <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e02c      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ade:	4b18      	ldr	r3, [pc, #96]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f0      	beq.n	8003acc <HAL_RCC_OscConfig+0x7ac>
 8003aea:	e024      	b.n	8003b36 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d01f      	beq.n	8003b32 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af2:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a12      	ldr	r2, [pc, #72]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003af8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afe:	f7fd f965 	bl	8000dcc <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fd f961 	bl	8000dcc <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e00f      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b18:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1f0      	bne.n	8003b06 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	4905      	ldr	r1, [pc, #20]	; (8003b40 <HAL_RCC_OscConfig+0x820>)
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_RCC_OscConfig+0x824>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	60cb      	str	r3, [r1, #12]
 8003b30:	e001      	b.n	8003b36 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b36:	2300      	movs	r3, #0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3720      	adds	r7, #32
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40021000 	.word	0x40021000
 8003b44:	feeefffc 	.word	0xfeeefffc

08003b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0e7      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b75      	ldr	r3, [pc, #468]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d910      	bls.n	8003b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b72      	ldr	r3, [pc, #456]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f023 0207 	bic.w	r2, r3, #7
 8003b72:	4970      	ldr	r1, [pc, #448]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b7a:	4b6e      	ldr	r3, [pc, #440]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d001      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e0cf      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d010      	beq.n	8003bba <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	4b66      	ldr	r3, [pc, #408]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d908      	bls.n	8003bba <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba8:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4960      	ldr	r1, [pc, #384]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d04c      	beq.n	8003c60 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d107      	bne.n	8003bde <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bce:	4b5a      	ldr	r3, [pc, #360]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d121      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e0a6      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be6:	4b54      	ldr	r3, [pc, #336]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d115      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e09a      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d107      	bne.n	8003c0e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bfe:	4b4e      	ldr	r3, [pc, #312]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d109      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e08e      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c0e:	4b4a      	ldr	r3, [pc, #296]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e086      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c1e:	4b46      	ldr	r3, [pc, #280]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f023 0203 	bic.w	r2, r3, #3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	4943      	ldr	r1, [pc, #268]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c30:	f7fd f8cc 	bl	8000dcc <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c36:	e00a      	b.n	8003c4e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c38:	f7fd f8c8 	bl	8000dcc <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e06e      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c4e:	4b3a      	ldr	r3, [pc, #232]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 020c 	and.w	r2, r3, #12
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d1eb      	bne.n	8003c38 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d010      	beq.n	8003c8e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	4b31      	ldr	r3, [pc, #196]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d208      	bcs.n	8003c8e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c7c:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	492b      	ldr	r1, [pc, #172]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8e:	4b29      	ldr	r3, [pc, #164]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d210      	bcs.n	8003cbe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9c:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f023 0207 	bic.w	r2, r3, #7
 8003ca4:	4923      	ldr	r1, [pc, #140]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cac:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <HAL_RCC_ClockConfig+0x1ec>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e036      	b.n	8003d2c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cca:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	4918      	ldr	r1, [pc, #96]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d009      	beq.n	8003cfc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ce8:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	4910      	ldr	r1, [pc, #64]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003cfc:	f000 f824 	bl	8003d48 <HAL_RCC_GetSysClockFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b0d      	ldr	r3, [pc, #52]	; (8003d38 <HAL_RCC_ClockConfig+0x1f0>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	f003 030f 	and.w	r3, r3, #15
 8003d0c:	490b      	ldr	r1, [pc, #44]	; (8003d3c <HAL_RCC_ClockConfig+0x1f4>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
 8003d18:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <HAL_RCC_ClockConfig+0x1f8>)
 8003d1a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_RCC_ClockConfig+0x1fc>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7fd f803 	bl	8000d2c <HAL_InitTick>
 8003d26:	4603      	mov	r3, r0
 8003d28:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d2a:	7afb      	ldrb	r3, [r7, #11]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40022000 	.word	0x40022000
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	08006a14 	.word	0x08006a14
 8003d40:	20000000 	.word	0x20000000
 8003d44:	20000004 	.word	0x20000004

08003d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b089      	sub	sp, #36	; 0x24
 8003d4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	2300      	movs	r3, #0
 8003d54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d56:	4b3e      	ldr	r3, [pc, #248]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 030c 	and.w	r3, r3, #12
 8003d5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d60:	4b3b      	ldr	r3, [pc, #236]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x34>
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	2b0c      	cmp	r3, #12
 8003d74:	d121      	bne.n	8003dba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d11e      	bne.n	8003dba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003d7c:	4b34      	ldr	r3, [pc, #208]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003d88:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d8e:	0a1b      	lsrs	r3, r3, #8
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	e005      	b.n	8003da4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d98:	4b2d      	ldr	r3, [pc, #180]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003da4:	4a2b      	ldr	r2, [pc, #172]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10d      	bne.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003db8:	e00a      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b04      	cmp	r3, #4
 8003dbe:	d102      	bne.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003dc0:	4b25      	ldr	r3, [pc, #148]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	e004      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d101      	bne.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003dcc:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x114>)
 8003dce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d134      	bne.n	8003e40 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d003      	beq.n	8003dee <HAL_RCC_GetSysClockFreq+0xa6>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d003      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0xac>
 8003dec:	e005      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003dee:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x110>)
 8003df0:	617b      	str	r3, [r7, #20]
      break;
 8003df2:	e005      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003df4:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x114>)
 8003df6:	617b      	str	r3, [r7, #20]
      break;
 8003df8:	e002      	b.n	8003e00 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	617b      	str	r3, [r7, #20]
      break;
 8003dfe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e00:	4b13      	ldr	r3, [pc, #76]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	091b      	lsrs	r3, r3, #4
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e0e:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	0a1b      	lsrs	r3, r3, #8
 8003e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	fb03 f202 	mul.w	r2, r3, r2
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e26:	4b0a      	ldr	r3, [pc, #40]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	0e5b      	lsrs	r3, r3, #25
 8003e2c:	f003 0303 	and.w	r3, r3, #3
 8003e30:	3301      	adds	r3, #1
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003e40:	69bb      	ldr	r3, [r7, #24]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3724      	adds	r7, #36	; 0x24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000
 8003e54:	08006a24 	.word	0x08006a24
 8003e58:	00f42400 	.word	0x00f42400
 8003e5c:	007a1200 	.word	0x007a1200

08003e60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e6c:	4b2a      	ldr	r3, [pc, #168]	; (8003f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e78:	f7ff f9ee 	bl	8003258 <HAL_PWREx_GetVoltageRange>
 8003e7c:	6178      	str	r0, [r7, #20]
 8003e7e:	e014      	b.n	8003eaa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e80:	4b25      	ldr	r3, [pc, #148]	; (8003f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e84:	4a24      	ldr	r2, [pc, #144]	; (8003f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e8a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e8c:	4b22      	ldr	r3, [pc, #136]	; (8003f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e98:	f7ff f9de 	bl	8003258 <HAL_PWREx_GetVoltageRange>
 8003e9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e9e:	4b1e      	ldr	r3, [pc, #120]	; (8003f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb0:	d10b      	bne.n	8003eca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b80      	cmp	r3, #128	; 0x80
 8003eb6:	d919      	bls.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2ba0      	cmp	r3, #160	; 0xa0
 8003ebc:	d902      	bls.n	8003ec4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	613b      	str	r3, [r7, #16]
 8003ec2:	e013      	b.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	e010      	b.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2b80      	cmp	r3, #128	; 0x80
 8003ece:	d902      	bls.n	8003ed6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	e00a      	b.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b80      	cmp	r3, #128	; 0x80
 8003eda:	d102      	bne.n	8003ee2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003edc:	2302      	movs	r3, #2
 8003ede:	613b      	str	r3, [r7, #16]
 8003ee0:	e004      	b.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b70      	cmp	r3, #112	; 0x70
 8003ee6:	d101      	bne.n	8003eec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ee8:	2301      	movs	r3, #1
 8003eea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003eec:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f023 0207 	bic.w	r2, r3, #7
 8003ef4:	4909      	ldr	r1, [pc, #36]	; (8003f1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003efc:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d001      	beq.n	8003f0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40021000 	.word	0x40021000
 8003f1c:	40022000 	.word	0x40022000

08003f20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f28:	2300      	movs	r3, #0
 8003f2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d031      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f44:	d01a      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003f46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f4a:	d814      	bhi.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f54:	d10f      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003f56:	4b5d      	ldr	r3, [pc, #372]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	4a5c      	ldr	r2, [pc, #368]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f60:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f62:	e00c      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 f9f0 	bl	8004350 <RCCEx_PLLSAI1_Config>
 8003f70:	4603      	mov	r3, r0
 8003f72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f74:	e003      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	74fb      	strb	r3, [r7, #19]
      break;
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003f7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f7e:	7cfb      	ldrb	r3, [r7, #19]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f84:	4b51      	ldr	r3, [pc, #324]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	494e      	ldr	r1, [pc, #312]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f9a:	e001      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9c:	7cfb      	ldrb	r3, [r7, #19]
 8003f9e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 809e 	beq.w	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fb2:	4b46      	ldr	r3, [pc, #280]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00d      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fc8:	4b40      	ldr	r3, [pc, #256]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	4a3f      	ldr	r2, [pc, #252]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd4:	4b3d      	ldr	r3, [pc, #244]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe4:	4b3a      	ldr	r3, [pc, #232]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a39      	ldr	r2, [pc, #228]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ff0:	f7fc feec 	bl	8000dcc <HAL_GetTick>
 8003ff4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ff6:	e009      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff8:	f7fc fee8 	bl	8000dcc <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d902      	bls.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	74fb      	strb	r3, [r7, #19]
        break;
 800400a:	e005      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800400c:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0ef      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004018:	7cfb      	ldrb	r3, [r7, #19]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d15a      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800401e:	4b2b      	ldr	r3, [pc, #172]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004024:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004028:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01e      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	429a      	cmp	r2, r3
 8004038:	d019      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004044:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004046:	4b21      	ldr	r3, [pc, #132]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	4a1f      	ldr	r2, [pc, #124]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800404e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004056:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405c:	4a1b      	ldr	r2, [pc, #108]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800405e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004066:	4a19      	ldr	r2, [pc, #100]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	d016      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004078:	f7fc fea8 	bl	8000dcc <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800407e:	e00b      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004080:	f7fc fea4 	bl	8000dcc <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	; 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d902      	bls.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	74fb      	strb	r3, [r7, #19]
            break;
 8004096:	e006      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0ec      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10b      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ac:	4b07      	ldr	r3, [pc, #28]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ba:	4904      	ldr	r1, [pc, #16]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040c2:	e009      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040c4:	7cfb      	ldrb	r3, [r7, #19]
 80040c6:	74bb      	strb	r3, [r7, #18]
 80040c8:	e006      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040d8:	7c7b      	ldrb	r3, [r7, #17]
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d105      	bne.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040de:	4b9b      	ldr	r3, [pc, #620]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	4a9a      	ldr	r2, [pc, #616]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040f6:	4b95      	ldr	r3, [pc, #596]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	f023 0203 	bic.w	r2, r3, #3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	4991      	ldr	r1, [pc, #580]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004106:	4313      	orrs	r3, r2
 8004108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004118:	4b8c      	ldr	r3, [pc, #560]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800411a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411e:	f023 020c 	bic.w	r2, r3, #12
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	4989      	ldr	r1, [pc, #548]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800413a:	4b84      	ldr	r3, [pc, #528]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004148:	4980      	ldr	r1, [pc, #512]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0320 	and.w	r3, r3, #32
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800415c:	4b7b      	ldr	r3, [pc, #492]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800415e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004162:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	4978      	ldr	r1, [pc, #480]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800416c:	4313      	orrs	r3, r2
 800416e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800417e:	4b73      	ldr	r3, [pc, #460]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004184:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418c:	496f      	ldr	r1, [pc, #444]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800418e:	4313      	orrs	r3, r2
 8004190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041a0:	4b6a      	ldr	r3, [pc, #424]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	4967      	ldr	r1, [pc, #412]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041c2:	4b62      	ldr	r3, [pc, #392]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	495e      	ldr	r1, [pc, #376]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041e4:	4b59      	ldr	r3, [pc, #356]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	4956      	ldr	r1, [pc, #344]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004206:	4b51      	ldr	r3, [pc, #324]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	494d      	ldr	r1, [pc, #308]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d028      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004228:	4b48      	ldr	r3, [pc, #288]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004236:	4945      	ldr	r1, [pc, #276]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004246:	d106      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004248:	4b40      	ldr	r3, [pc, #256]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a3f      	ldr	r2, [pc, #252]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004252:	60d3      	str	r3, [r2, #12]
 8004254:	e011      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800425e:	d10c      	bne.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3304      	adds	r3, #4
 8004264:	2101      	movs	r1, #1
 8004266:	4618      	mov	r0, r3
 8004268:	f000 f872 	bl	8004350 <RCCEx_PLLSAI1_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004270:	7cfb      	ldrb	r3, [r7, #19]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004276:	7cfb      	ldrb	r3, [r7, #19]
 8004278:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d028      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004286:	4b31      	ldr	r3, [pc, #196]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004294:	492d      	ldr	r1, [pc, #180]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042a4:	d106      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a6:	4b29      	ldr	r3, [pc, #164]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	4a28      	ldr	r2, [pc, #160]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042b0:	60d3      	str	r3, [r2, #12]
 80042b2:	e011      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042bc:	d10c      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3304      	adds	r3, #4
 80042c2:	2101      	movs	r1, #1
 80042c4:	4618      	mov	r0, r3
 80042c6:	f000 f843 	bl	8004350 <RCCEx_PLLSAI1_Config>
 80042ca:	4603      	mov	r3, r0
 80042cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042ce:	7cfb      	ldrb	r3, [r7, #19]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80042d4:	7cfb      	ldrb	r3, [r7, #19]
 80042d6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01c      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042e4:	4b19      	ldr	r3, [pc, #100]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f2:	4916      	ldr	r1, [pc, #88]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004302:	d10c      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3304      	adds	r3, #4
 8004308:	2102      	movs	r1, #2
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f820 	bl	8004350 <RCCEx_PLLSAI1_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004314:	7cfb      	ldrb	r3, [r7, #19]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 800431a:	7cfb      	ldrb	r3, [r7, #19]
 800431c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	4904      	ldr	r1, [pc, #16]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800433a:	4313      	orrs	r3, r2
 800433c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004340:	7cbb      	ldrb	r3, [r7, #18]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40021000 	.word	0x40021000

08004350 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800435e:	4b74      	ldr	r3, [pc, #464]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d018      	beq.n	800439c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800436a:	4b71      	ldr	r3, [pc, #452]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0203 	and.w	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d10d      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
       ||
 800437e:	2b00      	cmp	r3, #0
 8004380:	d009      	beq.n	8004396 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004382:	4b6b      	ldr	r3, [pc, #428]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
       ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d047      	beq.n	8004426 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
 800439a:	e044      	b.n	8004426 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d018      	beq.n	80043d6 <RCCEx_PLLSAI1_Config+0x86>
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d825      	bhi.n	80043f4 <RCCEx_PLLSAI1_Config+0xa4>
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d002      	beq.n	80043b2 <RCCEx_PLLSAI1_Config+0x62>
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d009      	beq.n	80043c4 <RCCEx_PLLSAI1_Config+0x74>
 80043b0:	e020      	b.n	80043f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043b2:	4b5f      	ldr	r3, [pc, #380]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d11d      	bne.n	80043fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c2:	e01a      	b.n	80043fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043c4:	4b5a      	ldr	r3, [pc, #360]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d116      	bne.n	80043fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d4:	e013      	b.n	80043fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043d6:	4b56      	ldr	r3, [pc, #344]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10f      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043e2:	4b53      	ldr	r3, [pc, #332]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043f2:	e006      	b.n	8004402 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
      break;
 80043f8:	e004      	b.n	8004404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043fa:	bf00      	nop
 80043fc:	e002      	b.n	8004404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004402:	bf00      	nop
    }

    if(status == HAL_OK)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10d      	bne.n	8004426 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800440a:	4b49      	ldr	r3, [pc, #292]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6819      	ldr	r1, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	430b      	orrs	r3, r1
 8004420:	4943      	ldr	r1, [pc, #268]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004422:	4313      	orrs	r3, r2
 8004424:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d17c      	bne.n	8004526 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800442c:	4b40      	ldr	r3, [pc, #256]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a3f      	ldr	r2, [pc, #252]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004432:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fc fcc8 	bl	8000dcc <HAL_GetTick>
 800443c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800443e:	e009      	b.n	8004454 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004440:	f7fc fcc4 	bl	8000dcc <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d902      	bls.n	8004454 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	73fb      	strb	r3, [r7, #15]
        break;
 8004452:	e005      	b.n	8004460 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004454:	4b36      	ldr	r3, [pc, #216]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ef      	bne.n	8004440 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d15f      	bne.n	8004526 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d110      	bne.n	800448e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800446c:	4b30      	ldr	r3, [pc, #192]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004474:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6892      	ldr	r2, [r2, #8]
 800447c:	0211      	lsls	r1, r2, #8
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68d2      	ldr	r2, [r2, #12]
 8004482:	06d2      	lsls	r2, r2, #27
 8004484:	430a      	orrs	r2, r1
 8004486:	492a      	ldr	r1, [pc, #168]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004488:	4313      	orrs	r3, r2
 800448a:	610b      	str	r3, [r1, #16]
 800448c:	e027      	b.n	80044de <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d112      	bne.n	80044ba <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004494:	4b26      	ldr	r3, [pc, #152]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800449c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6892      	ldr	r2, [r2, #8]
 80044a4:	0211      	lsls	r1, r2, #8
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6912      	ldr	r2, [r2, #16]
 80044aa:	0852      	lsrs	r2, r2, #1
 80044ac:	3a01      	subs	r2, #1
 80044ae:	0552      	lsls	r2, r2, #21
 80044b0:	430a      	orrs	r2, r1
 80044b2:	491f      	ldr	r1, [pc, #124]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	610b      	str	r3, [r1, #16]
 80044b8:	e011      	b.n	80044de <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044ba:	4b1d      	ldr	r3, [pc, #116]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044c2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6892      	ldr	r2, [r2, #8]
 80044ca:	0211      	lsls	r1, r2, #8
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6952      	ldr	r2, [r2, #20]
 80044d0:	0852      	lsrs	r2, r2, #1
 80044d2:	3a01      	subs	r2, #1
 80044d4:	0652      	lsls	r2, r2, #25
 80044d6:	430a      	orrs	r2, r1
 80044d8:	4915      	ldr	r1, [pc, #84]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044de:	4b14      	ldr	r3, [pc, #80]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a13      	ldr	r2, [pc, #76]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044e8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ea:	f7fc fc6f 	bl	8000dcc <HAL_GetTick>
 80044ee:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044f0:	e009      	b.n	8004506 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044f2:	f7fc fc6b 	bl	8000dcc <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d902      	bls.n	8004506 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	73fb      	strb	r3, [r7, #15]
          break;
 8004504:	e005      	b.n	8004512 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004506:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0ef      	beq.n	80044f2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d106      	bne.n	8004526 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	4903      	ldr	r1, [pc, #12]	; (8004530 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004522:	4313      	orrs	r3, r2
 8004524:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004526:	7bfb      	ldrb	r3, [r7, #15]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000

08004534 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e049      	b.n	80045da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc fa0c 	bl	8000978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	3304      	adds	r3, #4
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f000 fe76 	bl	8005264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
	...

080045e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d109      	bne.n	8004608 <HAL_TIM_PWM_Start+0x24>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	bf14      	ite	ne
 8004600:	2301      	movne	r3, #1
 8004602:	2300      	moveq	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	e03c      	b.n	8004682 <HAL_TIM_PWM_Start+0x9e>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b04      	cmp	r3, #4
 800460c:	d109      	bne.n	8004622 <HAL_TIM_PWM_Start+0x3e>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b01      	cmp	r3, #1
 8004618:	bf14      	ite	ne
 800461a:	2301      	movne	r3, #1
 800461c:	2300      	moveq	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	e02f      	b.n	8004682 <HAL_TIM_PWM_Start+0x9e>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b08      	cmp	r3, #8
 8004626:	d109      	bne.n	800463c <HAL_TIM_PWM_Start+0x58>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b01      	cmp	r3, #1
 8004632:	bf14      	ite	ne
 8004634:	2301      	movne	r3, #1
 8004636:	2300      	moveq	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	e022      	b.n	8004682 <HAL_TIM_PWM_Start+0x9e>
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2b0c      	cmp	r3, #12
 8004640:	d109      	bne.n	8004656 <HAL_TIM_PWM_Start+0x72>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	bf14      	ite	ne
 800464e:	2301      	movne	r3, #1
 8004650:	2300      	moveq	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	e015      	b.n	8004682 <HAL_TIM_PWM_Start+0x9e>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b10      	cmp	r3, #16
 800465a:	d109      	bne.n	8004670 <HAL_TIM_PWM_Start+0x8c>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	bf14      	ite	ne
 8004668:	2301      	movne	r3, #1
 800466a:	2300      	moveq	r3, #0
 800466c:	b2db      	uxtb	r3, r3
 800466e:	e008      	b.n	8004682 <HAL_TIM_PWM_Start+0x9e>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	bf14      	ite	ne
 800467c:	2301      	movne	r3, #1
 800467e:	2300      	moveq	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e07e      	b.n	8004788 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d104      	bne.n	800469a <HAL_TIM_PWM_Start+0xb6>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004698:	e023      	b.n	80046e2 <HAL_TIM_PWM_Start+0xfe>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b04      	cmp	r3, #4
 800469e:	d104      	bne.n	80046aa <HAL_TIM_PWM_Start+0xc6>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a8:	e01b      	b.n	80046e2 <HAL_TIM_PWM_Start+0xfe>
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d104      	bne.n	80046ba <HAL_TIM_PWM_Start+0xd6>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b8:	e013      	b.n	80046e2 <HAL_TIM_PWM_Start+0xfe>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b0c      	cmp	r3, #12
 80046be:	d104      	bne.n	80046ca <HAL_TIM_PWM_Start+0xe6>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046c8:	e00b      	b.n	80046e2 <HAL_TIM_PWM_Start+0xfe>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d104      	bne.n	80046da <HAL_TIM_PWM_Start+0xf6>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d8:	e003      	b.n	80046e2 <HAL_TIM_PWM_Start+0xfe>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2201      	movs	r2, #1
 80046e8:	6839      	ldr	r1, [r7, #0]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f001 f89c 	bl	8005828 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a26      	ldr	r2, [pc, #152]	; (8004790 <HAL_TIM_PWM_Start+0x1ac>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d009      	beq.n	800470e <HAL_TIM_PWM_Start+0x12a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a25      	ldr	r2, [pc, #148]	; (8004794 <HAL_TIM_PWM_Start+0x1b0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d004      	beq.n	800470e <HAL_TIM_PWM_Start+0x12a>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a23      	ldr	r2, [pc, #140]	; (8004798 <HAL_TIM_PWM_Start+0x1b4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d101      	bne.n	8004712 <HAL_TIM_PWM_Start+0x12e>
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <HAL_TIM_PWM_Start+0x130>
 8004712:	2300      	movs	r3, #0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004726:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a18      	ldr	r2, [pc, #96]	; (8004790 <HAL_TIM_PWM_Start+0x1ac>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d009      	beq.n	8004746 <HAL_TIM_PWM_Start+0x162>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800473a:	d004      	beq.n	8004746 <HAL_TIM_PWM_Start+0x162>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a14      	ldr	r2, [pc, #80]	; (8004794 <HAL_TIM_PWM_Start+0x1b0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d115      	bne.n	8004772 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	4b13      	ldr	r3, [pc, #76]	; (800479c <HAL_TIM_PWM_Start+0x1b8>)
 800474e:	4013      	ands	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b06      	cmp	r3, #6
 8004756:	d015      	beq.n	8004784 <HAL_TIM_PWM_Start+0x1a0>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800475e:	d011      	beq.n	8004784 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004770:	e008      	b.n	8004784 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0201 	orr.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	e000      	b.n	8004786 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004784:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	40012c00 	.word	0x40012c00
 8004794:	40014000 	.word	0x40014000
 8004798:	40014400 	.word	0x40014400
 800479c:	00010007 	.word	0x00010007

080047a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2200      	movs	r2, #0
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f001 f838 	bl	8005828 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a39      	ldr	r2, [pc, #228]	; (80048a4 <HAL_TIM_PWM_Stop+0x104>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d009      	beq.n	80047d6 <HAL_TIM_PWM_Stop+0x36>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a38      	ldr	r2, [pc, #224]	; (80048a8 <HAL_TIM_PWM_Stop+0x108>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d004      	beq.n	80047d6 <HAL_TIM_PWM_Stop+0x36>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a36      	ldr	r2, [pc, #216]	; (80048ac <HAL_TIM_PWM_Stop+0x10c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d101      	bne.n	80047da <HAL_TIM_PWM_Stop+0x3a>
 80047d6:	2301      	movs	r3, #1
 80047d8:	e000      	b.n	80047dc <HAL_TIM_PWM_Stop+0x3c>
 80047da:	2300      	movs	r3, #0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d017      	beq.n	8004810 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6a1a      	ldr	r2, [r3, #32]
 80047e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10f      	bne.n	8004810 <HAL_TIM_PWM_Stop+0x70>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6a1a      	ldr	r2, [r3, #32]
 80047f6:	f240 4344 	movw	r3, #1092	; 0x444
 80047fa:	4013      	ands	r3, r2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d107      	bne.n	8004810 <HAL_TIM_PWM_Stop+0x70>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800480e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6a1a      	ldr	r2, [r3, #32]
 8004816:	f241 1311 	movw	r3, #4369	; 0x1111
 800481a:	4013      	ands	r3, r2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10f      	bne.n	8004840 <HAL_TIM_PWM_Stop+0xa0>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6a1a      	ldr	r2, [r3, #32]
 8004826:	f240 4344 	movw	r3, #1092	; 0x444
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d107      	bne.n	8004840 <HAL_TIM_PWM_Stop+0xa0>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0201 	bic.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d104      	bne.n	8004850 <HAL_TIM_PWM_Stop+0xb0>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800484e:	e023      	b.n	8004898 <HAL_TIM_PWM_Stop+0xf8>
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b04      	cmp	r3, #4
 8004854:	d104      	bne.n	8004860 <HAL_TIM_PWM_Stop+0xc0>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800485e:	e01b      	b.n	8004898 <HAL_TIM_PWM_Stop+0xf8>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b08      	cmp	r3, #8
 8004864:	d104      	bne.n	8004870 <HAL_TIM_PWM_Stop+0xd0>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800486e:	e013      	b.n	8004898 <HAL_TIM_PWM_Stop+0xf8>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b0c      	cmp	r3, #12
 8004874:	d104      	bne.n	8004880 <HAL_TIM_PWM_Stop+0xe0>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800487e:	e00b      	b.n	8004898 <HAL_TIM_PWM_Stop+0xf8>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b10      	cmp	r3, #16
 8004884:	d104      	bne.n	8004890 <HAL_TIM_PWM_Stop+0xf0>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800488e:	e003      	b.n	8004898 <HAL_TIM_PWM_Stop+0xf8>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	40012c00 	.word	0x40012c00
 80048a8:	40014000 	.word	0x40014000
 80048ac:	40014400 	.word	0x40014400

080048b0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d109      	bne.n	80048dc <HAL_TIM_PWM_Start_DMA+0x2c>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	bf0c      	ite	eq
 80048d4:	2301      	moveq	r3, #1
 80048d6:	2300      	movne	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	e03c      	b.n	8004956 <HAL_TIM_PWM_Start_DMA+0xa6>
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d109      	bne.n	80048f6 <HAL_TIM_PWM_Start_DMA+0x46>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	bf0c      	ite	eq
 80048ee:	2301      	moveq	r3, #1
 80048f0:	2300      	movne	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	e02f      	b.n	8004956 <HAL_TIM_PWM_Start_DMA+0xa6>
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d109      	bne.n	8004910 <HAL_TIM_PWM_Start_DMA+0x60>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b02      	cmp	r3, #2
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	e022      	b.n	8004956 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b0c      	cmp	r3, #12
 8004914:	d109      	bne.n	800492a <HAL_TIM_PWM_Start_DMA+0x7a>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	bf0c      	ite	eq
 8004922:	2301      	moveq	r3, #1
 8004924:	2300      	movne	r3, #0
 8004926:	b2db      	uxtb	r3, r3
 8004928:	e015      	b.n	8004956 <HAL_TIM_PWM_Start_DMA+0xa6>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b10      	cmp	r3, #16
 800492e:	d109      	bne.n	8004944 <HAL_TIM_PWM_Start_DMA+0x94>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b02      	cmp	r3, #2
 800493a:	bf0c      	ite	eq
 800493c:	2301      	moveq	r3, #1
 800493e:	2300      	movne	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	e008      	b.n	8004956 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b02      	cmp	r3, #2
 800494e:	bf0c      	ite	eq
 8004950:	2301      	moveq	r3, #1
 8004952:	2300      	movne	r3, #0
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800495a:	2302      	movs	r3, #2
 800495c:	e18d      	b.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800496a:	b2db      	uxtb	r3, r3
 800496c:	2b01      	cmp	r3, #1
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	e03c      	b.n	80049f2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b04      	cmp	r3, #4
 800497c:	d109      	bne.n	8004992 <HAL_TIM_PWM_Start_DMA+0xe2>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b01      	cmp	r3, #1
 8004988:	bf0c      	ite	eq
 800498a:	2301      	moveq	r3, #1
 800498c:	2300      	movne	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	e02f      	b.n	80049f2 <HAL_TIM_PWM_Start_DMA+0x142>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b08      	cmp	r3, #8
 8004996:	d109      	bne.n	80049ac <HAL_TIM_PWM_Start_DMA+0xfc>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	e022      	b.n	80049f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b0c      	cmp	r3, #12
 80049b0:	d109      	bne.n	80049c6 <HAL_TIM_PWM_Start_DMA+0x116>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	bf0c      	ite	eq
 80049be:	2301      	moveq	r3, #1
 80049c0:	2300      	movne	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	e015      	b.n	80049f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d109      	bne.n	80049e0 <HAL_TIM_PWM_Start_DMA+0x130>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	bf0c      	ite	eq
 80049d8:	2301      	moveq	r3, #1
 80049da:	2300      	movne	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	e008      	b.n	80049f2 <HAL_TIM_PWM_Start_DMA+0x142>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d034      	beq.n	8004a60 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_TIM_PWM_Start_DMA+0x152>
 80049fc:	887b      	ldrh	r3, [r7, #2]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e139      	b.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_PWM_Start_DMA+0x166>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a14:	e026      	b.n	8004a64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d104      	bne.n	8004a26 <HAL_TIM_PWM_Start_DMA+0x176>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a24:	e01e      	b.n	8004a64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b08      	cmp	r3, #8
 8004a2a:	d104      	bne.n	8004a36 <HAL_TIM_PWM_Start_DMA+0x186>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a34:	e016      	b.n	8004a64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b0c      	cmp	r3, #12
 8004a3a:	d104      	bne.n	8004a46 <HAL_TIM_PWM_Start_DMA+0x196>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a44:	e00e      	b.n	8004a64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b10      	cmp	r3, #16
 8004a4a:	d104      	bne.n	8004a56 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a54:	e006      	b.n	8004a64 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a5e:	e001      	b.n	8004a64 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e10a      	b.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	2b0c      	cmp	r3, #12
 8004a68:	f200 80ae 	bhi.w	8004bc8 <HAL_TIM_PWM_Start_DMA+0x318>
 8004a6c:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a72:	bf00      	nop
 8004a74:	08004aa9 	.word	0x08004aa9
 8004a78:	08004bc9 	.word	0x08004bc9
 8004a7c:	08004bc9 	.word	0x08004bc9
 8004a80:	08004bc9 	.word	0x08004bc9
 8004a84:	08004af1 	.word	0x08004af1
 8004a88:	08004bc9 	.word	0x08004bc9
 8004a8c:	08004bc9 	.word	0x08004bc9
 8004a90:	08004bc9 	.word	0x08004bc9
 8004a94:	08004b39 	.word	0x08004b39
 8004a98:	08004bc9 	.word	0x08004bc9
 8004a9c:	08004bc9 	.word	0x08004bc9
 8004aa0:	08004bc9 	.word	0x08004bc9
 8004aa4:	08004b81 	.word	0x08004b81
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	4a75      	ldr	r2, [pc, #468]	; (8004c84 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004aae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	4a74      	ldr	r2, [pc, #464]	; (8004c88 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	4a73      	ldr	r2, [pc, #460]	; (8004c8c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004abe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3334      	adds	r3, #52	; 0x34
 8004acc:	461a      	mov	r2, r3
 8004ace:	887b      	ldrh	r3, [r7, #2]
 8004ad0:	f7fc fb76 	bl	80011c0 <HAL_DMA_Start_IT>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e0cd      	b.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aec:	60da      	str	r2, [r3, #12]
      break;
 8004aee:	e06e      	b.n	8004bce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	4a63      	ldr	r2, [pc, #396]	; (8004c84 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004af6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	4a62      	ldr	r2, [pc, #392]	; (8004c88 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	4a61      	ldr	r2, [pc, #388]	; (8004c8c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004b06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004b0c:	6879      	ldr	r1, [r7, #4]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3338      	adds	r3, #56	; 0x38
 8004b14:	461a      	mov	r2, r3
 8004b16:	887b      	ldrh	r3, [r7, #2]
 8004b18:	f7fc fb52 	bl	80011c0 <HAL_DMA_Start_IT>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e0a9      	b.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b34:	60da      	str	r2, [r3, #12]
      break;
 8004b36:	e04a      	b.n	8004bce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	4a51      	ldr	r2, [pc, #324]	; (8004c84 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004b3e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b44:	4a50      	ldr	r2, [pc, #320]	; (8004c88 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4c:	4a4f      	ldr	r2, [pc, #316]	; (8004c8c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004b4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	333c      	adds	r3, #60	; 0x3c
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	887b      	ldrh	r3, [r7, #2]
 8004b60:	f7fc fb2e 	bl	80011c0 <HAL_DMA_Start_IT>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e085      	b.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7c:	60da      	str	r2, [r3, #12]
      break;
 8004b7e:	e026      	b.n	8004bce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	4a3f      	ldr	r2, [pc, #252]	; (8004c84 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004b86:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8c:	4a3e      	ldr	r2, [pc, #248]	; (8004c88 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004b8e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	4a3d      	ldr	r2, [pc, #244]	; (8004c8c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004b96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3340      	adds	r3, #64	; 0x40
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	887b      	ldrh	r3, [r7, #2]
 8004ba8:	f7fc fb0a 	bl	80011c0 <HAL_DMA_Start_IT>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e061      	b.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bc4:	60da      	str	r2, [r3, #12]
      break;
 8004bc6:	e002      	b.n	8004bce <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	75fb      	strb	r3, [r7, #23]
      break;
 8004bcc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bce:	7dfb      	ldrb	r3, [r7, #23]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d151      	bne.n	8004c78 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fe23 	bl	8005828 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2a      	ldr	r2, [pc, #168]	; (8004c90 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d009      	beq.n	8004c00 <HAL_TIM_PWM_Start_DMA+0x350>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a28      	ldr	r2, [pc, #160]	; (8004c94 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d004      	beq.n	8004c00 <HAL_TIM_PWM_Start_DMA+0x350>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a27      	ldr	r2, [pc, #156]	; (8004c98 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d101      	bne.n	8004c04 <HAL_TIM_PWM_Start_DMA+0x354>
 8004c00:	2301      	movs	r3, #1
 8004c02:	e000      	b.n	8004c06 <HAL_TIM_PWM_Start_DMA+0x356>
 8004c04:	2300      	movs	r3, #0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d007      	beq.n	8004c1a <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1c      	ldr	r2, [pc, #112]	; (8004c90 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d009      	beq.n	8004c38 <HAL_TIM_PWM_Start_DMA+0x388>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c2c:	d004      	beq.n	8004c38 <HAL_TIM_PWM_Start_DMA+0x388>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d115      	bne.n	8004c64 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	4b17      	ldr	r3, [pc, #92]	; (8004c9c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2b06      	cmp	r3, #6
 8004c48:	d015      	beq.n	8004c76 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c50:	d011      	beq.n	8004c76 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0201 	orr.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c62:	e008      	b.n	8004c76 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e000      	b.n	8004c78 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c76:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	08005153 	.word	0x08005153
 8004c88:	080051fb 	.word	0x080051fb
 8004c8c:	080050c1 	.word	0x080050c1
 8004c90:	40012c00 	.word	0x40012c00
 8004c94:	40014000 	.word	0x40014000
 8004c98:	40014400 	.word	0x40014400
 8004c9c:	00010007 	.word	0x00010007

08004ca0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b0c      	cmp	r3, #12
 8004cb2:	d855      	bhi.n	8004d60 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004cb4:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004cf1 	.word	0x08004cf1
 8004cc0:	08004d61 	.word	0x08004d61
 8004cc4:	08004d61 	.word	0x08004d61
 8004cc8:	08004d61 	.word	0x08004d61
 8004ccc:	08004d0d 	.word	0x08004d0d
 8004cd0:	08004d61 	.word	0x08004d61
 8004cd4:	08004d61 	.word	0x08004d61
 8004cd8:	08004d61 	.word	0x08004d61
 8004cdc:	08004d29 	.word	0x08004d29
 8004ce0:	08004d61 	.word	0x08004d61
 8004ce4:	08004d61 	.word	0x08004d61
 8004ce8:	08004d61 	.word	0x08004d61
 8004cec:	08004d45 	.word	0x08004d45
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cfe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fc fabb 	bl	8001280 <HAL_DMA_Abort_IT>
      break;
 8004d0a:	e02c      	b.n	8004d66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fc faad 	bl	8001280 <HAL_DMA_Abort_IT>
      break;
 8004d26:	e01e      	b.n	8004d66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d36:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fc fa9f 	bl	8001280 <HAL_DMA_Abort_IT>
      break;
 8004d42:	e010      	b.n	8004d66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fc fa91 	bl	8001280 <HAL_DMA_Abort_IT>
      break;
 8004d5e:	e002      	b.n	8004d66 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
      break;
 8004d64:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d176      	bne.n	8004e5a <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2200      	movs	r2, #0
 8004d72:	6839      	ldr	r1, [r7, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fd57 	bl	8005828 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a39      	ldr	r2, [pc, #228]	; (8004e64 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d009      	beq.n	8004d98 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a37      	ldr	r2, [pc, #220]	; (8004e68 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d004      	beq.n	8004d98 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a36      	ldr	r2, [pc, #216]	; (8004e6c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d101      	bne.n	8004d9c <HAL_TIM_PWM_Stop_DMA+0xfc>
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e000      	b.n	8004d9e <HAL_TIM_PWM_Stop_DMA+0xfe>
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d017      	beq.n	8004dd2 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6a1a      	ldr	r2, [r3, #32]
 8004da8:	f241 1311 	movw	r3, #4369	; 0x1111
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10f      	bne.n	8004dd2 <HAL_TIM_PWM_Stop_DMA+0x132>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6a1a      	ldr	r2, [r3, #32]
 8004db8:	f240 4344 	movw	r3, #1092	; 0x444
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d107      	bne.n	8004dd2 <HAL_TIM_PWM_Stop_DMA+0x132>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6a1a      	ldr	r2, [r3, #32]
 8004dd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ddc:	4013      	ands	r3, r2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10f      	bne.n	8004e02 <HAL_TIM_PWM_Stop_DMA+0x162>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6a1a      	ldr	r2, [r3, #32]
 8004de8:	f240 4344 	movw	r3, #1092	; 0x444
 8004dec:	4013      	ands	r3, r2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d107      	bne.n	8004e02 <HAL_TIM_PWM_Stop_DMA+0x162>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0201 	bic.w	r2, r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Stop_DMA+0x172>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e10:	e023      	b.n	8004e5a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_PWM_Stop_DMA+0x182>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e20:	e01b      	b.n	8004e5a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b08      	cmp	r3, #8
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_PWM_Stop_DMA+0x192>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e30:	e013      	b.n	8004e5a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b0c      	cmp	r3, #12
 8004e36:	d104      	bne.n	8004e42 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e40:	e00b      	b.n	8004e5a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b10      	cmp	r3, #16
 8004e46:	d104      	bne.n	8004e52 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e50:	e003      	b.n	8004e5a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40012c00 	.word	0x40012c00
 8004e68:	40014000 	.word	0x40014000
 8004e6c:	40014400 	.word	0x40014400

08004e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e0ff      	b.n	800508e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b14      	cmp	r3, #20
 8004e9a:	f200 80f0 	bhi.w	800507e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea4:	08004ef9 	.word	0x08004ef9
 8004ea8:	0800507f 	.word	0x0800507f
 8004eac:	0800507f 	.word	0x0800507f
 8004eb0:	0800507f 	.word	0x0800507f
 8004eb4:	08004f39 	.word	0x08004f39
 8004eb8:	0800507f 	.word	0x0800507f
 8004ebc:	0800507f 	.word	0x0800507f
 8004ec0:	0800507f 	.word	0x0800507f
 8004ec4:	08004f7b 	.word	0x08004f7b
 8004ec8:	0800507f 	.word	0x0800507f
 8004ecc:	0800507f 	.word	0x0800507f
 8004ed0:	0800507f 	.word	0x0800507f
 8004ed4:	08004fbb 	.word	0x08004fbb
 8004ed8:	0800507f 	.word	0x0800507f
 8004edc:	0800507f 	.word	0x0800507f
 8004ee0:	0800507f 	.word	0x0800507f
 8004ee4:	08004ffd 	.word	0x08004ffd
 8004ee8:	0800507f 	.word	0x0800507f
 8004eec:	0800507f 	.word	0x0800507f
 8004ef0:	0800507f 	.word	0x0800507f
 8004ef4:	0800503d 	.word	0x0800503d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fa14 	bl	800532c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0208 	orr.w	r2, r2, #8
 8004f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0204 	bic.w	r2, r2, #4
 8004f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6999      	ldr	r1, [r3, #24]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	619a      	str	r2, [r3, #24]
      break;
 8004f36:	e0a5      	b.n	8005084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fa70 	bl	8005424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6999      	ldr	r1, [r3, #24]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	021a      	lsls	r2, r3, #8
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	619a      	str	r2, [r3, #24]
      break;
 8004f78:	e084      	b.n	8005084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fac9 	bl	8005518 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69da      	ldr	r2, [r3, #28]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0208 	orr.w	r2, r2, #8
 8004f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0204 	bic.w	r2, r2, #4
 8004fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69d9      	ldr	r1, [r3, #28]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	61da      	str	r2, [r3, #28]
      break;
 8004fb8:	e064      	b.n	8005084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 fb21 	bl	8005608 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69d9      	ldr	r1, [r3, #28]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	021a      	lsls	r2, r3, #8
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	61da      	str	r2, [r3, #28]
      break;
 8004ffa:	e043      	b.n	8005084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 fb5e 	bl	80056c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0208 	orr.w	r2, r2, #8
 8005016:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0204 	bic.w	r2, r2, #4
 8005026:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800503a:	e023      	b.n	8005084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fb96 	bl	8005774 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005056:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005066:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	021a      	lsls	r2, r3, #8
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800507c:	e002      	b.n	8005084 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	75fb      	strb	r3, [r7, #23]
      break;
 8005082:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800508c:	7dfb      	ldrb	r3, [r7, #23]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop

08005098 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d107      	bne.n	80050e8 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2201      	movs	r2, #1
 80050dc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e6:	e02a      	b.n	800513e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d107      	bne.n	8005102 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2202      	movs	r2, #2
 80050f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005100:	e01d      	b.n	800513e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	429a      	cmp	r2, r3
 800510a:	d107      	bne.n	800511c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2204      	movs	r2, #4
 8005110:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800511a:	e010      	b.n	800513e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	429a      	cmp	r2, r3
 8005124:	d107      	bne.n	8005136 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2208      	movs	r2, #8
 800512a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005134:	e003      	b.n	800513e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f7ff ffb4 	bl	80050ac <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	771a      	strb	r2, [r3, #28]
}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b084      	sub	sp, #16
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	429a      	cmp	r2, r3
 8005168:	d10b      	bne.n	8005182 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d136      	bne.n	80051e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005180:	e031      	b.n	80051e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	429a      	cmp	r2, r3
 800518a:	d10b      	bne.n	80051a4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2202      	movs	r2, #2
 8005190:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d125      	bne.n	80051e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a2:	e020      	b.n	80051e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d10b      	bne.n	80051c6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2204      	movs	r2, #4
 80051b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d114      	bne.n	80051e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c4:	e00f      	b.n	80051e6 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d10a      	bne.n	80051e6 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2208      	movs	r2, #8
 80051d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d103      	bne.n	80051e6 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f001 fb92 	bl	8006910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	771a      	strb	r2, [r3, #28]
}
 80051f2:	bf00      	nop
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005206:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	429a      	cmp	r2, r3
 8005210:	d103      	bne.n	800521a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	771a      	strb	r2, [r3, #28]
 8005218:	e019      	b.n	800524e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d103      	bne.n	800522c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2202      	movs	r2, #2
 8005228:	771a      	strb	r2, [r3, #28]
 800522a:	e010      	b.n	800524e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d103      	bne.n	800523e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2204      	movs	r2, #4
 800523a:	771a      	strb	r2, [r3, #28]
 800523c:	e007      	b.n	800524e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	429a      	cmp	r2, r3
 8005246:	d102      	bne.n	800524e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2208      	movs	r2, #8
 800524c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f7ff ff22 	bl	8005098 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	771a      	strb	r2, [r3, #28]
}
 800525a:	bf00      	nop
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4a2a      	ldr	r2, [pc, #168]	; (8005320 <TIM_Base_SetConfig+0xbc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d003      	beq.n	8005284 <TIM_Base_SetConfig+0x20>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005282:	d108      	bne.n	8005296 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800528a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a21      	ldr	r2, [pc, #132]	; (8005320 <TIM_Base_SetConfig+0xbc>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00b      	beq.n	80052b6 <TIM_Base_SetConfig+0x52>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a4:	d007      	beq.n	80052b6 <TIM_Base_SetConfig+0x52>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1e      	ldr	r2, [pc, #120]	; (8005324 <TIM_Base_SetConfig+0xc0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d003      	beq.n	80052b6 <TIM_Base_SetConfig+0x52>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a1d      	ldr	r2, [pc, #116]	; (8005328 <TIM_Base_SetConfig+0xc4>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d108      	bne.n	80052c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a0c      	ldr	r2, [pc, #48]	; (8005320 <TIM_Base_SetConfig+0xbc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d007      	beq.n	8005304 <TIM_Base_SetConfig+0xa0>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a0b      	ldr	r2, [pc, #44]	; (8005324 <TIM_Base_SetConfig+0xc0>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_Base_SetConfig+0xa0>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a0a      	ldr	r2, [pc, #40]	; (8005328 <TIM_Base_SetConfig+0xc4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d103      	bne.n	800530c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	615a      	str	r2, [r3, #20]
}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40012c00 	.word	0x40012c00
 8005324:	40014000 	.word	0x40014000
 8005328:	40014400 	.word	0x40014400

0800532c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a1b      	ldr	r3, [r3, #32]
 8005340:	f023 0201 	bic.w	r2, r3, #1
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f023 0302 	bic.w	r3, r3, #2
 8005378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a24      	ldr	r2, [pc, #144]	; (8005418 <TIM_OC1_SetConfig+0xec>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d007      	beq.n	800539c <TIM_OC1_SetConfig+0x70>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a23      	ldr	r2, [pc, #140]	; (800541c <TIM_OC1_SetConfig+0xf0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_OC1_SetConfig+0x70>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a22      	ldr	r2, [pc, #136]	; (8005420 <TIM_OC1_SetConfig+0xf4>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d10c      	bne.n	80053b6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f023 0308 	bic.w	r3, r3, #8
 80053a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f023 0304 	bic.w	r3, r3, #4
 80053b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a17      	ldr	r2, [pc, #92]	; (8005418 <TIM_OC1_SetConfig+0xec>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d007      	beq.n	80053ce <TIM_OC1_SetConfig+0xa2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a16      	ldr	r2, [pc, #88]	; (800541c <TIM_OC1_SetConfig+0xf0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d003      	beq.n	80053ce <TIM_OC1_SetConfig+0xa2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a15      	ldr	r2, [pc, #84]	; (8005420 <TIM_OC1_SetConfig+0xf4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d111      	bne.n	80053f2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	621a      	str	r2, [r3, #32]
}
 800540c:	bf00      	nop
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40014000 	.word	0x40014000
 8005420:	40014400 	.word	0x40014400

08005424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005424:	b480      	push	{r7}
 8005426:	b087      	sub	sp, #28
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	f023 0210 	bic.w	r2, r3, #16
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800545e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	021b      	lsls	r3, r3, #8
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f023 0320 	bic.w	r3, r3, #32
 8005472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	011b      	lsls	r3, r3, #4
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a22      	ldr	r2, [pc, #136]	; (800550c <TIM_OC2_SetConfig+0xe8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d10d      	bne.n	80054a4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800548e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a19      	ldr	r2, [pc, #100]	; (800550c <TIM_OC2_SetConfig+0xe8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d007      	beq.n	80054bc <TIM_OC2_SetConfig+0x98>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a18      	ldr	r2, [pc, #96]	; (8005510 <TIM_OC2_SetConfig+0xec>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d003      	beq.n	80054bc <TIM_OC2_SetConfig+0x98>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a17      	ldr	r2, [pc, #92]	; (8005514 <TIM_OC2_SetConfig+0xf0>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d113      	bne.n	80054e4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400

08005518 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800554a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0303 	bic.w	r3, r3, #3
 8005552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005564:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	021b      	lsls	r3, r3, #8
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a21      	ldr	r2, [pc, #132]	; (80055fc <TIM_OC3_SetConfig+0xe4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d10d      	bne.n	8005596 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005580:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a18      	ldr	r2, [pc, #96]	; (80055fc <TIM_OC3_SetConfig+0xe4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d007      	beq.n	80055ae <TIM_OC3_SetConfig+0x96>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a17      	ldr	r2, [pc, #92]	; (8005600 <TIM_OC3_SetConfig+0xe8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d003      	beq.n	80055ae <TIM_OC3_SetConfig+0x96>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a16      	ldr	r2, [pc, #88]	; (8005604 <TIM_OC3_SetConfig+0xec>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d113      	bne.n	80055d6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	011b      	lsls	r3, r3, #4
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	621a      	str	r2, [r3, #32]
}
 80055f0:	bf00      	nop
 80055f2:	371c      	adds	r7, #28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40014000 	.word	0x40014000
 8005604:	40014400 	.word	0x40014400

08005608 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	021b      	lsls	r3, r3, #8
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4313      	orrs	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	031b      	lsls	r3, r3, #12
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	4313      	orrs	r3, r2
 8005662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a14      	ldr	r2, [pc, #80]	; (80056b8 <TIM_OC4_SetConfig+0xb0>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d007      	beq.n	800567c <TIM_OC4_SetConfig+0x74>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a13      	ldr	r2, [pc, #76]	; (80056bc <TIM_OC4_SetConfig+0xb4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <TIM_OC4_SetConfig+0x74>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a12      	ldr	r2, [pc, #72]	; (80056c0 <TIM_OC4_SetConfig+0xb8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d109      	bne.n	8005690 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005682:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	019b      	lsls	r3, r3, #6
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40012c00 	.word	0x40012c00
 80056bc:	40014000 	.word	0x40014000
 80056c0:	40014400 	.word	0x40014400

080056c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005708:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	041b      	lsls	r3, r3, #16
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a13      	ldr	r2, [pc, #76]	; (8005768 <TIM_OC5_SetConfig+0xa4>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <TIM_OC5_SetConfig+0x6a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a12      	ldr	r2, [pc, #72]	; (800576c <TIM_OC5_SetConfig+0xa8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_OC5_SetConfig+0x6a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a11      	ldr	r2, [pc, #68]	; (8005770 <TIM_OC5_SetConfig+0xac>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d109      	bne.n	8005742 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005734:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	621a      	str	r2, [r3, #32]
}
 800575c:	bf00      	nop
 800575e:	371c      	adds	r7, #28
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr
 8005768:	40012c00 	.word	0x40012c00
 800576c:	40014000 	.word	0x40014000
 8005770:	40014400 	.word	0x40014400

08005774 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	051b      	lsls	r3, r3, #20
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a14      	ldr	r2, [pc, #80]	; (800581c <TIM_OC6_SetConfig+0xa8>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d007      	beq.n	80057e0 <TIM_OC6_SetConfig+0x6c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a13      	ldr	r2, [pc, #76]	; (8005820 <TIM_OC6_SetConfig+0xac>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d003      	beq.n	80057e0 <TIM_OC6_SetConfig+0x6c>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a12      	ldr	r2, [pc, #72]	; (8005824 <TIM_OC6_SetConfig+0xb0>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d109      	bne.n	80057f4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	029b      	lsls	r3, r3, #10
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685a      	ldr	r2, [r3, #4]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	621a      	str	r2, [r3, #32]
}
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40012c00 	.word	0x40012c00
 8005820:	40014000 	.word	0x40014000
 8005824:	40014400 	.word	0x40014400

08005828 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	2201      	movs	r2, #1
 800583c:	fa02 f303 	lsl.w	r3, r2, r3
 8005840:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6a1a      	ldr	r2, [r3, #32]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	43db      	mvns	r3, r3
 800584a:	401a      	ands	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a1a      	ldr	r2, [r3, #32]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f003 031f 	and.w	r3, r3, #31
 800585a:	6879      	ldr	r1, [r7, #4]
 800585c:	fa01 f303 	lsl.w	r3, r1, r3
 8005860:	431a      	orrs	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	621a      	str	r2, [r3, #32]
}
 8005866:	bf00      	nop
 8005868:	371c      	adds	r7, #28
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
	...

08005874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005888:	2302      	movs	r3, #2
 800588a:	e04f      	b.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a21      	ldr	r2, [pc, #132]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d108      	bne.n	80058c8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a14      	ldr	r2, [pc, #80]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d009      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f4:	d004      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a10      	ldr	r2, [pc, #64]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d10c      	bne.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005906:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	4313      	orrs	r3, r2
 8005910:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40014000 	.word	0x40014000

08005940 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005958:	2302      	movs	r3, #2
 800595a:	e060      	b.n	8005a1e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	041b      	lsls	r3, r3, #16
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a14      	ldr	r2, [pc, #80]	; (8005a2c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d115      	bne.n	8005a0c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	051b      	lsls	r3, r3, #20
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40012c00 	.word	0x40012c00

08005a30 <_ZN13elapsedMillis5resetEv>:

class elapsedMillis {
private:
	unsigned long ms;
public:
	void reset() {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
		ms = millis();
 8005a38:	f000 ffa4 	bl	8006984 <_Z6millisv>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	601a      	str	r2, [r3, #0]
	}
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <_ZN13elapsedMillisC1Ev>:
	elapsedMillis(void) {
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b082      	sub	sp, #8
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
		ms = millis();
 8005a52:	f000 ff97 	bl	8006984 <_Z6millisv>
 8005a56:	4602      	mov	r2, r0
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	601a      	str	r2, [r3, #0]
	}
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <_ZNK13elapsedMilliscvmEv>:
		ms = millis() - val;
	}
	elapsedMillis(const elapsedMillis &orig) {
		ms = orig.ms;
	}
	operator unsigned long() const {
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
		return millis() - ms;
 8005a6e:	f000 ff89 	bl	8006984 <_Z6millisv>
 8005a72:	4602      	mov	r2, r0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	1ad3      	subs	r3, r2, r3
	}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <_ZN6BuzzerC1EP17TIM_HandleTypeDefm>:
 *      Author: Dustin Lehmann
 */

#include "buzzer.h"

Buzzer::Buzzer(TIM_HandleTypeDef *tim, uint32_t channel) {
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3308      	adds	r3, #8
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff ffd9 	bl	8005a4a <_ZN13elapsedMillisC1Ev>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	751a      	strb	r2, [r3, #20]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	755a      	strb	r2, [r3, #21]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	759a      	strb	r2, [r3, #22]
	this->tim = tim;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	60da      	str	r2, [r3, #12]
	this->channel = channel;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	611a      	str	r2, [r3, #16]
}
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <_ZN6Buzzer8pwmStartEv>:

void Buzzer::pwmStart() {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
	uint32_t arr = (uint32_t) (BUZZER_TIMER_BASE_FREQUENCY
			/ (this->config.frequency * BUZZER_TIMER_PSC + this->config.frequency)) - 1;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	edd3 7a00 	vldr	s15, [r3]
 8005ace:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005ad2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	edd3 7a00 	vldr	s15, [r3]
 8005adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ae0:	eddf 6a60 	vldr	s13, [pc, #384]	; 8005c64 <_ZN6Buzzer8pwmStartEv+0x1a4>
 8005ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
	uint32_t arr = (uint32_t) (BUZZER_TIMER_BASE_FREQUENCY
 8005ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aec:	ee17 3a90 	vmov	r3, s15
 8005af0:	3b01      	subs	r3, #1
 8005af2:	60fb      	str	r3, [r7, #12]

	HAL_TIM_PWM_Start(this->tim, this->channel);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68da      	ldr	r2, [r3, #12]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	4619      	mov	r1, r3
 8005afe:	4610      	mov	r0, r2
 8005b00:	f7fe fd70 	bl	80045e4 <HAL_TIM_PWM_Start>

	if (this->tim->Instance == TIM2) {
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0e:	d146      	bne.n	8005b9e <_ZN6Buzzer8pwmStartEv+0xde>

		__HAL_TIM_SetAutoreload(this->tim, (uint32_t) arr)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	60da      	str	r2, [r3, #12]
		;

		__HAL_TIM_SetCompare(this->tim,this->channel,(uint32_t) arr/2);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <_ZN6Buzzer8pwmStartEv+0x78>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	0852      	lsrs	r2, r2, #1
 8005b34:	635a      	str	r2, [r3, #52]	; 0x34
 8005b36:	e08d      	b.n	8005c54 <_ZN6Buzzer8pwmStartEv+0x194>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b04      	cmp	r3, #4
 8005b3e:	d106      	bne.n	8005b4e <_ZN6Buzzer8pwmStartEv+0x8e>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	0852      	lsrs	r2, r2, #1
 8005b4a:	639a      	str	r2, [r3, #56]	; 0x38
 8005b4c:	e082      	b.n	8005c54 <_ZN6Buzzer8pwmStartEv+0x194>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d106      	bne.n	8005b64 <_ZN6Buzzer8pwmStartEv+0xa4>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	0852      	lsrs	r2, r2, #1
 8005b60:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b62:	e077      	b.n	8005c54 <_ZN6Buzzer8pwmStartEv+0x194>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b0c      	cmp	r3, #12
 8005b6a:	d106      	bne.n	8005b7a <_ZN6Buzzer8pwmStartEv+0xba>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	0852      	lsrs	r2, r2, #1
 8005b76:	641a      	str	r2, [r3, #64]	; 0x40
 8005b78:	e06c      	b.n	8005c54 <_ZN6Buzzer8pwmStartEv+0x194>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	2b10      	cmp	r3, #16
 8005b80:	d106      	bne.n	8005b90 <_ZN6Buzzer8pwmStartEv+0xd0>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	0852      	lsrs	r2, r2, #1
 8005b8c:	659a      	str	r2, [r3, #88]	; 0x58
 8005b8e:	e061      	b.n	8005c54 <_ZN6Buzzer8pwmStartEv+0x194>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	0852      	lsrs	r2, r2, #1
 8005b9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b9c:	e05a      	b.n	8005c54 <_ZN6Buzzer8pwmStartEv+0x194>

	} else {
		if (arr > 65535) {
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba4:	d302      	bcc.n	8005bac <_ZN6Buzzer8pwmStartEv+0xec>
			arr = 65535;
 8005ba6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005baa:	60fb      	str	r3, [r7, #12]
		}
		__HAL_TIM_SetAutoreload(this->tim, (uint16_t) arr)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	60da      	str	r2, [r3, #12]
		;

		__HAL_TIM_SetCompare(this->tim,this->channel,(uint16_t) arr/2);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d108      	bne.n	8005bdc <_ZN6Buzzer8pwmStartEv+0x11c>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	635a      	str	r2, [r3, #52]	; 0x34
 8005bda:	e03b      	b.n	8005c54 <_ZN6Buzzer8pwmStartEv+0x194>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d108      	bne.n	8005bf6 <_ZN6Buzzer8pwmStartEv+0x136>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	085b      	lsrs	r3, r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	639a      	str	r2, [r3, #56]	; 0x38
 8005bf4:	e02e      	b.n	8005c54 <_ZN6Buzzer8pwmStartEv+0x194>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b08      	cmp	r3, #8
 8005bfc:	d108      	bne.n	8005c10 <_ZN6Buzzer8pwmStartEv+0x150>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	085b      	lsrs	r3, r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	63da      	str	r2, [r3, #60]	; 0x3c
 8005c0e:	e021      	b.n	8005c54 <_ZN6Buzzer8pwmStartEv+0x194>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	2b0c      	cmp	r3, #12
 8005c16:	d108      	bne.n	8005c2a <_ZN6Buzzer8pwmStartEv+0x16a>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	085b      	lsrs	r3, r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	641a      	str	r2, [r3, #64]	; 0x40
 8005c28:	e014      	b.n	8005c54 <_ZN6Buzzer8pwmStartEv+0x194>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b10      	cmp	r3, #16
 8005c30:	d108      	bne.n	8005c44 <_ZN6Buzzer8pwmStartEv+0x184>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	085b      	lsrs	r3, r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	659a      	str	r2, [r3, #88]	; 0x58
 8005c42:	e007      	b.n	8005c54 <_ZN6Buzzer8pwmStartEv+0x194>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	085b      	lsrs	r3, r3, #1
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	this->pwm_on = 1;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	751a      	strb	r2, [r3, #20]
}
 8005c5a:	bf00      	nop
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	4bf42400 	.word	0x4bf42400

08005c68 <_ZN6Buzzer7pwmStopEv>:
void Buzzer::pwmStop() {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(this->tim, this->channel);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	f7fe fd90 	bl	80047a0 <HAL_TIM_PWM_Stop>
	this->pwm_on = 0;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	751a      	strb	r2, [r3, #20]
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <_ZN6Buzzer5startEv>:
	this->config.frequency = frequency;
	this->config.on_time_ms = on_time_ms;
	this->config.counter = counter;
}

void Buzzer::start() {
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
	this->buzzerTimer.reset();
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3308      	adds	r3, #8
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7ff fec8 	bl	8005a30 <_ZN13elapsedMillis5resetEv>
	this->output_state = 1;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	755a      	strb	r2, [r3, #21]
	this->counter = this->config.counter * 2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	759a      	strb	r2, [r3, #22]
}
 8005cb6:	bf00      	nop
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <_ZN6Buzzer6updateEv>:
void Buzzer::stop() {
	this->counter = 0;
	this->output_state = 0;
}

void Buzzer::update() {
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b082      	sub	sp, #8
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
// TODO: continious buzzer
	if (this->counter > 0) {
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	7d9b      	ldrb	r3, [r3, #22]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d02a      	beq.n	8005d24 <_ZN6Buzzer6updateEv+0x66>

		if (this->buzzerTimer >= this->config.on_time_ms) {
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	3308      	adds	r3, #8
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7ff fec7 	bl	8005a66 <_ZNK13elapsedMilliscvmEv>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	889b      	ldrh	r3, [r3, #4]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	bf2c      	ite	cs
 8005ce2:	2301      	movcs	r3, #1
 8005ce4:	2300      	movcc	r3, #0
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d01b      	beq.n	8005d24 <_ZN6Buzzer6updateEv+0x66>
			this->buzzerTimer.reset();
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3308      	adds	r3, #8
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff fe9d 	bl	8005a30 <_ZN13elapsedMillis5resetEv>

			this->output_state = !this->output_state;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	7d5b      	ldrb	r3, [r3, #21]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	bf0c      	ite	eq
 8005cfe:	2301      	moveq	r3, #1
 8005d00:	2300      	movne	r3, #0
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	755a      	strb	r2, [r3, #21]
			this->counter--;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	7d9b      	ldrb	r3, [r3, #22]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	759a      	strb	r2, [r3, #22]

			if (this->counter == 0){
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	7d9b      	ldrb	r3, [r3, #22]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d102      	bne.n	8005d24 <_ZN6Buzzer6updateEv+0x66>
				this->output_state = 0;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	755a      	strb	r2, [r3, #21]
			}
		}
	}

	if (this->output_state == 1 && this->pwm_on == 0) {
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	7d5b      	ldrb	r3, [r3, #21]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d107      	bne.n	8005d3c <_ZN6Buzzer6updateEv+0x7e>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	7d1b      	ldrb	r3, [r3, #20]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d103      	bne.n	8005d3c <_ZN6Buzzer6updateEv+0x7e>
		this->pwmStart();
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff fec3 	bl	8005ac0 <_ZN6Buzzer8pwmStartEv>
//
//	if (this->state == 0 && this->pwm_on) {
//		this->stop();
//	}

}
 8005d3a:	e00a      	b.n	8005d52 <_ZN6Buzzer6updateEv+0x94>
	} else if (this->output_state == 0 && this->pwm_on == 1) {
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	7d5b      	ldrb	r3, [r3, #21]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <_ZN6Buzzer6updateEv+0x94>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	7d1b      	ldrb	r3, [r3, #20]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d102      	bne.n	8005d52 <_ZN6Buzzer6updateEv+0x94>
		this->pwmStop();
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff ff8b 	bl	8005c68 <_ZN6Buzzer7pwmStopEv>
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <_ZN19core_utils_CallbackC1Ev>:


#include "callback.h"


core_utils_Callback::core_utils_Callback() {
 8005d5a:	b480      	push	{r7}
 8005d5c:	b083      	sub	sp, #12
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	721a      	strb	r2, [r3, #8]

}
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <_ZN19core_utils_Callback4callEPv>:
	this->callback = callback;
	this->params = params;
}


void core_utils_Callback::call(void *argument) {
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b082      	sub	sp, #8
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
	this->callback(argument, this->params);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6852      	ldr	r2, [r2, #4]
 8005d88:	4611      	mov	r1, r2
 8005d8a:	6838      	ldr	r0, [r7, #0]
 8005d8c:	4798      	blx	r3
}
 8005d8e:	bf00      	nop
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <_ZN6EEPROMC1EP19__I2C_HandleTypeDefh>:
 *      Author: Dustin Lehmann
 */

#include "eeprom.h"

EEPROM::EEPROM(I2C_HandleTypeDef *hi2c,
 8005d96:	b480      	push	{r7}
 8005d98:	b085      	sub	sp, #20
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	4613      	mov	r3, r2
 8005da2:	71fb      	strb	r3, [r7, #7]
		uint8_t address) {
	this->hi2c = hi2c;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	601a      	str	r2, [r3, #0]
	this->address = address;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	79fa      	ldrb	r2, [r7, #7]
 8005dae:	711a      	strb	r2, [r3, #4]
}
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <_ZN13elapsedMillisC1Em>:
	elapsedMillis(unsigned long val) {
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b082      	sub	sp, #8
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
 8005dc6:	6039      	str	r1, [r7, #0]
		ms = millis() - val;
 8005dc8:	f000 fddc 	bl	8006984 <_Z6millisv>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	1ad2      	subs	r2, r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	601a      	str	r2, [r3, #0]
	}
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <_ZN13elapsedMillisaSEm>:
	elapsedMillis & operator =(const elapsedMillis &rhs) {
		ms = rhs.ms;
		return *this;
	}
	elapsedMillis & operator =(unsigned long val) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b082      	sub	sp, #8
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
		ms = millis() - val;
 8005dea:	f000 fdcb 	bl	8006984 <_Z6millisv>
 8005dee:	4602      	mov	r2, r0
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	1ad2      	subs	r2, r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]
		return *this;
 8005df8:	687b      	ldr	r3, [r7, #4]
	}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <firmware_init>:
I2C_Slave i2c_slave_intern(&hi2c1, 0x02, register_map, 255);

elapsedMillis timer_test = 10000;

/* ================================================================================= */
void firmware_init() {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0

	neopixel_intern.init();
 8005e0a:	4832      	ldr	r0, [pc, #200]	; (8005ed4 <firmware_init+0xd0>)
 8005e0c:	f000 fc48 	bl	80066a0 <_ZN13WS2812_Strand4initEv>
	neopixel_extern.init();
 8005e10:	4831      	ldr	r0, [pc, #196]	; (8005ed8 <firmware_init+0xd4>)
 8005e12:	f000 fc45 	bl	80066a0 <_ZN13WS2812_Strand4initEv>

	neopixel_intern.update();
 8005e16:	482f      	ldr	r0, [pc, #188]	; (8005ed4 <firmware_init+0xd0>)
 8005e18:	f000 fc7a 	bl	8006710 <_ZN13WS2812_Strand6updateEv>
	neopixel_intern.send();
 8005e1c:	482d      	ldr	r0, [pc, #180]	; (8005ed4 <firmware_init+0xd0>)
 8005e1e:	f000 fd0a 	bl	8006836 <_ZN13WS2812_Strand4sendEv>

	neopixel_extern.update();
 8005e22:	482d      	ldr	r0, [pc, #180]	; (8005ed8 <firmware_init+0xd4>)
 8005e24:	f000 fc74 	bl	8006710 <_ZN13WS2812_Strand6updateEv>
	neopixel_extern.send();
 8005e28:	482b      	ldr	r0, [pc, #172]	; (8005ed8 <firmware_init+0xd4>)
 8005e2a:	f000 fd04 	bl	8006836 <_ZN13WS2812_Strand4sendEv>

	i2c_slave_cm4.init();
 8005e2e:	482b      	ldr	r0, [pc, #172]	; (8005edc <firmware_init+0xd8>)
 8005e30:	f000 fa50 	bl	80062d4 <_ZN9I2C_Slave4initEv>
	i2c_slave_cm4.start();
 8005e34:	4829      	ldr	r0, [pc, #164]	; (8005edc <firmware_init+0xd8>)
 8005e36:	f000 fa57 	bl	80062e8 <_ZN9I2C_Slave5startEv>

	i2c_slave_intern.init();
 8005e3a:	4829      	ldr	r0, [pc, #164]	; (8005ee0 <firmware_init+0xdc>)
 8005e3c:	f000 fa4a 	bl	80062d4 <_ZN9I2C_Slave4initEv>
	i2c_slave_intern.start();
 8005e40:	4827      	ldr	r0, [pc, #156]	; (8005ee0 <firmware_init+0xdc>)
 8005e42:	f000 fa51 	bl	80062e8 <_ZN9I2C_Slave5startEv>

	HAL_GPIO_WritePin(ENABLE_CM4_GPIO_Port, ENABLE_CM4_Pin, GPIO_PIN_SET);
 8005e46:	2201      	movs	r2, #1
 8005e48:	2140      	movs	r1, #64	; 0x40
 8005e4a:	4826      	ldr	r0, [pc, #152]	; (8005ee4 <firmware_init+0xe0>)
 8005e4c:	f7fb fcd8 	bl	8001800 <HAL_GPIO_WritePin>
//	neopixel_intern.led[1].continious_output = 1;
//	neopixel_intern.led[1].setColor(0, 0, 100);
//	neopixel_intern.led[1].blink_config.on_time_ms = 400;
//	neopixel_intern.led[1].blink_config.counter = 1;
//
	neopixel_intern.led[0].continious_output = 1;
 8005e50:	4b20      	ldr	r3, [pc, #128]	; (8005ed4 <firmware_init+0xd0>)
 8005e52:	2201      	movs	r2, #1
 8005e54:	729a      	strb	r2, [r3, #10]
	neopixel_intern.led[0].setColor(100, 0, 0);
 8005e56:	2300      	movs	r3, #0
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2164      	movs	r1, #100	; 0x64
 8005e5c:	481d      	ldr	r0, [pc, #116]	; (8005ed4 <firmware_init+0xd0>)
 8005e5e:	f000 fb58 	bl	8006512 <_ZN10WS2812_LED8setColorEhhh>
	neopixel_intern.led[0].blink_config.on_time_ms = 400;
 8005e62:	4b1c      	ldr	r3, [pc, #112]	; (8005ed4 <firmware_init+0xd0>)
 8005e64:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005e68:	811a      	strh	r2, [r3, #8]
	neopixel_intern.led[0].blink_config.counter = 10;
 8005e6a:	4b1a      	ldr	r3, [pc, #104]	; (8005ed4 <firmware_init+0xd0>)
 8005e6c:	220a      	movs	r2, #10
 8005e6e:	719a      	strb	r2, [r3, #6]

	for (int i = 0;i<16; i++){
 8005e70:	2300      	movs	r3, #0
 8005e72:	607b      	str	r3, [r7, #4]
 8005e74:	e018      	b.n	8005ea8 <firmware_init+0xa4>
		neopixel_extern.led[i].continious_output = 1;
 8005e76:	4918      	ldr	r1, [pc, #96]	; (8005ed8 <firmware_init+0xd4>)
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	4413      	add	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	440b      	add	r3, r1
 8005e84:	330a      	adds	r3, #10
 8005e86:	2201      	movs	r2, #1
 8005e88:	701a      	strb	r2, [r3, #0]
		neopixel_extern.led[i].setColor(100, 0, 0);
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	4413      	add	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4a10      	ldr	r2, [pc, #64]	; (8005ed8 <firmware_init+0xd4>)
 8005e96:	1898      	adds	r0, r3, r2
 8005e98:	2300      	movs	r3, #0
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2164      	movs	r1, #100	; 0x64
 8005e9e:	f000 fb38 	bl	8006512 <_ZN10WS2812_LED8setColorEhhh>
	for (int i = 0;i<16; i++){
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	607b      	str	r3, [r7, #4]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b0f      	cmp	r3, #15
 8005eac:	dde3      	ble.n	8005e76 <firmware_init+0x72>
	}


	rc_buzzer.config.frequency = 440;
 8005eae:	4b0e      	ldr	r3, [pc, #56]	; (8005ee8 <firmware_init+0xe4>)
 8005eb0:	4a0e      	ldr	r2, [pc, #56]	; (8005eec <firmware_init+0xe8>)
 8005eb2:	601a      	str	r2, [r3, #0]
	rc_buzzer.config.on_time_ms = 250;
 8005eb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ee8 <firmware_init+0xe4>)
 8005eb6:	22fa      	movs	r2, #250	; 0xfa
 8005eb8:	809a      	strh	r2, [r3, #4]
	rc_buzzer.config.counter = 3;
 8005eba:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <firmware_init+0xe4>)
 8005ebc:	2203      	movs	r2, #3
 8005ebe:	719a      	strb	r2, [r3, #6]

	led_status.off();
 8005ec0:	480b      	ldr	r0, [pc, #44]	; (8005ef0 <firmware_init+0xec>)
 8005ec2:	f000 fae5 	bl	8006490 <_ZN3LED3offEv>
	rc_buzzer.start();
 8005ec6:	4808      	ldr	r0, [pc, #32]	; (8005ee8 <firmware_init+0xe4>)
 8005ec8:	f7ff fee1 	bl	8005c8e <_ZN6Buzzer5startEv>


}
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	20000248 	.word	0x20000248
 8005ed8:	200005c8 	.word	0x200005c8
 8005edc:	20000a84 	.word	0x20000a84
 8005ee0:	20000aa4 	.word	0x20000aa4
 8005ee4:	48000400 	.word	0x48000400
 8005ee8:	20000948 	.word	0x20000948
 8005eec:	43dc0000 	.word	0x43dc0000
 8005ef0:	20000960 	.word	0x20000960

08005ef4 <firmware_update>:

/* ================================================================================= */
void firmware_update() {
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	af00      	add	r7, sp, #0

	if (timer_check >= 250) {
 8005ef8:	4822      	ldr	r0, [pc, #136]	; (8005f84 <firmware_update+0x90>)
 8005efa:	f7ff fdb4 	bl	8005a66 <_ZNK13elapsedMilliscvmEv>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2bf9      	cmp	r3, #249	; 0xf9
 8005f02:	bf8c      	ite	hi
 8005f04:	2301      	movhi	r3, #1
 8005f06:	2300      	movls	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00c      	beq.n	8005f28 <firmware_update+0x34>
		timer_check.reset();
 8005f0e:	481d      	ldr	r0, [pc, #116]	; (8005f84 <firmware_update+0x90>)
 8005f10:	f7ff fd8e 	bl	8005a30 <_ZN13elapsedMillis5resetEv>
		checkUsb();
 8005f14:	f000 f846 	bl	8005fa4 <_Z8checkUsbv>
		checkSD();
 8005f18:	f000 f84c 	bl	8005fb4 <_Z7checkSDv>

		led_error.toggle();
 8005f1c:	481a      	ldr	r0, [pc, #104]	; (8005f88 <firmware_update+0x94>)
 8005f1e:	f000 fac7 	bl	80064b0 <_ZN3LED6toggleEv>
		led_status.toggle();
 8005f22:	481a      	ldr	r0, [pc, #104]	; (8005f8c <firmware_update+0x98>)
 8005f24:	f000 fac4 	bl	80064b0 <_ZN3LED6toggleEv>

	}

	if (timer_led_update >= 10) {
 8005f28:	4819      	ldr	r0, [pc, #100]	; (8005f90 <firmware_update+0x9c>)
 8005f2a:	f7ff fd9c 	bl	8005a66 <_ZNK13elapsedMilliscvmEv>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b09      	cmp	r3, #9
 8005f32:	bf8c      	ite	hi
 8005f34:	2301      	movhi	r3, #1
 8005f36:	2300      	movls	r3, #0
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d012      	beq.n	8005f64 <firmware_update+0x70>
		timer_led_update = 0;
 8005f3e:	2100      	movs	r1, #0
 8005f40:	4813      	ldr	r0, [pc, #76]	; (8005f90 <firmware_update+0x9c>)
 8005f42:	f7ff ff4d 	bl	8005de0 <_ZN13elapsedMillisaSEm>
//		updateInternRGBLEDsFromRegisters();
//		updateStatusLEDFromRegisters();
//		updateBuzzerFromRegisters();
		neopixel_extern.update();
 8005f46:	4813      	ldr	r0, [pc, #76]	; (8005f94 <firmware_update+0xa0>)
 8005f48:	f000 fbe2 	bl	8006710 <_ZN13WS2812_Strand6updateEv>
		neopixel_extern.send();
 8005f4c:	4811      	ldr	r0, [pc, #68]	; (8005f94 <firmware_update+0xa0>)
 8005f4e:	f000 fc72 	bl	8006836 <_ZN13WS2812_Strand4sendEv>
		neopixel_intern.update();
 8005f52:	4811      	ldr	r0, [pc, #68]	; (8005f98 <firmware_update+0xa4>)
 8005f54:	f000 fbdc 	bl	8006710 <_ZN13WS2812_Strand6updateEv>
		neopixel_intern.send();
 8005f58:	480f      	ldr	r0, [pc, #60]	; (8005f98 <firmware_update+0xa4>)
 8005f5a:	f000 fc6c 	bl	8006836 <_ZN13WS2812_Strand4sendEv>

		rc_buzzer.update();
 8005f5e:	480f      	ldr	r0, [pc, #60]	; (8005f9c <firmware_update+0xa8>)
 8005f60:	f7ff fead 	bl	8005cbe <_ZN6Buzzer6updateEv>
	}

	if (timer_test >= 70) {
 8005f64:	480e      	ldr	r0, [pc, #56]	; (8005fa0 <firmware_update+0xac>)
 8005f66:	f7ff fd7e 	bl	8005a66 <_ZNK13elapsedMilliscvmEv>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b45      	cmp	r3, #69	; 0x45
 8005f6e:	bf8c      	ite	hi
 8005f70:	2301      	movhi	r3, #1
 8005f72:	2300      	movls	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <firmware_update+0x8c>
		timer_test.reset();
 8005f7a:	4809      	ldr	r0, [pc, #36]	; (8005fa0 <firmware_update+0xac>)
 8005f7c:	f7ff fd58 	bl	8005a30 <_ZN13elapsedMillis5resetEv>
	}

}
 8005f80:	bf00      	nop
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	20000978 	.word	0x20000978
 8005f88:	20000968 	.word	0x20000968
 8005f8c:	20000960 	.word	0x20000960
 8005f90:	2000097c 	.word	0x2000097c
 8005f94:	200005c8 	.word	0x200005c8
 8005f98:	20000248 	.word	0x20000248
 8005f9c:	20000948 	.word	0x20000948
 8005fa0:	20000ac4 	.word	0x20000ac4

08005fa4 <_Z8checkUsbv>:

/* ================================================================================= */
void checkUsb() {
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
}
 8005fa8:	bf00      	nop
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
	...

08005fb4 <_Z7checkSDv>:

/* ================================================================================= */
void checkSD() {
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(SD_CARD_SWITCH_GPIO_Port, SD_CARD_SWITCH_Pin) == 0) {
 8005fb8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fbc:	480c      	ldr	r0, [pc, #48]	; (8005ff0 <_Z7checkSDv+0x3c>)
 8005fbe:	f7fb fc07 	bl	80017d0 <HAL_GPIO_ReadPin>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	bf0c      	ite	eq
 8005fc8:	2301      	moveq	r3, #1
 8005fca:	2300      	movne	r3, #0
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d006      	beq.n	8005fe0 <_Z7checkSDv+0x2c>
		HAL_GPIO_WritePin(ENABLE_SD_GPIO_Port, ENABLE_SD_Pin, GPIO_PIN_SET);
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fd8:	4805      	ldr	r0, [pc, #20]	; (8005ff0 <_Z7checkSDv+0x3c>)
 8005fda:	f7fb fc11 	bl	8001800 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(ENABLE_SD_GPIO_Port, ENABLE_SD_Pin, GPIO_PIN_RESET);
	}
}
 8005fde:	e005      	b.n	8005fec <_Z7checkSDv+0x38>
		HAL_GPIO_WritePin(ENABLE_SD_GPIO_Port, ENABLE_SD_Pin, GPIO_PIN_RESET);
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fe6:	4802      	ldr	r0, [pc, #8]	; (8005ff0 <_Z7checkSDv+0x3c>)
 8005fe8:	f7fb fc0a 	bl	8001800 <HAL_GPIO_WritePin>
}
 8005fec:	bf00      	nop
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	48000400 	.word	0x48000400

08005ff4 <_Z41__static_initialization_and_destruction_0ii>:
			led->setMode(mode);
			led->continious_output  = (reg_config >> 7);
		}
	}

}
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af02      	add	r7, sp, #8
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d146      	bne.n	8006092 <_Z41__static_initialization_and_destruction_0ii+0x9e>
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800600a:	4293      	cmp	r3, r2
 800600c:	d141      	bne.n	8006092 <_Z41__static_initialization_and_destruction_0ii+0x9e>
FIRMWARE_NEOPIXEL_INTERN_CHANNEL, 2);
 800600e:	2302      	movs	r3, #2
 8006010:	2200      	movs	r2, #0
 8006012:	4922      	ldr	r1, [pc, #136]	; (800609c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8006014:	4822      	ldr	r0, [pc, #136]	; (80060a0 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8006016:	f000 fb17 	bl	8006648 <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh>
FIRMWARE_NEOPIXEL_EXTERN_CHANNEL, 16);
 800601a:	2310      	movs	r3, #16
 800601c:	2200      	movs	r2, #0
 800601e:	4921      	ldr	r1, [pc, #132]	; (80060a4 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8006020:	4821      	ldr	r0, [pc, #132]	; (80060a8 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8006022:	f000 fb11 	bl	8006648 <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh>
Buzzer rc_buzzer(FIRMWARE_PWM_BUZZER_TIM, FIRMWARE_PWM_BUZZER_CHANNEL);
 8006026:	2200      	movs	r2, #0
 8006028:	4920      	ldr	r1, [pc, #128]	; (80060ac <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800602a:	4821      	ldr	r0, [pc, #132]	; (80060b0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800602c:	f7ff fd29 	bl	8005a82 <_ZN6BuzzerC1EP17TIM_HandleTypeDefm>
LED led_status(LED_STATUS_GPIO_Port, LED_STATUS_Pin);
 8006030:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006034:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8006038:	481e      	ldr	r0, [pc, #120]	; (80060b4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800603a:	f000 fa15 	bl	8006468 <_ZN3LEDC1EP12GPIO_TypeDeft>
LED led_error(LED_ERROR_GPIO_Port, LED_ERROR_Pin);
 800603e:	2208      	movs	r2, #8
 8006040:	491d      	ldr	r1, [pc, #116]	; (80060b8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8006042:	481e      	ldr	r0, [pc, #120]	; (80060bc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8006044:	f000 fa10 	bl	8006468 <_ZN3LEDC1EP12GPIO_TypeDeft>
EEPROM eeprom_config(FIRMWARE_I2C_INTERN, BOARD_EEPROM_CONFIG_ADDRESS);
 8006048:	22a0      	movs	r2, #160	; 0xa0
 800604a:	491d      	ldr	r1, [pc, #116]	; (80060c0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800604c:	481d      	ldr	r0, [pc, #116]	; (80060c4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800604e:	f7ff fea2 	bl	8005d96 <_ZN6EEPROMC1EP19__I2C_HandleTypeDefh>
elapsedMillis timer_check = 1000;
 8006052:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006056:	481c      	ldr	r0, [pc, #112]	; (80060c8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8006058:	f7ff feb1 	bl	8005dbe <_ZN13elapsedMillisC1Em>
elapsedMillis timer_led_update;
 800605c:	481b      	ldr	r0, [pc, #108]	; (80060cc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800605e:	f7ff fcf4 	bl	8005a4a <_ZN13elapsedMillisC1Ev>
elapsedMillis timer_led_register_read;
 8006062:	481b      	ldr	r0, [pc, #108]	; (80060d0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8006064:	f7ff fcf1 	bl	8005a4a <_ZN13elapsedMillisC1Ev>
I2C_Slave i2c_slave_cm4(&hi2c2, 0x02, register_map, 255);
 8006068:	23ff      	movs	r3, #255	; 0xff
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	4b19      	ldr	r3, [pc, #100]	; (80060d4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800606e:	2202      	movs	r2, #2
 8006070:	4919      	ldr	r1, [pc, #100]	; (80060d8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8006072:	481a      	ldr	r0, [pc, #104]	; (80060dc <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8006074:	f000 f8f4 	bl	8006260 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh>
I2C_Slave i2c_slave_intern(&hi2c1, 0x02, register_map, 255);
 8006078:	23ff      	movs	r3, #255	; 0xff
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	4b15      	ldr	r3, [pc, #84]	; (80060d4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800607e:	2202      	movs	r2, #2
 8006080:	490f      	ldr	r1, [pc, #60]	; (80060c0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8006082:	4817      	ldr	r0, [pc, #92]	; (80060e0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8006084:	f000 f8ec 	bl	8006260 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh>
elapsedMillis timer_test = 10000;
 8006088:	f242 7110 	movw	r1, #10000	; 0x2710
 800608c:	4815      	ldr	r0, [pc, #84]	; (80060e4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 800608e:	f7ff fe96 	bl	8005dbe <_ZN13elapsedMillisC1Em>
}
 8006092:	bf00      	nop
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	2000011c 	.word	0x2000011c
 80060a0:	20000248 	.word	0x20000248
 80060a4:	200000d0 	.word	0x200000d0
 80060a8:	200005c8 	.word	0x200005c8
 80060ac:	20000168 	.word	0x20000168
 80060b0:	20000948 	.word	0x20000948
 80060b4:	20000960 	.word	0x20000960
 80060b8:	48000400 	.word	0x48000400
 80060bc:	20000968 	.word	0x20000968
 80060c0:	20000028 	.word	0x20000028
 80060c4:	20000970 	.word	0x20000970
 80060c8:	20000978 	.word	0x20000978
 80060cc:	2000097c 	.word	0x2000097c
 80060d0:	20000980 	.word	0x20000980
 80060d4:	20000984 	.word	0x20000984
 80060d8:	2000007c 	.word	0x2000007c
 80060dc:	20000a84 	.word	0x20000a84
 80060e0:	20000aa4 	.word	0x20000aa4
 80060e4:	20000ac4 	.word	0x20000ac4

080060e8 <_GLOBAL__sub_I_neopixel_intern>:
 80060e8:	b580      	push	{r7, lr}
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80060f0:	2001      	movs	r0, #1
 80060f2:	f7ff ff7f 	bl	8005ff4 <_Z41__static_initialization_and_destruction_0ii>
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <_Z3nopv>:
#include "i2c_slave.h"

I2C_Slave *registered_i2c_slaves[FIRMWARE_NUM_I2C_SLAVES];
uint8_t num_i2c_slave = 0;

void nop() {
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0

}
 80060fc:	bf00      	nop
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
	...

08006108 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>:

I2C_Slave* get_I2C_slave(I2C_HandleTypeDef *hi2c) {
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < num_i2c_slave; i++) {
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	e00f      	b.n	8006136 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x2e>
		if (registered_i2c_slaves[i]->hi2c == hi2c) {
 8006116:	4a0e      	ldr	r2, [pc, #56]	; (8006150 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x48>)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	429a      	cmp	r2, r3
 8006124:	d104      	bne.n	8006130 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x28>
			return registered_i2c_slaves[i];
 8006126:	4a0a      	ldr	r2, [pc, #40]	; (8006150 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x48>)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800612e:	e009      	b.n	8006144 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x3c>
	for (int i = 0; i < num_i2c_slave; i++) {
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3301      	adds	r3, #1
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	4b07      	ldr	r3, [pc, #28]	; (8006154 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x4c>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4293      	cmp	r3, r2
 8006140:	dbe9      	blt.n	8006116 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0xe>
		}
	}
	return NULL;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	20000ac8 	.word	0x20000ac8
 8006154:	20000ad0 	.word	0x20000ad0

08006158 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff ffd1 	bl	8006108 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 8006166:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_I2C_ListenCpltCallback+0x1c>
		slave->i2c_listenCompleteCallback();
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 f901 	bl	8006376 <_ZN9I2C_Slave26i2c_listenCompleteCallbackEv>
	}
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection,
		uint16_t AddrMatchCode) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	460b      	mov	r3, r1
 8006186:	70fb      	strb	r3, [r7, #3]
 8006188:	4613      	mov	r3, r2
 800618a:	803b      	strh	r3, [r7, #0]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7ff ffbb 	bl	8006108 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 8006192:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <HAL_I2C_AddrCallback+0x2a>
		slave->i2c_addrCallback(TransferDirection, AddrMatchCode);
 800619a:	883a      	ldrh	r2, [r7, #0]
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	4619      	mov	r1, r3
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f8ae 	bl	8006302 <_ZN9I2C_Slave16i2c_addrCallbackEht>
	}
}
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff ffa6 	bl	8006108 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 80061bc:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <HAL_I2C_SlaveRxCpltCallback+0x1c>
		slave->i2c_rxCompleteCallback();
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f000 f8f2 	bl	80063ae <_ZN9I2C_Slave22i2c_rxCompleteCallbackEv>
	}
}
 80061ca:	bf00      	nop
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7ff ff94 	bl	8006108 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 80061e0:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <HAL_I2C_SlaveTxCpltCallback+0x1c>
		slave->i2c_txCompleteCallback();
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f000 f904 	bl	80063f6 <_ZN9I2C_Slave22i2c_txCompleteCallbackEv>
	}
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b084      	sub	sp, #16
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff ff82 	bl	8006108 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 8006204:	60f8      	str	r0, [r7, #12]
	uint32_t x = HAL_I2C_GetError(hi2c);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fb fde9 	bl	8001dde <HAL_I2C_GetError>
 800620c:	60b8      	str	r0, [r7, #8]
	if (slave != NULL) {
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_I2C_ErrorCallback+0x24>
		slave->i2c_errorCallback();
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f90e 	bl	8006436 <_ZN9I2C_Slave17i2c_errorCallbackEv>
	}
}
 800621a:	bf00      	nop
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c) {
 8006222:	b580      	push	{r7, lr}
 8006224:	b084      	sub	sp, #16
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7ff ff6c 	bl	8006108 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 8006230:	60f8      	str	r0, [r7, #12]
	if (slave != NULL) {
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <HAL_I2C_AbortCpltCallback+0x1c>
		slave->i2c_abortCompleteCallback();
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 f90b 	bl	8006454 <_ZN9I2C_Slave25i2c_abortCompleteCallbackEv>
	}
}
 800623e:	bf00      	nop
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <_ZN19I2C_Slave_callbacksC1Ev>:

typedef struct I2C_Slave_config {
	I2C_Slave_mode mode;
} I2C_Slave_config;

struct I2C_Slave_callbacks {
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff fd82 	bl	8005d5a <_ZN19core_utils_CallbackC1Ev>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh>:

/* ===================================================================== */
I2C_Slave::I2C_Slave(I2C_HandleTypeDef *hi2c, uint8_t address,
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	603b      	str	r3, [r7, #0]
 800626c:	4613      	mov	r3, r2
 800626e:	71fb      	strb	r3, [r7, #7]
		uint8_t *registerMap, uint8_t num_registers) {
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff ffe7 	bl	8006246 <_ZN19I2C_Slave_callbacksC1Ev>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	615a      	str	r2, [r3, #20]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	761a      	strb	r2, [r3, #24]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	76da      	strb	r2, [r3, #27]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2200      	movs	r2, #0
 800628e:	771a      	strb	r2, [r3, #28]
	this->hi2c = hi2c;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	611a      	str	r2, [r3, #16]
	this->address = address;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	79fa      	ldrb	r2, [r7, #7]
 800629a:	775a      	strb	r2, [r3, #29]
	this->register_map = registerMap;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	615a      	str	r2, [r3, #20]
	this->register_map_length = num_registers;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	7e3a      	ldrb	r2, [r7, #24]
 80062a6:	765a      	strb	r2, [r3, #25]

	registered_i2c_slaves[num_i2c_slave] = this;
 80062a8:	4b08      	ldr	r3, [pc, #32]	; (80062cc <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh+0x6c>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	4619      	mov	r1, r3
 80062ae:	4a08      	ldr	r2, [pc, #32]	; (80062d0 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh+0x70>)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	num_i2c_slave++;
 80062b6:	4b05      	ldr	r3, [pc, #20]	; (80062cc <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh+0x6c>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	3301      	adds	r3, #1
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	4b03      	ldr	r3, [pc, #12]	; (80062cc <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh+0x6c>)
 80062c0:	701a      	strb	r2, [r3, #0]
}
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20000ad0 	.word	0x20000ad0
 80062d0:	20000ac8 	.word	0x20000ac8

080062d4 <_ZN9I2C_Slave4initEv>:

	registered_i2c_slaves[num_i2c_slave] = this;
	num_i2c_slave++;
}

void I2C_Slave::init() {
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]

}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <_ZN9I2C_Slave5startEv>:

void I2C_Slave::start() {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(this->hi2c);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7fb fcb5 	bl	8001c64 <HAL_I2C_EnableListen_IT>
}
 80062fa:	bf00      	nop
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <_ZN9I2C_Slave16i2c_addrCallbackEht>:
	}
	}
}

void I2C_Slave::i2c_addrCallback(uint8_t TransferDirection,
		uint16_t AddrMatchCode) {
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	70fb      	strb	r3, [r7, #3]
 800630e:	4613      	mov	r3, r2
 8006310:	803b      	strh	r3, [r7, #0]

	if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8006312:	78fb      	ldrb	r3, [r7, #3]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d118      	bne.n	800634a <_ZN9I2C_Slave16i2c_addrCallbackEht+0x48>
		this->direction = I2C_SLAVE_DIRECTION_TRANSMIT;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	769a      	strb	r2, [r3, #26]
		if (this->received_bytes == 0) {
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	7edb      	ldrb	r3, [r3, #27]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10e      	bne.n	8006344 <_ZN9I2C_Slave16i2c_addrCallbackEht+0x42>
			HAL_StatusTypeDef status = HAL_I2C_Slave_Seq_Receive_IT(this->hi2c, &this->bufferAddress, 1,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6918      	ldr	r0, [r3, #16]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f103 0118 	add.w	r1, r3, #24
 8006330:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006334:	2201      	movs	r2, #1
 8006336:	f7fb fbe3 	bl	8001b00 <HAL_I2C_Slave_Seq_Receive_IT>
 800633a:	4603      	mov	r3, r0
 800633c:	73fb      	strb	r3, [r7, #15]
			I2C_NEXT_FRAME);
			nop();
 800633e:	f7ff fedb 	bl	80060f8 <_Z3nopv>
	} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
		this->direction = I2C_SLAVE_DIRECTION_RECEIVE;
		HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
				&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
	}
}
 8006342:	e014      	b.n	800636e <_ZN9I2C_Slave16i2c_addrCallbackEht+0x6c>
			nop();
 8006344:	f7ff fed8 	bl	80060f8 <_Z3nopv>
}
 8006348:	e011      	b.n	800636e <_ZN9I2C_Slave16i2c_addrCallbackEht+0x6c>
	} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d10e      	bne.n	800636e <_ZN9I2C_Slave16i2c_addrCallbackEht+0x6c>
		this->direction = I2C_SLAVE_DIRECTION_RECEIVE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	769a      	strb	r2, [r3, #26]
		HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6918      	ldr	r0, [r3, #16]
				&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	7e12      	ldrb	r2, [r2, #24]
		HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 8006362:	1899      	adds	r1, r3, r2
 8006364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006368:	2201      	movs	r2, #1
 800636a:	f7fb fb17 	bl	800199c <HAL_I2C_Slave_Seq_Transmit_IT>
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <_ZN9I2C_Slave26i2c_listenCompleteCallbackEv>:
void I2C_Slave::i2c_listenCompleteCallback() {
 8006376:	b580      	push	{r7, lr}
 8006378:	b082      	sub	sp, #8
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]

	this->received_bytes = 0;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	76da      	strb	r2, [r3, #27]
	this->sent_bytes = 0;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	771a      	strb	r2, [r3, #28]
	HAL_I2C_EnableListen_IT(this->hi2c);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	4618      	mov	r0, r3
 8006390:	f7fb fc68 	bl	8001c64 <HAL_I2C_EnableListen_IT>
	if (this->callbacks.listen_cmplt_callback.registered) {
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	7a1b      	ldrb	r3, [r3, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <_ZN9I2C_Slave26i2c_listenCompleteCallbackEv+0x30>
		this->callbacks.listen_cmplt_callback.call(this);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff fce8 	bl	8005d76 <_ZN19core_utils_Callback4callEPv>
	}
}
 80063a6:	bf00      	nop
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <_ZN9I2C_Slave22i2c_rxCompleteCallbackEv>:
void I2C_Slave::i2c_rxCompleteCallback() {
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b082      	sub	sp, #8
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
	this->received_bytes++;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	7edb      	ldrb	r3, [r3, #27]
 80063ba:	3301      	adds	r3, #1
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	76da      	strb	r2, [r3, #27]
	if (this->received_bytes > 1) {
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	7edb      	ldrb	r3, [r3, #27]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d905      	bls.n	80063d6 <_ZN9I2C_Slave22i2c_rxCompleteCallbackEv+0x28>

		this->bufferAddress++;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	7e1b      	ldrb	r3, [r3, #24]
 80063ce:	3301      	adds	r3, #1
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	761a      	strb	r2, [r3, #24]

	}
	HAL_I2C_Slave_Seq_Receive_IT(this->hi2c,
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6918      	ldr	r0, [r3, #16]
			&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	7e12      	ldrb	r2, [r2, #24]
	HAL_I2C_Slave_Seq_Receive_IT(this->hi2c,
 80063e2:	1899      	adds	r1, r3, r2
 80063e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063e8:	2201      	movs	r2, #1
 80063ea:	f7fb fb89 	bl	8001b00 <HAL_I2C_Slave_Seq_Receive_IT>

}
 80063ee:	bf00      	nop
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <_ZN9I2C_Slave22i2c_txCompleteCallbackEv>:
void I2C_Slave::i2c_txCompleteCallback() {
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
	this->bufferAddress++;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	7e1b      	ldrb	r3, [r3, #24]
 8006402:	3301      	adds	r3, #1
 8006404:	b2da      	uxtb	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	761a      	strb	r2, [r3, #24]
	this->sent_bytes++;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7f1b      	ldrb	r3, [r3, #28]
 800640e:	3301      	adds	r3, #1
 8006410:	b2da      	uxtb	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	771a      	strb	r2, [r3, #28]
	HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6918      	ldr	r0, [r3, #16]
			&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	7e12      	ldrb	r2, [r2, #24]
	HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 8006422:	1899      	adds	r1, r3, r2
 8006424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006428:	2201      	movs	r2, #1
 800642a:	f7fb fab7 	bl	800199c <HAL_I2C_Slave_Seq_Transmit_IT>

}
 800642e:	bf00      	nop
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <_ZN9I2C_Slave17i2c_errorCallbackEv>:
void I2C_Slave::i2c_errorCallback() {
 8006436:	b580      	push	{r7, lr}
 8006438:	b082      	sub	sp, #8
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
	nop();
 800643e:	f7ff fe5b 	bl	80060f8 <_Z3nopv>
	HAL_I2C_EnableListen_IT(this->hi2c);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	4618      	mov	r0, r3
 8006448:	f7fb fc0c 	bl	8001c64 <HAL_I2C_EnableListen_IT>
}
 800644c:	bf00      	nop
 800644e:	3708      	adds	r7, #8
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <_ZN9I2C_Slave25i2c_abortCompleteCallbackEv>:
void I2C_Slave::i2c_abortCompleteCallback() {
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	nop();
 800645c:	f7ff fe4c 	bl	80060f8 <_Z3nopv>
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <_ZN3LEDC1EP12GPIO_TypeDeft>:
 */


#include "led.h"

LED::LED(GPIO_TypeDef* GPIOx, uint16_t PINx) {
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	4613      	mov	r3, r2
 8006474:	80fb      	strh	r3, [r7, #6]
	this->GPIOx = GPIOx;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	601a      	str	r2, [r3, #0]
	this->PINx = PINx;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	88fa      	ldrh	r2, [r7, #6]
 8006480:	809a      	strh	r2, [r3, #4]
}
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <_ZN3LED3offEv>:
void LED::on() {
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_SET);
}


void LED::off() {
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_RESET);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	889b      	ldrh	r3, [r3, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	4619      	mov	r1, r3
 80064a4:	f7fb f9ac 	bl	8001800 <HAL_GPIO_WritePin>
}
 80064a8:	bf00      	nop
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <_ZN3LED6toggleEv>:

void LED::toggle() {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(this->GPIOx, this->PINx);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	889b      	ldrh	r3, [r3, #4]
 80064c0:	4619      	mov	r1, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	f7fb f9b4 	bl	8001830 <HAL_GPIO_TogglePin>
}
 80064c8:	bf00      	nop
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <_ZN10WS2812_LEDC1Ev>:
#include <ws2812.h>

uint8_t num_neopixel = 0;
WS2812_Strand *neopixel_handler[2] = { 0 };

WS2812_LED::WS2812_LED() {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	705a      	strb	r2, [r3, #1]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	709a      	strb	r2, [r3, #2]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	70da      	strb	r2, [r3, #3]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	729a      	strb	r2, [r3, #10]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	330c      	adds	r3, #12
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff faa8 	bl	8005a4a <_ZN13elapsedMillisC1Ev>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3310      	adds	r3, #16
 80064fe:	2100      	movs	r1, #0
 8006500:	460a      	mov	r2, r1
 8006502:	801a      	strh	r2, [r3, #0]
 8006504:	460a      	mov	r2, r1
 8006506:	709a      	strb	r2, [r3, #2]
}
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}

08006512 <_ZN10WS2812_LED8setColorEhhh>:

WS2812_LED::WS2812_LED(uint8_t position) {
	this->strand_position = position;
}

void WS2812_LED::setColor(uint8_t red, uint8_t green, uint8_t blue) {
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
 800651a:	4608      	mov	r0, r1
 800651c:	4611      	mov	r1, r2
 800651e:	461a      	mov	r2, r3
 8006520:	4603      	mov	r3, r0
 8006522:	70fb      	strb	r3, [r7, #3]
 8006524:	460b      	mov	r3, r1
 8006526:	70bb      	strb	r3, [r7, #2]
 8006528:	4613      	mov	r3, r2
 800652a:	707b      	strb	r3, [r7, #1]
	this->red = red;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	78fa      	ldrb	r2, [r7, #3]
 8006530:	705a      	strb	r2, [r3, #1]
	this->green = green;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	78ba      	ldrb	r2, [r7, #2]
 8006536:	709a      	strb	r2, [r3, #2]
	this->blue = blue;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	787a      	ldrb	r2, [r7, #1]
 800653c:	70da      	strb	r2, [r3, #3]
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <_ZN10WS2812_LED6updateEv>:
		this->blink_counter = this->blink_config.counter*2;
		this->blinkTimer.reset();
	}
}

void WS2812_LED::update() {
 800654a:	b580      	push	{r7, lr}
 800654c:	b082      	sub	sp, #8
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]

	if (this->mode == WS2812_LED_MODE_CONTINIOUS) {
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	791b      	ldrb	r3, [r3, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d11b      	bne.n	8006592 <_ZN10WS2812_LED6updateEv+0x48>

		this->led_data[0] = this->green * this->continious_output;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	789a      	ldrb	r2, [r3, #2]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	7a9b      	ldrb	r3, [r3, #10]
 8006562:	fb12 f303 	smulbb	r3, r2, r3
 8006566:	b2da      	uxtb	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	741a      	strb	r2, [r3, #16]
		this->led_data[1] = this->red * this->continious_output;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	785a      	ldrb	r2, [r3, #1]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	7a9b      	ldrb	r3, [r3, #10]
 8006574:	fb12 f303 	smulbb	r3, r2, r3
 8006578:	b2da      	uxtb	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	745a      	strb	r2, [r3, #17]
		this->led_data[2] = this->blue * this->continious_output;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	78da      	ldrb	r2, [r3, #3]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	7a9b      	ldrb	r3, [r3, #10]
 8006586:	fb12 f303 	smulbb	r3, r2, r3
 800658a:	b2da      	uxtb	r2, r3
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	749a      	strb	r2, [r3, #18]

		this->led_data[0] = this->green * this->blink_output;
		this->led_data[1] = this->red * this->blink_output;
		this->led_data[2] = this->blue * this->blink_output;
	}
}
 8006590:	e056      	b.n	8006640 <_ZN10WS2812_LED6updateEv+0xf6>
	} else if (this->mode == WS2812_LED_MODE_BLINK) {
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	791b      	ldrb	r3, [r3, #4]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d152      	bne.n	8006640 <_ZN10WS2812_LED6updateEv+0xf6>
		if (this->blinkTimer >= this->blink_config.on_time_ms){
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	330c      	adds	r3, #12
 800659e:	4618      	mov	r0, r3
 80065a0:	f7ff fa61 	bl	8005a66 <_ZNK13elapsedMilliscvmEv>
 80065a4:	4602      	mov	r2, r0
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	891b      	ldrh	r3, [r3, #8]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	bf2c      	ite	cs
 80065ae:	2301      	movcs	r3, #1
 80065b0:	2300      	movcc	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d028      	beq.n	800660a <_ZN10WS2812_LED6updateEv+0xc0>
			this->blinkTimer.reset();
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	330c      	adds	r3, #12
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff fa37 	bl	8005a30 <_ZN13elapsedMillis5resetEv>
			this->blink_output = !this->blink_output;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	7cdb      	ldrb	r3, [r3, #19]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	bf0c      	ite	eq
 80065ca:	2301      	moveq	r3, #1
 80065cc:	2300      	movne	r3, #0
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	74da      	strb	r2, [r3, #19]
			if (this->blink_counter > 0){
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dd14      	ble.n	800660a <_ZN10WS2812_LED6updateEv+0xc0>
				this->blink_counter--;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	3b01      	subs	r3, #1
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	b25a      	sxtb	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	751a      	strb	r2, [r3, #20]
				if (this->blink_counter == 0){
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d106      	bne.n	800660a <_ZN10WS2812_LED6updateEv+0xc0>
					this->mode = WS2812_LED_MODE_CONTINIOUS;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	711a      	strb	r2, [r3, #4]
					this->blink_output = this->continious_output;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	7a9a      	ldrb	r2, [r3, #10]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	74da      	strb	r2, [r3, #19]
		this->led_data[0] = this->green * this->blink_output;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	789a      	ldrb	r2, [r3, #2]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	7cdb      	ldrb	r3, [r3, #19]
 8006612:	fb12 f303 	smulbb	r3, r2, r3
 8006616:	b2da      	uxtb	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	741a      	strb	r2, [r3, #16]
		this->led_data[1] = this->red * this->blink_output;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	785a      	ldrb	r2, [r3, #1]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	7cdb      	ldrb	r3, [r3, #19]
 8006624:	fb12 f303 	smulbb	r3, r2, r3
 8006628:	b2da      	uxtb	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	745a      	strb	r2, [r3, #17]
		this->led_data[2] = this->blue * this->blink_output;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	78da      	ldrb	r2, [r3, #3]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	7cdb      	ldrb	r3, [r3, #19]
 8006636:	fb12 f303 	smulbb	r3, r2, r3
 800663a:	b2da      	uxtb	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	749a      	strb	r2, [r3, #18]
}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh>:
	this->tim = tim;
	this->timer_channel = timer_channel;
	this->num_led = MAX_LED;
}

WS2812_Strand::WS2812_Strand(TIM_HandleTypeDef *tim, uint32_t timer_channel,
 8006648:	b5b0      	push	{r4, r5, r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
 8006654:	70fb      	strb	r3, [r7, #3]
		uint8_t num_led) {
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	240f      	movs	r4, #15
 800665a:	461d      	mov	r5, r3
 800665c:	e004      	b.n	8006668 <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh+0x20>
 800665e:	4628      	mov	r0, r5
 8006660:	f7ff ff36 	bl	80064d0 <_ZN10WS2812_LEDC1Ev>
 8006664:	3518      	adds	r5, #24
 8006666:	3c01      	subs	r4, #1
 8006668:	2c00      	cmp	r4, #0
 800666a:	daf8      	bge.n	800665e <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh+0x16>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
	this->tim = tim;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	this->timer_channel = timer_channel;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	this->num_led = num_led;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
}
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	4618      	mov	r0, r3
 8006698:	3710      	adds	r7, #16
 800669a:	46bd      	mov	sp, r7
 800669c:	bdb0      	pop	{r4, r5, r7, pc}
	...

080066a0 <_ZN13WS2812_Strand4initEv>:

void WS2812_Strand::init() {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	neopixel_handler[num_neopixel] = this;
 80066a8:	4b17      	ldr	r3, [pc, #92]	; (8006708 <_ZN13WS2812_Strand4initEv+0x68>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	4619      	mov	r1, r3
 80066ae:	4a17      	ldr	r2, [pc, #92]	; (800670c <_ZN13WS2812_Strand4initEv+0x6c>)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	num_neopixel++;
 80066b6:	4b14      	ldr	r3, [pc, #80]	; (8006708 <_ZN13WS2812_Strand4initEv+0x68>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	3301      	adds	r3, #1
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	4b12      	ldr	r3, [pc, #72]	; (8006708 <_ZN13WS2812_Strand4initEv+0x68>)
 80066c0:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < this->num_led; i++) {
 80066c2:	2300      	movs	r3, #0
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	e00d      	b.n	80066e4 <_ZN13WS2812_Strand4initEv+0x44>
		this->led[i].strand_position = i;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	b2d8      	uxtb	r0, r3
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4613      	mov	r3, r2
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	4413      	add	r3, r2
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	440b      	add	r3, r1
 80066da:	4602      	mov	r2, r0
 80066dc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < this->num_led; i++) {
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3301      	adds	r3, #1
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80066ea:	461a      	mov	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4293      	cmp	r3, r2
 80066f0:	dbea      	blt.n	80066c8 <_ZN13WS2812_Strand4initEv+0x28>
	}

	this->datasent = 0;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	this->reset();
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f8c2 	bl	8006884 <_ZN13WS2812_Strand5resetEv>
}
 8006700:	bf00      	nop
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	20000ad1 	.word	0x20000ad1
 800670c:	20000ad4 	.word	0x20000ad4

08006710 <_ZN13WS2812_Strand6updateEv>:

void WS2812_Strand::update() {
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
	this->data_index = 0;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
	uint32_t color;

	for (int i = 0; i < this->num_led; i++) {
 8006720:	2300      	movs	r3, #0
 8006722:	61fb      	str	r3, [r7, #28]
 8006724:	e00c      	b.n	8006740 <_ZN13WS2812_Strand6updateEv+0x30>
		this->led[i].update();
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	4613      	mov	r3, r2
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	4413      	add	r3, r2
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	4413      	add	r3, r2
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff ff08 	bl	800654a <_ZN10WS2812_LED6updateEv>
	for (int i = 0; i < this->num_led; i++) {
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	3301      	adds	r3, #1
 800673e:	61fb      	str	r3, [r7, #28]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8006746:	461a      	mov	r2, r3
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	4293      	cmp	r3, r2
 800674c:	dbeb      	blt.n	8006726 <_ZN13WS2812_Strand6updateEv+0x16>
	}

	for (int i = 0; i < this->num_led; i++) {
 800674e:	2300      	movs	r3, #0
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	e04c      	b.n	80067ee <_ZN13WS2812_Strand6updateEv+0xde>
		color = ((this->led[i].led_data[0] << 16)
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	4613      	mov	r3, r2
 800675a:	005b      	lsls	r3, r3, #1
 800675c:	4413      	add	r3, r2
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	440b      	add	r3, r1
 8006762:	3310      	adds	r3, #16
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	0419      	lsls	r1, r3, #16
				| (this->led[i].led_data[1] << 8) | (this->led[i].led_data[2]));
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	69ba      	ldr	r2, [r7, #24]
 800676c:	4613      	mov	r3, r2
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	4413      	add	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	4403      	add	r3, r0
 8006776:	3311      	adds	r3, #17
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	4319      	orrs	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	4613      	mov	r3, r2
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	4413      	add	r3, r2
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	4403      	add	r3, r0
 800678c:	3312      	adds	r3, #18
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	430b      	orrs	r3, r1
		color = ((this->led[i].led_data[0] << 16)
 8006792:	60fb      	str	r3, [r7, #12]

		for (int i = 23; i >= 0; i--) {
 8006794:	2317      	movs	r3, #23
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	e023      	b.n	80067e2 <_ZN13WS2812_Strand6updateEv+0xd2>
			if (color & (1 << i)) {
 800679a:	2201      	movs	r2, #1
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	fa02 f303 	lsl.w	r3, r2, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d008      	beq.n	80067be <_ZN13WS2812_Strand6updateEv+0xae>
				this->pwm_data[this->data_index] = WS2812_LONG_PULSE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	4413      	add	r3, r2
 80067b6:	221c      	movs	r2, #28
 80067b8:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
 80067bc:	e007      	b.n	80067ce <_ZN13WS2812_Strand6updateEv+0xbe>
			}

			else {
				this->pwm_data[this->data_index] = WS2812_SHORT_PULSE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	4413      	add	r3, r2
 80067c8:	220b      	movs	r2, #11
 80067ca:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
			}

			this->data_index++;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
		for (int i = 23; i >= 0; i--) {
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	3b01      	subs	r3, #1
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	dad8      	bge.n	800679a <_ZN13WS2812_Strand6updateEv+0x8a>
	for (int i = 0; i < this->num_led; i++) {
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	3301      	adds	r3, #1
 80067ec:	61bb      	str	r3, [r7, #24]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80067f4:	461a      	mov	r2, r3
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	4293      	cmp	r3, r2
 80067fa:	dbab      	blt.n	8006754 <_ZN13WS2812_Strand6updateEv+0x44>
		}
	}

	for (int i = 0; i < 10; i++) {
 80067fc:	2300      	movs	r3, #0
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	e011      	b.n	8006826 <_ZN13WS2812_Strand6updateEv+0x116>
		this->pwm_data[this->data_index] = 0;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	4413      	add	r3, r2
 800680c:	2200      	movs	r2, #0
 800680e:	f883 21ca 	strb.w	r2, [r3, #458]	; 0x1ca
		this->data_index++;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
	for (int i = 0; i < 10; i++) {
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	3301      	adds	r3, #1
 8006824:	613b      	str	r3, [r7, #16]
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b09      	cmp	r3, #9
 800682a:	ddea      	ble.n	8006802 <_ZN13WS2812_Strand6updateEv+0xf2>
	}
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	3720      	adds	r7, #32
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <_ZN13WS2812_Strand4sendEv>:

void WS2812_Strand::send() {
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Start_DMA(this->tim, this->timer_channel,
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
			(uint32_t*) this->pwm_data, this->data_index);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f503 72e5 	add.w	r2, r3, #458	; 0x1ca
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
	HAL_TIM_PWM_Start_DMA(this->tim, this->timer_channel,
 8006856:	b29b      	uxth	r3, r3
 8006858:	f7fe f82a 	bl	80048b0 <HAL_TIM_PWM_Start_DMA>
	while (this->datasent == 0) {
 800685c:	bf00      	nop
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 3188 	ldrb.w	r3, [r3, #392]	; 0x188
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	bf0c      	ite	eq
 800686a:	2301      	moveq	r3, #1
 800686c:	2300      	movne	r3, #0
 800686e:	b2db      	uxtb	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1f4      	bne.n	800685e <_ZN13WS2812_Strand4sendEv+0x28>

	};
	this->datasent = 0;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
}
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <_ZN13WS2812_Strand5resetEv>:

void WS2812_Strand::reset() {
 8006884:	b590      	push	{r4, r7, lr}
 8006886:	b089      	sub	sp, #36	; 0x24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 800688c:	2300      	movs	r3, #0
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	e020      	b.n	80068d4 <_ZN13WS2812_Strand5resetEv+0x50>
		this->led_data[i][0] = i;
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	b2d9      	uxtb	r1, r3
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	3362      	adds	r3, #98	; 0x62
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	460a      	mov	r2, r1
 80068a2:	709a      	strb	r2, [r3, #2]
		this->led_data[i][1] = 0;
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
		this->led_data[i][2] = 0;
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 218c 	strb.w	r2, [r3, #396]	; 0x18c
		this->led_data[i][3] = 0;
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	for (int i = 0; i < MAX_LED; i++) {
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	3301      	adds	r3, #1
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	2b0f      	cmp	r3, #15
 80068d8:	dddb      	ble.n	8006892 <_ZN13WS2812_Strand5resetEv+0xe>
	}
	uint32_t init_data[4] = { 50, 0, 50, 0 };
 80068da:	4b0c      	ldr	r3, [pc, #48]	; (800690c <_ZN13WS2812_Strand5resetEv+0x88>)
 80068dc:	f107 040c 	add.w	r4, r7, #12
 80068e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80068e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_TIM_PWM_Start_DMA(this->tim, this->timer_channel, (uint32_t*) init_data,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 1184 	ldr.w	r1, [r3, #388]	; 0x184
 80068f2:	f107 020c 	add.w	r2, r7, #12
 80068f6:	2304      	movs	r3, #4
 80068f8:	f7fd ffda 	bl	80048b0 <HAL_TIM_PWM_Start_DMA>
			4);
	HAL_Delay(10);
 80068fc:	200a      	movs	r0, #10
 80068fe:	f7fa fa71 	bl	8000de4 <HAL_Delay>
}
 8006902:	bf00      	nop
 8006904:	3724      	adds	r7, #36	; 0x24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd90      	pop	{r4, r7, pc}
 800690a:	bf00      	nop
 800690c:	08006a04 	.word	0x08006a04

08006910 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < num_neopixel; i++) {
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	e022      	b.n	8006964 <HAL_TIM_PWM_PulseFinishedCallback+0x54>
		if (htim == neopixel_handler[i]->tim) {
 800691e:	4a17      	ldr	r2, [pc, #92]	; (800697c <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006926:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	429a      	cmp	r2, r3
 800692e:	d116      	bne.n	800695e <HAL_TIM_PWM_PulseFinishedCallback+0x4e>
			HAL_TIM_PWM_Stop_DMA(neopixel_handler[i]->tim,
 8006930:	4a12      	ldr	r2, [pc, #72]	; (800697c <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006938:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
					neopixel_handler[i]->timer_channel);
 800693c:	490f      	ldr	r1, [pc, #60]	; (800697c <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			HAL_TIM_PWM_Stop_DMA(neopixel_handler[i]->tim,
 8006944:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8006948:	4619      	mov	r1, r3
 800694a:	4610      	mov	r0, r2
 800694c:	f7fe f9a8 	bl	8004ca0 <HAL_TIM_PWM_Stop_DMA>
			neopixel_handler[i]->datasent = 1;
 8006950:	4a0a      	ldr	r2, [pc, #40]	; (800697c <HAL_TIM_PWM_PulseFinishedCallback+0x6c>)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006958:	2201      	movs	r2, #1
 800695a:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
	for (int i = 0; i < num_neopixel; i++) {
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	3301      	adds	r3, #1
 8006962:	60fb      	str	r3, [r7, #12]
 8006964:	4b06      	ldr	r3, [pc, #24]	; (8006980 <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	461a      	mov	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4293      	cmp	r3, r2
 800696e:	dbd6      	blt.n	800691e <HAL_TIM_PWM_PulseFinishedCallback+0xe>
		}
	}

}
 8006970:	bf00      	nop
 8006972:	bf00      	nop
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	20000ad4 	.word	0x20000ad4
 8006980:	20000ad1 	.word	0x20000ad1

08006984 <_Z6millisv>:
 *      Author: Dustin Lehmann
 */

#include "elapsedMillis.h"

uint32_t millis() {
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8006988:	f7fa fa20 	bl	8000dcc <HAL_GetTick>
 800698c:	4603      	mov	r3, r0
}
 800698e:	4618      	mov	r0, r3
 8006990:	bd80      	pop	{r7, pc}

08006992 <memset>:
 8006992:	4402      	add	r2, r0
 8006994:	4603      	mov	r3, r0
 8006996:	4293      	cmp	r3, r2
 8006998:	d100      	bne.n	800699c <memset+0xa>
 800699a:	4770      	bx	lr
 800699c:	f803 1b01 	strb.w	r1, [r3], #1
 80069a0:	e7f9      	b.n	8006996 <memset+0x4>
	...

080069a4 <__libc_init_array>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	4d0d      	ldr	r5, [pc, #52]	; (80069dc <__libc_init_array+0x38>)
 80069a8:	4c0d      	ldr	r4, [pc, #52]	; (80069e0 <__libc_init_array+0x3c>)
 80069aa:	1b64      	subs	r4, r4, r5
 80069ac:	10a4      	asrs	r4, r4, #2
 80069ae:	2600      	movs	r6, #0
 80069b0:	42a6      	cmp	r6, r4
 80069b2:	d109      	bne.n	80069c8 <__libc_init_array+0x24>
 80069b4:	4d0b      	ldr	r5, [pc, #44]	; (80069e4 <__libc_init_array+0x40>)
 80069b6:	4c0c      	ldr	r4, [pc, #48]	; (80069e8 <__libc_init_array+0x44>)
 80069b8:	f000 f818 	bl	80069ec <_init>
 80069bc:	1b64      	subs	r4, r4, r5
 80069be:	10a4      	asrs	r4, r4, #2
 80069c0:	2600      	movs	r6, #0
 80069c2:	42a6      	cmp	r6, r4
 80069c4:	d105      	bne.n	80069d2 <__libc_init_array+0x2e>
 80069c6:	bd70      	pop	{r4, r5, r6, pc}
 80069c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069cc:	4798      	blx	r3
 80069ce:	3601      	adds	r6, #1
 80069d0:	e7ee      	b.n	80069b0 <__libc_init_array+0xc>
 80069d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d6:	4798      	blx	r3
 80069d8:	3601      	adds	r6, #1
 80069da:	e7f2      	b.n	80069c2 <__libc_init_array+0x1e>
 80069dc:	08006a54 	.word	0x08006a54
 80069e0:	08006a54 	.word	0x08006a54
 80069e4:	08006a54 	.word	0x08006a54
 80069e8:	08006a5c 	.word	0x08006a5c

080069ec <_init>:
 80069ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ee:	bf00      	nop
 80069f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069f2:	bc08      	pop	{r3}
 80069f4:	469e      	mov	lr, r3
 80069f6:	4770      	bx	lr

080069f8 <_fini>:
 80069f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fa:	bf00      	nop
 80069fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069fe:	bc08      	pop	{r3}
 8006a00:	469e      	mov	lr, r3
 8006a02:	4770      	bx	lr
