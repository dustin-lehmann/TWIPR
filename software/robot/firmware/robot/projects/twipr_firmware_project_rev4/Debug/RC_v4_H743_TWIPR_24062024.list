
RC_v4_H743_TWIPR_24062024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024d74  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001730  08025018  08025018  00035018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08026748  08026748  00036748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000018  08026750  08026750  00036750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08026768  08026768  00036768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000224  24000000  0802676c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001e380  24000228  08026990  00040228  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2401e5a8  08026990  0004e5a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00040224  2**0
                  CONTENTS, READONLY
 10 .ramd2block   00000000  30000000  30000000  00040252  2**0
                  CONTENTS
 11 .comment      00000043  00000000  00000000  00040252  2**0
                  CONTENTS, READONLY
 12 .debug_info   000920f9  00000000  00000000  00040295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000d5db  00000000  00000000  000d238e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003ed0  00000000  00000000  000df970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00003006  00000000  00000000  000e3840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013459  00000000  00000000  000e6846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00062096  00000000  00000000  000f9c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019bfc1  00000000  00000000  0015bd35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  000122b0  00000000  00000000  002f7cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000092  00000000  00000000  00309fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000228 	.word	0x24000228
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08024ffc 	.word	0x08024ffc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400022c 	.word	0x2400022c
 80002dc:	08024ffc 	.word	0x08024ffc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f001 fdc6 	bl	8002220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f83c 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 fc86 	bl	8000fa8 <MX_GPIO_Init>
  MX_DMA_Init();
 800069c:	f000 fbde 	bl	8000e5c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006a0:	f000 fb42 	bl	8000d28 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80006a4:	f000 f9a2 	bl	80009ec <MX_SPI2_Init>
  MX_UART8_Init();
 80006a8:	f000 faf0 	bl	8000c8c <MX_UART8_Init>
  MX_USART2_UART_Init();
 80006ac:	f000 fb88 	bl	8000dc0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006b0:	f000 f9f2 	bl	8000a98 <MX_TIM2_Init>
  MX_SPI1_Init();
 80006b4:	f000 f94a 	bl	800094c <MX_SPI1_Init>
  MX_I2C3_Init();
 80006b8:	f000 f908 	bl	80008cc <MX_I2C3_Init>
  MX_FDCAN1_Init();
 80006bc:	f000 f8a2 	bl	8000804 <MX_FDCAN1_Init>
  MX_TIM3_Init();
 80006c0:	f000 fa38 	bl	8000b34 <MX_TIM3_Init>
  MX_TIM4_Init();
 80006c4:	f000 fa8c 	bl	8000be0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006c8:	f00f f924 	bl	800f914 <osKernelInitialize>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer02 */
  myTimer02Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer02_attributes);
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <main+0x6c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	2101      	movs	r1, #1
 80006d2:	480a      	ldr	r0, [pc, #40]	; (80006fc <main+0x70>)
 80006d4:	f00f fa9a 	bl	800fc0c <osTimerNew>
 80006d8:	4603      	mov	r3, r0
 80006da:	4a09      	ldr	r2, [pc, #36]	; (8000700 <main+0x74>)
 80006dc:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	firmware();
 80006de:	f01a f9c3 	bl	801aa68 <firmware>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006e2:	4a08      	ldr	r2, [pc, #32]	; (8000704 <main+0x78>)
 80006e4:	2100      	movs	r1, #0
 80006e6:	4808      	ldr	r0, [pc, #32]	; (8000708 <main+0x7c>)
 80006e8:	f00f f995 	bl	800fa16 <osThreadNew>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a07      	ldr	r2, [pc, #28]	; (800070c <main+0x80>)
 80006f0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f2:	f00f f955 	bl	800f9a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006f6:	e7fe      	b.n	80006f6 <main+0x6a>
 80006f8:	08025388 	.word	0x08025388
 80006fc:	08001227 	.word	0x08001227
 8000700:	24000c24 	.word	0x24000c24
 8000704:	08025364 	.word	0x08025364
 8000708:	08001215 	.word	0x08001215
 800070c:	24000c20 	.word	0x24000c20

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b09c      	sub	sp, #112	; 0x70
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	224c      	movs	r2, #76	; 0x4c
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f022 fd79 	bl	8023216 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	2220      	movs	r2, #32
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f022 fd73 	bl	8023216 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000730:	2002      	movs	r0, #2
 8000732:	f006 fa9f 	bl	8006c74 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000736:	2300      	movs	r3, #0
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	4b30      	ldr	r3, [pc, #192]	; (80007fc <SystemClock_Config+0xec>)
 800073c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073e:	4a2f      	ldr	r2, [pc, #188]	; (80007fc <SystemClock_Config+0xec>)
 8000740:	f023 0301 	bic.w	r3, r3, #1
 8000744:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <SystemClock_Config+0xec>)
 8000748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4b2b      	ldr	r3, [pc, #172]	; (8000800 <SystemClock_Config+0xf0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a2a      	ldr	r2, [pc, #168]	; (8000800 <SystemClock_Config+0xf0>)
 8000756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <SystemClock_Config+0xf0>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000768:	bf00      	nop
 800076a:	4b25      	ldr	r3, [pc, #148]	; (8000800 <SystemClock_Config+0xf0>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000772:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000776:	d1f8      	bne.n	800076a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000778:	2301      	movs	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800077c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	2302      	movs	r3, #2
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 800078e:	2340      	movs	r3, #64	; 0x40
 8000790:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000796:	2304      	movs	r3, #4
 8000798:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800079a:	2302      	movs	r3, #2
 800079c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800079e:	230c      	movs	r3, #12
 80007a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 fa9a 	bl	8006ce8 <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007ba:	f000 fd51 	bl	8001260 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	233f      	movs	r3, #63	; 0x3f
 80007c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2303      	movs	r3, #3
 80007c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007ca:	2308      	movs	r3, #8
 80007cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ce:	2340      	movs	r3, #64	; 0x40
 80007d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007d2:	2340      	movs	r3, #64	; 0x40
 80007d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007da:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007dc:	2340      	movs	r3, #64	; 0x40
 80007de:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2102      	movs	r1, #2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f006 fed9 	bl	800759c <HAL_RCC_ClockConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80007f0:	f000 fd36 	bl	8001260 <Error_Handler>
  }
}
 80007f4:	bf00      	nop
 80007f6:	3770      	adds	r7, #112	; 0x70
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	58000400 	.word	0x58000400
 8000800:	58024800 	.word	0x58024800

08000804 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000808:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 800080a:	4a2f      	ldr	r2, [pc, #188]	; (80008c8 <MX_FDCAN1_Init+0xc4>)
 800080c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000814:	4b2b      	ldr	r3, [pc, #172]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800081a:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 800081c:	2200      	movs	r2, #0
 800081e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000820:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000822:	2200      	movs	r2, #0
 8000824:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000826:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000828:	2200      	movs	r2, #0
 800082a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 800082c:	4b25      	ldr	r3, [pc, #148]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 800082e:	2214      	movs	r2, #20
 8000830:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000834:	2201      	movs	r2, #1
 8000836:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 800083a:	2202      	movs	r2, #2
 800083c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000840:	2202      	movs	r2, #2
 8000842:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000846:	2201      	movs	r2, #1
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800084a:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 800084c:	2201      	movs	r2, #1
 800084e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000852:	2201      	movs	r2, #1
 8000854:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000858:	2201      	movs	r2, #1
 800085a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 800085e:	2200      	movs	r2, #0
 8000860:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000864:	2200      	movs	r2, #0
 8000866:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 800086a:	2200      	movs	r2, #0
 800086c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000870:	2200      	movs	r2, #0
 8000872:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000876:	2204      	movs	r2, #4
 8000878:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 800087c:	2200      	movs	r2, #0
 800087e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000880:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000882:	2204      	movs	r2, #4
 8000884:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000888:	2200      	movs	r2, #0
 800088a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800088c:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 800088e:	2204      	movs	r2, #4
 8000890:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 8000894:	2200      	movs	r2, #0
 8000896:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 800089a:	2200      	movs	r2, #0
 800089c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 80008ac:	2204      	movs	r2, #4
 80008ae:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_FDCAN1_Init+0xc0>)
 80008b2:	f004 fcc3 	bl	800523c <HAL_FDCAN_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008bc:	f000 fcd0 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	24000244 	.word	0x24000244
 80008c8:	4000a000 	.word	0x4000a000

080008cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_I2C3_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_I2C3_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_I2C3_Init+0x74>)
 80008d8:	4a1b      	ldr	r2, [pc, #108]	; (8000948 <MX_I2C3_Init+0x7c>)
 80008da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_I2C3_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_I2C3_Init+0x74>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_I2C3_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_I2C3_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_I2C3_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_I2C3_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_I2C3_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000906:	480e      	ldr	r0, [pc, #56]	; (8000940 <MX_I2C3_Init+0x74>)
 8000908:	f005 fd14 	bl	8006334 <HAL_I2C_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000912:	f000 fca5 	bl	8001260 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4809      	ldr	r0, [pc, #36]	; (8000940 <MX_I2C3_Init+0x74>)
 800091a:	f006 f913 	bl	8006b44 <HAL_I2CEx_ConfigAnalogFilter>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000924:	f000 fc9c 	bl	8001260 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_I2C3_Init+0x74>)
 800092c:	f006 f955 	bl	8006bda <HAL_I2CEx_ConfigDigitalFilter>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000936:	f000 fc93 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	240002e4 	.word	0x240002e4
 8000944:	40005c00 	.word	0x40005c00
 8000948:	10c0ecff 	.word	0x10c0ecff

0800094c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000950:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <MX_SPI1_Init+0x98>)
 8000952:	4a25      	ldr	r2, [pc, #148]	; (80009e8 <MX_SPI1_Init+0x9c>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_SPI1_Init+0x98>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095c:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <MX_SPI1_Init+0x98>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_SPI1_Init+0x98>)
 8000964:	2207      	movs	r2, #7
 8000966:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_SPI1_Init+0x98>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_SPI1_Init+0x98>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000974:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_SPI1_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_SPI1_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000980:	4b18      	ldr	r3, [pc, #96]	; (80009e4 <MX_SPI1_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_SPI1_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <MX_SPI1_Init+0x98>)
 800098e:	2200      	movs	r2, #0
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_SPI1_Init+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_SPI1_Init+0x98>)
 800099a:	2200      	movs	r2, #0
 800099c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_SPI1_Init+0x98>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_SPI1_Init+0x98>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_SPI1_Init+0x98>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_SPI1_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_SPI1_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_SPI1_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_SPI1_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_SPI1_Init+0x98>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_SPI1_Init+0x98>)
 80009d0:	f008 ffde 	bl	8009990 <HAL_SPI_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_SPI1_Init+0x92>
  {
    Error_Handler();
 80009da:	f000 fc41 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	24000338 	.word	0x24000338
 80009e8:	40013000 	.word	0x40013000

080009ec <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <MX_SPI2_Init+0xa4>)
 80009f2:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <MX_SPI2_Init+0xa8>)
 80009f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <MX_SPI2_Init+0xa4>)
 80009f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009fe:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a06:	2207      	movs	r2, #7
 8000a08:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a1c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a24:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a58:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a7c:	4804      	ldr	r0, [pc, #16]	; (8000a90 <MX_SPI2_Init+0xa4>)
 8000a7e:	f008 ff87 	bl	8009990 <HAL_SPI_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000a88:	f000 fbea 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	240003ec 	.word	0x240003ec
 8000a94:	40003800 	.word	0x40003800

08000a98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a9e:	f107 0310 	add.w	r3, r7, #16
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	; (8000b30 <MX_TIM2_Init+0x98>)
 8000ab8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000abc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_TIM2_Init+0x98>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_TIM2_Init+0x98>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_TIM2_Init+0x98>)
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_TIM2_Init+0x98>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_TIM2_Init+0x98>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ade:	4814      	ldr	r0, [pc, #80]	; (8000b30 <MX_TIM2_Init+0x98>)
 8000ae0:	f00a fb3d 	bl	800b15e <HAL_TIM_Base_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000aea:	f000 fbb9 	bl	8001260 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4619      	mov	r1, r3
 8000afa:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_TIM2_Init+0x98>)
 8000afc:	f00a fdc4 	bl	800b688 <HAL_TIM_ConfigClockSource>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b06:	f000 fbab 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4619      	mov	r1, r3
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <MX_TIM2_Init+0x98>)
 8000b18:	f00b f80e 	bl	800bb38 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b22:	f000 fb9d 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	3720      	adds	r7, #32
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	24000590 	.word	0x24000590

08000b34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08c      	sub	sp, #48	; 0x30
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b3a:	f107 030c 	add.w	r3, r7, #12
 8000b3e:	2224      	movs	r2, #36	; 0x24
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f022 fb67 	bl	8023216 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_TIM3_Init+0xa4>)
 8000b54:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <MX_TIM3_Init+0xa8>)
 8000b56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <MX_TIM3_Init+0xa4>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <MX_TIM3_Init+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b64:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <MX_TIM3_Init+0xa4>)
 8000b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <MX_TIM3_Init+0xa4>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_TIM3_Init+0xa4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b80:	2301      	movs	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b90:	2301      	movs	r3, #1
 8000b92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <MX_TIM3_Init+0xa4>)
 8000ba4:	f00a fbaa 	bl	800b2fc <HAL_TIM_Encoder_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000bae:	f000 fb57 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4806      	ldr	r0, [pc, #24]	; (8000bd8 <MX_TIM3_Init+0xa4>)
 8000bc0:	f00a ffba 	bl	800bb38 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000bca:	f000 fb49 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	3730      	adds	r7, #48	; 0x30
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	240005dc 	.word	0x240005dc
 8000bdc:	40000400 	.word	0x40000400

08000be0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	2224      	movs	r2, #36	; 0x24
 8000bec:	2100      	movs	r1, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f022 fb11 	bl	8023216 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_TIM4_Init+0xa4>)
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <MX_TIM4_Init+0xa8>)
 8000c02:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_TIM4_Init+0xa4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_TIM4_Init+0xa4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_TIM4_Init+0xa4>)
 8000c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_TIM4_Init+0xa4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <MX_TIM4_Init+0xa4>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_TIM4_Init+0xa4>)
 8000c50:	f00a fb54 	bl	800b2fc <HAL_TIM_Encoder_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c5a:	f000 fb01 	bl	8001260 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c66:	463b      	mov	r3, r7
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_TIM4_Init+0xa4>)
 8000c6c:	f00a ff64 	bl	800bb38 <HAL_TIMEx_MasterConfigSynchronization>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c76:	f000 faf3 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3730      	adds	r7, #48	; 0x30
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	24000628 	.word	0x24000628
 8000c88:	40000800 	.word	0x40000800

08000c8c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <MX_UART8_Init+0x94>)
 8000c92:	4a24      	ldr	r2, [pc, #144]	; (8000d24 <MX_UART8_Init+0x98>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 57600;
 8000c96:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <MX_UART8_Init+0x94>)
 8000c98:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000c9c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <MX_UART8_Init+0x94>)
 8000ca0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ca4:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_UART8_Init+0x94>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_UART8_Init+0x94>)
 8000cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_UART8_Init+0x94>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_UART8_Init+0x94>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_UART8_Init+0x94>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <MX_UART8_Init+0x94>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_UART8_Init+0x94>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <MX_UART8_Init+0x94>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000cd8:	4811      	ldr	r0, [pc, #68]	; (8000d20 <MX_UART8_Init+0x94>)
 8000cda:	f00a ffd9 	bl	800bc90 <HAL_UART_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_UART8_Init+0x5c>
  {
    Error_Handler();
 8000ce4:	f000 fabc 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_UART8_Init+0x94>)
 8000cec:	f00e fcaf 	bl	800f64e <HAL_UARTEx_SetTxFifoThreshold>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_UART8_Init+0x6e>
  {
    Error_Handler();
 8000cf6:	f000 fab3 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <MX_UART8_Init+0x94>)
 8000cfe:	f00e fce4 	bl	800f6ca <HAL_UARTEx_SetRxFifoThreshold>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_UART8_Init+0x80>
  {
    Error_Handler();
 8000d08:	f000 faaa 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_UART8_Init+0x94>)
 8000d0e:	f00e fc65 	bl	800f5dc <HAL_UARTEx_DisableFifoMode>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_UART8_Init+0x90>
  {
    Error_Handler();
 8000d18:	f000 faa2 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	24000674 	.word	0x24000674
 8000d24:	40007c00 	.word	0x40007c00

08000d28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d2e:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <MX_USART1_UART_Init+0x94>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d70:	4811      	ldr	r0, [pc, #68]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d72:	f00a ff8d 	bl	800bc90 <HAL_UART_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d7c:	f000 fa70 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d80:	2100      	movs	r1, #0
 8000d82:	480d      	ldr	r0, [pc, #52]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d84:	f00e fc63 	bl	800f64e <HAL_UARTEx_SetTxFifoThreshold>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d8e:	f000 fa67 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4808      	ldr	r0, [pc, #32]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d96:	f00e fc98 	bl	800f6ca <HAL_UARTEx_SetRxFifoThreshold>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000da0:	f000 fa5e 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000da6:	f00e fc19 	bl	800f5dc <HAL_UARTEx_DisableFifoMode>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000db0:	f000 fa56 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	24000740 	.word	0x24000740
 8000dbc:	40011000 	.word	0x40011000

08000dc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc4:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <MX_USART2_UART_Init+0x94>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000dcc:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <MX_USART2_UART_Init+0x98>)
 8000dce:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000de4:	220c      	movs	r2, #12
 8000de6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e06:	4812      	ldr	r0, [pc, #72]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000e08:	f00a ff42 	bl	800bc90 <HAL_UART_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000e12:	f000 fa25 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e16:	2100      	movs	r1, #0
 8000e18:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000e1a:	f00e fc18 	bl	800f64e <HAL_UARTEx_SetTxFifoThreshold>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000e24:	f000 fa1c 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4809      	ldr	r0, [pc, #36]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000e2c:	f00e fc4d 	bl	800f6ca <HAL_UARTEx_SetRxFifoThreshold>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000e36:	f000 fa13 	bl	8001260 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000e3c:	f00e fbce 	bl	800f5dc <HAL_UARTEx_DisableFifoMode>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000e46:	f000 fa0b 	bl	8001260 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2400080c 	.word	0x2400080c
 8000e54:	40004400 	.word	0x40004400
 8000e58:	000f4240 	.word	0x000f4240

08000e5c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e62:	4b4e      	ldr	r3, [pc, #312]	; (8000f9c <MX_DMA_Init+0x140>)
 8000e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e68:	4a4c      	ldr	r2, [pc, #304]	; (8000f9c <MX_DMA_Init+0x140>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e72:	4b4a      	ldr	r3, [pc, #296]	; (8000f9c <MX_DMA_Init+0x140>)
 8000e74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e80:	4b46      	ldr	r3, [pc, #280]	; (8000f9c <MX_DMA_Init+0x140>)
 8000e82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e86:	4a45      	ldr	r2, [pc, #276]	; (8000f9c <MX_DMA_Init+0x140>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e90:	4b42      	ldr	r3, [pc, #264]	; (8000f9c <MX_DMA_Init+0x140>)
 8000e92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000e9e:	4b40      	ldr	r3, [pc, #256]	; (8000fa0 <MX_DMA_Init+0x144>)
 8000ea0:	4a40      	ldr	r2, [pc, #256]	; (8000fa4 <MX_DMA_Init+0x148>)
 8000ea2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8000ea4:	4b3e      	ldr	r3, [pc, #248]	; (8000fa0 <MX_DMA_Init+0x144>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <MX_DMA_Init+0x144>)
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000eb0:	4b3b      	ldr	r3, [pc, #236]	; (8000fa0 <MX_DMA_Init+0x144>)
 8000eb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000eb6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000eb8:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <MX_DMA_Init+0x144>)
 8000eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ebe:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ec0:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <MX_DMA_Init+0x144>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec6:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <MX_DMA_Init+0x144>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000ecc:	4b34      	ldr	r3, [pc, #208]	; (8000fa0 <MX_DMA_Init+0x144>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ed2:	4b33      	ldr	r3, [pc, #204]	; (8000fa0 <MX_DMA_Init+0x144>)
 8000ed4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ed8:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000eda:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <MX_DMA_Init+0x144>)
 8000edc:	2204      	movs	r2, #4
 8000ede:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	; (8000fa0 <MX_DMA_Init+0x144>)
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ee6:	4b2e      	ldr	r3, [pc, #184]	; (8000fa0 <MX_DMA_Init+0x144>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000eec:	4b2c      	ldr	r3, [pc, #176]	; (8000fa0 <MX_DMA_Init+0x144>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000ef2:	482b      	ldr	r0, [pc, #172]	; (8000fa0 <MX_DMA_Init+0x144>)
 8000ef4:	f001 fb00 	bl	80024f8 <HAL_DMA_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_DMA_Init+0xa6>
  {
    Error_Handler( );
 8000efe:	f000 f9af 	bl	8001260 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2105      	movs	r1, #5
 8000f06:	200b      	movs	r0, #11
 8000f08:	f001 face 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f0c:	200b      	movs	r0, #11
 8000f0e:	f001 fae5 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2105      	movs	r1, #5
 8000f16:	200c      	movs	r0, #12
 8000f18:	f001 fac6 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f1c:	200c      	movs	r0, #12
 8000f1e:	f001 fadd 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2105      	movs	r1, #5
 8000f26:	200d      	movs	r0, #13
 8000f28:	f001 fabe 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f2c:	200d      	movs	r0, #13
 8000f2e:	f001 fad5 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2105      	movs	r1, #5
 8000f36:	200e      	movs	r0, #14
 8000f38:	f001 fab6 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f3c:	200e      	movs	r0, #14
 8000f3e:	f001 facd 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2105      	movs	r1, #5
 8000f46:	200f      	movs	r0, #15
 8000f48:	f001 faae 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f4c:	200f      	movs	r0, #15
 8000f4e:	f001 fac5 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2105      	movs	r1, #5
 8000f56:	2010      	movs	r0, #16
 8000f58:	f001 faa6 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f5c:	2010      	movs	r0, #16
 8000f5e:	f001 fabd 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2105      	movs	r1, #5
 8000f66:	2011      	movs	r0, #17
 8000f68:	f001 fa9e 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f6c:	2011      	movs	r0, #17
 8000f6e:	f001 fab5 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2105      	movs	r1, #5
 8000f76:	202f      	movs	r0, #47	; 0x2f
 8000f78:	f001 fa96 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000f7c:	202f      	movs	r0, #47	; 0x2f
 8000f7e:	f001 faad 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2105      	movs	r1, #5
 8000f86:	2038      	movs	r0, #56	; 0x38
 8000f88:	f001 fa8e 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f8c:	2038      	movs	r0, #56	; 0x38
 8000f8e:	f001 faa5 	bl	80024dc <HAL_NVIC_EnableIRQ>

}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	24000ba8 	.word	0x24000ba8
 8000fa4:	40020410 	.word	0x40020410

08000fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fbe:	4b8f      	ldr	r3, [pc, #572]	; (80011fc <MX_GPIO_Init+0x254>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc4:	4a8d      	ldr	r2, [pc, #564]	; (80011fc <MX_GPIO_Init+0x254>)
 8000fc6:	f043 0310 	orr.w	r3, r3, #16
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fce:	4b8b      	ldr	r3, [pc, #556]	; (80011fc <MX_GPIO_Init+0x254>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	f003 0310 	and.w	r3, r3, #16
 8000fd8:	61bb      	str	r3, [r7, #24]
 8000fda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fdc:	4b87      	ldr	r3, [pc, #540]	; (80011fc <MX_GPIO_Init+0x254>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	4a86      	ldr	r2, [pc, #536]	; (80011fc <MX_GPIO_Init+0x254>)
 8000fe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fec:	4b83      	ldr	r3, [pc, #524]	; (80011fc <MX_GPIO_Init+0x254>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	4b80      	ldr	r3, [pc, #512]	; (80011fc <MX_GPIO_Init+0x254>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	4a7e      	ldr	r2, [pc, #504]	; (80011fc <MX_GPIO_Init+0x254>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100a:	4b7c      	ldr	r3, [pc, #496]	; (80011fc <MX_GPIO_Init+0x254>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	f003 0304 	and.w	r3, r3, #4
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	4b78      	ldr	r3, [pc, #480]	; (80011fc <MX_GPIO_Init+0x254>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	4a77      	ldr	r2, [pc, #476]	; (80011fc <MX_GPIO_Init+0x254>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001028:	4b74      	ldr	r3, [pc, #464]	; (80011fc <MX_GPIO_Init+0x254>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b71      	ldr	r3, [pc, #452]	; (80011fc <MX_GPIO_Init+0x254>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	4a6f      	ldr	r2, [pc, #444]	; (80011fc <MX_GPIO_Init+0x254>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001046:	4b6d      	ldr	r3, [pc, #436]	; (80011fc <MX_GPIO_Init+0x254>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001054:	4b69      	ldr	r3, [pc, #420]	; (80011fc <MX_GPIO_Init+0x254>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105a:	4a68      	ldr	r2, [pc, #416]	; (80011fc <MX_GPIO_Init+0x254>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001064:	4b65      	ldr	r3, [pc, #404]	; (80011fc <MX_GPIO_Init+0x254>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106a:	f003 0308 	and.w	r3, r3, #8
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	210c      	movs	r1, #12
 8001076:	4862      	ldr	r0, [pc, #392]	; (8001200 <MX_GPIO_Init+0x258>)
 8001078:	f005 f90e 	bl	8006298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUTTON_LED_1_Pin|BUTTON_LED_2_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2103      	movs	r1, #3
 8001080:	4860      	ldr	r0, [pc, #384]	; (8001204 <MX_GPIO_Init+0x25c>)
 8001082:	f005 f909 	bl	8006298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 800108c:	485e      	ldr	r0, [pc, #376]	; (8001208 <MX_GPIO_Init+0x260>)
 800108e:	f005 f903 	bl	8006298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001098:	485c      	ldr	r0, [pc, #368]	; (800120c <MX_GPIO_Init+0x264>)
 800109a:	f005 f8fd 	bl	8006298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|LED_ACT_Pin|RS485_EN_Pin
 800109e:	2200      	movs	r2, #0
 80010a0:	f648 3180 	movw	r1, #35712	; 0x8b80
 80010a4:	485a      	ldr	r0, [pc, #360]	; (8001210 <MX_GPIO_Init+0x268>)
 80010a6:	f005 f8f7 	bl	8006298 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010aa:	2310      	movs	r3, #16
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4852      	ldr	r0, [pc, #328]	; (8001208 <MX_GPIO_Init+0x260>)
 80010be:	f004 ff23 	bl	8005f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010c2:	2320      	movs	r3, #32
 80010c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80010d2:	2304      	movs	r3, #4
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010d6:	f107 031c 	add.w	r3, r7, #28
 80010da:	4619      	mov	r1, r3
 80010dc:	484a      	ldr	r0, [pc, #296]	; (8001208 <MX_GPIO_Init+0x260>)
 80010de:	f004 ff13 	bl	8005f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIDE_BUTTON_2_Pin SIDE_BUTTON_1_Pin */
  GPIO_InitStruct.Pin = SIDE_BUTTON_2_Pin|SIDE_BUTTON_1_Pin;
 80010e2:	2303      	movs	r3, #3
 80010e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4619      	mov	r1, r3
 80010f4:	4842      	ldr	r0, [pc, #264]	; (8001200 <MX_GPIO_Init+0x258>)
 80010f6:	f004 ff07 	bl	8005f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010fa:	230c      	movs	r3, #12
 80010fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	483b      	ldr	r0, [pc, #236]	; (8001200 <MX_GPIO_Init+0x258>)
 8001112:	f004 fef9 	bl	8005f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_LED_1_Pin BUTTON_LED_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_1_Pin|BUTTON_LED_2_Pin;
 8001116:	2303      	movs	r3, #3
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111a:	2301      	movs	r3, #1
 800111c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	4619      	mov	r1, r3
 800112c:	4835      	ldr	r0, [pc, #212]	; (8001204 <MX_GPIO_Init+0x25c>)
 800112e:	f004 feeb 	bl	8005f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001132:	2304      	movs	r3, #4
 8001134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001136:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800113c:	2302      	movs	r3, #2
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	4831      	ldr	r0, [pc, #196]	; (800120c <MX_GPIO_Init+0x264>)
 8001148:	f004 fede 	bl	8005f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800114c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001152:	2301      	movs	r3, #1
 8001154:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001156:	2302      	movs	r3, #2
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800115e:	f107 031c 	add.w	r3, r7, #28
 8001162:	4619      	mov	r1, r3
 8001164:	4828      	ldr	r0, [pc, #160]	; (8001208 <MX_GPIO_Init+0x260>)
 8001166:	f004 fecf 	bl	8005f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 800116a:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	4821      	ldr	r0, [pc, #132]	; (8001208 <MX_GPIO_Init+0x260>)
 8001184:	f004 fec0 	bl	8005f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_IMU_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin;
 8001188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	2300      	movs	r3, #0
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_IMU_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	481a      	ldr	r0, [pc, #104]	; (800120c <MX_GPIO_Init+0x264>)
 80011a2:	f004 feb1 	bl	8005f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b4:	2303      	movs	r3, #3
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	4814      	ldr	r0, [pc, #80]	; (8001210 <MX_GPIO_Init+0x268>)
 80011c0:	f004 fea2 	bl	8005f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 LED_ACT_Pin RS485_EN_Pin PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LED_ACT_Pin|RS485_EN_Pin|GPIO_PIN_7;
 80011c4:	f648 2380 	movw	r3, #35456	; 0x8a80
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	480c      	ldr	r0, [pc, #48]	; (8001210 <MX_GPIO_Init+0x268>)
 80011de:	f004 fe93 	bl	8005f08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2105      	movs	r1, #5
 80011e6:	2008      	movs	r0, #8
 80011e8:	f001 f95e 	bl	80024a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011ec:	2008      	movs	r0, #8
 80011ee:	f001 f975 	bl	80024dc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011f2:	bf00      	nop
 80011f4:	3730      	adds	r7, #48	; 0x30
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	58024400 	.word	0x58024400
 8001200:	58020800 	.word	0x58020800
 8001204:	58020000 	.word	0x58020000
 8001208:	58021000 	.word	0x58021000
 800120c:	58020400 	.word	0x58020400
 8001210:	58020c00 	.word	0x58020c00

08001214 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
//	  firmware_loop();
		osDelay(1000);
 800121c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001220:	f00e fc96 	bl	800fb50 <osDelay>
 8001224:	e7fa      	b.n	800121c <StartDefaultTask+0x8>

08001226 <Callback01>:
  /* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d101      	bne.n	8001252 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800124e:	f001 f823 	bl	8002298 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40001000 	.word	0x40001000

08001260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001264:	b672      	cpsid	i
}
 8001266:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001268:	e7fe      	b.n	8001268 <Error_Handler+0x8>
	...

0800126c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_MspInit+0x38>)
 8001274:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001278:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <HAL_MspInit+0x38>)
 800127a:	f043 0302 	orr.w	r3, r3, #2
 800127e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <HAL_MspInit+0x38>)
 8001284:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001290:	2200      	movs	r2, #0
 8001292:	210f      	movs	r1, #15
 8001294:	f06f 0001 	mvn.w	r0, #1
 8001298:	f001 f906 	bl	80024a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	58024400 	.word	0x58024400

080012a8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b0ba      	sub	sp, #232	; 0xe8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	22c0      	movs	r2, #192	; 0xc0
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f021 ffa4 	bl	8023216 <memset>
  if(hfdcan->Instance==FDCAN1)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a2e      	ldr	r2, [pc, #184]	; (800138c <HAL_FDCAN_MspInit+0xe4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d155      	bne.n	8001384 <HAL_FDCAN_MspInit+0xdc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80012dc:	f04f 0300 	mov.w	r3, #0
 80012e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	4618      	mov	r0, r3
 80012f0:	f006 fd22 	bl	8007d38 <HAL_RCCEx_PeriphCLKConfig>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80012fa:	f7ff ffb1 	bl	8001260 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80012fe:	4b24      	ldr	r3, [pc, #144]	; (8001390 <HAL_FDCAN_MspInit+0xe8>)
 8001300:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001304:	4a22      	ldr	r2, [pc, #136]	; (8001390 <HAL_FDCAN_MspInit+0xe8>)
 8001306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <HAL_FDCAN_MspInit+0xe8>)
 8001310:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800131c:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <HAL_FDCAN_MspInit+0xe8>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001322:	4a1b      	ldr	r2, [pc, #108]	; (8001390 <HAL_FDCAN_MspInit+0xe8>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <HAL_FDCAN_MspInit+0xe8>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800133a:	2303      	movs	r3, #3
 800133c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001352:	2309      	movs	r3, #9
 8001354:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001358:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800135c:	4619      	mov	r1, r3
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <HAL_FDCAN_MspInit+0xec>)
 8001360:	f004 fdd2 	bl	8005f08 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2105      	movs	r1, #5
 8001368:	2013      	movs	r0, #19
 800136a:	f001 f89d 	bl	80024a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800136e:	2013      	movs	r0, #19
 8001370:	f001 f8b4 	bl	80024dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2105      	movs	r1, #5
 8001378:	2015      	movs	r0, #21
 800137a:	f001 f895 	bl	80024a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800137e:	2015      	movs	r0, #21
 8001380:	f001 f8ac 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001384:	bf00      	nop
 8001386:	37e8      	adds	r7, #232	; 0xe8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	4000a000 	.word	0x4000a000
 8001390:	58024400 	.word	0x58024400
 8001394:	58020c00 	.word	0x58020c00

08001398 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0bc      	sub	sp, #240	; 0xf0
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	f107 0318 	add.w	r3, r7, #24
 80013b4:	22c0      	movs	r2, #192	; 0xc0
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f021 ff2c 	bl	8023216 <memset>
  if(hi2c->Instance==I2C3)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a39      	ldr	r2, [pc, #228]	; (80014a8 <HAL_I2C_MspInit+0x110>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d16b      	bne.n	80014a0 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013c8:	f04f 0208 	mov.w	r2, #8
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	4618      	mov	r0, r3
 80013e0:	f006 fcaa 	bl	8007d38 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013ea:	f7ff ff39 	bl	8001260 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ee:	4b2f      	ldr	r3, [pc, #188]	; (80014ac <HAL_I2C_MspInit+0x114>)
 80013f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f4:	4a2d      	ldr	r2, [pc, #180]	; (80014ac <HAL_I2C_MspInit+0x114>)
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <HAL_I2C_MspInit+0x114>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <HAL_I2C_MspInit+0x114>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001412:	4a26      	ldr	r2, [pc, #152]	; (80014ac <HAL_I2C_MspInit+0x114>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141c:	4b23      	ldr	r3, [pc, #140]	; (80014ac <HAL_I2C_MspInit+0x114>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800142a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800142e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001432:	2312      	movs	r3, #18
 8001434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001444:	2304      	movs	r3, #4
 8001446:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800144e:	4619      	mov	r1, r3
 8001450:	4817      	ldr	r0, [pc, #92]	; (80014b0 <HAL_I2C_MspInit+0x118>)
 8001452:	f004 fd59 	bl	8005f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800145a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145e:	2312      	movs	r3, #18
 8001460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001470:	2304      	movs	r3, #4
 8001472:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800147a:	4619      	mov	r1, r3
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <HAL_I2C_MspInit+0x11c>)
 800147e:	f004 fd43 	bl	8005f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_I2C_MspInit+0x114>)
 8001484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001488:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_I2C_MspInit+0x114>)
 800148a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800148e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_I2C_MspInit+0x114>)
 8001494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80014a0:	bf00      	nop
 80014a2:	37f0      	adds	r7, #240	; 0xf0
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40005c00 	.word	0x40005c00
 80014ac:	58024400 	.word	0x58024400
 80014b0:	58020800 	.word	0x58020800
 80014b4:	58020000 	.word	0x58020000

080014b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b0bc      	sub	sp, #240	; 0xf0
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	22c0      	movs	r2, #192	; 0xc0
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f021 fe9c 	bl	8023216 <memset>
  if(hspi->Instance==SPI1)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a7d      	ldr	r2, [pc, #500]	; (80016d8 <HAL_SPI_MspInit+0x220>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	f040 80a8 	bne.w	800163a <HAL_SPI_MspInit+0x182>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80014ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	4618      	mov	r0, r3
 8001500:	f006 fc1a 	bl	8007d38 <HAL_RCCEx_PeriphCLKConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800150a:	f7ff fea9 	bl	8001260 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800150e:	4b73      	ldr	r3, [pc, #460]	; (80016dc <HAL_SPI_MspInit+0x224>)
 8001510:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001514:	4a71      	ldr	r2, [pc, #452]	; (80016dc <HAL_SPI_MspInit+0x224>)
 8001516:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800151a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800151e:	4b6f      	ldr	r3, [pc, #444]	; (80016dc <HAL_SPI_MspInit+0x224>)
 8001520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b6b      	ldr	r3, [pc, #428]	; (80016dc <HAL_SPI_MspInit+0x224>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	4a6a      	ldr	r2, [pc, #424]	; (80016dc <HAL_SPI_MspInit+0x224>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153c:	4b67      	ldr	r3, [pc, #412]	; (80016dc <HAL_SPI_MspInit+0x224>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800154a:	23f0      	movs	r3, #240	; 0xf0
 800154c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001562:	2305      	movs	r3, #5
 8001564:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800156c:	4619      	mov	r1, r3
 800156e:	485c      	ldr	r0, [pc, #368]	; (80016e0 <HAL_SPI_MspInit+0x228>)
 8001570:	f004 fcca 	bl	8005f08 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream6;
 8001574:	4b5b      	ldr	r3, [pc, #364]	; (80016e4 <HAL_SPI_MspInit+0x22c>)
 8001576:	4a5c      	ldr	r2, [pc, #368]	; (80016e8 <HAL_SPI_MspInit+0x230>)
 8001578:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800157a:	4b5a      	ldr	r3, [pc, #360]	; (80016e4 <HAL_SPI_MspInit+0x22c>)
 800157c:	2225      	movs	r2, #37	; 0x25
 800157e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001580:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <HAL_SPI_MspInit+0x22c>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001586:	4b57      	ldr	r3, [pc, #348]	; (80016e4 <HAL_SPI_MspInit+0x22c>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800158c:	4b55      	ldr	r3, [pc, #340]	; (80016e4 <HAL_SPI_MspInit+0x22c>)
 800158e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001592:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_SPI_MspInit+0x22c>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800159a:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <HAL_SPI_MspInit+0x22c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80015a0:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <HAL_SPI_MspInit+0x22c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015a6:	4b4f      	ldr	r3, [pc, #316]	; (80016e4 <HAL_SPI_MspInit+0x22c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015ac:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <HAL_SPI_MspInit+0x22c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80015b2:	484c      	ldr	r0, [pc, #304]	; (80016e4 <HAL_SPI_MspInit+0x22c>)
 80015b4:	f000 ffa0 	bl	80024f8 <HAL_DMA_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 80015be:	f7ff fe4f 	bl	8001260 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a47      	ldr	r2, [pc, #284]	; (80016e4 <HAL_SPI_MspInit+0x22c>)
 80015c6:	67da      	str	r2, [r3, #124]	; 0x7c
 80015c8:	4a46      	ldr	r2, [pc, #280]	; (80016e4 <HAL_SPI_MspInit+0x22c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream7;
 80015ce:	4b47      	ldr	r3, [pc, #284]	; (80016ec <HAL_SPI_MspInit+0x234>)
 80015d0:	4a47      	ldr	r2, [pc, #284]	; (80016f0 <HAL_SPI_MspInit+0x238>)
 80015d2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80015d4:	4b45      	ldr	r3, [pc, #276]	; (80016ec <HAL_SPI_MspInit+0x234>)
 80015d6:	2226      	movs	r2, #38	; 0x26
 80015d8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015da:	4b44      	ldr	r3, [pc, #272]	; (80016ec <HAL_SPI_MspInit+0x234>)
 80015dc:	2240      	movs	r2, #64	; 0x40
 80015de:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e0:	4b42      	ldr	r3, [pc, #264]	; (80016ec <HAL_SPI_MspInit+0x234>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015e6:	4b41      	ldr	r3, [pc, #260]	; (80016ec <HAL_SPI_MspInit+0x234>)
 80015e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015ec:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015ee:	4b3f      	ldr	r3, [pc, #252]	; (80016ec <HAL_SPI_MspInit+0x234>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f4:	4b3d      	ldr	r3, [pc, #244]	; (80016ec <HAL_SPI_MspInit+0x234>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80015fa:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <HAL_SPI_MspInit+0x234>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001600:	4b3a      	ldr	r3, [pc, #232]	; (80016ec <HAL_SPI_MspInit+0x234>)
 8001602:	2200      	movs	r2, #0
 8001604:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001606:	4b39      	ldr	r3, [pc, #228]	; (80016ec <HAL_SPI_MspInit+0x234>)
 8001608:	2200      	movs	r2, #0
 800160a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800160c:	4837      	ldr	r0, [pc, #220]	; (80016ec <HAL_SPI_MspInit+0x234>)
 800160e:	f000 ff73 	bl	80024f8 <HAL_DMA_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8001618:	f7ff fe22 	bl	8001260 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a33      	ldr	r2, [pc, #204]	; (80016ec <HAL_SPI_MspInit+0x234>)
 8001620:	679a      	str	r2, [r3, #120]	; 0x78
 8001622:	4a32      	ldr	r2, [pc, #200]	; (80016ec <HAL_SPI_MspInit+0x234>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2105      	movs	r1, #5
 800162c:	2023      	movs	r0, #35	; 0x23
 800162e:	f000 ff3b 	bl	80024a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001632:	2023      	movs	r0, #35	; 0x23
 8001634:	f000 ff52 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001638:	e04a      	b.n	80016d0 <HAL_SPI_MspInit+0x218>
  else if(hspi->Instance==SPI2)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a2d      	ldr	r2, [pc, #180]	; (80016f4 <HAL_SPI_MspInit+0x23c>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d145      	bne.n	80016d0 <HAL_SPI_MspInit+0x218>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001650:	2300      	movs	r3, #0
 8001652:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	4618      	mov	r0, r3
 800165a:	f006 fb6d 	bl	8007d38 <HAL_RCCEx_PeriphCLKConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <HAL_SPI_MspInit+0x1b0>
      Error_Handler();
 8001664:	f7ff fdfc 	bl	8001260 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_SPI_MspInit+0x224>)
 800166a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800166e:	4a1b      	ldr	r2, [pc, #108]	; (80016dc <HAL_SPI_MspInit+0x224>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_SPI_MspInit+0x224>)
 800167a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800167e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_SPI_MspInit+0x224>)
 8001688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168c:	4a13      	ldr	r2, [pc, #76]	; (80016dc <HAL_SPI_MspInit+0x224>)
 800168e:	f043 0302 	orr.w	r3, r3, #2
 8001692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_SPI_MspInit+0x224>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016a4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ac:	2302      	movs	r3, #2
 80016ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016be:	2305      	movs	r3, #5
 80016c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016c8:	4619      	mov	r1, r3
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <HAL_SPI_MspInit+0x240>)
 80016cc:	f004 fc1c 	bl	8005f08 <HAL_GPIO_Init>
}
 80016d0:	bf00      	nop
 80016d2:	37f0      	adds	r7, #240	; 0xf0
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40013000 	.word	0x40013000
 80016dc:	58024400 	.word	0x58024400
 80016e0:	58020000 	.word	0x58020000
 80016e4:	240004a0 	.word	0x240004a0
 80016e8:	400200a0 	.word	0x400200a0
 80016ec:	24000518 	.word	0x24000518
 80016f0:	400200b8 	.word	0x400200b8
 80016f4:	40003800 	.word	0x40003800
 80016f8:	58020400 	.word	0x58020400

080016fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800170c:	d10e      	bne.n	800172c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_TIM_Base_MspInit+0x3c>)
 8001710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001714:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_TIM_Base_MspInit+0x3c>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_TIM_Base_MspInit+0x3c>)
 8001720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	58024400 	.word	0x58024400

0800173c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08c      	sub	sp, #48	; 0x30
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 031c 	add.w	r3, r7, #28
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a34      	ldr	r2, [pc, #208]	; (800182c <HAL_TIM_Encoder_MspInit+0xf0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d12e      	bne.n	80017bc <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800175e:	4b34      	ldr	r3, [pc, #208]	; (8001830 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001760:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001764:	4a32      	ldr	r2, [pc, #200]	; (8001830 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001766:	f043 0302 	orr.w	r3, r3, #2
 800176a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800176e:	4b30      	ldr	r3, [pc, #192]	; (8001830 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	4b2c      	ldr	r3, [pc, #176]	; (8001830 <HAL_TIM_Encoder_MspInit+0xf4>)
 800177e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001782:	4a2b      	ldr	r2, [pc, #172]	; (8001830 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800178c:	4b28      	ldr	r3, [pc, #160]	; (8001830 <HAL_TIM_Encoder_MspInit+0xf4>)
 800178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800179a:	2330      	movs	r3, #48	; 0x30
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017aa:	2302      	movs	r3, #2
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	4619      	mov	r1, r3
 80017b4:	481f      	ldr	r0, [pc, #124]	; (8001834 <HAL_TIM_Encoder_MspInit+0xf8>)
 80017b6:	f004 fba7 	bl	8005f08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017ba:	e032      	b.n	8001822 <HAL_TIM_Encoder_MspInit+0xe6>
  else if(htim_encoder->Instance==TIM4)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <HAL_TIM_Encoder_MspInit+0xfc>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d12d      	bne.n	8001822 <HAL_TIM_Encoder_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017c6:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017cc:	4a18      	ldr	r2, [pc, #96]	; (8001830 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ea:	4a11      	ldr	r2, [pc, #68]	; (8001830 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001802:	23c0      	movs	r3, #192	; 0xc0
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001812:	2302      	movs	r3, #2
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_TIM_Encoder_MspInit+0xf8>)
 800181e:	f004 fb73 	bl	8005f08 <HAL_GPIO_Init>
}
 8001822:	bf00      	nop
 8001824:	3730      	adds	r7, #48	; 0x30
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40000400 	.word	0x40000400
 8001830:	58024400 	.word	0x58024400
 8001834:	58020400 	.word	0x58020400
 8001838:	40000800 	.word	0x40000800

0800183c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0be      	sub	sp, #248	; 0xf8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001854:	f107 0320 	add.w	r3, r7, #32
 8001858:	22c0      	movs	r2, #192	; 0xc0
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f021 fcda 	bl	8023216 <memset>
  if(huart->Instance==UART8)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4aaf      	ldr	r2, [pc, #700]	; (8001b24 <HAL_UART_MspInit+0x2e8>)
 8001868:	4293      	cmp	r3, r2
 800186a:	f040 80aa 	bne.w	80019c2 <HAL_UART_MspInit+0x186>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800186e:	f04f 0202 	mov.w	r2, #2
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001880:	f107 0320 	add.w	r3, r7, #32
 8001884:	4618      	mov	r0, r3
 8001886:	f006 fa57 	bl	8007d38 <HAL_RCCEx_PeriphCLKConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001890:	f7ff fce6 	bl	8001260 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001894:	4ba4      	ldr	r3, [pc, #656]	; (8001b28 <HAL_UART_MspInit+0x2ec>)
 8001896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800189a:	4aa3      	ldr	r2, [pc, #652]	; (8001b28 <HAL_UART_MspInit+0x2ec>)
 800189c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018a4:	4ba0      	ldr	r3, [pc, #640]	; (8001b28 <HAL_UART_MspInit+0x2ec>)
 80018a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018b2:	4b9d      	ldr	r3, [pc, #628]	; (8001b28 <HAL_UART_MspInit+0x2ec>)
 80018b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b8:	4a9b      	ldr	r2, [pc, #620]	; (8001b28 <HAL_UART_MspInit+0x2ec>)
 80018ba:	f043 0310 	orr.w	r3, r3, #16
 80018be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018c2:	4b99      	ldr	r3, [pc, #612]	; (8001b28 <HAL_UART_MspInit+0x2ec>)
 80018c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	69bb      	ldr	r3, [r7, #24]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018d0:	2303      	movs	r3, #3
 80018d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80018e8:	2308      	movs	r3, #8
 80018ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80018f2:	4619      	mov	r1, r3
 80018f4:	488d      	ldr	r0, [pc, #564]	; (8001b2c <HAL_UART_MspInit+0x2f0>)
 80018f6:	f004 fb07 	bl	8005f08 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream2;
 80018fa:	4b8d      	ldr	r3, [pc, #564]	; (8001b30 <HAL_UART_MspInit+0x2f4>)
 80018fc:	4a8d      	ldr	r2, [pc, #564]	; (8001b34 <HAL_UART_MspInit+0x2f8>)
 80018fe:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001900:	4b8b      	ldr	r3, [pc, #556]	; (8001b30 <HAL_UART_MspInit+0x2f4>)
 8001902:	2251      	movs	r2, #81	; 0x51
 8001904:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001906:	4b8a      	ldr	r3, [pc, #552]	; (8001b30 <HAL_UART_MspInit+0x2f4>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800190c:	4b88      	ldr	r3, [pc, #544]	; (8001b30 <HAL_UART_MspInit+0x2f4>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001912:	4b87      	ldr	r3, [pc, #540]	; (8001b30 <HAL_UART_MspInit+0x2f4>)
 8001914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001918:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800191a:	4b85      	ldr	r3, [pc, #532]	; (8001b30 <HAL_UART_MspInit+0x2f4>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001920:	4b83      	ldr	r3, [pc, #524]	; (8001b30 <HAL_UART_MspInit+0x2f4>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001926:	4b82      	ldr	r3, [pc, #520]	; (8001b30 <HAL_UART_MspInit+0x2f4>)
 8001928:	2200      	movs	r2, #0
 800192a:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800192c:	4b80      	ldr	r3, [pc, #512]	; (8001b30 <HAL_UART_MspInit+0x2f4>)
 800192e:	2200      	movs	r2, #0
 8001930:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001932:	4b7f      	ldr	r3, [pc, #508]	; (8001b30 <HAL_UART_MspInit+0x2f4>)
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001938:	487d      	ldr	r0, [pc, #500]	; (8001b30 <HAL_UART_MspInit+0x2f4>)
 800193a:	f000 fddd 	bl	80024f8 <HAL_DMA_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001944:	f7ff fc8c 	bl	8001260 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a79      	ldr	r2, [pc, #484]	; (8001b30 <HAL_UART_MspInit+0x2f4>)
 800194c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001950:	4a77      	ldr	r2, [pc, #476]	; (8001b30 <HAL_UART_MspInit+0x2f4>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream3;
 8001956:	4b78      	ldr	r3, [pc, #480]	; (8001b38 <HAL_UART_MspInit+0x2fc>)
 8001958:	4a78      	ldr	r2, [pc, #480]	; (8001b3c <HAL_UART_MspInit+0x300>)
 800195a:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 800195c:	4b76      	ldr	r3, [pc, #472]	; (8001b38 <HAL_UART_MspInit+0x2fc>)
 800195e:	2252      	movs	r2, #82	; 0x52
 8001960:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001962:	4b75      	ldr	r3, [pc, #468]	; (8001b38 <HAL_UART_MspInit+0x2fc>)
 8001964:	2240      	movs	r2, #64	; 0x40
 8001966:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001968:	4b73      	ldr	r3, [pc, #460]	; (8001b38 <HAL_UART_MspInit+0x2fc>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800196e:	4b72      	ldr	r3, [pc, #456]	; (8001b38 <HAL_UART_MspInit+0x2fc>)
 8001970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001974:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001976:	4b70      	ldr	r3, [pc, #448]	; (8001b38 <HAL_UART_MspInit+0x2fc>)
 8001978:	2200      	movs	r2, #0
 800197a:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800197c:	4b6e      	ldr	r3, [pc, #440]	; (8001b38 <HAL_UART_MspInit+0x2fc>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8001982:	4b6d      	ldr	r3, [pc, #436]	; (8001b38 <HAL_UART_MspInit+0x2fc>)
 8001984:	2200      	movs	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001988:	4b6b      	ldr	r3, [pc, #428]	; (8001b38 <HAL_UART_MspInit+0x2fc>)
 800198a:	2200      	movs	r2, #0
 800198c:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800198e:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_UART_MspInit+0x2fc>)
 8001990:	2200      	movs	r2, #0
 8001992:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001994:	4868      	ldr	r0, [pc, #416]	; (8001b38 <HAL_UART_MspInit+0x2fc>)
 8001996:	f000 fdaf 	bl	80024f8 <HAL_DMA_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 80019a0:	f7ff fc5e 	bl	8001260 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a64      	ldr	r2, [pc, #400]	; (8001b38 <HAL_UART_MspInit+0x2fc>)
 80019a8:	67da      	str	r2, [r3, #124]	; 0x7c
 80019aa:	4a63      	ldr	r2, [pc, #396]	; (8001b38 <HAL_UART_MspInit+0x2fc>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2105      	movs	r1, #5
 80019b4:	2053      	movs	r0, #83	; 0x53
 80019b6:	f000 fd77 	bl	80024a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80019ba:	2053      	movs	r0, #83	; 0x53
 80019bc:	f000 fd8e 	bl	80024dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019c0:	e179      	b.n	8001cb6 <HAL_UART_MspInit+0x47a>
  else if(huart->Instance==USART1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a5e      	ldr	r2, [pc, #376]	; (8001b40 <HAL_UART_MspInit+0x304>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	f040 80c5 	bne.w	8001b58 <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019ce:	f04f 0201 	mov.w	r2, #1
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80019da:	2300      	movs	r3, #0
 80019dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e0:	f107 0320 	add.w	r3, r7, #32
 80019e4:	4618      	mov	r0, r3
 80019e6:	f006 f9a7 	bl	8007d38 <HAL_RCCEx_PeriphCLKConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80019f0:	f7ff fc36 	bl	8001260 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80019f4:	4b4c      	ldr	r3, [pc, #304]	; (8001b28 <HAL_UART_MspInit+0x2ec>)
 80019f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019fa:	4a4b      	ldr	r2, [pc, #300]	; (8001b28 <HAL_UART_MspInit+0x2ec>)
 80019fc:	f043 0310 	orr.w	r3, r3, #16
 8001a00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a04:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <HAL_UART_MspInit+0x2ec>)
 8001a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b45      	ldr	r3, [pc, #276]	; (8001b28 <HAL_UART_MspInit+0x2ec>)
 8001a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a18:	4a43      	ldr	r2, [pc, #268]	; (8001b28 <HAL_UART_MspInit+0x2ec>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a22:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_UART_MspInit+0x2ec>)
 8001a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a30:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a54:	4619      	mov	r1, r3
 8001a56:	483b      	ldr	r0, [pc, #236]	; (8001b44 <HAL_UART_MspInit+0x308>)
 8001a58:	f004 fa56 	bl	8005f08 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <HAL_UART_MspInit+0x30c>)
 8001a5e:	4a3b      	ldr	r2, [pc, #236]	; (8001b4c <HAL_UART_MspInit+0x310>)
 8001a60:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001a62:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_UART_MspInit+0x30c>)
 8001a64:	2229      	movs	r2, #41	; 0x29
 8001a66:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a68:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <HAL_UART_MspInit+0x30c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a6e:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <HAL_UART_MspInit+0x30c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a74:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_UART_MspInit+0x30c>)
 8001a76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a7a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a7c:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <HAL_UART_MspInit+0x30c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a82:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <HAL_UART_MspInit+0x30c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001a88:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <HAL_UART_MspInit+0x30c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_UART_MspInit+0x30c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a94:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <HAL_UART_MspInit+0x30c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a9a:	482b      	ldr	r0, [pc, #172]	; (8001b48 <HAL_UART_MspInit+0x30c>)
 8001a9c:	f000 fd2c 	bl	80024f8 <HAL_DMA_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8001aa6:	f7ff fbdb 	bl	8001260 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_UART_MspInit+0x30c>)
 8001aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001ab2:	4a25      	ldr	r2, [pc, #148]	; (8001b48 <HAL_UART_MspInit+0x30c>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <HAL_UART_MspInit+0x314>)
 8001aba:	4a26      	ldr	r2, [pc, #152]	; (8001b54 <HAL_UART_MspInit+0x318>)
 8001abc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001abe:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <HAL_UART_MspInit+0x314>)
 8001ac0:	222a      	movs	r2, #42	; 0x2a
 8001ac2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_UART_MspInit+0x314>)
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <HAL_UART_MspInit+0x314>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad0:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <HAL_UART_MspInit+0x314>)
 8001ad2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_UART_MspInit+0x314>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <HAL_UART_MspInit+0x314>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_UART_MspInit+0x314>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <HAL_UART_MspInit+0x314>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <HAL_UART_MspInit+0x314>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001af6:	4816      	ldr	r0, [pc, #88]	; (8001b50 <HAL_UART_MspInit+0x314>)
 8001af8:	f000 fcfe 	bl	80024f8 <HAL_DMA_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 8001b02:	f7ff fbad 	bl	8001260 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <HAL_UART_MspInit+0x314>)
 8001b0a:	67da      	str	r2, [r3, #124]	; 0x7c
 8001b0c:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <HAL_UART_MspInit+0x314>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2105      	movs	r1, #5
 8001b16:	2025      	movs	r0, #37	; 0x25
 8001b18:	f000 fcc6 	bl	80024a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b1c:	2025      	movs	r0, #37	; 0x25
 8001b1e:	f000 fcdd 	bl	80024dc <HAL_NVIC_EnableIRQ>
}
 8001b22:	e0c8      	b.n	8001cb6 <HAL_UART_MspInit+0x47a>
 8001b24:	40007c00 	.word	0x40007c00
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	58021000 	.word	0x58021000
 8001b30:	240008d8 	.word	0x240008d8
 8001b34:	40020040 	.word	0x40020040
 8001b38:	24000950 	.word	0x24000950
 8001b3c:	40020058 	.word	0x40020058
 8001b40:	40011000 	.word	0x40011000
 8001b44:	58020000 	.word	0x58020000
 8001b48:	240009c8 	.word	0x240009c8
 8001b4c:	40020010 	.word	0x40020010
 8001b50:	24000a40 	.word	0x24000a40
 8001b54:	40020028 	.word	0x40020028
  else if(huart->Instance==USART2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_UART_MspInit+0x484>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	f040 80a9 	bne.w	8001cb6 <HAL_UART_MspInit+0x47a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b64:	f04f 0202 	mov.w	r2, #2
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b76:	f107 0320 	add.w	r3, r7, #32
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f006 f8dc 	bl	8007d38 <HAL_RCCEx_PeriphCLKConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_UART_MspInit+0x34e>
      Error_Handler();
 8001b86:	f7ff fb6b 	bl	8001260 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b8a:	4b4e      	ldr	r3, [pc, #312]	; (8001cc4 <HAL_UART_MspInit+0x488>)
 8001b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b90:	4a4c      	ldr	r2, [pc, #304]	; (8001cc4 <HAL_UART_MspInit+0x488>)
 8001b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b9a:	4b4a      	ldr	r3, [pc, #296]	; (8001cc4 <HAL_UART_MspInit+0x488>)
 8001b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba8:	4b46      	ldr	r3, [pc, #280]	; (8001cc4 <HAL_UART_MspInit+0x488>)
 8001baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bae:	4a45      	ldr	r2, [pc, #276]	; (8001cc4 <HAL_UART_MspInit+0x488>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb8:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <HAL_UART_MspInit+0x488>)
 8001bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bc6:	230c      	movs	r3, #12
 8001bc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bde:	2307      	movs	r3, #7
 8001be0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001be8:	4619      	mov	r1, r3
 8001bea:	4837      	ldr	r0, [pc, #220]	; (8001cc8 <HAL_UART_MspInit+0x48c>)
 8001bec:	f004 f98c 	bl	8005f08 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream4;
 8001bf0:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <HAL_UART_MspInit+0x490>)
 8001bf2:	4a37      	ldr	r2, [pc, #220]	; (8001cd0 <HAL_UART_MspInit+0x494>)
 8001bf4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001bf6:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <HAL_UART_MspInit+0x490>)
 8001bf8:	222b      	movs	r2, #43	; 0x2b
 8001bfa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bfc:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <HAL_UART_MspInit+0x490>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c02:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_UART_MspInit+0x490>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c08:	4b30      	ldr	r3, [pc, #192]	; (8001ccc <HAL_UART_MspInit+0x490>)
 8001c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c0e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c10:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <HAL_UART_MspInit+0x490>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c16:	4b2d      	ldr	r3, [pc, #180]	; (8001ccc <HAL_UART_MspInit+0x490>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_UART_MspInit+0x490>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_UART_MspInit+0x490>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c28:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <HAL_UART_MspInit+0x490>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c2e:	4827      	ldr	r0, [pc, #156]	; (8001ccc <HAL_UART_MspInit+0x490>)
 8001c30:	f000 fc62 	bl	80024f8 <HAL_DMA_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_UART_MspInit+0x402>
      Error_Handler();
 8001c3a:	f7ff fb11 	bl	8001260 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <HAL_UART_MspInit+0x490>)
 8001c42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001c46:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <HAL_UART_MspInit+0x490>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream5;
 8001c4c:	4b21      	ldr	r3, [pc, #132]	; (8001cd4 <HAL_UART_MspInit+0x498>)
 8001c4e:	4a22      	ldr	r2, [pc, #136]	; (8001cd8 <HAL_UART_MspInit+0x49c>)
 8001c50:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_UART_MspInit+0x498>)
 8001c54:	222c      	movs	r2, #44	; 0x2c
 8001c56:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c58:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <HAL_UART_MspInit+0x498>)
 8001c5a:	2240      	movs	r2, #64	; 0x40
 8001c5c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_UART_MspInit+0x498>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_UART_MspInit+0x498>)
 8001c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c6a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c6c:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_UART_MspInit+0x498>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_UART_MspInit+0x498>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_UART_MspInit+0x498>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_UART_MspInit+0x498>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_UART_MspInit+0x498>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c8a:	4812      	ldr	r0, [pc, #72]	; (8001cd4 <HAL_UART_MspInit+0x498>)
 8001c8c:	f000 fc34 	bl	80024f8 <HAL_DMA_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <HAL_UART_MspInit+0x45e>
      Error_Handler();
 8001c96:	f7ff fae3 	bl	8001260 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a0d      	ldr	r2, [pc, #52]	; (8001cd4 <HAL_UART_MspInit+0x498>)
 8001c9e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001ca0:	4a0c      	ldr	r2, [pc, #48]	; (8001cd4 <HAL_UART_MspInit+0x498>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2105      	movs	r1, #5
 8001caa:	2026      	movs	r0, #38	; 0x26
 8001cac:	f000 fbfc 	bl	80024a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cb0:	2026      	movs	r0, #38	; 0x26
 8001cb2:	f000 fc13 	bl	80024dc <HAL_NVIC_EnableIRQ>
}
 8001cb6:	bf00      	nop
 8001cb8:	37f8      	adds	r7, #248	; 0xf8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40004400 	.word	0x40004400
 8001cc4:	58024400 	.word	0x58024400
 8001cc8:	58020000 	.word	0x58020000
 8001ccc:	24000ab8 	.word	0x24000ab8
 8001cd0:	40020070 	.word	0x40020070
 8001cd4:	24000b30 	.word	0x24000b30
 8001cd8:	40020088 	.word	0x40020088

08001cdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b090      	sub	sp, #64	; 0x40
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b0f      	cmp	r3, #15
 8001ce8:	d827      	bhi.n	8001d3a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001cea:	2200      	movs	r2, #0
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	2036      	movs	r0, #54	; 0x36
 8001cf0:	f000 fbda 	bl	80024a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cf4:	2036      	movs	r0, #54	; 0x36
 8001cf6:	f000 fbf1 	bl	80024dc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001cfa:	4a29      	ldr	r2, [pc, #164]	; (8001da0 <HAL_InitTick+0xc4>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d00:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <HAL_InitTick+0xc8>)
 8001d02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d06:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_InitTick+0xc8>)
 8001d08:	f043 0310 	orr.w	r3, r3, #16
 8001d0c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d10:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_InitTick+0xc8>)
 8001d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d16:	f003 0310 	and.w	r3, r3, #16
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d1e:	f107 0210 	add.w	r2, r7, #16
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f005 ffc3 	bl	8007cb4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d30:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d106      	bne.n	8001d46 <HAL_InitTick+0x6a>
 8001d38:	e001      	b.n	8001d3e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e02b      	b.n	8001d96 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d3e:	f005 ff8d 	bl	8007c5c <HAL_RCC_GetPCLK1Freq>
 8001d42:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001d44:	e004      	b.n	8001d50 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d46:	f005 ff89 	bl	8007c5c <HAL_RCC_GetPCLK1Freq>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d52:	4a15      	ldr	r2, [pc, #84]	; (8001da8 <HAL_InitTick+0xcc>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	0c9b      	lsrs	r3, r3, #18
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <HAL_InitTick+0xd0>)
 8001d60:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <HAL_InitTick+0xd4>)
 8001d62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_InitTick+0xd0>)
 8001d66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d6a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d6c:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <HAL_InitTick+0xd0>)
 8001d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d70:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_InitTick+0xd0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_InitTick+0xd0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d7e:	480b      	ldr	r0, [pc, #44]	; (8001dac <HAL_InitTick+0xd0>)
 8001d80:	f009 f9ed 	bl	800b15e <HAL_TIM_Base_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d104      	bne.n	8001d94 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d8a:	4808      	ldr	r0, [pc, #32]	; (8001dac <HAL_InitTick+0xd0>)
 8001d8c:	f009 fa3e 	bl	800b20c <HAL_TIM_Base_Start_IT>
 8001d90:	4603      	mov	r3, r0
 8001d92:	e000      	b.n	8001d96 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3740      	adds	r7, #64	; 0x40
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	24000008 	.word	0x24000008
 8001da4:	58024400 	.word	0x58024400
 8001da8:	431bde83 	.word	0x431bde83
 8001dac:	24000c28 	.word	0x24000c28
 8001db0:	40001000 	.word	0x40001000

08001db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <NMI_Handler+0x4>

08001dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <HardFault_Handler+0x4>

08001dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <MemManage_Handler+0x4>

08001dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <BusFault_Handler+0x4>

08001dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <UsageFault_Handler+0x4>

08001dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001de4:	2004      	movs	r0, #4
 8001de6:	f004 fa8a 	bl	80062fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <DMA1_Stream0_IRQHandler+0x10>)
 8001df6:	f001 fea9 	bl	8003b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	240009c8 	.word	0x240009c8

08001e04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <DMA1_Stream1_IRQHandler+0x10>)
 8001e0a:	f001 fe9f 	bl	8003b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	24000a40 	.word	0x24000a40

08001e18 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <DMA1_Stream2_IRQHandler+0x10>)
 8001e1e:	f001 fe95 	bl	8003b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	240008d8 	.word	0x240008d8

08001e2c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8001e30:	4802      	ldr	r0, [pc, #8]	; (8001e3c <DMA1_Stream3_IRQHandler+0x10>)
 8001e32:	f001 fe8b 	bl	8003b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	24000950 	.word	0x24000950

08001e40 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <DMA1_Stream4_IRQHandler+0x10>)
 8001e46:	f001 fe81 	bl	8003b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	24000ab8 	.word	0x24000ab8

08001e54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <DMA1_Stream5_IRQHandler+0x10>)
 8001e5a:	f001 fe77 	bl	8003b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	24000b30 	.word	0x24000b30

08001e68 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001e6c:	4802      	ldr	r0, [pc, #8]	; (8001e78 <DMA1_Stream6_IRQHandler+0x10>)
 8001e6e:	f001 fe6d 	bl	8003b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	240004a0 	.word	0x240004a0

08001e7c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <FDCAN1_IT0_IRQHandler+0x10>)
 8001e82:	f003 fbb9 	bl	80055f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	24000244 	.word	0x24000244

08001e90 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <FDCAN1_IT1_IRQHandler+0x10>)
 8001e96:	f003 fbaf 	bl	80055f8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	24000244 	.word	0x24000244

08001ea4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <SPI1_IRQHandler+0x10>)
 8001eaa:	f008 fd61 	bl	800a970 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	24000338 	.word	0x24000338

08001eb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ebc:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <USART1_IRQHandler+0x10>)
 8001ebe:	f00a fc15 	bl	800c6ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	24000740 	.word	0x24000740

08001ecc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <USART2_IRQHandler+0x10>)
 8001ed2:	f00a fc0b 	bl	800c6ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	2400080c 	.word	0x2400080c

08001ee0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <DMA1_Stream7_IRQHandler+0x10>)
 8001ee6:	f001 fe31 	bl	8003b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	24000518 	.word	0x24000518

08001ef4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <TIM6_DAC_IRQHandler+0x10>)
 8001efa:	f009 faa5 	bl	800b448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	24000c28 	.word	0x24000c28

08001f08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <DMA2_Stream0_IRQHandler+0x10>)
 8001f0e:	f001 fe1d 	bl	8003b4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	24000ba8 	.word	0x24000ba8

08001f1c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001f20:	4802      	ldr	r0, [pc, #8]	; (8001f2c <UART8_IRQHandler+0x10>)
 8001f22:	f00a fbe3 	bl	800c6ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	24000674 	.word	0x24000674

08001f30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return 1;
 8001f34:	2301      	movs	r3, #1
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_kill>:

int _kill(int pid, int sig)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f4a:	f021 fa0d 	bl	8023368 <__errno>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2216      	movs	r2, #22
 8001f52:	601a      	str	r2, [r3, #0]
  return -1;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_exit>:

void _exit (int status)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ffe7 	bl	8001f40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f72:	e7fe      	b.n	8001f72 <_exit+0x12>

08001f74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	e00a      	b.n	8001f9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f86:	f3af 8000 	nop.w
 8001f8a:	4601      	mov	r1, r0
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	60ba      	str	r2, [r7, #8]
 8001f92:	b2ca      	uxtb	r2, r1
 8001f94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	dbf0      	blt.n	8001f86 <_read+0x12>
  }

  return len;
 8001fa4:	687b      	ldr	r3, [r7, #4]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e009      	b.n	8001fd4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	60ba      	str	r2, [r7, #8]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	dbf1      	blt.n	8001fc0 <_write+0x12>
  }
  return len;
 8001fdc:	687b      	ldr	r3, [r7, #4]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <_close>:

int _close(int file)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ffe:	b480      	push	{r7}
 8002000:	b083      	sub	sp, #12
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800200e:	605a      	str	r2, [r3, #4]
  return 0;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <_isatty>:

int _isatty(int file)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002026:	2301      	movs	r3, #1
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002058:	4a14      	ldr	r2, [pc, #80]	; (80020ac <_sbrk+0x5c>)
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <_sbrk+0x60>)
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <_sbrk+0x64>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <_sbrk+0x64>)
 800206e:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <_sbrk+0x68>)
 8002070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	429a      	cmp	r2, r3
 800207e:	d207      	bcs.n	8002090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002080:	f021 f972 	bl	8023368 <__errno>
 8002084:	4603      	mov	r3, r0
 8002086:	220c      	movs	r2, #12
 8002088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
 800208e:	e009      	b.n	80020a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <_sbrk+0x64>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002096:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <_sbrk+0x64>)
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <_sbrk+0x64>)
 80020a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020a2:	68fb      	ldr	r3, [r7, #12]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	24080000 	.word	0x24080000
 80020b0:	00000400 	.word	0x00000400
 80020b4:	24000c74 	.word	0x24000c74
 80020b8:	2401e5a8 	.word	0x2401e5a8

080020bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020c0:	4b37      	ldr	r3, [pc, #220]	; (80021a0 <SystemInit+0xe4>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	4a36      	ldr	r2, [pc, #216]	; (80021a0 <SystemInit+0xe4>)
 80020c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020d0:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <SystemInit+0xe8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	2b06      	cmp	r3, #6
 80020da:	d807      	bhi.n	80020ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020dc:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <SystemInit+0xe8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 030f 	bic.w	r3, r3, #15
 80020e4:	4a2f      	ldr	r2, [pc, #188]	; (80021a4 <SystemInit+0xe8>)
 80020e6:	f043 0307 	orr.w	r3, r3, #7
 80020ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80020ec:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <SystemInit+0xec>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2d      	ldr	r2, [pc, #180]	; (80021a8 <SystemInit+0xec>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020f8:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <SystemInit+0xec>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80020fe:	4b2a      	ldr	r3, [pc, #168]	; (80021a8 <SystemInit+0xec>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4929      	ldr	r1, [pc, #164]	; (80021a8 <SystemInit+0xec>)
 8002104:	4b29      	ldr	r3, [pc, #164]	; (80021ac <SystemInit+0xf0>)
 8002106:	4013      	ands	r3, r2
 8002108:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800210a:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <SystemInit+0xe8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002116:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <SystemInit+0xe8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 030f 	bic.w	r3, r3, #15
 800211e:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <SystemInit+0xe8>)
 8002120:	f043 0307 	orr.w	r3, r3, #7
 8002124:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <SystemInit+0xec>)
 8002128:	2200      	movs	r2, #0
 800212a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800212c:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <SystemInit+0xec>)
 800212e:	2200      	movs	r2, #0
 8002130:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <SystemInit+0xec>)
 8002134:	2200      	movs	r2, #0
 8002136:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <SystemInit+0xec>)
 800213a:	4a1d      	ldr	r2, [pc, #116]	; (80021b0 <SystemInit+0xf4>)
 800213c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <SystemInit+0xec>)
 8002140:	4a1c      	ldr	r2, [pc, #112]	; (80021b4 <SystemInit+0xf8>)
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <SystemInit+0xec>)
 8002146:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <SystemInit+0xfc>)
 8002148:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <SystemInit+0xec>)
 800214c:	2200      	movs	r2, #0
 800214e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002150:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <SystemInit+0xec>)
 8002152:	4a19      	ldr	r2, [pc, #100]	; (80021b8 <SystemInit+0xfc>)
 8002154:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <SystemInit+0xec>)
 8002158:	2200      	movs	r2, #0
 800215a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <SystemInit+0xec>)
 800215e:	4a16      	ldr	r2, [pc, #88]	; (80021b8 <SystemInit+0xfc>)
 8002160:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <SystemInit+0xec>)
 8002164:	2200      	movs	r2, #0
 8002166:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <SystemInit+0xec>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <SystemInit+0xec>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002172:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <SystemInit+0xec>)
 8002176:	2200      	movs	r2, #0
 8002178:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800217a:	4b10      	ldr	r3, [pc, #64]	; (80021bc <SystemInit+0x100>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <SystemInit+0x104>)
 8002180:	4013      	ands	r3, r2
 8002182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002186:	d202      	bcs.n	800218e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002188:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <SystemInit+0x108>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800218e:	4b0e      	ldr	r3, [pc, #56]	; (80021c8 <SystemInit+0x10c>)
 8002190:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002194:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	e000ed00 	.word	0xe000ed00
 80021a4:	52002000 	.word	0x52002000
 80021a8:	58024400 	.word	0x58024400
 80021ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80021b0:	02020200 	.word	0x02020200
 80021b4:	01ff0000 	.word	0x01ff0000
 80021b8:	01010280 	.word	0x01010280
 80021bc:	5c001000 	.word	0x5c001000
 80021c0:	ffff0000 	.word	0xffff0000
 80021c4:	51008108 	.word	0x51008108
 80021c8:	52004000 	.word	0x52004000

080021cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80021cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002204 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80021d0:	f7ff ff74 	bl	80020bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021d6:	490d      	ldr	r1, [pc, #52]	; (800220c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021d8:	4a0d      	ldr	r2, [pc, #52]	; (8002210 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021dc:	e002      	b.n	80021e4 <LoopCopyDataInit>

080021de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021e2:	3304      	adds	r3, #4

080021e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021e8:	d3f9      	bcc.n	80021de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021ec:	4c0a      	ldr	r4, [pc, #40]	; (8002218 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021f0:	e001      	b.n	80021f6 <LoopFillZerobss>

080021f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021f4:	3204      	adds	r2, #4

080021f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021f8:	d3fb      	bcc.n	80021f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021fa:	f021 f8bb 	bl	8023374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021fe:	f7fe fa45 	bl	800068c <main>
  bx  lr
 8002202:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002204:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002208:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800220c:	24000224 	.word	0x24000224
  ldr r2, =_sidata
 8002210:	0802676c 	.word	0x0802676c
  ldr r2, =_sbss
 8002214:	24000228 	.word	0x24000228
  ldr r4, =_ebss
 8002218:	2401e5a8 	.word	0x2401e5a8

0800221c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800221c:	e7fe      	b.n	800221c <ADC3_IRQHandler>
	...

08002220 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002226:	2003      	movs	r0, #3
 8002228:	f000 f933 	bl	8002492 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800222c:	f005 fb6c 	bl	8007908 <HAL_RCC_GetSysClockFreq>
 8002230:	4602      	mov	r2, r0
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <HAL_Init+0x68>)
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	4913      	ldr	r1, [pc, #76]	; (800228c <HAL_Init+0x6c>)
 800223e:	5ccb      	ldrb	r3, [r1, r3]
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
 8002248:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_Init+0x68>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	4a0e      	ldr	r2, [pc, #56]	; (800228c <HAL_Init+0x6c>)
 8002254:	5cd3      	ldrb	r3, [r2, r3]
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <HAL_Init+0x70>)
 8002262:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002264:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <HAL_Init+0x74>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800226a:	200f      	movs	r0, #15
 800226c:	f7ff fd36 	bl	8001cdc <HAL_InitTick>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e002      	b.n	8002280 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800227a:	f7fe fff7 	bl	800126c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	58024400 	.word	0x58024400
 800228c:	08025398 	.word	0x08025398
 8002290:	24000004 	.word	0x24000004
 8002294:	24000000 	.word	0x24000000

08002298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_IncTick+0x20>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b06      	ldr	r3, [pc, #24]	; (80022bc <HAL_IncTick+0x24>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	4a04      	ldr	r2, [pc, #16]	; (80022bc <HAL_IncTick+0x24>)
 80022aa:	6013      	str	r3, [r2, #0]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	2400000c 	.word	0x2400000c
 80022bc:	24000c78 	.word	0x24000c78

080022c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return uwTick;
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <HAL_GetTick+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	24000c78 	.word	0x24000c78

080022d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff ffee 	bl	80022c0 <HAL_GetTick>
 80022e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d005      	beq.n	80022fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_Delay+0x44>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022fe:	bf00      	nop
 8002300:	f7ff ffde 	bl	80022c0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	429a      	cmp	r2, r3
 800230e:	d8f7      	bhi.n	8002300 <HAL_Delay+0x28>
  {
  }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2400000c 	.word	0x2400000c

08002320 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002324:	4b03      	ldr	r3, [pc, #12]	; (8002334 <HAL_GetREVID+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0c1b      	lsrs	r3, r3, #16
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	5c001000 	.word	0x5c001000

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <__NVIC_SetPriorityGrouping+0x40>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <__NVIC_SetPriorityGrouping+0x44>)
 8002362:	4313      	orrs	r3, r2
 8002364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002366:	4a04      	ldr	r2, [pc, #16]	; (8002378 <__NVIC_SetPriorityGrouping+0x40>)
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	60d3      	str	r3, [r2, #12]
}
 800236c:	bf00      	nop
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	e000ed00 	.word	0xe000ed00
 800237c:	05fa0000 	.word	0x05fa0000

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	; (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4907      	ldr	r1, [pc, #28]	; (80023d4 <__NVIC_EnableIRQ+0x38>)
 80023b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000e100 	.word	0xe000e100

080023d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	4603      	mov	r3, r0
 80023e0:	6039      	str	r1, [r7, #0]
 80023e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	db0a      	blt.n	8002402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	490c      	ldr	r1, [pc, #48]	; (8002424 <__NVIC_SetPriority+0x4c>)
 80023f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f6:	0112      	lsls	r2, r2, #4
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	440b      	add	r3, r1
 80023fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002400:	e00a      	b.n	8002418 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4908      	ldr	r1, [pc, #32]	; (8002428 <__NVIC_SetPriority+0x50>)
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	3b04      	subs	r3, #4
 8002410:	0112      	lsls	r2, r2, #4
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	440b      	add	r3, r1
 8002416:	761a      	strb	r2, [r3, #24]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000e100 	.word	0xe000e100
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	; 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f1c3 0307 	rsb	r3, r3, #7
 8002446:	2b04      	cmp	r3, #4
 8002448:	bf28      	it	cs
 800244a:	2304      	movcs	r3, #4
 800244c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3304      	adds	r3, #4
 8002452:	2b06      	cmp	r3, #6
 8002454:	d902      	bls.n	800245c <NVIC_EncodePriority+0x30>
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3b03      	subs	r3, #3
 800245a:	e000      	b.n	800245e <NVIC_EncodePriority+0x32>
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43da      	mvns	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	401a      	ands	r2, r3
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002474:	f04f 31ff 	mov.w	r1, #4294967295
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	43d9      	mvns	r1, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	4313      	orrs	r3, r2
         );
}
 8002486:	4618      	mov	r0, r3
 8002488:	3724      	adds	r7, #36	; 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ff4c 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
 80024b4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024b6:	f7ff ff63 	bl	8002380 <__NVIC_GetPriorityGrouping>
 80024ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	6978      	ldr	r0, [r7, #20]
 80024c2:	f7ff ffb3 	bl	800242c <NVIC_EncodePriority>
 80024c6:	4602      	mov	r2, r0
 80024c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff82 	bl	80023d8 <__NVIC_SetPriority>
}
 80024d4:	bf00      	nop
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff ff56 	bl	800239c <__NVIC_EnableIRQ>
}
 80024f0:	bf00      	nop
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff fede 	bl	80022c0 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e316      	b.n	8002b3e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a66      	ldr	r2, [pc, #408]	; (80026b0 <HAL_DMA_Init+0x1b8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d04a      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a65      	ldr	r2, [pc, #404]	; (80026b4 <HAL_DMA_Init+0x1bc>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d045      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a63      	ldr	r2, [pc, #396]	; (80026b8 <HAL_DMA_Init+0x1c0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d040      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a62      	ldr	r2, [pc, #392]	; (80026bc <HAL_DMA_Init+0x1c4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d03b      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a60      	ldr	r2, [pc, #384]	; (80026c0 <HAL_DMA_Init+0x1c8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d036      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a5f      	ldr	r2, [pc, #380]	; (80026c4 <HAL_DMA_Init+0x1cc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d031      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a5d      	ldr	r2, [pc, #372]	; (80026c8 <HAL_DMA_Init+0x1d0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d02c      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a5c      	ldr	r2, [pc, #368]	; (80026cc <HAL_DMA_Init+0x1d4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d027      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a5a      	ldr	r2, [pc, #360]	; (80026d0 <HAL_DMA_Init+0x1d8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d022      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a59      	ldr	r2, [pc, #356]	; (80026d4 <HAL_DMA_Init+0x1dc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d01d      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a57      	ldr	r2, [pc, #348]	; (80026d8 <HAL_DMA_Init+0x1e0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d018      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a56      	ldr	r2, [pc, #344]	; (80026dc <HAL_DMA_Init+0x1e4>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d013      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a54      	ldr	r2, [pc, #336]	; (80026e0 <HAL_DMA_Init+0x1e8>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00e      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a53      	ldr	r2, [pc, #332]	; (80026e4 <HAL_DMA_Init+0x1ec>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d009      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a51      	ldr	r2, [pc, #324]	; (80026e8 <HAL_DMA_Init+0x1f0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <HAL_DMA_Init+0xb8>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a50      	ldr	r2, [pc, #320]	; (80026ec <HAL_DMA_Init+0x1f4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d101      	bne.n	80025b4 <HAL_DMA_Init+0xbc>
 80025b0:	2301      	movs	r3, #1
 80025b2:	e000      	b.n	80025b6 <HAL_DMA_Init+0xbe>
 80025b4:	2300      	movs	r3, #0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 813b 	beq.w	8002832 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a37      	ldr	r2, [pc, #220]	; (80026b0 <HAL_DMA_Init+0x1b8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d04a      	beq.n	800266c <HAL_DMA_Init+0x174>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a36      	ldr	r2, [pc, #216]	; (80026b4 <HAL_DMA_Init+0x1bc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d045      	beq.n	800266c <HAL_DMA_Init+0x174>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a34      	ldr	r2, [pc, #208]	; (80026b8 <HAL_DMA_Init+0x1c0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d040      	beq.n	800266c <HAL_DMA_Init+0x174>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a33      	ldr	r2, [pc, #204]	; (80026bc <HAL_DMA_Init+0x1c4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d03b      	beq.n	800266c <HAL_DMA_Init+0x174>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a31      	ldr	r2, [pc, #196]	; (80026c0 <HAL_DMA_Init+0x1c8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d036      	beq.n	800266c <HAL_DMA_Init+0x174>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a30      	ldr	r2, [pc, #192]	; (80026c4 <HAL_DMA_Init+0x1cc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d031      	beq.n	800266c <HAL_DMA_Init+0x174>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2e      	ldr	r2, [pc, #184]	; (80026c8 <HAL_DMA_Init+0x1d0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d02c      	beq.n	800266c <HAL_DMA_Init+0x174>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2d      	ldr	r2, [pc, #180]	; (80026cc <HAL_DMA_Init+0x1d4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d027      	beq.n	800266c <HAL_DMA_Init+0x174>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a2b      	ldr	r2, [pc, #172]	; (80026d0 <HAL_DMA_Init+0x1d8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d022      	beq.n	800266c <HAL_DMA_Init+0x174>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2a      	ldr	r2, [pc, #168]	; (80026d4 <HAL_DMA_Init+0x1dc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d01d      	beq.n	800266c <HAL_DMA_Init+0x174>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a28      	ldr	r2, [pc, #160]	; (80026d8 <HAL_DMA_Init+0x1e0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d018      	beq.n	800266c <HAL_DMA_Init+0x174>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a27      	ldr	r2, [pc, #156]	; (80026dc <HAL_DMA_Init+0x1e4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d013      	beq.n	800266c <HAL_DMA_Init+0x174>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <HAL_DMA_Init+0x1e8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00e      	beq.n	800266c <HAL_DMA_Init+0x174>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a24      	ldr	r2, [pc, #144]	; (80026e4 <HAL_DMA_Init+0x1ec>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d009      	beq.n	800266c <HAL_DMA_Init+0x174>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a22      	ldr	r2, [pc, #136]	; (80026e8 <HAL_DMA_Init+0x1f0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d004      	beq.n	800266c <HAL_DMA_Init+0x174>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a21      	ldr	r2, [pc, #132]	; (80026ec <HAL_DMA_Init+0x1f4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d108      	bne.n	800267e <HAL_DMA_Init+0x186>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	e007      	b.n	800268e <HAL_DMA_Init+0x196>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0201 	bic.w	r2, r2, #1
 800268c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800268e:	e02f      	b.n	80026f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002690:	f7ff fe16 	bl	80022c0 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b05      	cmp	r3, #5
 800269c:	d928      	bls.n	80026f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2220      	movs	r2, #32
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2203      	movs	r2, #3
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e246      	b.n	8002b3e <HAL_DMA_Init+0x646>
 80026b0:	40020010 	.word	0x40020010
 80026b4:	40020028 	.word	0x40020028
 80026b8:	40020040 	.word	0x40020040
 80026bc:	40020058 	.word	0x40020058
 80026c0:	40020070 	.word	0x40020070
 80026c4:	40020088 	.word	0x40020088
 80026c8:	400200a0 	.word	0x400200a0
 80026cc:	400200b8 	.word	0x400200b8
 80026d0:	40020410 	.word	0x40020410
 80026d4:	40020428 	.word	0x40020428
 80026d8:	40020440 	.word	0x40020440
 80026dc:	40020458 	.word	0x40020458
 80026e0:	40020470 	.word	0x40020470
 80026e4:	40020488 	.word	0x40020488
 80026e8:	400204a0 	.word	0x400204a0
 80026ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1c8      	bne.n	8002690 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	4b83      	ldr	r3, [pc, #524]	; (8002918 <HAL_DMA_Init+0x420>)
 800270a:	4013      	ands	r3, r2
 800270c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002716:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002722:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800272e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	2b04      	cmp	r3, #4
 8002742:	d107      	bne.n	8002754 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	4313      	orrs	r3, r2
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002754:	4b71      	ldr	r3, [pc, #452]	; (800291c <HAL_DMA_Init+0x424>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b71      	ldr	r3, [pc, #452]	; (8002920 <HAL_DMA_Init+0x428>)
 800275a:	4013      	ands	r3, r2
 800275c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002760:	d328      	bcc.n	80027b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b28      	cmp	r3, #40	; 0x28
 8002768:	d903      	bls.n	8002772 <HAL_DMA_Init+0x27a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b2e      	cmp	r3, #46	; 0x2e
 8002770:	d917      	bls.n	80027a2 <HAL_DMA_Init+0x2aa>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b3e      	cmp	r3, #62	; 0x3e
 8002778:	d903      	bls.n	8002782 <HAL_DMA_Init+0x28a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b42      	cmp	r3, #66	; 0x42
 8002780:	d90f      	bls.n	80027a2 <HAL_DMA_Init+0x2aa>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b46      	cmp	r3, #70	; 0x46
 8002788:	d903      	bls.n	8002792 <HAL_DMA_Init+0x29a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b48      	cmp	r3, #72	; 0x48
 8002790:	d907      	bls.n	80027a2 <HAL_DMA_Init+0x2aa>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b4e      	cmp	r3, #78	; 0x4e
 8002798:	d905      	bls.n	80027a6 <HAL_DMA_Init+0x2ae>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b52      	cmp	r3, #82	; 0x52
 80027a0:	d801      	bhi.n	80027a6 <HAL_DMA_Init+0x2ae>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_DMA_Init+0x2b0>
 80027a6:	2300      	movs	r3, #0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f023 0307 	bic.w	r3, r3, #7
 80027ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d117      	bne.n	800280e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f002 fb99 	bl	8004f28 <DMA_CheckFifoParam>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e197      	b.n	8002b3e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f002 fad4 	bl	8004dc4 <DMA_CalcBaseAndBitshift>
 800281c:	4603      	mov	r3, r0
 800281e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	223f      	movs	r2, #63	; 0x3f
 800282a:	409a      	lsls	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	e0cd      	b.n	80029ce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a3b      	ldr	r2, [pc, #236]	; (8002924 <HAL_DMA_Init+0x42c>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d022      	beq.n	8002882 <HAL_DMA_Init+0x38a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a39      	ldr	r2, [pc, #228]	; (8002928 <HAL_DMA_Init+0x430>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d01d      	beq.n	8002882 <HAL_DMA_Init+0x38a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a38      	ldr	r2, [pc, #224]	; (800292c <HAL_DMA_Init+0x434>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d018      	beq.n	8002882 <HAL_DMA_Init+0x38a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a36      	ldr	r2, [pc, #216]	; (8002930 <HAL_DMA_Init+0x438>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d013      	beq.n	8002882 <HAL_DMA_Init+0x38a>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a35      	ldr	r2, [pc, #212]	; (8002934 <HAL_DMA_Init+0x43c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d00e      	beq.n	8002882 <HAL_DMA_Init+0x38a>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a33      	ldr	r2, [pc, #204]	; (8002938 <HAL_DMA_Init+0x440>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d009      	beq.n	8002882 <HAL_DMA_Init+0x38a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a32      	ldr	r2, [pc, #200]	; (800293c <HAL_DMA_Init+0x444>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d004      	beq.n	8002882 <HAL_DMA_Init+0x38a>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a30      	ldr	r2, [pc, #192]	; (8002940 <HAL_DMA_Init+0x448>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_DMA_Init+0x38e>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <HAL_DMA_Init+0x390>
 8002886:	2300      	movs	r3, #0
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 8097 	beq.w	80029bc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a24      	ldr	r2, [pc, #144]	; (8002924 <HAL_DMA_Init+0x42c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d021      	beq.n	80028dc <HAL_DMA_Init+0x3e4>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <HAL_DMA_Init+0x430>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d01c      	beq.n	80028dc <HAL_DMA_Init+0x3e4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a21      	ldr	r2, [pc, #132]	; (800292c <HAL_DMA_Init+0x434>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d017      	beq.n	80028dc <HAL_DMA_Init+0x3e4>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HAL_DMA_Init+0x438>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d012      	beq.n	80028dc <HAL_DMA_Init+0x3e4>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <HAL_DMA_Init+0x43c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d00d      	beq.n	80028dc <HAL_DMA_Init+0x3e4>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1c      	ldr	r2, [pc, #112]	; (8002938 <HAL_DMA_Init+0x440>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d008      	beq.n	80028dc <HAL_DMA_Init+0x3e4>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_DMA_Init+0x444>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d003      	beq.n	80028dc <HAL_DMA_Init+0x3e4>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a19      	ldr	r2, [pc, #100]	; (8002940 <HAL_DMA_Init+0x448>)
 80028da:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_DMA_Init+0x44c>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d021      	beq.n	8002948 <HAL_DMA_Init+0x450>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b80      	cmp	r3, #128	; 0x80
 800290a:	d102      	bne.n	8002912 <HAL_DMA_Init+0x41a>
 800290c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002910:	e01b      	b.n	800294a <HAL_DMA_Init+0x452>
 8002912:	2300      	movs	r3, #0
 8002914:	e019      	b.n	800294a <HAL_DMA_Init+0x452>
 8002916:	bf00      	nop
 8002918:	fe10803f 	.word	0xfe10803f
 800291c:	5c001000 	.word	0x5c001000
 8002920:	ffff0000 	.word	0xffff0000
 8002924:	58025408 	.word	0x58025408
 8002928:	5802541c 	.word	0x5802541c
 800292c:	58025430 	.word	0x58025430
 8002930:	58025444 	.word	0x58025444
 8002934:	58025458 	.word	0x58025458
 8002938:	5802546c 	.word	0x5802546c
 800293c:	58025480 	.word	0x58025480
 8002940:	58025494 	.word	0x58025494
 8002944:	fffe000f 	.word	0xfffe000f
 8002948:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68d2      	ldr	r2, [r2, #12]
 800294e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002950:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002958:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002960:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002968:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002970:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002978:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	461a      	mov	r2, r3
 800298e:	4b6e      	ldr	r3, [pc, #440]	; (8002b48 <HAL_DMA_Init+0x650>)
 8002990:	4413      	add	r3, r2
 8002992:	4a6e      	ldr	r2, [pc, #440]	; (8002b4c <HAL_DMA_Init+0x654>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	009a      	lsls	r2, r3, #2
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f002 fa0f 	bl	8004dc4 <DMA_CalcBaseAndBitshift>
 80029a6:	4603      	mov	r3, r0
 80029a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ae:	f003 031f 	and.w	r3, r3, #31
 80029b2:	2201      	movs	r2, #1
 80029b4:	409a      	lsls	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	e008      	b.n	80029ce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2240      	movs	r2, #64	; 0x40
 80029c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2203      	movs	r2, #3
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e0b7      	b.n	8002b3e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a5f      	ldr	r2, [pc, #380]	; (8002b50 <HAL_DMA_Init+0x658>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d072      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a5d      	ldr	r2, [pc, #372]	; (8002b54 <HAL_DMA_Init+0x65c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d06d      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a5c      	ldr	r2, [pc, #368]	; (8002b58 <HAL_DMA_Init+0x660>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d068      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a5a      	ldr	r2, [pc, #360]	; (8002b5c <HAL_DMA_Init+0x664>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d063      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a59      	ldr	r2, [pc, #356]	; (8002b60 <HAL_DMA_Init+0x668>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d05e      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a57      	ldr	r2, [pc, #348]	; (8002b64 <HAL_DMA_Init+0x66c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d059      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a56      	ldr	r2, [pc, #344]	; (8002b68 <HAL_DMA_Init+0x670>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d054      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a54      	ldr	r2, [pc, #336]	; (8002b6c <HAL_DMA_Init+0x674>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d04f      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a53      	ldr	r2, [pc, #332]	; (8002b70 <HAL_DMA_Init+0x678>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d04a      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a51      	ldr	r2, [pc, #324]	; (8002b74 <HAL_DMA_Init+0x67c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d045      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a50      	ldr	r2, [pc, #320]	; (8002b78 <HAL_DMA_Init+0x680>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d040      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a4e      	ldr	r2, [pc, #312]	; (8002b7c <HAL_DMA_Init+0x684>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d03b      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a4d      	ldr	r2, [pc, #308]	; (8002b80 <HAL_DMA_Init+0x688>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d036      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a4b      	ldr	r2, [pc, #300]	; (8002b84 <HAL_DMA_Init+0x68c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d031      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a4a      	ldr	r2, [pc, #296]	; (8002b88 <HAL_DMA_Init+0x690>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d02c      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a48      	ldr	r2, [pc, #288]	; (8002b8c <HAL_DMA_Init+0x694>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d027      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a47      	ldr	r2, [pc, #284]	; (8002b90 <HAL_DMA_Init+0x698>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d022      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a45      	ldr	r2, [pc, #276]	; (8002b94 <HAL_DMA_Init+0x69c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01d      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a44      	ldr	r2, [pc, #272]	; (8002b98 <HAL_DMA_Init+0x6a0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d018      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a42      	ldr	r2, [pc, #264]	; (8002b9c <HAL_DMA_Init+0x6a4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d013      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a41      	ldr	r2, [pc, #260]	; (8002ba0 <HAL_DMA_Init+0x6a8>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00e      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a3f      	ldr	r2, [pc, #252]	; (8002ba4 <HAL_DMA_Init+0x6ac>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d009      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a3e      	ldr	r2, [pc, #248]	; (8002ba8 <HAL_DMA_Init+0x6b0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d004      	beq.n	8002abe <HAL_DMA_Init+0x5c6>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a3c      	ldr	r2, [pc, #240]	; (8002bac <HAL_DMA_Init+0x6b4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d101      	bne.n	8002ac2 <HAL_DMA_Init+0x5ca>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_DMA_Init+0x5cc>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d032      	beq.n	8002b2e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f002 faa9 	bl	8005020 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b80      	cmp	r3, #128	; 0x80
 8002ad4:	d102      	bne.n	8002adc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002af0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d010      	beq.n	8002b1c <HAL_DMA_Init+0x624>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d80c      	bhi.n	8002b1c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f002 fb26 	bl	8005154 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	e008      	b.n	8002b2e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	a7fdabf8 	.word	0xa7fdabf8
 8002b4c:	cccccccd 	.word	0xcccccccd
 8002b50:	40020010 	.word	0x40020010
 8002b54:	40020028 	.word	0x40020028
 8002b58:	40020040 	.word	0x40020040
 8002b5c:	40020058 	.word	0x40020058
 8002b60:	40020070 	.word	0x40020070
 8002b64:	40020088 	.word	0x40020088
 8002b68:	400200a0 	.word	0x400200a0
 8002b6c:	400200b8 	.word	0x400200b8
 8002b70:	40020410 	.word	0x40020410
 8002b74:	40020428 	.word	0x40020428
 8002b78:	40020440 	.word	0x40020440
 8002b7c:	40020458 	.word	0x40020458
 8002b80:	40020470 	.word	0x40020470
 8002b84:	40020488 	.word	0x40020488
 8002b88:	400204a0 	.word	0x400204a0
 8002b8c:	400204b8 	.word	0x400204b8
 8002b90:	58025408 	.word	0x58025408
 8002b94:	5802541c 	.word	0x5802541c
 8002b98:	58025430 	.word	0x58025430
 8002b9c:	58025444 	.word	0x58025444
 8002ba0:	58025458 	.word	0x58025458
 8002ba4:	5802546c 	.word	0x5802546c
 8002ba8:	58025480 	.word	0x58025480
 8002bac:	58025494 	.word	0x58025494

08002bb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b086      	sub	sp, #24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e226      	b.n	800301a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_DMA_Start_IT+0x2a>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e21f      	b.n	800301a <HAL_DMA_Start_IT+0x46a>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	f040 820a 	bne.w	8003004 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a68      	ldr	r2, [pc, #416]	; (8002da4 <HAL_DMA_Start_IT+0x1f4>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d04a      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a66      	ldr	r2, [pc, #408]	; (8002da8 <HAL_DMA_Start_IT+0x1f8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d045      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a65      	ldr	r2, [pc, #404]	; (8002dac <HAL_DMA_Start_IT+0x1fc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d040      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a63      	ldr	r2, [pc, #396]	; (8002db0 <HAL_DMA_Start_IT+0x200>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d03b      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a62      	ldr	r2, [pc, #392]	; (8002db4 <HAL_DMA_Start_IT+0x204>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d036      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a60      	ldr	r2, [pc, #384]	; (8002db8 <HAL_DMA_Start_IT+0x208>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d031      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a5f      	ldr	r2, [pc, #380]	; (8002dbc <HAL_DMA_Start_IT+0x20c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d02c      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a5d      	ldr	r2, [pc, #372]	; (8002dc0 <HAL_DMA_Start_IT+0x210>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d027      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a5c      	ldr	r2, [pc, #368]	; (8002dc4 <HAL_DMA_Start_IT+0x214>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d022      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a5a      	ldr	r2, [pc, #360]	; (8002dc8 <HAL_DMA_Start_IT+0x218>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d01d      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a59      	ldr	r2, [pc, #356]	; (8002dcc <HAL_DMA_Start_IT+0x21c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d018      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a57      	ldr	r2, [pc, #348]	; (8002dd0 <HAL_DMA_Start_IT+0x220>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a56      	ldr	r2, [pc, #344]	; (8002dd4 <HAL_DMA_Start_IT+0x224>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d00e      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a54      	ldr	r2, [pc, #336]	; (8002dd8 <HAL_DMA_Start_IT+0x228>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d009      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a53      	ldr	r2, [pc, #332]	; (8002ddc <HAL_DMA_Start_IT+0x22c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d004      	beq.n	8002c9e <HAL_DMA_Start_IT+0xee>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a51      	ldr	r2, [pc, #324]	; (8002de0 <HAL_DMA_Start_IT+0x230>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d108      	bne.n	8002cb0 <HAL_DMA_Start_IT+0x100>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e007      	b.n	8002cc0 <HAL_DMA_Start_IT+0x110>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0201 	bic.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f001 fed0 	bl	8004a6c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a34      	ldr	r2, [pc, #208]	; (8002da4 <HAL_DMA_Start_IT+0x1f4>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d04a      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a33      	ldr	r2, [pc, #204]	; (8002da8 <HAL_DMA_Start_IT+0x1f8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d045      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a31      	ldr	r2, [pc, #196]	; (8002dac <HAL_DMA_Start_IT+0x1fc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d040      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a30      	ldr	r2, [pc, #192]	; (8002db0 <HAL_DMA_Start_IT+0x200>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d03b      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a2e      	ldr	r2, [pc, #184]	; (8002db4 <HAL_DMA_Start_IT+0x204>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d036      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a2d      	ldr	r2, [pc, #180]	; (8002db8 <HAL_DMA_Start_IT+0x208>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d031      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2b      	ldr	r2, [pc, #172]	; (8002dbc <HAL_DMA_Start_IT+0x20c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d02c      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a2a      	ldr	r2, [pc, #168]	; (8002dc0 <HAL_DMA_Start_IT+0x210>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d027      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a28      	ldr	r2, [pc, #160]	; (8002dc4 <HAL_DMA_Start_IT+0x214>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d022      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a27      	ldr	r2, [pc, #156]	; (8002dc8 <HAL_DMA_Start_IT+0x218>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d01d      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a25      	ldr	r2, [pc, #148]	; (8002dcc <HAL_DMA_Start_IT+0x21c>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d018      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a24      	ldr	r2, [pc, #144]	; (8002dd0 <HAL_DMA_Start_IT+0x220>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d013      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <HAL_DMA_Start_IT+0x224>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00e      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a21      	ldr	r2, [pc, #132]	; (8002dd8 <HAL_DMA_Start_IT+0x228>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d009      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1f      	ldr	r2, [pc, #124]	; (8002ddc <HAL_DMA_Start_IT+0x22c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <HAL_DMA_Start_IT+0x1bc>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1e      	ldr	r2, [pc, #120]	; (8002de0 <HAL_DMA_Start_IT+0x230>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d101      	bne.n	8002d70 <HAL_DMA_Start_IT+0x1c0>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_DMA_Start_IT+0x1c2>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d036      	beq.n	8002de4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f023 021e 	bic.w	r2, r3, #30
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f042 0216 	orr.w	r2, r2, #22
 8002d88:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d03e      	beq.n	8002e10 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0208 	orr.w	r2, r2, #8
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e035      	b.n	8002e10 <HAL_DMA_Start_IT+0x260>
 8002da4:	40020010 	.word	0x40020010
 8002da8:	40020028 	.word	0x40020028
 8002dac:	40020040 	.word	0x40020040
 8002db0:	40020058 	.word	0x40020058
 8002db4:	40020070 	.word	0x40020070
 8002db8:	40020088 	.word	0x40020088
 8002dbc:	400200a0 	.word	0x400200a0
 8002dc0:	400200b8 	.word	0x400200b8
 8002dc4:	40020410 	.word	0x40020410
 8002dc8:	40020428 	.word	0x40020428
 8002dcc:	40020440 	.word	0x40020440
 8002dd0:	40020458 	.word	0x40020458
 8002dd4:	40020470 	.word	0x40020470
 8002dd8:	40020488 	.word	0x40020488
 8002ddc:	400204a0 	.word	0x400204a0
 8002de0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 020e 	bic.w	r2, r3, #14
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 020a 	orr.w	r2, r2, #10
 8002df6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0204 	orr.w	r2, r2, #4
 8002e0e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a83      	ldr	r2, [pc, #524]	; (8003024 <HAL_DMA_Start_IT+0x474>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d072      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a82      	ldr	r2, [pc, #520]	; (8003028 <HAL_DMA_Start_IT+0x478>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d06d      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a80      	ldr	r2, [pc, #512]	; (800302c <HAL_DMA_Start_IT+0x47c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d068      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a7f      	ldr	r2, [pc, #508]	; (8003030 <HAL_DMA_Start_IT+0x480>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d063      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a7d      	ldr	r2, [pc, #500]	; (8003034 <HAL_DMA_Start_IT+0x484>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d05e      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a7c      	ldr	r2, [pc, #496]	; (8003038 <HAL_DMA_Start_IT+0x488>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d059      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a7a      	ldr	r2, [pc, #488]	; (800303c <HAL_DMA_Start_IT+0x48c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d054      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a79      	ldr	r2, [pc, #484]	; (8003040 <HAL_DMA_Start_IT+0x490>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d04f      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a77      	ldr	r2, [pc, #476]	; (8003044 <HAL_DMA_Start_IT+0x494>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d04a      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a76      	ldr	r2, [pc, #472]	; (8003048 <HAL_DMA_Start_IT+0x498>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d045      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a74      	ldr	r2, [pc, #464]	; (800304c <HAL_DMA_Start_IT+0x49c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d040      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a73      	ldr	r2, [pc, #460]	; (8003050 <HAL_DMA_Start_IT+0x4a0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d03b      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a71      	ldr	r2, [pc, #452]	; (8003054 <HAL_DMA_Start_IT+0x4a4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d036      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a70      	ldr	r2, [pc, #448]	; (8003058 <HAL_DMA_Start_IT+0x4a8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d031      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a6e      	ldr	r2, [pc, #440]	; (800305c <HAL_DMA_Start_IT+0x4ac>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d02c      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6d      	ldr	r2, [pc, #436]	; (8003060 <HAL_DMA_Start_IT+0x4b0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d027      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a6b      	ldr	r2, [pc, #428]	; (8003064 <HAL_DMA_Start_IT+0x4b4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d022      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6a      	ldr	r2, [pc, #424]	; (8003068 <HAL_DMA_Start_IT+0x4b8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d01d      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a68      	ldr	r2, [pc, #416]	; (800306c <HAL_DMA_Start_IT+0x4bc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d018      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a67      	ldr	r2, [pc, #412]	; (8003070 <HAL_DMA_Start_IT+0x4c0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d013      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a65      	ldr	r2, [pc, #404]	; (8003074 <HAL_DMA_Start_IT+0x4c4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00e      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a64      	ldr	r2, [pc, #400]	; (8003078 <HAL_DMA_Start_IT+0x4c8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d009      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a62      	ldr	r2, [pc, #392]	; (800307c <HAL_DMA_Start_IT+0x4cc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d004      	beq.n	8002f00 <HAL_DMA_Start_IT+0x350>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a61      	ldr	r2, [pc, #388]	; (8003080 <HAL_DMA_Start_IT+0x4d0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <HAL_DMA_Start_IT+0x354>
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <HAL_DMA_Start_IT+0x356>
 8002f04:	2300      	movs	r3, #0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d01a      	beq.n	8002f40 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f26:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a37      	ldr	r2, [pc, #220]	; (8003024 <HAL_DMA_Start_IT+0x474>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d04a      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a36      	ldr	r2, [pc, #216]	; (8003028 <HAL_DMA_Start_IT+0x478>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d045      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a34      	ldr	r2, [pc, #208]	; (800302c <HAL_DMA_Start_IT+0x47c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d040      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a33      	ldr	r2, [pc, #204]	; (8003030 <HAL_DMA_Start_IT+0x480>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d03b      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a31      	ldr	r2, [pc, #196]	; (8003034 <HAL_DMA_Start_IT+0x484>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d036      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a30      	ldr	r2, [pc, #192]	; (8003038 <HAL_DMA_Start_IT+0x488>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d031      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2e      	ldr	r2, [pc, #184]	; (800303c <HAL_DMA_Start_IT+0x48c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d02c      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a2d      	ldr	r2, [pc, #180]	; (8003040 <HAL_DMA_Start_IT+0x490>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d027      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a2b      	ldr	r2, [pc, #172]	; (8003044 <HAL_DMA_Start_IT+0x494>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d022      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a2a      	ldr	r2, [pc, #168]	; (8003048 <HAL_DMA_Start_IT+0x498>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d01d      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a28      	ldr	r2, [pc, #160]	; (800304c <HAL_DMA_Start_IT+0x49c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d018      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a27      	ldr	r2, [pc, #156]	; (8003050 <HAL_DMA_Start_IT+0x4a0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d013      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a25      	ldr	r2, [pc, #148]	; (8003054 <HAL_DMA_Start_IT+0x4a4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00e      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a24      	ldr	r2, [pc, #144]	; (8003058 <HAL_DMA_Start_IT+0x4a8>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d009      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a22      	ldr	r2, [pc, #136]	; (800305c <HAL_DMA_Start_IT+0x4ac>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <HAL_DMA_Start_IT+0x430>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a21      	ldr	r2, [pc, #132]	; (8003060 <HAL_DMA_Start_IT+0x4b0>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d108      	bne.n	8002ff2 <HAL_DMA_Start_IT+0x442>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	e012      	b.n	8003018 <HAL_DMA_Start_IT+0x468>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	e009      	b.n	8003018 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800300a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003018:	7dfb      	ldrb	r3, [r7, #23]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40020010 	.word	0x40020010
 8003028:	40020028 	.word	0x40020028
 800302c:	40020040 	.word	0x40020040
 8003030:	40020058 	.word	0x40020058
 8003034:	40020070 	.word	0x40020070
 8003038:	40020088 	.word	0x40020088
 800303c:	400200a0 	.word	0x400200a0
 8003040:	400200b8 	.word	0x400200b8
 8003044:	40020410 	.word	0x40020410
 8003048:	40020428 	.word	0x40020428
 800304c:	40020440 	.word	0x40020440
 8003050:	40020458 	.word	0x40020458
 8003054:	40020470 	.word	0x40020470
 8003058:	40020488 	.word	0x40020488
 800305c:	400204a0 	.word	0x400204a0
 8003060:	400204b8 	.word	0x400204b8
 8003064:	58025408 	.word	0x58025408
 8003068:	5802541c 	.word	0x5802541c
 800306c:	58025430 	.word	0x58025430
 8003070:	58025444 	.word	0x58025444
 8003074:	58025458 	.word	0x58025458
 8003078:	5802546c 	.word	0x5802546c
 800307c:	58025480 	.word	0x58025480
 8003080:	58025494 	.word	0x58025494

08003084 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800308c:	f7ff f918 	bl	80022c0 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e2dc      	b.n	8003656 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d008      	beq.n	80030ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2280      	movs	r2, #128	; 0x80
 80030ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e2cd      	b.n	8003656 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a76      	ldr	r2, [pc, #472]	; (8003298 <HAL_DMA_Abort+0x214>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d04a      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a74      	ldr	r2, [pc, #464]	; (800329c <HAL_DMA_Abort+0x218>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d045      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a73      	ldr	r2, [pc, #460]	; (80032a0 <HAL_DMA_Abort+0x21c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d040      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a71      	ldr	r2, [pc, #452]	; (80032a4 <HAL_DMA_Abort+0x220>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d03b      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a70      	ldr	r2, [pc, #448]	; (80032a8 <HAL_DMA_Abort+0x224>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d036      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a6e      	ldr	r2, [pc, #440]	; (80032ac <HAL_DMA_Abort+0x228>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d031      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a6d      	ldr	r2, [pc, #436]	; (80032b0 <HAL_DMA_Abort+0x22c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d02c      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a6b      	ldr	r2, [pc, #428]	; (80032b4 <HAL_DMA_Abort+0x230>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d027      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a6a      	ldr	r2, [pc, #424]	; (80032b8 <HAL_DMA_Abort+0x234>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d022      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a68      	ldr	r2, [pc, #416]	; (80032bc <HAL_DMA_Abort+0x238>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01d      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a67      	ldr	r2, [pc, #412]	; (80032c0 <HAL_DMA_Abort+0x23c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d018      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a65      	ldr	r2, [pc, #404]	; (80032c4 <HAL_DMA_Abort+0x240>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a64      	ldr	r2, [pc, #400]	; (80032c8 <HAL_DMA_Abort+0x244>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00e      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a62      	ldr	r2, [pc, #392]	; (80032cc <HAL_DMA_Abort+0x248>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a61      	ldr	r2, [pc, #388]	; (80032d0 <HAL_DMA_Abort+0x24c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d004      	beq.n	800315a <HAL_DMA_Abort+0xd6>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a5f      	ldr	r2, [pc, #380]	; (80032d4 <HAL_DMA_Abort+0x250>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_DMA_Abort+0xda>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_DMA_Abort+0xdc>
 800315e:	2300      	movs	r3, #0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 021e 	bic.w	r2, r2, #30
 8003172:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003182:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e00a      	b.n	80031a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 020e 	bic.w	r2, r2, #14
 800319a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a3c      	ldr	r2, [pc, #240]	; (8003298 <HAL_DMA_Abort+0x214>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d072      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a3a      	ldr	r2, [pc, #232]	; (800329c <HAL_DMA_Abort+0x218>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d06d      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a39      	ldr	r2, [pc, #228]	; (80032a0 <HAL_DMA_Abort+0x21c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d068      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a37      	ldr	r2, [pc, #220]	; (80032a4 <HAL_DMA_Abort+0x220>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d063      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a36      	ldr	r2, [pc, #216]	; (80032a8 <HAL_DMA_Abort+0x224>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d05e      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a34      	ldr	r2, [pc, #208]	; (80032ac <HAL_DMA_Abort+0x228>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d059      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a33      	ldr	r2, [pc, #204]	; (80032b0 <HAL_DMA_Abort+0x22c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d054      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a31      	ldr	r2, [pc, #196]	; (80032b4 <HAL_DMA_Abort+0x230>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d04f      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a30      	ldr	r2, [pc, #192]	; (80032b8 <HAL_DMA_Abort+0x234>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d04a      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2e      	ldr	r2, [pc, #184]	; (80032bc <HAL_DMA_Abort+0x238>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d045      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a2d      	ldr	r2, [pc, #180]	; (80032c0 <HAL_DMA_Abort+0x23c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d040      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <HAL_DMA_Abort+0x240>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d03b      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2a      	ldr	r2, [pc, #168]	; (80032c8 <HAL_DMA_Abort+0x244>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d036      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a28      	ldr	r2, [pc, #160]	; (80032cc <HAL_DMA_Abort+0x248>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d031      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a27      	ldr	r2, [pc, #156]	; (80032d0 <HAL_DMA_Abort+0x24c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d02c      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a25      	ldr	r2, [pc, #148]	; (80032d4 <HAL_DMA_Abort+0x250>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d027      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a24      	ldr	r2, [pc, #144]	; (80032d8 <HAL_DMA_Abort+0x254>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d022      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a22      	ldr	r2, [pc, #136]	; (80032dc <HAL_DMA_Abort+0x258>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d01d      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <HAL_DMA_Abort+0x25c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d018      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1f      	ldr	r2, [pc, #124]	; (80032e4 <HAL_DMA_Abort+0x260>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <HAL_DMA_Abort+0x264>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d00e      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <HAL_DMA_Abort+0x268>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d009      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <HAL_DMA_Abort+0x26c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d004      	beq.n	8003292 <HAL_DMA_Abort+0x20e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a19      	ldr	r2, [pc, #100]	; (80032f4 <HAL_DMA_Abort+0x270>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d132      	bne.n	80032f8 <HAL_DMA_Abort+0x274>
 8003292:	2301      	movs	r3, #1
 8003294:	e031      	b.n	80032fa <HAL_DMA_Abort+0x276>
 8003296:	bf00      	nop
 8003298:	40020010 	.word	0x40020010
 800329c:	40020028 	.word	0x40020028
 80032a0:	40020040 	.word	0x40020040
 80032a4:	40020058 	.word	0x40020058
 80032a8:	40020070 	.word	0x40020070
 80032ac:	40020088 	.word	0x40020088
 80032b0:	400200a0 	.word	0x400200a0
 80032b4:	400200b8 	.word	0x400200b8
 80032b8:	40020410 	.word	0x40020410
 80032bc:	40020428 	.word	0x40020428
 80032c0:	40020440 	.word	0x40020440
 80032c4:	40020458 	.word	0x40020458
 80032c8:	40020470 	.word	0x40020470
 80032cc:	40020488 	.word	0x40020488
 80032d0:	400204a0 	.word	0x400204a0
 80032d4:	400204b8 	.word	0x400204b8
 80032d8:	58025408 	.word	0x58025408
 80032dc:	5802541c 	.word	0x5802541c
 80032e0:	58025430 	.word	0x58025430
 80032e4:	58025444 	.word	0x58025444
 80032e8:	58025458 	.word	0x58025458
 80032ec:	5802546c 	.word	0x5802546c
 80032f0:	58025480 	.word	0x58025480
 80032f4:	58025494 	.word	0x58025494
 80032f8:	2300      	movs	r3, #0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800330c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a6d      	ldr	r2, [pc, #436]	; (80034c8 <HAL_DMA_Abort+0x444>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d04a      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a6b      	ldr	r2, [pc, #428]	; (80034cc <HAL_DMA_Abort+0x448>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d045      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a6a      	ldr	r2, [pc, #424]	; (80034d0 <HAL_DMA_Abort+0x44c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d040      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a68      	ldr	r2, [pc, #416]	; (80034d4 <HAL_DMA_Abort+0x450>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d03b      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a67      	ldr	r2, [pc, #412]	; (80034d8 <HAL_DMA_Abort+0x454>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d036      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a65      	ldr	r2, [pc, #404]	; (80034dc <HAL_DMA_Abort+0x458>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d031      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a64      	ldr	r2, [pc, #400]	; (80034e0 <HAL_DMA_Abort+0x45c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d02c      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a62      	ldr	r2, [pc, #392]	; (80034e4 <HAL_DMA_Abort+0x460>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d027      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a61      	ldr	r2, [pc, #388]	; (80034e8 <HAL_DMA_Abort+0x464>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d022      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a5f      	ldr	r2, [pc, #380]	; (80034ec <HAL_DMA_Abort+0x468>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d01d      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a5e      	ldr	r2, [pc, #376]	; (80034f0 <HAL_DMA_Abort+0x46c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d018      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a5c      	ldr	r2, [pc, #368]	; (80034f4 <HAL_DMA_Abort+0x470>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a5b      	ldr	r2, [pc, #364]	; (80034f8 <HAL_DMA_Abort+0x474>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00e      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a59      	ldr	r2, [pc, #356]	; (80034fc <HAL_DMA_Abort+0x478>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a58      	ldr	r2, [pc, #352]	; (8003500 <HAL_DMA_Abort+0x47c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_DMA_Abort+0x32a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a56      	ldr	r2, [pc, #344]	; (8003504 <HAL_DMA_Abort+0x480>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d108      	bne.n	80033c0 <HAL_DMA_Abort+0x33c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0201 	bic.w	r2, r2, #1
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e007      	b.n	80033d0 <HAL_DMA_Abort+0x34c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f022 0201 	bic.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033d0:	e013      	b.n	80033fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033d2:	f7fe ff75 	bl	80022c0 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b05      	cmp	r3, #5
 80033de:	d90c      	bls.n	80033fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2203      	movs	r2, #3
 80033ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e12d      	b.n	8003656 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1e5      	bne.n	80033d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2f      	ldr	r2, [pc, #188]	; (80034c8 <HAL_DMA_Abort+0x444>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d04a      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2d      	ldr	r2, [pc, #180]	; (80034cc <HAL_DMA_Abort+0x448>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d045      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2c      	ldr	r2, [pc, #176]	; (80034d0 <HAL_DMA_Abort+0x44c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d040      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a2a      	ldr	r2, [pc, #168]	; (80034d4 <HAL_DMA_Abort+0x450>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d03b      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a29      	ldr	r2, [pc, #164]	; (80034d8 <HAL_DMA_Abort+0x454>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d036      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a27      	ldr	r2, [pc, #156]	; (80034dc <HAL_DMA_Abort+0x458>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d031      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <HAL_DMA_Abort+0x45c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d02c      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a24      	ldr	r2, [pc, #144]	; (80034e4 <HAL_DMA_Abort+0x460>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d027      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a23      	ldr	r2, [pc, #140]	; (80034e8 <HAL_DMA_Abort+0x464>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d022      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a21      	ldr	r2, [pc, #132]	; (80034ec <HAL_DMA_Abort+0x468>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d01d      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a20      	ldr	r2, [pc, #128]	; (80034f0 <HAL_DMA_Abort+0x46c>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d018      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <HAL_DMA_Abort+0x470>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d013      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <HAL_DMA_Abort+0x474>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00e      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1b      	ldr	r2, [pc, #108]	; (80034fc <HAL_DMA_Abort+0x478>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d009      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1a      	ldr	r2, [pc, #104]	; (8003500 <HAL_DMA_Abort+0x47c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d004      	beq.n	80034a6 <HAL_DMA_Abort+0x422>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a18      	ldr	r2, [pc, #96]	; (8003504 <HAL_DMA_Abort+0x480>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_DMA_Abort+0x426>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_DMA_Abort+0x428>
 80034aa:	2300      	movs	r3, #0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d02b      	beq.n	8003508 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	223f      	movs	r2, #63	; 0x3f
 80034c0:	409a      	lsls	r2, r3
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	609a      	str	r2, [r3, #8]
 80034c6:	e02a      	b.n	800351e <HAL_DMA_Abort+0x49a>
 80034c8:	40020010 	.word	0x40020010
 80034cc:	40020028 	.word	0x40020028
 80034d0:	40020040 	.word	0x40020040
 80034d4:	40020058 	.word	0x40020058
 80034d8:	40020070 	.word	0x40020070
 80034dc:	40020088 	.word	0x40020088
 80034e0:	400200a0 	.word	0x400200a0
 80034e4:	400200b8 	.word	0x400200b8
 80034e8:	40020410 	.word	0x40020410
 80034ec:	40020428 	.word	0x40020428
 80034f0:	40020440 	.word	0x40020440
 80034f4:	40020458 	.word	0x40020458
 80034f8:	40020470 	.word	0x40020470
 80034fc:	40020488 	.word	0x40020488
 8003500:	400204a0 	.word	0x400204a0
 8003504:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800350c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2201      	movs	r2, #1
 8003518:	409a      	lsls	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a4f      	ldr	r2, [pc, #316]	; (8003660 <HAL_DMA_Abort+0x5dc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d072      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a4d      	ldr	r2, [pc, #308]	; (8003664 <HAL_DMA_Abort+0x5e0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d06d      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a4c      	ldr	r2, [pc, #304]	; (8003668 <HAL_DMA_Abort+0x5e4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d068      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a4a      	ldr	r2, [pc, #296]	; (800366c <HAL_DMA_Abort+0x5e8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d063      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a49      	ldr	r2, [pc, #292]	; (8003670 <HAL_DMA_Abort+0x5ec>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d05e      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a47      	ldr	r2, [pc, #284]	; (8003674 <HAL_DMA_Abort+0x5f0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d059      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a46      	ldr	r2, [pc, #280]	; (8003678 <HAL_DMA_Abort+0x5f4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d054      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a44      	ldr	r2, [pc, #272]	; (800367c <HAL_DMA_Abort+0x5f8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d04f      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a43      	ldr	r2, [pc, #268]	; (8003680 <HAL_DMA_Abort+0x5fc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d04a      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a41      	ldr	r2, [pc, #260]	; (8003684 <HAL_DMA_Abort+0x600>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d045      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a40      	ldr	r2, [pc, #256]	; (8003688 <HAL_DMA_Abort+0x604>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d040      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a3e      	ldr	r2, [pc, #248]	; (800368c <HAL_DMA_Abort+0x608>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d03b      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a3d      	ldr	r2, [pc, #244]	; (8003690 <HAL_DMA_Abort+0x60c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d036      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3b      	ldr	r2, [pc, #236]	; (8003694 <HAL_DMA_Abort+0x610>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d031      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a3a      	ldr	r2, [pc, #232]	; (8003698 <HAL_DMA_Abort+0x614>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d02c      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a38      	ldr	r2, [pc, #224]	; (800369c <HAL_DMA_Abort+0x618>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d027      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a37      	ldr	r2, [pc, #220]	; (80036a0 <HAL_DMA_Abort+0x61c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d022      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a35      	ldr	r2, [pc, #212]	; (80036a4 <HAL_DMA_Abort+0x620>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d01d      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a34      	ldr	r2, [pc, #208]	; (80036a8 <HAL_DMA_Abort+0x624>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d018      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a32      	ldr	r2, [pc, #200]	; (80036ac <HAL_DMA_Abort+0x628>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a31      	ldr	r2, [pc, #196]	; (80036b0 <HAL_DMA_Abort+0x62c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00e      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a2f      	ldr	r2, [pc, #188]	; (80036b4 <HAL_DMA_Abort+0x630>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2e      	ldr	r2, [pc, #184]	; (80036b8 <HAL_DMA_Abort+0x634>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d004      	beq.n	800360e <HAL_DMA_Abort+0x58a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2c      	ldr	r2, [pc, #176]	; (80036bc <HAL_DMA_Abort+0x638>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d101      	bne.n	8003612 <HAL_DMA_Abort+0x58e>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_DMA_Abort+0x590>
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d015      	beq.n	8003644 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003620:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00c      	beq.n	8003644 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003634:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003638:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003642:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3718      	adds	r7, #24
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40020010 	.word	0x40020010
 8003664:	40020028 	.word	0x40020028
 8003668:	40020040 	.word	0x40020040
 800366c:	40020058 	.word	0x40020058
 8003670:	40020070 	.word	0x40020070
 8003674:	40020088 	.word	0x40020088
 8003678:	400200a0 	.word	0x400200a0
 800367c:	400200b8 	.word	0x400200b8
 8003680:	40020410 	.word	0x40020410
 8003684:	40020428 	.word	0x40020428
 8003688:	40020440 	.word	0x40020440
 800368c:	40020458 	.word	0x40020458
 8003690:	40020470 	.word	0x40020470
 8003694:	40020488 	.word	0x40020488
 8003698:	400204a0 	.word	0x400204a0
 800369c:	400204b8 	.word	0x400204b8
 80036a0:	58025408 	.word	0x58025408
 80036a4:	5802541c 	.word	0x5802541c
 80036a8:	58025430 	.word	0x58025430
 80036ac:	58025444 	.word	0x58025444
 80036b0:	58025458 	.word	0x58025458
 80036b4:	5802546c 	.word	0x5802546c
 80036b8:	58025480 	.word	0x58025480
 80036bc:	58025494 	.word	0x58025494

080036c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e237      	b.n	8003b42 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d004      	beq.n	80036e8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2280      	movs	r2, #128	; 0x80
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e22c      	b.n	8003b42 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a5c      	ldr	r2, [pc, #368]	; (8003860 <HAL_DMA_Abort_IT+0x1a0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d04a      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a5b      	ldr	r2, [pc, #364]	; (8003864 <HAL_DMA_Abort_IT+0x1a4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d045      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a59      	ldr	r2, [pc, #356]	; (8003868 <HAL_DMA_Abort_IT+0x1a8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d040      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a58      	ldr	r2, [pc, #352]	; (800386c <HAL_DMA_Abort_IT+0x1ac>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d03b      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a56      	ldr	r2, [pc, #344]	; (8003870 <HAL_DMA_Abort_IT+0x1b0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d036      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a55      	ldr	r2, [pc, #340]	; (8003874 <HAL_DMA_Abort_IT+0x1b4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d031      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a53      	ldr	r2, [pc, #332]	; (8003878 <HAL_DMA_Abort_IT+0x1b8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d02c      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a52      	ldr	r2, [pc, #328]	; (800387c <HAL_DMA_Abort_IT+0x1bc>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d027      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a50      	ldr	r2, [pc, #320]	; (8003880 <HAL_DMA_Abort_IT+0x1c0>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d022      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a4f      	ldr	r2, [pc, #316]	; (8003884 <HAL_DMA_Abort_IT+0x1c4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d01d      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a4d      	ldr	r2, [pc, #308]	; (8003888 <HAL_DMA_Abort_IT+0x1c8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d018      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a4c      	ldr	r2, [pc, #304]	; (800388c <HAL_DMA_Abort_IT+0x1cc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d013      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a4a      	ldr	r2, [pc, #296]	; (8003890 <HAL_DMA_Abort_IT+0x1d0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d00e      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a49      	ldr	r2, [pc, #292]	; (8003894 <HAL_DMA_Abort_IT+0x1d4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d009      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a47      	ldr	r2, [pc, #284]	; (8003898 <HAL_DMA_Abort_IT+0x1d8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d004      	beq.n	8003788 <HAL_DMA_Abort_IT+0xc8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a46      	ldr	r2, [pc, #280]	; (800389c <HAL_DMA_Abort_IT+0x1dc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d101      	bne.n	800378c <HAL_DMA_Abort_IT+0xcc>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <HAL_DMA_Abort_IT+0xce>
 800378c:	2300      	movs	r3, #0
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8086 	beq.w	80038a0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2204      	movs	r2, #4
 8003798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a2f      	ldr	r2, [pc, #188]	; (8003860 <HAL_DMA_Abort_IT+0x1a0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d04a      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a2e      	ldr	r2, [pc, #184]	; (8003864 <HAL_DMA_Abort_IT+0x1a4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d045      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a2c      	ldr	r2, [pc, #176]	; (8003868 <HAL_DMA_Abort_IT+0x1a8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d040      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a2b      	ldr	r2, [pc, #172]	; (800386c <HAL_DMA_Abort_IT+0x1ac>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d03b      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a29      	ldr	r2, [pc, #164]	; (8003870 <HAL_DMA_Abort_IT+0x1b0>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d036      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a28      	ldr	r2, [pc, #160]	; (8003874 <HAL_DMA_Abort_IT+0x1b4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d031      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a26      	ldr	r2, [pc, #152]	; (8003878 <HAL_DMA_Abort_IT+0x1b8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d02c      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a25      	ldr	r2, [pc, #148]	; (800387c <HAL_DMA_Abort_IT+0x1bc>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d027      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a23      	ldr	r2, [pc, #140]	; (8003880 <HAL_DMA_Abort_IT+0x1c0>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d022      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a22      	ldr	r2, [pc, #136]	; (8003884 <HAL_DMA_Abort_IT+0x1c4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d01d      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a20      	ldr	r2, [pc, #128]	; (8003888 <HAL_DMA_Abort_IT+0x1c8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d018      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a1f      	ldr	r2, [pc, #124]	; (800388c <HAL_DMA_Abort_IT+0x1cc>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d013      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <HAL_DMA_Abort_IT+0x1d0>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d00e      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a1c      	ldr	r2, [pc, #112]	; (8003894 <HAL_DMA_Abort_IT+0x1d4>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d009      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a1a      	ldr	r2, [pc, #104]	; (8003898 <HAL_DMA_Abort_IT+0x1d8>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d004      	beq.n	800383c <HAL_DMA_Abort_IT+0x17c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a19      	ldr	r2, [pc, #100]	; (800389c <HAL_DMA_Abort_IT+0x1dc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d108      	bne.n	800384e <HAL_DMA_Abort_IT+0x18e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e178      	b.n	8003b40 <HAL_DMA_Abort_IT+0x480>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e16f      	b.n	8003b40 <HAL_DMA_Abort_IT+0x480>
 8003860:	40020010 	.word	0x40020010
 8003864:	40020028 	.word	0x40020028
 8003868:	40020040 	.word	0x40020040
 800386c:	40020058 	.word	0x40020058
 8003870:	40020070 	.word	0x40020070
 8003874:	40020088 	.word	0x40020088
 8003878:	400200a0 	.word	0x400200a0
 800387c:	400200b8 	.word	0x400200b8
 8003880:	40020410 	.word	0x40020410
 8003884:	40020428 	.word	0x40020428
 8003888:	40020440 	.word	0x40020440
 800388c:	40020458 	.word	0x40020458
 8003890:	40020470 	.word	0x40020470
 8003894:	40020488 	.word	0x40020488
 8003898:	400204a0 	.word	0x400204a0
 800389c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f022 020e 	bic.w	r2, r2, #14
 80038ae:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a6c      	ldr	r2, [pc, #432]	; (8003a68 <HAL_DMA_Abort_IT+0x3a8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d04a      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a6b      	ldr	r2, [pc, #428]	; (8003a6c <HAL_DMA_Abort_IT+0x3ac>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d045      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a69      	ldr	r2, [pc, #420]	; (8003a70 <HAL_DMA_Abort_IT+0x3b0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d040      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a68      	ldr	r2, [pc, #416]	; (8003a74 <HAL_DMA_Abort_IT+0x3b4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d03b      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a66      	ldr	r2, [pc, #408]	; (8003a78 <HAL_DMA_Abort_IT+0x3b8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d036      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a65      	ldr	r2, [pc, #404]	; (8003a7c <HAL_DMA_Abort_IT+0x3bc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d031      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a63      	ldr	r2, [pc, #396]	; (8003a80 <HAL_DMA_Abort_IT+0x3c0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d02c      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a62      	ldr	r2, [pc, #392]	; (8003a84 <HAL_DMA_Abort_IT+0x3c4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d027      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a60      	ldr	r2, [pc, #384]	; (8003a88 <HAL_DMA_Abort_IT+0x3c8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d022      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a5f      	ldr	r2, [pc, #380]	; (8003a8c <HAL_DMA_Abort_IT+0x3cc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d01d      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a5d      	ldr	r2, [pc, #372]	; (8003a90 <HAL_DMA_Abort_IT+0x3d0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d018      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a5c      	ldr	r2, [pc, #368]	; (8003a94 <HAL_DMA_Abort_IT+0x3d4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d013      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a5a      	ldr	r2, [pc, #360]	; (8003a98 <HAL_DMA_Abort_IT+0x3d8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00e      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a59      	ldr	r2, [pc, #356]	; (8003a9c <HAL_DMA_Abort_IT+0x3dc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d009      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a57      	ldr	r2, [pc, #348]	; (8003aa0 <HAL_DMA_Abort_IT+0x3e0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d004      	beq.n	8003950 <HAL_DMA_Abort_IT+0x290>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a56      	ldr	r2, [pc, #344]	; (8003aa4 <HAL_DMA_Abort_IT+0x3e4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d108      	bne.n	8003962 <HAL_DMA_Abort_IT+0x2a2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e007      	b.n	8003972 <HAL_DMA_Abort_IT+0x2b2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a3c      	ldr	r2, [pc, #240]	; (8003a68 <HAL_DMA_Abort_IT+0x3a8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d072      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a3a      	ldr	r2, [pc, #232]	; (8003a6c <HAL_DMA_Abort_IT+0x3ac>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d06d      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a39      	ldr	r2, [pc, #228]	; (8003a70 <HAL_DMA_Abort_IT+0x3b0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d068      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a37      	ldr	r2, [pc, #220]	; (8003a74 <HAL_DMA_Abort_IT+0x3b4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d063      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a36      	ldr	r2, [pc, #216]	; (8003a78 <HAL_DMA_Abort_IT+0x3b8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d05e      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a34      	ldr	r2, [pc, #208]	; (8003a7c <HAL_DMA_Abort_IT+0x3bc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d059      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a33      	ldr	r2, [pc, #204]	; (8003a80 <HAL_DMA_Abort_IT+0x3c0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d054      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a31      	ldr	r2, [pc, #196]	; (8003a84 <HAL_DMA_Abort_IT+0x3c4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d04f      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a30      	ldr	r2, [pc, #192]	; (8003a88 <HAL_DMA_Abort_IT+0x3c8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d04a      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2e      	ldr	r2, [pc, #184]	; (8003a8c <HAL_DMA_Abort_IT+0x3cc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d045      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2d      	ldr	r2, [pc, #180]	; (8003a90 <HAL_DMA_Abort_IT+0x3d0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d040      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2b      	ldr	r2, [pc, #172]	; (8003a94 <HAL_DMA_Abort_IT+0x3d4>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d03b      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <HAL_DMA_Abort_IT+0x3d8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d036      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a28      	ldr	r2, [pc, #160]	; (8003a9c <HAL_DMA_Abort_IT+0x3dc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d031      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a27      	ldr	r2, [pc, #156]	; (8003aa0 <HAL_DMA_Abort_IT+0x3e0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d02c      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a25      	ldr	r2, [pc, #148]	; (8003aa4 <HAL_DMA_Abort_IT+0x3e4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d027      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a24      	ldr	r2, [pc, #144]	; (8003aa8 <HAL_DMA_Abort_IT+0x3e8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d022      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a22      	ldr	r2, [pc, #136]	; (8003aac <HAL_DMA_Abort_IT+0x3ec>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d01d      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a21      	ldr	r2, [pc, #132]	; (8003ab0 <HAL_DMA_Abort_IT+0x3f0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d018      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a1f      	ldr	r2, [pc, #124]	; (8003ab4 <HAL_DMA_Abort_IT+0x3f4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d013      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1e      	ldr	r2, [pc, #120]	; (8003ab8 <HAL_DMA_Abort_IT+0x3f8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00e      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <HAL_DMA_Abort_IT+0x3fc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d009      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1b      	ldr	r2, [pc, #108]	; (8003ac0 <HAL_DMA_Abort_IT+0x400>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x3a2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a19      	ldr	r2, [pc, #100]	; (8003ac4 <HAL_DMA_Abort_IT+0x404>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d132      	bne.n	8003ac8 <HAL_DMA_Abort_IT+0x408>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e031      	b.n	8003aca <HAL_DMA_Abort_IT+0x40a>
 8003a66:	bf00      	nop
 8003a68:	40020010 	.word	0x40020010
 8003a6c:	40020028 	.word	0x40020028
 8003a70:	40020040 	.word	0x40020040
 8003a74:	40020058 	.word	0x40020058
 8003a78:	40020070 	.word	0x40020070
 8003a7c:	40020088 	.word	0x40020088
 8003a80:	400200a0 	.word	0x400200a0
 8003a84:	400200b8 	.word	0x400200b8
 8003a88:	40020410 	.word	0x40020410
 8003a8c:	40020428 	.word	0x40020428
 8003a90:	40020440 	.word	0x40020440
 8003a94:	40020458 	.word	0x40020458
 8003a98:	40020470 	.word	0x40020470
 8003a9c:	40020488 	.word	0x40020488
 8003aa0:	400204a0 	.word	0x400204a0
 8003aa4:	400204b8 	.word	0x400204b8
 8003aa8:	58025408 	.word	0x58025408
 8003aac:	5802541c 	.word	0x5802541c
 8003ab0:	58025430 	.word	0x58025430
 8003ab4:	58025444 	.word	0x58025444
 8003ab8:	58025458 	.word	0x58025458
 8003abc:	5802546c 	.word	0x5802546c
 8003ac0:	58025480 	.word	0x58025480
 8003ac4:	58025494 	.word	0x58025494
 8003ac8:	2300      	movs	r3, #0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d028      	beq.n	8003b20 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003adc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae8:	f003 031f 	and.w	r3, r3, #31
 8003aec:	2201      	movs	r2, #1
 8003aee:	409a      	lsls	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003afc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00c      	beq.n	8003b20 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b14:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b1e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop

08003b4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b58:	4b67      	ldr	r3, [pc, #412]	; (8003cf8 <HAL_DMA_IRQHandler+0x1ac>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a67      	ldr	r2, [pc, #412]	; (8003cfc <HAL_DMA_IRQHandler+0x1b0>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0a9b      	lsrs	r3, r3, #10
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b6a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b70:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a5f      	ldr	r2, [pc, #380]	; (8003d00 <HAL_DMA_IRQHandler+0x1b4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d04a      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a5d      	ldr	r2, [pc, #372]	; (8003d04 <HAL_DMA_IRQHandler+0x1b8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d045      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a5c      	ldr	r2, [pc, #368]	; (8003d08 <HAL_DMA_IRQHandler+0x1bc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d040      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a5a      	ldr	r2, [pc, #360]	; (8003d0c <HAL_DMA_IRQHandler+0x1c0>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d03b      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a59      	ldr	r2, [pc, #356]	; (8003d10 <HAL_DMA_IRQHandler+0x1c4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d036      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a57      	ldr	r2, [pc, #348]	; (8003d14 <HAL_DMA_IRQHandler+0x1c8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d031      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a56      	ldr	r2, [pc, #344]	; (8003d18 <HAL_DMA_IRQHandler+0x1cc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d02c      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a54      	ldr	r2, [pc, #336]	; (8003d1c <HAL_DMA_IRQHandler+0x1d0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d027      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a53      	ldr	r2, [pc, #332]	; (8003d20 <HAL_DMA_IRQHandler+0x1d4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d022      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a51      	ldr	r2, [pc, #324]	; (8003d24 <HAL_DMA_IRQHandler+0x1d8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d01d      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a50      	ldr	r2, [pc, #320]	; (8003d28 <HAL_DMA_IRQHandler+0x1dc>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d018      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a4e      	ldr	r2, [pc, #312]	; (8003d2c <HAL_DMA_IRQHandler+0x1e0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a4d      	ldr	r2, [pc, #308]	; (8003d30 <HAL_DMA_IRQHandler+0x1e4>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00e      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a4b      	ldr	r2, [pc, #300]	; (8003d34 <HAL_DMA_IRQHandler+0x1e8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d009      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a4a      	ldr	r2, [pc, #296]	; (8003d38 <HAL_DMA_IRQHandler+0x1ec>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d004      	beq.n	8003c1e <HAL_DMA_IRQHandler+0xd2>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a48      	ldr	r2, [pc, #288]	; (8003d3c <HAL_DMA_IRQHandler+0x1f0>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d101      	bne.n	8003c22 <HAL_DMA_IRQHandler+0xd6>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <HAL_DMA_IRQHandler+0xd8>
 8003c22:	2300      	movs	r3, #0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 842b 	beq.w	8004480 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2e:	f003 031f 	and.w	r3, r3, #31
 8003c32:	2208      	movs	r2, #8
 8003c34:	409a      	lsls	r2, r3
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80a2 	beq.w	8003d84 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a2e      	ldr	r2, [pc, #184]	; (8003d00 <HAL_DMA_IRQHandler+0x1b4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d04a      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a2d      	ldr	r2, [pc, #180]	; (8003d04 <HAL_DMA_IRQHandler+0x1b8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d045      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a2b      	ldr	r2, [pc, #172]	; (8003d08 <HAL_DMA_IRQHandler+0x1bc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d040      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a2a      	ldr	r2, [pc, #168]	; (8003d0c <HAL_DMA_IRQHandler+0x1c0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d03b      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a28      	ldr	r2, [pc, #160]	; (8003d10 <HAL_DMA_IRQHandler+0x1c4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d036      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a27      	ldr	r2, [pc, #156]	; (8003d14 <HAL_DMA_IRQHandler+0x1c8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d031      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a25      	ldr	r2, [pc, #148]	; (8003d18 <HAL_DMA_IRQHandler+0x1cc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d02c      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a24      	ldr	r2, [pc, #144]	; (8003d1c <HAL_DMA_IRQHandler+0x1d0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d027      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <HAL_DMA_IRQHandler+0x1d4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d022      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a21      	ldr	r2, [pc, #132]	; (8003d24 <HAL_DMA_IRQHandler+0x1d8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d01d      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1f      	ldr	r2, [pc, #124]	; (8003d28 <HAL_DMA_IRQHandler+0x1dc>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d018      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <HAL_DMA_IRQHandler+0x1e0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d013      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <HAL_DMA_IRQHandler+0x1e4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00e      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <HAL_DMA_IRQHandler+0x1e8>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d009      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a19      	ldr	r2, [pc, #100]	; (8003d38 <HAL_DMA_IRQHandler+0x1ec>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d004      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x194>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a18      	ldr	r2, [pc, #96]	; (8003d3c <HAL_DMA_IRQHandler+0x1f0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d12f      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x1f4>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf14      	ite	ne
 8003cee:	2301      	movne	r3, #1
 8003cf0:	2300      	moveq	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	e02e      	b.n	8003d54 <HAL_DMA_IRQHandler+0x208>
 8003cf6:	bf00      	nop
 8003cf8:	24000000 	.word	0x24000000
 8003cfc:	1b4e81b5 	.word	0x1b4e81b5
 8003d00:	40020010 	.word	0x40020010
 8003d04:	40020028 	.word	0x40020028
 8003d08:	40020040 	.word	0x40020040
 8003d0c:	40020058 	.word	0x40020058
 8003d10:	40020070 	.word	0x40020070
 8003d14:	40020088 	.word	0x40020088
 8003d18:	400200a0 	.word	0x400200a0
 8003d1c:	400200b8 	.word	0x400200b8
 8003d20:	40020410 	.word	0x40020410
 8003d24:	40020428 	.word	0x40020428
 8003d28:	40020440 	.word	0x40020440
 8003d2c:	40020458 	.word	0x40020458
 8003d30:	40020470 	.word	0x40020470
 8003d34:	40020488 	.word	0x40020488
 8003d38:	400204a0 	.word	0x400204a0
 8003d3c:	400204b8 	.word	0x400204b8
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bf14      	ite	ne
 8003d4e:	2301      	movne	r3, #1
 8003d50:	2300      	moveq	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d015      	beq.n	8003d84 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0204 	bic.w	r2, r2, #4
 8003d66:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	2208      	movs	r2, #8
 8003d72:	409a      	lsls	r2, r3
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d7c:	f043 0201 	orr.w	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d06e      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a69      	ldr	r2, [pc, #420]	; (8003f44 <HAL_DMA_IRQHandler+0x3f8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d04a      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a67      	ldr	r2, [pc, #412]	; (8003f48 <HAL_DMA_IRQHandler+0x3fc>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d045      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a66      	ldr	r2, [pc, #408]	; (8003f4c <HAL_DMA_IRQHandler+0x400>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d040      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a64      	ldr	r2, [pc, #400]	; (8003f50 <HAL_DMA_IRQHandler+0x404>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d03b      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a63      	ldr	r2, [pc, #396]	; (8003f54 <HAL_DMA_IRQHandler+0x408>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d036      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a61      	ldr	r2, [pc, #388]	; (8003f58 <HAL_DMA_IRQHandler+0x40c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d031      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a60      	ldr	r2, [pc, #384]	; (8003f5c <HAL_DMA_IRQHandler+0x410>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d02c      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a5e      	ldr	r2, [pc, #376]	; (8003f60 <HAL_DMA_IRQHandler+0x414>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d027      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a5d      	ldr	r2, [pc, #372]	; (8003f64 <HAL_DMA_IRQHandler+0x418>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d022      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a5b      	ldr	r2, [pc, #364]	; (8003f68 <HAL_DMA_IRQHandler+0x41c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d01d      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a5a      	ldr	r2, [pc, #360]	; (8003f6c <HAL_DMA_IRQHandler+0x420>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d018      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a58      	ldr	r2, [pc, #352]	; (8003f70 <HAL_DMA_IRQHandler+0x424>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a57      	ldr	r2, [pc, #348]	; (8003f74 <HAL_DMA_IRQHandler+0x428>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00e      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a55      	ldr	r2, [pc, #340]	; (8003f78 <HAL_DMA_IRQHandler+0x42c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a54      	ldr	r2, [pc, #336]	; (8003f7c <HAL_DMA_IRQHandler+0x430>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d004      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x2ee>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a52      	ldr	r2, [pc, #328]	; (8003f80 <HAL_DMA_IRQHandler+0x434>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d10a      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x304>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf14      	ite	ne
 8003e48:	2301      	movne	r3, #1
 8003e4a:	2300      	moveq	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	e003      	b.n	8003e58 <HAL_DMA_IRQHandler+0x30c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00d      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2201      	movs	r2, #1
 8003e66:	409a      	lsls	r2, r3
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	f043 0202 	orr.w	r2, r3, #2
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	2204      	movs	r2, #4
 8003e82:	409a      	lsls	r2, r3
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 808f 	beq.w	8003fac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a2c      	ldr	r2, [pc, #176]	; (8003f44 <HAL_DMA_IRQHandler+0x3f8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d04a      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a2a      	ldr	r2, [pc, #168]	; (8003f48 <HAL_DMA_IRQHandler+0x3fc>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d045      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a29      	ldr	r2, [pc, #164]	; (8003f4c <HAL_DMA_IRQHandler+0x400>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d040      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a27      	ldr	r2, [pc, #156]	; (8003f50 <HAL_DMA_IRQHandler+0x404>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d03b      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <HAL_DMA_IRQHandler+0x408>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d036      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a24      	ldr	r2, [pc, #144]	; (8003f58 <HAL_DMA_IRQHandler+0x40c>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d031      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a23      	ldr	r2, [pc, #140]	; (8003f5c <HAL_DMA_IRQHandler+0x410>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d02c      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a21      	ldr	r2, [pc, #132]	; (8003f60 <HAL_DMA_IRQHandler+0x414>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d027      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <HAL_DMA_IRQHandler+0x418>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d022      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1e      	ldr	r2, [pc, #120]	; (8003f68 <HAL_DMA_IRQHandler+0x41c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01d      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <HAL_DMA_IRQHandler+0x420>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d018      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1b      	ldr	r2, [pc, #108]	; (8003f70 <HAL_DMA_IRQHandler+0x424>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <HAL_DMA_IRQHandler+0x428>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00e      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <HAL_DMA_IRQHandler+0x42c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <HAL_DMA_IRQHandler+0x430>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x3e2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <HAL_DMA_IRQHandler+0x434>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d12a      	bne.n	8003f84 <HAL_DMA_IRQHandler+0x438>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf14      	ite	ne
 8003f3c:	2301      	movne	r3, #1
 8003f3e:	2300      	moveq	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e023      	b.n	8003f8c <HAL_DMA_IRQHandler+0x440>
 8003f44:	40020010 	.word	0x40020010
 8003f48:	40020028 	.word	0x40020028
 8003f4c:	40020040 	.word	0x40020040
 8003f50:	40020058 	.word	0x40020058
 8003f54:	40020070 	.word	0x40020070
 8003f58:	40020088 	.word	0x40020088
 8003f5c:	400200a0 	.word	0x400200a0
 8003f60:	400200b8 	.word	0x400200b8
 8003f64:	40020410 	.word	0x40020410
 8003f68:	40020428 	.word	0x40020428
 8003f6c:	40020440 	.word	0x40020440
 8003f70:	40020458 	.word	0x40020458
 8003f74:	40020470 	.word	0x40020470
 8003f78:	40020488 	.word	0x40020488
 8003f7c:	400204a0 	.word	0x400204a0
 8003f80:	400204b8 	.word	0x400204b8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00d      	beq.n	8003fac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f94:	f003 031f 	and.w	r3, r3, #31
 8003f98:	2204      	movs	r2, #4
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa4:	f043 0204 	orr.w	r2, r3, #4
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 80a6 	beq.w	800410e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a85      	ldr	r2, [pc, #532]	; (80041dc <HAL_DMA_IRQHandler+0x690>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d04a      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a83      	ldr	r2, [pc, #524]	; (80041e0 <HAL_DMA_IRQHandler+0x694>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d045      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a82      	ldr	r2, [pc, #520]	; (80041e4 <HAL_DMA_IRQHandler+0x698>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d040      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a80      	ldr	r2, [pc, #512]	; (80041e8 <HAL_DMA_IRQHandler+0x69c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d03b      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a7f      	ldr	r2, [pc, #508]	; (80041ec <HAL_DMA_IRQHandler+0x6a0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d036      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a7d      	ldr	r2, [pc, #500]	; (80041f0 <HAL_DMA_IRQHandler+0x6a4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d031      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a7c      	ldr	r2, [pc, #496]	; (80041f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d02c      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a7a      	ldr	r2, [pc, #488]	; (80041f8 <HAL_DMA_IRQHandler+0x6ac>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d027      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a79      	ldr	r2, [pc, #484]	; (80041fc <HAL_DMA_IRQHandler+0x6b0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d022      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a77      	ldr	r2, [pc, #476]	; (8004200 <HAL_DMA_IRQHandler+0x6b4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01d      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a76      	ldr	r2, [pc, #472]	; (8004204 <HAL_DMA_IRQHandler+0x6b8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d018      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a74      	ldr	r2, [pc, #464]	; (8004208 <HAL_DMA_IRQHandler+0x6bc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d013      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a73      	ldr	r2, [pc, #460]	; (800420c <HAL_DMA_IRQHandler+0x6c0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00e      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a71      	ldr	r2, [pc, #452]	; (8004210 <HAL_DMA_IRQHandler+0x6c4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d009      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a70      	ldr	r2, [pc, #448]	; (8004214 <HAL_DMA_IRQHandler+0x6c8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_DMA_IRQHandler+0x516>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a6e      	ldr	r2, [pc, #440]	; (8004218 <HAL_DMA_IRQHandler+0x6cc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10a      	bne.n	8004078 <HAL_DMA_IRQHandler+0x52c>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	bf14      	ite	ne
 8004070:	2301      	movne	r3, #1
 8004072:	2300      	moveq	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e009      	b.n	800408c <HAL_DMA_IRQHandler+0x540>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	bf14      	ite	ne
 8004086:	2301      	movne	r3, #1
 8004088:	2300      	moveq	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d03e      	beq.n	800410e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004094:	f003 031f 	and.w	r3, r3, #31
 8004098:	2210      	movs	r2, #16
 800409a:	409a      	lsls	r2, r3
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d018      	beq.n	80040e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d108      	bne.n	80040ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d024      	beq.n	800410e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	4798      	blx	r3
 80040cc:	e01f      	b.n	800410e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01b      	beq.n	800410e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	4798      	blx	r3
 80040de:	e016      	b.n	800410e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d107      	bne.n	80040fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0208 	bic.w	r2, r2, #8
 80040fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d003      	beq.n	800410e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	2220      	movs	r2, #32
 8004118:	409a      	lsls	r2, r3
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	4013      	ands	r3, r2
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8110 	beq.w	8004344 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <HAL_DMA_IRQHandler+0x690>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d04a      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a2b      	ldr	r2, [pc, #172]	; (80041e0 <HAL_DMA_IRQHandler+0x694>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d045      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a29      	ldr	r2, [pc, #164]	; (80041e4 <HAL_DMA_IRQHandler+0x698>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d040      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a28      	ldr	r2, [pc, #160]	; (80041e8 <HAL_DMA_IRQHandler+0x69c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d03b      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a26      	ldr	r2, [pc, #152]	; (80041ec <HAL_DMA_IRQHandler+0x6a0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d036      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a25      	ldr	r2, [pc, #148]	; (80041f0 <HAL_DMA_IRQHandler+0x6a4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d031      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a23      	ldr	r2, [pc, #140]	; (80041f4 <HAL_DMA_IRQHandler+0x6a8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d02c      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a22      	ldr	r2, [pc, #136]	; (80041f8 <HAL_DMA_IRQHandler+0x6ac>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d027      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a20      	ldr	r2, [pc, #128]	; (80041fc <HAL_DMA_IRQHandler+0x6b0>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d022      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a1f      	ldr	r2, [pc, #124]	; (8004200 <HAL_DMA_IRQHandler+0x6b4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d01d      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <HAL_DMA_IRQHandler+0x6b8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d018      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <HAL_DMA_IRQHandler+0x6bc>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d013      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1a      	ldr	r2, [pc, #104]	; (800420c <HAL_DMA_IRQHandler+0x6c0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00e      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a19      	ldr	r2, [pc, #100]	; (8004210 <HAL_DMA_IRQHandler+0x6c4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d009      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a17      	ldr	r2, [pc, #92]	; (8004214 <HAL_DMA_IRQHandler+0x6c8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d004      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x678>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a16      	ldr	r2, [pc, #88]	; (8004218 <HAL_DMA_IRQHandler+0x6cc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d12b      	bne.n	800421c <HAL_DMA_IRQHandler+0x6d0>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	e02a      	b.n	8004230 <HAL_DMA_IRQHandler+0x6e4>
 80041da:	bf00      	nop
 80041dc:	40020010 	.word	0x40020010
 80041e0:	40020028 	.word	0x40020028
 80041e4:	40020040 	.word	0x40020040
 80041e8:	40020058 	.word	0x40020058
 80041ec:	40020070 	.word	0x40020070
 80041f0:	40020088 	.word	0x40020088
 80041f4:	400200a0 	.word	0x400200a0
 80041f8:	400200b8 	.word	0x400200b8
 80041fc:	40020410 	.word	0x40020410
 8004200:	40020428 	.word	0x40020428
 8004204:	40020440 	.word	0x40020440
 8004208:	40020458 	.word	0x40020458
 800420c:	40020470 	.word	0x40020470
 8004210:	40020488 	.word	0x40020488
 8004214:	400204a0 	.word	0x400204a0
 8004218:	400204b8 	.word	0x400204b8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf14      	ite	ne
 800422a:	2301      	movne	r3, #1
 800422c:	2300      	moveq	r3, #0
 800422e:	b2db      	uxtb	r3, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8087 	beq.w	8004344 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	2220      	movs	r2, #32
 8004240:	409a      	lsls	r2, r3
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b04      	cmp	r3, #4
 8004250:	d139      	bne.n	80042c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0216 	bic.w	r2, r2, #22
 8004260:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004270:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d103      	bne.n	8004282 <HAL_DMA_IRQHandler+0x736>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0208 	bic.w	r2, r2, #8
 8004290:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	223f      	movs	r2, #63	; 0x3f
 800429c:	409a      	lsls	r2, r3
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 834a 	beq.w	8004950 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
          }
          return;
 80042c4:	e344      	b.n	8004950 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d018      	beq.n	8004306 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d108      	bne.n	80042f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d02c      	beq.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	4798      	blx	r3
 80042f2:	e027      	b.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d023      	beq.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4798      	blx	r3
 8004304:	e01e      	b.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10f      	bne.n	8004334 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0210 	bic.w	r2, r2, #16
 8004322:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004348:	2b00      	cmp	r3, #0
 800434a:	f000 8306 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8088 	beq.w	800446c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2204      	movs	r2, #4
 8004360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a7a      	ldr	r2, [pc, #488]	; (8004554 <HAL_DMA_IRQHandler+0xa08>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d04a      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a79      	ldr	r2, [pc, #484]	; (8004558 <HAL_DMA_IRQHandler+0xa0c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d045      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a77      	ldr	r2, [pc, #476]	; (800455c <HAL_DMA_IRQHandler+0xa10>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d040      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a76      	ldr	r2, [pc, #472]	; (8004560 <HAL_DMA_IRQHandler+0xa14>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d03b      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a74      	ldr	r2, [pc, #464]	; (8004564 <HAL_DMA_IRQHandler+0xa18>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d036      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a73      	ldr	r2, [pc, #460]	; (8004568 <HAL_DMA_IRQHandler+0xa1c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d031      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a71      	ldr	r2, [pc, #452]	; (800456c <HAL_DMA_IRQHandler+0xa20>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d02c      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a70      	ldr	r2, [pc, #448]	; (8004570 <HAL_DMA_IRQHandler+0xa24>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d027      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a6e      	ldr	r2, [pc, #440]	; (8004574 <HAL_DMA_IRQHandler+0xa28>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d022      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a6d      	ldr	r2, [pc, #436]	; (8004578 <HAL_DMA_IRQHandler+0xa2c>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d01d      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a6b      	ldr	r2, [pc, #428]	; (800457c <HAL_DMA_IRQHandler+0xa30>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d018      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a6a      	ldr	r2, [pc, #424]	; (8004580 <HAL_DMA_IRQHandler+0xa34>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a68      	ldr	r2, [pc, #416]	; (8004584 <HAL_DMA_IRQHandler+0xa38>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00e      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a67      	ldr	r2, [pc, #412]	; (8004588 <HAL_DMA_IRQHandler+0xa3c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d009      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a65      	ldr	r2, [pc, #404]	; (800458c <HAL_DMA_IRQHandler+0xa40>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_DMA_IRQHandler+0x8b8>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a64      	ldr	r2, [pc, #400]	; (8004590 <HAL_DMA_IRQHandler+0xa44>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d108      	bne.n	8004416 <HAL_DMA_IRQHandler+0x8ca>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	e007      	b.n	8004426 <HAL_DMA_IRQHandler+0x8da>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3301      	adds	r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442e:	429a      	cmp	r2, r3
 8004430:	d307      	bcc.n	8004442 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f2      	bne.n	8004426 <HAL_DMA_IRQHandler+0x8da>
 8004440:	e000      	b.n	8004444 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004442:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0301 	and.w	r3, r3, #1
 800444e:	2b00      	cmp	r3, #0
 8004450:	d004      	beq.n	800445c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2203      	movs	r2, #3
 8004456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800445a:	e003      	b.n	8004464 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8272 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3
 800447e:	e26c      	b.n	800495a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a43      	ldr	r2, [pc, #268]	; (8004594 <HAL_DMA_IRQHandler+0xa48>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d022      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a42      	ldr	r2, [pc, #264]	; (8004598 <HAL_DMA_IRQHandler+0xa4c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d01d      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a40      	ldr	r2, [pc, #256]	; (800459c <HAL_DMA_IRQHandler+0xa50>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a3f      	ldr	r2, [pc, #252]	; (80045a0 <HAL_DMA_IRQHandler+0xa54>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a3d      	ldr	r2, [pc, #244]	; (80045a4 <HAL_DMA_IRQHandler+0xa58>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a3c      	ldr	r2, [pc, #240]	; (80045a8 <HAL_DMA_IRQHandler+0xa5c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a3a      	ldr	r2, [pc, #232]	; (80045ac <HAL_DMA_IRQHandler+0xa60>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_DMA_IRQHandler+0x984>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a39      	ldr	r2, [pc, #228]	; (80045b0 <HAL_DMA_IRQHandler+0xa64>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d101      	bne.n	80044d4 <HAL_DMA_IRQHandler+0x988>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <HAL_DMA_IRQHandler+0x98a>
 80044d4:	2300      	movs	r3, #0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 823f 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	2204      	movs	r2, #4
 80044ee:	409a      	lsls	r2, r3
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	4013      	ands	r3, r2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80cd 	beq.w	8004694 <HAL_DMA_IRQHandler+0xb48>
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	f000 80c7 	beq.w	8004694 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	2204      	movs	r2, #4
 8004510:	409a      	lsls	r2, r3
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d049      	beq.n	80045b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d109      	bne.n	800453e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 8210 	beq.w	8004954 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800453c:	e20a      	b.n	8004954 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8206 	beq.w	8004954 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004550:	e200      	b.n	8004954 <HAL_DMA_IRQHandler+0xe08>
 8004552:	bf00      	nop
 8004554:	40020010 	.word	0x40020010
 8004558:	40020028 	.word	0x40020028
 800455c:	40020040 	.word	0x40020040
 8004560:	40020058 	.word	0x40020058
 8004564:	40020070 	.word	0x40020070
 8004568:	40020088 	.word	0x40020088
 800456c:	400200a0 	.word	0x400200a0
 8004570:	400200b8 	.word	0x400200b8
 8004574:	40020410 	.word	0x40020410
 8004578:	40020428 	.word	0x40020428
 800457c:	40020440 	.word	0x40020440
 8004580:	40020458 	.word	0x40020458
 8004584:	40020470 	.word	0x40020470
 8004588:	40020488 	.word	0x40020488
 800458c:	400204a0 	.word	0x400204a0
 8004590:	400204b8 	.word	0x400204b8
 8004594:	58025408 	.word	0x58025408
 8004598:	5802541c 	.word	0x5802541c
 800459c:	58025430 	.word	0x58025430
 80045a0:	58025444 	.word	0x58025444
 80045a4:	58025458 	.word	0x58025458
 80045a8:	5802546c 	.word	0x5802546c
 80045ac:	58025480 	.word	0x58025480
 80045b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f003 0320 	and.w	r3, r3, #32
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d160      	bne.n	8004680 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a7f      	ldr	r2, [pc, #508]	; (80047c0 <HAL_DMA_IRQHandler+0xc74>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d04a      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a7d      	ldr	r2, [pc, #500]	; (80047c4 <HAL_DMA_IRQHandler+0xc78>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d045      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a7c      	ldr	r2, [pc, #496]	; (80047c8 <HAL_DMA_IRQHandler+0xc7c>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d040      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a7a      	ldr	r2, [pc, #488]	; (80047cc <HAL_DMA_IRQHandler+0xc80>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d03b      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a79      	ldr	r2, [pc, #484]	; (80047d0 <HAL_DMA_IRQHandler+0xc84>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d036      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a77      	ldr	r2, [pc, #476]	; (80047d4 <HAL_DMA_IRQHandler+0xc88>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d031      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a76      	ldr	r2, [pc, #472]	; (80047d8 <HAL_DMA_IRQHandler+0xc8c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d02c      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a74      	ldr	r2, [pc, #464]	; (80047dc <HAL_DMA_IRQHandler+0xc90>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d027      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a73      	ldr	r2, [pc, #460]	; (80047e0 <HAL_DMA_IRQHandler+0xc94>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d022      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a71      	ldr	r2, [pc, #452]	; (80047e4 <HAL_DMA_IRQHandler+0xc98>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d01d      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a70      	ldr	r2, [pc, #448]	; (80047e8 <HAL_DMA_IRQHandler+0xc9c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d018      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a6e      	ldr	r2, [pc, #440]	; (80047ec <HAL_DMA_IRQHandler+0xca0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d013      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a6d      	ldr	r2, [pc, #436]	; (80047f0 <HAL_DMA_IRQHandler+0xca4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00e      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a6b      	ldr	r2, [pc, #428]	; (80047f4 <HAL_DMA_IRQHandler+0xca8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a6a      	ldr	r2, [pc, #424]	; (80047f8 <HAL_DMA_IRQHandler+0xcac>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d004      	beq.n	800465e <HAL_DMA_IRQHandler+0xb12>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a68      	ldr	r2, [pc, #416]	; (80047fc <HAL_DMA_IRQHandler+0xcb0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d108      	bne.n	8004670 <HAL_DMA_IRQHandler+0xb24>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0208 	bic.w	r2, r2, #8
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e007      	b.n	8004680 <HAL_DMA_IRQHandler+0xb34>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0204 	bic.w	r2, r2, #4
 800467e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 8165 	beq.w	8004954 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004692:	e15f      	b.n	8004954 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004698:	f003 031f 	and.w	r3, r3, #31
 800469c:	2202      	movs	r2, #2
 800469e:	409a      	lsls	r2, r3
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 80c5 	beq.w	8004834 <HAL_DMA_IRQHandler+0xce8>
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 80bf 	beq.w	8004834 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ba:	f003 031f 	and.w	r3, r3, #31
 80046be:	2202      	movs	r2, #2
 80046c0:	409a      	lsls	r2, r3
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d018      	beq.n	8004702 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 813a 	beq.w	8004958 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ec:	e134      	b.n	8004958 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8130 	beq.w	8004958 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004700:	e12a      	b.n	8004958 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f003 0320 	and.w	r3, r3, #32
 8004708:	2b00      	cmp	r3, #0
 800470a:	f040 8089 	bne.w	8004820 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a2b      	ldr	r2, [pc, #172]	; (80047c0 <HAL_DMA_IRQHandler+0xc74>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d04a      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a29      	ldr	r2, [pc, #164]	; (80047c4 <HAL_DMA_IRQHandler+0xc78>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d045      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a28      	ldr	r2, [pc, #160]	; (80047c8 <HAL_DMA_IRQHandler+0xc7c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d040      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a26      	ldr	r2, [pc, #152]	; (80047cc <HAL_DMA_IRQHandler+0xc80>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d03b      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a25      	ldr	r2, [pc, #148]	; (80047d0 <HAL_DMA_IRQHandler+0xc84>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d036      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a23      	ldr	r2, [pc, #140]	; (80047d4 <HAL_DMA_IRQHandler+0xc88>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d031      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a22      	ldr	r2, [pc, #136]	; (80047d8 <HAL_DMA_IRQHandler+0xc8c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d02c      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a20      	ldr	r2, [pc, #128]	; (80047dc <HAL_DMA_IRQHandler+0xc90>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d027      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a1f      	ldr	r2, [pc, #124]	; (80047e0 <HAL_DMA_IRQHandler+0xc94>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d022      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <HAL_DMA_IRQHandler+0xc98>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d01d      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1c      	ldr	r2, [pc, #112]	; (80047e8 <HAL_DMA_IRQHandler+0xc9c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d018      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1a      	ldr	r2, [pc, #104]	; (80047ec <HAL_DMA_IRQHandler+0xca0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d013      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a19      	ldr	r2, [pc, #100]	; (80047f0 <HAL_DMA_IRQHandler+0xca4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00e      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a17      	ldr	r2, [pc, #92]	; (80047f4 <HAL_DMA_IRQHandler+0xca8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d009      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <HAL_DMA_IRQHandler+0xcac>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d004      	beq.n	80047ae <HAL_DMA_IRQHandler+0xc62>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a14      	ldr	r2, [pc, #80]	; (80047fc <HAL_DMA_IRQHandler+0xcb0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d128      	bne.n	8004800 <HAL_DMA_IRQHandler+0xcb4>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0214 	bic.w	r2, r2, #20
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	e027      	b.n	8004810 <HAL_DMA_IRQHandler+0xcc4>
 80047c0:	40020010 	.word	0x40020010
 80047c4:	40020028 	.word	0x40020028
 80047c8:	40020040 	.word	0x40020040
 80047cc:	40020058 	.word	0x40020058
 80047d0:	40020070 	.word	0x40020070
 80047d4:	40020088 	.word	0x40020088
 80047d8:	400200a0 	.word	0x400200a0
 80047dc:	400200b8 	.word	0x400200b8
 80047e0:	40020410 	.word	0x40020410
 80047e4:	40020428 	.word	0x40020428
 80047e8:	40020440 	.word	0x40020440
 80047ec:	40020458 	.word	0x40020458
 80047f0:	40020470 	.word	0x40020470
 80047f4:	40020488 	.word	0x40020488
 80047f8:	400204a0 	.word	0x400204a0
 80047fc:	400204b8 	.word	0x400204b8
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 020a 	bic.w	r2, r2, #10
 800480e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8097 	beq.w	8004958 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004832:	e091      	b.n	8004958 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2208      	movs	r2, #8
 800483e:	409a      	lsls	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 8088 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8082 	beq.w	800495a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a41      	ldr	r2, [pc, #260]	; (8004960 <HAL_DMA_IRQHandler+0xe14>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d04a      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a3f      	ldr	r2, [pc, #252]	; (8004964 <HAL_DMA_IRQHandler+0xe18>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d045      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a3e      	ldr	r2, [pc, #248]	; (8004968 <HAL_DMA_IRQHandler+0xe1c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d040      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a3c      	ldr	r2, [pc, #240]	; (800496c <HAL_DMA_IRQHandler+0xe20>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d03b      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a3b      	ldr	r2, [pc, #236]	; (8004970 <HAL_DMA_IRQHandler+0xe24>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d036      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a39      	ldr	r2, [pc, #228]	; (8004974 <HAL_DMA_IRQHandler+0xe28>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d031      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a38      	ldr	r2, [pc, #224]	; (8004978 <HAL_DMA_IRQHandler+0xe2c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d02c      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a36      	ldr	r2, [pc, #216]	; (800497c <HAL_DMA_IRQHandler+0xe30>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d027      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a35      	ldr	r2, [pc, #212]	; (8004980 <HAL_DMA_IRQHandler+0xe34>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d022      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a33      	ldr	r2, [pc, #204]	; (8004984 <HAL_DMA_IRQHandler+0xe38>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d01d      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a32      	ldr	r2, [pc, #200]	; (8004988 <HAL_DMA_IRQHandler+0xe3c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d018      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a30      	ldr	r2, [pc, #192]	; (800498c <HAL_DMA_IRQHandler+0xe40>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a2f      	ldr	r2, [pc, #188]	; (8004990 <HAL_DMA_IRQHandler+0xe44>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00e      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a2d      	ldr	r2, [pc, #180]	; (8004994 <HAL_DMA_IRQHandler+0xe48>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d009      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2c      	ldr	r2, [pc, #176]	; (8004998 <HAL_DMA_IRQHandler+0xe4c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <HAL_DMA_IRQHandler+0xdaa>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a2a      	ldr	r2, [pc, #168]	; (800499c <HAL_DMA_IRQHandler+0xe50>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d108      	bne.n	8004908 <HAL_DMA_IRQHandler+0xdbc>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f022 021c 	bic.w	r2, r2, #28
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	e007      	b.n	8004918 <HAL_DMA_IRQHandler+0xdcc>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 020e 	bic.w	r2, r2, #14
 8004916:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491c:	f003 031f 	and.w	r3, r3, #31
 8004920:	2201      	movs	r2, #1
 8004922:	409a      	lsls	r2, r3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004942:	2b00      	cmp	r3, #0
 8004944:	d009      	beq.n	800495a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	4798      	blx	r3
 800494e:	e004      	b.n	800495a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004950:	bf00      	nop
 8004952:	e002      	b.n	800495a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004954:	bf00      	nop
 8004956:	e000      	b.n	800495a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004958:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800495a:	3728      	adds	r7, #40	; 0x28
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	40020010 	.word	0x40020010
 8004964:	40020028 	.word	0x40020028
 8004968:	40020040 	.word	0x40020040
 800496c:	40020058 	.word	0x40020058
 8004970:	40020070 	.word	0x40020070
 8004974:	40020088 	.word	0x40020088
 8004978:	400200a0 	.word	0x400200a0
 800497c:	400200b8 	.word	0x400200b8
 8004980:	40020410 	.word	0x40020410
 8004984:	40020428 	.word	0x40020428
 8004988:	40020440 	.word	0x40020440
 800498c:	40020458 	.word	0x40020458
 8004990:	40020470 	.word	0x40020470
 8004994:	40020488 	.word	0x40020488
 8004998:	400204a0 	.word	0x400204a0
 800499c:	400204b8 	.word	0x400204b8

080049a0 <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80049a0:	b480      	push	{r7}
 80049a2:	b087      	sub	sp, #28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	460b      	mov	r3, r1
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e045      	b.n	8004a48 <HAL_DMA_RegisterCallback+0xa8>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_DMA_RegisterCallback+0x2a>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e03e      	b.n	8004a48 <HAL_DMA_RegisterCallback+0xa8>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d12d      	bne.n	8004a3a <HAL_DMA_RegisterCallback+0x9a>
  {
    switch (CallbackID)
 80049de:	7afb      	ldrb	r3, [r7, #11]
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d827      	bhi.n	8004a34 <HAL_DMA_RegisterCallback+0x94>
 80049e4:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <HAL_DMA_RegisterCallback+0x4c>)
 80049e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ea:	bf00      	nop
 80049ec:	08004a05 	.word	0x08004a05
 80049f0:	08004a0d 	.word	0x08004a0d
 80049f4:	08004a15 	.word	0x08004a15
 80049f8:	08004a1d 	.word	0x08004a1d
 80049fc:	08004a25 	.word	0x08004a25
 8004a00:	08004a2d 	.word	0x08004a2d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8004a0a:	e018      	b.n	8004a3e <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004a12:	e014      	b.n	8004a3e <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8004a1a:	e010      	b.n	8004a3e <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8004a22:	e00c      	b.n	8004a3e <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8004a2a:	e008      	b.n	8004a3e <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004a32:	e004      	b.n	8004a3e <HAL_DMA_RegisterCallback+0x9e>

    default:
      status =  HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	75fb      	strb	r3, [r7, #23]
      break;
 8004a38:	e001      	b.n	8004a3e <HAL_DMA_RegisterCallback+0x9e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	371c      	adds	r7, #28
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
 8004a78:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a84:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a7f      	ldr	r2, [pc, #508]	; (8004c88 <DMA_SetConfig+0x21c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d072      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a7d      	ldr	r2, [pc, #500]	; (8004c8c <DMA_SetConfig+0x220>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d06d      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a7c      	ldr	r2, [pc, #496]	; (8004c90 <DMA_SetConfig+0x224>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d068      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a7a      	ldr	r2, [pc, #488]	; (8004c94 <DMA_SetConfig+0x228>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d063      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a79      	ldr	r2, [pc, #484]	; (8004c98 <DMA_SetConfig+0x22c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d05e      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a77      	ldr	r2, [pc, #476]	; (8004c9c <DMA_SetConfig+0x230>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d059      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a76      	ldr	r2, [pc, #472]	; (8004ca0 <DMA_SetConfig+0x234>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d054      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a74      	ldr	r2, [pc, #464]	; (8004ca4 <DMA_SetConfig+0x238>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d04f      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a73      	ldr	r2, [pc, #460]	; (8004ca8 <DMA_SetConfig+0x23c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d04a      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a71      	ldr	r2, [pc, #452]	; (8004cac <DMA_SetConfig+0x240>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d045      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a70      	ldr	r2, [pc, #448]	; (8004cb0 <DMA_SetConfig+0x244>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d040      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a6e      	ldr	r2, [pc, #440]	; (8004cb4 <DMA_SetConfig+0x248>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d03b      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a6d      	ldr	r2, [pc, #436]	; (8004cb8 <DMA_SetConfig+0x24c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d036      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a6b      	ldr	r2, [pc, #428]	; (8004cbc <DMA_SetConfig+0x250>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d031      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a6a      	ldr	r2, [pc, #424]	; (8004cc0 <DMA_SetConfig+0x254>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d02c      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a68      	ldr	r2, [pc, #416]	; (8004cc4 <DMA_SetConfig+0x258>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d027      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a67      	ldr	r2, [pc, #412]	; (8004cc8 <DMA_SetConfig+0x25c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d022      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a65      	ldr	r2, [pc, #404]	; (8004ccc <DMA_SetConfig+0x260>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01d      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a64      	ldr	r2, [pc, #400]	; (8004cd0 <DMA_SetConfig+0x264>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d018      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a62      	ldr	r2, [pc, #392]	; (8004cd4 <DMA_SetConfig+0x268>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a61      	ldr	r2, [pc, #388]	; (8004cd8 <DMA_SetConfig+0x26c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00e      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a5f      	ldr	r2, [pc, #380]	; (8004cdc <DMA_SetConfig+0x270>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d009      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a5e      	ldr	r2, [pc, #376]	; (8004ce0 <DMA_SetConfig+0x274>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <DMA_SetConfig+0x10a>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a5c      	ldr	r2, [pc, #368]	; (8004ce4 <DMA_SetConfig+0x278>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d101      	bne.n	8004b7a <DMA_SetConfig+0x10e>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <DMA_SetConfig+0x110>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00d      	beq.n	8004b9c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004b88:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d004      	beq.n	8004b9c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b9a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a39      	ldr	r2, [pc, #228]	; (8004c88 <DMA_SetConfig+0x21c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d04a      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a38      	ldr	r2, [pc, #224]	; (8004c8c <DMA_SetConfig+0x220>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d045      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a36      	ldr	r2, [pc, #216]	; (8004c90 <DMA_SetConfig+0x224>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d040      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a35      	ldr	r2, [pc, #212]	; (8004c94 <DMA_SetConfig+0x228>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d03b      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a33      	ldr	r2, [pc, #204]	; (8004c98 <DMA_SetConfig+0x22c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d036      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a32      	ldr	r2, [pc, #200]	; (8004c9c <DMA_SetConfig+0x230>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d031      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a30      	ldr	r2, [pc, #192]	; (8004ca0 <DMA_SetConfig+0x234>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d02c      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2f      	ldr	r2, [pc, #188]	; (8004ca4 <DMA_SetConfig+0x238>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d027      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a2d      	ldr	r2, [pc, #180]	; (8004ca8 <DMA_SetConfig+0x23c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d022      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a2c      	ldr	r2, [pc, #176]	; (8004cac <DMA_SetConfig+0x240>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d01d      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a2a      	ldr	r2, [pc, #168]	; (8004cb0 <DMA_SetConfig+0x244>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d018      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a29      	ldr	r2, [pc, #164]	; (8004cb4 <DMA_SetConfig+0x248>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d013      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a27      	ldr	r2, [pc, #156]	; (8004cb8 <DMA_SetConfig+0x24c>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00e      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a26      	ldr	r2, [pc, #152]	; (8004cbc <DMA_SetConfig+0x250>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d009      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a24      	ldr	r2, [pc, #144]	; (8004cc0 <DMA_SetConfig+0x254>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d004      	beq.n	8004c3c <DMA_SetConfig+0x1d0>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a23      	ldr	r2, [pc, #140]	; (8004cc4 <DMA_SetConfig+0x258>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d101      	bne.n	8004c40 <DMA_SetConfig+0x1d4>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e000      	b.n	8004c42 <DMA_SetConfig+0x1d6>
 8004c40:	2300      	movs	r3, #0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d059      	beq.n	8004cfa <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	223f      	movs	r2, #63	; 0x3f
 8004c50:	409a      	lsls	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c64:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d138      	bne.n	8004ce8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c86:	e086      	b.n	8004d96 <DMA_SetConfig+0x32a>
 8004c88:	40020010 	.word	0x40020010
 8004c8c:	40020028 	.word	0x40020028
 8004c90:	40020040 	.word	0x40020040
 8004c94:	40020058 	.word	0x40020058
 8004c98:	40020070 	.word	0x40020070
 8004c9c:	40020088 	.word	0x40020088
 8004ca0:	400200a0 	.word	0x400200a0
 8004ca4:	400200b8 	.word	0x400200b8
 8004ca8:	40020410 	.word	0x40020410
 8004cac:	40020428 	.word	0x40020428
 8004cb0:	40020440 	.word	0x40020440
 8004cb4:	40020458 	.word	0x40020458
 8004cb8:	40020470 	.word	0x40020470
 8004cbc:	40020488 	.word	0x40020488
 8004cc0:	400204a0 	.word	0x400204a0
 8004cc4:	400204b8 	.word	0x400204b8
 8004cc8:	58025408 	.word	0x58025408
 8004ccc:	5802541c 	.word	0x5802541c
 8004cd0:	58025430 	.word	0x58025430
 8004cd4:	58025444 	.word	0x58025444
 8004cd8:	58025458 	.word	0x58025458
 8004cdc:	5802546c 	.word	0x5802546c
 8004ce0:	58025480 	.word	0x58025480
 8004ce4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	60da      	str	r2, [r3, #12]
}
 8004cf8:	e04d      	b.n	8004d96 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a29      	ldr	r2, [pc, #164]	; (8004da4 <DMA_SetConfig+0x338>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d022      	beq.n	8004d4a <DMA_SetConfig+0x2de>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a27      	ldr	r2, [pc, #156]	; (8004da8 <DMA_SetConfig+0x33c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d01d      	beq.n	8004d4a <DMA_SetConfig+0x2de>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a26      	ldr	r2, [pc, #152]	; (8004dac <DMA_SetConfig+0x340>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d018      	beq.n	8004d4a <DMA_SetConfig+0x2de>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a24      	ldr	r2, [pc, #144]	; (8004db0 <DMA_SetConfig+0x344>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d013      	beq.n	8004d4a <DMA_SetConfig+0x2de>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a23      	ldr	r2, [pc, #140]	; (8004db4 <DMA_SetConfig+0x348>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d00e      	beq.n	8004d4a <DMA_SetConfig+0x2de>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a21      	ldr	r2, [pc, #132]	; (8004db8 <DMA_SetConfig+0x34c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d009      	beq.n	8004d4a <DMA_SetConfig+0x2de>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a20      	ldr	r2, [pc, #128]	; (8004dbc <DMA_SetConfig+0x350>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d004      	beq.n	8004d4a <DMA_SetConfig+0x2de>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1e      	ldr	r2, [pc, #120]	; (8004dc0 <DMA_SetConfig+0x354>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d101      	bne.n	8004d4e <DMA_SetConfig+0x2e2>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e000      	b.n	8004d50 <DMA_SetConfig+0x2e4>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d020      	beq.n	8004d96 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d58:	f003 031f 	and.w	r3, r3, #31
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b40      	cmp	r3, #64	; 0x40
 8004d72:	d108      	bne.n	8004d86 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	60da      	str	r2, [r3, #12]
}
 8004d84:	e007      	b.n	8004d96 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	60da      	str	r2, [r3, #12]
}
 8004d96:	bf00      	nop
 8004d98:	371c      	adds	r7, #28
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	58025408 	.word	0x58025408
 8004da8:	5802541c 	.word	0x5802541c
 8004dac:	58025430 	.word	0x58025430
 8004db0:	58025444 	.word	0x58025444
 8004db4:	58025458 	.word	0x58025458
 8004db8:	5802546c 	.word	0x5802546c
 8004dbc:	58025480 	.word	0x58025480
 8004dc0:	58025494 	.word	0x58025494

08004dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a42      	ldr	r2, [pc, #264]	; (8004edc <DMA_CalcBaseAndBitshift+0x118>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d04a      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a41      	ldr	r2, [pc, #260]	; (8004ee0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d045      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a3f      	ldr	r2, [pc, #252]	; (8004ee4 <DMA_CalcBaseAndBitshift+0x120>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d040      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a3e      	ldr	r2, [pc, #248]	; (8004ee8 <DMA_CalcBaseAndBitshift+0x124>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d03b      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a3c      	ldr	r2, [pc, #240]	; (8004eec <DMA_CalcBaseAndBitshift+0x128>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d036      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a3b      	ldr	r2, [pc, #236]	; (8004ef0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d031      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a39      	ldr	r2, [pc, #228]	; (8004ef4 <DMA_CalcBaseAndBitshift+0x130>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d02c      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a38      	ldr	r2, [pc, #224]	; (8004ef8 <DMA_CalcBaseAndBitshift+0x134>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d027      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a36      	ldr	r2, [pc, #216]	; (8004efc <DMA_CalcBaseAndBitshift+0x138>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d022      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a35      	ldr	r2, [pc, #212]	; (8004f00 <DMA_CalcBaseAndBitshift+0x13c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d01d      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a33      	ldr	r2, [pc, #204]	; (8004f04 <DMA_CalcBaseAndBitshift+0x140>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d018      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a32      	ldr	r2, [pc, #200]	; (8004f08 <DMA_CalcBaseAndBitshift+0x144>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d013      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a30      	ldr	r2, [pc, #192]	; (8004f0c <DMA_CalcBaseAndBitshift+0x148>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00e      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a2f      	ldr	r2, [pc, #188]	; (8004f10 <DMA_CalcBaseAndBitshift+0x14c>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d009      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a2d      	ldr	r2, [pc, #180]	; (8004f14 <DMA_CalcBaseAndBitshift+0x150>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d004      	beq.n	8004e6c <DMA_CalcBaseAndBitshift+0xa8>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a2c      	ldr	r2, [pc, #176]	; (8004f18 <DMA_CalcBaseAndBitshift+0x154>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d101      	bne.n	8004e70 <DMA_CalcBaseAndBitshift+0xac>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <DMA_CalcBaseAndBitshift+0xae>
 8004e70:	2300      	movs	r3, #0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d024      	beq.n	8004ec0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	3b10      	subs	r3, #16
 8004e7e:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <DMA_CalcBaseAndBitshift+0x158>)
 8004e80:	fba2 2303 	umull	r2, r3, r2, r3
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	4a24      	ldr	r2, [pc, #144]	; (8004f20 <DMA_CalcBaseAndBitshift+0x15c>)
 8004e90:	5cd3      	ldrb	r3, [r2, r3]
 8004e92:	461a      	mov	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d908      	bls.n	8004eb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	4b1f      	ldr	r3, [pc, #124]	; (8004f24 <DMA_CalcBaseAndBitshift+0x160>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	1d1a      	adds	r2, r3, #4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	659a      	str	r2, [r3, #88]	; 0x58
 8004eae:	e00d      	b.n	8004ecc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4b1b      	ldr	r3, [pc, #108]	; (8004f24 <DMA_CalcBaseAndBitshift+0x160>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ebe:	e005      	b.n	8004ecc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3714      	adds	r7, #20
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	40020010 	.word	0x40020010
 8004ee0:	40020028 	.word	0x40020028
 8004ee4:	40020040 	.word	0x40020040
 8004ee8:	40020058 	.word	0x40020058
 8004eec:	40020070 	.word	0x40020070
 8004ef0:	40020088 	.word	0x40020088
 8004ef4:	400200a0 	.word	0x400200a0
 8004ef8:	400200b8 	.word	0x400200b8
 8004efc:	40020410 	.word	0x40020410
 8004f00:	40020428 	.word	0x40020428
 8004f04:	40020440 	.word	0x40020440
 8004f08:	40020458 	.word	0x40020458
 8004f0c:	40020470 	.word	0x40020470
 8004f10:	40020488 	.word	0x40020488
 8004f14:	400204a0 	.word	0x400204a0
 8004f18:	400204b8 	.word	0x400204b8
 8004f1c:	aaaaaaab 	.word	0xaaaaaaab
 8004f20:	080253a8 	.word	0x080253a8
 8004f24:	fffffc00 	.word	0xfffffc00

08004f28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d120      	bne.n	8004f7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d858      	bhi.n	8004ff6 <DMA_CheckFifoParam+0xce>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <DMA_CheckFifoParam+0x24>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f6f 	.word	0x08004f6f
 8004f54:	08004f5d 	.word	0x08004f5d
 8004f58:	08004ff7 	.word	0x08004ff7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d048      	beq.n	8004ffa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f6c:	e045      	b.n	8004ffa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f76:	d142      	bne.n	8004ffe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f7c:	e03f      	b.n	8004ffe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f86:	d123      	bne.n	8004fd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d838      	bhi.n	8005002 <DMA_CheckFifoParam+0xda>
 8004f90:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <DMA_CheckFifoParam+0x70>)
 8004f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f96:	bf00      	nop
 8004f98:	08004fa9 	.word	0x08004fa9
 8004f9c:	08004faf 	.word	0x08004faf
 8004fa0:	08004fa9 	.word	0x08004fa9
 8004fa4:	08004fc1 	.word	0x08004fc1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
        break;
 8004fac:	e030      	b.n	8005010 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d025      	beq.n	8005006 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fbe:	e022      	b.n	8005006 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fc8:	d11f      	bne.n	800500a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fce:	e01c      	b.n	800500a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d902      	bls.n	8004fde <DMA_CheckFifoParam+0xb6>
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	d003      	beq.n	8004fe4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004fdc:	e018      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	73fb      	strb	r3, [r7, #15]
        break;
 8004fe2:	e015      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00e      	beq.n	800500e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8004ff4:	e00b      	b.n	800500e <DMA_CheckFifoParam+0xe6>
        break;
 8004ff6:	bf00      	nop
 8004ff8:	e00a      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
        break;
 8004ffa:	bf00      	nop
 8004ffc:	e008      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
        break;
 8004ffe:	bf00      	nop
 8005000:	e006      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
        break;
 8005002:	bf00      	nop
 8005004:	e004      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
        break;
 8005006:	bf00      	nop
 8005008:	e002      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
        break;
 800500a:	bf00      	nop
 800500c:	e000      	b.n	8005010 <DMA_CheckFifoParam+0xe8>
    break;
 800500e:	bf00      	nop
    }
  }

  return status;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop

08005020 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a38      	ldr	r2, [pc, #224]	; (8005114 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d022      	beq.n	800507e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a36      	ldr	r2, [pc, #216]	; (8005118 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d01d      	beq.n	800507e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a35      	ldr	r2, [pc, #212]	; (800511c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d018      	beq.n	800507e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a33      	ldr	r2, [pc, #204]	; (8005120 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d013      	beq.n	800507e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a32      	ldr	r2, [pc, #200]	; (8005124 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00e      	beq.n	800507e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a30      	ldr	r2, [pc, #192]	; (8005128 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d009      	beq.n	800507e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a2f      	ldr	r2, [pc, #188]	; (800512c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d004      	beq.n	800507e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2d      	ldr	r2, [pc, #180]	; (8005130 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d101      	bne.n	8005082 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005082:	2300      	movs	r3, #0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01a      	beq.n	80050be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	3b08      	subs	r3, #8
 8005090:	4a28      	ldr	r2, [pc, #160]	; (8005134 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	091b      	lsrs	r3, r3, #4
 8005098:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	4b26      	ldr	r3, [pc, #152]	; (8005138 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800509e:	4413      	add	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	461a      	mov	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a24      	ldr	r2, [pc, #144]	; (800513c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80050ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f003 031f 	and.w	r3, r3, #31
 80050b4:	2201      	movs	r2, #1
 80050b6:	409a      	lsls	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80050bc:	e024      	b.n	8005108 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	3b10      	subs	r3, #16
 80050c6:	4a1e      	ldr	r2, [pc, #120]	; (8005140 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d806      	bhi.n	80050e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d902      	bls.n	80050e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3308      	adds	r3, #8
 80050e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4b18      	ldr	r3, [pc, #96]	; (800514c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	461a      	mov	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a16      	ldr	r2, [pc, #88]	; (8005150 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80050f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	2201      	movs	r2, #1
 8005102:	409a      	lsls	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005108:	bf00      	nop
 800510a:	3714      	adds	r7, #20
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	58025408 	.word	0x58025408
 8005118:	5802541c 	.word	0x5802541c
 800511c:	58025430 	.word	0x58025430
 8005120:	58025444 	.word	0x58025444
 8005124:	58025458 	.word	0x58025458
 8005128:	5802546c 	.word	0x5802546c
 800512c:	58025480 	.word	0x58025480
 8005130:	58025494 	.word	0x58025494
 8005134:	cccccccd 	.word	0xcccccccd
 8005138:	16009600 	.word	0x16009600
 800513c:	58025880 	.word	0x58025880
 8005140:	aaaaaaab 	.word	0xaaaaaaab
 8005144:	400204b8 	.word	0x400204b8
 8005148:	4002040f 	.word	0x4002040f
 800514c:	10008200 	.word	0x10008200
 8005150:	40020880 	.word	0x40020880

08005154 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d04a      	beq.n	8005200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b08      	cmp	r3, #8
 800516e:	d847      	bhi.n	8005200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a25      	ldr	r2, [pc, #148]	; (800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d022      	beq.n	80051c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a24      	ldr	r2, [pc, #144]	; (8005210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d01d      	beq.n	80051c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a22      	ldr	r2, [pc, #136]	; (8005214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d018      	beq.n	80051c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a21      	ldr	r2, [pc, #132]	; (8005218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1f      	ldr	r2, [pc, #124]	; (800521c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d00e      	beq.n	80051c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d009      	beq.n	80051c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1c      	ldr	r2, [pc, #112]	; (8005224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d004      	beq.n	80051c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1b      	ldr	r2, [pc, #108]	; (8005228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d101      	bne.n	80051c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80051c0:	2301      	movs	r3, #1
 80051c2:	e000      	b.n	80051c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80051c4:	2300      	movs	r3, #0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4b17      	ldr	r3, [pc, #92]	; (800522c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	461a      	mov	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a15      	ldr	r2, [pc, #84]	; (8005230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80051dc:	671a      	str	r2, [r3, #112]	; 0x70
 80051de:	e009      	b.n	80051f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4b14      	ldr	r3, [pc, #80]	; (8005234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80051e4:	4413      	add	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	461a      	mov	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a11      	ldr	r2, [pc, #68]	; (8005238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80051f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	2201      	movs	r2, #1
 80051fa:	409a      	lsls	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	58025408 	.word	0x58025408
 8005210:	5802541c 	.word	0x5802541c
 8005214:	58025430 	.word	0x58025430
 8005218:	58025444 	.word	0x58025444
 800521c:	58025458 	.word	0x58025458
 8005220:	5802546c 	.word	0x5802546c
 8005224:	58025480 	.word	0x58025480
 8005228:	58025494 	.word	0x58025494
 800522c:	1600963f 	.word	0x1600963f
 8005230:	58025940 	.word	0x58025940
 8005234:	1000823f 	.word	0x1000823f
 8005238:	40020940 	.word	0x40020940

0800523c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b098      	sub	sp, #96	; 0x60
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005244:	4a84      	ldr	r2, [pc, #528]	; (8005458 <HAL_FDCAN_Init+0x21c>)
 8005246:	f107 030c 	add.w	r3, r7, #12
 800524a:	4611      	mov	r1, r2
 800524c:	224c      	movs	r2, #76	; 0x4c
 800524e:	4618      	mov	r0, r3
 8005250:	f01e f8b7 	bl	80233c2 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e1c6      	b.n	80055ec <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a7e      	ldr	r2, [pc, #504]	; (800545c <HAL_FDCAN_Init+0x220>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d106      	bne.n	8005276 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005270:	461a      	mov	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7fc f80c 	bl	80012a8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699a      	ldr	r2, [r3, #24]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0210 	bic.w	r2, r2, #16
 800529e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052a0:	f7fd f80e 	bl	80022c0 <HAL_GetTick>
 80052a4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80052a6:	e014      	b.n	80052d2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80052a8:	f7fd f80a 	bl	80022c0 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b0a      	cmp	r3, #10
 80052b4:	d90d      	bls.n	80052d2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052bc:	f043 0201 	orr.w	r2, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2203      	movs	r2, #3
 80052ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e18c      	b.n	80055ec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d0e3      	beq.n	80052a8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052f0:	f7fc ffe6 	bl	80022c0 <HAL_GetTick>
 80052f4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80052f6:	e014      	b.n	8005322 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80052f8:	f7fc ffe2 	bl	80022c0 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b0a      	cmp	r3, #10
 8005304:	d90d      	bls.n	8005322 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800530c:	f043 0201 	orr.w	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2203      	movs	r2, #3
 800531a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e164      	b.n	80055ec <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0e3      	beq.n	80052f8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699a      	ldr	r2, [r3, #24]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f042 0202 	orr.w	r2, r2, #2
 800533e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	7c1b      	ldrb	r3, [r3, #16]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d108      	bne.n	800535a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005356:	619a      	str	r2, [r3, #24]
 8005358:	e007      	b.n	800536a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	699a      	ldr	r2, [r3, #24]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005368:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	7c5b      	ldrb	r3, [r3, #17]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d108      	bne.n	8005384 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005380:	619a      	str	r2, [r3, #24]
 8005382:	e007      	b.n	8005394 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005392:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	7c9b      	ldrb	r3, [r3, #18]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d108      	bne.n	80053ae <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053aa:	619a      	str	r2, [r3, #24]
 80053ac:	e007      	b.n	80053be <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699a      	ldr	r2, [r3, #24]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053bc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80053e2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691a      	ldr	r2, [r3, #16]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 0210 	bic.w	r2, r2, #16
 80053f2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d108      	bne.n	800540e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0204 	orr.w	r2, r2, #4
 800540a:	619a      	str	r2, [r3, #24]
 800540c:	e030      	b.n	8005470 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d02c      	beq.n	8005470 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	2b02      	cmp	r3, #2
 800541c:	d020      	beq.n	8005460 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800542c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	691a      	ldr	r2, [r3, #16]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f042 0210 	orr.w	r2, r2, #16
 800543c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2b03      	cmp	r3, #3
 8005444:	d114      	bne.n	8005470 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699a      	ldr	r2, [r3, #24]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0220 	orr.w	r2, r2, #32
 8005454:	619a      	str	r2, [r3, #24]
 8005456:	e00b      	b.n	8005470 <HAL_FDCAN_Init+0x234>
 8005458:	08025030 	.word	0x08025030
 800545c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0220 	orr.w	r2, r2, #32
 800546e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	3b01      	subs	r3, #1
 8005476:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	3b01      	subs	r3, #1
 800547e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005480:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005488:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	3b01      	subs	r3, #1
 8005492:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005498:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800549a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054a4:	d115      	bne.n	80054d2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	3b01      	subs	r3, #1
 80054b2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80054b4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	3b01      	subs	r3, #1
 80054bc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80054be:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	3b01      	subs	r3, #1
 80054c8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80054ce:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80054d0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f8:	4413      	add	r3, r2
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d011      	beq.n	8005522 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005506:	f023 0107 	bic.w	r1, r3, #7
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	3360      	adds	r3, #96	; 0x60
 8005512:	443b      	add	r3, r7
 8005514:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	2b00      	cmp	r3, #0
 8005528:	d011      	beq.n	800554e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005532:	f023 0107 	bic.w	r1, r3, #7
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	3360      	adds	r3, #96	; 0x60
 800553e:	443b      	add	r3, r7
 8005540:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005552:	2b00      	cmp	r3, #0
 8005554:	d012      	beq.n	800557c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800555e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	3360      	adds	r3, #96	; 0x60
 800556a:	443b      	add	r3, r7
 800556c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005570:	011a      	lsls	r2, r3, #4
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005580:	2b00      	cmp	r3, #0
 8005582:	d012      	beq.n	80055aa <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800558c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	3360      	adds	r3, #96	; 0x60
 8005598:	443b      	add	r3, r7
 800559a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800559e:	021a      	lsls	r2, r3, #8
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a11      	ldr	r2, [pc, #68]	; (80055f4 <HAL_FDCAN_Init+0x3b8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d107      	bne.n	80055c4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f022 0203 	bic.w	r2, r2, #3
 80055c2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fb0d 	bl	8005bfc <FDCAN_CalcultateRamBlockAddresses>
 80055e2:	4603      	mov	r3, r0
 80055e4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80055e8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3760      	adds	r7, #96	; 0x60
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	4000a000 	.word	0x4000a000

080055f8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b096      	sub	sp, #88	; 0x58
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005600:	4b95      	ldr	r3, [pc, #596]	; (8005858 <HAL_FDCAN_IRQHandler+0x260>)
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	079b      	lsls	r3, r3, #30
 8005606:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005608:	4b93      	ldr	r3, [pc, #588]	; (8005858 <HAL_FDCAN_IRQHandler+0x260>)
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	079b      	lsls	r3, r3, #30
 800560e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005610:	4013      	ands	r3, r2
 8005612:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800561e:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005628:	4013      	ands	r3, r2
 800562a:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005640:	4013      	ands	r3, r2
 8005642:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800564e:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005656:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005658:	4013      	ands	r3, r2
 800565a:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005662:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8005666:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800566e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005670:	4013      	ands	r3, r2
 8005672:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800567a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 800567e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005688:	4013      	ands	r3, r2
 800568a:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800569c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00f      	beq.n	80056c6 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056b8:	651a      	str	r2, [r3, #80]	; 0x50
 80056ba:	4b67      	ldr	r3, [pc, #412]	; (8005858 <HAL_FDCAN_IRQHandler+0x260>)
 80056bc:	2200      	movs	r2, #0
 80056be:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fa4f 	bl	8005b64 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80056c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01c      	beq.n	800570a <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d017      	beq.n	800570a <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80056e2:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80056ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ee:	4013      	ands	r3, r2
 80056f0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056fa:	651a      	str	r2, [r3, #80]	; 0x50
 80056fc:	4b56      	ldr	r3, [pc, #344]	; (8005858 <HAL_FDCAN_IRQHandler+0x260>)
 80056fe:	2200      	movs	r2, #0
 8005700:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005702:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 fa04 	bl	8005b12 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800570a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00d      	beq.n	800572c <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005716:	4b51      	ldr	r3, [pc, #324]	; (800585c <HAL_FDCAN_IRQHandler+0x264>)
 8005718:	400b      	ands	r3, r1
 800571a:	6513      	str	r3, [r2, #80]	; 0x50
 800571c:	4a4e      	ldr	r2, [pc, #312]	; (8005858 <HAL_FDCAN_IRQHandler+0x260>)
 800571e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005720:	0f9b      	lsrs	r3, r3, #30
 8005722:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005724:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f9b2 	bl	8005a90 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800572c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00d      	beq.n	800574e <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005738:	4b48      	ldr	r3, [pc, #288]	; (800585c <HAL_FDCAN_IRQHandler+0x264>)
 800573a:	400b      	ands	r3, r1
 800573c:	6513      	str	r3, [r2, #80]	; 0x50
 800573e:	4a46      	ldr	r2, [pc, #280]	; (8005858 <HAL_FDCAN_IRQHandler+0x260>)
 8005740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005742:	0f9b      	lsrs	r3, r3, #30
 8005744:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005746:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f9ac 	bl	8005aa6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800574e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00d      	beq.n	8005770 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800575a:	4b40      	ldr	r3, [pc, #256]	; (800585c <HAL_FDCAN_IRQHandler+0x264>)
 800575c:	400b      	ands	r3, r1
 800575e:	6513      	str	r3, [r2, #80]	; 0x50
 8005760:	4a3d      	ldr	r2, [pc, #244]	; (8005858 <HAL_FDCAN_IRQHandler+0x260>)
 8005762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005764:	0f9b      	lsrs	r3, r3, #30
 8005766:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005768:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f9a6 	bl	8005abc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00d      	beq.n	8005792 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800577c:	4b37      	ldr	r3, [pc, #220]	; (800585c <HAL_FDCAN_IRQHandler+0x264>)
 800577e:	400b      	ands	r3, r1
 8005780:	6513      	str	r3, [r2, #80]	; 0x50
 8005782:	4a35      	ldr	r2, [pc, #212]	; (8005858 <HAL_FDCAN_IRQHandler+0x260>)
 8005784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005786:	0f9b      	lsrs	r3, r3, #30
 8005788:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800578a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f9a0 	bl	8005ad2 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00f      	beq.n	80057bc <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800579c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057ae:	651a      	str	r2, [r3, #80]	; 0x50
 80057b0:	4b29      	ldr	r3, [pc, #164]	; (8005858 <HAL_FDCAN_IRQHandler+0x260>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f996 	bl	8005ae8 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80057bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01c      	beq.n	8005800 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80057c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d017      	beq.n	8005800 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80057d8:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e4:	4013      	ands	r3, r2
 80057e6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f0:	651a      	str	r2, [r3, #80]	; 0x50
 80057f2:	4b19      	ldr	r3, [pc, #100]	; (8005858 <HAL_FDCAN_IRQHandler+0x260>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80057f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f97e 	bl	8005afc <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005802:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00f      	beq.n	800582a <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800581c:	651a      	str	r2, [r3, #80]	; 0x50
 800581e:	4b0e      	ldr	r3, [pc, #56]	; (8005858 <HAL_FDCAN_IRQHandler+0x260>)
 8005820:	2200      	movs	r2, #0
 8005822:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 f97f 	bl	8005b28 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800582a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800582c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d015      	beq.n	8005860 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d010      	beq.n	8005860 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005846:	651a      	str	r2, [r3, #80]	; 0x50
 8005848:	4b03      	ldr	r3, [pc, #12]	; (8005858 <HAL_FDCAN_IRQHandler+0x260>)
 800584a:	2200      	movs	r2, #0
 800584c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f974 	bl	8005b3c <HAL_FDCAN_TimestampWraparoundCallback>
 8005854:	e004      	b.n	8005860 <HAL_FDCAN_IRQHandler+0x268>
 8005856:	bf00      	nop
 8005858:	4000a800 	.word	0x4000a800
 800585c:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d00f      	beq.n	800588a <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00a      	beq.n	800588a <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800587c:	651a      	str	r2, [r3, #80]	; 0x50
 800587e:	4b81      	ldr	r3, [pc, #516]	; (8005a84 <HAL_FDCAN_IRQHandler+0x48c>)
 8005880:	2200      	movs	r2, #0
 8005882:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 f963 	bl	8005b50 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800588a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d014      	beq.n	80058be <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00f      	beq.n	80058be <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058a6:	651a      	str	r2, [r3, #80]	; 0x50
 80058a8:	4b76      	ldr	r3, [pc, #472]	; (8005a84 <HAL_FDCAN_IRQHandler+0x48c>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80058be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00d      	beq.n	80058e0 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058ca:	4b6f      	ldr	r3, [pc, #444]	; (8005a88 <HAL_FDCAN_IRQHandler+0x490>)
 80058cc:	400b      	ands	r3, r1
 80058ce:	6513      	str	r3, [r2, #80]	; 0x50
 80058d0:	4a6c      	ldr	r2, [pc, #432]	; (8005a84 <HAL_FDCAN_IRQHandler+0x48c>)
 80058d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058d4:	0f9b      	lsrs	r3, r3, #30
 80058d6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80058d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f956 	bl	8005b8c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80058e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d011      	beq.n	800590a <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058ec:	4b66      	ldr	r3, [pc, #408]	; (8005a88 <HAL_FDCAN_IRQHandler+0x490>)
 80058ee:	400b      	ands	r3, r1
 80058f0:	6513      	str	r3, [r2, #80]	; 0x50
 80058f2:	4a64      	ldr	r2, [pc, #400]	; (8005a84 <HAL_FDCAN_IRQHandler+0x48c>)
 80058f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058f6:	0f9b      	lsrs	r3, r3, #30
 80058f8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a5f      	ldr	r2, [pc, #380]	; (8005a8c <HAL_FDCAN_IRQHandler+0x494>)
 8005910:	4293      	cmp	r3, r2
 8005912:	f040 80aa 	bne.w	8005a6a <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0303 	and.w	r3, r3, #3
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 80a2 	beq.w	8005a6a <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800593a:	4013      	ands	r3, r2
 800593c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005948:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005952:	4013      	ands	r3, r2
 8005954:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005960:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800596a:	4013      	ands	r3, r2
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8005978:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	6a3a      	ldr	r2, [r7, #32]
 8005982:	4013      	ands	r3, r2
 8005984:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8005990:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	4013      	ands	r3, r2
 800599c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a4:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80059ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ba:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80059bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f8ef 	bl	8005ba2 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80059c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d007      	beq.n	80059da <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80059d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f8ef 	bl	8005bb8 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d019      	beq.n	8005a18 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d014      	beq.n	8005a18 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f4:	0c1b      	lsrs	r3, r3, #16
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a04:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2240      	movs	r2, #64	; 0x40
 8005a0c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	6939      	ldr	r1, [r7, #16]
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f8db 	bl	8005bce <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d007      	beq.n	8005a2e <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a24:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005a26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f8dc 	bl	8005be6 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005a2e:	6a3b      	ldr	r3, [r7, #32]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	6a3a      	ldr	r2, [r7, #32]
 8005a3a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005a42:	6a3b      	ldr	r3, [r7, #32]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00b      	beq.n	8005a6a <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	69fa      	ldr	r2, [r7, #28]
 8005a58:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f87f 	bl	8005b78 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	3758      	adds	r7, #88	; 0x58
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	4000a800 	.word	0x4000a800
 8005a88:	3fcfffff 	.word	0x3fcfffff
 8005a8c:	4000a000 	.word	0x4000a000

08005a90 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005b96:	bf00      	nop
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005bda:	bf00      	nop
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c08:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005c12:	4ba7      	ldr	r3, [pc, #668]	; (8005eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	0091      	lsls	r1, r2, #2
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	6812      	ldr	r2, [r2, #0]
 8005c1e:	430b      	orrs	r3, r1
 8005c20:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c2c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c34:	041a      	lsls	r2, r3, #16
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	430a      	orrs	r2, r1
 8005c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	4413      	add	r3, r2
 8005c48:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c52:	4b97      	ldr	r3, [pc, #604]	; (8005eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	0091      	lsls	r1, r2, #2
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6812      	ldr	r2, [r2, #0]
 8005c5e:	430b      	orrs	r3, r1
 8005c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c74:	041a      	lsls	r2, r3, #16
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	4413      	add	r3, r2
 8005c8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005c94:	4b86      	ldr	r3, [pc, #536]	; (8005eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	68ba      	ldr	r2, [r7, #8]
 8005c9a:	0091      	lsls	r1, r2, #2
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005cae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	041a      	lsls	r2, r3, #16
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005cdc:	4b74      	ldr	r3, [pc, #464]	; (8005eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	0091      	lsls	r1, r2, #2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6812      	ldr	r2, [r2, #0]
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005cf6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfe:	041a      	lsls	r2, r3, #16
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005d12:	fb02 f303 	mul.w	r3, r2, r3
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	4413      	add	r3, r2
 8005d1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005d24:	4b62      	ldr	r3, [pc, #392]	; (8005eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d26:	4013      	ands	r3, r2
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	0091      	lsls	r1, r2, #2
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6812      	ldr	r2, [r2, #0]
 8005d30:	430b      	orrs	r3, r1
 8005d32:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005d3e:	fb02 f303 	mul.w	r3, r2, r3
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	4413      	add	r3, r2
 8005d46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005d50:	4b57      	ldr	r3, [pc, #348]	; (8005eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	0091      	lsls	r1, r2, #2
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	430b      	orrs	r3, r1
 8005d5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d6a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d72:	041a      	lsls	r2, r3, #16
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	4413      	add	r3, r2
 8005d88:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005d92:	4b47      	ldr	r3, [pc, #284]	; (8005eb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d94:	4013      	ands	r3, r2
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	0091      	lsls	r1, r2, #2
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005dac:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db4:	041a      	lsls	r2, r3, #16
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005dc8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd0:	061a      	lsls	r2, r3, #24
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005de0:	4b34      	ldr	r3, [pc, #208]	; (8005eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005de2:	4413      	add	r3, r2
 8005de4:	009a      	lsls	r2, r3, #2
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	441a      	add	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	441a      	add	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	6879      	ldr	r1, [r7, #4]
 8005e14:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005e16:	fb01 f303 	mul.w	r3, r1, r3
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	441a      	add	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2a:	6879      	ldr	r1, [r7, #4]
 8005e2c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005e2e:	fb01 f303 	mul.w	r3, r1, r3
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	441a      	add	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005e46:	fb01 f303 	mul.w	r3, r1, r3
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	441a      	add	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	441a      	add	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e72:	6879      	ldr	r1, [r7, #4]
 8005e74:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005e76:	fb01 f303 	mul.w	r3, r1, r3
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	441a      	add	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	441a      	add	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea6:	4a04      	ldr	r2, [pc, #16]	; (8005eb8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d915      	bls.n	8005ed8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005eac:	e006      	b.n	8005ebc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005eae:	bf00      	nop
 8005eb0:	ffff0003 	.word	0xffff0003
 8005eb4:	10002b00 	.word	0x10002b00
 8005eb8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ec2:	f043 0220 	orr.w	r2, r3, #32
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2203      	movs	r2, #3
 8005ed0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e010      	b.n	8005efa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	e005      	b.n	8005eec <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3304      	adds	r3, #4
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d3f3      	bcc.n	8005ee0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3714      	adds	r7, #20
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop

08005f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b089      	sub	sp, #36	; 0x24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005f16:	4b89      	ldr	r3, [pc, #548]	; (800613c <HAL_GPIO_Init+0x234>)
 8005f18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f1a:	e194      	b.n	8006246 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	2101      	movs	r1, #1
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	fa01 f303 	lsl.w	r3, r1, r3
 8005f28:	4013      	ands	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 8186 	beq.w	8006240 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f003 0303 	and.w	r3, r3, #3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d005      	beq.n	8005f4c <HAL_GPIO_Init+0x44>
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d130      	bne.n	8005fae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	2203      	movs	r2, #3
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	43db      	mvns	r3, r3
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	4013      	ands	r3, r2
 8005f62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f82:	2201      	movs	r2, #1
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8a:	43db      	mvns	r3, r3
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	091b      	lsrs	r3, r3, #4
 8005f98:	f003 0201 	and.w	r2, r3, #1
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f003 0303 	and.w	r3, r3, #3
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d017      	beq.n	8005fea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f003 0303 	and.w	r3, r3, #3
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d123      	bne.n	800603e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	08da      	lsrs	r2, r3, #3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3208      	adds	r2, #8
 8005ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006002:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	f003 0307 	and.w	r3, r3, #7
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	220f      	movs	r2, #15
 800600e:	fa02 f303 	lsl.w	r3, r2, r3
 8006012:	43db      	mvns	r3, r3
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	4013      	ands	r3, r2
 8006018:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	691a      	ldr	r2, [r3, #16]
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	fa02 f303 	lsl.w	r3, r2, r3
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	4313      	orrs	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	08da      	lsrs	r2, r3, #3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3208      	adds	r2, #8
 8006038:	69b9      	ldr	r1, [r7, #24]
 800603a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	2203      	movs	r2, #3
 800604a:	fa02 f303 	lsl.w	r3, r2, r3
 800604e:	43db      	mvns	r3, r3
 8006050:	69ba      	ldr	r2, [r7, #24]
 8006052:	4013      	ands	r3, r2
 8006054:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f003 0203 	and.w	r2, r3, #3
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	fa02 f303 	lsl.w	r3, r2, r3
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	4313      	orrs	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	69ba      	ldr	r2, [r7, #24]
 8006070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 80e0 	beq.w	8006240 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006080:	4b2f      	ldr	r3, [pc, #188]	; (8006140 <HAL_GPIO_Init+0x238>)
 8006082:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006086:	4a2e      	ldr	r2, [pc, #184]	; (8006140 <HAL_GPIO_Init+0x238>)
 8006088:	f043 0302 	orr.w	r3, r3, #2
 800608c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006090:	4b2b      	ldr	r3, [pc, #172]	; (8006140 <HAL_GPIO_Init+0x238>)
 8006092:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800609e:	4a29      	ldr	r2, [pc, #164]	; (8006144 <HAL_GPIO_Init+0x23c>)
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	089b      	lsrs	r3, r3, #2
 80060a4:	3302      	adds	r3, #2
 80060a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	220f      	movs	r2, #15
 80060b6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ba:	43db      	mvns	r3, r3
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4013      	ands	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a20      	ldr	r2, [pc, #128]	; (8006148 <HAL_GPIO_Init+0x240>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d052      	beq.n	8006170 <HAL_GPIO_Init+0x268>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a1f      	ldr	r2, [pc, #124]	; (800614c <HAL_GPIO_Init+0x244>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d031      	beq.n	8006136 <HAL_GPIO_Init+0x22e>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a1e      	ldr	r2, [pc, #120]	; (8006150 <HAL_GPIO_Init+0x248>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d02b      	beq.n	8006132 <HAL_GPIO_Init+0x22a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a1d      	ldr	r2, [pc, #116]	; (8006154 <HAL_GPIO_Init+0x24c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d025      	beq.n	800612e <HAL_GPIO_Init+0x226>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a1c      	ldr	r2, [pc, #112]	; (8006158 <HAL_GPIO_Init+0x250>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d01f      	beq.n	800612a <HAL_GPIO_Init+0x222>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a1b      	ldr	r2, [pc, #108]	; (800615c <HAL_GPIO_Init+0x254>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d019      	beq.n	8006126 <HAL_GPIO_Init+0x21e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a1a      	ldr	r2, [pc, #104]	; (8006160 <HAL_GPIO_Init+0x258>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_GPIO_Init+0x21a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a19      	ldr	r2, [pc, #100]	; (8006164 <HAL_GPIO_Init+0x25c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00d      	beq.n	800611e <HAL_GPIO_Init+0x216>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a18      	ldr	r2, [pc, #96]	; (8006168 <HAL_GPIO_Init+0x260>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d007      	beq.n	800611a <HAL_GPIO_Init+0x212>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a17      	ldr	r2, [pc, #92]	; (800616c <HAL_GPIO_Init+0x264>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d101      	bne.n	8006116 <HAL_GPIO_Init+0x20e>
 8006112:	2309      	movs	r3, #9
 8006114:	e02d      	b.n	8006172 <HAL_GPIO_Init+0x26a>
 8006116:	230a      	movs	r3, #10
 8006118:	e02b      	b.n	8006172 <HAL_GPIO_Init+0x26a>
 800611a:	2308      	movs	r3, #8
 800611c:	e029      	b.n	8006172 <HAL_GPIO_Init+0x26a>
 800611e:	2307      	movs	r3, #7
 8006120:	e027      	b.n	8006172 <HAL_GPIO_Init+0x26a>
 8006122:	2306      	movs	r3, #6
 8006124:	e025      	b.n	8006172 <HAL_GPIO_Init+0x26a>
 8006126:	2305      	movs	r3, #5
 8006128:	e023      	b.n	8006172 <HAL_GPIO_Init+0x26a>
 800612a:	2304      	movs	r3, #4
 800612c:	e021      	b.n	8006172 <HAL_GPIO_Init+0x26a>
 800612e:	2303      	movs	r3, #3
 8006130:	e01f      	b.n	8006172 <HAL_GPIO_Init+0x26a>
 8006132:	2302      	movs	r3, #2
 8006134:	e01d      	b.n	8006172 <HAL_GPIO_Init+0x26a>
 8006136:	2301      	movs	r3, #1
 8006138:	e01b      	b.n	8006172 <HAL_GPIO_Init+0x26a>
 800613a:	bf00      	nop
 800613c:	58000080 	.word	0x58000080
 8006140:	58024400 	.word	0x58024400
 8006144:	58000400 	.word	0x58000400
 8006148:	58020000 	.word	0x58020000
 800614c:	58020400 	.word	0x58020400
 8006150:	58020800 	.word	0x58020800
 8006154:	58020c00 	.word	0x58020c00
 8006158:	58021000 	.word	0x58021000
 800615c:	58021400 	.word	0x58021400
 8006160:	58021800 	.word	0x58021800
 8006164:	58021c00 	.word	0x58021c00
 8006168:	58022000 	.word	0x58022000
 800616c:	58022400 	.word	0x58022400
 8006170:	2300      	movs	r3, #0
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	f002 0203 	and.w	r2, r2, #3
 8006178:	0092      	lsls	r2, r2, #2
 800617a:	4093      	lsls	r3, r2
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	4313      	orrs	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006182:	4938      	ldr	r1, [pc, #224]	; (8006264 <HAL_GPIO_Init+0x35c>)
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	089b      	lsrs	r3, r3, #2
 8006188:	3302      	adds	r3, #2
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	43db      	mvns	r3, r3
 800619c:	69ba      	ldr	r2, [r7, #24]
 800619e:	4013      	ands	r3, r2
 80061a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d003      	beq.n	80061b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80061b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80061be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	43db      	mvns	r3, r3
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	4013      	ands	r3, r2
 80061ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d003      	beq.n	80061e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80061e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	43db      	mvns	r3, r3
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	4013      	ands	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	43db      	mvns	r3, r3
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	4013      	ands	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	3301      	adds	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	f47f ae63 	bne.w	8005f1c <HAL_GPIO_Init+0x14>
  }
}
 8006256:	bf00      	nop
 8006258:	bf00      	nop
 800625a:	3724      	adds	r7, #36	; 0x24
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	58000400 	.word	0x58000400

08006268 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	887b      	ldrh	r3, [r7, #2]
 800627a:	4013      	ands	r3, r2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006280:	2301      	movs	r3, #1
 8006282:	73fb      	strb	r3, [r7, #15]
 8006284:	e001      	b.n	800628a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006286:	2300      	movs	r3, #0
 8006288:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800628a:	7bfb      	ldrb	r3, [r7, #15]
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	807b      	strh	r3, [r7, #2]
 80062a4:	4613      	mov	r3, r2
 80062a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062a8:	787b      	ldrb	r3, [r7, #1]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062ae:	887a      	ldrh	r2, [r7, #2]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80062b4:	e003      	b.n	80062be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80062b6:	887b      	ldrh	r3, [r7, #2]
 80062b8:	041a      	lsls	r2, r3, #16
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	619a      	str	r2, [r3, #24]
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062dc:	887a      	ldrh	r2, [r7, #2]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4013      	ands	r3, r2
 80062e2:	041a      	lsls	r2, r3, #16
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	43d9      	mvns	r1, r3
 80062e8:	887b      	ldrh	r3, [r7, #2]
 80062ea:	400b      	ands	r3, r1
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	619a      	str	r2, [r3, #24]
}
 80062f2:	bf00      	nop
 80062f4:	3714      	adds	r7, #20
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	af00      	add	r7, sp, #0
 8006304:	4603      	mov	r3, r0
 8006306:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800630c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006310:	88fb      	ldrh	r3, [r7, #6]
 8006312:	4013      	ands	r3, r2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d008      	beq.n	800632a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006318:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800631c:	88fb      	ldrh	r3, [r7, #6]
 800631e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006322:	88fb      	ldrh	r3, [r7, #6]
 8006324:	4618      	mov	r0, r3
 8006326:	f01a fe3d 	bl	8020fa4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
	...

08006334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e07f      	b.n	8006446 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fb f81c 	bl	8001398 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2224      	movs	r2, #36	; 0x24
 8006364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0201 	bic.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006384:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006394:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d107      	bne.n	80063ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063aa:	609a      	str	r2, [r3, #8]
 80063ac:	e006      	b.n	80063bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80063ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d104      	bne.n	80063ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6859      	ldr	r1, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <HAL_I2C_Init+0x11c>)
 80063da:	430b      	orrs	r3, r1
 80063dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	69d9      	ldr	r1, [r3, #28]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1a      	ldr	r2, [r3, #32]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2220      	movs	r2, #32
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	02008000 	.word	0x02008000

08006454 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af02      	add	r7, sp, #8
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	4608      	mov	r0, r1
 800645e:	4611      	mov	r1, r2
 8006460:	461a      	mov	r2, r3
 8006462:	4603      	mov	r3, r0
 8006464:	817b      	strh	r3, [r7, #10]
 8006466:	460b      	mov	r3, r1
 8006468:	813b      	strh	r3, [r7, #8]
 800646a:	4613      	mov	r3, r2
 800646c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b20      	cmp	r3, #32
 8006478:	f040 80f9 	bne.w	800666e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d002      	beq.n	8006488 <HAL_I2C_Mem_Write+0x34>
 8006482:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006484:	2b00      	cmp	r3, #0
 8006486:	d105      	bne.n	8006494 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800648e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0ed      	b.n	8006670 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_I2C_Mem_Write+0x4e>
 800649e:	2302      	movs	r3, #2
 80064a0:	e0e6      	b.n	8006670 <HAL_I2C_Mem_Write+0x21c>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064aa:	f7fb ff09 	bl	80022c0 <HAL_GetTick>
 80064ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	2319      	movs	r3, #25
 80064b6:	2201      	movs	r2, #1
 80064b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 f955 	bl	800676c <I2C_WaitOnFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e0d1      	b.n	8006670 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2221      	movs	r2, #33	; 0x21
 80064d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2240      	movs	r2, #64	; 0x40
 80064d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a3a      	ldr	r2, [r7, #32]
 80064e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064f4:	88f8      	ldrh	r0, [r7, #6]
 80064f6:	893a      	ldrh	r2, [r7, #8]
 80064f8:	8979      	ldrh	r1, [r7, #10]
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	9301      	str	r3, [sp, #4]
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	4603      	mov	r3, r0
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 f8b9 	bl	800667c <I2C_RequestMemoryWrite>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e0a9      	b.n	8006670 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006520:	b29b      	uxth	r3, r3
 8006522:	2bff      	cmp	r3, #255	; 0xff
 8006524:	d90e      	bls.n	8006544 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	22ff      	movs	r2, #255	; 0xff
 800652a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006530:	b2da      	uxtb	r2, r3
 8006532:	8979      	ldrh	r1, [r7, #10]
 8006534:	2300      	movs	r3, #0
 8006536:	9300      	str	r3, [sp, #0]
 8006538:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 facf 	bl	8006ae0 <I2C_TransferConfig>
 8006542:	e00f      	b.n	8006564 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006552:	b2da      	uxtb	r2, r3
 8006554:	8979      	ldrh	r1, [r7, #10]
 8006556:	2300      	movs	r3, #0
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 fabe 	bl	8006ae0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 f94e 	bl	800680a <I2C_WaitOnTXISFlagUntilTimeout>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e07b      	b.n	8006670 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	781a      	ldrb	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006592:	b29b      	uxth	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	b29a      	uxth	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d034      	beq.n	800661c <HAL_I2C_Mem_Write+0x1c8>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d130      	bne.n	800661c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	2200      	movs	r2, #0
 80065c2:	2180      	movs	r1, #128	; 0x80
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 f8d1 	bl	800676c <I2C_WaitOnFlagUntilTimeout>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d001      	beq.n	80065d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e04d      	b.n	8006670 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2bff      	cmp	r3, #255	; 0xff
 80065dc:	d90e      	bls.n	80065fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	22ff      	movs	r2, #255	; 0xff
 80065e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	8979      	ldrh	r1, [r7, #10]
 80065ec:	2300      	movs	r3, #0
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 fa73 	bl	8006ae0 <I2C_TransferConfig>
 80065fa:	e00f      	b.n	800661c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660a:	b2da      	uxtb	r2, r3
 800660c:	8979      	ldrh	r1, [r7, #10]
 800660e:	2300      	movs	r3, #0
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 fa62 	bl	8006ae0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006620:	b29b      	uxth	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d19e      	bne.n	8006564 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 f934 	bl	8006898 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e01a      	b.n	8006670 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2220      	movs	r2, #32
 8006640:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6859      	ldr	r1, [r3, #4]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <HAL_I2C_Mem_Write+0x224>)
 800664e:	400b      	ands	r3, r1
 8006650:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2220      	movs	r2, #32
 8006656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	e000      	b.n	8006670 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800666e:	2302      	movs	r3, #2
  }
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	fe00e800 	.word	0xfe00e800

0800667c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af02      	add	r7, sp, #8
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	4608      	mov	r0, r1
 8006686:	4611      	mov	r1, r2
 8006688:	461a      	mov	r2, r3
 800668a:	4603      	mov	r3, r0
 800668c:	817b      	strh	r3, [r7, #10]
 800668e:	460b      	mov	r3, r1
 8006690:	813b      	strh	r3, [r7, #8]
 8006692:	4613      	mov	r3, r2
 8006694:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006696:	88fb      	ldrh	r3, [r7, #6]
 8006698:	b2da      	uxtb	r2, r3
 800669a:	8979      	ldrh	r1, [r7, #10]
 800669c:	4b20      	ldr	r3, [pc, #128]	; (8006720 <I2C_RequestMemoryWrite+0xa4>)
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 fa1b 	bl	8006ae0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066aa:	69fa      	ldr	r2, [r7, #28]
 80066ac:	69b9      	ldr	r1, [r7, #24]
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 f8ab 	bl	800680a <I2C_WaitOnTXISFlagUntilTimeout>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d001      	beq.n	80066be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e02c      	b.n	8006718 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d105      	bne.n	80066d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066c4:	893b      	ldrh	r3, [r7, #8]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	629a      	str	r2, [r3, #40]	; 0x28
 80066ce:	e015      	b.n	80066fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80066d0:	893b      	ldrh	r3, [r7, #8]
 80066d2:	0a1b      	lsrs	r3, r3, #8
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066de:	69fa      	ldr	r2, [r7, #28]
 80066e0:	69b9      	ldr	r1, [r7, #24]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 f891 	bl	800680a <I2C_WaitOnTXISFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e012      	b.n	8006718 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066f2:	893b      	ldrh	r3, [r7, #8]
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	9300      	str	r3, [sp, #0]
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	2200      	movs	r2, #0
 8006704:	2180      	movs	r1, #128	; 0x80
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 f830 	bl	800676c <I2C_WaitOnFlagUntilTimeout>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e000      	b.n	8006718 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	80002000 	.word	0x80002000

08006724 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b02      	cmp	r3, #2
 8006738:	d103      	bne.n	8006742 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2200      	movs	r2, #0
 8006740:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b01      	cmp	r3, #1
 800674e:	d007      	beq.n	8006760 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0201 	orr.w	r2, r2, #1
 800675e:	619a      	str	r2, [r3, #24]
  }
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	4613      	mov	r3, r2
 800677a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800677c:	e031      	b.n	80067e2 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006784:	d02d      	beq.n	80067e2 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006786:	f7fb fd9b 	bl	80022c0 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d302      	bcc.n	800679c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d122      	bne.n	80067e2 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	4013      	ands	r3, r2
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	bf0c      	ite	eq
 80067ac:	2301      	moveq	r3, #1
 80067ae:	2300      	movne	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	461a      	mov	r2, r3
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d113      	bne.n	80067e2 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067be:	f043 0220 	orr.w	r2, r3, #32
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e00f      	b.n	8006802 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	699a      	ldr	r2, [r3, #24]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4013      	ands	r3, r2
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	bf0c      	ite	eq
 80067f2:	2301      	moveq	r3, #1
 80067f4:	2300      	movne	r3, #0
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	461a      	mov	r2, r3
 80067fa:	79fb      	ldrb	r3, [r7, #7]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d0be      	beq.n	800677e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b084      	sub	sp, #16
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006816:	e033      	b.n	8006880 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f87f 	bl	8006920 <I2C_IsErrorOccurred>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e031      	b.n	8006890 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006832:	d025      	beq.n	8006880 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006834:	f7fb fd44 	bl	80022c0 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	429a      	cmp	r2, r3
 8006842:	d302      	bcc.n	800684a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d11a      	bne.n	8006880 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b02      	cmp	r3, #2
 8006856:	d013      	beq.n	8006880 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685c:	f043 0220 	orr.w	r2, r3, #32
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2220      	movs	r2, #32
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e007      	b.n	8006890 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b02      	cmp	r3, #2
 800688c:	d1c4      	bne.n	8006818 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068a4:	e02f      	b.n	8006906 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	68b9      	ldr	r1, [r7, #8]
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 f838 	bl	8006920 <I2C_IsErrorOccurred>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e02d      	b.n	8006916 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ba:	f7fb fd01 	bl	80022c0 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d302      	bcc.n	80068d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d11a      	bne.n	8006906 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	699b      	ldr	r3, [r3, #24]
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d013      	beq.n	8006906 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e2:	f043 0220 	orr.w	r2, r3, #32
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2220      	movs	r2, #32
 80068ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e007      	b.n	8006916 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b20      	cmp	r3, #32
 8006912:	d1c8      	bne.n	80068a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
	...

08006920 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b08a      	sub	sp, #40	; 0x28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	2b00      	cmp	r3, #0
 800694a:	d068      	beq.n	8006a1e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2210      	movs	r2, #16
 8006952:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006954:	e049      	b.n	80069ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d045      	beq.n	80069ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800695e:	f7fb fcaf 	bl	80022c0 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	429a      	cmp	r2, r3
 800696c:	d302      	bcc.n	8006974 <I2C_IsErrorOccurred+0x54>
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d13a      	bne.n	80069ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800697e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006986:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006996:	d121      	bne.n	80069dc <I2C_IsErrorOccurred+0xbc>
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800699e:	d01d      	beq.n	80069dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069a0:	7cfb      	ldrb	r3, [r7, #19]
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d01a      	beq.n	80069dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069b6:	f7fb fc83 	bl	80022c0 <HAL_GetTick>
 80069ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069bc:	e00e      	b.n	80069dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069be:	f7fb fc7f 	bl	80022c0 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b19      	cmp	r3, #25
 80069ca:	d907      	bls.n	80069dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80069cc:	6a3b      	ldr	r3, [r7, #32]
 80069ce:	f043 0320 	orr.w	r3, r3, #32
 80069d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80069da:	e006      	b.n	80069ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	d1e9      	bne.n	80069be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	f003 0320 	and.w	r3, r3, #32
 80069f4:	2b20      	cmp	r3, #32
 80069f6:	d003      	beq.n	8006a00 <I2C_IsErrorOccurred+0xe0>
 80069f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0aa      	beq.n	8006956 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d103      	bne.n	8006a10 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	f043 0304 	orr.w	r3, r3, #4
 8006a16:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00b      	beq.n	8006a48 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a30:	6a3b      	ldr	r3, [r7, #32]
 8006a32:	f043 0301 	orr.w	r3, r3, #1
 8006a36:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00b      	beq.n	8006a6a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	f043 0308 	orr.w	r3, r3, #8
 8006a58:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00b      	beq.n	8006a8c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	f043 0302 	orr.w	r3, r3, #2
 8006a7a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a84:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01c      	beq.n	8006ace <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f7ff fe45 	bl	8006724 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	6859      	ldr	r1, [r3, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <I2C_IsErrorOccurred+0x1bc>)
 8006aa6:	400b      	ands	r3, r1
 8006aa8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006ace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3728      	adds	r7, #40	; 0x28
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	fe00e800 	.word	0xfe00e800

08006ae0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	607b      	str	r3, [r7, #4]
 8006aea:	460b      	mov	r3, r1
 8006aec:	817b      	strh	r3, [r7, #10]
 8006aee:	4613      	mov	r3, r2
 8006af0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006af2:	897b      	ldrh	r3, [r7, #10]
 8006af4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006af8:	7a7b      	ldrb	r3, [r7, #9]
 8006afa:	041b      	lsls	r3, r3, #16
 8006afc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b00:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b0e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	0d5b      	lsrs	r3, r3, #21
 8006b1a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006b1e:	4b08      	ldr	r3, [pc, #32]	; (8006b40 <I2C_TransferConfig+0x60>)
 8006b20:	430b      	orrs	r3, r1
 8006b22:	43db      	mvns	r3, r3
 8006b24:	ea02 0103 	and.w	r1, r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b32:	bf00      	nop
 8006b34:	371c      	adds	r7, #28
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	03ff63ff 	.word	0x03ff63ff

08006b44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d138      	bne.n	8006bcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d101      	bne.n	8006b68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b64:	2302      	movs	r3, #2
 8006b66:	e032      	b.n	8006bce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2224      	movs	r2, #36	; 0x24
 8006b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0201 	bic.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6819      	ldr	r1, [r3, #0]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0201 	orr.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	e000      	b.n	8006bce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006bcc:	2302      	movs	r3, #2
  }
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b085      	sub	sp, #20
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b20      	cmp	r3, #32
 8006bee:	d139      	bne.n	8006c64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d101      	bne.n	8006bfe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e033      	b.n	8006c66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2224      	movs	r2, #36	; 0x24
 8006c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0201 	bic.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	021b      	lsls	r3, r3, #8
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2220      	movs	r2, #32
 8006c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	e000      	b.n	8006c66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c64:	2302      	movs	r3, #2
  }
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
	...

08006c74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006c7c:	4b19      	ldr	r3, [pc, #100]	; (8006ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8006c7e:	68db      	ldr	r3, [r3, #12]
 8006c80:	f003 0304 	and.w	r3, r3, #4
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d00a      	beq.n	8006c9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006c88:	4b16      	ldr	r3, [pc, #88]	; (8006ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f003 0307 	and.w	r3, r3, #7
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d001      	beq.n	8006c9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e01f      	b.n	8006cda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e01d      	b.n	8006cda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006c9e:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f023 0207 	bic.w	r2, r3, #7
 8006ca6:	490f      	ldr	r1, [pc, #60]	; (8006ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006cae:	f7fb fb07 	bl	80022c0 <HAL_GetTick>
 8006cb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cb4:	e009      	b.n	8006cca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006cb6:	f7fb fb03 	bl	80022c0 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cc4:	d901      	bls.n	8006cca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e007      	b.n	8006cda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cca:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <HAL_PWREx_ConfigSupply+0x70>)
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd6:	d1ee      	bne.n	8006cb6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	58024800 	.word	0x58024800

08006ce8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08c      	sub	sp, #48	; 0x30
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d102      	bne.n	8006cfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	f000 bc48 	b.w	800758c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 8088 	beq.w	8006e1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d0a:	4b99      	ldr	r3, [pc, #612]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d14:	4b96      	ldr	r3, [pc, #600]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d18:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1c:	2b10      	cmp	r3, #16
 8006d1e:	d007      	beq.n	8006d30 <HAL_RCC_OscConfig+0x48>
 8006d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d22:	2b18      	cmp	r3, #24
 8006d24:	d111      	bne.n	8006d4a <HAL_RCC_OscConfig+0x62>
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	f003 0303 	and.w	r3, r3, #3
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d10c      	bne.n	8006d4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d30:	4b8f      	ldr	r3, [pc, #572]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d06d      	beq.n	8006e18 <HAL_RCC_OscConfig+0x130>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d169      	bne.n	8006e18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f000 bc21 	b.w	800758c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d52:	d106      	bne.n	8006d62 <HAL_RCC_OscConfig+0x7a>
 8006d54:	4b86      	ldr	r3, [pc, #536]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a85      	ldr	r2, [pc, #532]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d5e:	6013      	str	r3, [r2, #0]
 8006d60:	e02e      	b.n	8006dc0 <HAL_RCC_OscConfig+0xd8>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10c      	bne.n	8006d84 <HAL_RCC_OscConfig+0x9c>
 8006d6a:	4b81      	ldr	r3, [pc, #516]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a80      	ldr	r2, [pc, #512]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	4b7e      	ldr	r3, [pc, #504]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a7d      	ldr	r2, [pc, #500]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	e01d      	b.n	8006dc0 <HAL_RCC_OscConfig+0xd8>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d8c:	d10c      	bne.n	8006da8 <HAL_RCC_OscConfig+0xc0>
 8006d8e:	4b78      	ldr	r3, [pc, #480]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a77      	ldr	r2, [pc, #476]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	4b75      	ldr	r3, [pc, #468]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a74      	ldr	r2, [pc, #464]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	e00b      	b.n	8006dc0 <HAL_RCC_OscConfig+0xd8>
 8006da8:	4b71      	ldr	r3, [pc, #452]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a70      	ldr	r2, [pc, #448]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	4b6e      	ldr	r3, [pc, #440]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a6d      	ldr	r2, [pc, #436]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d013      	beq.n	8006df0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc8:	f7fb fa7a 	bl	80022c0 <HAL_GetTick>
 8006dcc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dd0:	f7fb fa76 	bl	80022c0 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b64      	cmp	r3, #100	; 0x64
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e3d4      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006de2:	4b63      	ldr	r3, [pc, #396]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0f0      	beq.n	8006dd0 <HAL_RCC_OscConfig+0xe8>
 8006dee:	e014      	b.n	8006e1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df0:	f7fb fa66 	bl	80022c0 <HAL_GetTick>
 8006df4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006df8:	f7fb fa62 	bl	80022c0 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b64      	cmp	r3, #100	; 0x64
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e3c0      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e0a:	4b59      	ldr	r3, [pc, #356]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1f0      	bne.n	8006df8 <HAL_RCC_OscConfig+0x110>
 8006e16:	e000      	b.n	8006e1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 80ca 	beq.w	8006fbc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e28:	4b51      	ldr	r3, [pc, #324]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e32:	4b4f      	ldr	r3, [pc, #316]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e36:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d007      	beq.n	8006e4e <HAL_RCC_OscConfig+0x166>
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	2b18      	cmp	r3, #24
 8006e42:	d156      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x20a>
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d151      	bne.n	8006ef2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e4e:	4b48      	ldr	r3, [pc, #288]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 0304 	and.w	r3, r3, #4
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d005      	beq.n	8006e66 <HAL_RCC_OscConfig+0x17e>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e392      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e66:	4b42      	ldr	r3, [pc, #264]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f023 0219 	bic.w	r2, r3, #25
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	493f      	ldr	r1, [pc, #252]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e74:	4313      	orrs	r3, r2
 8006e76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e78:	f7fb fa22 	bl	80022c0 <HAL_GetTick>
 8006e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e7e:	e008      	b.n	8006e92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e80:	f7fb fa1e 	bl	80022c0 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e37c      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e92:	4b37      	ldr	r3, [pc, #220]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0304 	and.w	r3, r3, #4
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0f0      	beq.n	8006e80 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e9e:	f7fb fa3f 	bl	8002320 <HAL_GetREVID>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d817      	bhi.n	8006edc <HAL_RCC_OscConfig+0x1f4>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	2b40      	cmp	r3, #64	; 0x40
 8006eb2:	d108      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x1de>
 8006eb4:	4b2e      	ldr	r3, [pc, #184]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006ebc:	4a2c      	ldr	r2, [pc, #176]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ec4:	e07a      	b.n	8006fbc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ec6:	4b2a      	ldr	r3, [pc, #168]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	031b      	lsls	r3, r3, #12
 8006ed4:	4926      	ldr	r1, [pc, #152]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006eda:	e06f      	b.n	8006fbc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006edc:	4b24      	ldr	r3, [pc, #144]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	061b      	lsls	r3, r3, #24
 8006eea:	4921      	ldr	r1, [pc, #132]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ef0:	e064      	b.n	8006fbc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d047      	beq.n	8006f8a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006efa:	4b1d      	ldr	r3, [pc, #116]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f023 0219 	bic.w	r2, r3, #25
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	491a      	ldr	r1, [pc, #104]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0c:	f7fb f9d8 	bl	80022c0 <HAL_GetTick>
 8006f10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f14:	f7fb f9d4 	bl	80022c0 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e332      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f26:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0304 	and.w	r3, r3, #4
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0f0      	beq.n	8006f14 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f32:	f7fb f9f5 	bl	8002320 <HAL_GetREVID>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f241 0203 	movw	r2, #4099	; 0x1003
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d819      	bhi.n	8006f74 <HAL_RCC_OscConfig+0x28c>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	2b40      	cmp	r3, #64	; 0x40
 8006f46:	d108      	bne.n	8006f5a <HAL_RCC_OscConfig+0x272>
 8006f48:	4b09      	ldr	r3, [pc, #36]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006f50:	4a07      	ldr	r2, [pc, #28]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f56:	6053      	str	r3, [r2, #4]
 8006f58:	e030      	b.n	8006fbc <HAL_RCC_OscConfig+0x2d4>
 8006f5a:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	031b      	lsls	r3, r3, #12
 8006f68:	4901      	ldr	r1, [pc, #4]	; (8006f70 <HAL_RCC_OscConfig+0x288>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	604b      	str	r3, [r1, #4]
 8006f6e:	e025      	b.n	8006fbc <HAL_RCC_OscConfig+0x2d4>
 8006f70:	58024400 	.word	0x58024400
 8006f74:	4b9a      	ldr	r3, [pc, #616]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	691b      	ldr	r3, [r3, #16]
 8006f80:	061b      	lsls	r3, r3, #24
 8006f82:	4997      	ldr	r1, [pc, #604]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	604b      	str	r3, [r1, #4]
 8006f88:	e018      	b.n	8006fbc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f8a:	4b95      	ldr	r3, [pc, #596]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a94      	ldr	r2, [pc, #592]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8006f90:	f023 0301 	bic.w	r3, r3, #1
 8006f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f96:	f7fb f993 	bl	80022c0 <HAL_GetTick>
 8006f9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006f9c:	e008      	b.n	8006fb0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f9e:	f7fb f98f 	bl	80022c0 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d901      	bls.n	8006fb0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e2ed      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fb0:	4b8b      	ldr	r3, [pc, #556]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1f0      	bne.n	8006f9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0310 	and.w	r3, r3, #16
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 80a9 	beq.w	800711c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fca:	4b85      	ldr	r3, [pc, #532]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fd2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fd4:	4b82      	ldr	r3, [pc, #520]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8006fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d007      	beq.n	8006ff0 <HAL_RCC_OscConfig+0x308>
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	2b18      	cmp	r3, #24
 8006fe4:	d13a      	bne.n	800705c <HAL_RCC_OscConfig+0x374>
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f003 0303 	and.w	r3, r3, #3
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d135      	bne.n	800705c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ff0:	4b7b      	ldr	r3, [pc, #492]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <HAL_RCC_OscConfig+0x320>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	2b80      	cmp	r3, #128	; 0x80
 8007002:	d001      	beq.n	8007008 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e2c1      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007008:	f7fb f98a 	bl	8002320 <HAL_GetREVID>
 800700c:	4603      	mov	r3, r0
 800700e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007012:	4293      	cmp	r3, r2
 8007014:	d817      	bhi.n	8007046 <HAL_RCC_OscConfig+0x35e>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	2b20      	cmp	r3, #32
 800701c:	d108      	bne.n	8007030 <HAL_RCC_OscConfig+0x348>
 800701e:	4b70      	ldr	r3, [pc, #448]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007026:	4a6e      	ldr	r2, [pc, #440]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8007028:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800702c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800702e:	e075      	b.n	800711c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007030:	4b6b      	ldr	r3, [pc, #428]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a1b      	ldr	r3, [r3, #32]
 800703c:	069b      	lsls	r3, r3, #26
 800703e:	4968      	ldr	r1, [pc, #416]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8007040:	4313      	orrs	r3, r2
 8007042:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007044:	e06a      	b.n	800711c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007046:	4b66      	ldr	r3, [pc, #408]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	061b      	lsls	r3, r3, #24
 8007054:	4962      	ldr	r1, [pc, #392]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8007056:	4313      	orrs	r3, r2
 8007058:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800705a:	e05f      	b.n	800711c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d042      	beq.n	80070ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007064:	4b5e      	ldr	r3, [pc, #376]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a5d      	ldr	r2, [pc, #372]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 800706a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800706e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007070:	f7fb f926 	bl	80022c0 <HAL_GetTick>
 8007074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007076:	e008      	b.n	800708a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007078:	f7fb f922 	bl	80022c0 <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	2b02      	cmp	r3, #2
 8007084:	d901      	bls.n	800708a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007086:	2303      	movs	r3, #3
 8007088:	e280      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800708a:	4b55      	ldr	r3, [pc, #340]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0f0      	beq.n	8007078 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007096:	f7fb f943 	bl	8002320 <HAL_GetREVID>
 800709a:	4603      	mov	r3, r0
 800709c:	f241 0203 	movw	r2, #4099	; 0x1003
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d817      	bhi.n	80070d4 <HAL_RCC_OscConfig+0x3ec>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a1b      	ldr	r3, [r3, #32]
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d108      	bne.n	80070be <HAL_RCC_OscConfig+0x3d6>
 80070ac:	4b4c      	ldr	r3, [pc, #304]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80070b4:	4a4a      	ldr	r2, [pc, #296]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 80070b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ba:	6053      	str	r3, [r2, #4]
 80070bc:	e02e      	b.n	800711c <HAL_RCC_OscConfig+0x434>
 80070be:	4b48      	ldr	r3, [pc, #288]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	069b      	lsls	r3, r3, #26
 80070cc:	4944      	ldr	r1, [pc, #272]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	604b      	str	r3, [r1, #4]
 80070d2:	e023      	b.n	800711c <HAL_RCC_OscConfig+0x434>
 80070d4:	4b42      	ldr	r3, [pc, #264]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	061b      	lsls	r3, r3, #24
 80070e2:	493f      	ldr	r1, [pc, #252]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	60cb      	str	r3, [r1, #12]
 80070e8:	e018      	b.n	800711c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80070ea:	4b3d      	ldr	r3, [pc, #244]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a3c      	ldr	r2, [pc, #240]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 80070f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f6:	f7fb f8e3 	bl	80022c0 <HAL_GetTick>
 80070fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80070fc:	e008      	b.n	8007110 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80070fe:	f7fb f8df 	bl	80022c0 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	d901      	bls.n	8007110 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e23d      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007110:	4b33      	ldr	r3, [pc, #204]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007118:	2b00      	cmp	r3, #0
 800711a:	d1f0      	bne.n	80070fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	d036      	beq.n	8007196 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	695b      	ldr	r3, [r3, #20]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d019      	beq.n	8007164 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007130:	4b2b      	ldr	r3, [pc, #172]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8007132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007134:	4a2a      	ldr	r2, [pc, #168]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8007136:	f043 0301 	orr.w	r3, r3, #1
 800713a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800713c:	f7fb f8c0 	bl	80022c0 <HAL_GetTick>
 8007140:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007142:	e008      	b.n	8007156 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007144:	f7fb f8bc 	bl	80022c0 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	2b02      	cmp	r3, #2
 8007150:	d901      	bls.n	8007156 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e21a      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007156:	4b22      	ldr	r3, [pc, #136]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8007158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800715a:	f003 0302 	and.w	r3, r3, #2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d0f0      	beq.n	8007144 <HAL_RCC_OscConfig+0x45c>
 8007162:	e018      	b.n	8007196 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007164:	4b1e      	ldr	r3, [pc, #120]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 8007166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007168:	4a1d      	ldr	r2, [pc, #116]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 800716a:	f023 0301 	bic.w	r3, r3, #1
 800716e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007170:	f7fb f8a6 	bl	80022c0 <HAL_GetTick>
 8007174:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007176:	e008      	b.n	800718a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007178:	f7fb f8a2 	bl	80022c0 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	2b02      	cmp	r3, #2
 8007184:	d901      	bls.n	800718a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007186:	2303      	movs	r3, #3
 8007188:	e200      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800718a:	4b15      	ldr	r3, [pc, #84]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 800718c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1f0      	bne.n	8007178 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0320 	and.w	r3, r3, #32
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d039      	beq.n	8007216 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d01c      	beq.n	80071e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071aa:	4b0d      	ldr	r3, [pc, #52]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a0c      	ldr	r2, [pc, #48]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 80071b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071b6:	f7fb f883 	bl	80022c0 <HAL_GetTick>
 80071ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071bc:	e008      	b.n	80071d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071be:	f7fb f87f 	bl	80022c0 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e1dd      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071d0:	4b03      	ldr	r3, [pc, #12]	; (80071e0 <HAL_RCC_OscConfig+0x4f8>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0f0      	beq.n	80071be <HAL_RCC_OscConfig+0x4d6>
 80071dc:	e01b      	b.n	8007216 <HAL_RCC_OscConfig+0x52e>
 80071de:	bf00      	nop
 80071e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071e4:	4b9b      	ldr	r3, [pc, #620]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a9a      	ldr	r2, [pc, #616]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80071ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071f0:	f7fb f866 	bl	80022c0 <HAL_GetTick>
 80071f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80071f6:	e008      	b.n	800720a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071f8:	f7fb f862 	bl	80022c0 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e1c0      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800720a:	4b92      	ldr	r3, [pc, #584]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1f0      	bne.n	80071f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 8081 	beq.w	8007326 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007224:	4b8c      	ldr	r3, [pc, #560]	; (8007458 <HAL_RCC_OscConfig+0x770>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a8b      	ldr	r2, [pc, #556]	; (8007458 <HAL_RCC_OscConfig+0x770>)
 800722a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800722e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007230:	f7fb f846 	bl	80022c0 <HAL_GetTick>
 8007234:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007236:	e008      	b.n	800724a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007238:	f7fb f842 	bl	80022c0 <HAL_GetTick>
 800723c:	4602      	mov	r2, r0
 800723e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007240:	1ad3      	subs	r3, r2, r3
 8007242:	2b64      	cmp	r3, #100	; 0x64
 8007244:	d901      	bls.n	800724a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e1a0      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800724a:	4b83      	ldr	r3, [pc, #524]	; (8007458 <HAL_RCC_OscConfig+0x770>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0f0      	beq.n	8007238 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d106      	bne.n	800726c <HAL_RCC_OscConfig+0x584>
 800725e:	4b7d      	ldr	r3, [pc, #500]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007262:	4a7c      	ldr	r2, [pc, #496]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007264:	f043 0301 	orr.w	r3, r3, #1
 8007268:	6713      	str	r3, [r2, #112]	; 0x70
 800726a:	e02d      	b.n	80072c8 <HAL_RCC_OscConfig+0x5e0>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10c      	bne.n	800728e <HAL_RCC_OscConfig+0x5a6>
 8007274:	4b77      	ldr	r3, [pc, #476]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007278:	4a76      	ldr	r2, [pc, #472]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 800727a:	f023 0301 	bic.w	r3, r3, #1
 800727e:	6713      	str	r3, [r2, #112]	; 0x70
 8007280:	4b74      	ldr	r3, [pc, #464]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007284:	4a73      	ldr	r2, [pc, #460]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007286:	f023 0304 	bic.w	r3, r3, #4
 800728a:	6713      	str	r3, [r2, #112]	; 0x70
 800728c:	e01c      	b.n	80072c8 <HAL_RCC_OscConfig+0x5e0>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	2b05      	cmp	r3, #5
 8007294:	d10c      	bne.n	80072b0 <HAL_RCC_OscConfig+0x5c8>
 8007296:	4b6f      	ldr	r3, [pc, #444]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729a:	4a6e      	ldr	r2, [pc, #440]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 800729c:	f043 0304 	orr.w	r3, r3, #4
 80072a0:	6713      	str	r3, [r2, #112]	; 0x70
 80072a2:	4b6c      	ldr	r3, [pc, #432]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	4a6b      	ldr	r2, [pc, #428]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80072a8:	f043 0301 	orr.w	r3, r3, #1
 80072ac:	6713      	str	r3, [r2, #112]	; 0x70
 80072ae:	e00b      	b.n	80072c8 <HAL_RCC_OscConfig+0x5e0>
 80072b0:	4b68      	ldr	r3, [pc, #416]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80072b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b4:	4a67      	ldr	r2, [pc, #412]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80072b6:	f023 0301 	bic.w	r3, r3, #1
 80072ba:	6713      	str	r3, [r2, #112]	; 0x70
 80072bc:	4b65      	ldr	r3, [pc, #404]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80072be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c0:	4a64      	ldr	r2, [pc, #400]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80072c2:	f023 0304 	bic.w	r3, r3, #4
 80072c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d015      	beq.n	80072fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d0:	f7fa fff6 	bl	80022c0 <HAL_GetTick>
 80072d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072d6:	e00a      	b.n	80072ee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072d8:	f7fa fff2 	bl	80022c0 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d901      	bls.n	80072ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e14e      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072ee:	4b59      	ldr	r3, [pc, #356]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80072f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0ee      	beq.n	80072d8 <HAL_RCC_OscConfig+0x5f0>
 80072fa:	e014      	b.n	8007326 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fc:	f7fa ffe0 	bl	80022c0 <HAL_GetTick>
 8007300:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007302:	e00a      	b.n	800731a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007304:	f7fa ffdc 	bl	80022c0 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007312:	4293      	cmp	r3, r2
 8007314:	d901      	bls.n	800731a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e138      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800731a:	4b4e      	ldr	r3, [pc, #312]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 800731c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731e:	f003 0302 	and.w	r3, r3, #2
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1ee      	bne.n	8007304 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 812d 	beq.w	800758a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007330:	4b48      	ldr	r3, [pc, #288]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007338:	2b18      	cmp	r3, #24
 800733a:	f000 80bd 	beq.w	80074b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	2b02      	cmp	r3, #2
 8007344:	f040 809e 	bne.w	8007484 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007348:	4b42      	ldr	r3, [pc, #264]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a41      	ldr	r2, [pc, #260]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 800734e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007354:	f7fa ffb4 	bl	80022c0 <HAL_GetTick>
 8007358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800735a:	e008      	b.n	800736e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800735c:	f7fa ffb0 	bl	80022c0 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b02      	cmp	r3, #2
 8007368:	d901      	bls.n	800736e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800736a:	2303      	movs	r3, #3
 800736c:	e10e      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800736e:	4b39      	ldr	r3, [pc, #228]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1f0      	bne.n	800735c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800737a:	4b36      	ldr	r3, [pc, #216]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 800737c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800737e:	4b37      	ldr	r3, [pc, #220]	; (800745c <HAL_RCC_OscConfig+0x774>)
 8007380:	4013      	ands	r3, r2
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800738a:	0112      	lsls	r2, r2, #4
 800738c:	430a      	orrs	r2, r1
 800738e:	4931      	ldr	r1, [pc, #196]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007390:	4313      	orrs	r3, r2
 8007392:	628b      	str	r3, [r1, #40]	; 0x28
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007398:	3b01      	subs	r3, #1
 800739a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a2:	3b01      	subs	r3, #1
 80073a4:	025b      	lsls	r3, r3, #9
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	431a      	orrs	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	3b01      	subs	r3, #1
 80073b0:	041b      	lsls	r3, r3, #16
 80073b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073bc:	3b01      	subs	r3, #1
 80073be:	061b      	lsls	r3, r3, #24
 80073c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80073c4:	4923      	ldr	r1, [pc, #140]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80073ca:	4b22      	ldr	r3, [pc, #136]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80073cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ce:	4a21      	ldr	r2, [pc, #132]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80073d0:	f023 0301 	bic.w	r3, r3, #1
 80073d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80073d6:	4b1f      	ldr	r3, [pc, #124]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80073d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073da:	4b21      	ldr	r3, [pc, #132]	; (8007460 <HAL_RCC_OscConfig+0x778>)
 80073dc:	4013      	ands	r3, r2
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80073e2:	00d2      	lsls	r2, r2, #3
 80073e4:	491b      	ldr	r1, [pc, #108]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80073ea:	4b1a      	ldr	r3, [pc, #104]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80073ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ee:	f023 020c 	bic.w	r2, r3, #12
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	4917      	ldr	r1, [pc, #92]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80073f8:	4313      	orrs	r3, r2
 80073fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80073fc:	4b15      	ldr	r3, [pc, #84]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 80073fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007400:	f023 0202 	bic.w	r2, r3, #2
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007408:	4912      	ldr	r1, [pc, #72]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 800740a:	4313      	orrs	r3, r2
 800740c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800740e:	4b11      	ldr	r3, [pc, #68]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	4a10      	ldr	r2, [pc, #64]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007418:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800741a:	4b0e      	ldr	r3, [pc, #56]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 800741c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741e:	4a0d      	ldr	r2, [pc, #52]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007424:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007426:	4b0b      	ldr	r3, [pc, #44]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742a:	4a0a      	ldr	r2, [pc, #40]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 800742c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007430:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007432:	4b08      	ldr	r3, [pc, #32]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007436:	4a07      	ldr	r2, [pc, #28]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007438:	f043 0301 	orr.w	r3, r3, #1
 800743c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800743e:	4b05      	ldr	r3, [pc, #20]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a04      	ldr	r2, [pc, #16]	; (8007454 <HAL_RCC_OscConfig+0x76c>)
 8007444:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744a:	f7fa ff39 	bl	80022c0 <HAL_GetTick>
 800744e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007450:	e011      	b.n	8007476 <HAL_RCC_OscConfig+0x78e>
 8007452:	bf00      	nop
 8007454:	58024400 	.word	0x58024400
 8007458:	58024800 	.word	0x58024800
 800745c:	fffffc0c 	.word	0xfffffc0c
 8007460:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007464:	f7fa ff2c 	bl	80022c0 <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b02      	cmp	r3, #2
 8007470:	d901      	bls.n	8007476 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e08a      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007476:	4b47      	ldr	r3, [pc, #284]	; (8007594 <HAL_RCC_OscConfig+0x8ac>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0f0      	beq.n	8007464 <HAL_RCC_OscConfig+0x77c>
 8007482:	e082      	b.n	800758a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007484:	4b43      	ldr	r3, [pc, #268]	; (8007594 <HAL_RCC_OscConfig+0x8ac>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a42      	ldr	r2, [pc, #264]	; (8007594 <HAL_RCC_OscConfig+0x8ac>)
 800748a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800748e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007490:	f7fa ff16 	bl	80022c0 <HAL_GetTick>
 8007494:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007496:	e008      	b.n	80074aa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007498:	f7fa ff12 	bl	80022c0 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d901      	bls.n	80074aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e070      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074aa:	4b3a      	ldr	r3, [pc, #232]	; (8007594 <HAL_RCC_OscConfig+0x8ac>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1f0      	bne.n	8007498 <HAL_RCC_OscConfig+0x7b0>
 80074b6:	e068      	b.n	800758a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80074b8:	4b36      	ldr	r3, [pc, #216]	; (8007594 <HAL_RCC_OscConfig+0x8ac>)
 80074ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80074be:	4b35      	ldr	r3, [pc, #212]	; (8007594 <HAL_RCC_OscConfig+0x8ac>)
 80074c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d031      	beq.n	8007530 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f003 0203 	and.w	r2, r3, #3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d12a      	bne.n	8007530 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	091b      	lsrs	r3, r3, #4
 80074de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d122      	bne.n	8007530 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d11a      	bne.n	8007530 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	0a5b      	lsrs	r3, r3, #9
 80074fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007506:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007508:	429a      	cmp	r2, r3
 800750a:	d111      	bne.n	8007530 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	0c1b      	lsrs	r3, r3, #16
 8007510:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007518:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800751a:	429a      	cmp	r2, r3
 800751c:	d108      	bne.n	8007530 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	0e1b      	lsrs	r3, r3, #24
 8007522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800752c:	429a      	cmp	r2, r3
 800752e:	d001      	beq.n	8007534 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e02b      	b.n	800758c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007534:	4b17      	ldr	r3, [pc, #92]	; (8007594 <HAL_RCC_OscConfig+0x8ac>)
 8007536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007538:	08db      	lsrs	r3, r3, #3
 800753a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800753e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	429a      	cmp	r2, r3
 8007548:	d01f      	beq.n	800758a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800754a:	4b12      	ldr	r3, [pc, #72]	; (8007594 <HAL_RCC_OscConfig+0x8ac>)
 800754c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754e:	4a11      	ldr	r2, [pc, #68]	; (8007594 <HAL_RCC_OscConfig+0x8ac>)
 8007550:	f023 0301 	bic.w	r3, r3, #1
 8007554:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007556:	f7fa feb3 	bl	80022c0 <HAL_GetTick>
 800755a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800755c:	bf00      	nop
 800755e:	f7fa feaf 	bl	80022c0 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007566:	4293      	cmp	r3, r2
 8007568:	d0f9      	beq.n	800755e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800756a:	4b0a      	ldr	r3, [pc, #40]	; (8007594 <HAL_RCC_OscConfig+0x8ac>)
 800756c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800756e:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <HAL_RCC_OscConfig+0x8b0>)
 8007570:	4013      	ands	r3, r2
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007576:	00d2      	lsls	r2, r2, #3
 8007578:	4906      	ldr	r1, [pc, #24]	; (8007594 <HAL_RCC_OscConfig+0x8ac>)
 800757a:	4313      	orrs	r3, r2
 800757c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800757e:	4b05      	ldr	r3, [pc, #20]	; (8007594 <HAL_RCC_OscConfig+0x8ac>)
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	4a04      	ldr	r2, [pc, #16]	; (8007594 <HAL_RCC_OscConfig+0x8ac>)
 8007584:	f043 0301 	orr.w	r3, r3, #1
 8007588:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3730      	adds	r7, #48	; 0x30
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	58024400 	.word	0x58024400
 8007598:	ffff0007 	.word	0xffff0007

0800759c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d101      	bne.n	80075b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e19c      	b.n	80078ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075b0:	4b8a      	ldr	r3, [pc, #552]	; (80077dc <HAL_RCC_ClockConfig+0x240>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 030f 	and.w	r3, r3, #15
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d910      	bls.n	80075e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075be:	4b87      	ldr	r3, [pc, #540]	; (80077dc <HAL_RCC_ClockConfig+0x240>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f023 020f 	bic.w	r2, r3, #15
 80075c6:	4985      	ldr	r1, [pc, #532]	; (80077dc <HAL_RCC_ClockConfig+0x240>)
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ce:	4b83      	ldr	r3, [pc, #524]	; (80077dc <HAL_RCC_ClockConfig+0x240>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d001      	beq.n	80075e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e184      	b.n	80078ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d010      	beq.n	800760e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691a      	ldr	r2, [r3, #16]
 80075f0:	4b7b      	ldr	r3, [pc, #492]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 80075f2:	699b      	ldr	r3, [r3, #24]
 80075f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d908      	bls.n	800760e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80075fc:	4b78      	ldr	r3, [pc, #480]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	4975      	ldr	r1, [pc, #468]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 800760a:	4313      	orrs	r3, r2
 800760c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0308 	and.w	r3, r3, #8
 8007616:	2b00      	cmp	r3, #0
 8007618:	d010      	beq.n	800763c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	695a      	ldr	r2, [r3, #20]
 800761e:	4b70      	ldr	r3, [pc, #448]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007626:	429a      	cmp	r2, r3
 8007628:	d908      	bls.n	800763c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800762a:	4b6d      	ldr	r3, [pc, #436]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	496a      	ldr	r1, [pc, #424]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 8007638:	4313      	orrs	r3, r2
 800763a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0310 	and.w	r3, r3, #16
 8007644:	2b00      	cmp	r3, #0
 8007646:	d010      	beq.n	800766a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	699a      	ldr	r2, [r3, #24]
 800764c:	4b64      	ldr	r3, [pc, #400]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007654:	429a      	cmp	r2, r3
 8007656:	d908      	bls.n	800766a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007658:	4b61      	ldr	r3, [pc, #388]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	495e      	ldr	r1, [pc, #376]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 8007666:	4313      	orrs	r3, r2
 8007668:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0320 	and.w	r3, r3, #32
 8007672:	2b00      	cmp	r3, #0
 8007674:	d010      	beq.n	8007698 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	69da      	ldr	r2, [r3, #28]
 800767a:	4b59      	ldr	r3, [pc, #356]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007682:	429a      	cmp	r2, r3
 8007684:	d908      	bls.n	8007698 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007686:	4b56      	ldr	r3, [pc, #344]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	69db      	ldr	r3, [r3, #28]
 8007692:	4953      	ldr	r1, [pc, #332]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 8007694:	4313      	orrs	r3, r2
 8007696:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0302 	and.w	r3, r3, #2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d010      	beq.n	80076c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68da      	ldr	r2, [r3, #12]
 80076a8:	4b4d      	ldr	r3, [pc, #308]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	f003 030f 	and.w	r3, r3, #15
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d908      	bls.n	80076c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076b4:	4b4a      	ldr	r3, [pc, #296]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 80076b6:	699b      	ldr	r3, [r3, #24]
 80076b8:	f023 020f 	bic.w	r2, r3, #15
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	4947      	ldr	r1, [pc, #284]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0301 	and.w	r3, r3, #1
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d055      	beq.n	800777e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80076d2:	4b43      	ldr	r3, [pc, #268]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	4940      	ldr	r1, [pc, #256]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2b02      	cmp	r3, #2
 80076ea:	d107      	bne.n	80076fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80076ec:	4b3c      	ldr	r3, [pc, #240]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d121      	bne.n	800773c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e0f6      	b.n	80078ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b03      	cmp	r3, #3
 8007702:	d107      	bne.n	8007714 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007704:	4b36      	ldr	r3, [pc, #216]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d115      	bne.n	800773c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e0ea      	b.n	80078ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d107      	bne.n	800772c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800771c:	4b30      	ldr	r3, [pc, #192]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007724:	2b00      	cmp	r3, #0
 8007726:	d109      	bne.n	800773c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e0de      	b.n	80078ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800772c:	4b2c      	ldr	r3, [pc, #176]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f003 0304 	and.w	r3, r3, #4
 8007734:	2b00      	cmp	r3, #0
 8007736:	d101      	bne.n	800773c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e0d6      	b.n	80078ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800773c:	4b28      	ldr	r3, [pc, #160]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	f023 0207 	bic.w	r2, r3, #7
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	4925      	ldr	r1, [pc, #148]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 800774a:	4313      	orrs	r3, r2
 800774c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800774e:	f7fa fdb7 	bl	80022c0 <HAL_GetTick>
 8007752:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007754:	e00a      	b.n	800776c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007756:	f7fa fdb3 	bl	80022c0 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	f241 3288 	movw	r2, #5000	; 0x1388
 8007764:	4293      	cmp	r3, r2
 8007766:	d901      	bls.n	800776c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e0be      	b.n	80078ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800776c:	4b1c      	ldr	r3, [pc, #112]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	00db      	lsls	r3, r3, #3
 800777a:	429a      	cmp	r2, r3
 800777c:	d1eb      	bne.n	8007756 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d010      	beq.n	80077ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68da      	ldr	r2, [r3, #12]
 800778e:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	f003 030f 	and.w	r3, r3, #15
 8007796:	429a      	cmp	r2, r3
 8007798:	d208      	bcs.n	80077ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800779a:	4b11      	ldr	r3, [pc, #68]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	f023 020f 	bic.w	r2, r3, #15
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	490e      	ldr	r1, [pc, #56]	; (80077e0 <HAL_RCC_ClockConfig+0x244>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077ac:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <HAL_RCC_ClockConfig+0x240>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 030f 	and.w	r3, r3, #15
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d214      	bcs.n	80077e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ba:	4b08      	ldr	r3, [pc, #32]	; (80077dc <HAL_RCC_ClockConfig+0x240>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f023 020f 	bic.w	r2, r3, #15
 80077c2:	4906      	ldr	r1, [pc, #24]	; (80077dc <HAL_RCC_ClockConfig+0x240>)
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077ca:	4b04      	ldr	r3, [pc, #16]	; (80077dc <HAL_RCC_ClockConfig+0x240>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d005      	beq.n	80077e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	e086      	b.n	80078ea <HAL_RCC_ClockConfig+0x34e>
 80077dc:	52002000 	.word	0x52002000
 80077e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0304 	and.w	r3, r3, #4
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d010      	beq.n	8007812 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691a      	ldr	r2, [r3, #16]
 80077f4:	4b3f      	ldr	r3, [pc, #252]	; (80078f4 <HAL_RCC_ClockConfig+0x358>)
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d208      	bcs.n	8007812 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007800:	4b3c      	ldr	r3, [pc, #240]	; (80078f4 <HAL_RCC_ClockConfig+0x358>)
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	4939      	ldr	r1, [pc, #228]	; (80078f4 <HAL_RCC_ClockConfig+0x358>)
 800780e:	4313      	orrs	r3, r2
 8007810:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0308 	and.w	r3, r3, #8
 800781a:	2b00      	cmp	r3, #0
 800781c:	d010      	beq.n	8007840 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	695a      	ldr	r2, [r3, #20]
 8007822:	4b34      	ldr	r3, [pc, #208]	; (80078f4 <HAL_RCC_ClockConfig+0x358>)
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800782a:	429a      	cmp	r2, r3
 800782c:	d208      	bcs.n	8007840 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800782e:	4b31      	ldr	r3, [pc, #196]	; (80078f4 <HAL_RCC_ClockConfig+0x358>)
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	492e      	ldr	r1, [pc, #184]	; (80078f4 <HAL_RCC_ClockConfig+0x358>)
 800783c:	4313      	orrs	r3, r2
 800783e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0310 	and.w	r3, r3, #16
 8007848:	2b00      	cmp	r3, #0
 800784a:	d010      	beq.n	800786e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	699a      	ldr	r2, [r3, #24]
 8007850:	4b28      	ldr	r3, [pc, #160]	; (80078f4 <HAL_RCC_ClockConfig+0x358>)
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007858:	429a      	cmp	r2, r3
 800785a:	d208      	bcs.n	800786e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800785c:	4b25      	ldr	r3, [pc, #148]	; (80078f4 <HAL_RCC_ClockConfig+0x358>)
 800785e:	69db      	ldr	r3, [r3, #28]
 8007860:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	4922      	ldr	r1, [pc, #136]	; (80078f4 <HAL_RCC_ClockConfig+0x358>)
 800786a:	4313      	orrs	r3, r2
 800786c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0320 	and.w	r3, r3, #32
 8007876:	2b00      	cmp	r3, #0
 8007878:	d010      	beq.n	800789c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69da      	ldr	r2, [r3, #28]
 800787e:	4b1d      	ldr	r3, [pc, #116]	; (80078f4 <HAL_RCC_ClockConfig+0x358>)
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007886:	429a      	cmp	r2, r3
 8007888:	d208      	bcs.n	800789c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800788a:	4b1a      	ldr	r3, [pc, #104]	; (80078f4 <HAL_RCC_ClockConfig+0x358>)
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	4917      	ldr	r1, [pc, #92]	; (80078f4 <HAL_RCC_ClockConfig+0x358>)
 8007898:	4313      	orrs	r3, r2
 800789a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800789c:	f000 f834 	bl	8007908 <HAL_RCC_GetSysClockFreq>
 80078a0:	4602      	mov	r2, r0
 80078a2:	4b14      	ldr	r3, [pc, #80]	; (80078f4 <HAL_RCC_ClockConfig+0x358>)
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	0a1b      	lsrs	r3, r3, #8
 80078a8:	f003 030f 	and.w	r3, r3, #15
 80078ac:	4912      	ldr	r1, [pc, #72]	; (80078f8 <HAL_RCC_ClockConfig+0x35c>)
 80078ae:	5ccb      	ldrb	r3, [r1, r3]
 80078b0:	f003 031f 	and.w	r3, r3, #31
 80078b4:	fa22 f303 	lsr.w	r3, r2, r3
 80078b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078ba:	4b0e      	ldr	r3, [pc, #56]	; (80078f4 <HAL_RCC_ClockConfig+0x358>)
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	f003 030f 	and.w	r3, r3, #15
 80078c2:	4a0d      	ldr	r2, [pc, #52]	; (80078f8 <HAL_RCC_ClockConfig+0x35c>)
 80078c4:	5cd3      	ldrb	r3, [r2, r3]
 80078c6:	f003 031f 	and.w	r3, r3, #31
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	fa22 f303 	lsr.w	r3, r2, r3
 80078d0:	4a0a      	ldr	r2, [pc, #40]	; (80078fc <HAL_RCC_ClockConfig+0x360>)
 80078d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078d4:	4a0a      	ldr	r2, [pc, #40]	; (8007900 <HAL_RCC_ClockConfig+0x364>)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80078da:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <HAL_RCC_ClockConfig+0x368>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fa f9fc 	bl	8001cdc <HAL_InitTick>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	58024400 	.word	0x58024400
 80078f8:	08025398 	.word	0x08025398
 80078fc:	24000004 	.word	0x24000004
 8007900:	24000000 	.word	0x24000000
 8007904:	24000008 	.word	0x24000008

08007908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007908:	b480      	push	{r7}
 800790a:	b089      	sub	sp, #36	; 0x24
 800790c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800790e:	4bb3      	ldr	r3, [pc, #716]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007916:	2b18      	cmp	r3, #24
 8007918:	f200 8155 	bhi.w	8007bc6 <HAL_RCC_GetSysClockFreq+0x2be>
 800791c:	a201      	add	r2, pc, #4	; (adr r2, 8007924 <HAL_RCC_GetSysClockFreq+0x1c>)
 800791e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007922:	bf00      	nop
 8007924:	08007989 	.word	0x08007989
 8007928:	08007bc7 	.word	0x08007bc7
 800792c:	08007bc7 	.word	0x08007bc7
 8007930:	08007bc7 	.word	0x08007bc7
 8007934:	08007bc7 	.word	0x08007bc7
 8007938:	08007bc7 	.word	0x08007bc7
 800793c:	08007bc7 	.word	0x08007bc7
 8007940:	08007bc7 	.word	0x08007bc7
 8007944:	080079af 	.word	0x080079af
 8007948:	08007bc7 	.word	0x08007bc7
 800794c:	08007bc7 	.word	0x08007bc7
 8007950:	08007bc7 	.word	0x08007bc7
 8007954:	08007bc7 	.word	0x08007bc7
 8007958:	08007bc7 	.word	0x08007bc7
 800795c:	08007bc7 	.word	0x08007bc7
 8007960:	08007bc7 	.word	0x08007bc7
 8007964:	080079b5 	.word	0x080079b5
 8007968:	08007bc7 	.word	0x08007bc7
 800796c:	08007bc7 	.word	0x08007bc7
 8007970:	08007bc7 	.word	0x08007bc7
 8007974:	08007bc7 	.word	0x08007bc7
 8007978:	08007bc7 	.word	0x08007bc7
 800797c:	08007bc7 	.word	0x08007bc7
 8007980:	08007bc7 	.word	0x08007bc7
 8007984:	080079bb 	.word	0x080079bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007988:	4b94      	ldr	r3, [pc, #592]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0320 	and.w	r3, r3, #32
 8007990:	2b00      	cmp	r3, #0
 8007992:	d009      	beq.n	80079a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007994:	4b91      	ldr	r3, [pc, #580]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	08db      	lsrs	r3, r3, #3
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	4a90      	ldr	r2, [pc, #576]	; (8007be0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079a0:	fa22 f303 	lsr.w	r3, r2, r3
 80079a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80079a6:	e111      	b.n	8007bcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80079a8:	4b8d      	ldr	r3, [pc, #564]	; (8007be0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079aa:	61bb      	str	r3, [r7, #24]
      break;
 80079ac:	e10e      	b.n	8007bcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80079ae:	4b8d      	ldr	r3, [pc, #564]	; (8007be4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079b0:	61bb      	str	r3, [r7, #24]
      break;
 80079b2:	e10b      	b.n	8007bcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80079b4:	4b8c      	ldr	r3, [pc, #560]	; (8007be8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80079b6:	61bb      	str	r3, [r7, #24]
      break;
 80079b8:	e108      	b.n	8007bcc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079ba:	4b88      	ldr	r3, [pc, #544]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079be:	f003 0303 	and.w	r3, r3, #3
 80079c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80079c4:	4b85      	ldr	r3, [pc, #532]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c8:	091b      	lsrs	r3, r3, #4
 80079ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80079d0:	4b82      	ldr	r3, [pc, #520]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80079da:	4b80      	ldr	r3, [pc, #512]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079de:	08db      	lsrs	r3, r3, #3
 80079e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	fb02 f303 	mul.w	r3, r2, r3
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 80e1 	beq.w	8007bc0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	f000 8083 	beq.w	8007b0c <HAL_RCC_GetSysClockFreq+0x204>
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	f200 80a1 	bhi.w	8007b50 <HAL_RCC_GetSysClockFreq+0x248>
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <HAL_RCC_GetSysClockFreq+0x114>
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d056      	beq.n	8007ac8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a1a:	e099      	b.n	8007b50 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a1c:	4b6f      	ldr	r3, [pc, #444]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 0320 	and.w	r3, r3, #32
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d02d      	beq.n	8007a84 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a28:	4b6c      	ldr	r3, [pc, #432]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	08db      	lsrs	r3, r3, #3
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	4a6b      	ldr	r2, [pc, #428]	; (8007be0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a34:	fa22 f303 	lsr.w	r3, r2, r3
 8007a38:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	ee07 3a90 	vmov	s15, r3
 8007a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a52:	4b62      	ldr	r3, [pc, #392]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5a:	ee07 3a90 	vmov	s15, r3
 8007a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a62:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a66:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a7e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007a82:	e087      	b.n	8007b94 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	ee07 3a90 	vmov	s15, r3
 8007a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007bf0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a96:	4b51      	ldr	r3, [pc, #324]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a9e:	ee07 3a90 	vmov	s15, r3
 8007aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007aaa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8007aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ac2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ac6:	e065      	b.n	8007b94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	ee07 3a90 	vmov	s15, r3
 8007ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007bf4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ada:	4b40      	ldr	r3, [pc, #256]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ae2:	ee07 3a90 	vmov	s15, r3
 8007ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aea:	ed97 6a02 	vldr	s12, [r7, #8]
 8007aee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8007af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007afa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b0a:	e043      	b.n	8007b94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	ee07 3a90 	vmov	s15, r3
 8007b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b16:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007bf8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b1e:	4b2f      	ldr	r3, [pc, #188]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b26:	ee07 3a90 	vmov	s15, r3
 8007b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b32:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b4e:	e021      	b.n	8007b94 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	ee07 3a90 	vmov	s15, r3
 8007b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007bf4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b62:	4b1e      	ldr	r3, [pc, #120]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b76:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007bec <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b92:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007b94:	4b11      	ldr	r3, [pc, #68]	; (8007bdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b98:	0a5b      	lsrs	r3, r3, #9
 8007b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	ee07 3a90 	vmov	s15, r3
 8007ba8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007bac:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bb8:	ee17 3a90 	vmov	r3, s15
 8007bbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007bbe:	e005      	b.n	8007bcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	61bb      	str	r3, [r7, #24]
      break;
 8007bc4:	e002      	b.n	8007bcc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007bc6:	4b07      	ldr	r3, [pc, #28]	; (8007be4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007bc8:	61bb      	str	r3, [r7, #24]
      break;
 8007bca:	bf00      	nop
  }

  return sysclockfreq;
 8007bcc:	69bb      	ldr	r3, [r7, #24]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3724      	adds	r7, #36	; 0x24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	58024400 	.word	0x58024400
 8007be0:	03d09000 	.word	0x03d09000
 8007be4:	003d0900 	.word	0x003d0900
 8007be8:	017d7840 	.word	0x017d7840
 8007bec:	46000000 	.word	0x46000000
 8007bf0:	4c742400 	.word	0x4c742400
 8007bf4:	4a742400 	.word	0x4a742400
 8007bf8:	4bbebc20 	.word	0x4bbebc20

08007bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c02:	f7ff fe81 	bl	8007908 <HAL_RCC_GetSysClockFreq>
 8007c06:	4602      	mov	r2, r0
 8007c08:	4b10      	ldr	r3, [pc, #64]	; (8007c4c <HAL_RCC_GetHCLKFreq+0x50>)
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	0a1b      	lsrs	r3, r3, #8
 8007c0e:	f003 030f 	and.w	r3, r3, #15
 8007c12:	490f      	ldr	r1, [pc, #60]	; (8007c50 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c14:	5ccb      	ldrb	r3, [r1, r3]
 8007c16:	f003 031f 	and.w	r3, r3, #31
 8007c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c1e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c20:	4b0a      	ldr	r3, [pc, #40]	; (8007c4c <HAL_RCC_GetHCLKFreq+0x50>)
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	f003 030f 	and.w	r3, r3, #15
 8007c28:	4a09      	ldr	r2, [pc, #36]	; (8007c50 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c2a:	5cd3      	ldrb	r3, [r2, r3]
 8007c2c:	f003 031f 	and.w	r3, r3, #31
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	fa22 f303 	lsr.w	r3, r2, r3
 8007c36:	4a07      	ldr	r2, [pc, #28]	; (8007c54 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c38:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c3a:	4a07      	ldr	r2, [pc, #28]	; (8007c58 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c40:	4b04      	ldr	r3, [pc, #16]	; (8007c54 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c42:	681b      	ldr	r3, [r3, #0]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	58024400 	.word	0x58024400
 8007c50:	08025398 	.word	0x08025398
 8007c54:	24000004 	.word	0x24000004
 8007c58:	24000000 	.word	0x24000000

08007c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007c60:	f7ff ffcc 	bl	8007bfc <HAL_RCC_GetHCLKFreq>
 8007c64:	4602      	mov	r2, r0
 8007c66:	4b06      	ldr	r3, [pc, #24]	; (8007c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	091b      	lsrs	r3, r3, #4
 8007c6c:	f003 0307 	and.w	r3, r3, #7
 8007c70:	4904      	ldr	r1, [pc, #16]	; (8007c84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c72:	5ccb      	ldrb	r3, [r1, r3]
 8007c74:	f003 031f 	and.w	r3, r3, #31
 8007c78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	58024400 	.word	0x58024400
 8007c84:	08025398 	.word	0x08025398

08007c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007c8c:	f7ff ffb6 	bl	8007bfc <HAL_RCC_GetHCLKFreq>
 8007c90:	4602      	mov	r2, r0
 8007c92:	4b06      	ldr	r3, [pc, #24]	; (8007cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	0a1b      	lsrs	r3, r3, #8
 8007c98:	f003 0307 	and.w	r3, r3, #7
 8007c9c:	4904      	ldr	r1, [pc, #16]	; (8007cb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007c9e:	5ccb      	ldrb	r3, [r1, r3]
 8007ca0:	f003 031f 	and.w	r3, r3, #31
 8007ca4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	58024400 	.word	0x58024400
 8007cb0:	08025398 	.word	0x08025398

08007cb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	223f      	movs	r2, #63	; 0x3f
 8007cc2:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007cc4:	4b1a      	ldr	r3, [pc, #104]	; (8007d30 <HAL_RCC_GetClockConfig+0x7c>)
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	f003 0207 	and.w	r2, r3, #7
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007cd0:	4b17      	ldr	r3, [pc, #92]	; (8007d30 <HAL_RCC_GetClockConfig+0x7c>)
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007cdc:	4b14      	ldr	r3, [pc, #80]	; (8007d30 <HAL_RCC_GetClockConfig+0x7c>)
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	f003 020f 	and.w	r2, r3, #15
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007ce8:	4b11      	ldr	r3, [pc, #68]	; (8007d30 <HAL_RCC_GetClockConfig+0x7c>)
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007cf4:	4b0e      	ldr	r3, [pc, #56]	; (8007d30 <HAL_RCC_GetClockConfig+0x7c>)
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007d00:	4b0b      	ldr	r3, [pc, #44]	; (8007d30 <HAL_RCC_GetClockConfig+0x7c>)
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007d0c:	4b08      	ldr	r3, [pc, #32]	; (8007d30 <HAL_RCC_GetClockConfig+0x7c>)
 8007d0e:	6a1b      	ldr	r3, [r3, #32]
 8007d10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d18:	4b06      	ldr	r3, [pc, #24]	; (8007d34 <HAL_RCC_GetClockConfig+0x80>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 020f 	and.w	r2, r3, #15
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	601a      	str	r2, [r3, #0]
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	58024400 	.word	0x58024400
 8007d34:	52002000 	.word	0x52002000

08007d38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d3c:	b0ca      	sub	sp, #296	; 0x128
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d44:	2300      	movs	r3, #0
 8007d46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007d5c:	2500      	movs	r5, #0
 8007d5e:	ea54 0305 	orrs.w	r3, r4, r5
 8007d62:	d049      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d6e:	d02f      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007d70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d74:	d828      	bhi.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d7a:	d01a      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d80:	d822      	bhi.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007d86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d8a:	d007      	beq.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d8c:	e01c      	b.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d8e:	4bb8      	ldr	r3, [pc, #736]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d92:	4ab7      	ldr	r2, [pc, #732]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d9a:	e01a      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007da0:	3308      	adds	r3, #8
 8007da2:	2102      	movs	r1, #2
 8007da4:	4618      	mov	r0, r3
 8007da6:	f001 fc8f 	bl	80096c8 <RCCEx_PLL2_Config>
 8007daa:	4603      	mov	r3, r0
 8007dac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007db0:	e00f      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db6:	3328      	adds	r3, #40	; 0x28
 8007db8:	2102      	movs	r1, #2
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f001 fd36 	bl	800982c <RCCEx_PLL3_Config>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007dc6:	e004      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007dce:	e000      	b.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10a      	bne.n	8007df0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007dda:	4ba5      	ldr	r3, [pc, #660]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dde:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007de8:	4aa1      	ldr	r2, [pc, #644]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dea:	430b      	orrs	r3, r1
 8007dec:	6513      	str	r3, [r2, #80]	; 0x50
 8007dee:	e003      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007df4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007e04:	f04f 0900 	mov.w	r9, #0
 8007e08:	ea58 0309 	orrs.w	r3, r8, r9
 8007e0c:	d047      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	d82a      	bhi.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007e18:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007e35 	.word	0x08007e35
 8007e24:	08007e43 	.word	0x08007e43
 8007e28:	08007e59 	.word	0x08007e59
 8007e2c:	08007e77 	.word	0x08007e77
 8007e30:	08007e77 	.word	0x08007e77
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e34:	4b8e      	ldr	r3, [pc, #568]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e38:	4a8d      	ldr	r2, [pc, #564]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e40:	e01a      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e46:	3308      	adds	r3, #8
 8007e48:	2100      	movs	r1, #0
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f001 fc3c 	bl	80096c8 <RCCEx_PLL2_Config>
 8007e50:	4603      	mov	r3, r0
 8007e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e56:	e00f      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e5c:	3328      	adds	r3, #40	; 0x28
 8007e5e:	2100      	movs	r1, #0
 8007e60:	4618      	mov	r0, r3
 8007e62:	f001 fce3 	bl	800982c <RCCEx_PLL3_Config>
 8007e66:	4603      	mov	r3, r0
 8007e68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e6c:	e004      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e74:	e000      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007e76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d10a      	bne.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e80:	4b7b      	ldr	r3, [pc, #492]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e84:	f023 0107 	bic.w	r1, r3, #7
 8007e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8e:	4a78      	ldr	r2, [pc, #480]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e90:	430b      	orrs	r3, r1
 8007e92:	6513      	str	r3, [r2, #80]	; 0x50
 8007e94:	e003      	b.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8007eaa:	f04f 0b00 	mov.w	fp, #0
 8007eae:	ea5a 030b 	orrs.w	r3, sl, fp
 8007eb2:	d04c      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ebe:	d030      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec4:	d829      	bhi.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ec8:	d02d      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007eca:	2bc0      	cmp	r3, #192	; 0xc0
 8007ecc:	d825      	bhi.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ece:	2b80      	cmp	r3, #128	; 0x80
 8007ed0:	d018      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007ed2:	2b80      	cmp	r3, #128	; 0x80
 8007ed4:	d821      	bhi.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007eda:	2b40      	cmp	r3, #64	; 0x40
 8007edc:	d007      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007ede:	e01c      	b.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ee0:	4b63      	ldr	r3, [pc, #396]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee4:	4a62      	ldr	r2, [pc, #392]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007eec:	e01c      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef2:	3308      	adds	r3, #8
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f001 fbe6 	bl	80096c8 <RCCEx_PLL2_Config>
 8007efc:	4603      	mov	r3, r0
 8007efe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f02:	e011      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f08:	3328      	adds	r3, #40	; 0x28
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f001 fc8d 	bl	800982c <RCCEx_PLL3_Config>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f18:	e006      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f20:	e002      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f22:	bf00      	nop
 8007f24:	e000      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10a      	bne.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007f30:	4b4f      	ldr	r3, [pc, #316]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f34:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f3e:	4a4c      	ldr	r2, [pc, #304]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f40:	430b      	orrs	r3, r1
 8007f42:	6513      	str	r3, [r2, #80]	; 0x50
 8007f44:	e003      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f56:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007f5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007f64:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	d053      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f72:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f7a:	d035      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007f7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f80:	d82e      	bhi.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007f82:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f86:	d031      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007f88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f8c:	d828      	bhi.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f92:	d01a      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f98:	d822      	bhi.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007f9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007fa2:	d007      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007fa4:	e01c      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa6:	4b32      	ldr	r3, [pc, #200]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007faa:	4a31      	ldr	r2, [pc, #196]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fb2:	e01c      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fb8:	3308      	adds	r3, #8
 8007fba:	2100      	movs	r1, #0
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f001 fb83 	bl	80096c8 <RCCEx_PLL2_Config>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007fc8:	e011      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fce:	3328      	adds	r3, #40	; 0x28
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f001 fc2a 	bl	800982c <RCCEx_PLL3_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fde:	e006      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007fe6:	e002      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007fe8:	bf00      	nop
 8007fea:	e000      	b.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10b      	bne.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007ff6:	4b1e      	ldr	r3, [pc, #120]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ffa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008002:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008006:	4a1a      	ldr	r2, [pc, #104]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008008:	430b      	orrs	r3, r1
 800800a:	6593      	str	r3, [r2, #88]	; 0x58
 800800c:	e003      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800800e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008012:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008022:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008026:	2300      	movs	r3, #0
 8008028:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800802c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008030:	460b      	mov	r3, r1
 8008032:	4313      	orrs	r3, r2
 8008034:	d056      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800803a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800803e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008042:	d038      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008048:	d831      	bhi.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800804a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800804e:	d034      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008050:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008054:	d82b      	bhi.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008056:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800805a:	d01d      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800805c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008060:	d825      	bhi.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008062:	2b00      	cmp	r3, #0
 8008064:	d006      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008066:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800806a:	d00a      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800806c:	e01f      	b.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 800806e:	bf00      	nop
 8008070:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008074:	4ba2      	ldr	r3, [pc, #648]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008078:	4aa1      	ldr	r2, [pc, #644]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800807a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800807e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008080:	e01c      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008086:	3308      	adds	r3, #8
 8008088:	2100      	movs	r1, #0
 800808a:	4618      	mov	r0, r3
 800808c:	f001 fb1c 	bl	80096c8 <RCCEx_PLL2_Config>
 8008090:	4603      	mov	r3, r0
 8008092:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008096:	e011      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800809c:	3328      	adds	r3, #40	; 0x28
 800809e:	2100      	movs	r1, #0
 80080a0:	4618      	mov	r0, r3
 80080a2:	f001 fbc3 	bl	800982c <RCCEx_PLL3_Config>
 80080a6:	4603      	mov	r3, r0
 80080a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080ac:	e006      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80080b4:	e002      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80080b6:	bf00      	nop
 80080b8:	e000      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80080ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10b      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80080c4:	4b8e      	ldr	r3, [pc, #568]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80080cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80080d4:	4a8a      	ldr	r2, [pc, #552]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080d6:	430b      	orrs	r3, r1
 80080d8:	6593      	str	r3, [r2, #88]	; 0x58
 80080da:	e003      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80080e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80080e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80080f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80080f4:	2300      	movs	r3, #0
 80080f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80080fe:	460b      	mov	r3, r1
 8008100:	4313      	orrs	r3, r2
 8008102:	d03a      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800810a:	2b30      	cmp	r3, #48	; 0x30
 800810c:	d01f      	beq.n	800814e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800810e:	2b30      	cmp	r3, #48	; 0x30
 8008110:	d819      	bhi.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008112:	2b20      	cmp	r3, #32
 8008114:	d00c      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008116:	2b20      	cmp	r3, #32
 8008118:	d815      	bhi.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800811a:	2b00      	cmp	r3, #0
 800811c:	d019      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800811e:	2b10      	cmp	r3, #16
 8008120:	d111      	bne.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008122:	4b77      	ldr	r3, [pc, #476]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008126:	4a76      	ldr	r2, [pc, #472]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800812c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800812e:	e011      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008134:	3308      	adds	r3, #8
 8008136:	2102      	movs	r1, #2
 8008138:	4618      	mov	r0, r3
 800813a:	f001 fac5 	bl	80096c8 <RCCEx_PLL2_Config>
 800813e:	4603      	mov	r3, r0
 8008140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008144:	e006      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800814c:	e002      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800814e:	bf00      	nop
 8008150:	e000      	b.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008152:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008154:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10a      	bne.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800815c:	4b68      	ldr	r3, [pc, #416]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800815e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008160:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800816a:	4a65      	ldr	r2, [pc, #404]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800816c:	430b      	orrs	r3, r1
 800816e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008170:	e003      	b.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008172:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008176:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800817a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800817e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008182:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008186:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800818a:	2300      	movs	r3, #0
 800818c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008190:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008194:	460b      	mov	r3, r1
 8008196:	4313      	orrs	r3, r2
 8008198:	d051      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800819a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800819e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081a4:	d035      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80081a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081aa:	d82e      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80081ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081b0:	d031      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80081b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081b6:	d828      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80081b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081bc:	d01a      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80081be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c2:	d822      	bhi.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80081c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081cc:	d007      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80081ce:	e01c      	b.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081d0:	4b4b      	ldr	r3, [pc, #300]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	4a4a      	ldr	r2, [pc, #296]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80081dc:	e01c      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081e2:	3308      	adds	r3, #8
 80081e4:	2100      	movs	r1, #0
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 fa6e 	bl	80096c8 <RCCEx_PLL2_Config>
 80081ec:	4603      	mov	r3, r0
 80081ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80081f2:	e011      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f8:	3328      	adds	r3, #40	; 0x28
 80081fa:	2100      	movs	r1, #0
 80081fc:	4618      	mov	r0, r3
 80081fe:	f001 fb15 	bl	800982c <RCCEx_PLL3_Config>
 8008202:	4603      	mov	r3, r0
 8008204:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008208:	e006      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008210:	e002      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008212:	bf00      	nop
 8008214:	e000      	b.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008216:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008218:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800821c:	2b00      	cmp	r3, #0
 800821e:	d10a      	bne.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008220:	4b37      	ldr	r3, [pc, #220]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008224:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800822c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822e:	4a34      	ldr	r2, [pc, #208]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008230:	430b      	orrs	r3, r1
 8008232:	6513      	str	r3, [r2, #80]	; 0x50
 8008234:	e003      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800823a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008246:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800824a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800824e:	2300      	movs	r3, #0
 8008250:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008254:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008258:	460b      	mov	r3, r1
 800825a:	4313      	orrs	r3, r2
 800825c:	d056      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800825e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008268:	d033      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800826a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800826e:	d82c      	bhi.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008270:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008274:	d02f      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008276:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800827a:	d826      	bhi.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 800827c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008280:	d02b      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008282:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008286:	d820      	bhi.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800828c:	d012      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800828e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008292:	d81a      	bhi.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008294:	2b00      	cmp	r3, #0
 8008296:	d022      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800829c:	d115      	bne.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800829e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082a2:	3308      	adds	r3, #8
 80082a4:	2101      	movs	r1, #1
 80082a6:	4618      	mov	r0, r3
 80082a8:	f001 fa0e 	bl	80096c8 <RCCEx_PLL2_Config>
 80082ac:	4603      	mov	r3, r0
 80082ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80082b2:	e015      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082b8:	3328      	adds	r3, #40	; 0x28
 80082ba:	2101      	movs	r1, #1
 80082bc:	4618      	mov	r0, r3
 80082be:	f001 fab5 	bl	800982c <RCCEx_PLL3_Config>
 80082c2:	4603      	mov	r3, r0
 80082c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80082c8:	e00a      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082d0:	e006      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80082d2:	bf00      	nop
 80082d4:	e004      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80082d6:	bf00      	nop
 80082d8:	e002      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80082da:	bf00      	nop
 80082dc:	e000      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80082de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d10d      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80082e8:	4b05      	ldr	r3, [pc, #20]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80082f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082f6:	4a02      	ldr	r2, [pc, #8]	; (8008300 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082f8:	430b      	orrs	r3, r1
 80082fa:	6513      	str	r3, [r2, #80]	; 0x50
 80082fc:	e006      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80082fe:	bf00      	nop
 8008300:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008304:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008308:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800830c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008318:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800831c:	2300      	movs	r3, #0
 800831e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008322:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008326:	460b      	mov	r3, r1
 8008328:	4313      	orrs	r3, r2
 800832a:	d055      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800832c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008330:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008338:	d033      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800833a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800833e:	d82c      	bhi.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008344:	d02f      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800834a:	d826      	bhi.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800834c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008350:	d02b      	beq.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008352:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008356:	d820      	bhi.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008358:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800835c:	d012      	beq.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800835e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008362:	d81a      	bhi.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008364:	2b00      	cmp	r3, #0
 8008366:	d022      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008368:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800836c:	d115      	bne.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800836e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008372:	3308      	adds	r3, #8
 8008374:	2101      	movs	r1, #1
 8008376:	4618      	mov	r0, r3
 8008378:	f001 f9a6 	bl	80096c8 <RCCEx_PLL2_Config>
 800837c:	4603      	mov	r3, r0
 800837e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008382:	e015      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008388:	3328      	adds	r3, #40	; 0x28
 800838a:	2101      	movs	r1, #1
 800838c:	4618      	mov	r0, r3
 800838e:	f001 fa4d 	bl	800982c <RCCEx_PLL3_Config>
 8008392:	4603      	mov	r3, r0
 8008394:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008398:	e00a      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80083a0:	e006      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083a2:	bf00      	nop
 80083a4:	e004      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083a6:	bf00      	nop
 80083a8:	e002      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083aa:	bf00      	nop
 80083ac:	e000      	b.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10b      	bne.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80083b8:	4ba3      	ldr	r3, [pc, #652]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083bc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80083c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083c8:	4a9f      	ldr	r2, [pc, #636]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083ca:	430b      	orrs	r3, r1
 80083cc:	6593      	str	r3, [r2, #88]	; 0x58
 80083ce:	e003      	b.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80083d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80083e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80083e8:	2300      	movs	r3, #0
 80083ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80083ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80083f2:	460b      	mov	r3, r1
 80083f4:	4313      	orrs	r3, r2
 80083f6:	d037      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80083f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008402:	d00e      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008404:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008408:	d816      	bhi.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d018      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800840e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008412:	d111      	bne.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008414:	4b8c      	ldr	r3, [pc, #560]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008418:	4a8b      	ldr	r2, [pc, #556]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800841a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800841e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008420:	e00f      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008426:	3308      	adds	r3, #8
 8008428:	2101      	movs	r1, #1
 800842a:	4618      	mov	r0, r3
 800842c:	f001 f94c 	bl	80096c8 <RCCEx_PLL2_Config>
 8008430:	4603      	mov	r3, r0
 8008432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008436:	e004      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800843e:	e000      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10a      	bne.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800844a:	4b7f      	ldr	r3, [pc, #508]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800844c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800844e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008458:	4a7b      	ldr	r2, [pc, #492]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800845a:	430b      	orrs	r3, r1
 800845c:	6513      	str	r3, [r2, #80]	; 0x50
 800845e:	e003      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008464:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008478:	2300      	movs	r3, #0
 800847a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800847e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008482:	460b      	mov	r3, r1
 8008484:	4313      	orrs	r3, r2
 8008486:	d039      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800848c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800848e:	2b03      	cmp	r3, #3
 8008490:	d81c      	bhi.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008492:	a201      	add	r2, pc, #4	; (adr r2, 8008498 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008498:	080084d5 	.word	0x080084d5
 800849c:	080084a9 	.word	0x080084a9
 80084a0:	080084b7 	.word	0x080084b7
 80084a4:	080084d5 	.word	0x080084d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084a8:	4b67      	ldr	r3, [pc, #412]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ac:	4a66      	ldr	r2, [pc, #408]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80084b4:	e00f      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ba:	3308      	adds	r3, #8
 80084bc:	2102      	movs	r1, #2
 80084be:	4618      	mov	r0, r3
 80084c0:	f001 f902 	bl	80096c8 <RCCEx_PLL2_Config>
 80084c4:	4603      	mov	r3, r0
 80084c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80084ca:	e004      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80084cc:	2301      	movs	r3, #1
 80084ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80084d2:	e000      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80084d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d10a      	bne.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80084de:	4b5a      	ldr	r3, [pc, #360]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084e2:	f023 0103 	bic.w	r1, r3, #3
 80084e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ec:	4a56      	ldr	r2, [pc, #344]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084ee:	430b      	orrs	r3, r1
 80084f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80084f2:	e003      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80084f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80084fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008504:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800850c:	2300      	movs	r3, #0
 800850e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008512:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008516:	460b      	mov	r3, r1
 8008518:	4313      	orrs	r3, r2
 800851a:	f000 809f 	beq.w	800865c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800851e:	4b4b      	ldr	r3, [pc, #300]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a4a      	ldr	r2, [pc, #296]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008528:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800852a:	f7f9 fec9 	bl	80022c0 <HAL_GetTick>
 800852e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008532:	e00b      	b.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008534:	f7f9 fec4 	bl	80022c0 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b64      	cmp	r3, #100	; 0x64
 8008542:	d903      	bls.n	800854c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800854a:	e005      	b.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800854c:	4b3f      	ldr	r3, [pc, #252]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0ed      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008558:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800855c:	2b00      	cmp	r3, #0
 800855e:	d179      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008560:	4b39      	ldr	r3, [pc, #228]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008562:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008568:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800856c:	4053      	eors	r3, r2
 800856e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008572:	2b00      	cmp	r3, #0
 8008574:	d015      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008576:	4b34      	ldr	r3, [pc, #208]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800857a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800857e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008582:	4b31      	ldr	r3, [pc, #196]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008586:	4a30      	ldr	r2, [pc, #192]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800858c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800858e:	4b2e      	ldr	r3, [pc, #184]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008592:	4a2d      	ldr	r2, [pc, #180]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008598:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800859a:	4a2b      	ldr	r2, [pc, #172]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800859c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80085a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80085a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085ae:	d118      	bne.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085b0:	f7f9 fe86 	bl	80022c0 <HAL_GetTick>
 80085b4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085b8:	e00d      	b.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085ba:	f7f9 fe81 	bl	80022c0 <HAL_GetTick>
 80085be:	4602      	mov	r2, r0
 80085c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80085c4:	1ad2      	subs	r2, r2, r3
 80085c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d903      	bls.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80085d4:	e005      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085d6:	4b1c      	ldr	r3, [pc, #112]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0eb      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80085e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d129      	bne.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085fa:	d10e      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80085fc:	4b12      	ldr	r3, [pc, #72]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008608:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800860c:	091a      	lsrs	r2, r3, #4
 800860e:	4b10      	ldr	r3, [pc, #64]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008610:	4013      	ands	r3, r2
 8008612:	4a0d      	ldr	r2, [pc, #52]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008614:	430b      	orrs	r3, r1
 8008616:	6113      	str	r3, [r2, #16]
 8008618:	e005      	b.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800861a:	4b0b      	ldr	r3, [pc, #44]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	4a0a      	ldr	r2, [pc, #40]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008620:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008624:	6113      	str	r3, [r2, #16]
 8008626:	4b08      	ldr	r3, [pc, #32]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008628:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800862a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800862e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008636:	4a04      	ldr	r2, [pc, #16]	; (8008648 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008638:	430b      	orrs	r3, r1
 800863a:	6713      	str	r3, [r2, #112]	; 0x70
 800863c:	e00e      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800863e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008642:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8008646:	e009      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008648:	58024400 	.word	0x58024400
 800864c:	58024800 	.word	0x58024800
 8008650:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008654:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008658:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800865c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008664:	f002 0301 	and.w	r3, r2, #1
 8008668:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800866c:	2300      	movs	r3, #0
 800866e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008672:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008676:	460b      	mov	r3, r1
 8008678:	4313      	orrs	r3, r2
 800867a:	f000 8089 	beq.w	8008790 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800867e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008684:	2b28      	cmp	r3, #40	; 0x28
 8008686:	d86b      	bhi.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008688:	a201      	add	r2, pc, #4	; (adr r2, 8008690 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800868a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868e:	bf00      	nop
 8008690:	08008769 	.word	0x08008769
 8008694:	08008761 	.word	0x08008761
 8008698:	08008761 	.word	0x08008761
 800869c:	08008761 	.word	0x08008761
 80086a0:	08008761 	.word	0x08008761
 80086a4:	08008761 	.word	0x08008761
 80086a8:	08008761 	.word	0x08008761
 80086ac:	08008761 	.word	0x08008761
 80086b0:	08008735 	.word	0x08008735
 80086b4:	08008761 	.word	0x08008761
 80086b8:	08008761 	.word	0x08008761
 80086bc:	08008761 	.word	0x08008761
 80086c0:	08008761 	.word	0x08008761
 80086c4:	08008761 	.word	0x08008761
 80086c8:	08008761 	.word	0x08008761
 80086cc:	08008761 	.word	0x08008761
 80086d0:	0800874b 	.word	0x0800874b
 80086d4:	08008761 	.word	0x08008761
 80086d8:	08008761 	.word	0x08008761
 80086dc:	08008761 	.word	0x08008761
 80086e0:	08008761 	.word	0x08008761
 80086e4:	08008761 	.word	0x08008761
 80086e8:	08008761 	.word	0x08008761
 80086ec:	08008761 	.word	0x08008761
 80086f0:	08008769 	.word	0x08008769
 80086f4:	08008761 	.word	0x08008761
 80086f8:	08008761 	.word	0x08008761
 80086fc:	08008761 	.word	0x08008761
 8008700:	08008761 	.word	0x08008761
 8008704:	08008761 	.word	0x08008761
 8008708:	08008761 	.word	0x08008761
 800870c:	08008761 	.word	0x08008761
 8008710:	08008769 	.word	0x08008769
 8008714:	08008761 	.word	0x08008761
 8008718:	08008761 	.word	0x08008761
 800871c:	08008761 	.word	0x08008761
 8008720:	08008761 	.word	0x08008761
 8008724:	08008761 	.word	0x08008761
 8008728:	08008761 	.word	0x08008761
 800872c:	08008761 	.word	0x08008761
 8008730:	08008769 	.word	0x08008769
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008738:	3308      	adds	r3, #8
 800873a:	2101      	movs	r1, #1
 800873c:	4618      	mov	r0, r3
 800873e:	f000 ffc3 	bl	80096c8 <RCCEx_PLL2_Config>
 8008742:	4603      	mov	r3, r0
 8008744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008748:	e00f      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800874a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800874e:	3328      	adds	r3, #40	; 0x28
 8008750:	2101      	movs	r1, #1
 8008752:	4618      	mov	r0, r3
 8008754:	f001 f86a 	bl	800982c <RCCEx_PLL3_Config>
 8008758:	4603      	mov	r3, r0
 800875a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800875e:	e004      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008766:	e000      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800876a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008772:	4bbf      	ldr	r3, [pc, #764]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008776:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800877a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800877e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008780:	4abb      	ldr	r2, [pc, #748]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008782:	430b      	orrs	r3, r1
 8008784:	6553      	str	r3, [r2, #84]	; 0x54
 8008786:	e003      	b.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008788:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800878c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008798:	f002 0302 	and.w	r3, r2, #2
 800879c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087a0:	2300      	movs	r3, #0
 80087a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80087a6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80087aa:	460b      	mov	r3, r1
 80087ac:	4313      	orrs	r3, r2
 80087ae:	d041      	beq.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80087b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087b6:	2b05      	cmp	r3, #5
 80087b8:	d824      	bhi.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80087ba:	a201      	add	r2, pc, #4	; (adr r2, 80087c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80087bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c0:	0800880d 	.word	0x0800880d
 80087c4:	080087d9 	.word	0x080087d9
 80087c8:	080087ef 	.word	0x080087ef
 80087cc:	0800880d 	.word	0x0800880d
 80087d0:	0800880d 	.word	0x0800880d
 80087d4:	0800880d 	.word	0x0800880d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087dc:	3308      	adds	r3, #8
 80087de:	2101      	movs	r1, #1
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 ff71 	bl	80096c8 <RCCEx_PLL2_Config>
 80087e6:	4603      	mov	r3, r0
 80087e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80087ec:	e00f      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087f2:	3328      	adds	r3, #40	; 0x28
 80087f4:	2101      	movs	r1, #1
 80087f6:	4618      	mov	r0, r3
 80087f8:	f001 f818 	bl	800982c <RCCEx_PLL3_Config>
 80087fc:	4603      	mov	r3, r0
 80087fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008802:	e004      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800880a:	e000      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800880c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800880e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10a      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008816:	4b96      	ldr	r3, [pc, #600]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881a:	f023 0107 	bic.w	r1, r3, #7
 800881e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008822:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008824:	4a92      	ldr	r2, [pc, #584]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008826:	430b      	orrs	r3, r1
 8008828:	6553      	str	r3, [r2, #84]	; 0x54
 800882a:	e003      	b.n	8008834 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800882c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008830:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883c:	f002 0304 	and.w	r3, r2, #4
 8008840:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008844:	2300      	movs	r3, #0
 8008846:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800884a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800884e:	460b      	mov	r3, r1
 8008850:	4313      	orrs	r3, r2
 8008852:	d044      	beq.n	80088de <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800885c:	2b05      	cmp	r3, #5
 800885e:	d825      	bhi.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008860:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008866:	bf00      	nop
 8008868:	080088b5 	.word	0x080088b5
 800886c:	08008881 	.word	0x08008881
 8008870:	08008897 	.word	0x08008897
 8008874:	080088b5 	.word	0x080088b5
 8008878:	080088b5 	.word	0x080088b5
 800887c:	080088b5 	.word	0x080088b5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008884:	3308      	adds	r3, #8
 8008886:	2101      	movs	r1, #1
 8008888:	4618      	mov	r0, r3
 800888a:	f000 ff1d 	bl	80096c8 <RCCEx_PLL2_Config>
 800888e:	4603      	mov	r3, r0
 8008890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008894:	e00f      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800889a:	3328      	adds	r3, #40	; 0x28
 800889c:	2101      	movs	r1, #1
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 ffc4 	bl	800982c <RCCEx_PLL3_Config>
 80088a4:	4603      	mov	r3, r0
 80088a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80088aa:	e004      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80088b2:	e000      	b.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80088b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10b      	bne.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088be:	4b6c      	ldr	r3, [pc, #432]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80088c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c2:	f023 0107 	bic.w	r1, r3, #7
 80088c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088ce:	4a68      	ldr	r2, [pc, #416]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80088d0:	430b      	orrs	r3, r1
 80088d2:	6593      	str	r3, [r2, #88]	; 0x58
 80088d4:	e003      	b.n	80088de <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80088da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e6:	f002 0320 	and.w	r3, r2, #32
 80088ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80088ee:	2300      	movs	r3, #0
 80088f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80088f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80088f8:	460b      	mov	r3, r1
 80088fa:	4313      	orrs	r3, r2
 80088fc:	d055      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80088fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008906:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800890a:	d033      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800890c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008910:	d82c      	bhi.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008916:	d02f      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800891c:	d826      	bhi.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800891e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008922:	d02b      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008924:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008928:	d820      	bhi.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800892a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800892e:	d012      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008934:	d81a      	bhi.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d022      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800893a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800893e:	d115      	bne.n	800896c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008944:	3308      	adds	r3, #8
 8008946:	2100      	movs	r1, #0
 8008948:	4618      	mov	r0, r3
 800894a:	f000 febd 	bl	80096c8 <RCCEx_PLL2_Config>
 800894e:	4603      	mov	r3, r0
 8008950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008954:	e015      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800895a:	3328      	adds	r3, #40	; 0x28
 800895c:	2102      	movs	r1, #2
 800895e:	4618      	mov	r0, r3
 8008960:	f000 ff64 	bl	800982c <RCCEx_PLL3_Config>
 8008964:	4603      	mov	r3, r0
 8008966:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800896a:	e00a      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008972:	e006      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008974:	bf00      	nop
 8008976:	e004      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008978:	bf00      	nop
 800897a:	e002      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800897c:	bf00      	nop
 800897e:	e000      	b.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10b      	bne.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800898a:	4b39      	ldr	r3, [pc, #228]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800898c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800899a:	4a35      	ldr	r2, [pc, #212]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800899c:	430b      	orrs	r3, r1
 800899e:	6553      	str	r3, [r2, #84]	; 0x54
 80089a0:	e003      	b.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80089aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80089b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80089ba:	2300      	movs	r3, #0
 80089bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80089c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4313      	orrs	r3, r2
 80089c8:	d058      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80089ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80089d6:	d033      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80089d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80089dc:	d82c      	bhi.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80089de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089e2:	d02f      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80089e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089e8:	d826      	bhi.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80089ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089ee:	d02b      	beq.n	8008a48 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80089f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089f4:	d820      	bhi.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80089f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089fa:	d012      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80089fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a00:	d81a      	bhi.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d022      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a0a:	d115      	bne.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a10:	3308      	adds	r3, #8
 8008a12:	2100      	movs	r1, #0
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fe57 	bl	80096c8 <RCCEx_PLL2_Config>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a20:	e015      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a26:	3328      	adds	r3, #40	; 0x28
 8008a28:	2102      	movs	r1, #2
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 fefe 	bl	800982c <RCCEx_PLL3_Config>
 8008a30:	4603      	mov	r3, r0
 8008a32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a36:	e00a      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a3e:	e006      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a40:	bf00      	nop
 8008a42:	e004      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a44:	bf00      	nop
 8008a46:	e002      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a48:	bf00      	nop
 8008a4a:	e000      	b.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d10e      	bne.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a56:	4b06      	ldr	r3, [pc, #24]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a5a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a66:	4a02      	ldr	r2, [pc, #8]	; (8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a68:	430b      	orrs	r3, r1
 8008a6a:	6593      	str	r3, [r2, #88]	; 0x58
 8008a6c:	e006      	b.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008a6e:	bf00      	nop
 8008a70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a84:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008a92:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008a96:	460b      	mov	r3, r1
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	d055      	beq.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008aa4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008aa8:	d033      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008aaa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008aae:	d82c      	bhi.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ab4:	d02f      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008aba:	d826      	bhi.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008abc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008ac0:	d02b      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008ac2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008ac6:	d820      	bhi.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ac8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008acc:	d012      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008ace:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ad2:	d81a      	bhi.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d022      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008adc:	d115      	bne.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 fdee 	bl	80096c8 <RCCEx_PLL2_Config>
 8008aec:	4603      	mov	r3, r0
 8008aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008af2:	e015      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008af8:	3328      	adds	r3, #40	; 0x28
 8008afa:	2102      	movs	r1, #2
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 fe95 	bl	800982c <RCCEx_PLL3_Config>
 8008b02:	4603      	mov	r3, r0
 8008b04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b08:	e00a      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b10:	e006      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b12:	bf00      	nop
 8008b14:	e004      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b16:	bf00      	nop
 8008b18:	e002      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b1a:	bf00      	nop
 8008b1c:	e000      	b.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d10b      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008b28:	4ba1      	ldr	r3, [pc, #644]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b38:	4a9d      	ldr	r2, [pc, #628]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b3a:	430b      	orrs	r3, r1
 8008b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8008b3e:	e003      	b.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b50:	f002 0308 	and.w	r3, r2, #8
 8008b54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008b58:	2300      	movs	r3, #0
 8008b5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b5e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008b62:	460b      	mov	r3, r1
 8008b64:	4313      	orrs	r3, r2
 8008b66:	d01e      	beq.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b74:	d10c      	bne.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7a:	3328      	adds	r3, #40	; 0x28
 8008b7c:	2102      	movs	r1, #2
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 fe54 	bl	800982c <RCCEx_PLL3_Config>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008b90:	4b87      	ldr	r3, [pc, #540]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ba0:	4a83      	ldr	r2, [pc, #524]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ba2:	430b      	orrs	r3, r1
 8008ba4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	f002 0310 	and.w	r3, r2, #16
 8008bb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008bbc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	d01e      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bd2:	d10c      	bne.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd8:	3328      	adds	r3, #40	; 0x28
 8008bda:	2102      	movs	r1, #2
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 fe25 	bl	800982c <RCCEx_PLL3_Config>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d002      	beq.n	8008bee <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008bee:	4b70      	ldr	r3, [pc, #448]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bf2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008bfe:	4a6c      	ldr	r2, [pc, #432]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c00:	430b      	orrs	r3, r1
 8008c02:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c0c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008c10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c14:	2300      	movs	r3, #0
 8008c16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008c1a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4313      	orrs	r3, r2
 8008c22:	d03e      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c30:	d022      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008c32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c36:	d81b      	bhi.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c40:	d00b      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008c42:	e015      	b.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c48:	3308      	adds	r3, #8
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fd3b 	bl	80096c8 <RCCEx_PLL2_Config>
 8008c52:	4603      	mov	r3, r0
 8008c54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c58:	e00f      	b.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c5e:	3328      	adds	r3, #40	; 0x28
 8008c60:	2102      	movs	r1, #2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 fde2 	bl	800982c <RCCEx_PLL3_Config>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c6e:	e004      	b.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c76:	e000      	b.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10b      	bne.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c82:	4b4b      	ldr	r3, [pc, #300]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c86:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008c92:	4a47      	ldr	r2, [pc, #284]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c94:	430b      	orrs	r3, r1
 8008c96:	6593      	str	r3, [r2, #88]	; 0x58
 8008c98:	e003      	b.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008caa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008cae:	67bb      	str	r3, [r7, #120]	; 0x78
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008cb4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008cb8:	460b      	mov	r3, r1
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	d03b      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008cca:	d01f      	beq.n	8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008ccc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008cd0:	d818      	bhi.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cd6:	d003      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008cd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cdc:	d007      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008cde:	e011      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ce0:	4b33      	ldr	r3, [pc, #204]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce4:	4a32      	ldr	r2, [pc, #200]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008cec:	e00f      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf2:	3328      	adds	r3, #40	; 0x28
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fd98 	bl	800982c <RCCEx_PLL3_Config>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d02:	e004      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d0a:	e000      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10b      	bne.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d16:	4b26      	ldr	r3, [pc, #152]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d1a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d26:	4a22      	ldr	r2, [pc, #136]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d28:	430b      	orrs	r3, r1
 8008d2a:	6553      	str	r3, [r2, #84]	; 0x54
 8008d2c:	e003      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d32:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008d42:	673b      	str	r3, [r7, #112]	; 0x70
 8008d44:	2300      	movs	r3, #0
 8008d46:	677b      	str	r3, [r7, #116]	; 0x74
 8008d48:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	d034      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d60:	d007      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008d62:	e011      	b.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d64:	4b12      	ldr	r3, [pc, #72]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d68:	4a11      	ldr	r2, [pc, #68]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008d70:	e00e      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d76:	3308      	adds	r3, #8
 8008d78:	2102      	movs	r1, #2
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f000 fca4 	bl	80096c8 <RCCEx_PLL2_Config>
 8008d80:	4603      	mov	r3, r0
 8008d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008d86:	e003      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10d      	bne.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008d98:	4b05      	ldr	r3, [pc, #20]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da6:	4a02      	ldr	r2, [pc, #8]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008da8:	430b      	orrs	r3, r1
 8008daa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dac:	e006      	b.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008dae:	bf00      	nop
 8008db0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008db4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008db8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008dc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dca:	2300      	movs	r3, #0
 8008dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008dce:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	d00c      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ddc:	3328      	adds	r3, #40	; 0x28
 8008dde:	2102      	movs	r1, #2
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 fd23 	bl	800982c <RCCEx_PLL3_Config>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d002      	beq.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008dfe:	663b      	str	r3, [r7, #96]	; 0x60
 8008e00:	2300      	movs	r3, #0
 8008e02:	667b      	str	r3, [r7, #100]	; 0x64
 8008e04:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	d038      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e1a:	d018      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e20:	d811      	bhi.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e26:	d014      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e2c:	d80b      	bhi.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d011      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e36:	d106      	bne.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e38:	4bc3      	ldr	r3, [pc, #780]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3c:	4ac2      	ldr	r2, [pc, #776]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008e44:	e008      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e4c:	e004      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e4e:	bf00      	nop
 8008e50:	e002      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e52:	bf00      	nop
 8008e54:	e000      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10b      	bne.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e60:	4bb9      	ldr	r3, [pc, #740]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e64:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e70:	4ab5      	ldr	r2, [pc, #724]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e72:	430b      	orrs	r3, r1
 8008e74:	6553      	str	r3, [r2, #84]	; 0x54
 8008e76:	e003      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e78:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e88:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008e8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e8e:	2300      	movs	r3, #0
 8008e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008e96:	460b      	mov	r3, r1
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	d009      	beq.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008e9c:	4baa      	ldr	r3, [pc, #680]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eaa:	4aa7      	ldr	r2, [pc, #668]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eac:	430b      	orrs	r3, r1
 8008eae:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8008ebc:	653b      	str	r3, [r7, #80]	; 0x50
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	657b      	str	r3, [r7, #84]	; 0x54
 8008ec2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	d00a      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008ecc:	4b9e      	ldr	r3, [pc, #632]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8008ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ed8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008edc:	4a9a      	ldr	r2, [pc, #616]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ede:	430b      	orrs	r3, r1
 8008ee0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eea:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008eee:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ef4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4313      	orrs	r3, r2
 8008efc:	d009      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008efe:	4b92      	ldr	r3, [pc, #584]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f02:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f0c:	4a8e      	ldr	r2, [pc, #568]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f0e:	430b      	orrs	r3, r1
 8008f10:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008f1e:	643b      	str	r3, [r7, #64]	; 0x40
 8008f20:	2300      	movs	r3, #0
 8008f22:	647b      	str	r3, [r7, #68]	; 0x44
 8008f24:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4313      	orrs	r3, r2
 8008f2c:	d00e      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f2e:	4b86      	ldr	r3, [pc, #536]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	4a85      	ldr	r2, [pc, #532]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f38:	6113      	str	r3, [r2, #16]
 8008f3a:	4b83      	ldr	r3, [pc, #524]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f3c:	6919      	ldr	r1, [r3, #16]
 8008f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f42:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008f46:	4a80      	ldr	r2, [pc, #512]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f48:	430b      	orrs	r3, r1
 8008f4a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008f58:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f5e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008f62:	460b      	mov	r3, r1
 8008f64:	4313      	orrs	r3, r2
 8008f66:	d009      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008f68:	4b77      	ldr	r3, [pc, #476]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f6c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f76:	4a74      	ldr	r2, [pc, #464]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f78:	430b      	orrs	r3, r1
 8008f7a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f84:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008f88:	633b      	str	r3, [r7, #48]	; 0x30
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f8e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008f92:	460b      	mov	r3, r1
 8008f94:	4313      	orrs	r3, r2
 8008f96:	d00a      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f98:	4b6b      	ldr	r3, [pc, #428]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f9c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fa8:	4a67      	ldr	r2, [pc, #412]	; (8009148 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008faa:	430b      	orrs	r3, r1
 8008fac:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	62b9      	str	r1, [r7, #40]	; 0x28
 8008fba:	f003 0301 	and.w	r3, r3, #1
 8008fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fc0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	d011      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fce:	3308      	adds	r3, #8
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 fb78 	bl	80096c8 <RCCEx_PLL2_Config>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008fde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d003      	beq.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	6239      	str	r1, [r7, #32]
 8008ffa:	f003 0302 	and.w	r3, r3, #2
 8008ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8009000:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009004:	460b      	mov	r3, r1
 8009006:	4313      	orrs	r3, r2
 8009008:	d011      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800900a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800900e:	3308      	adds	r3, #8
 8009010:	2101      	movs	r1, #1
 8009012:	4618      	mov	r0, r3
 8009014:	f000 fb58 	bl	80096c8 <RCCEx_PLL2_Config>
 8009018:	4603      	mov	r3, r0
 800901a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800901e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009026:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800902a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800902e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009036:	2100      	movs	r1, #0
 8009038:	61b9      	str	r1, [r7, #24]
 800903a:	f003 0304 	and.w	r3, r3, #4
 800903e:	61fb      	str	r3, [r7, #28]
 8009040:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009044:	460b      	mov	r3, r1
 8009046:	4313      	orrs	r3, r2
 8009048:	d011      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800904a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800904e:	3308      	adds	r3, #8
 8009050:	2102      	movs	r1, #2
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fb38 	bl	80096c8 <RCCEx_PLL2_Config>
 8009058:	4603      	mov	r3, r0
 800905a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800905e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009062:	2b00      	cmp	r3, #0
 8009064:	d003      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009066:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800906a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800906e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009076:	2100      	movs	r1, #0
 8009078:	6139      	str	r1, [r7, #16]
 800907a:	f003 0308 	and.w	r3, r3, #8
 800907e:	617b      	str	r3, [r7, #20]
 8009080:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009084:	460b      	mov	r3, r1
 8009086:	4313      	orrs	r3, r2
 8009088:	d011      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800908a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800908e:	3328      	adds	r3, #40	; 0x28
 8009090:	2100      	movs	r1, #0
 8009092:	4618      	mov	r0, r3
 8009094:	f000 fbca 	bl	800982c <RCCEx_PLL3_Config>
 8009098:	4603      	mov	r3, r0
 800909a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800909e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80090ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b6:	2100      	movs	r1, #0
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	f003 0310 	and.w	r3, r3, #16
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80090c4:	460b      	mov	r3, r1
 80090c6:	4313      	orrs	r3, r2
 80090c8:	d011      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ce:	3328      	adds	r3, #40	; 0x28
 80090d0:	2101      	movs	r1, #1
 80090d2:	4618      	mov	r0, r3
 80090d4:	f000 fbaa 	bl	800982c <RCCEx_PLL3_Config>
 80090d8:	4603      	mov	r3, r0
 80090da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80090de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80090ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f6:	2100      	movs	r1, #0
 80090f8:	6039      	str	r1, [r7, #0]
 80090fa:	f003 0320 	and.w	r3, r3, #32
 80090fe:	607b      	str	r3, [r7, #4]
 8009100:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009104:	460b      	mov	r3, r1
 8009106:	4313      	orrs	r3, r2
 8009108:	d011      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800910a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800910e:	3328      	adds	r3, #40	; 0x28
 8009110:	2102      	movs	r1, #2
 8009112:	4618      	mov	r0, r3
 8009114:	f000 fb8a 	bl	800982c <RCCEx_PLL3_Config>
 8009118:	4603      	mov	r3, r0
 800911a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800911e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009122:	2b00      	cmp	r3, #0
 8009124:	d003      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009126:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800912a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800912e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009132:	2b00      	cmp	r3, #0
 8009134:	d101      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009136:	2300      	movs	r3, #0
 8009138:	e000      	b.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
}
 800913c:	4618      	mov	r0, r3
 800913e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009142:	46bd      	mov	sp, r7
 8009144:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009148:	58024400 	.word	0x58024400

0800914c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009150:	f7fe fd54 	bl	8007bfc <HAL_RCC_GetHCLKFreq>
 8009154:	4602      	mov	r2, r0
 8009156:	4b06      	ldr	r3, [pc, #24]	; (8009170 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	091b      	lsrs	r3, r3, #4
 800915c:	f003 0307 	and.w	r3, r3, #7
 8009160:	4904      	ldr	r1, [pc, #16]	; (8009174 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009162:	5ccb      	ldrb	r3, [r1, r3]
 8009164:	f003 031f 	and.w	r3, r3, #31
 8009168:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800916c:	4618      	mov	r0, r3
 800916e:	bd80      	pop	{r7, pc}
 8009170:	58024400 	.word	0x58024400
 8009174:	08025398 	.word	0x08025398

08009178 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009178:	b480      	push	{r7}
 800917a:	b089      	sub	sp, #36	; 0x24
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009180:	4ba1      	ldr	r3, [pc, #644]	; (8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009184:	f003 0303 	and.w	r3, r3, #3
 8009188:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800918a:	4b9f      	ldr	r3, [pc, #636]	; (8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800918c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918e:	0b1b      	lsrs	r3, r3, #12
 8009190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009194:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009196:	4b9c      	ldr	r3, [pc, #624]	; (8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919a:	091b      	lsrs	r3, r3, #4
 800919c:	f003 0301 	and.w	r3, r3, #1
 80091a0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80091a2:	4b99      	ldr	r3, [pc, #612]	; (8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a6:	08db      	lsrs	r3, r3, #3
 80091a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	fb02 f303 	mul.w	r3, r2, r3
 80091b2:	ee07 3a90 	vmov	s15, r3
 80091b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 8111 	beq.w	80093e8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	f000 8083 	beq.w	80092d4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	2b02      	cmp	r3, #2
 80091d2:	f200 80a1 	bhi.w	8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	2b01      	cmp	r3, #1
 80091e0:	d056      	beq.n	8009290 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80091e2:	e099      	b.n	8009318 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091e4:	4b88      	ldr	r3, [pc, #544]	; (8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 0320 	and.w	r3, r3, #32
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d02d      	beq.n	800924c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80091f0:	4b85      	ldr	r3, [pc, #532]	; (8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	08db      	lsrs	r3, r3, #3
 80091f6:	f003 0303 	and.w	r3, r3, #3
 80091fa:	4a84      	ldr	r2, [pc, #528]	; (800940c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80091fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009200:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	ee07 3a90 	vmov	s15, r3
 8009208:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	ee07 3a90 	vmov	s15, r3
 8009212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800921a:	4b7b      	ldr	r3, [pc, #492]	; (8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800921c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009222:	ee07 3a90 	vmov	s15, r3
 8009226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800922a:	ed97 6a03 	vldr	s12, [r7, #12]
 800922e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800923a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800923e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009246:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800924a:	e087      	b.n	800935c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	ee07 3a90 	vmov	s15, r3
 8009252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009256:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009414 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800925a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800925e:	4b6a      	ldr	r3, [pc, #424]	; (8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009266:	ee07 3a90 	vmov	s15, r3
 800926a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800926e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009272:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800927a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800927e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800928a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800928e:	e065      	b.n	800935c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	ee07 3a90 	vmov	s15, r3
 8009296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800929a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009418 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800929e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092a2:	4b59      	ldr	r3, [pc, #356]	; (8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092aa:	ee07 3a90 	vmov	s15, r3
 80092ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80092b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80092c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092d2:	e043      	b.n	800935c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	ee07 3a90 	vmov	s15, r3
 80092da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800941c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80092e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092e6:	4b48      	ldr	r3, [pc, #288]	; (8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ee:	ee07 3a90 	vmov	s15, r3
 80092f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80092fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800930a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800930e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009316:	e021      	b.n	800935c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	ee07 3a90 	vmov	s15, r3
 800931e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009322:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009418 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800932a:	4b37      	ldr	r3, [pc, #220]	; (8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800932c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009332:	ee07 3a90 	vmov	s15, r3
 8009336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800933a:	ed97 6a03 	vldr	s12, [r7, #12]
 800933e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009410 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800934a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800934e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009356:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800935a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800935c:	4b2a      	ldr	r3, [pc, #168]	; (8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800935e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009360:	0a5b      	lsrs	r3, r3, #9
 8009362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009366:	ee07 3a90 	vmov	s15, r3
 800936a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009372:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009376:	edd7 6a07 	vldr	s13, [r7, #28]
 800937a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800937e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009382:	ee17 2a90 	vmov	r2, s15
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800938a:	4b1f      	ldr	r3, [pc, #124]	; (8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800938c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938e:	0c1b      	lsrs	r3, r3, #16
 8009390:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009394:	ee07 3a90 	vmov	s15, r3
 8009398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800939c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80093a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093b0:	ee17 2a90 	vmov	r2, s15
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80093b8:	4b13      	ldr	r3, [pc, #76]	; (8009408 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093bc:	0e1b      	lsrs	r3, r3, #24
 80093be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c2:	ee07 3a90 	vmov	s15, r3
 80093c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80093d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093de:	ee17 2a90 	vmov	r2, s15
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80093e6:	e008      	b.n	80093fa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	609a      	str	r2, [r3, #8]
}
 80093fa:	bf00      	nop
 80093fc:	3724      	adds	r7, #36	; 0x24
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	58024400 	.word	0x58024400
 800940c:	03d09000 	.word	0x03d09000
 8009410:	46000000 	.word	0x46000000
 8009414:	4c742400 	.word	0x4c742400
 8009418:	4a742400 	.word	0x4a742400
 800941c:	4bbebc20 	.word	0x4bbebc20

08009420 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009420:	b480      	push	{r7}
 8009422:	b089      	sub	sp, #36	; 0x24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009428:	4ba1      	ldr	r3, [pc, #644]	; (80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800942a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942c:	f003 0303 	and.w	r3, r3, #3
 8009430:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009432:	4b9f      	ldr	r3, [pc, #636]	; (80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009436:	0d1b      	lsrs	r3, r3, #20
 8009438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800943c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800943e:	4b9c      	ldr	r3, [pc, #624]	; (80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009442:	0a1b      	lsrs	r3, r3, #8
 8009444:	f003 0301 	and.w	r3, r3, #1
 8009448:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800944a:	4b99      	ldr	r3, [pc, #612]	; (80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800944c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944e:	08db      	lsrs	r3, r3, #3
 8009450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	fb02 f303 	mul.w	r3, r2, r3
 800945a:	ee07 3a90 	vmov	s15, r3
 800945e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009462:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 8111 	beq.w	8009690 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	2b02      	cmp	r3, #2
 8009472:	f000 8083 	beq.w	800957c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	2b02      	cmp	r3, #2
 800947a:	f200 80a1 	bhi.w	80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d003      	beq.n	800948c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	2b01      	cmp	r3, #1
 8009488:	d056      	beq.n	8009538 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800948a:	e099      	b.n	80095c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800948c:	4b88      	ldr	r3, [pc, #544]	; (80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f003 0320 	and.w	r3, r3, #32
 8009494:	2b00      	cmp	r3, #0
 8009496:	d02d      	beq.n	80094f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009498:	4b85      	ldr	r3, [pc, #532]	; (80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	08db      	lsrs	r3, r3, #3
 800949e:	f003 0303 	and.w	r3, r3, #3
 80094a2:	4a84      	ldr	r2, [pc, #528]	; (80096b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80094a4:	fa22 f303 	lsr.w	r3, r2, r3
 80094a8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	ee07 3a90 	vmov	s15, r3
 80094b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094c2:	4b7b      	ldr	r3, [pc, #492]	; (80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094ca:	ee07 3a90 	vmov	s15, r3
 80094ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80094d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80096b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80094da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80094de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80094e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80094e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80094ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80094f2:	e087      	b.n	8009604 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	ee07 3a90 	vmov	s15, r3
 80094fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80096bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009506:	4b6a      	ldr	r3, [pc, #424]	; (80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800950e:	ee07 3a90 	vmov	s15, r3
 8009512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009516:	ed97 6a03 	vldr	s12, [r7, #12]
 800951a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80096b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800951e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800952a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800952e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009536:	e065      	b.n	8009604 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	ee07 3a90 	vmov	s15, r3
 800953e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009542:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80096c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954a:	4b59      	ldr	r3, [pc, #356]	; (80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800954c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009552:	ee07 3a90 	vmov	s15, r3
 8009556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800955a:	ed97 6a03 	vldr	s12, [r7, #12]
 800955e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80096b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800956a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800956e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800957a:	e043      	b.n	8009604 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009586:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80096c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800958a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800958e:	4b48      	ldr	r3, [pc, #288]	; (80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009596:	ee07 3a90 	vmov	s15, r3
 800959a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800959e:	ed97 6a03 	vldr	s12, [r7, #12]
 80095a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80096b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095be:	e021      	b.n	8009604 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	ee07 3a90 	vmov	s15, r3
 80095c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80096c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80095ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d2:	4b37      	ldr	r3, [pc, #220]	; (80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80096b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009602:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009604:	4b2a      	ldr	r3, [pc, #168]	; (80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009608:	0a5b      	lsrs	r3, r3, #9
 800960a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800960e:	ee07 3a90 	vmov	s15, r3
 8009612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800961a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800961e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800962a:	ee17 2a90 	vmov	r2, s15
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009632:	4b1f      	ldr	r3, [pc, #124]	; (80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009636:	0c1b      	lsrs	r3, r3, #16
 8009638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800963c:	ee07 3a90 	vmov	s15, r3
 8009640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009648:	ee37 7a87 	vadd.f32	s14, s15, s14
 800964c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009658:	ee17 2a90 	vmov	r2, s15
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009660:	4b13      	ldr	r3, [pc, #76]	; (80096b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009664:	0e1b      	lsrs	r3, r3, #24
 8009666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800966a:	ee07 3a90 	vmov	s15, r3
 800966e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800967a:	edd7 6a07 	vldr	s13, [r7, #28]
 800967e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009686:	ee17 2a90 	vmov	r2, s15
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800968e:	e008      	b.n	80096a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	609a      	str	r2, [r3, #8]
}
 80096a2:	bf00      	nop
 80096a4:	3724      	adds	r7, #36	; 0x24
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	58024400 	.word	0x58024400
 80096b4:	03d09000 	.word	0x03d09000
 80096b8:	46000000 	.word	0x46000000
 80096bc:	4c742400 	.word	0x4c742400
 80096c0:	4a742400 	.word	0x4a742400
 80096c4:	4bbebc20 	.word	0x4bbebc20

080096c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80096d6:	4b53      	ldr	r3, [pc, #332]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 80096d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096da:	f003 0303 	and.w	r3, r3, #3
 80096de:	2b03      	cmp	r3, #3
 80096e0:	d101      	bne.n	80096e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e099      	b.n	800981a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80096e6:	4b4f      	ldr	r3, [pc, #316]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a4e      	ldr	r2, [pc, #312]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 80096ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096f2:	f7f8 fde5 	bl	80022c0 <HAL_GetTick>
 80096f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80096f8:	e008      	b.n	800970c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80096fa:	f7f8 fde1 	bl	80022c0 <HAL_GetTick>
 80096fe:	4602      	mov	r2, r0
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	1ad3      	subs	r3, r2, r3
 8009704:	2b02      	cmp	r3, #2
 8009706:	d901      	bls.n	800970c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009708:	2303      	movs	r3, #3
 800970a:	e086      	b.n	800981a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800970c:	4b45      	ldr	r3, [pc, #276]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009714:	2b00      	cmp	r3, #0
 8009716:	d1f0      	bne.n	80096fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009718:	4b42      	ldr	r3, [pc, #264]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 800971a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	031b      	lsls	r3, r3, #12
 8009726:	493f      	ldr	r1, [pc, #252]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 8009728:	4313      	orrs	r3, r2
 800972a:	628b      	str	r3, [r1, #40]	; 0x28
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	3b01      	subs	r3, #1
 8009732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	3b01      	subs	r3, #1
 800973c:	025b      	lsls	r3, r3, #9
 800973e:	b29b      	uxth	r3, r3
 8009740:	431a      	orrs	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	3b01      	subs	r3, #1
 8009748:	041b      	lsls	r3, r3, #16
 800974a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800974e:	431a      	orrs	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	3b01      	subs	r3, #1
 8009756:	061b      	lsls	r3, r3, #24
 8009758:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800975c:	4931      	ldr	r1, [pc, #196]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 800975e:	4313      	orrs	r3, r2
 8009760:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009762:	4b30      	ldr	r3, [pc, #192]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 8009764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009766:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	492d      	ldr	r1, [pc, #180]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 8009770:	4313      	orrs	r3, r2
 8009772:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009774:	4b2b      	ldr	r3, [pc, #172]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 8009776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009778:	f023 0220 	bic.w	r2, r3, #32
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	4928      	ldr	r1, [pc, #160]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 8009782:	4313      	orrs	r3, r2
 8009784:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009786:	4b27      	ldr	r3, [pc, #156]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 8009788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978a:	4a26      	ldr	r2, [pc, #152]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 800978c:	f023 0310 	bic.w	r3, r3, #16
 8009790:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009792:	4b24      	ldr	r3, [pc, #144]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 8009794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009796:	4b24      	ldr	r3, [pc, #144]	; (8009828 <RCCEx_PLL2_Config+0x160>)
 8009798:	4013      	ands	r3, r2
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	69d2      	ldr	r2, [r2, #28]
 800979e:	00d2      	lsls	r2, r2, #3
 80097a0:	4920      	ldr	r1, [pc, #128]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 80097a2:	4313      	orrs	r3, r2
 80097a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80097a6:	4b1f      	ldr	r3, [pc, #124]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 80097a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097aa:	4a1e      	ldr	r2, [pc, #120]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 80097ac:	f043 0310 	orr.w	r3, r3, #16
 80097b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d106      	bne.n	80097c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80097b8:	4b1a      	ldr	r3, [pc, #104]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 80097ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097bc:	4a19      	ldr	r2, [pc, #100]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 80097be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80097c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80097c4:	e00f      	b.n	80097e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d106      	bne.n	80097da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80097cc:	4b15      	ldr	r3, [pc, #84]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 80097ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d0:	4a14      	ldr	r2, [pc, #80]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 80097d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80097d8:	e005      	b.n	80097e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80097da:	4b12      	ldr	r3, [pc, #72]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 80097dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097de:	4a11      	ldr	r2, [pc, #68]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 80097e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80097e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80097e6:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a0e      	ldr	r2, [pc, #56]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 80097ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80097f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097f2:	f7f8 fd65 	bl	80022c0 <HAL_GetTick>
 80097f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80097f8:	e008      	b.n	800980c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80097fa:	f7f8 fd61 	bl	80022c0 <HAL_GetTick>
 80097fe:	4602      	mov	r2, r0
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	1ad3      	subs	r3, r2, r3
 8009804:	2b02      	cmp	r3, #2
 8009806:	d901      	bls.n	800980c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009808:	2303      	movs	r3, #3
 800980a:	e006      	b.n	800981a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800980c:	4b05      	ldr	r3, [pc, #20]	; (8009824 <RCCEx_PLL2_Config+0x15c>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009814:	2b00      	cmp	r3, #0
 8009816:	d0f0      	beq.n	80097fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009818:	7bfb      	ldrb	r3, [r7, #15]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	58024400 	.word	0x58024400
 8009828:	ffff0007 	.word	0xffff0007

0800982c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800983a:	4b53      	ldr	r3, [pc, #332]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 800983c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983e:	f003 0303 	and.w	r3, r3, #3
 8009842:	2b03      	cmp	r3, #3
 8009844:	d101      	bne.n	800984a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e099      	b.n	800997e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800984a:	4b4f      	ldr	r3, [pc, #316]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a4e      	ldr	r2, [pc, #312]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 8009850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009856:	f7f8 fd33 	bl	80022c0 <HAL_GetTick>
 800985a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800985c:	e008      	b.n	8009870 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800985e:	f7f8 fd2f 	bl	80022c0 <HAL_GetTick>
 8009862:	4602      	mov	r2, r0
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	2b02      	cmp	r3, #2
 800986a:	d901      	bls.n	8009870 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800986c:	2303      	movs	r3, #3
 800986e:	e086      	b.n	800997e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009870:	4b45      	ldr	r3, [pc, #276]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d1f0      	bne.n	800985e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800987c:	4b42      	ldr	r3, [pc, #264]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 800987e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009880:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	051b      	lsls	r3, r3, #20
 800988a:	493f      	ldr	r1, [pc, #252]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 800988c:	4313      	orrs	r3, r2
 800988e:	628b      	str	r3, [r1, #40]	; 0x28
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	3b01      	subs	r3, #1
 8009896:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	3b01      	subs	r3, #1
 80098a0:	025b      	lsls	r3, r3, #9
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	431a      	orrs	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	041b      	lsls	r3, r3, #16
 80098ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80098b2:	431a      	orrs	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	3b01      	subs	r3, #1
 80098ba:	061b      	lsls	r3, r3, #24
 80098bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80098c0:	4931      	ldr	r1, [pc, #196]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80098c6:	4b30      	ldr	r3, [pc, #192]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 80098c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	695b      	ldr	r3, [r3, #20]
 80098d2:	492d      	ldr	r1, [pc, #180]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80098d8:	4b2b      	ldr	r3, [pc, #172]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 80098da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	4928      	ldr	r1, [pc, #160]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80098ea:	4b27      	ldr	r3, [pc, #156]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 80098ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ee:	4a26      	ldr	r2, [pc, #152]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 80098f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80098f6:	4b24      	ldr	r3, [pc, #144]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 80098f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098fa:	4b24      	ldr	r3, [pc, #144]	; (800998c <RCCEx_PLL3_Config+0x160>)
 80098fc:	4013      	ands	r3, r2
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	69d2      	ldr	r2, [r2, #28]
 8009902:	00d2      	lsls	r2, r2, #3
 8009904:	4920      	ldr	r1, [pc, #128]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 8009906:	4313      	orrs	r3, r2
 8009908:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800990a:	4b1f      	ldr	r3, [pc, #124]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 800990c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800990e:	4a1e      	ldr	r2, [pc, #120]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 8009910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009914:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d106      	bne.n	800992a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800991c:	4b1a      	ldr	r3, [pc, #104]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 800991e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009920:	4a19      	ldr	r2, [pc, #100]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 8009922:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009926:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009928:	e00f      	b.n	800994a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d106      	bne.n	800993e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009930:	4b15      	ldr	r3, [pc, #84]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 8009932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009934:	4a14      	ldr	r2, [pc, #80]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 8009936:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800993a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800993c:	e005      	b.n	800994a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800993e:	4b12      	ldr	r3, [pc, #72]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 8009940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009942:	4a11      	ldr	r2, [pc, #68]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 8009944:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009948:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800994a:	4b0f      	ldr	r3, [pc, #60]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a0e      	ldr	r2, [pc, #56]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 8009950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009956:	f7f8 fcb3 	bl	80022c0 <HAL_GetTick>
 800995a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800995c:	e008      	b.n	8009970 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800995e:	f7f8 fcaf 	bl	80022c0 <HAL_GetTick>
 8009962:	4602      	mov	r2, r0
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	2b02      	cmp	r3, #2
 800996a:	d901      	bls.n	8009970 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e006      	b.n	800997e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009970:	4b05      	ldr	r3, [pc, #20]	; (8009988 <RCCEx_PLL3_Config+0x15c>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009978:	2b00      	cmp	r3, #0
 800997a:	d0f0      	beq.n	800995e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800997c:	7bfb      	ldrb	r3, [r7, #15]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	58024400 	.word	0x58024400
 800998c:	ffff0007 	.word	0xffff0007

08009990 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d101      	bne.n	80099a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e158      	b.n	8009c54 <HAL_SPI_Init+0x2c4>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a5f      	ldr	r2, [pc, #380]	; (8009b2c <HAL_SPI_Init+0x19c>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d00f      	beq.n	80099d2 <HAL_SPI_Init+0x42>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a5e      	ldr	r2, [pc, #376]	; (8009b30 <HAL_SPI_Init+0x1a0>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d00a      	beq.n	80099d2 <HAL_SPI_Init+0x42>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a5c      	ldr	r2, [pc, #368]	; (8009b34 <HAL_SPI_Init+0x1a4>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d005      	beq.n	80099d2 <HAL_SPI_Init+0x42>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	2b0f      	cmp	r3, #15
 80099cc:	d901      	bls.n	80099d2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e140      	b.n	8009c54 <HAL_SPI_Init+0x2c4>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f001 fba8 	bl	800b128 <SPI_GetPacketSize>
 80099d8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a53      	ldr	r2, [pc, #332]	; (8009b2c <HAL_SPI_Init+0x19c>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d00c      	beq.n	80099fe <HAL_SPI_Init+0x6e>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a51      	ldr	r2, [pc, #324]	; (8009b30 <HAL_SPI_Init+0x1a0>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d007      	beq.n	80099fe <HAL_SPI_Init+0x6e>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a50      	ldr	r2, [pc, #320]	; (8009b34 <HAL_SPI_Init+0x1a4>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d002      	beq.n	80099fe <HAL_SPI_Init+0x6e>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2b08      	cmp	r3, #8
 80099fc:	d811      	bhi.n	8009a22 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a02:	4a4a      	ldr	r2, [pc, #296]	; (8009b2c <HAL_SPI_Init+0x19c>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d009      	beq.n	8009a1c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a48      	ldr	r2, [pc, #288]	; (8009b30 <HAL_SPI_Init+0x1a0>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d004      	beq.n	8009a1c <HAL_SPI_Init+0x8c>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a47      	ldr	r2, [pc, #284]	; (8009b34 <HAL_SPI_Init+0x1a4>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d104      	bne.n	8009a26 <HAL_SPI_Init+0x96>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2b10      	cmp	r3, #16
 8009a20:	d901      	bls.n	8009a26 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e116      	b.n	8009c54 <HAL_SPI_Init+0x2c4>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d135      	bne.n	8009a9e <HAL_SPI_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a3e      	ldr	r2, [pc, #248]	; (8009b38 <HAL_SPI_Init+0x1a8>)
 8009a3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a3d      	ldr	r2, [pc, #244]	; (8009b3c <HAL_SPI_Init+0x1ac>)
 8009a46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a3c      	ldr	r2, [pc, #240]	; (8009b40 <HAL_SPI_Init+0x1b0>)
 8009a4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a3b      	ldr	r2, [pc, #236]	; (8009b44 <HAL_SPI_Init+0x1b4>)
 8009a56:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4a3a      	ldr	r2, [pc, #232]	; (8009b48 <HAL_SPI_Init+0x1b8>)
 8009a5e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a39      	ldr	r2, [pc, #228]	; (8009b4c <HAL_SPI_Init+0x1bc>)
 8009a66:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a38      	ldr	r2, [pc, #224]	; (8009b50 <HAL_SPI_Init+0x1c0>)
 8009a6e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a37      	ldr	r2, [pc, #220]	; (8009b54 <HAL_SPI_Init+0x1c4>)
 8009a76:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    hspi->SuspendCallback      = HAL_SPI_SuspendCallback;      /* Legacy weak SuspendCallback      */
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a36      	ldr	r2, [pc, #216]	; (8009b58 <HAL_SPI_Init+0x1c8>)
 8009a7e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

    if (hspi->MspInitCallback == NULL)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d103      	bne.n	8009a94 <HAL_SPI_Init+0x104>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a33      	ldr	r2, [pc, #204]	; (8009b5c <HAL_SPI_Init+0x1cc>)
 8009a90:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2202      	movs	r2, #2
 8009aa2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f022 0201 	bic.w	r2, r2, #1
 8009ab4:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009ac0:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009aca:	d119      	bne.n	8009b00 <HAL_SPI_Init+0x170>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ad4:	d103      	bne.n	8009ade <HAL_SPI_Init+0x14e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d008      	beq.n	8009af0 <HAL_SPI_Init+0x160>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10c      	bne.n	8009b00 <HAL_SPI_Init+0x170>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009aea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009aee:	d107      	bne.n	8009b00 <HAL_SPI_Init+0x170>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009afe:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d029      	beq.n	8009b60 <HAL_SPI_Init+0x1d0>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	2b06      	cmp	r3, #6
 8009b12:	d925      	bls.n	8009b60 <HAL_SPI_Init+0x1d0>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	430a      	orrs	r2, r1
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	e021      	b.n	8009b70 <HAL_SPI_Init+0x1e0>
 8009b2c:	40013000 	.word	0x40013000
 8009b30:	40003800 	.word	0x40003800
 8009b34:	40003c00 	.word	0x40003c00
 8009b38:	0800ad25 	.word	0x0800ad25
 8009b3c:	0800ad39 	.word	0x0800ad39
 8009b40:	0800ad4d 	.word	0x0800ad4d
 8009b44:	0800ad61 	.word	0x0800ad61
 8009b48:	0800ad75 	.word	0x0800ad75
 8009b4c:	0800ad89 	.word	0x0800ad89
 8009b50:	0800ad9d 	.word	0x0800ad9d
 8009b54:	0800adb1 	.word	0x0800adb1
 8009b58:	0800adc5 	.word	0x0800adc5
 8009b5c:	080014b9 	.word	0x080014b9
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b6e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	69da      	ldr	r2, [r3, #28]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b78:	431a      	orrs	r2, r3
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b82:	ea42 0103 	orr.w	r1, r2, r3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68da      	ldr	r2, [r3, #12]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	430a      	orrs	r2, r1
 8009b90:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba0:	431a      	orrs	r2, r3
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	431a      	orrs	r2, r3
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	691b      	ldr	r3, [r3, #16]
 8009bac:	431a      	orrs	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	431a      	orrs	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	431a      	orrs	r2, r3
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	431a      	orrs	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc4:	431a      	orrs	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	431a      	orrs	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bd0:	ea42 0103 	orr.w	r1, r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	430a      	orrs	r2, r1
 8009bde:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d113      	bne.n	8009c10 <HAL_SPI_Init+0x280>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bfa:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c0e:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 0201 	bic.w	r2, r2, #1
 8009c1e:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d00a      	beq.n	8009c42 <HAL_SPI_Init+0x2b2>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_SPI_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	60f8      	str	r0, [r7, #12]
 8009c64:	460b      	mov	r3, r1
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d109      	bne.n	8009c88 <HAL_SPI_RegisterCallback+0x2c>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c7a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e09f      	b.n	8009dc8 <HAL_SPI_RegisterCallback+0x16c>
  }
  /* Lock the process */
  __HAL_LOCK(hspi);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d101      	bne.n	8009c96 <HAL_SPI_RegisterCallback+0x3a>
 8009c92:	2302      	movs	r3, #2
 8009c94:	e098      	b.n	8009dc8 <HAL_SPI_RegisterCallback+0x16c>
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (HAL_SPI_STATE_READY == hspi->State)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d15e      	bne.n	8009d68 <HAL_SPI_RegisterCallback+0x10c>
  {
    switch (CallbackID)
 8009caa:	7afb      	ldrb	r3, [r7, #11]
 8009cac:	2b0a      	cmp	r3, #10
 8009cae:	d850      	bhi.n	8009d52 <HAL_SPI_RegisterCallback+0xf6>
 8009cb0:	a201      	add	r2, pc, #4	; (adr r2, 8009cb8 <HAL_SPI_RegisterCallback+0x5c>)
 8009cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb6:	bf00      	nop
 8009cb8:	08009ce5 	.word	0x08009ce5
 8009cbc:	08009cef 	.word	0x08009cef
 8009cc0:	08009cf9 	.word	0x08009cf9
 8009cc4:	08009d03 	.word	0x08009d03
 8009cc8:	08009d0d 	.word	0x08009d0d
 8009ccc:	08009d17 	.word	0x08009d17
 8009cd0:	08009d21 	.word	0x08009d21
 8009cd4:	08009d2b 	.word	0x08009d2b
 8009cd8:	08009d35 	.word	0x08009d35
 8009cdc:	08009d3f 	.word	0x08009d3f
 8009ce0:	08009d49 	.word	0x08009d49
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	687a      	ldr	r2, [r7, #4]
 8009ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8009cec:	e067      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8009cf6:	e062      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8009d00:	e05d      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8009d0a:	e058      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8009d14:	e053      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8009d1e:	e04e      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8009d28:	e049      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	687a      	ldr	r2, [r7, #4]
 8009d2e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8009d32:	e044      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_SUSPEND_CB_ID :
        hspi->SuspendCallback = pCallback;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8009d3c:	e03f      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009d46:	e03a      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009d50:	e035      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Return error status */
        status =  HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	75fb      	strb	r3, [r7, #23]
        break;
 8009d66:	e02a      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d11a      	bne.n	8009daa <HAL_SPI_RegisterCallback+0x14e>
  {
    switch (CallbackID)
 8009d74:	7afb      	ldrb	r3, [r7, #11]
 8009d76:	2b09      	cmp	r3, #9
 8009d78:	d002      	beq.n	8009d80 <HAL_SPI_RegisterCallback+0x124>
 8009d7a:	2b0a      	cmp	r3, #10
 8009d7c:	d005      	beq.n	8009d8a <HAL_SPI_RegisterCallback+0x12e>
 8009d7e:	e009      	b.n	8009d94 <HAL_SPI_RegisterCallback+0x138>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8009d88:	e019      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8009d92:	e014      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Return error status */
        status =  HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	75fb      	strb	r3, [r7, #23]
        break;
 8009da8:	e009      	b.n	8009dbe <HAL_SPI_RegisterCallback+0x162>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009db0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return error status */
    status =  HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return status;
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	371c      	adds	r7, #28
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08a      	sub	sp, #40	; 0x28
 8009dd8:	af02      	add	r7, sp, #8
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	603b      	str	r3, [r7, #0]
 8009de0:	4613      	mov	r3, r2
 8009de2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3320      	adds	r3, #32
 8009dea:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d101      	bne.n	8009dfe <HAL_SPI_Transmit+0x2a>
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	e1e1      	b.n	800a1c2 <HAL_SPI_Transmit+0x3ee>
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e06:	f7f8 fa5b 	bl	80022c0 <HAL_GetTick>
 8009e0a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d007      	beq.n	8009e28 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009e24:	7efb      	ldrb	r3, [r7, #27]
 8009e26:	e1cc      	b.n	800a1c2 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d002      	beq.n	8009e34 <HAL_SPI_Transmit+0x60>
 8009e2e:	88fb      	ldrh	r3, [r7, #6]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d107      	bne.n	8009e44 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009e40:	7efb      	ldrb	r3, [r7, #27]
 8009e42:	e1be      	b.n	800a1c2 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2203      	movs	r2, #3
 8009e48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	88fa      	ldrh	r2, [r7, #6]
 8009e5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	88fa      	ldrh	r2, [r7, #6]
 8009e66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009e94:	d108      	bne.n	8009ea8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ea4:	601a      	str	r2, [r3, #0]
 8009ea6:	e009      	b.n	8009ebc <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	68db      	ldr	r3, [r3, #12]
 8009eae:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009eba:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685a      	ldr	r2, [r3, #4]
 8009ec2:	4b96      	ldr	r3, [pc, #600]	; (800a11c <HAL_SPI_Transmit+0x348>)
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	88f9      	ldrh	r1, [r7, #6]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	6812      	ldr	r2, [r2, #0]
 8009ecc:	430b      	orrs	r3, r1
 8009ece:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f042 0201 	orr.w	r2, r2, #1
 8009ede:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ee8:	d107      	bne.n	8009efa <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ef8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	2b0f      	cmp	r3, #15
 8009f00:	d947      	bls.n	8009f92 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009f02:	e03f      	b.n	8009f84 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	695b      	ldr	r3, [r3, #20]
 8009f0a:	f003 0302 	and.w	r3, r3, #2
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d114      	bne.n	8009f3c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	6812      	ldr	r2, [r2, #0]
 8009f1c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f22:	1d1a      	adds	r2, r3, #4
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	3b01      	subs	r3, #1
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009f3a:	e023      	b.n	8009f84 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f3c:	f7f8 f9c0 	bl	80022c0 <HAL_GetTick>
 8009f40:	4602      	mov	r2, r0
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	1ad3      	subs	r3, r2, r3
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d803      	bhi.n	8009f54 <HAL_SPI_Transmit+0x180>
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f52:	d102      	bne.n	8009f5a <HAL_SPI_Transmit+0x186>
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d114      	bne.n	8009f84 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f001 f816 	bl	800af8c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e11e      	b.n	800a1c2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d1b9      	bne.n	8009f04 <HAL_SPI_Transmit+0x130>
 8009f90:	e0f1      	b.n	800a176 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	2b07      	cmp	r3, #7
 8009f98:	f240 80e6 	bls.w	800a168 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009f9c:	e05d      	b.n	800a05a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	695b      	ldr	r3, [r3, #20]
 8009fa4:	f003 0302 	and.w	r3, r3, #2
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d132      	bne.n	800a012 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d918      	bls.n	8009fea <HAL_SPI_Transmit+0x216>
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d014      	beq.n	8009fea <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6812      	ldr	r2, [r2, #0]
 8009fca:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd0:	1d1a      	adds	r2, r3, #4
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	3b02      	subs	r3, #2
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009fe8:	e037      	b.n	800a05a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fee:	881a      	ldrh	r2, [r3, #0]
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ff8:	1c9a      	adds	r2, r3, #2
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a004:	b29b      	uxth	r3, r3
 800a006:	3b01      	subs	r3, #1
 800a008:	b29a      	uxth	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a010:	e023      	b.n	800a05a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a012:	f7f8 f955 	bl	80022c0 <HAL_GetTick>
 800a016:	4602      	mov	r2, r0
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d803      	bhi.n	800a02a <HAL_SPI_Transmit+0x256>
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a028:	d102      	bne.n	800a030 <HAL_SPI_Transmit+0x25c>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d114      	bne.n	800a05a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f000 ffab 	bl	800af8c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a044:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e0b3      	b.n	800a1c2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a060:	b29b      	uxth	r3, r3
 800a062:	2b00      	cmp	r3, #0
 800a064:	d19b      	bne.n	8009f9e <HAL_SPI_Transmit+0x1ca>
 800a066:	e086      	b.n	800a176 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	695b      	ldr	r3, [r3, #20]
 800a06e:	f003 0302 	and.w	r3, r3, #2
 800a072:	2b02      	cmp	r3, #2
 800a074:	d154      	bne.n	800a120 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	2b03      	cmp	r3, #3
 800a080:	d918      	bls.n	800a0b4 <HAL_SPI_Transmit+0x2e0>
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a086:	2b40      	cmp	r3, #64	; 0x40
 800a088:	d914      	bls.n	800a0b4 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	6812      	ldr	r2, [r2, #0]
 800a094:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a09a:	1d1a      	adds	r2, r3, #4
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	3b04      	subs	r3, #4
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a0b2:	e059      	b.n	800a168 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d917      	bls.n	800a0f0 <HAL_SPI_Transmit+0x31c>
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d013      	beq.n	800a0f0 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0cc:	881a      	ldrh	r2, [r3, #0]
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0d6:	1c9a      	adds	r2, r3, #2
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	3b02      	subs	r3, #2
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a0ee:	e03b      	b.n	800a168 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	3320      	adds	r3, #32
 800a0fa:	7812      	ldrb	r2, [r2, #0]
 800a0fc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a102:	1c5a      	adds	r2, r3, #1
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a10e:	b29b      	uxth	r3, r3
 800a110:	3b01      	subs	r3, #1
 800a112:	b29a      	uxth	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a11a:	e025      	b.n	800a168 <HAL_SPI_Transmit+0x394>
 800a11c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a120:	f7f8 f8ce 	bl	80022c0 <HAL_GetTick>
 800a124:	4602      	mov	r2, r0
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	1ad3      	subs	r3, r2, r3
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d803      	bhi.n	800a138 <HAL_SPI_Transmit+0x364>
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a136:	d102      	bne.n	800a13e <HAL_SPI_Transmit+0x36a>
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d114      	bne.n	800a168 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 ff24 	bl	800af8c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a152:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a164:	2303      	movs	r3, #3
 800a166:	e02c      	b.n	800a1c2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a16e:	b29b      	uxth	r3, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	f47f af79 	bne.w	800a068 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	2200      	movs	r2, #0
 800a17e:	2108      	movs	r1, #8
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f000 ffa3 	bl	800b0cc <SPI_WaitOnFlagUntilTimeout>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d007      	beq.n	800a19c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a192:	f043 0220 	orr.w	r2, r3, #32
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f000 fef5 	bl	800af8c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d001      	beq.n	800a1c0 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e000      	b.n	800a1c2 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800a1c0:	7efb      	ldrb	r3, [r7, #27]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3720      	adds	r7, #32
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop

0800a1cc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b088      	sub	sp, #32
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	60f8      	str	r0, [r7, #12]
 800a1d4:	60b9      	str	r1, [r7, #8]
 800a1d6:	603b      	str	r3, [r7, #0]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3330      	adds	r3, #48	; 0x30
 800a1e6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d101      	bne.n	800a1f6 <HAL_SPI_Receive+0x2a>
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	e173      	b.n	800a4de <HAL_SPI_Receive+0x312>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a1fe:	f7f8 f85f 	bl	80022c0 <HAL_GetTick>
 800a202:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d007      	beq.n	800a220 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800a210:	2302      	movs	r3, #2
 800a212:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a21c:	7ffb      	ldrb	r3, [r7, #31]
 800a21e:	e15e      	b.n	800a4de <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <HAL_SPI_Receive+0x60>
 800a226:	88fb      	ldrh	r3, [r7, #6]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d107      	bne.n	800a23c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a238:	7ffb      	ldrb	r3, [r7, #31]
 800a23a:	e150      	b.n	800a4de <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2204      	movs	r2, #4
 800a240:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	88fa      	ldrh	r2, [r7, #6]
 800a256:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	88fa      	ldrh	r2, [r7, #6]
 800a25e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a28c:	d108      	bne.n	800a2a0 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681a      	ldr	r2, [r3, #0]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	e009      	b.n	800a2b4 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a2b2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	4b8b      	ldr	r3, [pc, #556]	; (800a4e8 <HAL_SPI_Receive+0x31c>)
 800a2bc:	4013      	ands	r3, r2
 800a2be:	88f9      	ldrh	r1, [r7, #6]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	6812      	ldr	r2, [r2, #0]
 800a2c4:	430b      	orrs	r3, r1
 800a2c6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f042 0201 	orr.w	r2, r2, #1
 800a2d6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a2e0:	d107      	bne.n	800a2f2 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2f0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	2b0f      	cmp	r3, #15
 800a2f8:	d948      	bls.n	800a38c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a2fa:	e040      	b.n	800a37e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	695a      	ldr	r2, [r3, #20]
 800a302:	f248 0308 	movw	r3, #32776	; 0x8008
 800a306:	4013      	ands	r3, r2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d014      	beq.n	800a336 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a314:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a316:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a31c:	1d1a      	adds	r2, r3, #4
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a328:	b29b      	uxth	r3, r3
 800a32a:	3b01      	subs	r3, #1
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a334:	e023      	b.n	800a37e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a336:	f7f7 ffc3 	bl	80022c0 <HAL_GetTick>
 800a33a:	4602      	mov	r2, r0
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	429a      	cmp	r2, r3
 800a344:	d803      	bhi.n	800a34e <HAL_SPI_Receive+0x182>
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34c:	d102      	bne.n	800a354 <HAL_SPI_Receive+0x188>
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d114      	bne.n	800a37e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 fe19 	bl	800af8c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2200      	movs	r2, #0
 800a35e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a368:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2201      	movs	r2, #1
 800a376:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a37a:	2303      	movs	r3, #3
 800a37c:	e0af      	b.n	800a4de <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a384:	b29b      	uxth	r3, r3
 800a386:	2b00      	cmp	r3, #0
 800a388:	d1b8      	bne.n	800a2fc <HAL_SPI_Receive+0x130>
 800a38a:	e095      	b.n	800a4b8 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	2b07      	cmp	r3, #7
 800a392:	f240 808b 	bls.w	800a4ac <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a396:	e03f      	b.n	800a418 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	695b      	ldr	r3, [r3, #20]
 800a39e:	f003 0301 	and.w	r3, r3, #1
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d114      	bne.n	800a3d0 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3aa:	69ba      	ldr	r2, [r7, #24]
 800a3ac:	8812      	ldrh	r2, [r2, #0]
 800a3ae:	b292      	uxth	r2, r2
 800a3b0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3b6:	1c9a      	adds	r2, r3, #2
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	3b01      	subs	r3, #1
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a3ce:	e023      	b.n	800a418 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3d0:	f7f7 ff76 	bl	80022c0 <HAL_GetTick>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	1ad3      	subs	r3, r2, r3
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d803      	bhi.n	800a3e8 <HAL_SPI_Receive+0x21c>
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e6:	d102      	bne.n	800a3ee <HAL_SPI_Receive+0x222>
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d114      	bne.n	800a418 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f000 fdcc 	bl	800af8c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a402:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2201      	movs	r2, #1
 800a410:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e062      	b.n	800a4de <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a41e:	b29b      	uxth	r3, r3
 800a420:	2b00      	cmp	r3, #0
 800a422:	d1b9      	bne.n	800a398 <HAL_SPI_Receive+0x1cc>
 800a424:	e048      	b.n	800a4b8 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	695b      	ldr	r3, [r3, #20]
 800a42c:	f003 0301 	and.w	r3, r3, #1
 800a430:	2b01      	cmp	r3, #1
 800a432:	d117      	bne.n	800a464 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a440:	7812      	ldrb	r2, [r2, #0]
 800a442:	b2d2      	uxtb	r2, r2
 800a444:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a44a:	1c5a      	adds	r2, r3, #1
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a456:	b29b      	uxth	r3, r3
 800a458:	3b01      	subs	r3, #1
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a462:	e023      	b.n	800a4ac <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a464:	f7f7 ff2c 	bl	80022c0 <HAL_GetTick>
 800a468:	4602      	mov	r2, r0
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	429a      	cmp	r2, r3
 800a472:	d803      	bhi.n	800a47c <HAL_SPI_Receive+0x2b0>
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47a:	d102      	bne.n	800a482 <HAL_SPI_Receive+0x2b6>
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d114      	bne.n	800a4ac <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 fd82 	bl	800af8c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a496:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e018      	b.n	800a4de <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1b6      	bne.n	800a426 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a4b8:	68f8      	ldr	r0, [r7, #12]
 800a4ba:	f000 fd67 	bl	800af8c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d001      	beq.n	800a4dc <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e000      	b.n	800a4de <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800a4dc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3720      	adds	r7, #32
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	ffff0000 	.word	0xffff0000

0800a4ec <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b086      	sub	sp, #24
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a504:	2b01      	cmp	r3, #1
 800a506:	d101      	bne.n	800a50c <HAL_SPI_Transmit_DMA+0x20>
 800a508:	2302      	movs	r3, #2
 800a50a:	e137      	b.n	800a77c <HAL_SPI_Transmit_DMA+0x290>
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d007      	beq.n	800a530 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800a520:	2302      	movs	r3, #2
 800a522:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a52c:	7dfb      	ldrb	r3, [r7, #23]
 800a52e:	e125      	b.n	800a77c <HAL_SPI_Transmit_DMA+0x290>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d002      	beq.n	800a53c <HAL_SPI_Transmit_DMA+0x50>
 800a536:	88fb      	ldrh	r3, [r7, #6]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d107      	bne.n	800a54c <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a548:	7dfb      	ldrb	r3, [r7, #23]
 800a54a:	e117      	b.n	800a77c <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2203      	movs	r2, #3
 800a550:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	88fa      	ldrh	r2, [r7, #6]
 800a566:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	88fa      	ldrh	r2, [r7, #6]
 800a56e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2200      	movs	r2, #0
 800a588:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a59c:	d108      	bne.n	800a5b0 <HAL_SPI_Transmit_DMA+0xc4>
  {
    SPI_1LINE_TX(hspi);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	e009      	b.n	800a5c4 <HAL_SPI_Transmit_DMA+0xd8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68db      	ldr	r3, [r3, #12]
 800a5b6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a5c2:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	2b0f      	cmp	r3, #15
 800a5ca:	d905      	bls.n	800a5d8 <HAL_SPI_Transmit_DMA+0xec>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5d0:	699b      	ldr	r3, [r3, #24]
 800a5d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5d6:	d10f      	bne.n	800a5f8 <HAL_SPI_Transmit_DMA+0x10c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a5dc:	2b07      	cmp	r3, #7
 800a5de:	d913      	bls.n	800a608 <HAL_SPI_Transmit_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ea:	d00d      	beq.n	800a608 <HAL_SPI_Transmit_DMA+0x11c>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5f0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a5f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5f6:	d007      	beq.n	800a608 <HAL_SPI_Transmit_DMA+0x11c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a604:	7dfb      	ldrb	r3, [r7, #23]
 800a606:	e0b9      	b.n	800a77c <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	2b07      	cmp	r3, #7
 800a60e:	d820      	bhi.n	800a652 <HAL_SPI_Transmit_DMA+0x166>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a614:	699b      	ldr	r3, [r3, #24]
 800a616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a61a:	d109      	bne.n	800a630 <HAL_SPI_Transmit_DMA+0x144>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a622:	b29b      	uxth	r3, r3
 800a624:	3301      	adds	r3, #1
 800a626:	105b      	asrs	r3, r3, #1
 800a628:	b29a      	uxth	r2, r3
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a634:	699b      	ldr	r3, [r3, #24]
 800a636:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a63a:	d11e      	bne.n	800a67a <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a642:	b29b      	uxth	r3, r3
 800a644:	3303      	adds	r3, #3
 800a646:	109b      	asrs	r3, r3, #2
 800a648:	b29a      	uxth	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a650:	e013      	b.n	800a67a <HAL_SPI_Transmit_DMA+0x18e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	2b0f      	cmp	r3, #15
 800a658:	d80f      	bhi.n	800a67a <HAL_SPI_Transmit_DMA+0x18e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a664:	d109      	bne.n	800a67a <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	3301      	adds	r3, #1
 800a670:	105b      	asrs	r3, r3, #1
 800a672:	b29a      	uxth	r2, r3
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a67e:	4a41      	ldr	r2, [pc, #260]	; (800a784 <HAL_SPI_Transmit_DMA+0x298>)
 800a680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a686:	4a40      	ldr	r2, [pc, #256]	; (800a788 <HAL_SPI_Transmit_DMA+0x29c>)
 800a688:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a68e:	4a3f      	ldr	r2, [pc, #252]	; (800a78c <HAL_SPI_Transmit_DMA+0x2a0>)
 800a690:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a696:	2200      	movs	r2, #0
 800a698:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	689a      	ldr	r2, [r3, #8]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a6a8:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	3320      	adds	r3, #32
 800a6ba:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a6c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a6c4:	f7f8 fa74 	bl	8002bb0 <HAL_DMA_Start_IT>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d013      	beq.n	800a6f6 <HAL_SPI_Transmit_DMA+0x20a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6d4:	f043 0210 	orr.w	r2, r3, #16
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800a6f2:	7dfb      	ldrb	r3, [r7, #23]
 800a6f4:	e042      	b.n	800a77c <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a6fa:	69db      	ldr	r3, [r3, #28]
 800a6fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a700:	d108      	bne.n	800a714 <HAL_SPI_Transmit_DMA+0x228>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	6859      	ldr	r1, [r3, #4]
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	4b20      	ldr	r3, [pc, #128]	; (800a790 <HAL_SPI_Transmit_DMA+0x2a4>)
 800a70e:	400b      	ands	r3, r1
 800a710:	6053      	str	r3, [r2, #4]
 800a712:	e009      	b.n	800a728 <HAL_SPI_Transmit_DMA+0x23c>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685a      	ldr	r2, [r3, #4]
 800a71a:	4b1d      	ldr	r3, [pc, #116]	; (800a790 <HAL_SPI_Transmit_DMA+0x2a4>)
 800a71c:	4013      	ands	r3, r2
 800a71e:	88f9      	ldrh	r1, [r7, #6]
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	6812      	ldr	r2, [r2, #0]
 800a724:	430b      	orrs	r3, r1
 800a726:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	689a      	ldr	r2, [r3, #8]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a736:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	691a      	ldr	r2, [r3, #16]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 800a746:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f042 0201 	orr.w	r2, r2, #1
 800a756:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a760:	d107      	bne.n	800a772 <HAL_SPI_Transmit_DMA+0x286>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a770:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800a77a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}
 800a784:	0800ae23 	.word	0x0800ae23
 800a788:	0800add9 	.word	0x0800add9
 800a78c:	0800ae43 	.word	0x0800ae43
 800a790:	ffff0000 	.word	0xffff0000

0800a794 <HAL_SPI_Abort>:
  *          + Set handle State to READY.
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b084      	sub	sp, #16
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;

  __IO uint32_t count;

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d101      	bne.n	800a7aa <HAL_SPI_Abort+0x16>
 800a7a6:	2302      	movs	r3, #2
 800a7a8:	e0d9      	b.n	800a95e <HAL_SPI_Abort+0x1ca>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set hspi->state to aborting to avoid any interaction */
  hspi->State = HAL_SPI_STATE_ABORT;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2207      	movs	r2, #7
 800a7b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	73fb      	strb	r3, [r7, #15]
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800a7be:	4b6a      	ldr	r3, [pc, #424]	; (800a968 <HAL_SPI_Abort+0x1d4>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a6a      	ldr	r2, [pc, #424]	; (800a96c <HAL_SPI_Abort+0x1d8>)
 800a7c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a7c8:	0a5b      	lsrs	r3, r3, #9
 800a7ca:	2264      	movs	r2, #100	; 0x64
 800a7cc:	fb02 f303 	mul.w	r3, r2, r3
 800a7d0:	60bb      	str	r3, [r7, #8]

  /* If master communication on going, make sure current frame is done before closing the connection */
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a7dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7e0:	d15b      	bne.n	800a89a <HAL_SPI_Abort+0x106>
  {
    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	691a      	ldr	r2, [r3, #16]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f022 0208 	bic.w	r2, r2, #8
 800a7f0:	611a      	str	r2, [r3, #16]
    do
    {
      count--;
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d108      	bne.n	800a810 <HAL_SPI_Abort+0x7c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a804:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800a80e:	e006      	b.n	800a81e <HAL_SPI_Abort+0x8a>
      }
    }
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	f003 0308 	and.w	r3, r3, #8
 800a81a:	2b08      	cmp	r3, #8
 800a81c:	d0e9      	beq.n	800a7f2 <HAL_SPI_Abort+0x5e>

    /* Request a Suspend transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a82c:	601a      	str	r2, [r3, #0]
    do
    {
      count--;
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	3b01      	subs	r3, #1
 800a832:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d108      	bne.n	800a84c <HAL_SPI_Abort+0xb8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a840:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800a84a:	e007      	b.n	800a85c <HAL_SPI_Abort+0xc8>
      }
    }
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a85a:	d0e8      	beq.n	800a82e <HAL_SPI_Abort+0x9a>

    /* Clear SUSP flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	699a      	ldr	r2, [r3, #24]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a86a:	619a      	str	r2, [r3, #24]
    do
    {
      count--;
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	3b01      	subs	r3, #1
 800a870:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d108      	bne.n	800a88a <HAL_SPI_Abort+0xf6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a87e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800a888:	e007      	b.n	800a89a <HAL_SPI_Abort+0x106>
      }
    }
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	695b      	ldr	r3, [r3, #20]
 800a890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a898:	d0e8      	beq.n	800a86c <HAL_SPI_Abort+0xd8>
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8a8:	d11b      	bne.n	800a8e2 <HAL_SPI_Abort+0x14e>
  {
    if (hspi->hdmatx != NULL)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d017      	beq.n	800a8e2 <HAL_SPI_Abort+0x14e>
    {
      /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmatx->XferAbortCallback = NULL;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7f8 fbe0 	bl	8003084 <HAL_DMA_Abort>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00b      	beq.n	800a8e2 <HAL_SPI_Abort+0x14e>
      {
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7fa f8c0 	bl	8004a54 <HAL_DMA_GetError>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b20      	cmp	r3, #32
 800a8d8:	d103      	bne.n	800a8e2 <HAL_SPI_Abort+0x14e>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2240      	movs	r2, #64	; 0x40
 800a8de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8f0:	d11b      	bne.n	800a92a <HAL_SPI_Abort+0x196>
  {
    if (hspi->hdmarx != NULL)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d017      	beq.n	800a92a <HAL_SPI_Abort+0x196>
    {
      /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmarx->XferAbortCallback = NULL;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8fe:	2200      	movs	r2, #0
 800a900:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a906:	4618      	mov	r0, r3
 800a908:	f7f8 fbbc 	bl	8003084 <HAL_DMA_Abort>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00b      	beq.n	800a92a <HAL_SPI_Abort+0x196>
      {
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a916:	4618      	mov	r0, r3
 800a918:	f7fa f89c 	bl	8004a54 <HAL_DMA_GetError>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b20      	cmp	r3, #32
 800a920:	d103      	bne.n	800a92a <HAL_SPI_Abort+0x196>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2240      	movs	r2, #64	; 0x40
 800a926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
  }

  /* Proceed with abort procedure */
  SPI_AbortTransfer(hspi);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 faca 	bl	800aec4 <SPI_AbortTransfer>

  /* Check error during Abort procedure */
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a93a:	2b40      	cmp	r3, #64	; 0x40
 800a93c:	d102      	bne.n	800a944 <HAL_SPI_Abort+0x1b0>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	73fb      	strb	r3, [r7, #15]
 800a942:	e003      	b.n	800a94c <HAL_SPI_Abort+0x1b8>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2200      	movs	r2, #0
 800a948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return errorcode;
 800a95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3710      	adds	r7, #16
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	24000000 	.word	0x24000000
 800a96c:	057619f1 	.word	0x057619f1

0800a970 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08a      	sub	sp, #40	; 0x28
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	691b      	ldr	r3, [r3, #16]
 800a97e:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a988:	6a3a      	ldr	r2, [r7, #32]
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	4013      	ands	r3, r2
 800a98e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a998:	2300      	movs	r3, #0
 800a99a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a9a2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3330      	adds	r3, #48	; 0x30
 800a9aa:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d012      	beq.n	800a9dc <HAL_SPI_IRQHandler+0x6c>
 800a9b6:	6a3b      	ldr	r3, [r7, #32]
 800a9b8:	f003 0308 	and.w	r3, r3, #8
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00d      	beq.n	800a9dc <HAL_SPI_IRQHandler+0x6c>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	699a      	ldr	r2, [r3, #24]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9ce:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	4798      	blx	r3
#else
    HAL_SPI_SuspendCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a9da:	e19c      	b.n	800ad16 <HAL_SPI_IRQHandler+0x3a6>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d113      	bne.n	800aa0e <HAL_SPI_IRQHandler+0x9e>
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	f003 0320 	and.w	r3, r3, #32
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d10e      	bne.n	800aa0e <HAL_SPI_IRQHandler+0x9e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d009      	beq.n	800aa0e <HAL_SPI_IRQHandler+0x9e>
  {
    hspi->TxISR(hspi);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	4798      	blx	r3
    hspi->RxISR(hspi);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	4798      	blx	r3
    handled = 1UL;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d10f      	bne.n	800aa38 <HAL_SPI_IRQHandler+0xc8>
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	f003 0301 	and.w	r3, r3, #1
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00a      	beq.n	800aa38 <HAL_SPI_IRQHandler+0xc8>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d105      	bne.n	800aa38 <HAL_SPI_IRQHandler+0xc8>
  {
    hspi->RxISR(hspi);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	4798      	blx	r3
    handled = 1UL;
 800aa34:	2301      	movs	r3, #1
 800aa36:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	f003 0320 	and.w	r3, r3, #32
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10f      	bne.n	800aa62 <HAL_SPI_IRQHandler+0xf2>
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	f003 0302 	and.w	r3, r3, #2
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00a      	beq.n	800aa62 <HAL_SPI_IRQHandler+0xf2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d105      	bne.n	800aa62 <HAL_SPI_IRQHandler+0xf2>
  {
    hspi->TxISR(hspi);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	4798      	blx	r3
    handled = 1UL;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f040 8151 	bne.w	800ad0c <HAL_SPI_IRQHandler+0x39c>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	f003 0308 	and.w	r3, r3, #8
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 8093 	beq.w	800ab9c <HAL_SPI_IRQHandler+0x22c>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	699a      	ldr	r2, [r3, #24]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f042 0208 	orr.w	r2, r2, #8
 800aa84:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	699a      	ldr	r2, [r3, #24]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f042 0210 	orr.w	r2, r2, #16
 800aa94:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	699a      	ldr	r2, [r3, #24]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aaa4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	691a      	ldr	r2, [r3, #16]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f022 0208 	bic.w	r2, r2, #8
 800aab4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d13d      	bne.n	800ab40 <HAL_SPI_IRQHandler+0x1d0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800aac4:	e036      	b.n	800ab34 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	2b0f      	cmp	r3, #15
 800aacc:	d90b      	bls.n	800aae6 <HAL_SPI_IRQHandler+0x176>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aad6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aad8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aade:	1d1a      	adds	r2, r3, #4
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	665a      	str	r2, [r3, #100]	; 0x64
 800aae4:	e01d      	b.n	800ab22 <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	68db      	ldr	r3, [r3, #12]
 800aaea:	2b07      	cmp	r3, #7
 800aaec:	d90b      	bls.n	800ab06 <HAL_SPI_IRQHandler+0x196>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	8812      	ldrh	r2, [r2, #0]
 800aaf6:	b292      	uxth	r2, r2
 800aaf8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aafe:	1c9a      	adds	r2, r3, #2
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	665a      	str	r2, [r3, #100]	; 0x64
 800ab04:	e00d      	b.n	800ab22 <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab12:	7812      	ldrb	r2, [r2, #0]
 800ab14:	b2d2      	uxtb	r2, r2
 800ab16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab1c:	1c5a      	adds	r2, r3, #1
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ab28:	b29b      	uxth	r3, r3
 800ab2a:	3b01      	subs	r3, #1
 800ab2c:	b29a      	uxth	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d1c2      	bne.n	800aac6 <HAL_SPI_IRQHandler+0x156>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fa23 	bl	800af8c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d005      	beq.n	800ab64 <HAL_SPI_IRQHandler+0x1f4>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ab62:	e0d8      	b.n	800ad16 <HAL_SPI_IRQHandler+0x3a6>
    }

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ab64:	7cfb      	ldrb	r3, [r7, #19]
 800ab66:	2b05      	cmp	r3, #5
 800ab68:	d105      	bne.n	800ab76 <HAL_SPI_IRQHandler+0x206>
    {
      hspi->TxRxCpltCallback(hspi);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	4798      	blx	r3
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ab74:	e0cc      	b.n	800ad10 <HAL_SPI_IRQHandler+0x3a0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ab76:	7cfb      	ldrb	r3, [r7, #19]
 800ab78:	2b04      	cmp	r3, #4
 800ab7a:	d105      	bne.n	800ab88 <HAL_SPI_IRQHandler+0x218>
      hspi->RxCpltCallback(hspi);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	4798      	blx	r3
    return;
 800ab86:	e0c3      	b.n	800ad10 <HAL_SPI_IRQHandler+0x3a0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ab88:	7cfb      	ldrb	r3, [r7, #19]
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	f040 80c0 	bne.w	800ad10 <HAL_SPI_IRQHandler+0x3a0>
      hspi->TxCpltCallback(hspi);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	4798      	blx	r3
    return;
 800ab9a:	e0b9      	b.n	800ad10 <HAL_SPI_IRQHandler+0x3a0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f000 80b7 	beq.w	800ad16 <HAL_SPI_IRQHandler+0x3a6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00f      	beq.n	800abd2 <HAL_SPI_IRQHandler+0x262>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abb8:	f043 0204 	orr.w	r2, r3, #4
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	699a      	ldr	r2, [r3, #24]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800abd0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800abd2:	69bb      	ldr	r3, [r7, #24]
 800abd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00f      	beq.n	800abfc <HAL_SPI_IRQHandler+0x28c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abe2:	f043 0201 	orr.w	r2, r3, #1
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	699a      	ldr	r2, [r3, #24]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abfa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800abfc:	69bb      	ldr	r3, [r7, #24]
 800abfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00f      	beq.n	800ac26 <HAL_SPI_IRQHandler+0x2b6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac0c:	f043 0208 	orr.w	r2, r3, #8
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	699a      	ldr	r2, [r3, #24]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac24:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	f003 0320 	and.w	r3, r3, #32
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00f      	beq.n	800ac50 <HAL_SPI_IRQHandler+0x2e0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac36:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	699a      	ldr	r2, [r3, #24]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f042 0220 	orr.w	r2, r2, #32
 800ac4e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d05c      	beq.n	800ad14 <HAL_SPI_IRQHandler+0x3a4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	681a      	ldr	r2, [r3, #0]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f022 0201 	bic.w	r2, r2, #1
 800ac68:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	6919      	ldr	r1, [r3, #16]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681a      	ldr	r2, [r3, #0]
 800ac74:	4b29      	ldr	r3, [pc, #164]	; (800ad1c <HAL_SPI_IRQHandler+0x3ac>)
 800ac76:	400b      	ands	r3, r1
 800ac78:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ac80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ac84:	d138      	bne.n	800acf8 <HAL_SPI_IRQHandler+0x388>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	689a      	ldr	r2, [r3, #8]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ac94:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d013      	beq.n	800acc6 <HAL_SPI_IRQHandler+0x356>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aca2:	4a1f      	ldr	r2, [pc, #124]	; (800ad20 <HAL_SPI_IRQHandler+0x3b0>)
 800aca4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acaa:	4618      	mov	r0, r3
 800acac:	f7f8 fd08 	bl	80036c0 <HAL_DMA_Abort_IT>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d007      	beq.n	800acc6 <HAL_SPI_IRQHandler+0x356>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acca:	2b00      	cmp	r3, #0
 800accc:	d022      	beq.n	800ad14 <HAL_SPI_IRQHandler+0x3a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acd2:	4a13      	ldr	r2, [pc, #76]	; (800ad20 <HAL_SPI_IRQHandler+0x3b0>)
 800acd4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acda:	4618      	mov	r0, r3
 800acdc:	f7f8 fcf0 	bl	80036c0 <HAL_DMA_Abort_IT>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d016      	beq.n	800ad14 <HAL_SPI_IRQHandler+0x3a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800acf6:	e00d      	b.n	800ad14 <HAL_SPI_IRQHandler+0x3a4>
        hspi->State = HAL_SPI_STATE_READY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        hspi->ErrorCallback(hspi);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	4798      	blx	r3
    return;
 800ad0a:	e003      	b.n	800ad14 <HAL_SPI_IRQHandler+0x3a4>
    return;
 800ad0c:	bf00      	nop
 800ad0e:	e002      	b.n	800ad16 <HAL_SPI_IRQHandler+0x3a6>
    return;
 800ad10:	bf00      	nop
 800ad12:	e000      	b.n	800ad16 <HAL_SPI_IRQHandler+0x3a6>
    return;
 800ad14:	bf00      	nop
  }
}
 800ad16:	3728      	adds	r7, #40	; 0x28
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	fffffc94 	.word	0xfffffc94
 800ad20:	0800ae8d 	.word	0x0800ae8d

0800ad24 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ad40:	bf00      	nop
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800ad68:	bf00      	nop
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b083      	sub	sp, #12
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800ad7c:	bf00      	nop
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800ad90:	bf00      	nop
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr

0800ad9c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ada4:	bf00      	nop
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800adb8:	bf00      	nop
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b084      	sub	sp, #16
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ade4:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800adec:	b2db      	uxtb	r3, r3
 800adee:	2b07      	cmp	r3, #7
 800adf0:	d013      	beq.n	800ae1a <SPI_DMATransmitCplt+0x42>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800adf6:	69db      	ldr	r3, [r3, #28]
 800adf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adfc:	d105      	bne.n	800ae0a <SPI_DMATransmitCplt+0x32>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	4798      	blx	r3
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800ae08:	e007      	b.n	800ae1a <SPI_DMATransmitCplt+0x42>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	691a      	ldr	r2, [r3, #16]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f042 0208 	orr.w	r2, r2, #8
 800ae18:	611a      	str	r2, [r3, #16]
}
 800ae1a:	bf00      	nop
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b084      	sub	sp, #16
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	4798      	blx	r3
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ae3a:	bf00      	nop
 800ae3c:	3710      	adds	r7, #16
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}

0800ae42 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae42:	b580      	push	{r7, lr}
 800ae44:	b084      	sub	sp, #16
 800ae46:	af00      	add	r7, sp, #0
 800ae48:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae4e:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7f9 fdff 	bl	8004a54 <HAL_DMA_GetError>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d013      	beq.n	800ae84 <SPI_DMAError+0x42>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800ae5c:	68f8      	ldr	r0, [r7, #12]
 800ae5e:	f000 f895 	bl	800af8c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae68:	f043 0210 	orr.w	r2, r3, #16
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2201      	movs	r2, #1
 800ae76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	4798      	blx	r3
#else
    HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800ae84:	bf00      	nop
 800ae86:	3710      	adds	r7, #16
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bd80      	pop	{r7, pc}

0800ae8c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae98:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2201      	movs	r2, #1
 800aeae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aeb8:	68f8      	ldr	r0, [r7, #12]
 800aeba:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aebc:	bf00      	nop
 800aebe:	3710      	adds	r7, #16
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}

0800aec4 <SPI_AbortTransfer>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f022 0201 	bic.w	r2, r2, #1
 800aeda:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	6919      	ldr	r1, [r3, #16]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	4b28      	ldr	r3, [pc, #160]	; (800af88 <SPI_AbortTransfer+0xc4>)
 800aee8:	400b      	ands	r3, r1
 800aeea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	699a      	ldr	r2, [r3, #24]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f042 0208 	orr.w	r2, r2, #8
 800aefa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	699a      	ldr	r2, [r3, #24]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f042 0210 	orr.w	r2, r2, #16
 800af0a:	619a      	str	r2, [r3, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	689a      	ldr	r2, [r3, #8]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800af1a:	609a      	str	r2, [r3, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	699a      	ldr	r2, [r3, #24]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af2a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	699a      	ldr	r2, [r3, #24]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f042 0220 	orr.w	r2, r2, #32
 800af3a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	699a      	ldr	r2, [r3, #24]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af4a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	699a      	ldr	r2, [r3, #24]
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af5a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	699a      	ldr	r2, [r3, #24]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800af6a:	619a      	str	r2, [r3, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr
 800af88:	fffffc90 	.word	0xfffffc90

0800af8c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b085      	sub	sp, #20
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	695b      	ldr	r3, [r3, #20]
 800af9a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	699a      	ldr	r2, [r3, #24]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f042 0208 	orr.w	r2, r2, #8
 800afaa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	699a      	ldr	r2, [r3, #24]
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f042 0210 	orr.w	r2, r2, #16
 800afba:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f022 0201 	bic.w	r2, r2, #1
 800afca:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	6919      	ldr	r1, [r3, #16]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	4b3c      	ldr	r3, [pc, #240]	; (800b0c8 <SPI_CloseTransfer+0x13c>)
 800afd8:	400b      	ands	r3, r1
 800afda:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	689a      	ldr	r2, [r3, #8]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800afea:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	2b04      	cmp	r3, #4
 800aff6:	d014      	beq.n	800b022 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f003 0320 	and.w	r3, r3, #32
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00f      	beq.n	800b022 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b008:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	699a      	ldr	r2, [r3, #24]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f042 0220 	orr.w	r2, r2, #32
 800b020:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d014      	beq.n	800b058 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00f      	beq.n	800b058 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b03e:	f043 0204 	orr.w	r2, r3, #4
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	699a      	ldr	r2, [r3, #24]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b056:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00f      	beq.n	800b082 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b068:	f043 0201 	orr.w	r2, r3, #1
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	699a      	ldr	r2, [r3, #24]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b080:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d00f      	beq.n	800b0ac <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b092:	f043 0208 	orr.w	r2, r3, #8
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	699a      	ldr	r2, [r3, #24]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0aa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b0bc:	bf00      	nop
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	fffffc90 	.word	0xfffffc90

0800b0cc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	603b      	str	r3, [r7, #0]
 800b0d8:	4613      	mov	r3, r2
 800b0da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b0dc:	e010      	b.n	800b100 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0de:	f7f7 f8ef 	bl	80022c0 <HAL_GetTick>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	69bb      	ldr	r3, [r7, #24]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	683a      	ldr	r2, [r7, #0]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d803      	bhi.n	800b0f6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f4:	d102      	bne.n	800b0fc <SPI_WaitOnFlagUntilTimeout+0x30>
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d101      	bne.n	800b100 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	e00f      	b.n	800b120 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	695a      	ldr	r2, [r3, #20]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	4013      	ands	r3, r2
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	bf0c      	ite	eq
 800b110:	2301      	moveq	r3, #1
 800b112:	2300      	movne	r3, #0
 800b114:	b2db      	uxtb	r3, r3
 800b116:	461a      	mov	r2, r3
 800b118:	79fb      	ldrb	r3, [r7, #7]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d0df      	beq.n	800b0de <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b134:	095b      	lsrs	r3, r3, #5
 800b136:	3301      	adds	r3, #1
 800b138:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	3301      	adds	r3, #1
 800b140:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	3307      	adds	r3, #7
 800b146:	08db      	lsrs	r3, r3, #3
 800b148:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	fb02 f303 	mul.w	r3, r2, r3
}
 800b152:	4618      	mov	r0, r3
 800b154:	3714      	adds	r7, #20
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b082      	sub	sp, #8
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	e049      	b.n	800b204 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b176:	b2db      	uxtb	r3, r3
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d106      	bne.n	800b18a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7f6 fab9 	bl	80016fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2202      	movs	r2, #2
 800b18e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	3304      	adds	r3, #4
 800b19a:	4619      	mov	r1, r3
 800b19c:	4610      	mov	r0, r2
 800b19e:	f000 fb93 	bl	800b8c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2201      	movs	r2, #1
 800b1ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2201      	movs	r2, #1
 800b1be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2201      	movs	r2, #1
 800b1ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d001      	beq.n	800b224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	e054      	b.n	800b2ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2202      	movs	r2, #2
 800b228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	68da      	ldr	r2, [r3, #12]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f042 0201 	orr.w	r2, r2, #1
 800b23a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a26      	ldr	r2, [pc, #152]	; (800b2dc <HAL_TIM_Base_Start_IT+0xd0>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d022      	beq.n	800b28c <HAL_TIM_Base_Start_IT+0x80>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b24e:	d01d      	beq.n	800b28c <HAL_TIM_Base_Start_IT+0x80>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a22      	ldr	r2, [pc, #136]	; (800b2e0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d018      	beq.n	800b28c <HAL_TIM_Base_Start_IT+0x80>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a21      	ldr	r2, [pc, #132]	; (800b2e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d013      	beq.n	800b28c <HAL_TIM_Base_Start_IT+0x80>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a1f      	ldr	r2, [pc, #124]	; (800b2e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d00e      	beq.n	800b28c <HAL_TIM_Base_Start_IT+0x80>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a1e      	ldr	r2, [pc, #120]	; (800b2ec <HAL_TIM_Base_Start_IT+0xe0>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d009      	beq.n	800b28c <HAL_TIM_Base_Start_IT+0x80>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a1c      	ldr	r2, [pc, #112]	; (800b2f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d004      	beq.n	800b28c <HAL_TIM_Base_Start_IT+0x80>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a1b      	ldr	r2, [pc, #108]	; (800b2f4 <HAL_TIM_Base_Start_IT+0xe8>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d115      	bne.n	800b2b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	689a      	ldr	r2, [r3, #8]
 800b292:	4b19      	ldr	r3, [pc, #100]	; (800b2f8 <HAL_TIM_Base_Start_IT+0xec>)
 800b294:	4013      	ands	r3, r2
 800b296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2b06      	cmp	r3, #6
 800b29c:	d015      	beq.n	800b2ca <HAL_TIM_Base_Start_IT+0xbe>
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2a4:	d011      	beq.n	800b2ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f042 0201 	orr.w	r2, r2, #1
 800b2b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2b6:	e008      	b.n	800b2ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f042 0201 	orr.w	r2, r2, #1
 800b2c6:	601a      	str	r2, [r3, #0]
 800b2c8:	e000      	b.n	800b2cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	40010000 	.word	0x40010000
 800b2e0:	40000400 	.word	0x40000400
 800b2e4:	40000800 	.word	0x40000800
 800b2e8:	40000c00 	.word	0x40000c00
 800b2ec:	40010400 	.word	0x40010400
 800b2f0:	40001800 	.word	0x40001800
 800b2f4:	40014000 	.word	0x40014000
 800b2f8:	00010007 	.word	0x00010007

0800b2fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b086      	sub	sp, #24
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	e08f      	b.n	800b430 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b316:	b2db      	uxtb	r3, r3
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d106      	bne.n	800b32a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7f6 fa09 	bl	800173c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2202      	movs	r2, #2
 800b32e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	6899      	ldr	r1, [r3, #8]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	4b3e      	ldr	r3, [pc, #248]	; (800b438 <HAL_TIM_Encoder_Init+0x13c>)
 800b33e:	400b      	ands	r3, r1
 800b340:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	3304      	adds	r3, #4
 800b34a:	4619      	mov	r1, r3
 800b34c:	4610      	mov	r0, r2
 800b34e:	f000 fabb 	bl	800b8c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	6a1b      	ldr	r3, [r3, #32]
 800b368:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	697a      	ldr	r2, [r7, #20]
 800b370:	4313      	orrs	r3, r2
 800b372:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b374:	693a      	ldr	r2, [r7, #16]
 800b376:	4b31      	ldr	r3, [pc, #196]	; (800b43c <HAL_TIM_Encoder_Init+0x140>)
 800b378:	4013      	ands	r3, r2
 800b37a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	689a      	ldr	r2, [r3, #8]
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	699b      	ldr	r3, [r3, #24]
 800b384:	021b      	lsls	r3, r3, #8
 800b386:	4313      	orrs	r3, r2
 800b388:	693a      	ldr	r2, [r7, #16]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b38e:	693a      	ldr	r2, [r7, #16]
 800b390:	4b2b      	ldr	r3, [pc, #172]	; (800b440 <HAL_TIM_Encoder_Init+0x144>)
 800b392:	4013      	ands	r3, r2
 800b394:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b396:	693a      	ldr	r2, [r7, #16]
 800b398:	4b2a      	ldr	r3, [pc, #168]	; (800b444 <HAL_TIM_Encoder_Init+0x148>)
 800b39a:	4013      	ands	r3, r2
 800b39c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	68da      	ldr	r2, [r3, #12]
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	69db      	ldr	r3, [r3, #28]
 800b3a6:	021b      	lsls	r3, r3, #8
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	693a      	ldr	r2, [r7, #16]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	691b      	ldr	r3, [r3, #16]
 800b3b4:	011a      	lsls	r2, r3, #4
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	031b      	lsls	r3, r3, #12
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	693a      	ldr	r2, [r7, #16]
 800b3c0:	4313      	orrs	r3, r2
 800b3c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b3ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b3d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	685a      	ldr	r2, [r3, #4]
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	011b      	lsls	r3, r3, #4
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	697a      	ldr	r2, [r7, #20]
 800b3ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	693a      	ldr	r2, [r7, #16]
 800b3f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2201      	movs	r2, #1
 800b412:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2201      	movs	r2, #1
 800b41a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2201      	movs	r2, #1
 800b422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b42e:	2300      	movs	r3, #0
}
 800b430:	4618      	mov	r0, r3
 800b432:	3718      	adds	r7, #24
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	fffebff8 	.word	0xfffebff8
 800b43c:	fffffcfc 	.word	0xfffffcfc
 800b440:	fffff3f3 	.word	0xfffff3f3
 800b444:	ffff0f0f 	.word	0xffff0f0f

0800b448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	f003 0302 	and.w	r3, r3, #2
 800b45a:	2b02      	cmp	r3, #2
 800b45c:	d122      	bne.n	800b4a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	f003 0302 	and.w	r3, r3, #2
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d11b      	bne.n	800b4a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f06f 0202 	mvn.w	r2, #2
 800b474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	f003 0303 	and.w	r3, r3, #3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d003      	beq.n	800b492 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f9fe 	bl	800b88c <HAL_TIM_IC_CaptureCallback>
 800b490:	e005      	b.n	800b49e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 f9f0 	bl	800b878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 fa01 	bl	800b8a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	f003 0304 	and.w	r3, r3, #4
 800b4ae:	2b04      	cmp	r3, #4
 800b4b0:	d122      	bne.n	800b4f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	f003 0304 	and.w	r3, r3, #4
 800b4bc:	2b04      	cmp	r3, #4
 800b4be:	d11b      	bne.n	800b4f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f06f 0204 	mvn.w	r2, #4
 800b4c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	699b      	ldr	r3, [r3, #24]
 800b4d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d003      	beq.n	800b4e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f9d4 	bl	800b88c <HAL_TIM_IC_CaptureCallback>
 800b4e4:	e005      	b.n	800b4f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 f9c6 	bl	800b878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f9d7 	bl	800b8a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	f003 0308 	and.w	r3, r3, #8
 800b502:	2b08      	cmp	r3, #8
 800b504:	d122      	bne.n	800b54c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68db      	ldr	r3, [r3, #12]
 800b50c:	f003 0308 	and.w	r3, r3, #8
 800b510:	2b08      	cmp	r3, #8
 800b512:	d11b      	bne.n	800b54c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f06f 0208 	mvn.w	r2, #8
 800b51c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2204      	movs	r2, #4
 800b522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	69db      	ldr	r3, [r3, #28]
 800b52a:	f003 0303 	and.w	r3, r3, #3
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d003      	beq.n	800b53a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 f9aa 	bl	800b88c <HAL_TIM_IC_CaptureCallback>
 800b538:	e005      	b.n	800b546 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f99c 	bl	800b878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f9ad 	bl	800b8a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	f003 0310 	and.w	r3, r3, #16
 800b556:	2b10      	cmp	r3, #16
 800b558:	d122      	bne.n	800b5a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	68db      	ldr	r3, [r3, #12]
 800b560:	f003 0310 	and.w	r3, r3, #16
 800b564:	2b10      	cmp	r3, #16
 800b566:	d11b      	bne.n	800b5a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f06f 0210 	mvn.w	r2, #16
 800b570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2208      	movs	r2, #8
 800b576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	69db      	ldr	r3, [r3, #28]
 800b57e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b582:	2b00      	cmp	r3, #0
 800b584:	d003      	beq.n	800b58e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f980 	bl	800b88c <HAL_TIM_IC_CaptureCallback>
 800b58c:	e005      	b.n	800b59a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f000 f972 	bl	800b878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f983 	bl	800b8a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2200      	movs	r2, #0
 800b59e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	f003 0301 	and.w	r3, r3, #1
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d10e      	bne.n	800b5cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	f003 0301 	and.w	r3, r3, #1
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d107      	bne.n	800b5cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f06f 0201 	mvn.w	r2, #1
 800b5c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7f5 fe38 	bl	800123c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5d6:	2b80      	cmp	r3, #128	; 0x80
 800b5d8:	d10e      	bne.n	800b5f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5e4:	2b80      	cmp	r3, #128	; 0x80
 800b5e6:	d107      	bne.n	800b5f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 fb38 	bl	800bc68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	691b      	ldr	r3, [r3, #16]
 800b5fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b606:	d10e      	bne.n	800b626 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b612:	2b80      	cmp	r3, #128	; 0x80
 800b614:	d107      	bne.n	800b626 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b61e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fb2b 	bl	800bc7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b630:	2b40      	cmp	r3, #64	; 0x40
 800b632:	d10e      	bne.n	800b652 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b63e:	2b40      	cmp	r3, #64	; 0x40
 800b640:	d107      	bne.n	800b652 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b64a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 f931 	bl	800b8b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	691b      	ldr	r3, [r3, #16]
 800b658:	f003 0320 	and.w	r3, r3, #32
 800b65c:	2b20      	cmp	r3, #32
 800b65e:	d10e      	bne.n	800b67e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	f003 0320 	and.w	r3, r3, #32
 800b66a:	2b20      	cmp	r3, #32
 800b66c:	d107      	bne.n	800b67e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f06f 0220 	mvn.w	r2, #32
 800b676:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 faeb 	bl	800bc54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b67e:	bf00      	nop
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}
	...

0800b688 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d101      	bne.n	800b6a4 <HAL_TIM_ConfigClockSource+0x1c>
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	e0dc      	b.n	800b85e <HAL_TIM_ConfigClockSource+0x1d6>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2202      	movs	r2, #2
 800b6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	4b6a      	ldr	r3, [pc, #424]	; (800b868 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b6c0:	4013      	ands	r3, r2
 800b6c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a64      	ldr	r2, [pc, #400]	; (800b86c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	f000 80a9 	beq.w	800b832 <HAL_TIM_ConfigClockSource+0x1aa>
 800b6e0:	4a62      	ldr	r2, [pc, #392]	; (800b86c <HAL_TIM_ConfigClockSource+0x1e4>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	f200 80ae 	bhi.w	800b844 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6e8:	4a61      	ldr	r2, [pc, #388]	; (800b870 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	f000 80a1 	beq.w	800b832 <HAL_TIM_ConfigClockSource+0x1aa>
 800b6f0:	4a5f      	ldr	r2, [pc, #380]	; (800b870 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	f200 80a6 	bhi.w	800b844 <HAL_TIM_ConfigClockSource+0x1bc>
 800b6f8:	4a5e      	ldr	r2, [pc, #376]	; (800b874 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	f000 8099 	beq.w	800b832 <HAL_TIM_ConfigClockSource+0x1aa>
 800b700:	4a5c      	ldr	r2, [pc, #368]	; (800b874 <HAL_TIM_ConfigClockSource+0x1ec>)
 800b702:	4293      	cmp	r3, r2
 800b704:	f200 809e 	bhi.w	800b844 <HAL_TIM_ConfigClockSource+0x1bc>
 800b708:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b70c:	f000 8091 	beq.w	800b832 <HAL_TIM_ConfigClockSource+0x1aa>
 800b710:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b714:	f200 8096 	bhi.w	800b844 <HAL_TIM_ConfigClockSource+0x1bc>
 800b718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b71c:	f000 8089 	beq.w	800b832 <HAL_TIM_ConfigClockSource+0x1aa>
 800b720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b724:	f200 808e 	bhi.w	800b844 <HAL_TIM_ConfigClockSource+0x1bc>
 800b728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b72c:	d03e      	beq.n	800b7ac <HAL_TIM_ConfigClockSource+0x124>
 800b72e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b732:	f200 8087 	bhi.w	800b844 <HAL_TIM_ConfigClockSource+0x1bc>
 800b736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b73a:	f000 8086 	beq.w	800b84a <HAL_TIM_ConfigClockSource+0x1c2>
 800b73e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b742:	d87f      	bhi.n	800b844 <HAL_TIM_ConfigClockSource+0x1bc>
 800b744:	2b70      	cmp	r3, #112	; 0x70
 800b746:	d01a      	beq.n	800b77e <HAL_TIM_ConfigClockSource+0xf6>
 800b748:	2b70      	cmp	r3, #112	; 0x70
 800b74a:	d87b      	bhi.n	800b844 <HAL_TIM_ConfigClockSource+0x1bc>
 800b74c:	2b60      	cmp	r3, #96	; 0x60
 800b74e:	d050      	beq.n	800b7f2 <HAL_TIM_ConfigClockSource+0x16a>
 800b750:	2b60      	cmp	r3, #96	; 0x60
 800b752:	d877      	bhi.n	800b844 <HAL_TIM_ConfigClockSource+0x1bc>
 800b754:	2b50      	cmp	r3, #80	; 0x50
 800b756:	d03c      	beq.n	800b7d2 <HAL_TIM_ConfigClockSource+0x14a>
 800b758:	2b50      	cmp	r3, #80	; 0x50
 800b75a:	d873      	bhi.n	800b844 <HAL_TIM_ConfigClockSource+0x1bc>
 800b75c:	2b40      	cmp	r3, #64	; 0x40
 800b75e:	d058      	beq.n	800b812 <HAL_TIM_ConfigClockSource+0x18a>
 800b760:	2b40      	cmp	r3, #64	; 0x40
 800b762:	d86f      	bhi.n	800b844 <HAL_TIM_ConfigClockSource+0x1bc>
 800b764:	2b30      	cmp	r3, #48	; 0x30
 800b766:	d064      	beq.n	800b832 <HAL_TIM_ConfigClockSource+0x1aa>
 800b768:	2b30      	cmp	r3, #48	; 0x30
 800b76a:	d86b      	bhi.n	800b844 <HAL_TIM_ConfigClockSource+0x1bc>
 800b76c:	2b20      	cmp	r3, #32
 800b76e:	d060      	beq.n	800b832 <HAL_TIM_ConfigClockSource+0x1aa>
 800b770:	2b20      	cmp	r3, #32
 800b772:	d867      	bhi.n	800b844 <HAL_TIM_ConfigClockSource+0x1bc>
 800b774:	2b00      	cmp	r3, #0
 800b776:	d05c      	beq.n	800b832 <HAL_TIM_ConfigClockSource+0x1aa>
 800b778:	2b10      	cmp	r3, #16
 800b77a:	d05a      	beq.n	800b832 <HAL_TIM_ConfigClockSource+0x1aa>
 800b77c:	e062      	b.n	800b844 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b78e:	f000 f9b3 	bl	800baf8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b7a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	609a      	str	r2, [r3, #8]
      break;
 800b7aa:	e04f      	b.n	800b84c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b7bc:	f000 f99c 	bl	800baf8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	689a      	ldr	r2, [r3, #8]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7ce:	609a      	str	r2, [r3, #8]
      break;
 800b7d0:	e03c      	b.n	800b84c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7de:	461a      	mov	r2, r3
 800b7e0:	f000 f90c 	bl	800b9fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2150      	movs	r1, #80	; 0x50
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f000 f966 	bl	800babc <TIM_ITRx_SetConfig>
      break;
 800b7f0:	e02c      	b.n	800b84c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7fe:	461a      	mov	r2, r3
 800b800:	f000 f92b 	bl	800ba5a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2160      	movs	r1, #96	; 0x60
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 f956 	bl	800babc <TIM_ITRx_SetConfig>
      break;
 800b810:	e01c      	b.n	800b84c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b81e:	461a      	mov	r2, r3
 800b820:	f000 f8ec 	bl	800b9fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2140      	movs	r1, #64	; 0x40
 800b82a:	4618      	mov	r0, r3
 800b82c:	f000 f946 	bl	800babc <TIM_ITRx_SetConfig>
      break;
 800b830:	e00c      	b.n	800b84c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4619      	mov	r1, r3
 800b83c:	4610      	mov	r0, r2
 800b83e:	f000 f93d 	bl	800babc <TIM_ITRx_SetConfig>
      break;
 800b842:	e003      	b.n	800b84c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b844:	2301      	movs	r3, #1
 800b846:	73fb      	strb	r3, [r7, #15]
      break;
 800b848:	e000      	b.n	800b84c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b84a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3710      	adds	r7, #16
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	ffceff88 	.word	0xffceff88
 800b86c:	00100040 	.word	0x00100040
 800b870:	00100030 	.word	0x00100030
 800b874:	00100020 	.word	0x00100020

0800b878 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b878:	b480      	push	{r7}
 800b87a:	b083      	sub	sp, #12
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b880:	bf00      	nop
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b894:	bf00      	nop
 800b896:	370c      	adds	r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8a8:	bf00      	nop
 800b8aa:	370c      	adds	r7, #12
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b083      	sub	sp, #12
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b8bc:	bf00      	nop
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	4a40      	ldr	r2, [pc, #256]	; (800b9dc <TIM_Base_SetConfig+0x114>)
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	d013      	beq.n	800b908 <TIM_Base_SetConfig+0x40>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e6:	d00f      	beq.n	800b908 <TIM_Base_SetConfig+0x40>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	4a3d      	ldr	r2, [pc, #244]	; (800b9e0 <TIM_Base_SetConfig+0x118>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d00b      	beq.n	800b908 <TIM_Base_SetConfig+0x40>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	4a3c      	ldr	r2, [pc, #240]	; (800b9e4 <TIM_Base_SetConfig+0x11c>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d007      	beq.n	800b908 <TIM_Base_SetConfig+0x40>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a3b      	ldr	r2, [pc, #236]	; (800b9e8 <TIM_Base_SetConfig+0x120>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d003      	beq.n	800b908 <TIM_Base_SetConfig+0x40>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a3a      	ldr	r2, [pc, #232]	; (800b9ec <TIM_Base_SetConfig+0x124>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d108      	bne.n	800b91a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b90e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	685b      	ldr	r3, [r3, #4]
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	4313      	orrs	r3, r2
 800b918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	4a2f      	ldr	r2, [pc, #188]	; (800b9dc <TIM_Base_SetConfig+0x114>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d01f      	beq.n	800b962 <TIM_Base_SetConfig+0x9a>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b928:	d01b      	beq.n	800b962 <TIM_Base_SetConfig+0x9a>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a2c      	ldr	r2, [pc, #176]	; (800b9e0 <TIM_Base_SetConfig+0x118>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d017      	beq.n	800b962 <TIM_Base_SetConfig+0x9a>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	4a2b      	ldr	r2, [pc, #172]	; (800b9e4 <TIM_Base_SetConfig+0x11c>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d013      	beq.n	800b962 <TIM_Base_SetConfig+0x9a>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4a2a      	ldr	r2, [pc, #168]	; (800b9e8 <TIM_Base_SetConfig+0x120>)
 800b93e:	4293      	cmp	r3, r2
 800b940:	d00f      	beq.n	800b962 <TIM_Base_SetConfig+0x9a>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4a29      	ldr	r2, [pc, #164]	; (800b9ec <TIM_Base_SetConfig+0x124>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d00b      	beq.n	800b962 <TIM_Base_SetConfig+0x9a>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	4a28      	ldr	r2, [pc, #160]	; (800b9f0 <TIM_Base_SetConfig+0x128>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d007      	beq.n	800b962 <TIM_Base_SetConfig+0x9a>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a27      	ldr	r2, [pc, #156]	; (800b9f4 <TIM_Base_SetConfig+0x12c>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d003      	beq.n	800b962 <TIM_Base_SetConfig+0x9a>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4a26      	ldr	r2, [pc, #152]	; (800b9f8 <TIM_Base_SetConfig+0x130>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d108      	bne.n	800b974 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b968:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	4313      	orrs	r3, r2
 800b972:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	695b      	ldr	r3, [r3, #20]
 800b97e:	4313      	orrs	r3, r2
 800b980:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	689a      	ldr	r2, [r3, #8]
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	4a10      	ldr	r2, [pc, #64]	; (800b9dc <TIM_Base_SetConfig+0x114>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d00f      	beq.n	800b9c0 <TIM_Base_SetConfig+0xf8>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	4a12      	ldr	r2, [pc, #72]	; (800b9ec <TIM_Base_SetConfig+0x124>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d00b      	beq.n	800b9c0 <TIM_Base_SetConfig+0xf8>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4a11      	ldr	r2, [pc, #68]	; (800b9f0 <TIM_Base_SetConfig+0x128>)
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d007      	beq.n	800b9c0 <TIM_Base_SetConfig+0xf8>
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	4a10      	ldr	r2, [pc, #64]	; (800b9f4 <TIM_Base_SetConfig+0x12c>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d003      	beq.n	800b9c0 <TIM_Base_SetConfig+0xf8>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a0f      	ldr	r2, [pc, #60]	; (800b9f8 <TIM_Base_SetConfig+0x130>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d103      	bne.n	800b9c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	691a      	ldr	r2, [r3, #16]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	615a      	str	r2, [r3, #20]
}
 800b9ce:	bf00      	nop
 800b9d0:	3714      	adds	r7, #20
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d8:	4770      	bx	lr
 800b9da:	bf00      	nop
 800b9dc:	40010000 	.word	0x40010000
 800b9e0:	40000400 	.word	0x40000400
 800b9e4:	40000800 	.word	0x40000800
 800b9e8:	40000c00 	.word	0x40000c00
 800b9ec:	40010400 	.word	0x40010400
 800b9f0:	40014000 	.word	0x40014000
 800b9f4:	40014400 	.word	0x40014400
 800b9f8:	40014800 	.word	0x40014800

0800b9fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b087      	sub	sp, #28
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6a1b      	ldr	r3, [r3, #32]
 800ba0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6a1b      	ldr	r3, [r3, #32]
 800ba12:	f023 0201 	bic.w	r2, r3, #1
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	699b      	ldr	r3, [r3, #24]
 800ba1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ba26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	011b      	lsls	r3, r3, #4
 800ba2c:	693a      	ldr	r2, [r7, #16]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	f023 030a 	bic.w	r3, r3, #10
 800ba38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba3a:	697a      	ldr	r2, [r7, #20]
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	4313      	orrs	r3, r2
 800ba40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	697a      	ldr	r2, [r7, #20]
 800ba4c:	621a      	str	r2, [r3, #32]
}
 800ba4e:	bf00      	nop
 800ba50:	371c      	adds	r7, #28
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b087      	sub	sp, #28
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	60f8      	str	r0, [r7, #12]
 800ba62:	60b9      	str	r1, [r7, #8]
 800ba64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6a1b      	ldr	r3, [r3, #32]
 800ba6a:	f023 0210 	bic.w	r2, r3, #16
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	699b      	ldr	r3, [r3, #24]
 800ba76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6a1b      	ldr	r3, [r3, #32]
 800ba7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ba84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	031b      	lsls	r3, r3, #12
 800ba8a:	697a      	ldr	r2, [r7, #20]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ba96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	011b      	lsls	r3, r3, #4
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	697a      	ldr	r2, [r7, #20]
 800baa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	621a      	str	r2, [r3, #32]
}
 800baae:	bf00      	nop
 800bab0:	371c      	adds	r7, #28
 800bab2:	46bd      	mov	sp, r7
 800bab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab8:	4770      	bx	lr
	...

0800babc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800babc:	b480      	push	{r7}
 800babe:	b085      	sub	sp, #20
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	4b09      	ldr	r3, [pc, #36]	; (800baf4 <TIM_ITRx_SetConfig+0x38>)
 800bad0:	4013      	ands	r3, r2
 800bad2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bad4:	683a      	ldr	r2, [r7, #0]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	4313      	orrs	r3, r2
 800bada:	f043 0307 	orr.w	r3, r3, #7
 800bade:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	68fa      	ldr	r2, [r7, #12]
 800bae4:	609a      	str	r2, [r3, #8]
}
 800bae6:	bf00      	nop
 800bae8:	3714      	adds	r7, #20
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	ffcfff8f 	.word	0xffcfff8f

0800baf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b087      	sub	sp, #28
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
 800bb04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	021a      	lsls	r2, r3, #8
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	431a      	orrs	r2, r3
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	697a      	ldr	r2, [r7, #20]
 800bb2a:	609a      	str	r2, [r3, #8]
}
 800bb2c:	bf00      	nop
 800bb2e:	371c      	adds	r7, #28
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
 800bb40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d101      	bne.n	800bb50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bb4c:	2302      	movs	r3, #2
 800bb4e:	e06d      	b.n	800bc2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2202      	movs	r2, #2
 800bb5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	4a30      	ldr	r2, [pc, #192]	; (800bc38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d004      	beq.n	800bb84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a2f      	ldr	r2, [pc, #188]	; (800bc3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d108      	bne.n	800bb96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bb8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	68fa      	ldr	r2, [r7, #12]
 800bb92:	4313      	orrs	r3, r2
 800bb94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	4313      	orrs	r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	68fa      	ldr	r2, [r7, #12]
 800bbae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4a20      	ldr	r2, [pc, #128]	; (800bc38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d022      	beq.n	800bc00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbc2:	d01d      	beq.n	800bc00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	4a1d      	ldr	r2, [pc, #116]	; (800bc40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bbca:	4293      	cmp	r3, r2
 800bbcc:	d018      	beq.n	800bc00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a1c      	ldr	r2, [pc, #112]	; (800bc44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d013      	beq.n	800bc00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a1a      	ldr	r2, [pc, #104]	; (800bc48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bbde:	4293      	cmp	r3, r2
 800bbe0:	d00e      	beq.n	800bc00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a15      	ldr	r2, [pc, #84]	; (800bc3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d009      	beq.n	800bc00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a16      	ldr	r2, [pc, #88]	; (800bc4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d004      	beq.n	800bc00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4a15      	ldr	r2, [pc, #84]	; (800bc50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d10c      	bne.n	800bc1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	68ba      	ldr	r2, [r7, #8]
 800bc0e:	4313      	orrs	r3, r2
 800bc10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2200      	movs	r2, #0
 800bc26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc2a:	2300      	movs	r3, #0
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3714      	adds	r7, #20
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr
 800bc38:	40010000 	.word	0x40010000
 800bc3c:	40010400 	.word	0x40010400
 800bc40:	40000400 	.word	0x40000400
 800bc44:	40000800 	.word	0x40000800
 800bc48:	40000c00 	.word	0x40000c00
 800bc4c:	40001800 	.word	0x40001800
 800bc50:	40014000 	.word	0x40014000

0800bc54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bc5c:	bf00      	nop
 800bc5e:	370c      	adds	r7, #12
 800bc60:	46bd      	mov	sp, r7
 800bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc66:	4770      	bx	lr

0800bc68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b083      	sub	sp, #12
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc70:	bf00      	nop
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc84:	bf00      	nop
 800bc86:	370c      	adds	r7, #12
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d101      	bne.n	800bca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e050      	b.n	800bd44 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d114      	bne.n	800bcd6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f001 f9fd 	bl	800d0b4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d103      	bne.n	800bccc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a21      	ldr	r2, [pc, #132]	; (800bd4c <HAL_UART_Init+0xbc>)
 800bcc8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2224      	movs	r2, #36	; 0x24
 800bcda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f022 0201 	bic.w	r2, r2, #1
 800bcec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f001 fa32 	bl	800d158 <UART_SetConfig>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d101      	bne.n	800bcfe <HAL_UART_Init+0x6e>
  {
    return HAL_ERROR;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e022      	b.n	800bd44 <HAL_UART_Init+0xb4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d002      	beq.n	800bd0c <HAL_UART_Init+0x7c>
  {
    UART_AdvFeatureConfig(huart);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f001 ff8e 	bl	800dc28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	685a      	ldr	r2, [r3, #4]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bd1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	689a      	ldr	r2, [r3, #8]
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bd2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f042 0201 	orr.w	r2, r2, #1
 800bd3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f002 f815 	bl	800dd6c <UART_CheckIdleState>
 800bd42:	4603      	mov	r3, r0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	0800183d 	.word	0x0800183d

0800bd50 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b087      	sub	sp, #28
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	460b      	mov	r3, r1
 800bd5a:	607a      	str	r2, [r7, #4]
 800bd5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d109      	bne.n	800bd7c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e09c      	b.n	800beb6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd82:	2b20      	cmp	r3, #32
 800bd84:	d16c      	bne.n	800be60 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800bd86:	7afb      	ldrb	r3, [r7, #11]
 800bd88:	2b0c      	cmp	r3, #12
 800bd8a:	d85e      	bhi.n	800be4a <HAL_UART_RegisterCallback+0xfa>
 800bd8c:	a201      	add	r2, pc, #4	; (adr r2, 800bd94 <HAL_UART_RegisterCallback+0x44>)
 800bd8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd92:	bf00      	nop
 800bd94:	0800bdc9 	.word	0x0800bdc9
 800bd98:	0800bdd3 	.word	0x0800bdd3
 800bd9c:	0800bddd 	.word	0x0800bddd
 800bda0:	0800bde7 	.word	0x0800bde7
 800bda4:	0800bdf1 	.word	0x0800bdf1
 800bda8:	0800bdfb 	.word	0x0800bdfb
 800bdac:	0800be05 	.word	0x0800be05
 800bdb0:	0800be0f 	.word	0x0800be0f
 800bdb4:	0800be19 	.word	0x0800be19
 800bdb8:	0800be23 	.word	0x0800be23
 800bdbc:	0800be2d 	.word	0x0800be2d
 800bdc0:	0800be37 	.word	0x0800be37
 800bdc4:	0800be41 	.word	0x0800be41
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800bdd0:	e070      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800bdda:	e06b      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800bde4:	e066      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800bdee:	e061      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800bdf8:	e05c      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800be02:	e057      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	687a      	ldr	r2, [r7, #4]
 800be08:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800be0c:	e052      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800be16:	e04d      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 800be20:	e048      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 800be2a:	e043      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 800be34:	e03e      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	687a      	ldr	r2, [r7, #4]
 800be3a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 800be3e:	e039      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 800be48:	e034      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	75fb      	strb	r3, [r7, #23]
        break;
 800be5e:	e029      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be66:	2b00      	cmp	r3, #0
 800be68:	d11a      	bne.n	800bea0 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800be6a:	7afb      	ldrb	r3, [r7, #11]
 800be6c:	2b0b      	cmp	r3, #11
 800be6e:	d002      	beq.n	800be76 <HAL_UART_RegisterCallback+0x126>
 800be70:	2b0c      	cmp	r3, #12
 800be72:	d005      	beq.n	800be80 <HAL_UART_RegisterCallback+0x130>
 800be74:	e009      	b.n	800be8a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 800be7e:	e019      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 800be88:	e014      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	75fb      	strb	r3, [r7, #23]
        break;
 800be9e:	e009      	b.n	800beb4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bea6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800beb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	371c      	adds	r7, #28
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop

0800bec4 <HAL_UART_RegisterRxEventCallback>:
  * @param  huart     Uart handle
  * @param  pCallback Pointer to the Rx Event Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallbackTypeDef pCallback)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bece:	2300      	movs	r3, #0
 800bed0:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d109      	bne.n	800beec <HAL_UART_RegisterRxEventCallback+0x28>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bede:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	e023      	b.n	800bf34 <HAL_UART_RegisterRxEventCallback+0x70>
  }

  /* Process locked */
  __HAL_LOCK(huart);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d101      	bne.n	800befa <HAL_UART_RegisterRxEventCallback+0x36>
 800bef6:	2302      	movs	r3, #2
 800bef8:	e01c      	b.n	800bf34 <HAL_UART_RegisterRxEventCallback+0x70>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2201      	movs	r2, #1
 800befe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  if (huart->gState == HAL_UART_STATE_READY)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf08:	2b20      	cmp	r3, #32
 800bf0a:	d104      	bne.n	800bf16 <HAL_UART_RegisterRxEventCallback+0x52>
  {
    huart->RxEventCallback = pCallback;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	683a      	ldr	r2, [r7, #0]
 800bf10:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800bf14:	e009      	b.n	800bf2a <HAL_UART_RegisterRxEventCallback+0x66>
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf1c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800bf32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3714      	adds	r7, #20
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr

0800bf40 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b091      	sub	sp, #68	; 0x44
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	60b9      	str	r1, [r7, #8]
 800bf4a:	4613      	mov	r3, r2
 800bf4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf54:	2b20      	cmp	r3, #32
 800bf56:	d178      	bne.n	800c04a <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d002      	beq.n	800bf64 <HAL_UART_Transmit_IT+0x24>
 800bf5e:	88fb      	ldrh	r3, [r7, #6]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	e071      	b.n	800c04c <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	88fa      	ldrh	r2, [r7, #6]
 800bf72:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	88fa      	ldrh	r2, [r7, #6]
 800bf7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2221      	movs	r2, #33	; 0x21
 800bf90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf9c:	d12a      	bne.n	800bff4 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfa6:	d107      	bne.n	800bfb8 <HAL_UART_Transmit_IT+0x78>
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d103      	bne.n	800bfb8 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	4a29      	ldr	r2, [pc, #164]	; (800c058 <HAL_UART_Transmit_IT+0x118>)
 800bfb4:	679a      	str	r2, [r3, #120]	; 0x78
 800bfb6:	e002      	b.n	800bfbe <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4a28      	ldr	r2, [pc, #160]	; (800c05c <HAL_UART_Transmit_IT+0x11c>)
 800bfbc:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	3308      	adds	r3, #8
 800bfc4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc8:	e853 3f00 	ldrex	r3, [r3]
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bfd4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	3308      	adds	r3, #8
 800bfdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfde:	637a      	str	r2, [r7, #52]	; 0x34
 800bfe0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bfe4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfe6:	e841 2300 	strex	r3, r2, [r1]
 800bfea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1e5      	bne.n	800bfbe <HAL_UART_Transmit_IT+0x7e>
 800bff2:	e028      	b.n	800c046 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bffc:	d107      	bne.n	800c00e <HAL_UART_Transmit_IT+0xce>
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	691b      	ldr	r3, [r3, #16]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d103      	bne.n	800c00e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	4a15      	ldr	r2, [pc, #84]	; (800c060 <HAL_UART_Transmit_IT+0x120>)
 800c00a:	679a      	str	r2, [r3, #120]	; 0x78
 800c00c:	e002      	b.n	800c014 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	4a14      	ldr	r2, [pc, #80]	; (800c064 <HAL_UART_Transmit_IT+0x124>)
 800c012:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	e853 3f00 	ldrex	r3, [r3]
 800c020:	613b      	str	r3, [r7, #16]
   return(result);
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c028:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	461a      	mov	r2, r3
 800c030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c032:	623b      	str	r3, [r7, #32]
 800c034:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c036:	69f9      	ldr	r1, [r7, #28]
 800c038:	6a3a      	ldr	r2, [r7, #32]
 800c03a:	e841 2300 	strex	r3, r2, [r1]
 800c03e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d1e6      	bne.n	800c014 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	e000      	b.n	800c04c <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800c04a:	2302      	movs	r3, #2
  }
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3744      	adds	r7, #68	; 0x44
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr
 800c058:	0800e9fd 	.word	0x0800e9fd
 800c05c:	0800e91d 	.word	0x0800e91d
 800c060:	0800e85b 	.word	0x0800e85b
 800c064:	0800e7a3 	.word	0x0800e7a3

0800c068 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b08a      	sub	sp, #40	; 0x28
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	60b9      	str	r1, [r7, #8]
 800c072:	4613      	mov	r3, r2
 800c074:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c07c:	2b20      	cmp	r3, #32
 800c07e:	d137      	bne.n	800c0f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d002      	beq.n	800c08c <HAL_UART_Receive_IT+0x24>
 800c086:	88fb      	ldrh	r3, [r7, #6]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d101      	bne.n	800c090 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	e030      	b.n	800c0f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	2200      	movs	r2, #0
 800c094:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a18      	ldr	r2, [pc, #96]	; (800c0fc <HAL_UART_Receive_IT+0x94>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d01f      	beq.n	800c0e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d018      	beq.n	800c0e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	e853 3f00 	ldrex	r3, [r3]
 800c0ba:	613b      	str	r3, [r7, #16]
   return(result);
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c0c2:	627b      	str	r3, [r7, #36]	; 0x24
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	461a      	mov	r2, r3
 800c0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0cc:	623b      	str	r3, [r7, #32]
 800c0ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d0:	69f9      	ldr	r1, [r7, #28]
 800c0d2:	6a3a      	ldr	r2, [r7, #32]
 800c0d4:	e841 2300 	strex	r3, r2, [r1]
 800c0d8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c0da:	69bb      	ldr	r3, [r7, #24]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d1e6      	bne.n	800c0ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c0e0:	88fb      	ldrh	r3, [r7, #6]
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	68b9      	ldr	r1, [r7, #8]
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	f001 ff52 	bl	800df90 <UART_Start_Receive_IT>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	e000      	b.n	800c0f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c0f0:	2302      	movs	r3, #2
  }
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3728      	adds	r7, #40	; 0x28
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop
 800c0fc:	58000c00 	.word	0x58000c00

0800c100 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b08a      	sub	sp, #40	; 0x28
 800c104:	af00      	add	r7, sp, #0
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	4613      	mov	r3, r2
 800c10c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c114:	2b20      	cmp	r3, #32
 800c116:	d167      	bne.n	800c1e8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d002      	beq.n	800c124 <HAL_UART_Transmit_DMA+0x24>
 800c11e:	88fb      	ldrh	r3, [r7, #6]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d101      	bne.n	800c128 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	e060      	b.n	800c1ea <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	68ba      	ldr	r2, [r7, #8]
 800c12c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	88fa      	ldrh	r2, [r7, #6]
 800c132:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	88fa      	ldrh	r2, [r7, #6]
 800c13a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2221      	movs	r2, #33	; 0x21
 800c14a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c152:	2b00      	cmp	r3, #0
 800c154:	d028      	beq.n	800c1a8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c15a:	4a26      	ldr	r2, [pc, #152]	; (800c1f4 <HAL_UART_Transmit_DMA+0xf4>)
 800c15c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c162:	4a25      	ldr	r2, [pc, #148]	; (800c1f8 <HAL_UART_Transmit_DMA+0xf8>)
 800c164:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c16a:	4a24      	ldr	r2, [pc, #144]	; (800c1fc <HAL_UART_Transmit_DMA+0xfc>)
 800c16c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c172:	2200      	movs	r2, #0
 800c174:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c17e:	4619      	mov	r1, r3
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	3328      	adds	r3, #40	; 0x28
 800c186:	461a      	mov	r2, r3
 800c188:	88fb      	ldrh	r3, [r7, #6]
 800c18a:	f7f6 fd11 	bl	8002bb0 <HAL_DMA_Start_IT>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d009      	beq.n	800c1a8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2210      	movs	r2, #16
 800c198:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2220      	movs	r2, #32
 800c1a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	e020      	b.n	800c1ea <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2240      	movs	r2, #64	; 0x40
 800c1ae:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	3308      	adds	r3, #8
 800c1b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	e853 3f00 	ldrex	r3, [r3]
 800c1be:	613b      	str	r3, [r7, #16]
   return(result);
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1c6:	627b      	str	r3, [r7, #36]	; 0x24
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	3308      	adds	r3, #8
 800c1ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1d0:	623a      	str	r2, [r7, #32]
 800c1d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1d4:	69f9      	ldr	r1, [r7, #28]
 800c1d6:	6a3a      	ldr	r2, [r7, #32]
 800c1d8:	e841 2300 	strex	r3, r2, [r1]
 800c1dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1e5      	bne.n	800c1b0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	e000      	b.n	800c1ea <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c1e8:	2302      	movs	r3, #2
  }
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3728      	adds	r7, #40	; 0x28
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	0800e471 	.word	0x0800e471
 800c1f8:	0800e50b 	.word	0x0800e50b
 800c1fc:	0800e6a1 	.word	0x0800e6a1

0800c200 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b090      	sub	sp, #64	; 0x40
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c20e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c216:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c222:	2b80      	cmp	r3, #128	; 0x80
 800c224:	d139      	bne.n	800c29a <HAL_UART_DMAStop+0x9a>
 800c226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c228:	2b21      	cmp	r3, #33	; 0x21
 800c22a:	d136      	bne.n	800c29a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	3308      	adds	r3, #8
 800c232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c234:	6a3b      	ldr	r3, [r7, #32]
 800c236:	e853 3f00 	ldrex	r3, [r3]
 800c23a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c242:	637b      	str	r3, [r7, #52]	; 0x34
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	3308      	adds	r3, #8
 800c24a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c24c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c24e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c250:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c252:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c254:	e841 2300 	strex	r3, r2, [r1]
 800c258:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1e5      	bne.n	800c22c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c264:	2b00      	cmp	r3, #0
 800c266:	d015      	beq.n	800c294 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7f6 ff09 	bl	8003084 <HAL_DMA_Abort>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d00d      	beq.n	800c294 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7f8 fbe9 	bl	8004a54 <HAL_DMA_GetError>
 800c282:	4603      	mov	r3, r0
 800c284:	2b20      	cmp	r3, #32
 800c286:	d105      	bne.n	800c294 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2210      	movs	r2, #16
 800c28c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800c290:	2303      	movs	r3, #3
 800c292:	e047      	b.n	800c324 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f002 f843 	bl	800e320 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2a4:	2b40      	cmp	r3, #64	; 0x40
 800c2a6:	d13c      	bne.n	800c322 <HAL_UART_DMAStop+0x122>
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2aa:	2b22      	cmp	r3, #34	; 0x22
 800c2ac:	d139      	bne.n	800c322 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	3308      	adds	r3, #8
 800c2b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	e853 3f00 	ldrex	r3, [r3]
 800c2bc:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2c4:	633b      	str	r3, [r7, #48]	; 0x30
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	3308      	adds	r3, #8
 800c2cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2ce:	61ba      	str	r2, [r7, #24]
 800c2d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d2:	6979      	ldr	r1, [r7, #20]
 800c2d4:	69ba      	ldr	r2, [r7, #24]
 800c2d6:	e841 2300 	strex	r3, r2, [r1]
 800c2da:	613b      	str	r3, [r7, #16]
   return(result);
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1e5      	bne.n	800c2ae <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d017      	beq.n	800c31c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f7f6 fec6 	bl	8003084 <HAL_DMA_Abort>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d00e      	beq.n	800c31c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c304:	4618      	mov	r0, r3
 800c306:	f7f8 fba5 	bl	8004a54 <HAL_DMA_GetError>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b20      	cmp	r3, #32
 800c30e:	d105      	bne.n	800c31c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2210      	movs	r2, #16
 800c314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800c318:	2303      	movs	r3, #3
 800c31a:	e003      	b.n	800c324 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f002 f841 	bl	800e3a4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800c322:	2300      	movs	r3, #0
}
 800c324:	4618      	mov	r0, r3
 800c326:	3740      	adds	r7, #64	; 0x40
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b0a0      	sub	sp, #128	; 0x80
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c33c:	e853 3f00 	ldrex	r3, [r3]
 800c340:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c342:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c344:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800c348:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	461a      	mov	r2, r3
 800c350:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c352:	66bb      	str	r3, [r7, #104]	; 0x68
 800c354:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c356:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c358:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c35a:	e841 2300 	strex	r3, r2, [r1]
 800c35e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c360:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1e6      	bne.n	800c334 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	3308      	adds	r3, #8
 800c36c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c370:	e853 3f00 	ldrex	r3, [r3]
 800c374:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c378:	4b72      	ldr	r3, [pc, #456]	; (800c544 <HAL_UART_Abort+0x218>)
 800c37a:	4013      	ands	r3, r2
 800c37c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	3308      	adds	r3, #8
 800c384:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c386:	657a      	str	r2, [r7, #84]	; 0x54
 800c388:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c38c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c38e:	e841 2300 	strex	r3, r2, [r1]
 800c392:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1e5      	bne.n	800c366 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d118      	bne.n	800c3d4 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3aa:	e853 3f00 	ldrex	r3, [r3]
 800c3ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b2:	f023 0310 	bic.w	r3, r3, #16
 800c3b6:	677b      	str	r3, [r7, #116]	; 0x74
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	461a      	mov	r2, r3
 800c3be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3c0:	643b      	str	r3, [r7, #64]	; 0x40
 800c3c2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3c8:	e841 2300 	strex	r3, r2, [r1]
 800c3cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1e6      	bne.n	800c3a2 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3de:	2b80      	cmp	r3, #128	; 0x80
 800c3e0:	d137      	bne.n	800c452 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	3308      	adds	r3, #8
 800c3e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ea:	6a3b      	ldr	r3, [r7, #32]
 800c3ec:	e853 3f00 	ldrex	r3, [r3]
 800c3f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3f8:	673b      	str	r3, [r7, #112]	; 0x70
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	3308      	adds	r3, #8
 800c400:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c402:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c404:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c406:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c40a:	e841 2300 	strex	r3, r2, [r1]
 800c40e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1e5      	bne.n	800c3e2 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d019      	beq.n	800c452 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c422:	2200      	movs	r2, #0
 800c424:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7f6 fe2a 	bl	8003084 <HAL_DMA_Abort>
 800c430:	4603      	mov	r3, r0
 800c432:	2b00      	cmp	r3, #0
 800c434:	d00d      	beq.n	800c452 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c43a:	4618      	mov	r0, r3
 800c43c:	f7f8 fb0a 	bl	8004a54 <HAL_DMA_GetError>
 800c440:	4603      	mov	r3, r0
 800c442:	2b20      	cmp	r3, #32
 800c444:	d105      	bne.n	800c452 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2210      	movs	r2, #16
 800c44a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800c44e:	2303      	movs	r3, #3
 800c450:	e073      	b.n	800c53a <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c45c:	2b40      	cmp	r3, #64	; 0x40
 800c45e:	d13b      	bne.n	800c4d8 <HAL_UART_Abort+0x1ac>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3308      	adds	r3, #8
 800c466:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	e853 3f00 	ldrex	r3, [r3]
 800c46e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c476:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	3308      	adds	r3, #8
 800c47e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c480:	61ba      	str	r2, [r7, #24]
 800c482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c484:	6979      	ldr	r1, [r7, #20]
 800c486:	69ba      	ldr	r2, [r7, #24]
 800c488:	e841 2300 	strex	r3, r2, [r1]
 800c48c:	613b      	str	r3, [r7, #16]
   return(result);
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1e5      	bne.n	800c460 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d01c      	beq.n	800c4d8 <HAL_UART_Abort+0x1ac>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7f6 fde8 	bl	8003084 <HAL_DMA_Abort>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d00e      	beq.n	800c4d8 <HAL_UART_Abort+0x1ac>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7f8 fac7 	bl	8004a54 <HAL_DMA_GetError>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b20      	cmp	r3, #32
 800c4ca:	d105      	bne.n	800c4d8 <HAL_UART_Abort+0x1ac>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2210      	movs	r2, #16
 800c4d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800c4d4:	2303      	movs	r3, #3
 800c4d6:	e030      	b.n	800c53a <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	220f      	movs	r2, #15
 800c4ee:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4f8:	d107      	bne.n	800c50a <HAL_UART_Abort+0x1de>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	699a      	ldr	r2, [r3, #24]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f042 0210 	orr.w	r2, r2, #16
 800c508:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	699a      	ldr	r2, [r3, #24]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f042 0208 	orr.w	r2, r2, #8
 800c518:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2220      	movs	r2, #32
 800c51e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2220      	movs	r2, #32
 800c526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2200      	movs	r2, #0
 800c52e:	66da      	str	r2, [r3, #108]	; 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3780      	adds	r7, #128	; 0x80
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	ef7ffffe 	.word	0xef7ffffe

0800c548 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b09a      	sub	sp, #104	; 0x68
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c558:	e853 3f00 	ldrex	r3, [r3]
 800c55c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c55e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c560:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c564:	667b      	str	r3, [r7, #100]	; 0x64
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	461a      	mov	r2, r3
 800c56c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c56e:	657b      	str	r3, [r7, #84]	; 0x54
 800c570:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c572:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c574:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c576:	e841 2300 	strex	r3, r2, [r1]
 800c57a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c57c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d1e6      	bne.n	800c550 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	3308      	adds	r3, #8
 800c588:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c58c:	e853 3f00 	ldrex	r3, [r3]
 800c590:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c592:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c594:	4b53      	ldr	r3, [pc, #332]	; (800c6e4 <HAL_UART_AbortReceive_IT+0x19c>)
 800c596:	4013      	ands	r3, r2
 800c598:	663b      	str	r3, [r7, #96]	; 0x60
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	3308      	adds	r3, #8
 800c5a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c5a2:	643a      	str	r2, [r7, #64]	; 0x40
 800c5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c5a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c5aa:	e841 2300 	strex	r3, r2, [r1]
 800c5ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d1e5      	bne.n	800c582 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d118      	bne.n	800c5f0 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c4:	6a3b      	ldr	r3, [r7, #32]
 800c5c6:	e853 3f00 	ldrex	r3, [r3]
 800c5ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5cc:	69fb      	ldr	r3, [r7, #28]
 800c5ce:	f023 0310 	bic.w	r3, r3, #16
 800c5d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5de:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5e4:	e841 2300 	strex	r3, r2, [r1]
 800c5e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d1e6      	bne.n	800c5be <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5fa:	2b40      	cmp	r3, #64	; 0x40
 800c5fc:	d156      	bne.n	800c6ac <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	3308      	adds	r3, #8
 800c604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	e853 3f00 	ldrex	r3, [r3]
 800c60c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c614:	65bb      	str	r3, [r7, #88]	; 0x58
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	3308      	adds	r3, #8
 800c61c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c61e:	61ba      	str	r2, [r7, #24]
 800c620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c622:	6979      	ldr	r1, [r7, #20]
 800c624:	69ba      	ldr	r2, [r7, #24]
 800c626:	e841 2300 	strex	r3, r2, [r1]
 800c62a:	613b      	str	r3, [r7, #16]
   return(result);
 800c62c:	693b      	ldr	r3, [r7, #16]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d1e5      	bne.n	800c5fe <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d017      	beq.n	800c66c <HAL_UART_AbortReceive_IT+0x124>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c642:	4a29      	ldr	r2, [pc, #164]	; (800c6e8 <HAL_UART_AbortReceive_IT+0x1a0>)
 800c644:	651a      	str	r2, [r3, #80]	; 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7f7 f837 	bl	80036c0 <HAL_DMA_Abort_IT>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d040      	beq.n	800c6da <HAL_UART_AbortReceive_IT+0x192>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c65e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c666:	4610      	mov	r0, r2
 800c668:	4798      	blx	r3
 800c66a:	e036      	b.n	800c6da <HAL_UART_AbortReceive_IT+0x192>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2200      	movs	r2, #0
 800c670:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	220f      	movs	r2, #15
 800c680:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	699a      	ldr	r2, [r3, #24]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f042 0208 	orr.w	r2, r2, #8
 800c690:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2220      	movs	r2, #32
 800c696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	4798      	blx	r3
 800c6aa:	e016      	b.n	800c6da <HAL_UART_AbortReceive_IT+0x192>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	220f      	movs	r2, #15
 800c6c0:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2220      	movs	r2, #32
 800c6c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	4798      	blx	r3
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800c6da:	2300      	movs	r3, #0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3768      	adds	r7, #104	; 0x68
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	effffffe 	.word	0xeffffffe
 800c6e8:	0800e755 	.word	0x0800e755

0800c6ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b0ba      	sub	sp, #232	; 0xe8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	69db      	ldr	r3, [r3, #28]
 800c6fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c712:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c716:	f640 030f 	movw	r3, #2063	; 0x80f
 800c71a:	4013      	ands	r3, r2
 800c71c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c724:	2b00      	cmp	r3, #0
 800c726:	d11b      	bne.n	800c760 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c72c:	f003 0320 	and.w	r3, r3, #32
 800c730:	2b00      	cmp	r3, #0
 800c732:	d015      	beq.n	800c760 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c738:	f003 0320 	and.w	r3, r3, #32
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d105      	bne.n	800c74c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d009      	beq.n	800c760 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 8387 	beq.w	800ce64 <HAL_UART_IRQHandler+0x778>
      {
        huart->RxISR(huart);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	4798      	blx	r3
      }
      return;
 800c75e:	e381      	b.n	800ce64 <HAL_UART_IRQHandler+0x778>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c760:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c764:	2b00      	cmp	r3, #0
 800c766:	f000 8129 	beq.w	800c9bc <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c76a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c76e:	4b90      	ldr	r3, [pc, #576]	; (800c9b0 <HAL_UART_IRQHandler+0x2c4>)
 800c770:	4013      	ands	r3, r2
 800c772:	2b00      	cmp	r3, #0
 800c774:	d106      	bne.n	800c784 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c776:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c77a:	4b8e      	ldr	r3, [pc, #568]	; (800c9b4 <HAL_UART_IRQHandler+0x2c8>)
 800c77c:	4013      	ands	r3, r2
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f000 811c 	beq.w	800c9bc <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c788:	f003 0301 	and.w	r3, r3, #1
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d011      	beq.n	800c7b4 <HAL_UART_IRQHandler+0xc8>
 800c790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00b      	beq.n	800c7b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7aa:	f043 0201 	orr.w	r2, r3, #1
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7b8:	f003 0302 	and.w	r3, r3, #2
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d011      	beq.n	800c7e4 <HAL_UART_IRQHandler+0xf8>
 800c7c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7c4:	f003 0301 	and.w	r3, r3, #1
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00b      	beq.n	800c7e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2202      	movs	r2, #2
 800c7d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c7da:	f043 0204 	orr.w	r2, r3, #4
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7e8:	f003 0304 	and.w	r3, r3, #4
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d011      	beq.n	800c814 <HAL_UART_IRQHandler+0x128>
 800c7f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c7f4:	f003 0301 	and.w	r3, r3, #1
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00b      	beq.n	800c814 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2204      	movs	r2, #4
 800c802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c80a:	f043 0202 	orr.w	r2, r3, #2
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c818:	f003 0308 	and.w	r3, r3, #8
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d017      	beq.n	800c850 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c824:	f003 0320 	and.w	r3, r3, #32
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d105      	bne.n	800c838 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c82c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c830:	4b5f      	ldr	r3, [pc, #380]	; (800c9b0 <HAL_UART_IRQHandler+0x2c4>)
 800c832:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00b      	beq.n	800c850 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	2208      	movs	r2, #8
 800c83e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c846:	f043 0208 	orr.w	r2, r3, #8
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d012      	beq.n	800c882 <HAL_UART_IRQHandler+0x196>
 800c85c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c860:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c864:	2b00      	cmp	r3, #0
 800c866:	d00c      	beq.n	800c882 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c870:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c878:	f043 0220 	orr.w	r2, r3, #32
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c888:	2b00      	cmp	r3, #0
 800c88a:	f000 82ed 	beq.w	800ce68 <HAL_UART_IRQHandler+0x77c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c88e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c892:	f003 0320 	and.w	r3, r3, #32
 800c896:	2b00      	cmp	r3, #0
 800c898:	d013      	beq.n	800c8c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c89a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c89e:	f003 0320 	and.w	r3, r3, #32
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d105      	bne.n	800c8b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c8a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c8aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d007      	beq.n	800c8c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d003      	beq.n	800c8c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8d6:	2b40      	cmp	r3, #64	; 0x40
 800c8d8:	d005      	beq.n	800c8e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c8da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c8de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d058      	beq.n	800c998 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f001 fd5c 	bl	800e3a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8f6:	2b40      	cmp	r3, #64	; 0x40
 800c8f8:	d148      	bne.n	800c98c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	3308      	adds	r3, #8
 800c900:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c904:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c908:	e853 3f00 	ldrex	r3, [r3]
 800c90c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c910:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	3308      	adds	r3, #8
 800c922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c926:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c92a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c92e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c936:	e841 2300 	strex	r3, r2, [r1]
 800c93a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c93e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c942:	2b00      	cmp	r3, #0
 800c944:	d1d9      	bne.n	800c8fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d017      	beq.n	800c980 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c956:	4a18      	ldr	r2, [pc, #96]	; (800c9b8 <HAL_UART_IRQHandler+0x2cc>)
 800c958:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c960:	4618      	mov	r0, r3
 800c962:	f7f6 fead 	bl	80036c0 <HAL_DMA_Abort_IT>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d01f      	beq.n	800c9ac <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800c97a:	4610      	mov	r0, r2
 800c97c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c97e:	e015      	b.n	800c9ac <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c98a:	e00f      	b.n	800c9ac <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c996:	e009      	b.n	800c9ac <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800c9aa:	e25d      	b.n	800ce68 <HAL_UART_IRQHandler+0x77c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9ac:	bf00      	nop
    return;
 800c9ae:	e25b      	b.n	800ce68 <HAL_UART_IRQHandler+0x77c>
 800c9b0:	10000001 	.word	0x10000001
 800c9b4:	04000120 	.word	0x04000120
 800c9b8:	0800e725 	.word	0x0800e725

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	f040 81eb 	bne.w	800cd9c <HAL_UART_IRQHandler+0x6b0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c9c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9ca:	f003 0310 	and.w	r3, r3, #16
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f000 81e4 	beq.w	800cd9c <HAL_UART_IRQHandler+0x6b0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9d8:	f003 0310 	and.w	r3, r3, #16
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f000 81dd 	beq.w	800cd9c <HAL_UART_IRQHandler+0x6b0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2210      	movs	r2, #16
 800c9e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f4:	2b40      	cmp	r3, #64	; 0x40
 800c9f6:	f040 8153 	bne.w	800cca0 <HAL_UART_IRQHandler+0x5b4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a97      	ldr	r2, [pc, #604]	; (800cc60 <HAL_UART_IRQHandler+0x574>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d068      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a94      	ldr	r2, [pc, #592]	; (800cc64 <HAL_UART_IRQHandler+0x578>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d061      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a92      	ldr	r2, [pc, #584]	; (800cc68 <HAL_UART_IRQHandler+0x57c>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d05a      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a8f      	ldr	r2, [pc, #572]	; (800cc6c <HAL_UART_IRQHandler+0x580>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d053      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	4a8d      	ldr	r2, [pc, #564]	; (800cc70 <HAL_UART_IRQHandler+0x584>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d04c      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a8a      	ldr	r2, [pc, #552]	; (800cc74 <HAL_UART_IRQHandler+0x588>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d045      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a88      	ldr	r2, [pc, #544]	; (800cc78 <HAL_UART_IRQHandler+0x58c>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d03e      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a85      	ldr	r2, [pc, #532]	; (800cc7c <HAL_UART_IRQHandler+0x590>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d037      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a83      	ldr	r2, [pc, #524]	; (800cc80 <HAL_UART_IRQHandler+0x594>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d030      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a80      	ldr	r2, [pc, #512]	; (800cc84 <HAL_UART_IRQHandler+0x598>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d029      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a7e      	ldr	r2, [pc, #504]	; (800cc88 <HAL_UART_IRQHandler+0x59c>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d022      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4a7b      	ldr	r2, [pc, #492]	; (800cc8c <HAL_UART_IRQHandler+0x5a0>)
 800ca9e:	4293      	cmp	r3, r2
 800caa0:	d01b      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a79      	ldr	r2, [pc, #484]	; (800cc90 <HAL_UART_IRQHandler+0x5a4>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d014      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a76      	ldr	r2, [pc, #472]	; (800cc94 <HAL_UART_IRQHandler+0x5a8>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d00d      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a74      	ldr	r2, [pc, #464]	; (800cc98 <HAL_UART_IRQHandler+0x5ac>)
 800cac8:	4293      	cmp	r3, r2
 800caca:	d006      	beq.n	800cada <HAL_UART_IRQHandler+0x3ee>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	4a71      	ldr	r2, [pc, #452]	; (800cc9c <HAL_UART_IRQHandler+0x5b0>)
 800cad6:	4293      	cmp	r3, r2
 800cad8:	d106      	bne.n	800cae8 <HAL_UART_IRQHandler+0x3fc>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	e005      	b.n	800caf4 <HAL_UART_IRQHandler+0x408>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800caf8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f000 81b5 	beq.w	800ce6c <HAL_UART_IRQHandler+0x780>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	f080 81ad 	bcs.w	800ce6c <HAL_UART_IRQHandler+0x780>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cb18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cb22:	69db      	ldr	r3, [r3, #28]
 800cb24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb28:	f000 8087 	beq.w	800cc3a <HAL_UART_IRQHandler+0x54e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cb38:	e853 3f00 	ldrex	r3, [r3]
 800cb3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cb40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cb44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	461a      	mov	r2, r3
 800cb52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cb56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cb5a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cb62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cb66:	e841 2300 	strex	r3, r2, [r1]
 800cb6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cb6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1da      	bne.n	800cb2c <HAL_UART_IRQHandler+0x440>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	3308      	adds	r3, #8
 800cb7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb80:	e853 3f00 	ldrex	r3, [r3]
 800cb84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cb86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb88:	f023 0301 	bic.w	r3, r3, #1
 800cb8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	3308      	adds	r3, #8
 800cb96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cb9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cb9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cba2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cba6:	e841 2300 	strex	r3, r2, [r1]
 800cbaa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cbac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1e1      	bne.n	800cb76 <HAL_UART_IRQHandler+0x48a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	3308      	adds	r3, #8
 800cbb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cbbc:	e853 3f00 	ldrex	r3, [r3]
 800cbc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cbc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cbc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	3308      	adds	r3, #8
 800cbd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cbd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cbd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cbdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cbde:	e841 2300 	strex	r3, r2, [r1]
 800cbe2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cbe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d1e3      	bne.n	800cbb2 <HAL_UART_IRQHandler+0x4c6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2220      	movs	r2, #32
 800cbee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc00:	e853 3f00 	ldrex	r3, [r3]
 800cc04:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cc06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc08:	f023 0310 	bic.w	r3, r3, #16
 800cc0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	461a      	mov	r2, r3
 800cc16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cc1a:	65bb      	str	r3, [r7, #88]	; 0x58
 800cc1c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc1e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cc20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cc22:	e841 2300 	strex	r3, r2, [r1]
 800cc26:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cc28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d1e4      	bne.n	800cbf8 <HAL_UART_IRQHandler+0x50c>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7f6 fa25 	bl	8003084 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	2202      	movs	r2, #2
 800cc3e:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800cc52:	b292      	uxth	r2, r2
 800cc54:	1a8a      	subs	r2, r1, r2
 800cc56:	b292      	uxth	r2, r2
 800cc58:	4611      	mov	r1, r2
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cc5e:	e105      	b.n	800ce6c <HAL_UART_IRQHandler+0x780>
 800cc60:	40020010 	.word	0x40020010
 800cc64:	40020028 	.word	0x40020028
 800cc68:	40020040 	.word	0x40020040
 800cc6c:	40020058 	.word	0x40020058
 800cc70:	40020070 	.word	0x40020070
 800cc74:	40020088 	.word	0x40020088
 800cc78:	400200a0 	.word	0x400200a0
 800cc7c:	400200b8 	.word	0x400200b8
 800cc80:	40020410 	.word	0x40020410
 800cc84:	40020428 	.word	0x40020428
 800cc88:	40020440 	.word	0x40020440
 800cc8c:	40020458 	.word	0x40020458
 800cc90:	40020470 	.word	0x40020470
 800cc94:	40020488 	.word	0x40020488
 800cc98:	400204a0 	.word	0x400204a0
 800cc9c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	1ad3      	subs	r3, r2, r3
 800ccb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f000 80d7 	beq.w	800ce70 <HAL_UART_IRQHandler+0x784>
          && (nb_rx_data > 0U))
 800ccc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	f000 80d2 	beq.w	800ce70 <HAL_UART_IRQHandler+0x784>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd4:	e853 3f00 	ldrex	r3, [r3]
 800ccd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ccda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cce0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	461a      	mov	r2, r3
 800ccea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ccee:	647b      	str	r3, [r7, #68]	; 0x44
 800ccf0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccf2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ccf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccf6:	e841 2300 	strex	r3, r2, [r1]
 800ccfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ccfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1e4      	bne.n	800cccc <HAL_UART_IRQHandler+0x5e0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	3308      	adds	r3, #8
 800cd08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0c:	e853 3f00 	ldrex	r3, [r3]
 800cd10:	623b      	str	r3, [r7, #32]
   return(result);
 800cd12:	6a3a      	ldr	r2, [r7, #32]
 800cd14:	4b59      	ldr	r3, [pc, #356]	; (800ce7c <HAL_UART_IRQHandler+0x790>)
 800cd16:	4013      	ands	r3, r2
 800cd18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	3308      	adds	r3, #8
 800cd22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cd26:	633a      	str	r2, [r7, #48]	; 0x30
 800cd28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd2e:	e841 2300 	strex	r3, r2, [r1]
 800cd32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d1e3      	bne.n	800cd02 <HAL_UART_IRQHandler+0x616>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2220      	movs	r2, #32
 800cd3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2200      	movs	r2, #0
 800cd46:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	e853 3f00 	ldrex	r3, [r3]
 800cd5a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f023 0310 	bic.w	r3, r3, #16
 800cd62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cd70:	61fb      	str	r3, [r7, #28]
 800cd72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd74:	69b9      	ldr	r1, [r7, #24]
 800cd76:	69fa      	ldr	r2, [r7, #28]
 800cd78:	e841 2300 	strex	r3, r2, [r1]
 800cd7c:	617b      	str	r3, [r7, #20]
   return(result);
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d1e4      	bne.n	800cd4e <HAL_UART_IRQHandler+0x662>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2202      	movs	r2, #2
 800cd88:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800cd90:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800cd94:	4611      	mov	r1, r2
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cd9a:	e069      	b.n	800ce70 <HAL_UART_IRQHandler+0x784>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cd9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cda0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d010      	beq.n	800cdca <HAL_UART_IRQHandler+0x6de>
 800cda8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cdac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00a      	beq.n	800cdca <HAL_UART_IRQHandler+0x6de>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cdbc:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cdc8:	e055      	b.n	800ce76 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cdca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d014      	beq.n	800ce00 <HAL_UART_IRQHandler+0x714>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cdd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d105      	bne.n	800cdee <HAL_UART_IRQHandler+0x702>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cde2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cde6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d008      	beq.n	800ce00 <HAL_UART_IRQHandler+0x714>
  {
    if (huart->TxISR != NULL)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d03e      	beq.n	800ce74 <HAL_UART_IRQHandler+0x788>
    {
      huart->TxISR(huart);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	4798      	blx	r3
    }
    return;
 800cdfe:	e039      	b.n	800ce74 <HAL_UART_IRQHandler+0x788>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ce00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d009      	beq.n	800ce20 <HAL_UART_IRQHandler+0x734>
 800ce0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d003      	beq.n	800ce20 <HAL_UART_IRQHandler+0x734>
  {
    UART_EndTransmit_IT(huart);
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f001 fe64 	bl	800eae6 <UART_EndTransmit_IT>
    return;
 800ce1e:	e02a      	b.n	800ce76 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ce20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00b      	beq.n	800ce44 <HAL_UART_IRQHandler+0x758>
 800ce2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce30:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d005      	beq.n	800ce44 <HAL_UART_IRQHandler+0x758>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce42:	e018      	b.n	800ce76 <HAL_UART_IRQHandler+0x78a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ce44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d012      	beq.n	800ce76 <HAL_UART_IRQHandler+0x78a>
 800ce50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	da0e      	bge.n	800ce76 <HAL_UART_IRQHandler+0x78a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ce62:	e008      	b.n	800ce76 <HAL_UART_IRQHandler+0x78a>
      return;
 800ce64:	bf00      	nop
 800ce66:	e006      	b.n	800ce76 <HAL_UART_IRQHandler+0x78a>
    return;
 800ce68:	bf00      	nop
 800ce6a:	e004      	b.n	800ce76 <HAL_UART_IRQHandler+0x78a>
      return;
 800ce6c:	bf00      	nop
 800ce6e:	e002      	b.n	800ce76 <HAL_UART_IRQHandler+0x78a>
      return;
 800ce70:	bf00      	nop
 800ce72:	e000      	b.n	800ce76 <HAL_UART_IRQHandler+0x78a>
    return;
 800ce74:	bf00      	nop
  }
}
 800ce76:	37e8      	adds	r7, #232	; 0xe8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	effffffe 	.word	0xeffffffe

0800ce80 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ce88:	bf00      	nop
 800ce8a:	370c      	adds	r7, #12
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ce9c:	bf00      	nop
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ceb0:	bf00      	nop
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cec4:	bf00      	nop
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ced8:	bf00      	nop
 800ceda:	370c      	adds	r7, #12
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ceec:	bf00      	nop
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800cf00:	bf00      	nop
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800cf14:	bf00      	nop
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
 800cf28:	460b      	mov	r3, r1
 800cf2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cf2c:	bf00      	nop
 800cf2e:	370c      	adds	r7, #12
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b08f      	sub	sp, #60	; 0x3c
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d101      	bne.n	800cf4e <HAL_HalfDuplex_EnableTransmitter+0x16>
 800cf4a:	2302      	movs	r3, #2
 800cf4c:	e042      	b.n	800cfd4 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2224      	movs	r2, #36	; 0x24
 800cf5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf64:	6a3b      	ldr	r3, [r7, #32]
 800cf66:	e853 3f00 	ldrex	r3, [r3]
 800cf6a:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	f023 030c 	bic.w	r3, r3, #12
 800cf72:	637b      	str	r3, [r7, #52]	; 0x34
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	461a      	mov	r2, r3
 800cf7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf7e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf84:	e841 2300 	strex	r3, r2, [r1]
 800cf88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d1e6      	bne.n	800cf5e <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	e853 3f00 	ldrex	r3, [r3]
 800cf9c:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	f043 0308 	orr.w	r3, r3, #8
 800cfa4:	633b      	str	r3, [r7, #48]	; 0x30
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfae:	61bb      	str	r3, [r7, #24]
 800cfb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb2:	6979      	ldr	r1, [r7, #20]
 800cfb4:	69ba      	ldr	r2, [r7, #24]
 800cfb6:	e841 2300 	strex	r3, r2, [r1]
 800cfba:	613b      	str	r3, [r7, #16]
   return(result);
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d1e6      	bne.n	800cf90 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2220      	movs	r2, #32
 800cfc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	373c      	adds	r7, #60	; 0x3c
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b08f      	sub	sp, #60	; 0x3c
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d101      	bne.n	800cff6 <HAL_HalfDuplex_EnableReceiver+0x16>
 800cff2:	2302      	movs	r3, #2
 800cff4:	e042      	b.n	800d07c <HAL_HalfDuplex_EnableReceiver+0x9c>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2201      	movs	r2, #1
 800cffa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2224      	movs	r2, #36	; 0x24
 800d002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d00c:	6a3b      	ldr	r3, [r7, #32]
 800d00e:	e853 3f00 	ldrex	r3, [r3]
 800d012:	61fb      	str	r3, [r7, #28]
   return(result);
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	f023 030c 	bic.w	r3, r3, #12
 800d01a:	637b      	str	r3, [r7, #52]	; 0x34
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	461a      	mov	r2, r3
 800d022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d024:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d026:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d02a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d02c:	e841 2300 	strex	r3, r2, [r1]
 800d030:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1e6      	bne.n	800d006 <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	e853 3f00 	ldrex	r3, [r3]
 800d044:	60bb      	str	r3, [r7, #8]
   return(result);
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	f043 0304 	orr.w	r3, r3, #4
 800d04c:	633b      	str	r3, [r7, #48]	; 0x30
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	461a      	mov	r2, r3
 800d054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d056:	61bb      	str	r3, [r7, #24]
 800d058:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d05a:	6979      	ldr	r1, [r7, #20]
 800d05c:	69ba      	ldr	r2, [r7, #24]
 800d05e:	e841 2300 	strex	r3, r2, [r1]
 800d062:	613b      	str	r3, [r7, #16]
   return(result);
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d1e6      	bne.n	800d038 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2220      	movs	r2, #32
 800d06e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UNLOCK(huart);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d07a:	2300      	movs	r3, #0
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	373c      	adds	r7, #60	; 0x3c
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800d088:	b480      	push	{r7}
 800d08a:	b085      	sub	sp, #20
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d096:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d09e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800d0a0:	68fa      	ldr	r2, [r7, #12]
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	4313      	orrs	r3, r2
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3714      	adds	r7, #20
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b0:	4770      	bx	lr
	...

0800d0b4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	4a1a      	ldr	r2, [pc, #104]	; (800d128 <UART_InitCallbacksToDefault+0x74>)
 800d0c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	4a19      	ldr	r2, [pc, #100]	; (800d12c <UART_InitCallbacksToDefault+0x78>)
 800d0c8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	4a18      	ldr	r2, [pc, #96]	; (800d130 <UART_InitCallbacksToDefault+0x7c>)
 800d0d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	4a17      	ldr	r2, [pc, #92]	; (800d134 <UART_InitCallbacksToDefault+0x80>)
 800d0d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	4a16      	ldr	r2, [pc, #88]	; (800d138 <UART_InitCallbacksToDefault+0x84>)
 800d0e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	4a15      	ldr	r2, [pc, #84]	; (800d13c <UART_InitCallbacksToDefault+0x88>)
 800d0e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	4a14      	ldr	r2, [pc, #80]	; (800d140 <UART_InitCallbacksToDefault+0x8c>)
 800d0f0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	4a13      	ldr	r2, [pc, #76]	; (800d144 <UART_InitCallbacksToDefault+0x90>)
 800d0f8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	4a12      	ldr	r2, [pc, #72]	; (800d148 <UART_InitCallbacksToDefault+0x94>)
 800d100:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	4a11      	ldr	r2, [pc, #68]	; (800d14c <UART_InitCallbacksToDefault+0x98>)
 800d108:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	4a10      	ldr	r2, [pc, #64]	; (800d150 <UART_InitCallbacksToDefault+0x9c>)
 800d110:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	4a0f      	ldr	r2, [pc, #60]	; (800d154 <UART_InitCallbacksToDefault+0xa0>)
 800d118:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 800d11c:	bf00      	nop
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr
 800d128:	0800ce95 	.word	0x0800ce95
 800d12c:	0800ce81 	.word	0x0800ce81
 800d130:	0800cebd 	.word	0x0800cebd
 800d134:	0800cea9 	.word	0x0800cea9
 800d138:	0800ced1 	.word	0x0800ced1
 800d13c:	0800cee5 	.word	0x0800cee5
 800d140:	0800cef9 	.word	0x0800cef9
 800d144:	0800cf0d 	.word	0x0800cf0d
 800d148:	0800f5a1 	.word	0x0800f5a1
 800d14c:	0800f5b5 	.word	0x0800f5b5
 800d150:	0800f5c9 	.word	0x0800f5c9
 800d154:	0800cf21 	.word	0x0800cf21

0800d158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d15c:	b092      	sub	sp, #72	; 0x48
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d162:	2300      	movs	r3, #0
 800d164:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	689a      	ldr	r2, [r3, #8]
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	431a      	orrs	r2, r3
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	695b      	ldr	r3, [r3, #20]
 800d176:	431a      	orrs	r2, r3
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	69db      	ldr	r3, [r3, #28]
 800d17c:	4313      	orrs	r3, r2
 800d17e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d180:	697b      	ldr	r3, [r7, #20]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	4bbe      	ldr	r3, [pc, #760]	; (800d480 <UART_SetConfig+0x328>)
 800d188:	4013      	ands	r3, r2
 800d18a:	697a      	ldr	r2, [r7, #20]
 800d18c:	6812      	ldr	r2, [r2, #0]
 800d18e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d190:	430b      	orrs	r3, r1
 800d192:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	68da      	ldr	r2, [r3, #12]
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	430a      	orrs	r2, r1
 800d1a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	699b      	ldr	r3, [r3, #24]
 800d1ae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4ab3      	ldr	r2, [pc, #716]	; (800d484 <UART_SetConfig+0x32c>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d004      	beq.n	800d1c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	6a1b      	ldr	r3, [r3, #32]
 800d1be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	689a      	ldr	r2, [r3, #8]
 800d1ca:	4baf      	ldr	r3, [pc, #700]	; (800d488 <UART_SetConfig+0x330>)
 800d1cc:	4013      	ands	r3, r2
 800d1ce:	697a      	ldr	r2, [r7, #20]
 800d1d0:	6812      	ldr	r2, [r2, #0]
 800d1d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1d4:	430b      	orrs	r3, r1
 800d1d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1de:	f023 010f 	bic.w	r1, r3, #15
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	430a      	orrs	r2, r1
 800d1ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4aa6      	ldr	r2, [pc, #664]	; (800d48c <UART_SetConfig+0x334>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d177      	bne.n	800d2e8 <UART_SetConfig+0x190>
 800d1f8:	4ba5      	ldr	r3, [pc, #660]	; (800d490 <UART_SetConfig+0x338>)
 800d1fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d200:	2b28      	cmp	r3, #40	; 0x28
 800d202:	d86d      	bhi.n	800d2e0 <UART_SetConfig+0x188>
 800d204:	a201      	add	r2, pc, #4	; (adr r2, 800d20c <UART_SetConfig+0xb4>)
 800d206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d20a:	bf00      	nop
 800d20c:	0800d2b1 	.word	0x0800d2b1
 800d210:	0800d2e1 	.word	0x0800d2e1
 800d214:	0800d2e1 	.word	0x0800d2e1
 800d218:	0800d2e1 	.word	0x0800d2e1
 800d21c:	0800d2e1 	.word	0x0800d2e1
 800d220:	0800d2e1 	.word	0x0800d2e1
 800d224:	0800d2e1 	.word	0x0800d2e1
 800d228:	0800d2e1 	.word	0x0800d2e1
 800d22c:	0800d2b9 	.word	0x0800d2b9
 800d230:	0800d2e1 	.word	0x0800d2e1
 800d234:	0800d2e1 	.word	0x0800d2e1
 800d238:	0800d2e1 	.word	0x0800d2e1
 800d23c:	0800d2e1 	.word	0x0800d2e1
 800d240:	0800d2e1 	.word	0x0800d2e1
 800d244:	0800d2e1 	.word	0x0800d2e1
 800d248:	0800d2e1 	.word	0x0800d2e1
 800d24c:	0800d2c1 	.word	0x0800d2c1
 800d250:	0800d2e1 	.word	0x0800d2e1
 800d254:	0800d2e1 	.word	0x0800d2e1
 800d258:	0800d2e1 	.word	0x0800d2e1
 800d25c:	0800d2e1 	.word	0x0800d2e1
 800d260:	0800d2e1 	.word	0x0800d2e1
 800d264:	0800d2e1 	.word	0x0800d2e1
 800d268:	0800d2e1 	.word	0x0800d2e1
 800d26c:	0800d2c9 	.word	0x0800d2c9
 800d270:	0800d2e1 	.word	0x0800d2e1
 800d274:	0800d2e1 	.word	0x0800d2e1
 800d278:	0800d2e1 	.word	0x0800d2e1
 800d27c:	0800d2e1 	.word	0x0800d2e1
 800d280:	0800d2e1 	.word	0x0800d2e1
 800d284:	0800d2e1 	.word	0x0800d2e1
 800d288:	0800d2e1 	.word	0x0800d2e1
 800d28c:	0800d2d1 	.word	0x0800d2d1
 800d290:	0800d2e1 	.word	0x0800d2e1
 800d294:	0800d2e1 	.word	0x0800d2e1
 800d298:	0800d2e1 	.word	0x0800d2e1
 800d29c:	0800d2e1 	.word	0x0800d2e1
 800d2a0:	0800d2e1 	.word	0x0800d2e1
 800d2a4:	0800d2e1 	.word	0x0800d2e1
 800d2a8:	0800d2e1 	.word	0x0800d2e1
 800d2ac:	0800d2d9 	.word	0x0800d2d9
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2b6:	e222      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d2b8:	2304      	movs	r3, #4
 800d2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2be:	e21e      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d2c0:	2308      	movs	r3, #8
 800d2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2c6:	e21a      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d2c8:	2310      	movs	r3, #16
 800d2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2ce:	e216      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d2d0:	2320      	movs	r3, #32
 800d2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2d6:	e212      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d2d8:	2340      	movs	r3, #64	; 0x40
 800d2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2de:	e20e      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d2e0:	2380      	movs	r3, #128	; 0x80
 800d2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d2e6:	e20a      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4a69      	ldr	r2, [pc, #420]	; (800d494 <UART_SetConfig+0x33c>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d130      	bne.n	800d354 <UART_SetConfig+0x1fc>
 800d2f2:	4b67      	ldr	r3, [pc, #412]	; (800d490 <UART_SetConfig+0x338>)
 800d2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2f6:	f003 0307 	and.w	r3, r3, #7
 800d2fa:	2b05      	cmp	r3, #5
 800d2fc:	d826      	bhi.n	800d34c <UART_SetConfig+0x1f4>
 800d2fe:	a201      	add	r2, pc, #4	; (adr r2, 800d304 <UART_SetConfig+0x1ac>)
 800d300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d304:	0800d31d 	.word	0x0800d31d
 800d308:	0800d325 	.word	0x0800d325
 800d30c:	0800d32d 	.word	0x0800d32d
 800d310:	0800d335 	.word	0x0800d335
 800d314:	0800d33d 	.word	0x0800d33d
 800d318:	0800d345 	.word	0x0800d345
 800d31c:	2300      	movs	r3, #0
 800d31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d322:	e1ec      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d324:	2304      	movs	r3, #4
 800d326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d32a:	e1e8      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d32c:	2308      	movs	r3, #8
 800d32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d332:	e1e4      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d334:	2310      	movs	r3, #16
 800d336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d33a:	e1e0      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d33c:	2320      	movs	r3, #32
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d342:	e1dc      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d344:	2340      	movs	r3, #64	; 0x40
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d34a:	e1d8      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d34c:	2380      	movs	r3, #128	; 0x80
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d352:	e1d4      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4a4f      	ldr	r2, [pc, #316]	; (800d498 <UART_SetConfig+0x340>)
 800d35a:	4293      	cmp	r3, r2
 800d35c:	d130      	bne.n	800d3c0 <UART_SetConfig+0x268>
 800d35e:	4b4c      	ldr	r3, [pc, #304]	; (800d490 <UART_SetConfig+0x338>)
 800d360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d362:	f003 0307 	and.w	r3, r3, #7
 800d366:	2b05      	cmp	r3, #5
 800d368:	d826      	bhi.n	800d3b8 <UART_SetConfig+0x260>
 800d36a:	a201      	add	r2, pc, #4	; (adr r2, 800d370 <UART_SetConfig+0x218>)
 800d36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d370:	0800d389 	.word	0x0800d389
 800d374:	0800d391 	.word	0x0800d391
 800d378:	0800d399 	.word	0x0800d399
 800d37c:	0800d3a1 	.word	0x0800d3a1
 800d380:	0800d3a9 	.word	0x0800d3a9
 800d384:	0800d3b1 	.word	0x0800d3b1
 800d388:	2300      	movs	r3, #0
 800d38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d38e:	e1b6      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d390:	2304      	movs	r3, #4
 800d392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d396:	e1b2      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d398:	2308      	movs	r3, #8
 800d39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d39e:	e1ae      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d3a0:	2310      	movs	r3, #16
 800d3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3a6:	e1aa      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d3a8:	2320      	movs	r3, #32
 800d3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ae:	e1a6      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d3b0:	2340      	movs	r3, #64	; 0x40
 800d3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3b6:	e1a2      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d3b8:	2380      	movs	r3, #128	; 0x80
 800d3ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3be:	e19e      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d3c0:	697b      	ldr	r3, [r7, #20]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a35      	ldr	r2, [pc, #212]	; (800d49c <UART_SetConfig+0x344>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d130      	bne.n	800d42c <UART_SetConfig+0x2d4>
 800d3ca:	4b31      	ldr	r3, [pc, #196]	; (800d490 <UART_SetConfig+0x338>)
 800d3cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3ce:	f003 0307 	and.w	r3, r3, #7
 800d3d2:	2b05      	cmp	r3, #5
 800d3d4:	d826      	bhi.n	800d424 <UART_SetConfig+0x2cc>
 800d3d6:	a201      	add	r2, pc, #4	; (adr r2, 800d3dc <UART_SetConfig+0x284>)
 800d3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3dc:	0800d3f5 	.word	0x0800d3f5
 800d3e0:	0800d3fd 	.word	0x0800d3fd
 800d3e4:	0800d405 	.word	0x0800d405
 800d3e8:	0800d40d 	.word	0x0800d40d
 800d3ec:	0800d415 	.word	0x0800d415
 800d3f0:	0800d41d 	.word	0x0800d41d
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fa:	e180      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d3fc:	2304      	movs	r3, #4
 800d3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d402:	e17c      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d404:	2308      	movs	r3, #8
 800d406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d40a:	e178      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d40c:	2310      	movs	r3, #16
 800d40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d412:	e174      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d414:	2320      	movs	r3, #32
 800d416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d41a:	e170      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d41c:	2340      	movs	r3, #64	; 0x40
 800d41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d422:	e16c      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d424:	2380      	movs	r3, #128	; 0x80
 800d426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d42a:	e168      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a1b      	ldr	r2, [pc, #108]	; (800d4a0 <UART_SetConfig+0x348>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d142      	bne.n	800d4bc <UART_SetConfig+0x364>
 800d436:	4b16      	ldr	r3, [pc, #88]	; (800d490 <UART_SetConfig+0x338>)
 800d438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d43a:	f003 0307 	and.w	r3, r3, #7
 800d43e:	2b05      	cmp	r3, #5
 800d440:	d838      	bhi.n	800d4b4 <UART_SetConfig+0x35c>
 800d442:	a201      	add	r2, pc, #4	; (adr r2, 800d448 <UART_SetConfig+0x2f0>)
 800d444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d448:	0800d461 	.word	0x0800d461
 800d44c:	0800d469 	.word	0x0800d469
 800d450:	0800d471 	.word	0x0800d471
 800d454:	0800d479 	.word	0x0800d479
 800d458:	0800d4a5 	.word	0x0800d4a5
 800d45c:	0800d4ad 	.word	0x0800d4ad
 800d460:	2300      	movs	r3, #0
 800d462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d466:	e14a      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d468:	2304      	movs	r3, #4
 800d46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d46e:	e146      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d470:	2308      	movs	r3, #8
 800d472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d476:	e142      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d478:	2310      	movs	r3, #16
 800d47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d47e:	e13e      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d480:	cfff69f3 	.word	0xcfff69f3
 800d484:	58000c00 	.word	0x58000c00
 800d488:	11fff4ff 	.word	0x11fff4ff
 800d48c:	40011000 	.word	0x40011000
 800d490:	58024400 	.word	0x58024400
 800d494:	40004400 	.word	0x40004400
 800d498:	40004800 	.word	0x40004800
 800d49c:	40004c00 	.word	0x40004c00
 800d4a0:	40005000 	.word	0x40005000
 800d4a4:	2320      	movs	r3, #32
 800d4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4aa:	e128      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d4ac:	2340      	movs	r3, #64	; 0x40
 800d4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b2:	e124      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d4b4:	2380      	movs	r3, #128	; 0x80
 800d4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ba:	e120      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4acb      	ldr	r2, [pc, #812]	; (800d7f0 <UART_SetConfig+0x698>)
 800d4c2:	4293      	cmp	r3, r2
 800d4c4:	d176      	bne.n	800d5b4 <UART_SetConfig+0x45c>
 800d4c6:	4bcb      	ldr	r3, [pc, #812]	; (800d7f4 <UART_SetConfig+0x69c>)
 800d4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d4ce:	2b28      	cmp	r3, #40	; 0x28
 800d4d0:	d86c      	bhi.n	800d5ac <UART_SetConfig+0x454>
 800d4d2:	a201      	add	r2, pc, #4	; (adr r2, 800d4d8 <UART_SetConfig+0x380>)
 800d4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d8:	0800d57d 	.word	0x0800d57d
 800d4dc:	0800d5ad 	.word	0x0800d5ad
 800d4e0:	0800d5ad 	.word	0x0800d5ad
 800d4e4:	0800d5ad 	.word	0x0800d5ad
 800d4e8:	0800d5ad 	.word	0x0800d5ad
 800d4ec:	0800d5ad 	.word	0x0800d5ad
 800d4f0:	0800d5ad 	.word	0x0800d5ad
 800d4f4:	0800d5ad 	.word	0x0800d5ad
 800d4f8:	0800d585 	.word	0x0800d585
 800d4fc:	0800d5ad 	.word	0x0800d5ad
 800d500:	0800d5ad 	.word	0x0800d5ad
 800d504:	0800d5ad 	.word	0x0800d5ad
 800d508:	0800d5ad 	.word	0x0800d5ad
 800d50c:	0800d5ad 	.word	0x0800d5ad
 800d510:	0800d5ad 	.word	0x0800d5ad
 800d514:	0800d5ad 	.word	0x0800d5ad
 800d518:	0800d58d 	.word	0x0800d58d
 800d51c:	0800d5ad 	.word	0x0800d5ad
 800d520:	0800d5ad 	.word	0x0800d5ad
 800d524:	0800d5ad 	.word	0x0800d5ad
 800d528:	0800d5ad 	.word	0x0800d5ad
 800d52c:	0800d5ad 	.word	0x0800d5ad
 800d530:	0800d5ad 	.word	0x0800d5ad
 800d534:	0800d5ad 	.word	0x0800d5ad
 800d538:	0800d595 	.word	0x0800d595
 800d53c:	0800d5ad 	.word	0x0800d5ad
 800d540:	0800d5ad 	.word	0x0800d5ad
 800d544:	0800d5ad 	.word	0x0800d5ad
 800d548:	0800d5ad 	.word	0x0800d5ad
 800d54c:	0800d5ad 	.word	0x0800d5ad
 800d550:	0800d5ad 	.word	0x0800d5ad
 800d554:	0800d5ad 	.word	0x0800d5ad
 800d558:	0800d59d 	.word	0x0800d59d
 800d55c:	0800d5ad 	.word	0x0800d5ad
 800d560:	0800d5ad 	.word	0x0800d5ad
 800d564:	0800d5ad 	.word	0x0800d5ad
 800d568:	0800d5ad 	.word	0x0800d5ad
 800d56c:	0800d5ad 	.word	0x0800d5ad
 800d570:	0800d5ad 	.word	0x0800d5ad
 800d574:	0800d5ad 	.word	0x0800d5ad
 800d578:	0800d5a5 	.word	0x0800d5a5
 800d57c:	2301      	movs	r3, #1
 800d57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d582:	e0bc      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d584:	2304      	movs	r3, #4
 800d586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d58a:	e0b8      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d58c:	2308      	movs	r3, #8
 800d58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d592:	e0b4      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d594:	2310      	movs	r3, #16
 800d596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d59a:	e0b0      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d59c:	2320      	movs	r3, #32
 800d59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5a2:	e0ac      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d5a4:	2340      	movs	r3, #64	; 0x40
 800d5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5aa:	e0a8      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d5ac:	2380      	movs	r3, #128	; 0x80
 800d5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5b2:	e0a4      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4a8f      	ldr	r2, [pc, #572]	; (800d7f8 <UART_SetConfig+0x6a0>)
 800d5ba:	4293      	cmp	r3, r2
 800d5bc:	d130      	bne.n	800d620 <UART_SetConfig+0x4c8>
 800d5be:	4b8d      	ldr	r3, [pc, #564]	; (800d7f4 <UART_SetConfig+0x69c>)
 800d5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5c2:	f003 0307 	and.w	r3, r3, #7
 800d5c6:	2b05      	cmp	r3, #5
 800d5c8:	d826      	bhi.n	800d618 <UART_SetConfig+0x4c0>
 800d5ca:	a201      	add	r2, pc, #4	; (adr r2, 800d5d0 <UART_SetConfig+0x478>)
 800d5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d0:	0800d5e9 	.word	0x0800d5e9
 800d5d4:	0800d5f1 	.word	0x0800d5f1
 800d5d8:	0800d5f9 	.word	0x0800d5f9
 800d5dc:	0800d601 	.word	0x0800d601
 800d5e0:	0800d609 	.word	0x0800d609
 800d5e4:	0800d611 	.word	0x0800d611
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ee:	e086      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d5f0:	2304      	movs	r3, #4
 800d5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5f6:	e082      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d5f8:	2308      	movs	r3, #8
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5fe:	e07e      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d600:	2310      	movs	r3, #16
 800d602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d606:	e07a      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d608:	2320      	movs	r3, #32
 800d60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d60e:	e076      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d610:	2340      	movs	r3, #64	; 0x40
 800d612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d616:	e072      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d618:	2380      	movs	r3, #128	; 0x80
 800d61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d61e:	e06e      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	4a75      	ldr	r2, [pc, #468]	; (800d7fc <UART_SetConfig+0x6a4>)
 800d626:	4293      	cmp	r3, r2
 800d628:	d130      	bne.n	800d68c <UART_SetConfig+0x534>
 800d62a:	4b72      	ldr	r3, [pc, #456]	; (800d7f4 <UART_SetConfig+0x69c>)
 800d62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d62e:	f003 0307 	and.w	r3, r3, #7
 800d632:	2b05      	cmp	r3, #5
 800d634:	d826      	bhi.n	800d684 <UART_SetConfig+0x52c>
 800d636:	a201      	add	r2, pc, #4	; (adr r2, 800d63c <UART_SetConfig+0x4e4>)
 800d638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d63c:	0800d655 	.word	0x0800d655
 800d640:	0800d65d 	.word	0x0800d65d
 800d644:	0800d665 	.word	0x0800d665
 800d648:	0800d66d 	.word	0x0800d66d
 800d64c:	0800d675 	.word	0x0800d675
 800d650:	0800d67d 	.word	0x0800d67d
 800d654:	2300      	movs	r3, #0
 800d656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d65a:	e050      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d65c:	2304      	movs	r3, #4
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d662:	e04c      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d664:	2308      	movs	r3, #8
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d66a:	e048      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d66c:	2310      	movs	r3, #16
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d672:	e044      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d674:	2320      	movs	r3, #32
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d67a:	e040      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d67c:	2340      	movs	r3, #64	; 0x40
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d682:	e03c      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d684:	2380      	movs	r3, #128	; 0x80
 800d686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d68a:	e038      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a5b      	ldr	r2, [pc, #364]	; (800d800 <UART_SetConfig+0x6a8>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d130      	bne.n	800d6f8 <UART_SetConfig+0x5a0>
 800d696:	4b57      	ldr	r3, [pc, #348]	; (800d7f4 <UART_SetConfig+0x69c>)
 800d698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d69a:	f003 0307 	and.w	r3, r3, #7
 800d69e:	2b05      	cmp	r3, #5
 800d6a0:	d826      	bhi.n	800d6f0 <UART_SetConfig+0x598>
 800d6a2:	a201      	add	r2, pc, #4	; (adr r2, 800d6a8 <UART_SetConfig+0x550>)
 800d6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a8:	0800d6c1 	.word	0x0800d6c1
 800d6ac:	0800d6c9 	.word	0x0800d6c9
 800d6b0:	0800d6d1 	.word	0x0800d6d1
 800d6b4:	0800d6d9 	.word	0x0800d6d9
 800d6b8:	0800d6e1 	.word	0x0800d6e1
 800d6bc:	0800d6e9 	.word	0x0800d6e9
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c6:	e01a      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d6c8:	2304      	movs	r3, #4
 800d6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ce:	e016      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d6d0:	2308      	movs	r3, #8
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6d6:	e012      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d6d8:	2310      	movs	r3, #16
 800d6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6de:	e00e      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d6e0:	2320      	movs	r3, #32
 800d6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6e6:	e00a      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d6e8:	2340      	movs	r3, #64	; 0x40
 800d6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ee:	e006      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d6f0:	2380      	movs	r3, #128	; 0x80
 800d6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6f6:	e002      	b.n	800d6fe <UART_SetConfig+0x5a6>
 800d6f8:	2380      	movs	r3, #128	; 0x80
 800d6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4a3f      	ldr	r2, [pc, #252]	; (800d800 <UART_SetConfig+0x6a8>)
 800d704:	4293      	cmp	r3, r2
 800d706:	f040 80f8 	bne.w	800d8fa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d70a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d70e:	2b20      	cmp	r3, #32
 800d710:	dc46      	bgt.n	800d7a0 <UART_SetConfig+0x648>
 800d712:	2b02      	cmp	r3, #2
 800d714:	f2c0 8082 	blt.w	800d81c <UART_SetConfig+0x6c4>
 800d718:	3b02      	subs	r3, #2
 800d71a:	2b1e      	cmp	r3, #30
 800d71c:	d87e      	bhi.n	800d81c <UART_SetConfig+0x6c4>
 800d71e:	a201      	add	r2, pc, #4	; (adr r2, 800d724 <UART_SetConfig+0x5cc>)
 800d720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d724:	0800d7a7 	.word	0x0800d7a7
 800d728:	0800d81d 	.word	0x0800d81d
 800d72c:	0800d7af 	.word	0x0800d7af
 800d730:	0800d81d 	.word	0x0800d81d
 800d734:	0800d81d 	.word	0x0800d81d
 800d738:	0800d81d 	.word	0x0800d81d
 800d73c:	0800d7bf 	.word	0x0800d7bf
 800d740:	0800d81d 	.word	0x0800d81d
 800d744:	0800d81d 	.word	0x0800d81d
 800d748:	0800d81d 	.word	0x0800d81d
 800d74c:	0800d81d 	.word	0x0800d81d
 800d750:	0800d81d 	.word	0x0800d81d
 800d754:	0800d81d 	.word	0x0800d81d
 800d758:	0800d81d 	.word	0x0800d81d
 800d75c:	0800d7cf 	.word	0x0800d7cf
 800d760:	0800d81d 	.word	0x0800d81d
 800d764:	0800d81d 	.word	0x0800d81d
 800d768:	0800d81d 	.word	0x0800d81d
 800d76c:	0800d81d 	.word	0x0800d81d
 800d770:	0800d81d 	.word	0x0800d81d
 800d774:	0800d81d 	.word	0x0800d81d
 800d778:	0800d81d 	.word	0x0800d81d
 800d77c:	0800d81d 	.word	0x0800d81d
 800d780:	0800d81d 	.word	0x0800d81d
 800d784:	0800d81d 	.word	0x0800d81d
 800d788:	0800d81d 	.word	0x0800d81d
 800d78c:	0800d81d 	.word	0x0800d81d
 800d790:	0800d81d 	.word	0x0800d81d
 800d794:	0800d81d 	.word	0x0800d81d
 800d798:	0800d81d 	.word	0x0800d81d
 800d79c:	0800d80f 	.word	0x0800d80f
 800d7a0:	2b40      	cmp	r3, #64	; 0x40
 800d7a2:	d037      	beq.n	800d814 <UART_SetConfig+0x6bc>
 800d7a4:	e03a      	b.n	800d81c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d7a6:	f7fb fcd1 	bl	800914c <HAL_RCCEx_GetD3PCLK1Freq>
 800d7aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d7ac:	e03c      	b.n	800d828 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fb fce0 	bl	8009178 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7bc:	e034      	b.n	800d828 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7be:	f107 0318 	add.w	r3, r7, #24
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fb fe2c 	bl	8009420 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d7cc:	e02c      	b.n	800d828 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7ce:	4b09      	ldr	r3, [pc, #36]	; (800d7f4 <UART_SetConfig+0x69c>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	f003 0320 	and.w	r3, r3, #32
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d016      	beq.n	800d808 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7da:	4b06      	ldr	r3, [pc, #24]	; (800d7f4 <UART_SetConfig+0x69c>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	08db      	lsrs	r3, r3, #3
 800d7e0:	f003 0303 	and.w	r3, r3, #3
 800d7e4:	4a07      	ldr	r2, [pc, #28]	; (800d804 <UART_SetConfig+0x6ac>)
 800d7e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7ec:	e01c      	b.n	800d828 <UART_SetConfig+0x6d0>
 800d7ee:	bf00      	nop
 800d7f0:	40011400 	.word	0x40011400
 800d7f4:	58024400 	.word	0x58024400
 800d7f8:	40007800 	.word	0x40007800
 800d7fc:	40007c00 	.word	0x40007c00
 800d800:	58000c00 	.word	0x58000c00
 800d804:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d808:	4b9d      	ldr	r3, [pc, #628]	; (800da80 <UART_SetConfig+0x928>)
 800d80a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d80c:	e00c      	b.n	800d828 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d80e:	4b9d      	ldr	r3, [pc, #628]	; (800da84 <UART_SetConfig+0x92c>)
 800d810:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d812:	e009      	b.n	800d828 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d814:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d81a:	e005      	b.n	800d828 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d81c:	2300      	movs	r3, #0
 800d81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d820:	2301      	movs	r3, #1
 800d822:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d826:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	f000 81de 	beq.w	800dbec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d830:	697b      	ldr	r3, [r7, #20]
 800d832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d834:	4a94      	ldr	r2, [pc, #592]	; (800da88 <UART_SetConfig+0x930>)
 800d836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d83a:	461a      	mov	r2, r3
 800d83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d83e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d842:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	685a      	ldr	r2, [r3, #4]
 800d848:	4613      	mov	r3, r2
 800d84a:	005b      	lsls	r3, r3, #1
 800d84c:	4413      	add	r3, r2
 800d84e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d850:	429a      	cmp	r2, r3
 800d852:	d305      	bcc.n	800d860 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	685b      	ldr	r3, [r3, #4]
 800d858:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d85a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d903      	bls.n	800d868 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d860:	2301      	movs	r3, #1
 800d862:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d866:	e1c1      	b.n	800dbec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d86a:	2200      	movs	r2, #0
 800d86c:	60bb      	str	r3, [r7, #8]
 800d86e:	60fa      	str	r2, [r7, #12]
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d874:	4a84      	ldr	r2, [pc, #528]	; (800da88 <UART_SetConfig+0x930>)
 800d876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d87a:	b29b      	uxth	r3, r3
 800d87c:	2200      	movs	r2, #0
 800d87e:	603b      	str	r3, [r7, #0]
 800d880:	607a      	str	r2, [r7, #4]
 800d882:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d886:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d88a:	f7f2 fd81 	bl	8000390 <__aeabi_uldivmod>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	4610      	mov	r0, r2
 800d894:	4619      	mov	r1, r3
 800d896:	f04f 0200 	mov.w	r2, #0
 800d89a:	f04f 0300 	mov.w	r3, #0
 800d89e:	020b      	lsls	r3, r1, #8
 800d8a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d8a4:	0202      	lsls	r2, r0, #8
 800d8a6:	6979      	ldr	r1, [r7, #20]
 800d8a8:	6849      	ldr	r1, [r1, #4]
 800d8aa:	0849      	lsrs	r1, r1, #1
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	460c      	mov	r4, r1
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	eb12 0804 	adds.w	r8, r2, r4
 800d8b6:	eb43 0905 	adc.w	r9, r3, r5
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	469a      	mov	sl, r3
 800d8c2:	4693      	mov	fp, r2
 800d8c4:	4652      	mov	r2, sl
 800d8c6:	465b      	mov	r3, fp
 800d8c8:	4640      	mov	r0, r8
 800d8ca:	4649      	mov	r1, r9
 800d8cc:	f7f2 fd60 	bl	8000390 <__aeabi_uldivmod>
 800d8d0:	4602      	mov	r2, r0
 800d8d2:	460b      	mov	r3, r1
 800d8d4:	4613      	mov	r3, r2
 800d8d6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d8de:	d308      	bcc.n	800d8f2 <UART_SetConfig+0x79a>
 800d8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8e6:	d204      	bcs.n	800d8f2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8ee:	60da      	str	r2, [r3, #12]
 800d8f0:	e17c      	b.n	800dbec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d8f8:	e178      	b.n	800dbec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	69db      	ldr	r3, [r3, #28]
 800d8fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d902:	f040 80c5 	bne.w	800da90 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d906:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d90a:	2b20      	cmp	r3, #32
 800d90c:	dc48      	bgt.n	800d9a0 <UART_SetConfig+0x848>
 800d90e:	2b00      	cmp	r3, #0
 800d910:	db7b      	blt.n	800da0a <UART_SetConfig+0x8b2>
 800d912:	2b20      	cmp	r3, #32
 800d914:	d879      	bhi.n	800da0a <UART_SetConfig+0x8b2>
 800d916:	a201      	add	r2, pc, #4	; (adr r2, 800d91c <UART_SetConfig+0x7c4>)
 800d918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d91c:	0800d9a7 	.word	0x0800d9a7
 800d920:	0800d9af 	.word	0x0800d9af
 800d924:	0800da0b 	.word	0x0800da0b
 800d928:	0800da0b 	.word	0x0800da0b
 800d92c:	0800d9b7 	.word	0x0800d9b7
 800d930:	0800da0b 	.word	0x0800da0b
 800d934:	0800da0b 	.word	0x0800da0b
 800d938:	0800da0b 	.word	0x0800da0b
 800d93c:	0800d9c7 	.word	0x0800d9c7
 800d940:	0800da0b 	.word	0x0800da0b
 800d944:	0800da0b 	.word	0x0800da0b
 800d948:	0800da0b 	.word	0x0800da0b
 800d94c:	0800da0b 	.word	0x0800da0b
 800d950:	0800da0b 	.word	0x0800da0b
 800d954:	0800da0b 	.word	0x0800da0b
 800d958:	0800da0b 	.word	0x0800da0b
 800d95c:	0800d9d7 	.word	0x0800d9d7
 800d960:	0800da0b 	.word	0x0800da0b
 800d964:	0800da0b 	.word	0x0800da0b
 800d968:	0800da0b 	.word	0x0800da0b
 800d96c:	0800da0b 	.word	0x0800da0b
 800d970:	0800da0b 	.word	0x0800da0b
 800d974:	0800da0b 	.word	0x0800da0b
 800d978:	0800da0b 	.word	0x0800da0b
 800d97c:	0800da0b 	.word	0x0800da0b
 800d980:	0800da0b 	.word	0x0800da0b
 800d984:	0800da0b 	.word	0x0800da0b
 800d988:	0800da0b 	.word	0x0800da0b
 800d98c:	0800da0b 	.word	0x0800da0b
 800d990:	0800da0b 	.word	0x0800da0b
 800d994:	0800da0b 	.word	0x0800da0b
 800d998:	0800da0b 	.word	0x0800da0b
 800d99c:	0800d9fd 	.word	0x0800d9fd
 800d9a0:	2b40      	cmp	r3, #64	; 0x40
 800d9a2:	d02e      	beq.n	800da02 <UART_SetConfig+0x8aa>
 800d9a4:	e031      	b.n	800da0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9a6:	f7fa f959 	bl	8007c5c <HAL_RCC_GetPCLK1Freq>
 800d9aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d9ac:	e033      	b.n	800da16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9ae:	f7fa f96b 	bl	8007c88 <HAL_RCC_GetPCLK2Freq>
 800d9b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d9b4:	e02f      	b.n	800da16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7fb fbdc 	bl	8009178 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9c4:	e027      	b.n	800da16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9c6:	f107 0318 	add.w	r3, r7, #24
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fb fd28 	bl	8009420 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d9d0:	69fb      	ldr	r3, [r7, #28]
 800d9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9d4:	e01f      	b.n	800da16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9d6:	4b2d      	ldr	r3, [pc, #180]	; (800da8c <UART_SetConfig+0x934>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f003 0320 	and.w	r3, r3, #32
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d009      	beq.n	800d9f6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d9e2:	4b2a      	ldr	r3, [pc, #168]	; (800da8c <UART_SetConfig+0x934>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	08db      	lsrs	r3, r3, #3
 800d9e8:	f003 0303 	and.w	r3, r3, #3
 800d9ec:	4a24      	ldr	r2, [pc, #144]	; (800da80 <UART_SetConfig+0x928>)
 800d9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800d9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d9f4:	e00f      	b.n	800da16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d9f6:	4b22      	ldr	r3, [pc, #136]	; (800da80 <UART_SetConfig+0x928>)
 800d9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d9fa:	e00c      	b.n	800da16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d9fc:	4b21      	ldr	r3, [pc, #132]	; (800da84 <UART_SetConfig+0x92c>)
 800d9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da00:	e009      	b.n	800da16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800da08:	e005      	b.n	800da16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800da0a:	2300      	movs	r3, #0
 800da0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800da0e:	2301      	movs	r3, #1
 800da10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800da14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800da16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da18:	2b00      	cmp	r3, #0
 800da1a:	f000 80e7 	beq.w	800dbec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da22:	4a19      	ldr	r2, [pc, #100]	; (800da88 <UART_SetConfig+0x930>)
 800da24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da28:	461a      	mov	r2, r3
 800da2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800da30:	005a      	lsls	r2, r3, #1
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	685b      	ldr	r3, [r3, #4]
 800da36:	085b      	lsrs	r3, r3, #1
 800da38:	441a      	add	r2, r3
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	685b      	ldr	r3, [r3, #4]
 800da3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800da42:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da46:	2b0f      	cmp	r3, #15
 800da48:	d916      	bls.n	800da78 <UART_SetConfig+0x920>
 800da4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da50:	d212      	bcs.n	800da78 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da54:	b29b      	uxth	r3, r3
 800da56:	f023 030f 	bic.w	r3, r3, #15
 800da5a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da5e:	085b      	lsrs	r3, r3, #1
 800da60:	b29b      	uxth	r3, r3
 800da62:	f003 0307 	and.w	r3, r3, #7
 800da66:	b29a      	uxth	r2, r3
 800da68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800da6a:	4313      	orrs	r3, r2
 800da6c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800da74:	60da      	str	r2, [r3, #12]
 800da76:	e0b9      	b.n	800dbec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800da78:	2301      	movs	r3, #1
 800da7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800da7e:	e0b5      	b.n	800dbec <UART_SetConfig+0xa94>
 800da80:	03d09000 	.word	0x03d09000
 800da84:	003d0900 	.word	0x003d0900
 800da88:	080253b0 	.word	0x080253b0
 800da8c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800da90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da94:	2b20      	cmp	r3, #32
 800da96:	dc49      	bgt.n	800db2c <UART_SetConfig+0x9d4>
 800da98:	2b00      	cmp	r3, #0
 800da9a:	db7c      	blt.n	800db96 <UART_SetConfig+0xa3e>
 800da9c:	2b20      	cmp	r3, #32
 800da9e:	d87a      	bhi.n	800db96 <UART_SetConfig+0xa3e>
 800daa0:	a201      	add	r2, pc, #4	; (adr r2, 800daa8 <UART_SetConfig+0x950>)
 800daa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa6:	bf00      	nop
 800daa8:	0800db33 	.word	0x0800db33
 800daac:	0800db3b 	.word	0x0800db3b
 800dab0:	0800db97 	.word	0x0800db97
 800dab4:	0800db97 	.word	0x0800db97
 800dab8:	0800db43 	.word	0x0800db43
 800dabc:	0800db97 	.word	0x0800db97
 800dac0:	0800db97 	.word	0x0800db97
 800dac4:	0800db97 	.word	0x0800db97
 800dac8:	0800db53 	.word	0x0800db53
 800dacc:	0800db97 	.word	0x0800db97
 800dad0:	0800db97 	.word	0x0800db97
 800dad4:	0800db97 	.word	0x0800db97
 800dad8:	0800db97 	.word	0x0800db97
 800dadc:	0800db97 	.word	0x0800db97
 800dae0:	0800db97 	.word	0x0800db97
 800dae4:	0800db97 	.word	0x0800db97
 800dae8:	0800db63 	.word	0x0800db63
 800daec:	0800db97 	.word	0x0800db97
 800daf0:	0800db97 	.word	0x0800db97
 800daf4:	0800db97 	.word	0x0800db97
 800daf8:	0800db97 	.word	0x0800db97
 800dafc:	0800db97 	.word	0x0800db97
 800db00:	0800db97 	.word	0x0800db97
 800db04:	0800db97 	.word	0x0800db97
 800db08:	0800db97 	.word	0x0800db97
 800db0c:	0800db97 	.word	0x0800db97
 800db10:	0800db97 	.word	0x0800db97
 800db14:	0800db97 	.word	0x0800db97
 800db18:	0800db97 	.word	0x0800db97
 800db1c:	0800db97 	.word	0x0800db97
 800db20:	0800db97 	.word	0x0800db97
 800db24:	0800db97 	.word	0x0800db97
 800db28:	0800db89 	.word	0x0800db89
 800db2c:	2b40      	cmp	r3, #64	; 0x40
 800db2e:	d02e      	beq.n	800db8e <UART_SetConfig+0xa36>
 800db30:	e031      	b.n	800db96 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db32:	f7fa f893 	bl	8007c5c <HAL_RCC_GetPCLK1Freq>
 800db36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db38:	e033      	b.n	800dba2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db3a:	f7fa f8a5 	bl	8007c88 <HAL_RCC_GetPCLK2Freq>
 800db3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db40:	e02f      	b.n	800dba2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db46:	4618      	mov	r0, r3
 800db48:	f7fb fb16 	bl	8009178 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db50:	e027      	b.n	800dba2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db52:	f107 0318 	add.w	r3, r7, #24
 800db56:	4618      	mov	r0, r3
 800db58:	f7fb fc62 	bl	8009420 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db60:	e01f      	b.n	800dba2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db62:	4b2d      	ldr	r3, [pc, #180]	; (800dc18 <UART_SetConfig+0xac0>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f003 0320 	and.w	r3, r3, #32
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d009      	beq.n	800db82 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db6e:	4b2a      	ldr	r3, [pc, #168]	; (800dc18 <UART_SetConfig+0xac0>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	08db      	lsrs	r3, r3, #3
 800db74:	f003 0303 	and.w	r3, r3, #3
 800db78:	4a28      	ldr	r2, [pc, #160]	; (800dc1c <UART_SetConfig+0xac4>)
 800db7a:	fa22 f303 	lsr.w	r3, r2, r3
 800db7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db80:	e00f      	b.n	800dba2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800db82:	4b26      	ldr	r3, [pc, #152]	; (800dc1c <UART_SetConfig+0xac4>)
 800db84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db86:	e00c      	b.n	800dba2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db88:	4b25      	ldr	r3, [pc, #148]	; (800dc20 <UART_SetConfig+0xac8>)
 800db8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db8c:	e009      	b.n	800dba2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db94:	e005      	b.n	800dba2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800db96:	2300      	movs	r3, #0
 800db98:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800db9a:	2301      	movs	r3, #1
 800db9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dba0:	bf00      	nop
    }

    if (pclk != 0U)
 800dba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d021      	beq.n	800dbec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbac:	4a1d      	ldr	r2, [pc, #116]	; (800dc24 <UART_SetConfig+0xacc>)
 800dbae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbb6:	fbb3 f2f2 	udiv	r2, r3, r2
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	085b      	lsrs	r3, r3, #1
 800dbc0:	441a      	add	r2, r3
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	685b      	ldr	r3, [r3, #4]
 800dbc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbce:	2b0f      	cmp	r3, #15
 800dbd0:	d909      	bls.n	800dbe6 <UART_SetConfig+0xa8e>
 800dbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbd8:	d205      	bcs.n	800dbe6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	60da      	str	r2, [r3, #12]
 800dbe4:	e002      	b.n	800dbec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800dbf4:	697b      	ldr	r3, [r7, #20]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	2200      	movs	r2, #0
 800dc06:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800dc08:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	3748      	adds	r7, #72	; 0x48
 800dc10:	46bd      	mov	sp, r7
 800dc12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dc16:	bf00      	nop
 800dc18:	58024400 	.word	0x58024400
 800dc1c:	03d09000 	.word	0x03d09000
 800dc20:	003d0900 	.word	0x003d0900
 800dc24:	080253b0 	.word	0x080253b0

0800dc28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc34:	f003 0301 	and.w	r3, r3, #1
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00a      	beq.n	800dc52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	685b      	ldr	r3, [r3, #4]
 800dc42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	430a      	orrs	r2, r1
 800dc50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc56:	f003 0302 	and.w	r3, r3, #2
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d00a      	beq.n	800dc74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	430a      	orrs	r2, r1
 800dc72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc78:	f003 0304 	and.w	r3, r3, #4
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00a      	beq.n	800dc96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	430a      	orrs	r2, r1
 800dc94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc9a:	f003 0308 	and.w	r3, r3, #8
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d00a      	beq.n	800dcb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	430a      	orrs	r2, r1
 800dcb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcbc:	f003 0310 	and.w	r3, r3, #16
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00a      	beq.n	800dcda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	430a      	orrs	r2, r1
 800dcd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcde:	f003 0320 	and.w	r3, r3, #32
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d00a      	beq.n	800dcfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	689b      	ldr	r3, [r3, #8]
 800dcec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	430a      	orrs	r2, r1
 800dcfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d01a      	beq.n	800dd3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	430a      	orrs	r2, r1
 800dd1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd26:	d10a      	bne.n	800dd3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	430a      	orrs	r2, r1
 800dd3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00a      	beq.n	800dd60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	430a      	orrs	r2, r1
 800dd5e:	605a      	str	r2, [r3, #4]
  }
}
 800dd60:	bf00      	nop
 800dd62:	370c      	adds	r7, #12
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr

0800dd6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b098      	sub	sp, #96	; 0x60
 800dd70:	af02      	add	r7, sp, #8
 800dd72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2200      	movs	r2, #0
 800dd78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd7c:	f7f4 faa0 	bl	80022c0 <HAL_GetTick>
 800dd80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f003 0308 	and.w	r3, r3, #8
 800dd8c:	2b08      	cmp	r3, #8
 800dd8e:	d12f      	bne.n	800ddf0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 f88e 	bl	800dec0 <UART_WaitOnFlagUntilTimeout>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d022      	beq.n	800ddf0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb2:	e853 3f00 	ldrex	r3, [r3]
 800ddb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ddb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddbe:	653b      	str	r3, [r7, #80]	; 0x50
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	461a      	mov	r2, r3
 800ddc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddc8:	647b      	str	r3, [r7, #68]	; 0x44
 800ddca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ddce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ddd0:	e841 2300 	strex	r3, r2, [r1]
 800ddd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ddd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d1e6      	bne.n	800ddaa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2220      	movs	r2, #32
 800dde0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddec:	2303      	movs	r3, #3
 800ddee:	e063      	b.n	800deb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f003 0304 	and.w	r3, r3, #4
 800ddfa:	2b04      	cmp	r3, #4
 800ddfc:	d149      	bne.n	800de92 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ddfe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de06:	2200      	movs	r2, #0
 800de08:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f000 f857 	bl	800dec0 <UART_WaitOnFlagUntilTimeout>
 800de12:	4603      	mov	r3, r0
 800de14:	2b00      	cmp	r3, #0
 800de16:	d03c      	beq.n	800de92 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de20:	e853 3f00 	ldrex	r3, [r3]
 800de24:	623b      	str	r3, [r7, #32]
   return(result);
 800de26:	6a3b      	ldr	r3, [r7, #32]
 800de28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	461a      	mov	r2, r3
 800de34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de36:	633b      	str	r3, [r7, #48]	; 0x30
 800de38:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de3e:	e841 2300 	strex	r3, r2, [r1]
 800de42:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de46:	2b00      	cmp	r3, #0
 800de48:	d1e6      	bne.n	800de18 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	3308      	adds	r3, #8
 800de50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	e853 3f00 	ldrex	r3, [r3]
 800de58:	60fb      	str	r3, [r7, #12]
   return(result);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	f023 0301 	bic.w	r3, r3, #1
 800de60:	64bb      	str	r3, [r7, #72]	; 0x48
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	3308      	adds	r3, #8
 800de68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800de6a:	61fa      	str	r2, [r7, #28]
 800de6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de6e:	69b9      	ldr	r1, [r7, #24]
 800de70:	69fa      	ldr	r2, [r7, #28]
 800de72:	e841 2300 	strex	r3, r2, [r1]
 800de76:	617b      	str	r3, [r7, #20]
   return(result);
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d1e5      	bne.n	800de4a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2220      	movs	r2, #32
 800de82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	2200      	movs	r2, #0
 800de8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de8e:	2303      	movs	r3, #3
 800de90:	e012      	b.n	800deb8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2220      	movs	r2, #32
 800de96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2220      	movs	r2, #32
 800de9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2200      	movs	r2, #0
 800dea6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2200      	movs	r2, #0
 800deac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2200      	movs	r2, #0
 800deb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800deb6:	2300      	movs	r3, #0
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3758      	adds	r7, #88	; 0x58
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b084      	sub	sp, #16
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	60f8      	str	r0, [r7, #12]
 800dec8:	60b9      	str	r1, [r7, #8]
 800deca:	603b      	str	r3, [r7, #0]
 800decc:	4613      	mov	r3, r2
 800dece:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ded0:	e049      	b.n	800df66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded8:	d045      	beq.n	800df66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800deda:	f7f4 f9f1 	bl	80022c0 <HAL_GetTick>
 800dede:	4602      	mov	r2, r0
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	1ad3      	subs	r3, r2, r3
 800dee4:	69ba      	ldr	r2, [r7, #24]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d302      	bcc.n	800def0 <UART_WaitOnFlagUntilTimeout+0x30>
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d101      	bne.n	800def4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800def0:	2303      	movs	r3, #3
 800def2:	e048      	b.n	800df86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f003 0304 	and.w	r3, r3, #4
 800defe:	2b00      	cmp	r3, #0
 800df00:	d031      	beq.n	800df66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	69db      	ldr	r3, [r3, #28]
 800df08:	f003 0308 	and.w	r3, r3, #8
 800df0c:	2b08      	cmp	r3, #8
 800df0e:	d110      	bne.n	800df32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	2208      	movs	r2, #8
 800df16:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f000 fa43 	bl	800e3a4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2208      	movs	r2, #8
 800df22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2200      	movs	r2, #0
 800df2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800df2e:	2301      	movs	r3, #1
 800df30:	e029      	b.n	800df86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	69db      	ldr	r3, [r3, #28]
 800df38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df40:	d111      	bne.n	800df66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800df4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df4c:	68f8      	ldr	r0, [r7, #12]
 800df4e:	f000 fa29 	bl	800e3a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	2220      	movs	r2, #32
 800df56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2200      	movs	r2, #0
 800df5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800df62:	2303      	movs	r3, #3
 800df64:	e00f      	b.n	800df86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	69da      	ldr	r2, [r3, #28]
 800df6c:	68bb      	ldr	r3, [r7, #8]
 800df6e:	4013      	ands	r3, r2
 800df70:	68ba      	ldr	r2, [r7, #8]
 800df72:	429a      	cmp	r2, r3
 800df74:	bf0c      	ite	eq
 800df76:	2301      	moveq	r3, #1
 800df78:	2300      	movne	r3, #0
 800df7a:	b2db      	uxtb	r3, r3
 800df7c:	461a      	mov	r2, r3
 800df7e:	79fb      	ldrb	r3, [r7, #7]
 800df80:	429a      	cmp	r2, r3
 800df82:	d0a6      	beq.n	800ded2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df84:	2300      	movs	r3, #0
}
 800df86:	4618      	mov	r0, r3
 800df88:	3710      	adds	r7, #16
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}
	...

0800df90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df90:	b480      	push	{r7}
 800df92:	b0a3      	sub	sp, #140	; 0x8c
 800df94:	af00      	add	r7, sp, #0
 800df96:	60f8      	str	r0, [r7, #12]
 800df98:	60b9      	str	r1, [r7, #8]
 800df9a:	4613      	mov	r3, r2
 800df9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	68ba      	ldr	r2, [r7, #8]
 800dfa2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	88fa      	ldrh	r2, [r7, #6]
 800dfa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	88fa      	ldrh	r2, [r7, #6]
 800dfb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfc2:	d10e      	bne.n	800dfe2 <UART_Start_Receive_IT+0x52>
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	691b      	ldr	r3, [r3, #16]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d105      	bne.n	800dfd8 <UART_Start_Receive_IT+0x48>
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dfd2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dfd6:	e02d      	b.n	800e034 <UART_Start_Receive_IT+0xa4>
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	22ff      	movs	r2, #255	; 0xff
 800dfdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dfe0:	e028      	b.n	800e034 <UART_Start_Receive_IT+0xa4>
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	689b      	ldr	r3, [r3, #8]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d10d      	bne.n	800e006 <UART_Start_Receive_IT+0x76>
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	691b      	ldr	r3, [r3, #16]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d104      	bne.n	800dffc <UART_Start_Receive_IT+0x6c>
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	22ff      	movs	r2, #255	; 0xff
 800dff6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800dffa:	e01b      	b.n	800e034 <UART_Start_Receive_IT+0xa4>
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	227f      	movs	r2, #127	; 0x7f
 800e000:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e004:	e016      	b.n	800e034 <UART_Start_Receive_IT+0xa4>
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	689b      	ldr	r3, [r3, #8]
 800e00a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e00e:	d10d      	bne.n	800e02c <UART_Start_Receive_IT+0x9c>
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	691b      	ldr	r3, [r3, #16]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d104      	bne.n	800e022 <UART_Start_Receive_IT+0x92>
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	227f      	movs	r2, #127	; 0x7f
 800e01c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e020:	e008      	b.n	800e034 <UART_Start_Receive_IT+0xa4>
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	223f      	movs	r2, #63	; 0x3f
 800e026:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800e02a:	e003      	b.n	800e034 <UART_Start_Receive_IT+0xa4>
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	2200      	movs	r2, #0
 800e030:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2200      	movs	r2, #0
 800e038:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2222      	movs	r2, #34	; 0x22
 800e040:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	3308      	adds	r3, #8
 800e04a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e04c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e04e:	e853 3f00 	ldrex	r3, [r3]
 800e052:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800e054:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e056:	f043 0301 	orr.w	r3, r3, #1
 800e05a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	3308      	adds	r3, #8
 800e064:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e068:	673a      	str	r2, [r7, #112]	; 0x70
 800e06a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e06c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e06e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e070:	e841 2300 	strex	r3, r2, [r1]
 800e074:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800e076:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d1e3      	bne.n	800e044 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e084:	d14f      	bne.n	800e126 <UART_Start_Receive_IT+0x196>
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e08c:	88fa      	ldrh	r2, [r7, #6]
 800e08e:	429a      	cmp	r2, r3
 800e090:	d349      	bcc.n	800e126 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	689b      	ldr	r3, [r3, #8]
 800e096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e09a:	d107      	bne.n	800e0ac <UART_Start_Receive_IT+0x11c>
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	691b      	ldr	r3, [r3, #16]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d103      	bne.n	800e0ac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	4a47      	ldr	r2, [pc, #284]	; (800e1c4 <UART_Start_Receive_IT+0x234>)
 800e0a8:	675a      	str	r2, [r3, #116]	; 0x74
 800e0aa:	e002      	b.n	800e0b2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	4a46      	ldr	r2, [pc, #280]	; (800e1c8 <UART_Start_Receive_IT+0x238>)
 800e0b0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	691b      	ldr	r3, [r3, #16]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d01a      	beq.n	800e0f0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0c2:	e853 3f00 	ldrex	r3, [r3]
 800e0c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e0c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e0ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e0dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0de:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e0e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e0e4:	e841 2300 	strex	r3, r2, [r1]
 800e0e8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e0ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1e4      	bne.n	800e0ba <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	3308      	adds	r3, #8
 800e0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0fa:	e853 3f00 	ldrex	r3, [r3]
 800e0fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e106:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	3308      	adds	r3, #8
 800e10e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e110:	64ba      	str	r2, [r7, #72]	; 0x48
 800e112:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e114:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e118:	e841 2300 	strex	r3, r2, [r1]
 800e11c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e11e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e120:	2b00      	cmp	r3, #0
 800e122:	d1e5      	bne.n	800e0f0 <UART_Start_Receive_IT+0x160>
 800e124:	e046      	b.n	800e1b4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	689b      	ldr	r3, [r3, #8]
 800e12a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e12e:	d107      	bne.n	800e140 <UART_Start_Receive_IT+0x1b0>
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	691b      	ldr	r3, [r3, #16]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d103      	bne.n	800e140 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	4a24      	ldr	r2, [pc, #144]	; (800e1cc <UART_Start_Receive_IT+0x23c>)
 800e13c:	675a      	str	r2, [r3, #116]	; 0x74
 800e13e:	e002      	b.n	800e146 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	4a23      	ldr	r2, [pc, #140]	; (800e1d0 <UART_Start_Receive_IT+0x240>)
 800e144:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	691b      	ldr	r3, [r3, #16]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d019      	beq.n	800e182 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e156:	e853 3f00 	ldrex	r3, [r3]
 800e15a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800e162:	677b      	str	r3, [r7, #116]	; 0x74
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	461a      	mov	r2, r3
 800e16a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e16c:	637b      	str	r3, [r7, #52]	; 0x34
 800e16e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e174:	e841 2300 	strex	r3, r2, [r1]
 800e178:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d1e6      	bne.n	800e14e <UART_Start_Receive_IT+0x1be>
 800e180:	e018      	b.n	800e1b4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	e853 3f00 	ldrex	r3, [r3]
 800e18e:	613b      	str	r3, [r7, #16]
   return(result);
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	f043 0320 	orr.w	r3, r3, #32
 800e196:	67bb      	str	r3, [r7, #120]	; 0x78
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	461a      	mov	r2, r3
 800e19e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1a0:	623b      	str	r3, [r7, #32]
 800e1a2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a4:	69f9      	ldr	r1, [r7, #28]
 800e1a6:	6a3a      	ldr	r2, [r7, #32]
 800e1a8:	e841 2300 	strex	r3, r2, [r1]
 800e1ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d1e6      	bne.n	800e182 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e1b4:	2300      	movs	r3, #0
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	378c      	adds	r7, #140	; 0x8c
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr
 800e1c2:	bf00      	nop
 800e1c4:	0800f22d 	.word	0x0800f22d
 800e1c8:	0800eec1 	.word	0x0800eec1
 800e1cc:	0800ed01 	.word	0x0800ed01
 800e1d0:	0800eb41 	.word	0x0800eb41

0800e1d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b096      	sub	sp, #88	; 0x58
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	4613      	mov	r3, r2
 800e1e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	68ba      	ldr	r2, [r7, #8]
 800e1e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	88fa      	ldrh	r2, [r7, #6]
 800e1ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2222      	movs	r2, #34	; 0x22
 800e1fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e206:	2b00      	cmp	r3, #0
 800e208:	d02d      	beq.n	800e266 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e210:	4a40      	ldr	r2, [pc, #256]	; (800e314 <UART_Start_Receive_DMA+0x140>)
 800e212:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e21a:	4a3f      	ldr	r2, [pc, #252]	; (800e318 <UART_Start_Receive_DMA+0x144>)
 800e21c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e224:	4a3d      	ldr	r2, [pc, #244]	; (800e31c <UART_Start_Receive_DMA+0x148>)
 800e226:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e22e:	2200      	movs	r2, #0
 800e230:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	3324      	adds	r3, #36	; 0x24
 800e23e:	4619      	mov	r1, r3
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e244:	461a      	mov	r2, r3
 800e246:	88fb      	ldrh	r3, [r7, #6]
 800e248:	f7f4 fcb2 	bl	8002bb0 <HAL_DMA_Start_IT>
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d009      	beq.n	800e266 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2210      	movs	r2, #16
 800e256:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2220      	movs	r2, #32
 800e25e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800e262:	2301      	movs	r3, #1
 800e264:	e051      	b.n	800e30a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	691b      	ldr	r3, [r3, #16]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d018      	beq.n	800e2a0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e276:	e853 3f00 	ldrex	r3, [r3]
 800e27a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e282:	657b      	str	r3, [r7, #84]	; 0x54
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	461a      	mov	r2, r3
 800e28a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e28c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e28e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e290:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e292:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e294:	e841 2300 	strex	r3, r2, [r1]
 800e298:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e29a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d1e6      	bne.n	800e26e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	3308      	adds	r3, #8
 800e2a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2aa:	e853 3f00 	ldrex	r3, [r3]
 800e2ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b2:	f043 0301 	orr.w	r3, r3, #1
 800e2b6:	653b      	str	r3, [r7, #80]	; 0x50
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	3308      	adds	r3, #8
 800e2be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e2c0:	637a      	str	r2, [r7, #52]	; 0x34
 800e2c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e2c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e2c8:	e841 2300 	strex	r3, r2, [r1]
 800e2cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d1e5      	bne.n	800e2a0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	3308      	adds	r3, #8
 800e2da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	e853 3f00 	ldrex	r3, [r3]
 800e2e2:	613b      	str	r3, [r7, #16]
   return(result);
 800e2e4:	693b      	ldr	r3, [r7, #16]
 800e2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	3308      	adds	r3, #8
 800e2f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e2f4:	623a      	str	r2, [r7, #32]
 800e2f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2f8:	69f9      	ldr	r1, [r7, #28]
 800e2fa:	6a3a      	ldr	r2, [r7, #32]
 800e2fc:	e841 2300 	strex	r3, r2, [r1]
 800e300:	61bb      	str	r3, [r7, #24]
   return(result);
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d1e5      	bne.n	800e2d4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e308:	2300      	movs	r3, #0
}
 800e30a:	4618      	mov	r0, r3
 800e30c:	3758      	adds	r7, #88	; 0x58
 800e30e:	46bd      	mov	sp, r7
 800e310:	bd80      	pop	{r7, pc}
 800e312:	bf00      	nop
 800e314:	0800e52b 	.word	0x0800e52b
 800e318:	0800e65b 	.word	0x0800e65b
 800e31c:	0800e6a1 	.word	0x0800e6a1

0800e320 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e320:	b480      	push	{r7}
 800e322:	b08f      	sub	sp, #60	; 0x3c
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e32e:	6a3b      	ldr	r3, [r7, #32]
 800e330:	e853 3f00 	ldrex	r3, [r3]
 800e334:	61fb      	str	r3, [r7, #28]
   return(result);
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e33c:	637b      	str	r3, [r7, #52]	; 0x34
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	461a      	mov	r2, r3
 800e344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e346:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e348:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e34a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e34c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e34e:	e841 2300 	strex	r3, r2, [r1]
 800e352:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e356:	2b00      	cmp	r3, #0
 800e358:	d1e6      	bne.n	800e328 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	3308      	adds	r3, #8
 800e360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	e853 3f00 	ldrex	r3, [r3]
 800e368:	60bb      	str	r3, [r7, #8]
   return(result);
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e370:	633b      	str	r3, [r7, #48]	; 0x30
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	3308      	adds	r3, #8
 800e378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e37a:	61ba      	str	r2, [r7, #24]
 800e37c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37e:	6979      	ldr	r1, [r7, #20]
 800e380:	69ba      	ldr	r2, [r7, #24]
 800e382:	e841 2300 	strex	r3, r2, [r1]
 800e386:	613b      	str	r3, [r7, #16]
   return(result);
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1e5      	bne.n	800e35a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2220      	movs	r2, #32
 800e392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800e396:	bf00      	nop
 800e398:	373c      	adds	r7, #60	; 0x3c
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr
	...

0800e3a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b095      	sub	sp, #84	; 0x54
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3b4:	e853 3f00 	ldrex	r3, [r3]
 800e3b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e3c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	461a      	mov	r2, r3
 800e3c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3ca:	643b      	str	r3, [r7, #64]	; 0x40
 800e3cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e3d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3d2:	e841 2300 	strex	r3, r2, [r1]
 800e3d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d1e6      	bne.n	800e3ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	3308      	adds	r3, #8
 800e3e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e6:	6a3b      	ldr	r3, [r7, #32]
 800e3e8:	e853 3f00 	ldrex	r3, [r3]
 800e3ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800e3ee:	69fa      	ldr	r2, [r7, #28]
 800e3f0:	4b1e      	ldr	r3, [pc, #120]	; (800e46c <UART_EndRxTransfer+0xc8>)
 800e3f2:	4013      	ands	r3, r2
 800e3f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	3308      	adds	r3, #8
 800e3fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e3fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e400:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e406:	e841 2300 	strex	r3, r2, [r1]
 800e40a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1e5      	bne.n	800e3de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e416:	2b01      	cmp	r3, #1
 800e418:	d118      	bne.n	800e44c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	e853 3f00 	ldrex	r3, [r3]
 800e426:	60bb      	str	r3, [r7, #8]
   return(result);
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	f023 0310 	bic.w	r3, r3, #16
 800e42e:	647b      	str	r3, [r7, #68]	; 0x44
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	461a      	mov	r2, r3
 800e436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e438:	61bb      	str	r3, [r7, #24]
 800e43a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e43c:	6979      	ldr	r1, [r7, #20]
 800e43e:	69ba      	ldr	r2, [r7, #24]
 800e440:	e841 2300 	strex	r3, r2, [r1]
 800e444:	613b      	str	r3, [r7, #16]
   return(result);
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1e6      	bne.n	800e41a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2220      	movs	r2, #32
 800e450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2200      	movs	r2, #0
 800e458:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e460:	bf00      	nop
 800e462:	3754      	adds	r7, #84	; 0x54
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	effffffe 	.word	0xeffffffe

0800e470 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b090      	sub	sp, #64	; 0x40
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e47c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	69db      	ldr	r3, [r3, #28]
 800e482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e486:	d037      	beq.n	800e4f8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e48a:	2200      	movs	r2, #0
 800e48c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	3308      	adds	r3, #8
 800e496:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49a:	e853 3f00 	ldrex	r3, [r3]
 800e49e:	623b      	str	r3, [r7, #32]
   return(result);
 800e4a0:	6a3b      	ldr	r3, [r7, #32]
 800e4a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e4a6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e4a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	3308      	adds	r3, #8
 800e4ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e4b0:	633a      	str	r2, [r7, #48]	; 0x30
 800e4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e4b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4b8:	e841 2300 	strex	r3, r2, [r1]
 800e4bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1e5      	bne.n	800e490 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	e853 3f00 	ldrex	r3, [r3]
 800e4d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4d8:	637b      	str	r3, [r7, #52]	; 0x34
 800e4da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	461a      	mov	r2, r3
 800e4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4e2:	61fb      	str	r3, [r7, #28]
 800e4e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e6:	69b9      	ldr	r1, [r7, #24]
 800e4e8:	69fa      	ldr	r2, [r7, #28]
 800e4ea:	e841 2300 	strex	r3, r2, [r1]
 800e4ee:	617b      	str	r3, [r7, #20]
   return(result);
 800e4f0:	697b      	ldr	r3, [r7, #20]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d1e6      	bne.n	800e4c4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e4f6:	e004      	b.n	800e502 <UART_DMATransmitCplt+0x92>
    huart->TxCpltCallback(huart);
 800e4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e4fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e500:	4798      	blx	r3
}
 800e502:	bf00      	nop
 800e504:	3740      	adds	r7, #64	; 0x40
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b084      	sub	sp, #16
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e516:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e522:	bf00      	nop
 800e524:	3710      	adds	r7, #16
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b09c      	sub	sp, #112	; 0x70
 800e52e:	af00      	add	r7, sp, #0
 800e530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e536:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	69db      	ldr	r3, [r3, #28]
 800e53c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e540:	d071      	beq.n	800e626 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e544:	2200      	movs	r2, #0
 800e546:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e552:	e853 3f00 	ldrex	r3, [r3]
 800e556:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e55a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e55e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	461a      	mov	r2, r3
 800e566:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e568:	65bb      	str	r3, [r7, #88]	; 0x58
 800e56a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e56c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e56e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e570:	e841 2300 	strex	r3, r2, [r1]
 800e574:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d1e6      	bne.n	800e54a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e57c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	3308      	adds	r3, #8
 800e582:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e586:	e853 3f00 	ldrex	r3, [r3]
 800e58a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e58e:	f023 0301 	bic.w	r3, r3, #1
 800e592:	667b      	str	r3, [r7, #100]	; 0x64
 800e594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	3308      	adds	r3, #8
 800e59a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e59c:	647a      	str	r2, [r7, #68]	; 0x44
 800e59e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e5a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5a4:	e841 2300 	strex	r3, r2, [r1]
 800e5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1e5      	bne.n	800e57c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	3308      	adds	r3, #8
 800e5b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ba:	e853 3f00 	ldrex	r3, [r3]
 800e5be:	623b      	str	r3, [r7, #32]
   return(result);
 800e5c0:	6a3b      	ldr	r3, [r7, #32]
 800e5c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5c6:	663b      	str	r3, [r7, #96]	; 0x60
 800e5c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	3308      	adds	r3, #8
 800e5ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e5d0:	633a      	str	r2, [r7, #48]	; 0x30
 800e5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e5d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5d8:	e841 2300 	strex	r3, r2, [r1]
 800e5dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d1e5      	bne.n	800e5b0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e5e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5e6:	2220      	movs	r2, #32
 800e5e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d118      	bne.n	800e626 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	e853 3f00 	ldrex	r3, [r3]
 800e600:	60fb      	str	r3, [r7, #12]
   return(result);
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f023 0310 	bic.w	r3, r3, #16
 800e608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e60a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	461a      	mov	r2, r3
 800e610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e612:	61fb      	str	r3, [r7, #28]
 800e614:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e616:	69b9      	ldr	r1, [r7, #24]
 800e618:	69fa      	ldr	r2, [r7, #28]
 800e61a:	e841 2300 	strex	r3, r2, [r1]
 800e61e:	617b      	str	r3, [r7, #20]
   return(result);
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d1e6      	bne.n	800e5f4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e628:	2200      	movs	r2, #0
 800e62a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e62c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e62e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e630:	2b01      	cmp	r3, #1
 800e632:	d109      	bne.n	800e648 <UART_DMAReceiveCplt+0x11e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800e634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e636:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e63a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e63c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800e640:	4611      	mov	r1, r2
 800e642:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e644:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e646:	e004      	b.n	800e652 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800e648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e64a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e64e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e650:	4798      	blx	r3
}
 800e652:	bf00      	nop
 800e654:	3770      	adds	r7, #112	; 0x70
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}

0800e65a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e65a:	b580      	push	{r7, lr}
 800e65c:	b084      	sub	sp, #16
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e666:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2201      	movs	r2, #1
 800e66c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e672:	2b01      	cmp	r3, #1
 800e674:	d10b      	bne.n	800e68e <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800e67c:	68fa      	ldr	r2, [r7, #12]
 800e67e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800e682:	0852      	lsrs	r2, r2, #1
 800e684:	b292      	uxth	r2, r2
 800e686:	4611      	mov	r1, r2
 800e688:	68f8      	ldr	r0, [r7, #12]
 800e68a:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e68c:	e004      	b.n	800e698 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	4798      	blx	r3
}
 800e698:	bf00      	nop
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b086      	sub	sp, #24
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6b4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6bc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e6be:	697b      	ldr	r3, [r7, #20]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	689b      	ldr	r3, [r3, #8]
 800e6c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6c8:	2b80      	cmp	r3, #128	; 0x80
 800e6ca:	d109      	bne.n	800e6e0 <UART_DMAError+0x40>
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	2b21      	cmp	r3, #33	; 0x21
 800e6d0:	d106      	bne.n	800e6e0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e6da:	6978      	ldr	r0, [r7, #20]
 800e6dc:	f7ff fe20 	bl	800e320 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e6ea:	2b40      	cmp	r3, #64	; 0x40
 800e6ec:	d109      	bne.n	800e702 <UART_DMAError+0x62>
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2b22      	cmp	r3, #34	; 0x22
 800e6f2:	d106      	bne.n	800e702 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e6fc:	6978      	ldr	r0, [r7, #20]
 800e6fe:	f7ff fe51 	bl	800e3a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e702:	697b      	ldr	r3, [r7, #20]
 800e704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e708:	f043 0210 	orr.w	r2, r3, #16
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e718:	6978      	ldr	r0, [r7, #20]
 800e71a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e71c:	bf00      	nop
 800e71e:	3718      	adds	r7, #24
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e730:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	2200      	movs	r2, #0
 800e736:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2200      	movs	r2, #0
 800e73e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e748:	68f8      	ldr	r0, [r7, #12]
 800e74a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e74c:	bf00      	nop
 800e74e:	3710      	adds	r7, #16
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e760:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2200      	movs	r2, #0
 800e766:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	220f      	movs	r2, #15
 800e770:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	699a      	ldr	r2, [r3, #24]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f042 0208 	orr.w	r2, r2, #8
 800e780:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2220      	movs	r2, #32
 800e786:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2200      	movs	r2, #0
 800e78e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Call user Abort complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e796:	68f8      	ldr	r0, [r7, #12]
 800e798:	4798      	blx	r3
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e79a:	bf00      	nop
 800e79c:	3710      	adds	r7, #16
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}

0800e7a2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e7a2:	b480      	push	{r7}
 800e7a4:	b08f      	sub	sp, #60	; 0x3c
 800e7a6:	af00      	add	r7, sp, #0
 800e7a8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7b0:	2b21      	cmp	r3, #33	; 0x21
 800e7b2:	d14c      	bne.n	800e84e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d132      	bne.n	800e826 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7c6:	6a3b      	ldr	r3, [r7, #32]
 800e7c8:	e853 3f00 	ldrex	r3, [r3]
 800e7cc:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7d4:	637b      	str	r3, [r7, #52]	; 0x34
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	461a      	mov	r2, r3
 800e7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7e0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7e6:	e841 2300 	strex	r3, r2, [r1]
 800e7ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d1e6      	bne.n	800e7c0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	e853 3f00 	ldrex	r3, [r3]
 800e7fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e806:	633b      	str	r3, [r7, #48]	; 0x30
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	461a      	mov	r2, r3
 800e80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e810:	61bb      	str	r3, [r7, #24]
 800e812:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e814:	6979      	ldr	r1, [r7, #20]
 800e816:	69ba      	ldr	r2, [r7, #24]
 800e818:	e841 2300 	strex	r3, r2, [r1]
 800e81c:	613b      	str	r3, [r7, #16]
   return(result);
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d1e6      	bne.n	800e7f2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800e824:	e013      	b.n	800e84e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e82a:	781a      	ldrb	r2, [r3, #0]
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e836:	1c5a      	adds	r2, r3, #1
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e842:	b29b      	uxth	r3, r3
 800e844:	3b01      	subs	r3, #1
 800e846:	b29a      	uxth	r2, r3
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800e84e:	bf00      	nop
 800e850:	373c      	adds	r7, #60	; 0x3c
 800e852:	46bd      	mov	sp, r7
 800e854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e858:	4770      	bx	lr

0800e85a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e85a:	b480      	push	{r7}
 800e85c:	b091      	sub	sp, #68	; 0x44
 800e85e:	af00      	add	r7, sp, #0
 800e860:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e868:	2b21      	cmp	r3, #33	; 0x21
 800e86a:	d151      	bne.n	800e910 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e872:	b29b      	uxth	r3, r3
 800e874:	2b00      	cmp	r3, #0
 800e876:	d132      	bne.n	800e8de <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e880:	e853 3f00 	ldrex	r3, [r3]
 800e884:	623b      	str	r3, [r7, #32]
   return(result);
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e88c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	461a      	mov	r2, r3
 800e894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e896:	633b      	str	r3, [r7, #48]	; 0x30
 800e898:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e89c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e89e:	e841 2300 	strex	r3, r2, [r1]
 800e8a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d1e6      	bne.n	800e878 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b0:	693b      	ldr	r3, [r7, #16]
 800e8b2:	e853 3f00 	ldrex	r3, [r3]
 800e8b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8be:	637b      	str	r3, [r7, #52]	; 0x34
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8c8:	61fb      	str	r3, [r7, #28]
 800e8ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8cc:	69b9      	ldr	r1, [r7, #24]
 800e8ce:	69fa      	ldr	r2, [r7, #28]
 800e8d0:	e841 2300 	strex	r3, r2, [r1]
 800e8d4:	617b      	str	r3, [r7, #20]
   return(result);
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d1e6      	bne.n	800e8aa <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e8dc:	e018      	b.n	800e910 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e6:	881b      	ldrh	r3, [r3, #0]
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e8f2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8f8:	1c9a      	adds	r2, r3, #2
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e904:	b29b      	uxth	r3, r3
 800e906:	3b01      	subs	r3, #1
 800e908:	b29a      	uxth	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800e910:	bf00      	nop
 800e912:	3744      	adds	r7, #68	; 0x44
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr

0800e91c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b091      	sub	sp, #68	; 0x44
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e92a:	2b21      	cmp	r3, #33	; 0x21
 800e92c:	d160      	bne.n	800e9f0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e934:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800e936:	e057      	b.n	800e9e8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e93e:	b29b      	uxth	r3, r3
 800e940:	2b00      	cmp	r3, #0
 800e942:	d133      	bne.n	800e9ac <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	3308      	adds	r3, #8
 800e94a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94e:	e853 3f00 	ldrex	r3, [r3]
 800e952:	623b      	str	r3, [r7, #32]
   return(result);
 800e954:	6a3b      	ldr	r3, [r7, #32]
 800e956:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e95a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	3308      	adds	r3, #8
 800e962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e964:	633a      	str	r2, [r7, #48]	; 0x30
 800e966:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e968:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e96a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e96c:	e841 2300 	strex	r3, r2, [r1]
 800e970:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e974:	2b00      	cmp	r3, #0
 800e976:	d1e5      	bne.n	800e944 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	e853 3f00 	ldrex	r3, [r3]
 800e984:	60fb      	str	r3, [r7, #12]
   return(result);
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e98c:	637b      	str	r3, [r7, #52]	; 0x34
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	461a      	mov	r2, r3
 800e994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e996:	61fb      	str	r3, [r7, #28]
 800e998:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e99a:	69b9      	ldr	r1, [r7, #24]
 800e99c:	69fa      	ldr	r2, [r7, #28]
 800e99e:	e841 2300 	strex	r3, r2, [r1]
 800e9a2:	617b      	str	r3, [r7, #20]
   return(result);
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d1e6      	bne.n	800e978 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800e9aa:	e021      	b.n	800e9f0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	69db      	ldr	r3, [r3, #28]
 800e9b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d013      	beq.n	800e9e2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9be:	781a      	ldrb	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9ca:	1c5a      	adds	r2, r3, #1
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e9d6:	b29b      	uxth	r3, r3
 800e9d8:	3b01      	subs	r3, #1
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800e9e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e9e4:	3b01      	subs	r3, #1
 800e9e6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800e9e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d1a4      	bne.n	800e938 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800e9ee:	e7ff      	b.n	800e9f0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800e9f0:	bf00      	nop
 800e9f2:	3744      	adds	r7, #68	; 0x44
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b091      	sub	sp, #68	; 0x44
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea0a:	2b21      	cmp	r3, #33	; 0x21
 800ea0c:	d165      	bne.n	800eada <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea14:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ea16:	e05c      	b.n	800ead2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d133      	bne.n	800ea8c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	3308      	adds	r3, #8
 800ea2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea2c:	6a3b      	ldr	r3, [r7, #32]
 800ea2e:	e853 3f00 	ldrex	r3, [r3]
 800ea32:	61fb      	str	r3, [r7, #28]
   return(result);
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ea3a:	637b      	str	r3, [r7, #52]	; 0x34
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	3308      	adds	r3, #8
 800ea42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea44:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ea46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea4c:	e841 2300 	strex	r3, r2, [r1]
 800ea50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ea52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d1e5      	bne.n	800ea24 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	e853 3f00 	ldrex	r3, [r3]
 800ea64:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea6c:	633b      	str	r3, [r7, #48]	; 0x30
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	461a      	mov	r2, r3
 800ea74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea76:	61bb      	str	r3, [r7, #24]
 800ea78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea7a:	6979      	ldr	r1, [r7, #20]
 800ea7c:	69ba      	ldr	r2, [r7, #24]
 800ea7e:	e841 2300 	strex	r3, r2, [r1]
 800ea82:	613b      	str	r3, [r7, #16]
   return(result);
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1e6      	bne.n	800ea58 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ea8a:	e026      	b.n	800eada <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	69db      	ldr	r3, [r3, #28]
 800ea92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d018      	beq.n	800eacc <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea9e:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800eaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa2:	881b      	ldrh	r3, [r3, #0]
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800eaae:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eab4:	1c9a      	adds	r2, r3, #2
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	3b01      	subs	r3, #1
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800eacc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800eace:	3b01      	subs	r3, #1
 800ead0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ead2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d19f      	bne.n	800ea18 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ead8:	e7ff      	b.n	800eada <UART_TxISR_16BIT_FIFOEN+0xde>
 800eada:	bf00      	nop
 800eadc:	3744      	adds	r7, #68	; 0x44
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr

0800eae6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b088      	sub	sp, #32
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	e853 3f00 	ldrex	r3, [r3]
 800eafa:	60bb      	str	r3, [r7, #8]
   return(result);
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb02:	61fb      	str	r3, [r7, #28]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	461a      	mov	r2, r3
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	61bb      	str	r3, [r7, #24]
 800eb0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb10:	6979      	ldr	r1, [r7, #20]
 800eb12:	69ba      	ldr	r2, [r7, #24]
 800eb14:	e841 2300 	strex	r3, r2, [r1]
 800eb18:	613b      	str	r3, [r7, #16]
   return(result);
 800eb1a:	693b      	ldr	r3, [r7, #16]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d1e6      	bne.n	800eaee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2220      	movs	r2, #32
 800eb24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb38:	bf00      	nop
 800eb3a:	3720      	adds	r7, #32
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b09c      	sub	sp, #112	; 0x70
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb4e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb58:	2b22      	cmp	r3, #34	; 0x22
 800eb5a:	f040 80c2 	bne.w	800ece2 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eb68:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800eb6c:	b2d9      	uxtb	r1, r3
 800eb6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800eb72:	b2da      	uxtb	r2, r3
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb78:	400a      	ands	r2, r1
 800eb7a:	b2d2      	uxtb	r2, r2
 800eb7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb82:	1c5a      	adds	r2, r3, #1
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eb8e:	b29b      	uxth	r3, r3
 800eb90:	3b01      	subs	r3, #1
 800eb92:	b29a      	uxth	r2, r3
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	f040 80a5 	bne.w	800ecf2 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebb0:	e853 3f00 	ldrex	r3, [r3]
 800ebb4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ebb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ebb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ebbc:	66bb      	str	r3, [r7, #104]	; 0x68
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ebc6:	65bb      	str	r3, [r7, #88]	; 0x58
 800ebc8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ebcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ebce:	e841 2300 	strex	r3, r2, [r1]
 800ebd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ebd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d1e6      	bne.n	800eba8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	3308      	adds	r3, #8
 800ebe0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebe4:	e853 3f00 	ldrex	r3, [r3]
 800ebe8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ebea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebec:	f023 0301 	bic.w	r3, r3, #1
 800ebf0:	667b      	str	r3, [r7, #100]	; 0x64
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	3308      	adds	r3, #8
 800ebf8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ebfa:	647a      	str	r2, [r7, #68]	; 0x44
 800ebfc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebfe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec02:	e841 2300 	strex	r3, r2, [r1]
 800ec06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d1e5      	bne.n	800ebda <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2220      	movs	r2, #32
 800ec12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	2200      	movs	r2, #0
 800ec1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	4a35      	ldr	r2, [pc, #212]	; (800ecfc <UART_RxISR_8BIT+0x1bc>)
 800ec28:	4293      	cmp	r3, r2
 800ec2a:	d01f      	beq.n	800ec6c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	685b      	ldr	r3, [r3, #4]
 800ec32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d018      	beq.n	800ec6c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec42:	e853 3f00 	ldrex	r3, [r3]
 800ec46:	623b      	str	r3, [r7, #32]
   return(result);
 800ec48:	6a3b      	ldr	r3, [r7, #32]
 800ec4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ec4e:	663b      	str	r3, [r7, #96]	; 0x60
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	461a      	mov	r2, r3
 800ec56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ec58:	633b      	str	r3, [r7, #48]	; 0x30
 800ec5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec60:	e841 2300 	strex	r3, r2, [r1]
 800ec64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1e6      	bne.n	800ec3a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec70:	2b01      	cmp	r3, #1
 800ec72:	d130      	bne.n	800ecd6 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2200      	movs	r2, #0
 800ec78:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec80:	693b      	ldr	r3, [r7, #16]
 800ec82:	e853 3f00 	ldrex	r3, [r3]
 800ec86:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f023 0310 	bic.w	r3, r3, #16
 800ec8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	461a      	mov	r2, r3
 800ec96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec98:	61fb      	str	r3, [r7, #28]
 800ec9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec9c:	69b9      	ldr	r1, [r7, #24]
 800ec9e:	69fa      	ldr	r2, [r7, #28]
 800eca0:	e841 2300 	strex	r3, r2, [r1]
 800eca4:	617b      	str	r3, [r7, #20]
   return(result);
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d1e6      	bne.n	800ec7a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	69db      	ldr	r3, [r3, #28]
 800ecb2:	f003 0310 	and.w	r3, r3, #16
 800ecb6:	2b10      	cmp	r3, #16
 800ecb8:	d103      	bne.n	800ecc2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	2210      	movs	r2, #16
 800ecc0:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800ecce:	4611      	mov	r1, r2
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ecd4:	e00d      	b.n	800ecf2 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	4798      	blx	r3
}
 800ece0:	e007      	b.n	800ecf2 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	699a      	ldr	r2, [r3, #24]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f042 0208 	orr.w	r2, r2, #8
 800ecf0:	619a      	str	r2, [r3, #24]
}
 800ecf2:	bf00      	nop
 800ecf4:	3770      	adds	r7, #112	; 0x70
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	58000c00 	.word	0x58000c00

0800ed00 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b09c      	sub	sp, #112	; 0x70
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed0e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed18:	2b22      	cmp	r3, #34	; 0x22
 800ed1a:	f040 80c2 	bne.w	800eea2 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed2c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ed2e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ed32:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ed36:	4013      	ands	r3, r2
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed3c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed42:	1c9a      	adds	r2, r3, #2
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	3b01      	subs	r3, #1
 800ed52:	b29a      	uxth	r2, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f040 80a5 	bne.w	800eeb2 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed70:	e853 3f00 	ldrex	r3, [r3]
 800ed74:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ed76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ed7c:	667b      	str	r3, [r7, #100]	; 0x64
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	461a      	mov	r2, r3
 800ed84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed86:	657b      	str	r3, [r7, #84]	; 0x54
 800ed88:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ed8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ed8e:	e841 2300 	strex	r3, r2, [r1]
 800ed92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ed94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d1e6      	bne.n	800ed68 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	3308      	adds	r3, #8
 800eda0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eda4:	e853 3f00 	ldrex	r3, [r3]
 800eda8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800edaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edac:	f023 0301 	bic.w	r3, r3, #1
 800edb0:	663b      	str	r3, [r7, #96]	; 0x60
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	3308      	adds	r3, #8
 800edb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800edba:	643a      	str	r2, [r7, #64]	; 0x40
 800edbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edbe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800edc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800edc2:	e841 2300 	strex	r3, r2, [r1]
 800edc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800edc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d1e5      	bne.n	800ed9a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	2220      	movs	r2, #32
 800edd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2200      	movs	r2, #0
 800edda:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2200      	movs	r2, #0
 800ede0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4a35      	ldr	r2, [pc, #212]	; (800eebc <UART_RxISR_16BIT+0x1bc>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d01f      	beq.n	800ee2c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	685b      	ldr	r3, [r3, #4]
 800edf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d018      	beq.n	800ee2c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee00:	6a3b      	ldr	r3, [r7, #32]
 800ee02:	e853 3f00 	ldrex	r3, [r3]
 800ee06:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ee0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	461a      	mov	r2, r3
 800ee16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee1a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee20:	e841 2300 	strex	r3, r2, [r1]
 800ee24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1e6      	bne.n	800edfa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d130      	bne.n	800ee96 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	e853 3f00 	ldrex	r3, [r3]
 800ee46:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	f023 0310 	bic.w	r3, r3, #16
 800ee4e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	461a      	mov	r2, r3
 800ee56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ee58:	61bb      	str	r3, [r7, #24]
 800ee5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee5c:	6979      	ldr	r1, [r7, #20]
 800ee5e:	69ba      	ldr	r2, [r7, #24]
 800ee60:	e841 2300 	strex	r3, r2, [r1]
 800ee64:	613b      	str	r3, [r7, #16]
   return(result);
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d1e6      	bne.n	800ee3a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	69db      	ldr	r3, [r3, #28]
 800ee72:	f003 0310 	and.w	r3, r3, #16
 800ee76:	2b10      	cmp	r3, #16
 800ee78:	d103      	bne.n	800ee82 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	2210      	movs	r2, #16
 800ee80:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800ee8e:	4611      	mov	r1, r2
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ee94:	e00d      	b.n	800eeb2 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	4798      	blx	r3
}
 800eea0:	e007      	b.n	800eeb2 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	699a      	ldr	r2, [r3, #24]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f042 0208 	orr.w	r2, r2, #8
 800eeb0:	619a      	str	r2, [r3, #24]
}
 800eeb2:	bf00      	nop
 800eeb4:	3770      	adds	r7, #112	; 0x70
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	58000c00 	.word	0x58000c00

0800eec0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b0ac      	sub	sp, #176	; 0xb0
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eece:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	69db      	ldr	r3, [r3, #28]
 800eed8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eef6:	2b22      	cmp	r3, #34	; 0x22
 800eef8:	f040 8186 	bne.w	800f208 <UART_RxISR_8BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ef02:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ef06:	e129      	b.n	800f15c <UART_RxISR_8BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef0e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ef12:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ef16:	b2d9      	uxtb	r1, r3
 800ef18:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800ef1c:	b2da      	uxtb	r2, r3
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef22:	400a      	ands	r2, r1
 800ef24:	b2d2      	uxtb	r2, r2
 800ef26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef2c:	1c5a      	adds	r2, r3, #1
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ef38:	b29b      	uxth	r3, r3
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	b29a      	uxth	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	69db      	ldr	r3, [r3, #28]
 800ef4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ef4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef52:	f003 0307 	and.w	r3, r3, #7
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d055      	beq.n	800f006 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ef5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef5e:	f003 0301 	and.w	r3, r3, #1
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d011      	beq.n	800ef8a <UART_RxISR_8BIT_FIFOEN+0xca>
 800ef66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ef6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d00b      	beq.n	800ef8a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	2201      	movs	r2, #1
 800ef78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef80:	f043 0201 	orr.w	r2, r3, #1
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ef8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ef8e:	f003 0302 	and.w	r3, r3, #2
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d011      	beq.n	800efba <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ef96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ef9a:	f003 0301 	and.w	r3, r3, #1
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d00b      	beq.n	800efba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2202      	movs	r2, #2
 800efa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efb0:	f043 0204 	orr.w	r2, r3, #4
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800efba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800efbe:	f003 0304 	and.w	r3, r3, #4
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d011      	beq.n	800efea <UART_RxISR_8BIT_FIFOEN+0x12a>
 800efc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800efca:	f003 0301 	and.w	r3, r3, #1
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d00b      	beq.n	800efea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2204      	movs	r2, #4
 800efd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efe0:	f043 0202 	orr.w	r2, r3, #2
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d008      	beq.n	800f006 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2200      	movs	r2, #0
 800f002:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f00c:	b29b      	uxth	r3, r3
 800f00e:	2b00      	cmp	r3, #0
 800f010:	f040 80a4 	bne.w	800f15c <UART_RxISR_8BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f01a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f01c:	e853 3f00 	ldrex	r3, [r3]
 800f020:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800f022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f024:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f028:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	461a      	mov	r2, r3
 800f032:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f036:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f038:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f03a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800f03c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f03e:	e841 2300 	strex	r3, r2, [r1]
 800f042:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800f044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1e4      	bne.n	800f014 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	3308      	adds	r3, #8
 800f050:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f052:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f054:	e853 3f00 	ldrex	r3, [r3]
 800f058:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800f05a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f05c:	4b70      	ldr	r3, [pc, #448]	; (800f220 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800f05e:	4013      	ands	r3, r2
 800f060:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	3308      	adds	r3, #8
 800f06a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f06e:	66ba      	str	r2, [r7, #104]	; 0x68
 800f070:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f072:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f074:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f076:	e841 2300 	strex	r3, r2, [r1]
 800f07a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f07c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d1e3      	bne.n	800f04a <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2220      	movs	r2, #32
 800f086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2200      	movs	r2, #0
 800f08e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2200      	movs	r2, #0
 800f094:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	4a62      	ldr	r2, [pc, #392]	; (800f224 <UART_RxISR_8BIT_FIFOEN+0x364>)
 800f09c:	4293      	cmp	r3, r2
 800f09e:	d021      	beq.n	800f0e4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d01a      	beq.n	800f0e4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0b6:	e853 3f00 	ldrex	r3, [r3]
 800f0ba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f0bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f0c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f0d0:	657b      	str	r3, [r7, #84]	; 0x54
 800f0d2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0d4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f0d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f0d8:	e841 2300 	strex	r3, r2, [r1]
 800f0dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f0de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d1e4      	bne.n	800f0ae <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0e8:	2b01      	cmp	r3, #1
 800f0ea:	d132      	bne.n	800f152 <UART_RxISR_8BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0fa:	e853 3f00 	ldrex	r3, [r3]
 800f0fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f102:	f023 0310 	bic.w	r3, r3, #16
 800f106:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	461a      	mov	r2, r3
 800f110:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f114:	643b      	str	r3, [r7, #64]	; 0x40
 800f116:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f118:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f11a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f11c:	e841 2300 	strex	r3, r2, [r1]
 800f120:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f124:	2b00      	cmp	r3, #0
 800f126:	d1e4      	bne.n	800f0f2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	69db      	ldr	r3, [r3, #28]
 800f12e:	f003 0310 	and.w	r3, r3, #16
 800f132:	2b10      	cmp	r3, #16
 800f134:	d103      	bne.n	800f13e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	2210      	movs	r2, #16
 800f13c:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f144:	687a      	ldr	r2, [r7, #4]
 800f146:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800f14a:	4611      	mov	r1, r2
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	4798      	blx	r3
 800f150:	e004      	b.n	800f15c <UART_RxISR_8BIT_FIFOEN+0x29c>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f15c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800f160:	2b00      	cmp	r3, #0
 800f162:	d006      	beq.n	800f172 <UART_RxISR_8BIT_FIFOEN+0x2b2>
 800f164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f168:	f003 0320 	and.w	r3, r3, #32
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	f47f aecb 	bne.w	800ef08 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f178:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f17c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800f180:	2b00      	cmp	r3, #0
 800f182:	d049      	beq.n	800f218 <UART_RxISR_8BIT_FIFOEN+0x358>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f18a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800f18e:	429a      	cmp	r2, r3
 800f190:	d242      	bcs.n	800f218 <UART_RxISR_8BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	3308      	adds	r3, #8
 800f198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f19a:	6a3b      	ldr	r3, [r7, #32]
 800f19c:	e853 3f00 	ldrex	r3, [r3]
 800f1a0:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1a2:	69fb      	ldr	r3, [r7, #28]
 800f1a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f1a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	3308      	adds	r3, #8
 800f1b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f1b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f1b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f1bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1be:	e841 2300 	strex	r3, r2, [r1]
 800f1c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d1e3      	bne.n	800f192 <UART_RxISR_8BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	4a16      	ldr	r2, [pc, #88]	; (800f228 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800f1ce:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	e853 3f00 	ldrex	r3, [r3]
 800f1dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	f043 0320 	orr.w	r3, r3, #32
 800f1e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	461a      	mov	r2, r3
 800f1ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f1f2:	61bb      	str	r3, [r7, #24]
 800f1f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1f6:	6979      	ldr	r1, [r7, #20]
 800f1f8:	69ba      	ldr	r2, [r7, #24]
 800f1fa:	e841 2300 	strex	r3, r2, [r1]
 800f1fe:	613b      	str	r3, [r7, #16]
   return(result);
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d1e4      	bne.n	800f1d0 <UART_RxISR_8BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f206:	e007      	b.n	800f218 <UART_RxISR_8BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	699a      	ldr	r2, [r3, #24]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f042 0208 	orr.w	r2, r2, #8
 800f216:	619a      	str	r2, [r3, #24]
}
 800f218:	bf00      	nop
 800f21a:	37b0      	adds	r7, #176	; 0xb0
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd80      	pop	{r7, pc}
 800f220:	effffffe 	.word	0xeffffffe
 800f224:	58000c00 	.word	0x58000c00
 800f228:	0800eb41 	.word	0x0800eb41

0800f22c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b0ae      	sub	sp, #184	; 0xb8
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f23a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	69db      	ldr	r3, [r3, #28]
 800f244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	689b      	ldr	r3, [r3, #8]
 800f258:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f262:	2b22      	cmp	r3, #34	; 0x22
 800f264:	f040 818a 	bne.w	800f57c <UART_RxISR_16BIT_FIFOEN+0x350>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f26e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f272:	e12d      	b.n	800f4d0 <UART_RxISR_16BIT_FIFOEN+0x2a4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f27a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f286:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800f28a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800f28e:	4013      	ands	r3, r2
 800f290:	b29a      	uxth	r2, r3
 800f292:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f296:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f29c:	1c9a      	adds	r2, r3, #2
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	3b01      	subs	r3, #1
 800f2ac:	b29a      	uxth	r2, r3
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	69db      	ldr	r3, [r3, #28]
 800f2ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f2be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f2c2:	f003 0307 	and.w	r3, r3, #7
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d055      	beq.n	800f376 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f2ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f2ce:	f003 0301 	and.w	r3, r3, #1
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d011      	beq.n	800f2fa <UART_RxISR_16BIT_FIFOEN+0xce>
 800f2d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f2da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d00b      	beq.n	800f2fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f2f0:	f043 0201 	orr.w	r2, r3, #1
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f2fe:	f003 0302 	and.w	r3, r3, #2
 800f302:	2b00      	cmp	r3, #0
 800f304:	d011      	beq.n	800f32a <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f306:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f30a:	f003 0301 	and.w	r3, r3, #1
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00b      	beq.n	800f32a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	2202      	movs	r2, #2
 800f318:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f320:	f043 0204 	orr.w	r2, r3, #4
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f32a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f32e:	f003 0304 	and.w	r3, r3, #4
 800f332:	2b00      	cmp	r3, #0
 800f334:	d011      	beq.n	800f35a <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f336:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f33a:	f003 0301 	and.w	r3, r3, #1
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00b      	beq.n	800f35a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	2204      	movs	r2, #4
 800f348:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f350:	f043 0202 	orr.w	r2, r3, #2
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f360:	2b00      	cmp	r3, #0
 800f362:	d008      	beq.n	800f376 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2200      	movs	r2, #0
 800f372:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	2b00      	cmp	r3, #0
 800f380:	f040 80a6 	bne.w	800f4d0 <UART_RxISR_16BIT_FIFOEN+0x2a4>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f38a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f38c:	e853 3f00 	ldrex	r3, [r3]
 800f390:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f3a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f3aa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f3ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f3b2:	e841 2300 	strex	r3, r2, [r1]
 800f3b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f3b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d1e2      	bne.n	800f384 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	3308      	adds	r3, #8
 800f3c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f3c8:	e853 3f00 	ldrex	r3, [r3]
 800f3cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f3ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3d0:	4b70      	ldr	r3, [pc, #448]	; (800f594 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800f3d2:	4013      	ands	r3, r2
 800f3d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	3308      	adds	r3, #8
 800f3de:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f3e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f3e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f3e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f3ea:	e841 2300 	strex	r3, r2, [r1]
 800f3ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f3f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d1e3      	bne.n	800f3be <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2220      	movs	r2, #32
 800f3fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2200      	movs	r2, #0
 800f402:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	4a62      	ldr	r2, [pc, #392]	; (800f598 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800f410:	4293      	cmp	r3, r2
 800f412:	d021      	beq.n	800f458 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d01a      	beq.n	800f458 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f42a:	e853 3f00 	ldrex	r3, [r3]
 800f42e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f432:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f436:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	461a      	mov	r2, r3
 800f440:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f444:	65bb      	str	r3, [r7, #88]	; 0x58
 800f446:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f448:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f44a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f44c:	e841 2300 	strex	r3, r2, [r1]
 800f450:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f454:	2b00      	cmp	r3, #0
 800f456:	d1e4      	bne.n	800f422 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d132      	bne.n	800f4c6 <UART_RxISR_16BIT_FIFOEN+0x29a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2200      	movs	r2, #0
 800f464:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46e:	e853 3f00 	ldrex	r3, [r3]
 800f472:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f476:	f023 0310 	bic.w	r3, r3, #16
 800f47a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	461a      	mov	r2, r3
 800f484:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f488:	647b      	str	r3, [r7, #68]	; 0x44
 800f48a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f48c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f48e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f490:	e841 2300 	strex	r3, r2, [r1]
 800f494:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d1e4      	bne.n	800f466 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	69db      	ldr	r3, [r3, #28]
 800f4a2:	f003 0310 	and.w	r3, r3, #16
 800f4a6:	2b10      	cmp	r3, #16
 800f4a8:	d103      	bne.n	800f4b2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2210      	movs	r2, #16
 800f4b0:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800f4be:	4611      	mov	r1, r2
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	4798      	blx	r3
 800f4c4:	e004      	b.n	800f4d0 <UART_RxISR_16BIT_FIFOEN+0x2a4>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f4d0:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d006      	beq.n	800f4e6 <UART_RxISR_16BIT_FIFOEN+0x2ba>
 800f4d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f4dc:	f003 0320 	and.w	r3, r3, #32
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f47f aec7 	bne.w	800f274 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f4ec:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f4f0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d049      	beq.n	800f58c <UART_RxISR_16BIT_FIFOEN+0x360>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f4fe:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800f502:	429a      	cmp	r2, r3
 800f504:	d242      	bcs.n	800f58c <UART_RxISR_16BIT_FIFOEN+0x360>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	3308      	adds	r3, #8
 800f50c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f510:	e853 3f00 	ldrex	r3, [r3]
 800f514:	623b      	str	r3, [r7, #32]
   return(result);
 800f516:	6a3b      	ldr	r3, [r7, #32]
 800f518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f51c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	3308      	adds	r3, #8
 800f526:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f52a:	633a      	str	r2, [r7, #48]	; 0x30
 800f52c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f52e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f532:	e841 2300 	strex	r3, r2, [r1]
 800f536:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d1e3      	bne.n	800f506 <UART_RxISR_16BIT_FIFOEN+0x2da>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4a16      	ldr	r2, [pc, #88]	; (800f59c <UART_RxISR_16BIT_FIFOEN+0x370>)
 800f542:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	e853 3f00 	ldrex	r3, [r3]
 800f550:	60fb      	str	r3, [r7, #12]
   return(result);
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	f043 0320 	orr.w	r3, r3, #32
 800f558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	461a      	mov	r2, r3
 800f562:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f566:	61fb      	str	r3, [r7, #28]
 800f568:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f56a:	69b9      	ldr	r1, [r7, #24]
 800f56c:	69fa      	ldr	r2, [r7, #28]
 800f56e:	e841 2300 	strex	r3, r2, [r1]
 800f572:	617b      	str	r3, [r7, #20]
   return(result);
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d1e4      	bne.n	800f544 <UART_RxISR_16BIT_FIFOEN+0x318>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f57a:	e007      	b.n	800f58c <UART_RxISR_16BIT_FIFOEN+0x360>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	699a      	ldr	r2, [r3, #24]
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f042 0208 	orr.w	r2, r2, #8
 800f58a:	619a      	str	r2, [r3, #24]
}
 800f58c:	bf00      	nop
 800f58e:	37b8      	adds	r7, #184	; 0xb8
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}
 800f594:	effffffe 	.word	0xeffffffe
 800f598:	58000c00 	.word	0x58000c00
 800f59c:	0800ed01 	.word	0x0800ed01

0800f5a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b083      	sub	sp, #12
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f5a8:	bf00      	nop
 800f5aa:	370c      	adds	r7, #12
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f5b4:	b480      	push	{r7}
 800f5b6:	b083      	sub	sp, #12
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f5bc:	bf00      	nop
 800f5be:	370c      	adds	r7, #12
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b083      	sub	sp, #12
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f5d0:	bf00      	nop
 800f5d2:	370c      	adds	r7, #12
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5da:	4770      	bx	lr

0800f5dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b085      	sub	sp, #20
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d101      	bne.n	800f5f2 <HAL_UARTEx_DisableFifoMode+0x16>
 800f5ee:	2302      	movs	r3, #2
 800f5f0:	e027      	b.n	800f642 <HAL_UARTEx_DisableFifoMode+0x66>
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	2201      	movs	r2, #1
 800f5f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2224      	movs	r2, #36	; 0x24
 800f5fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	681a      	ldr	r2, [r3, #0]
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	f022 0201 	bic.w	r2, r2, #1
 800f618:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f620:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2200      	movs	r2, #0
 800f626:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	68fa      	ldr	r2, [r7, #12]
 800f62e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2220      	movs	r2, #32
 800f634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2200      	movs	r2, #0
 800f63c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f640:	2300      	movs	r3, #0
}
 800f642:	4618      	mov	r0, r3
 800f644:	3714      	adds	r7, #20
 800f646:	46bd      	mov	sp, r7
 800f648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64c:	4770      	bx	lr

0800f64e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f64e:	b580      	push	{r7, lr}
 800f650:	b084      	sub	sp, #16
 800f652:	af00      	add	r7, sp, #0
 800f654:	6078      	str	r0, [r7, #4]
 800f656:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f65e:	2b01      	cmp	r3, #1
 800f660:	d101      	bne.n	800f666 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f662:	2302      	movs	r3, #2
 800f664:	e02d      	b.n	800f6c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2201      	movs	r2, #1
 800f66a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2224      	movs	r2, #36	; 0x24
 800f672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	f022 0201 	bic.w	r2, r2, #1
 800f68c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	689b      	ldr	r3, [r3, #8]
 800f694:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	683a      	ldr	r2, [r7, #0]
 800f69e:	430a      	orrs	r2, r1
 800f6a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 f8a4 	bl	800f7f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	68fa      	ldr	r2, [r7, #12]
 800f6ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2220      	movs	r2, #32
 800f6b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f6c0:	2300      	movs	r3, #0
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3710      	adds	r7, #16
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}

0800f6ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b084      	sub	sp, #16
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
 800f6d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d101      	bne.n	800f6e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f6de:	2302      	movs	r3, #2
 800f6e0:	e02d      	b.n	800f73e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2201      	movs	r2, #1
 800f6e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2224      	movs	r2, #36	; 0x24
 800f6ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	f022 0201 	bic.w	r2, r2, #1
 800f708:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	689b      	ldr	r3, [r3, #8]
 800f710:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	683a      	ldr	r2, [r7, #0]
 800f71a:	430a      	orrs	r2, r1
 800f71c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f000 f866 	bl	800f7f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	68fa      	ldr	r2, [r7, #12]
 800f72a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2220      	movs	r2, #32
 800f730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2200      	movs	r2, #0
 800f738:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f73c:	2300      	movs	r3, #0
}
 800f73e:	4618      	mov	r0, r3
 800f740:	3710      	adds	r7, #16
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}

0800f746 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f746:	b580      	push	{r7, lr}
 800f748:	b08c      	sub	sp, #48	; 0x30
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	60f8      	str	r0, [r7, #12]
 800f74e:	60b9      	str	r1, [r7, #8]
 800f750:	4613      	mov	r3, r2
 800f752:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f75a:	2b20      	cmp	r3, #32
 800f75c:	d142      	bne.n	800f7e4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d002      	beq.n	800f76a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800f764:	88fb      	ldrh	r3, [r7, #6]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d101      	bne.n	800f76e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800f76a:	2301      	movs	r3, #1
 800f76c:	e03b      	b.n	800f7e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2201      	movs	r2, #1
 800f772:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2200      	movs	r2, #0
 800f778:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800f77a:	88fb      	ldrh	r3, [r7, #6]
 800f77c:	461a      	mov	r2, r3
 800f77e:	68b9      	ldr	r1, [r7, #8]
 800f780:	68f8      	ldr	r0, [r7, #12]
 800f782:	f7fe fd27 	bl	800e1d4 <UART_Start_Receive_DMA>
 800f786:	4603      	mov	r3, r0
 800f788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800f78c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f790:	2b00      	cmp	r3, #0
 800f792:	d124      	bne.n	800f7de <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d11d      	bne.n	800f7d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	2210      	movs	r2, #16
 800f7a2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7aa:	69bb      	ldr	r3, [r7, #24]
 800f7ac:	e853 3f00 	ldrex	r3, [r3]
 800f7b0:	617b      	str	r3, [r7, #20]
   return(result);
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	f043 0310 	orr.w	r3, r3, #16
 800f7b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	461a      	mov	r2, r3
 800f7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7c2:	627b      	str	r3, [r7, #36]	; 0x24
 800f7c4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7c6:	6a39      	ldr	r1, [r7, #32]
 800f7c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7ca:	e841 2300 	strex	r3, r2, [r1]
 800f7ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800f7d0:	69fb      	ldr	r3, [r7, #28]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d1e6      	bne.n	800f7a4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800f7d6:	e002      	b.n	800f7de <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800f7d8:	2301      	movs	r3, #1
 800f7da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800f7de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f7e2:	e000      	b.n	800f7e6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800f7e4:	2302      	movs	r3, #2
  }
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3730      	adds	r7, #48	; 0x30
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
	...

0800f7f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f7f0:	b480      	push	{r7}
 800f7f2:	b085      	sub	sp, #20
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d108      	bne.n	800f812 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2201      	movs	r2, #1
 800f804:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2201      	movs	r2, #1
 800f80c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f810:	e031      	b.n	800f876 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f812:	2310      	movs	r3, #16
 800f814:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f816:	2310      	movs	r3, #16
 800f818:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	0e5b      	lsrs	r3, r3, #25
 800f822:	b2db      	uxtb	r3, r3
 800f824:	f003 0307 	and.w	r3, r3, #7
 800f828:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	689b      	ldr	r3, [r3, #8]
 800f830:	0f5b      	lsrs	r3, r3, #29
 800f832:	b2db      	uxtb	r3, r3
 800f834:	f003 0307 	and.w	r3, r3, #7
 800f838:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f83a:	7bbb      	ldrb	r3, [r7, #14]
 800f83c:	7b3a      	ldrb	r2, [r7, #12]
 800f83e:	4911      	ldr	r1, [pc, #68]	; (800f884 <UARTEx_SetNbDataToProcess+0x94>)
 800f840:	5c8a      	ldrb	r2, [r1, r2]
 800f842:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f846:	7b3a      	ldrb	r2, [r7, #12]
 800f848:	490f      	ldr	r1, [pc, #60]	; (800f888 <UARTEx_SetNbDataToProcess+0x98>)
 800f84a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f84c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f850:	b29a      	uxth	r2, r3
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f858:	7bfb      	ldrb	r3, [r7, #15]
 800f85a:	7b7a      	ldrb	r2, [r7, #13]
 800f85c:	4909      	ldr	r1, [pc, #36]	; (800f884 <UARTEx_SetNbDataToProcess+0x94>)
 800f85e:	5c8a      	ldrb	r2, [r1, r2]
 800f860:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f864:	7b7a      	ldrb	r2, [r7, #13]
 800f866:	4908      	ldr	r1, [pc, #32]	; (800f888 <UARTEx_SetNbDataToProcess+0x98>)
 800f868:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f86a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f86e:	b29a      	uxth	r2, r3
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f876:	bf00      	nop
 800f878:	3714      	adds	r7, #20
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr
 800f882:	bf00      	nop
 800f884:	080253c8 	.word	0x080253c8
 800f888:	080253d0 	.word	0x080253d0

0800f88c <__NVIC_SetPriority>:
{
 800f88c:	b480      	push	{r7}
 800f88e:	b083      	sub	sp, #12
 800f890:	af00      	add	r7, sp, #0
 800f892:	4603      	mov	r3, r0
 800f894:	6039      	str	r1, [r7, #0]
 800f896:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800f898:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	db0a      	blt.n	800f8b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f8a0:	683b      	ldr	r3, [r7, #0]
 800f8a2:	b2da      	uxtb	r2, r3
 800f8a4:	490c      	ldr	r1, [pc, #48]	; (800f8d8 <__NVIC_SetPriority+0x4c>)
 800f8a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f8aa:	0112      	lsls	r2, r2, #4
 800f8ac:	b2d2      	uxtb	r2, r2
 800f8ae:	440b      	add	r3, r1
 800f8b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f8b4:	e00a      	b.n	800f8cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	b2da      	uxtb	r2, r3
 800f8ba:	4908      	ldr	r1, [pc, #32]	; (800f8dc <__NVIC_SetPriority+0x50>)
 800f8bc:	88fb      	ldrh	r3, [r7, #6]
 800f8be:	f003 030f 	and.w	r3, r3, #15
 800f8c2:	3b04      	subs	r3, #4
 800f8c4:	0112      	lsls	r2, r2, #4
 800f8c6:	b2d2      	uxtb	r2, r2
 800f8c8:	440b      	add	r3, r1
 800f8ca:	761a      	strb	r2, [r3, #24]
}
 800f8cc:	bf00      	nop
 800f8ce:	370c      	adds	r7, #12
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr
 800f8d8:	e000e100 	.word	0xe000e100
 800f8dc:	e000ed00 	.word	0xe000ed00

0800f8e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f8e4:	4b05      	ldr	r3, [pc, #20]	; (800f8fc <SysTick_Handler+0x1c>)
 800f8e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f8e8:	f002 fcae 	bl	8012248 <xTaskGetSchedulerState>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	2b01      	cmp	r3, #1
 800f8f0:	d001      	beq.n	800f8f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f8f2:	f003 fed1 	bl	8013698 <xPortSysTickHandler>
  }
}
 800f8f6:	bf00      	nop
 800f8f8:	bd80      	pop	{r7, pc}
 800f8fa:	bf00      	nop
 800f8fc:	e000e010 	.word	0xe000e010

0800f900 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f900:	b580      	push	{r7, lr}
 800f902:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f904:	2100      	movs	r1, #0
 800f906:	f06f 0004 	mvn.w	r0, #4
 800f90a:	f7ff ffbf 	bl	800f88c <__NVIC_SetPriority>
#endif
}
 800f90e:	bf00      	nop
 800f910:	bd80      	pop	{r7, pc}
	...

0800f914 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f914:	b480      	push	{r7}
 800f916:	b083      	sub	sp, #12
 800f918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f91a:	f3ef 8305 	mrs	r3, IPSR
 800f91e:	603b      	str	r3, [r7, #0]
  return(result);
 800f920:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f922:	2b00      	cmp	r3, #0
 800f924:	d003      	beq.n	800f92e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f926:	f06f 0305 	mvn.w	r3, #5
 800f92a:	607b      	str	r3, [r7, #4]
 800f92c:	e00c      	b.n	800f948 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f92e:	4b0a      	ldr	r3, [pc, #40]	; (800f958 <osKernelInitialize+0x44>)
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d105      	bne.n	800f942 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f936:	4b08      	ldr	r3, [pc, #32]	; (800f958 <osKernelInitialize+0x44>)
 800f938:	2201      	movs	r2, #1
 800f93a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f93c:	2300      	movs	r3, #0
 800f93e:	607b      	str	r3, [r7, #4]
 800f940:	e002      	b.n	800f948 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f942:	f04f 33ff 	mov.w	r3, #4294967295
 800f946:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f948:	687b      	ldr	r3, [r7, #4]
}
 800f94a:	4618      	mov	r0, r3
 800f94c:	370c      	adds	r7, #12
 800f94e:	46bd      	mov	sp, r7
 800f950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f954:	4770      	bx	lr
 800f956:	bf00      	nop
 800f958:	24000c7c 	.word	0x24000c7c

0800f95c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b082      	sub	sp, #8
 800f960:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800f962:	f002 fc71 	bl	8012248 <xTaskGetSchedulerState>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d004      	beq.n	800f976 <osKernelGetState+0x1a>
 800f96c:	2b02      	cmp	r3, #2
 800f96e:	d105      	bne.n	800f97c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800f970:	2302      	movs	r3, #2
 800f972:	607b      	str	r3, [r7, #4]
      break;
 800f974:	e00c      	b.n	800f990 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800f976:	2303      	movs	r3, #3
 800f978:	607b      	str	r3, [r7, #4]
      break;
 800f97a:	e009      	b.n	800f990 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800f97c:	4b07      	ldr	r3, [pc, #28]	; (800f99c <osKernelGetState+0x40>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	2b01      	cmp	r3, #1
 800f982:	d102      	bne.n	800f98a <osKernelGetState+0x2e>
        state = osKernelReady;
 800f984:	2301      	movs	r3, #1
 800f986:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800f988:	e001      	b.n	800f98e <osKernelGetState+0x32>
        state = osKernelInactive;
 800f98a:	2300      	movs	r3, #0
 800f98c:	607b      	str	r3, [r7, #4]
      break;
 800f98e:	bf00      	nop
  }

  return (state);
 800f990:	687b      	ldr	r3, [r7, #4]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3708      	adds	r7, #8
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	24000c7c 	.word	0x24000c7c

0800f9a0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b082      	sub	sp, #8
 800f9a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9a6:	f3ef 8305 	mrs	r3, IPSR
 800f9aa:	603b      	str	r3, [r7, #0]
  return(result);
 800f9ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d003      	beq.n	800f9ba <osKernelStart+0x1a>
    stat = osErrorISR;
 800f9b2:	f06f 0305 	mvn.w	r3, #5
 800f9b6:	607b      	str	r3, [r7, #4]
 800f9b8:	e010      	b.n	800f9dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f9ba:	4b0b      	ldr	r3, [pc, #44]	; (800f9e8 <osKernelStart+0x48>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	2b01      	cmp	r3, #1
 800f9c0:	d109      	bne.n	800f9d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f9c2:	f7ff ff9d 	bl	800f900 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f9c6:	4b08      	ldr	r3, [pc, #32]	; (800f9e8 <osKernelStart+0x48>)
 800f9c8:	2202      	movs	r2, #2
 800f9ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f9cc:	f001 ffbe 	bl	801194c <vTaskStartScheduler>
      stat = osOK;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	607b      	str	r3, [r7, #4]
 800f9d4:	e002      	b.n	800f9dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f9d6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f9dc:	687b      	ldr	r3, [r7, #4]
}
 800f9de:	4618      	mov	r0, r3
 800f9e0:	3708      	adds	r7, #8
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	24000c7c 	.word	0x24000c7c

0800f9ec <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9f2:	f3ef 8305 	mrs	r3, IPSR
 800f9f6:	603b      	str	r3, [r7, #0]
  return(result);
 800f9f8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d003      	beq.n	800fa06 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800f9fe:	f002 f8d1 	bl	8011ba4 <xTaskGetTickCountFromISR>
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	e002      	b.n	800fa0c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800fa06:	f002 f8bd 	bl	8011b84 <xTaskGetTickCount>
 800fa0a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800fa0c:	687b      	ldr	r3, [r7, #4]
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b08e      	sub	sp, #56	; 0x38
 800fa1a:	af04      	add	r7, sp, #16
 800fa1c:	60f8      	str	r0, [r7, #12]
 800fa1e:	60b9      	str	r1, [r7, #8]
 800fa20:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fa22:	2300      	movs	r3, #0
 800fa24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa26:	f3ef 8305 	mrs	r3, IPSR
 800fa2a:	617b      	str	r3, [r7, #20]
  return(result);
 800fa2c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d17e      	bne.n	800fb30 <osThreadNew+0x11a>
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d07b      	beq.n	800fb30 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fa38:	2380      	movs	r3, #128	; 0x80
 800fa3a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fa3c:	2318      	movs	r3, #24
 800fa3e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fa40:	2300      	movs	r3, #0
 800fa42:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800fa44:	f04f 33ff 	mov.w	r3, #4294967295
 800fa48:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d045      	beq.n	800fadc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d002      	beq.n	800fa5e <osThreadNew+0x48>
        name = attr->name;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	699b      	ldr	r3, [r3, #24]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d002      	beq.n	800fa6c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	699b      	ldr	r3, [r3, #24]
 800fa6a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fa6c:	69fb      	ldr	r3, [r7, #28]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d008      	beq.n	800fa84 <osThreadNew+0x6e>
 800fa72:	69fb      	ldr	r3, [r7, #28]
 800fa74:	2b38      	cmp	r3, #56	; 0x38
 800fa76:	d805      	bhi.n	800fa84 <osThreadNew+0x6e>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	f003 0301 	and.w	r3, r3, #1
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d001      	beq.n	800fa88 <osThreadNew+0x72>
        return (NULL);
 800fa84:	2300      	movs	r3, #0
 800fa86:	e054      	b.n	800fb32 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	695b      	ldr	r3, [r3, #20]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d003      	beq.n	800fa98 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	695b      	ldr	r3, [r3, #20]
 800fa94:	089b      	lsrs	r3, r3, #2
 800fa96:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	689b      	ldr	r3, [r3, #8]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d00e      	beq.n	800fabe <osThreadNew+0xa8>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	68db      	ldr	r3, [r3, #12]
 800faa4:	2ba7      	cmp	r3, #167	; 0xa7
 800faa6:	d90a      	bls.n	800fabe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800faac:	2b00      	cmp	r3, #0
 800faae:	d006      	beq.n	800fabe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	695b      	ldr	r3, [r3, #20]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d002      	beq.n	800fabe <osThreadNew+0xa8>
        mem = 1;
 800fab8:	2301      	movs	r3, #1
 800faba:	61bb      	str	r3, [r7, #24]
 800fabc:	e010      	b.n	800fae0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	689b      	ldr	r3, [r3, #8]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d10c      	bne.n	800fae0 <osThreadNew+0xca>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	68db      	ldr	r3, [r3, #12]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d108      	bne.n	800fae0 <osThreadNew+0xca>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	691b      	ldr	r3, [r3, #16]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d104      	bne.n	800fae0 <osThreadNew+0xca>
          mem = 0;
 800fad6:	2300      	movs	r3, #0
 800fad8:	61bb      	str	r3, [r7, #24]
 800fada:	e001      	b.n	800fae0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fadc:	2300      	movs	r3, #0
 800fade:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fae0:	69bb      	ldr	r3, [r7, #24]
 800fae2:	2b01      	cmp	r3, #1
 800fae4:	d110      	bne.n	800fb08 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800faee:	9202      	str	r2, [sp, #8]
 800faf0:	9301      	str	r3, [sp, #4]
 800faf2:	69fb      	ldr	r3, [r7, #28]
 800faf4:	9300      	str	r3, [sp, #0]
 800faf6:	68bb      	ldr	r3, [r7, #8]
 800faf8:	6a3a      	ldr	r2, [r7, #32]
 800fafa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fafc:	68f8      	ldr	r0, [r7, #12]
 800fafe:	f001 fc49 	bl	8011394 <xTaskCreateStatic>
 800fb02:	4603      	mov	r3, r0
 800fb04:	613b      	str	r3, [r7, #16]
 800fb06:	e013      	b.n	800fb30 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fb08:	69bb      	ldr	r3, [r7, #24]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d110      	bne.n	800fb30 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fb0e:	6a3b      	ldr	r3, [r7, #32]
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	f107 0310 	add.w	r3, r7, #16
 800fb16:	9301      	str	r3, [sp, #4]
 800fb18:	69fb      	ldr	r3, [r7, #28]
 800fb1a:	9300      	str	r3, [sp, #0]
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f001 fc94 	bl	801144e <xTaskCreate>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b01      	cmp	r3, #1
 800fb2a:	d001      	beq.n	800fb30 <osThreadNew+0x11a>
            hTask = NULL;
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fb30:	693b      	ldr	r3, [r7, #16]
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3728      	adds	r7, #40	; 0x28
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}

0800fb3a <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800fb3a:	b580      	push	{r7, lr}
 800fb3c:	b082      	sub	sp, #8
 800fb3e:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800fb40:	f002 fb72 	bl	8012228 <xTaskGetCurrentTaskHandle>
 800fb44:	6078      	str	r0, [r7, #4]

  return (id);
 800fb46:	687b      	ldr	r3, [r7, #4]
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3708      	adds	r7, #8
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}

0800fb50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb58:	f3ef 8305 	mrs	r3, IPSR
 800fb5c:	60bb      	str	r3, [r7, #8]
  return(result);
 800fb5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d003      	beq.n	800fb6c <osDelay+0x1c>
    stat = osErrorISR;
 800fb64:	f06f 0305 	mvn.w	r3, #5
 800fb68:	60fb      	str	r3, [r7, #12]
 800fb6a:	e007      	b.n	800fb7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d002      	beq.n	800fb7c <osDelay+0x2c>
      vTaskDelay(ticks);
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f001 feb4 	bl	80118e4 <vTaskDelay>
    }
  }

  return (stat);
 800fb7c:	68fb      	ldr	r3, [r7, #12]
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}

0800fb86 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800fb86:	b580      	push	{r7, lr}
 800fb88:	b086      	sub	sp, #24
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb8e:	f3ef 8305 	mrs	r3, IPSR
 800fb92:	60fb      	str	r3, [r7, #12]
  return(result);
 800fb94:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d003      	beq.n	800fba2 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800fb9a:	f06f 0305 	mvn.w	r3, #5
 800fb9e:	617b      	str	r3, [r7, #20]
 800fba0:	e019      	b.n	800fbd6 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800fba2:	2300      	movs	r3, #0
 800fba4:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800fba6:	f001 ffed 	bl	8011b84 <xTaskGetTickCount>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	1ad3      	subs	r3, r2, r3
 800fbb4:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800fbb6:	693b      	ldr	r3, [r7, #16]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d009      	beq.n	800fbd0 <osDelayUntil+0x4a>
 800fbbc:	693b      	ldr	r3, [r7, #16]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	db06      	blt.n	800fbd0 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800fbc2:	f107 0308 	add.w	r3, r7, #8
 800fbc6:	6939      	ldr	r1, [r7, #16]
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f001 fe0d 	bl	80117e8 <vTaskDelayUntil>
 800fbce:	e002      	b.n	800fbd6 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800fbd0:	f06f 0303 	mvn.w	r3, #3
 800fbd4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800fbd6:	697b      	ldr	r3, [r7, #20]
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3718      	adds	r7, #24
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b084      	sub	sp, #16
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	f003 fb75 	bl	80132d8 <pvTimerGetTimerID>
 800fbee:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d005      	beq.n	800fc02 <TimerCallback+0x22>
    callb->func (callb->arg);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	6852      	ldr	r2, [r2, #4]
 800fbfe:	4610      	mov	r0, r2
 800fc00:	4798      	blx	r3
  }
}
 800fc02:	bf00      	nop
 800fc04:	3710      	adds	r7, #16
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
	...

0800fc0c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b08c      	sub	sp, #48	; 0x30
 800fc10:	af02      	add	r7, sp, #8
 800fc12:	60f8      	str	r0, [r7, #12]
 800fc14:	607a      	str	r2, [r7, #4]
 800fc16:	603b      	str	r3, [r7, #0]
 800fc18:	460b      	mov	r3, r1
 800fc1a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc20:	f3ef 8305 	mrs	r3, IPSR
 800fc24:	613b      	str	r3, [r7, #16]
  return(result);
 800fc26:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d163      	bne.n	800fcf4 <osTimerNew+0xe8>
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d060      	beq.n	800fcf4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800fc32:	2008      	movs	r0, #8
 800fc34:	f003 fdc0 	bl	80137b8 <pvPortMalloc>
 800fc38:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d059      	beq.n	800fcf4 <osTimerNew+0xe8>
      callb->func = func;
 800fc40:	697b      	ldr	r3, [r7, #20]
 800fc42:	68fa      	ldr	r2, [r7, #12]
 800fc44:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800fc4c:	7afb      	ldrb	r3, [r7, #11]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d102      	bne.n	800fc58 <osTimerNew+0x4c>
        reload = pdFALSE;
 800fc52:	2300      	movs	r3, #0
 800fc54:	61fb      	str	r3, [r7, #28]
 800fc56:	e001      	b.n	800fc5c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800fc5c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc60:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800fc62:	2300      	movs	r3, #0
 800fc64:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d01c      	beq.n	800fca6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d002      	beq.n	800fc7a <osTimerNew+0x6e>
          name = attr->name;
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	689b      	ldr	r3, [r3, #8]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d006      	beq.n	800fc90 <osTimerNew+0x84>
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	68db      	ldr	r3, [r3, #12]
 800fc86:	2b2b      	cmp	r3, #43	; 0x2b
 800fc88:	d902      	bls.n	800fc90 <osTimerNew+0x84>
          mem = 1;
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	61bb      	str	r3, [r7, #24]
 800fc8e:	e00c      	b.n	800fcaa <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	689b      	ldr	r3, [r3, #8]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d108      	bne.n	800fcaa <osTimerNew+0x9e>
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d104      	bne.n	800fcaa <osTimerNew+0x9e>
            mem = 0;
 800fca0:	2300      	movs	r3, #0
 800fca2:	61bb      	str	r3, [r7, #24]
 800fca4:	e001      	b.n	800fcaa <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800fca6:	2300      	movs	r3, #0
 800fca8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	2b01      	cmp	r3, #1
 800fcae:	d10c      	bne.n	800fcca <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	9301      	str	r3, [sp, #4]
 800fcb6:	4b12      	ldr	r3, [pc, #72]	; (800fd00 <osTimerNew+0xf4>)
 800fcb8:	9300      	str	r3, [sp, #0]
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	69fa      	ldr	r2, [r7, #28]
 800fcbe:	2101      	movs	r1, #1
 800fcc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcc2:	f002 ff8a 	bl	8012bda <xTimerCreateStatic>
 800fcc6:	6238      	str	r0, [r7, #32]
 800fcc8:	e00b      	b.n	800fce2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800fcca:	69bb      	ldr	r3, [r7, #24]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d108      	bne.n	800fce2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800fcd0:	4b0b      	ldr	r3, [pc, #44]	; (800fd00 <osTimerNew+0xf4>)
 800fcd2:	9300      	str	r3, [sp, #0]
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	69fa      	ldr	r2, [r7, #28]
 800fcd8:	2101      	movs	r1, #1
 800fcda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fcdc:	f002 ff5c 	bl	8012b98 <xTimerCreate>
 800fce0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800fce2:	6a3b      	ldr	r3, [r7, #32]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d105      	bne.n	800fcf4 <osTimerNew+0xe8>
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d002      	beq.n	800fcf4 <osTimerNew+0xe8>
        vPortFree (callb);
 800fcee:	6978      	ldr	r0, [r7, #20]
 800fcf0:	f003 fe2e 	bl	8013950 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800fcf4:	6a3b      	ldr	r3, [r7, #32]
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3728      	adds	r7, #40	; 0x28
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	0800fbe1 	.word	0x0800fbe1

0800fd04 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b08a      	sub	sp, #40	; 0x28
 800fd08:	af02      	add	r7, sp, #8
 800fd0a:	60f8      	str	r0, [r7, #12]
 800fd0c:	60b9      	str	r1, [r7, #8]
 800fd0e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800fd10:	2300      	movs	r3, #0
 800fd12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd14:	f3ef 8305 	mrs	r3, IPSR
 800fd18:	613b      	str	r3, [r7, #16]
  return(result);
 800fd1a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d175      	bne.n	800fe0c <osSemaphoreNew+0x108>
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d072      	beq.n	800fe0c <osSemaphoreNew+0x108>
 800fd26:	68ba      	ldr	r2, [r7, #8]
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d86e      	bhi.n	800fe0c <osSemaphoreNew+0x108>
    mem = -1;
 800fd2e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd32:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d015      	beq.n	800fd66 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	689b      	ldr	r3, [r3, #8]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d006      	beq.n	800fd50 <osSemaphoreNew+0x4c>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	2b4f      	cmp	r3, #79	; 0x4f
 800fd48:	d902      	bls.n	800fd50 <osSemaphoreNew+0x4c>
        mem = 1;
 800fd4a:	2301      	movs	r3, #1
 800fd4c:	61bb      	str	r3, [r7, #24]
 800fd4e:	e00c      	b.n	800fd6a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	689b      	ldr	r3, [r3, #8]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d108      	bne.n	800fd6a <osSemaphoreNew+0x66>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	68db      	ldr	r3, [r3, #12]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d104      	bne.n	800fd6a <osSemaphoreNew+0x66>
          mem = 0;
 800fd60:	2300      	movs	r3, #0
 800fd62:	61bb      	str	r3, [r7, #24]
 800fd64:	e001      	b.n	800fd6a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800fd66:	2300      	movs	r3, #0
 800fd68:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800fd6a:	69bb      	ldr	r3, [r7, #24]
 800fd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd70:	d04c      	beq.n	800fe0c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2b01      	cmp	r3, #1
 800fd76:	d128      	bne.n	800fdca <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800fd78:	69bb      	ldr	r3, [r7, #24]
 800fd7a:	2b01      	cmp	r3, #1
 800fd7c:	d10a      	bne.n	800fd94 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	689b      	ldr	r3, [r3, #8]
 800fd82:	2203      	movs	r2, #3
 800fd84:	9200      	str	r2, [sp, #0]
 800fd86:	2200      	movs	r2, #0
 800fd88:	2100      	movs	r1, #0
 800fd8a:	2001      	movs	r0, #1
 800fd8c:	f000 fb5c 	bl	8010448 <xQueueGenericCreateStatic>
 800fd90:	61f8      	str	r0, [r7, #28]
 800fd92:	e005      	b.n	800fda0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800fd94:	2203      	movs	r2, #3
 800fd96:	2100      	movs	r1, #0
 800fd98:	2001      	movs	r0, #1
 800fd9a:	f000 fbcd 	bl	8010538 <xQueueGenericCreate>
 800fd9e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800fda0:	69fb      	ldr	r3, [r7, #28]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d022      	beq.n	800fdec <osSemaphoreNew+0xe8>
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d01f      	beq.n	800fdec <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fdac:	2300      	movs	r3, #0
 800fdae:	2200      	movs	r2, #0
 800fdb0:	2100      	movs	r1, #0
 800fdb2:	69f8      	ldr	r0, [r7, #28]
 800fdb4:	f000 fc88 	bl	80106c8 <xQueueGenericSend>
 800fdb8:	4603      	mov	r3, r0
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d016      	beq.n	800fdec <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800fdbe:	69f8      	ldr	r0, [r7, #28]
 800fdc0:	f001 f914 	bl	8010fec <vQueueDelete>
            hSemaphore = NULL;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	61fb      	str	r3, [r7, #28]
 800fdc8:	e010      	b.n	800fdec <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800fdca:	69bb      	ldr	r3, [r7, #24]
 800fdcc:	2b01      	cmp	r3, #1
 800fdce:	d108      	bne.n	800fde2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	689b      	ldr	r3, [r3, #8]
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	68b9      	ldr	r1, [r7, #8]
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f000 fc0a 	bl	80105f2 <xQueueCreateCountingSemaphoreStatic>
 800fdde:	61f8      	str	r0, [r7, #28]
 800fde0:	e004      	b.n	800fdec <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800fde2:	68b9      	ldr	r1, [r7, #8]
 800fde4:	68f8      	ldr	r0, [r7, #12]
 800fde6:	f000 fc3b 	bl	8010660 <xQueueCreateCountingSemaphore>
 800fdea:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800fdec:	69fb      	ldr	r3, [r7, #28]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d00c      	beq.n	800fe0c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d003      	beq.n	800fe00 <osSemaphoreNew+0xfc>
          name = attr->name;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	617b      	str	r3, [r7, #20]
 800fdfe:	e001      	b.n	800fe04 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800fe00:	2300      	movs	r3, #0
 800fe02:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800fe04:	6979      	ldr	r1, [r7, #20]
 800fe06:	69f8      	ldr	r0, [r7, #28]
 800fe08:	f001 fa3c 	bl	8011284 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800fe0c:	69fb      	ldr	r3, [r7, #28]
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	3720      	adds	r7, #32
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
	...

0800fe18 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b086      	sub	sp, #24
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fe26:	2300      	movs	r3, #0
 800fe28:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d103      	bne.n	800fe38 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800fe30:	f06f 0303 	mvn.w	r3, #3
 800fe34:	617b      	str	r3, [r7, #20]
 800fe36:	e039      	b.n	800feac <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe38:	f3ef 8305 	mrs	r3, IPSR
 800fe3c:	60fb      	str	r3, [r7, #12]
  return(result);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d022      	beq.n	800fe8a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d003      	beq.n	800fe52 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800fe4a:	f06f 0303 	mvn.w	r3, #3
 800fe4e:	617b      	str	r3, [r7, #20]
 800fe50:	e02c      	b.n	800feac <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800fe52:	2300      	movs	r3, #0
 800fe54:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800fe56:	f107 0308 	add.w	r3, r7, #8
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	2100      	movs	r1, #0
 800fe5e:	6938      	ldr	r0, [r7, #16]
 800fe60:	f001 f844 	bl	8010eec <xQueueReceiveFromISR>
 800fe64:	4603      	mov	r3, r0
 800fe66:	2b01      	cmp	r3, #1
 800fe68:	d003      	beq.n	800fe72 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800fe6a:	f06f 0302 	mvn.w	r3, #2
 800fe6e:	617b      	str	r3, [r7, #20]
 800fe70:	e01c      	b.n	800feac <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d019      	beq.n	800feac <osSemaphoreAcquire+0x94>
 800fe78:	4b0f      	ldr	r3, [pc, #60]	; (800feb8 <osSemaphoreAcquire+0xa0>)
 800fe7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe7e:	601a      	str	r2, [r3, #0]
 800fe80:	f3bf 8f4f 	dsb	sy
 800fe84:	f3bf 8f6f 	isb	sy
 800fe88:	e010      	b.n	800feac <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800fe8a:	6839      	ldr	r1, [r7, #0]
 800fe8c:	6938      	ldr	r0, [r7, #16]
 800fe8e:	f000 ff21 	bl	8010cd4 <xQueueSemaphoreTake>
 800fe92:	4603      	mov	r3, r0
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d009      	beq.n	800feac <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800fe98:	683b      	ldr	r3, [r7, #0]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d003      	beq.n	800fea6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800fe9e:	f06f 0301 	mvn.w	r3, #1
 800fea2:	617b      	str	r3, [r7, #20]
 800fea4:	e002      	b.n	800feac <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800fea6:	f06f 0302 	mvn.w	r3, #2
 800feaa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800feac:	697b      	ldr	r3, [r7, #20]
}
 800feae:	4618      	mov	r0, r3
 800feb0:	3718      	adds	r7, #24
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bd80      	pop	{r7, pc}
 800feb6:	bf00      	nop
 800feb8:	e000ed04 	.word	0xe000ed04

0800febc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800febc:	b580      	push	{r7, lr}
 800febe:	b086      	sub	sp, #24
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fec8:	2300      	movs	r3, #0
 800feca:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d103      	bne.n	800feda <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800fed2:	f06f 0303 	mvn.w	r3, #3
 800fed6:	617b      	str	r3, [r7, #20]
 800fed8:	e02c      	b.n	800ff34 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800feda:	f3ef 8305 	mrs	r3, IPSR
 800fede:	60fb      	str	r3, [r7, #12]
  return(result);
 800fee0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d01a      	beq.n	800ff1c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800fee6:	2300      	movs	r3, #0
 800fee8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800feea:	f107 0308 	add.w	r3, r7, #8
 800feee:	4619      	mov	r1, r3
 800fef0:	6938      	ldr	r0, [r7, #16]
 800fef2:	f000 fd82 	bl	80109fa <xQueueGiveFromISR>
 800fef6:	4603      	mov	r3, r0
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d003      	beq.n	800ff04 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800fefc:	f06f 0302 	mvn.w	r3, #2
 800ff00:	617b      	str	r3, [r7, #20]
 800ff02:	e017      	b.n	800ff34 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ff04:	68bb      	ldr	r3, [r7, #8]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d014      	beq.n	800ff34 <osSemaphoreRelease+0x78>
 800ff0a:	4b0d      	ldr	r3, [pc, #52]	; (800ff40 <osSemaphoreRelease+0x84>)
 800ff0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff10:	601a      	str	r2, [r3, #0]
 800ff12:	f3bf 8f4f 	dsb	sy
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	e00b      	b.n	800ff34 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	2200      	movs	r2, #0
 800ff20:	2100      	movs	r1, #0
 800ff22:	6938      	ldr	r0, [r7, #16]
 800ff24:	f000 fbd0 	bl	80106c8 <xQueueGenericSend>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	2b01      	cmp	r3, #1
 800ff2c:	d002      	beq.n	800ff34 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ff2e:	f06f 0302 	mvn.w	r3, #2
 800ff32:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ff34:	697b      	ldr	r3, [r7, #20]
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3718      	adds	r7, #24
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	e000ed04 	.word	0xe000ed04

0800ff44 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b08a      	sub	sp, #40	; 0x28
 800ff48:	af02      	add	r7, sp, #8
 800ff4a:	60f8      	str	r0, [r7, #12]
 800ff4c:	60b9      	str	r1, [r7, #8]
 800ff4e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ff50:	2300      	movs	r3, #0
 800ff52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff54:	f3ef 8305 	mrs	r3, IPSR
 800ff58:	613b      	str	r3, [r7, #16]
  return(result);
 800ff5a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d15f      	bne.n	8010020 <osMessageQueueNew+0xdc>
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d05c      	beq.n	8010020 <osMessageQueueNew+0xdc>
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d059      	beq.n	8010020 <osMessageQueueNew+0xdc>
    mem = -1;
 800ff6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff70:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d029      	beq.n	800ffcc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	689b      	ldr	r3, [r3, #8]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d012      	beq.n	800ffa6 <osMessageQueueNew+0x62>
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	2b4f      	cmp	r3, #79	; 0x4f
 800ff86:	d90e      	bls.n	800ffa6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d00a      	beq.n	800ffa6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	695a      	ldr	r2, [r3, #20]
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	68b9      	ldr	r1, [r7, #8]
 800ff98:	fb01 f303 	mul.w	r3, r1, r3
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d302      	bcc.n	800ffa6 <osMessageQueueNew+0x62>
        mem = 1;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	61bb      	str	r3, [r7, #24]
 800ffa4:	e014      	b.n	800ffd0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	689b      	ldr	r3, [r3, #8]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d110      	bne.n	800ffd0 <osMessageQueueNew+0x8c>
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d10c      	bne.n	800ffd0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d108      	bne.n	800ffd0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	695b      	ldr	r3, [r3, #20]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d104      	bne.n	800ffd0 <osMessageQueueNew+0x8c>
          mem = 0;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	61bb      	str	r3, [r7, #24]
 800ffca:	e001      	b.n	800ffd0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ffd0:	69bb      	ldr	r3, [r7, #24]
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d10b      	bne.n	800ffee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	691a      	ldr	r2, [r3, #16]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	689b      	ldr	r3, [r3, #8]
 800ffde:	2100      	movs	r1, #0
 800ffe0:	9100      	str	r1, [sp, #0]
 800ffe2:	68b9      	ldr	r1, [r7, #8]
 800ffe4:	68f8      	ldr	r0, [r7, #12]
 800ffe6:	f000 fa2f 	bl	8010448 <xQueueGenericCreateStatic>
 800ffea:	61f8      	str	r0, [r7, #28]
 800ffec:	e008      	b.n	8010000 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ffee:	69bb      	ldr	r3, [r7, #24]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d105      	bne.n	8010000 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800fff4:	2200      	movs	r2, #0
 800fff6:	68b9      	ldr	r1, [r7, #8]
 800fff8:	68f8      	ldr	r0, [r7, #12]
 800fffa:	f000 fa9d 	bl	8010538 <xQueueGenericCreate>
 800fffe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010000:	69fb      	ldr	r3, [r7, #28]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d00c      	beq.n	8010020 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d003      	beq.n	8010014 <osMessageQueueNew+0xd0>
        name = attr->name;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	617b      	str	r3, [r7, #20]
 8010012:	e001      	b.n	8010018 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8010014:	2300      	movs	r3, #0
 8010016:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010018:	6979      	ldr	r1, [r7, #20]
 801001a:	69f8      	ldr	r0, [r7, #28]
 801001c:	f001 f932 	bl	8011284 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010020:	69fb      	ldr	r3, [r7, #28]
}
 8010022:	4618      	mov	r0, r3
 8010024:	3720      	adds	r7, #32
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
	...

0801002c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801002c:	b580      	push	{r7, lr}
 801002e:	b088      	sub	sp, #32
 8010030:	af00      	add	r7, sp, #0
 8010032:	60f8      	str	r0, [r7, #12]
 8010034:	60b9      	str	r1, [r7, #8]
 8010036:	603b      	str	r3, [r7, #0]
 8010038:	4613      	mov	r3, r2
 801003a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010040:	2300      	movs	r3, #0
 8010042:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010044:	f3ef 8305 	mrs	r3, IPSR
 8010048:	617b      	str	r3, [r7, #20]
  return(result);
 801004a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801004c:	2b00      	cmp	r3, #0
 801004e:	d028      	beq.n	80100a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d005      	beq.n	8010062 <osMessageQueuePut+0x36>
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d002      	beq.n	8010062 <osMessageQueuePut+0x36>
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d003      	beq.n	801006a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010062:	f06f 0303 	mvn.w	r3, #3
 8010066:	61fb      	str	r3, [r7, #28]
 8010068:	e038      	b.n	80100dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801006a:	2300      	movs	r3, #0
 801006c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801006e:	f107 0210 	add.w	r2, r7, #16
 8010072:	2300      	movs	r3, #0
 8010074:	68b9      	ldr	r1, [r7, #8]
 8010076:	69b8      	ldr	r0, [r7, #24]
 8010078:	f000 fc24 	bl	80108c4 <xQueueGenericSendFromISR>
 801007c:	4603      	mov	r3, r0
 801007e:	2b01      	cmp	r3, #1
 8010080:	d003      	beq.n	801008a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010082:	f06f 0302 	mvn.w	r3, #2
 8010086:	61fb      	str	r3, [r7, #28]
 8010088:	e028      	b.n	80100dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d025      	beq.n	80100dc <osMessageQueuePut+0xb0>
 8010090:	4b15      	ldr	r3, [pc, #84]	; (80100e8 <osMessageQueuePut+0xbc>)
 8010092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010096:	601a      	str	r2, [r3, #0]
 8010098:	f3bf 8f4f 	dsb	sy
 801009c:	f3bf 8f6f 	isb	sy
 80100a0:	e01c      	b.n	80100dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80100a2:	69bb      	ldr	r3, [r7, #24]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d002      	beq.n	80100ae <osMessageQueuePut+0x82>
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d103      	bne.n	80100b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80100ae:	f06f 0303 	mvn.w	r3, #3
 80100b2:	61fb      	str	r3, [r7, #28]
 80100b4:	e012      	b.n	80100dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80100b6:	2300      	movs	r3, #0
 80100b8:	683a      	ldr	r2, [r7, #0]
 80100ba:	68b9      	ldr	r1, [r7, #8]
 80100bc:	69b8      	ldr	r0, [r7, #24]
 80100be:	f000 fb03 	bl	80106c8 <xQueueGenericSend>
 80100c2:	4603      	mov	r3, r0
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d009      	beq.n	80100dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d003      	beq.n	80100d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80100ce:	f06f 0301 	mvn.w	r3, #1
 80100d2:	61fb      	str	r3, [r7, #28]
 80100d4:	e002      	b.n	80100dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80100d6:	f06f 0302 	mvn.w	r3, #2
 80100da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80100dc:	69fb      	ldr	r3, [r7, #28]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3720      	adds	r7, #32
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}
 80100e6:	bf00      	nop
 80100e8:	e000ed04 	.word	0xe000ed04

080100ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b088      	sub	sp, #32
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	607a      	str	r2, [r7, #4]
 80100f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80100fe:	2300      	movs	r3, #0
 8010100:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010102:	f3ef 8305 	mrs	r3, IPSR
 8010106:	617b      	str	r3, [r7, #20]
  return(result);
 8010108:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801010a:	2b00      	cmp	r3, #0
 801010c:	d028      	beq.n	8010160 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801010e:	69bb      	ldr	r3, [r7, #24]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d005      	beq.n	8010120 <osMessageQueueGet+0x34>
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d002      	beq.n	8010120 <osMessageQueueGet+0x34>
 801011a:	683b      	ldr	r3, [r7, #0]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d003      	beq.n	8010128 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010120:	f06f 0303 	mvn.w	r3, #3
 8010124:	61fb      	str	r3, [r7, #28]
 8010126:	e037      	b.n	8010198 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8010128:	2300      	movs	r3, #0
 801012a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801012c:	f107 0310 	add.w	r3, r7, #16
 8010130:	461a      	mov	r2, r3
 8010132:	68b9      	ldr	r1, [r7, #8]
 8010134:	69b8      	ldr	r0, [r7, #24]
 8010136:	f000 fed9 	bl	8010eec <xQueueReceiveFromISR>
 801013a:	4603      	mov	r3, r0
 801013c:	2b01      	cmp	r3, #1
 801013e:	d003      	beq.n	8010148 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010140:	f06f 0302 	mvn.w	r3, #2
 8010144:	61fb      	str	r3, [r7, #28]
 8010146:	e027      	b.n	8010198 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d024      	beq.n	8010198 <osMessageQueueGet+0xac>
 801014e:	4b15      	ldr	r3, [pc, #84]	; (80101a4 <osMessageQueueGet+0xb8>)
 8010150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010154:	601a      	str	r2, [r3, #0]
 8010156:	f3bf 8f4f 	dsb	sy
 801015a:	f3bf 8f6f 	isb	sy
 801015e:	e01b      	b.n	8010198 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010160:	69bb      	ldr	r3, [r7, #24]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d002      	beq.n	801016c <osMessageQueueGet+0x80>
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d103      	bne.n	8010174 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801016c:	f06f 0303 	mvn.w	r3, #3
 8010170:	61fb      	str	r3, [r7, #28]
 8010172:	e011      	b.n	8010198 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010174:	683a      	ldr	r2, [r7, #0]
 8010176:	68b9      	ldr	r1, [r7, #8]
 8010178:	69b8      	ldr	r0, [r7, #24]
 801017a:	f000 fccb 	bl	8010b14 <xQueueReceive>
 801017e:	4603      	mov	r3, r0
 8010180:	2b01      	cmp	r3, #1
 8010182:	d009      	beq.n	8010198 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010184:	683b      	ldr	r3, [r7, #0]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d003      	beq.n	8010192 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801018a:	f06f 0301 	mvn.w	r3, #1
 801018e:	61fb      	str	r3, [r7, #28]
 8010190:	e002      	b.n	8010198 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010192:	f06f 0302 	mvn.w	r3, #2
 8010196:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010198:	69fb      	ldr	r3, [r7, #28]
}
 801019a:	4618      	mov	r0, r3
 801019c:	3720      	adds	r7, #32
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}
 80101a2:	bf00      	nop
 80101a4:	e000ed04 	.word	0xe000ed04

080101a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80101a8:	b480      	push	{r7}
 80101aa:	b085      	sub	sp, #20
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	60f8      	str	r0, [r7, #12]
 80101b0:	60b9      	str	r1, [r7, #8]
 80101b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	4a07      	ldr	r2, [pc, #28]	; (80101d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80101b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	4a06      	ldr	r2, [pc, #24]	; (80101d8 <vApplicationGetIdleTaskMemory+0x30>)
 80101be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2280      	movs	r2, #128	; 0x80
 80101c4:	601a      	str	r2, [r3, #0]
}
 80101c6:	bf00      	nop
 80101c8:	3714      	adds	r7, #20
 80101ca:	46bd      	mov	sp, r7
 80101cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d0:	4770      	bx	lr
 80101d2:	bf00      	nop
 80101d4:	24000c80 	.word	0x24000c80
 80101d8:	24000d28 	.word	0x24000d28

080101dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80101dc:	b480      	push	{r7}
 80101de:	b085      	sub	sp, #20
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	60f8      	str	r0, [r7, #12]
 80101e4:	60b9      	str	r1, [r7, #8]
 80101e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	4a07      	ldr	r2, [pc, #28]	; (8010208 <vApplicationGetTimerTaskMemory+0x2c>)
 80101ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	4a06      	ldr	r2, [pc, #24]	; (801020c <vApplicationGetTimerTaskMemory+0x30>)
 80101f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80101fa:	601a      	str	r2, [r3, #0]
}
 80101fc:	bf00      	nop
 80101fe:	3714      	adds	r7, #20
 8010200:	46bd      	mov	sp, r7
 8010202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010206:	4770      	bx	lr
 8010208:	24000f28 	.word	0x24000f28
 801020c:	24000fd0 	.word	0x24000fd0

08010210 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010210:	b480      	push	{r7}
 8010212:	b083      	sub	sp, #12
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f103 0208 	add.w	r2, r3, #8
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f04f 32ff 	mov.w	r2, #4294967295
 8010228:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f103 0208 	add.w	r2, r3, #8
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f103 0208 	add.w	r2, r3, #8
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2200      	movs	r2, #0
 8010242:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010244:	bf00      	nop
 8010246:	370c      	adds	r7, #12
 8010248:	46bd      	mov	sp, r7
 801024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024e:	4770      	bx	lr

08010250 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010250:	b480      	push	{r7}
 8010252:	b083      	sub	sp, #12
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2200      	movs	r2, #0
 801025c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801025e:	bf00      	nop
 8010260:	370c      	adds	r7, #12
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr

0801026a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801026a:	b480      	push	{r7}
 801026c:	b085      	sub	sp, #20
 801026e:	af00      	add	r7, sp, #0
 8010270:	6078      	str	r0, [r7, #4]
 8010272:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	685b      	ldr	r3, [r3, #4]
 8010278:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	68fa      	ldr	r2, [r7, #12]
 801027e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	689a      	ldr	r2, [r3, #8]
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	689b      	ldr	r3, [r3, #8]
 801028c:	683a      	ldr	r2, [r7, #0]
 801028e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	683a      	ldr	r2, [r7, #0]
 8010294:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	687a      	ldr	r2, [r7, #4]
 801029a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	1c5a      	adds	r2, r3, #1
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	601a      	str	r2, [r3, #0]
}
 80102a6:	bf00      	nop
 80102a8:	3714      	adds	r7, #20
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr

080102b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80102b2:	b480      	push	{r7}
 80102b4:	b085      	sub	sp, #20
 80102b6:	af00      	add	r7, sp, #0
 80102b8:	6078      	str	r0, [r7, #4]
 80102ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80102bc:	683b      	ldr	r3, [r7, #0]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c8:	d103      	bne.n	80102d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	691b      	ldr	r3, [r3, #16]
 80102ce:	60fb      	str	r3, [r7, #12]
 80102d0:	e00c      	b.n	80102ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	3308      	adds	r3, #8
 80102d6:	60fb      	str	r3, [r7, #12]
 80102d8:	e002      	b.n	80102e0 <vListInsert+0x2e>
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	60fb      	str	r3, [r7, #12]
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	68ba      	ldr	r2, [r7, #8]
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d2f6      	bcs.n	80102da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	685a      	ldr	r2, [r3, #4]
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	683a      	ldr	r2, [r7, #0]
 80102fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	68fa      	ldr	r2, [r7, #12]
 8010300:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	683a      	ldr	r2, [r7, #0]
 8010306:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	687a      	ldr	r2, [r7, #4]
 801030c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	1c5a      	adds	r2, r3, #1
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	601a      	str	r2, [r3, #0]
}
 8010318:	bf00      	nop
 801031a:	3714      	adds	r7, #20
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010324:	b480      	push	{r7}
 8010326:	b085      	sub	sp, #20
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	691b      	ldr	r3, [r3, #16]
 8010330:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	685b      	ldr	r3, [r3, #4]
 8010336:	687a      	ldr	r2, [r7, #4]
 8010338:	6892      	ldr	r2, [r2, #8]
 801033a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	689b      	ldr	r3, [r3, #8]
 8010340:	687a      	ldr	r2, [r7, #4]
 8010342:	6852      	ldr	r2, [r2, #4]
 8010344:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	687a      	ldr	r2, [r7, #4]
 801034c:	429a      	cmp	r2, r3
 801034e:	d103      	bne.n	8010358 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	689a      	ldr	r2, [r3, #8]
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2200      	movs	r2, #0
 801035c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	1e5a      	subs	r2, r3, #1
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	681b      	ldr	r3, [r3, #0]
}
 801036c:	4618      	mov	r0, r3
 801036e:	3714      	adds	r7, #20
 8010370:	46bd      	mov	sp, r7
 8010372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010376:	4770      	bx	lr

08010378 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d10a      	bne.n	80103a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801038c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010390:	f383 8811 	msr	BASEPRI, r3
 8010394:	f3bf 8f6f 	isb	sy
 8010398:	f3bf 8f4f 	dsb	sy
 801039c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801039e:	bf00      	nop
 80103a0:	e7fe      	b.n	80103a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80103a2:	f003 f8e7 	bl	8013574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	681a      	ldr	r2, [r3, #0]
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103ae:	68f9      	ldr	r1, [r7, #12]
 80103b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80103b2:	fb01 f303 	mul.w	r3, r1, r3
 80103b6:	441a      	add	r2, r3
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2200      	movs	r2, #0
 80103c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	681a      	ldr	r2, [r3, #0]
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	681a      	ldr	r2, [r3, #0]
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103d2:	3b01      	subs	r3, #1
 80103d4:	68f9      	ldr	r1, [r7, #12]
 80103d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80103d8:	fb01 f303 	mul.w	r3, r1, r3
 80103dc:	441a      	add	r2, r3
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	22ff      	movs	r2, #255	; 0xff
 80103e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	22ff      	movs	r2, #255	; 0xff
 80103ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d114      	bne.n	8010422 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	691b      	ldr	r3, [r3, #16]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d01a      	beq.n	8010436 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	3310      	adds	r3, #16
 8010404:	4618      	mov	r0, r3
 8010406:	f001 fd4d 	bl	8011ea4 <xTaskRemoveFromEventList>
 801040a:	4603      	mov	r3, r0
 801040c:	2b00      	cmp	r3, #0
 801040e:	d012      	beq.n	8010436 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010410:	4b0c      	ldr	r3, [pc, #48]	; (8010444 <xQueueGenericReset+0xcc>)
 8010412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010416:	601a      	str	r2, [r3, #0]
 8010418:	f3bf 8f4f 	dsb	sy
 801041c:	f3bf 8f6f 	isb	sy
 8010420:	e009      	b.n	8010436 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	3310      	adds	r3, #16
 8010426:	4618      	mov	r0, r3
 8010428:	f7ff fef2 	bl	8010210 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	3324      	adds	r3, #36	; 0x24
 8010430:	4618      	mov	r0, r3
 8010432:	f7ff feed 	bl	8010210 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010436:	f003 f8cd 	bl	80135d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801043a:	2301      	movs	r3, #1
}
 801043c:	4618      	mov	r0, r3
 801043e:	3710      	adds	r7, #16
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}
 8010444:	e000ed04 	.word	0xe000ed04

08010448 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010448:	b580      	push	{r7, lr}
 801044a:	b08e      	sub	sp, #56	; 0x38
 801044c:	af02      	add	r7, sp, #8
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	607a      	str	r2, [r7, #4]
 8010454:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d10a      	bne.n	8010472 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 801045c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010460:	f383 8811 	msr	BASEPRI, r3
 8010464:	f3bf 8f6f 	isb	sy
 8010468:	f3bf 8f4f 	dsb	sy
 801046c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801046e:	bf00      	nop
 8010470:	e7fe      	b.n	8010470 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d10a      	bne.n	801048e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8010478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801047c:	f383 8811 	msr	BASEPRI, r3
 8010480:	f3bf 8f6f 	isb	sy
 8010484:	f3bf 8f4f 	dsb	sy
 8010488:	627b      	str	r3, [r7, #36]	; 0x24
}
 801048a:	bf00      	nop
 801048c:	e7fe      	b.n	801048c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d002      	beq.n	801049a <xQueueGenericCreateStatic+0x52>
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d001      	beq.n	801049e <xQueueGenericCreateStatic+0x56>
 801049a:	2301      	movs	r3, #1
 801049c:	e000      	b.n	80104a0 <xQueueGenericCreateStatic+0x58>
 801049e:	2300      	movs	r3, #0
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d10a      	bne.n	80104ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80104a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a8:	f383 8811 	msr	BASEPRI, r3
 80104ac:	f3bf 8f6f 	isb	sy
 80104b0:	f3bf 8f4f 	dsb	sy
 80104b4:	623b      	str	r3, [r7, #32]
}
 80104b6:	bf00      	nop
 80104b8:	e7fe      	b.n	80104b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d102      	bne.n	80104c6 <xQueueGenericCreateStatic+0x7e>
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d101      	bne.n	80104ca <xQueueGenericCreateStatic+0x82>
 80104c6:	2301      	movs	r3, #1
 80104c8:	e000      	b.n	80104cc <xQueueGenericCreateStatic+0x84>
 80104ca:	2300      	movs	r3, #0
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d10a      	bne.n	80104e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80104d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d4:	f383 8811 	msr	BASEPRI, r3
 80104d8:	f3bf 8f6f 	isb	sy
 80104dc:	f3bf 8f4f 	dsb	sy
 80104e0:	61fb      	str	r3, [r7, #28]
}
 80104e2:	bf00      	nop
 80104e4:	e7fe      	b.n	80104e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80104e6:	2350      	movs	r3, #80	; 0x50
 80104e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	2b50      	cmp	r3, #80	; 0x50
 80104ee:	d00a      	beq.n	8010506 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80104f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f4:	f383 8811 	msr	BASEPRI, r3
 80104f8:	f3bf 8f6f 	isb	sy
 80104fc:	f3bf 8f4f 	dsb	sy
 8010500:	61bb      	str	r3, [r7, #24]
}
 8010502:	bf00      	nop
 8010504:	e7fe      	b.n	8010504 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010506:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010508:	683b      	ldr	r3, [r7, #0]
 801050a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801050c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801050e:	2b00      	cmp	r3, #0
 8010510:	d00d      	beq.n	801052e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010514:	2201      	movs	r2, #1
 8010516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801051a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801051e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010520:	9300      	str	r3, [sp, #0]
 8010522:	4613      	mov	r3, r2
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	68b9      	ldr	r1, [r7, #8]
 8010528:	68f8      	ldr	r0, [r7, #12]
 801052a:	f000 f83f 	bl	80105ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801052e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010530:	4618      	mov	r0, r3
 8010532:	3730      	adds	r7, #48	; 0x30
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010538:	b580      	push	{r7, lr}
 801053a:	b08a      	sub	sp, #40	; 0x28
 801053c:	af02      	add	r7, sp, #8
 801053e:	60f8      	str	r0, [r7, #12]
 8010540:	60b9      	str	r1, [r7, #8]
 8010542:	4613      	mov	r3, r2
 8010544:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d10a      	bne.n	8010562 <xQueueGenericCreate+0x2a>
	__asm volatile
 801054c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010550:	f383 8811 	msr	BASEPRI, r3
 8010554:	f3bf 8f6f 	isb	sy
 8010558:	f3bf 8f4f 	dsb	sy
 801055c:	613b      	str	r3, [r7, #16]
}
 801055e:	bf00      	nop
 8010560:	e7fe      	b.n	8010560 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	68ba      	ldr	r2, [r7, #8]
 8010566:	fb02 f303 	mul.w	r3, r2, r3
 801056a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801056c:	69fb      	ldr	r3, [r7, #28]
 801056e:	3350      	adds	r3, #80	; 0x50
 8010570:	4618      	mov	r0, r3
 8010572:	f003 f921 	bl	80137b8 <pvPortMalloc>
 8010576:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010578:	69bb      	ldr	r3, [r7, #24]
 801057a:	2b00      	cmp	r3, #0
 801057c:	d011      	beq.n	80105a2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801057e:	69bb      	ldr	r3, [r7, #24]
 8010580:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	3350      	adds	r3, #80	; 0x50
 8010586:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010588:	69bb      	ldr	r3, [r7, #24]
 801058a:	2200      	movs	r2, #0
 801058c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010590:	79fa      	ldrb	r2, [r7, #7]
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	9300      	str	r3, [sp, #0]
 8010596:	4613      	mov	r3, r2
 8010598:	697a      	ldr	r2, [r7, #20]
 801059a:	68b9      	ldr	r1, [r7, #8]
 801059c:	68f8      	ldr	r0, [r7, #12]
 801059e:	f000 f805 	bl	80105ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80105a2:	69bb      	ldr	r3, [r7, #24]
	}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3720      	adds	r7, #32
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	60b9      	str	r1, [r7, #8]
 80105b6:	607a      	str	r2, [r7, #4]
 80105b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d103      	bne.n	80105c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80105c0:	69bb      	ldr	r3, [r7, #24]
 80105c2:	69ba      	ldr	r2, [r7, #24]
 80105c4:	601a      	str	r2, [r3, #0]
 80105c6:	e002      	b.n	80105ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80105c8:	69bb      	ldr	r3, [r7, #24]
 80105ca:	687a      	ldr	r2, [r7, #4]
 80105cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	68fa      	ldr	r2, [r7, #12]
 80105d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80105d4:	69bb      	ldr	r3, [r7, #24]
 80105d6:	68ba      	ldr	r2, [r7, #8]
 80105d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80105da:	2101      	movs	r1, #1
 80105dc:	69b8      	ldr	r0, [r7, #24]
 80105de:	f7ff fecb 	bl	8010378 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80105e2:	69bb      	ldr	r3, [r7, #24]
 80105e4:	78fa      	ldrb	r2, [r7, #3]
 80105e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80105ea:	bf00      	nop
 80105ec:	3710      	adds	r7, #16
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd80      	pop	{r7, pc}

080105f2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80105f2:	b580      	push	{r7, lr}
 80105f4:	b08a      	sub	sp, #40	; 0x28
 80105f6:	af02      	add	r7, sp, #8
 80105f8:	60f8      	str	r0, [r7, #12]
 80105fa:	60b9      	str	r1, [r7, #8]
 80105fc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d10a      	bne.n	801061a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8010604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010608:	f383 8811 	msr	BASEPRI, r3
 801060c:	f3bf 8f6f 	isb	sy
 8010610:	f3bf 8f4f 	dsb	sy
 8010614:	61bb      	str	r3, [r7, #24]
}
 8010616:	bf00      	nop
 8010618:	e7fe      	b.n	8010618 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801061a:	68ba      	ldr	r2, [r7, #8]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	429a      	cmp	r2, r3
 8010620:	d90a      	bls.n	8010638 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8010622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010626:	f383 8811 	msr	BASEPRI, r3
 801062a:	f3bf 8f6f 	isb	sy
 801062e:	f3bf 8f4f 	dsb	sy
 8010632:	617b      	str	r3, [r7, #20]
}
 8010634:	bf00      	nop
 8010636:	e7fe      	b.n	8010636 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010638:	2302      	movs	r3, #2
 801063a:	9300      	str	r3, [sp, #0]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2200      	movs	r2, #0
 8010640:	2100      	movs	r1, #0
 8010642:	68f8      	ldr	r0, [r7, #12]
 8010644:	f7ff ff00 	bl	8010448 <xQueueGenericCreateStatic>
 8010648:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d002      	beq.n	8010656 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010650:	69fb      	ldr	r3, [r7, #28]
 8010652:	68ba      	ldr	r2, [r7, #8]
 8010654:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010656:	69fb      	ldr	r3, [r7, #28]
	}
 8010658:	4618      	mov	r0, r3
 801065a:	3720      	adds	r7, #32
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010660:	b580      	push	{r7, lr}
 8010662:	b086      	sub	sp, #24
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d10a      	bne.n	8010686 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010674:	f383 8811 	msr	BASEPRI, r3
 8010678:	f3bf 8f6f 	isb	sy
 801067c:	f3bf 8f4f 	dsb	sy
 8010680:	613b      	str	r3, [r7, #16]
}
 8010682:	bf00      	nop
 8010684:	e7fe      	b.n	8010684 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010686:	683a      	ldr	r2, [r7, #0]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	429a      	cmp	r2, r3
 801068c:	d90a      	bls.n	80106a4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801068e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010692:	f383 8811 	msr	BASEPRI, r3
 8010696:	f3bf 8f6f 	isb	sy
 801069a:	f3bf 8f4f 	dsb	sy
 801069e:	60fb      	str	r3, [r7, #12]
}
 80106a0:	bf00      	nop
 80106a2:	e7fe      	b.n	80106a2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80106a4:	2202      	movs	r2, #2
 80106a6:	2100      	movs	r1, #0
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f7ff ff45 	bl	8010538 <xQueueGenericCreate>
 80106ae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d002      	beq.n	80106bc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	683a      	ldr	r2, [r7, #0]
 80106ba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80106bc:	697b      	ldr	r3, [r7, #20]
	}
 80106be:	4618      	mov	r0, r3
 80106c0:	3718      	adds	r7, #24
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
	...

080106c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b08e      	sub	sp, #56	; 0x38
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	60b9      	str	r1, [r7, #8]
 80106d2:	607a      	str	r2, [r7, #4]
 80106d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80106d6:	2300      	movs	r3, #0
 80106d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80106de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d10a      	bne.n	80106fa <xQueueGenericSend+0x32>
	__asm volatile
 80106e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e8:	f383 8811 	msr	BASEPRI, r3
 80106ec:	f3bf 8f6f 	isb	sy
 80106f0:	f3bf 8f4f 	dsb	sy
 80106f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80106f6:	bf00      	nop
 80106f8:	e7fe      	b.n	80106f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d103      	bne.n	8010708 <xQueueGenericSend+0x40>
 8010700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010704:	2b00      	cmp	r3, #0
 8010706:	d101      	bne.n	801070c <xQueueGenericSend+0x44>
 8010708:	2301      	movs	r3, #1
 801070a:	e000      	b.n	801070e <xQueueGenericSend+0x46>
 801070c:	2300      	movs	r3, #0
 801070e:	2b00      	cmp	r3, #0
 8010710:	d10a      	bne.n	8010728 <xQueueGenericSend+0x60>
	__asm volatile
 8010712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010716:	f383 8811 	msr	BASEPRI, r3
 801071a:	f3bf 8f6f 	isb	sy
 801071e:	f3bf 8f4f 	dsb	sy
 8010722:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010724:	bf00      	nop
 8010726:	e7fe      	b.n	8010726 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	2b02      	cmp	r3, #2
 801072c:	d103      	bne.n	8010736 <xQueueGenericSend+0x6e>
 801072e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010732:	2b01      	cmp	r3, #1
 8010734:	d101      	bne.n	801073a <xQueueGenericSend+0x72>
 8010736:	2301      	movs	r3, #1
 8010738:	e000      	b.n	801073c <xQueueGenericSend+0x74>
 801073a:	2300      	movs	r3, #0
 801073c:	2b00      	cmp	r3, #0
 801073e:	d10a      	bne.n	8010756 <xQueueGenericSend+0x8e>
	__asm volatile
 8010740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010744:	f383 8811 	msr	BASEPRI, r3
 8010748:	f3bf 8f6f 	isb	sy
 801074c:	f3bf 8f4f 	dsb	sy
 8010750:	623b      	str	r3, [r7, #32]
}
 8010752:	bf00      	nop
 8010754:	e7fe      	b.n	8010754 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010756:	f001 fd77 	bl	8012248 <xTaskGetSchedulerState>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d102      	bne.n	8010766 <xQueueGenericSend+0x9e>
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d101      	bne.n	801076a <xQueueGenericSend+0xa2>
 8010766:	2301      	movs	r3, #1
 8010768:	e000      	b.n	801076c <xQueueGenericSend+0xa4>
 801076a:	2300      	movs	r3, #0
 801076c:	2b00      	cmp	r3, #0
 801076e:	d10a      	bne.n	8010786 <xQueueGenericSend+0xbe>
	__asm volatile
 8010770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010774:	f383 8811 	msr	BASEPRI, r3
 8010778:	f3bf 8f6f 	isb	sy
 801077c:	f3bf 8f4f 	dsb	sy
 8010780:	61fb      	str	r3, [r7, #28]
}
 8010782:	bf00      	nop
 8010784:	e7fe      	b.n	8010784 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010786:	f002 fef5 	bl	8013574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801078a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801078c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801078e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010792:	429a      	cmp	r2, r3
 8010794:	d302      	bcc.n	801079c <xQueueGenericSend+0xd4>
 8010796:	683b      	ldr	r3, [r7, #0]
 8010798:	2b02      	cmp	r3, #2
 801079a:	d129      	bne.n	80107f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801079c:	683a      	ldr	r2, [r7, #0]
 801079e:	68b9      	ldr	r1, [r7, #8]
 80107a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107a2:	f000 fc5e 	bl	8011062 <prvCopyDataToQueue>
 80107a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d010      	beq.n	80107d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b2:	3324      	adds	r3, #36	; 0x24
 80107b4:	4618      	mov	r0, r3
 80107b6:	f001 fb75 	bl	8011ea4 <xTaskRemoveFromEventList>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d013      	beq.n	80107e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80107c0:	4b3f      	ldr	r3, [pc, #252]	; (80108c0 <xQueueGenericSend+0x1f8>)
 80107c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107c6:	601a      	str	r2, [r3, #0]
 80107c8:	f3bf 8f4f 	dsb	sy
 80107cc:	f3bf 8f6f 	isb	sy
 80107d0:	e00a      	b.n	80107e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80107d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d007      	beq.n	80107e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80107d8:	4b39      	ldr	r3, [pc, #228]	; (80108c0 <xQueueGenericSend+0x1f8>)
 80107da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107de:	601a      	str	r2, [r3, #0]
 80107e0:	f3bf 8f4f 	dsb	sy
 80107e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80107e8:	f002 fef4 	bl	80135d4 <vPortExitCritical>
				return pdPASS;
 80107ec:	2301      	movs	r3, #1
 80107ee:	e063      	b.n	80108b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d103      	bne.n	80107fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80107f6:	f002 feed 	bl	80135d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80107fa:	2300      	movs	r3, #0
 80107fc:	e05c      	b.n	80108b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80107fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010800:	2b00      	cmp	r3, #0
 8010802:	d106      	bne.n	8010812 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010804:	f107 0314 	add.w	r3, r7, #20
 8010808:	4618      	mov	r0, r3
 801080a:	f001 fbaf 	bl	8011f6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801080e:	2301      	movs	r3, #1
 8010810:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010812:	f002 fedf 	bl	80135d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010816:	f001 f909 	bl	8011a2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801081a:	f002 feab 	bl	8013574 <vPortEnterCritical>
 801081e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010824:	b25b      	sxtb	r3, r3
 8010826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801082a:	d103      	bne.n	8010834 <xQueueGenericSend+0x16c>
 801082c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801082e:	2200      	movs	r2, #0
 8010830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801083a:	b25b      	sxtb	r3, r3
 801083c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010840:	d103      	bne.n	801084a <xQueueGenericSend+0x182>
 8010842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010844:	2200      	movs	r2, #0
 8010846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801084a:	f002 fec3 	bl	80135d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801084e:	1d3a      	adds	r2, r7, #4
 8010850:	f107 0314 	add.w	r3, r7, #20
 8010854:	4611      	mov	r1, r2
 8010856:	4618      	mov	r0, r3
 8010858:	f001 fb9e 	bl	8011f98 <xTaskCheckForTimeOut>
 801085c:	4603      	mov	r3, r0
 801085e:	2b00      	cmp	r3, #0
 8010860:	d124      	bne.n	80108ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010864:	f000 fcf5 	bl	8011252 <prvIsQueueFull>
 8010868:	4603      	mov	r3, r0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d018      	beq.n	80108a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801086e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010870:	3310      	adds	r3, #16
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	4611      	mov	r1, r2
 8010876:	4618      	mov	r0, r3
 8010878:	f001 fac4 	bl	8011e04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801087c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801087e:	f000 fc80 	bl	8011182 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010882:	f001 f8e1 	bl	8011a48 <xTaskResumeAll>
 8010886:	4603      	mov	r3, r0
 8010888:	2b00      	cmp	r3, #0
 801088a:	f47f af7c 	bne.w	8010786 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801088e:	4b0c      	ldr	r3, [pc, #48]	; (80108c0 <xQueueGenericSend+0x1f8>)
 8010890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010894:	601a      	str	r2, [r3, #0]
 8010896:	f3bf 8f4f 	dsb	sy
 801089a:	f3bf 8f6f 	isb	sy
 801089e:	e772      	b.n	8010786 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80108a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108a2:	f000 fc6e 	bl	8011182 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80108a6:	f001 f8cf 	bl	8011a48 <xTaskResumeAll>
 80108aa:	e76c      	b.n	8010786 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80108ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108ae:	f000 fc68 	bl	8011182 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80108b2:	f001 f8c9 	bl	8011a48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80108b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80108b8:	4618      	mov	r0, r3
 80108ba:	3738      	adds	r7, #56	; 0x38
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	e000ed04 	.word	0xe000ed04

080108c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b090      	sub	sp, #64	; 0x40
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	60f8      	str	r0, [r7, #12]
 80108cc:	60b9      	str	r1, [r7, #8]
 80108ce:	607a      	str	r2, [r7, #4]
 80108d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80108d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d10a      	bne.n	80108f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80108dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108e0:	f383 8811 	msr	BASEPRI, r3
 80108e4:	f3bf 8f6f 	isb	sy
 80108e8:	f3bf 8f4f 	dsb	sy
 80108ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80108ee:	bf00      	nop
 80108f0:	e7fe      	b.n	80108f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d103      	bne.n	8010900 <xQueueGenericSendFromISR+0x3c>
 80108f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d101      	bne.n	8010904 <xQueueGenericSendFromISR+0x40>
 8010900:	2301      	movs	r3, #1
 8010902:	e000      	b.n	8010906 <xQueueGenericSendFromISR+0x42>
 8010904:	2300      	movs	r3, #0
 8010906:	2b00      	cmp	r3, #0
 8010908:	d10a      	bne.n	8010920 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801090a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801090e:	f383 8811 	msr	BASEPRI, r3
 8010912:	f3bf 8f6f 	isb	sy
 8010916:	f3bf 8f4f 	dsb	sy
 801091a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801091c:	bf00      	nop
 801091e:	e7fe      	b.n	801091e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	2b02      	cmp	r3, #2
 8010924:	d103      	bne.n	801092e <xQueueGenericSendFromISR+0x6a>
 8010926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801092a:	2b01      	cmp	r3, #1
 801092c:	d101      	bne.n	8010932 <xQueueGenericSendFromISR+0x6e>
 801092e:	2301      	movs	r3, #1
 8010930:	e000      	b.n	8010934 <xQueueGenericSendFromISR+0x70>
 8010932:	2300      	movs	r3, #0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d10a      	bne.n	801094e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010938:	f04f 0350 	mov.w	r3, #80	; 0x50
 801093c:	f383 8811 	msr	BASEPRI, r3
 8010940:	f3bf 8f6f 	isb	sy
 8010944:	f3bf 8f4f 	dsb	sy
 8010948:	623b      	str	r3, [r7, #32]
}
 801094a:	bf00      	nop
 801094c:	e7fe      	b.n	801094c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801094e:	f002 fef3 	bl	8013738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010952:	f3ef 8211 	mrs	r2, BASEPRI
 8010956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801095a:	f383 8811 	msr	BASEPRI, r3
 801095e:	f3bf 8f6f 	isb	sy
 8010962:	f3bf 8f4f 	dsb	sy
 8010966:	61fa      	str	r2, [r7, #28]
 8010968:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801096a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801096c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801096e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010976:	429a      	cmp	r2, r3
 8010978:	d302      	bcc.n	8010980 <xQueueGenericSendFromISR+0xbc>
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	2b02      	cmp	r3, #2
 801097e:	d12f      	bne.n	80109e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801098a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801098e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010990:	683a      	ldr	r2, [r7, #0]
 8010992:	68b9      	ldr	r1, [r7, #8]
 8010994:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010996:	f000 fb64 	bl	8011062 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801099a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801099e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109a2:	d112      	bne.n	80109ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80109a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d016      	beq.n	80109da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80109ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ae:	3324      	adds	r3, #36	; 0x24
 80109b0:	4618      	mov	r0, r3
 80109b2:	f001 fa77 	bl	8011ea4 <xTaskRemoveFromEventList>
 80109b6:	4603      	mov	r3, r0
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d00e      	beq.n	80109da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d00b      	beq.n	80109da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2201      	movs	r2, #1
 80109c6:	601a      	str	r2, [r3, #0]
 80109c8:	e007      	b.n	80109da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80109ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80109ce:	3301      	adds	r3, #1
 80109d0:	b2db      	uxtb	r3, r3
 80109d2:	b25a      	sxtb	r2, r3
 80109d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80109da:	2301      	movs	r3, #1
 80109dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80109de:	e001      	b.n	80109e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80109e0:	2300      	movs	r3, #0
 80109e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80109e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80109e8:	697b      	ldr	r3, [r7, #20]
 80109ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80109ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80109f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3740      	adds	r7, #64	; 0x40
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}

080109fa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80109fa:	b580      	push	{r7, lr}
 80109fc:	b08e      	sub	sp, #56	; 0x38
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
 8010a02:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d10a      	bne.n	8010a24 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a12:	f383 8811 	msr	BASEPRI, r3
 8010a16:	f3bf 8f6f 	isb	sy
 8010a1a:	f3bf 8f4f 	dsb	sy
 8010a1e:	623b      	str	r3, [r7, #32]
}
 8010a20:	bf00      	nop
 8010a22:	e7fe      	b.n	8010a22 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d00a      	beq.n	8010a42 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a30:	f383 8811 	msr	BASEPRI, r3
 8010a34:	f3bf 8f6f 	isb	sy
 8010a38:	f3bf 8f4f 	dsb	sy
 8010a3c:	61fb      	str	r3, [r7, #28]
}
 8010a3e:	bf00      	nop
 8010a40:	e7fe      	b.n	8010a40 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d103      	bne.n	8010a52 <xQueueGiveFromISR+0x58>
 8010a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a4c:	689b      	ldr	r3, [r3, #8]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d101      	bne.n	8010a56 <xQueueGiveFromISR+0x5c>
 8010a52:	2301      	movs	r3, #1
 8010a54:	e000      	b.n	8010a58 <xQueueGiveFromISR+0x5e>
 8010a56:	2300      	movs	r3, #0
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d10a      	bne.n	8010a72 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a60:	f383 8811 	msr	BASEPRI, r3
 8010a64:	f3bf 8f6f 	isb	sy
 8010a68:	f3bf 8f4f 	dsb	sy
 8010a6c:	61bb      	str	r3, [r7, #24]
}
 8010a6e:	bf00      	nop
 8010a70:	e7fe      	b.n	8010a70 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a72:	f002 fe61 	bl	8013738 <vPortValidateInterruptPriority>
	__asm volatile
 8010a76:	f3ef 8211 	mrs	r2, BASEPRI
 8010a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a7e:	f383 8811 	msr	BASEPRI, r3
 8010a82:	f3bf 8f6f 	isb	sy
 8010a86:	f3bf 8f4f 	dsb	sy
 8010a8a:	617a      	str	r2, [r7, #20]
 8010a8c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010a8e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d22b      	bcs.n	8010afa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aae:	1c5a      	adds	r2, r3, #1
 8010ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010ab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010abc:	d112      	bne.n	8010ae4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d016      	beq.n	8010af4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac8:	3324      	adds	r3, #36	; 0x24
 8010aca:	4618      	mov	r0, r3
 8010acc:	f001 f9ea 	bl	8011ea4 <xTaskRemoveFromEventList>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d00e      	beq.n	8010af4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010ad6:	683b      	ldr	r3, [r7, #0]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d00b      	beq.n	8010af4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	2201      	movs	r2, #1
 8010ae0:	601a      	str	r2, [r3, #0]
 8010ae2:	e007      	b.n	8010af4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ae8:	3301      	adds	r3, #1
 8010aea:	b2db      	uxtb	r3, r3
 8010aec:	b25a      	sxtb	r2, r3
 8010aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010af4:	2301      	movs	r3, #1
 8010af6:	637b      	str	r3, [r7, #52]	; 0x34
 8010af8:	e001      	b.n	8010afe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010afa:	2300      	movs	r3, #0
 8010afc:	637b      	str	r3, [r7, #52]	; 0x34
 8010afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b00:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f383 8811 	msr	BASEPRI, r3
}
 8010b08:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3738      	adds	r7, #56	; 0x38
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b08c      	sub	sp, #48	; 0x30
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010b20:	2300      	movs	r3, #0
 8010b22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d10a      	bne.n	8010b44 <xQueueReceive+0x30>
	__asm volatile
 8010b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b32:	f383 8811 	msr	BASEPRI, r3
 8010b36:	f3bf 8f6f 	isb	sy
 8010b3a:	f3bf 8f4f 	dsb	sy
 8010b3e:	623b      	str	r3, [r7, #32]
}
 8010b40:	bf00      	nop
 8010b42:	e7fe      	b.n	8010b42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d103      	bne.n	8010b52 <xQueueReceive+0x3e>
 8010b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d101      	bne.n	8010b56 <xQueueReceive+0x42>
 8010b52:	2301      	movs	r3, #1
 8010b54:	e000      	b.n	8010b58 <xQueueReceive+0x44>
 8010b56:	2300      	movs	r3, #0
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d10a      	bne.n	8010b72 <xQueueReceive+0x5e>
	__asm volatile
 8010b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b60:	f383 8811 	msr	BASEPRI, r3
 8010b64:	f3bf 8f6f 	isb	sy
 8010b68:	f3bf 8f4f 	dsb	sy
 8010b6c:	61fb      	str	r3, [r7, #28]
}
 8010b6e:	bf00      	nop
 8010b70:	e7fe      	b.n	8010b70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b72:	f001 fb69 	bl	8012248 <xTaskGetSchedulerState>
 8010b76:	4603      	mov	r3, r0
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d102      	bne.n	8010b82 <xQueueReceive+0x6e>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d101      	bne.n	8010b86 <xQueueReceive+0x72>
 8010b82:	2301      	movs	r3, #1
 8010b84:	e000      	b.n	8010b88 <xQueueReceive+0x74>
 8010b86:	2300      	movs	r3, #0
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d10a      	bne.n	8010ba2 <xQueueReceive+0x8e>
	__asm volatile
 8010b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b90:	f383 8811 	msr	BASEPRI, r3
 8010b94:	f3bf 8f6f 	isb	sy
 8010b98:	f3bf 8f4f 	dsb	sy
 8010b9c:	61bb      	str	r3, [r7, #24]
}
 8010b9e:	bf00      	nop
 8010ba0:	e7fe      	b.n	8010ba0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010ba2:	f002 fce7 	bl	8013574 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010baa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d01f      	beq.n	8010bf2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010bb2:	68b9      	ldr	r1, [r7, #8]
 8010bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010bb6:	f000 fabe 	bl	8011136 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bbc:	1e5a      	subs	r2, r3, #1
 8010bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc4:	691b      	ldr	r3, [r3, #16]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d00f      	beq.n	8010bea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bcc:	3310      	adds	r3, #16
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f001 f968 	bl	8011ea4 <xTaskRemoveFromEventList>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d007      	beq.n	8010bea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010bda:	4b3d      	ldr	r3, [pc, #244]	; (8010cd0 <xQueueReceive+0x1bc>)
 8010bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010be0:	601a      	str	r2, [r3, #0]
 8010be2:	f3bf 8f4f 	dsb	sy
 8010be6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010bea:	f002 fcf3 	bl	80135d4 <vPortExitCritical>
				return pdPASS;
 8010bee:	2301      	movs	r3, #1
 8010bf0:	e069      	b.n	8010cc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d103      	bne.n	8010c00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010bf8:	f002 fcec 	bl	80135d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	e062      	b.n	8010cc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d106      	bne.n	8010c14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010c06:	f107 0310 	add.w	r3, r7, #16
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f001 f9ae 	bl	8011f6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010c10:	2301      	movs	r3, #1
 8010c12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010c14:	f002 fcde 	bl	80135d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010c18:	f000 ff08 	bl	8011a2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010c1c:	f002 fcaa 	bl	8013574 <vPortEnterCritical>
 8010c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c26:	b25b      	sxtb	r3, r3
 8010c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c2c:	d103      	bne.n	8010c36 <xQueueReceive+0x122>
 8010c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c30:	2200      	movs	r2, #0
 8010c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c3c:	b25b      	sxtb	r3, r3
 8010c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c42:	d103      	bne.n	8010c4c <xQueueReceive+0x138>
 8010c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c46:	2200      	movs	r2, #0
 8010c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c4c:	f002 fcc2 	bl	80135d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c50:	1d3a      	adds	r2, r7, #4
 8010c52:	f107 0310 	add.w	r3, r7, #16
 8010c56:	4611      	mov	r1, r2
 8010c58:	4618      	mov	r0, r3
 8010c5a:	f001 f99d 	bl	8011f98 <xTaskCheckForTimeOut>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d123      	bne.n	8010cac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c66:	f000 fade 	bl	8011226 <prvIsQueueEmpty>
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d017      	beq.n	8010ca0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c72:	3324      	adds	r3, #36	; 0x24
 8010c74:	687a      	ldr	r2, [r7, #4]
 8010c76:	4611      	mov	r1, r2
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f001 f8c3 	bl	8011e04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c80:	f000 fa7f 	bl	8011182 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c84:	f000 fee0 	bl	8011a48 <xTaskResumeAll>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d189      	bne.n	8010ba2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010c8e:	4b10      	ldr	r3, [pc, #64]	; (8010cd0 <xQueueReceive+0x1bc>)
 8010c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c94:	601a      	str	r2, [r3, #0]
 8010c96:	f3bf 8f4f 	dsb	sy
 8010c9a:	f3bf 8f6f 	isb	sy
 8010c9e:	e780      	b.n	8010ba2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010ca2:	f000 fa6e 	bl	8011182 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010ca6:	f000 fecf 	bl	8011a48 <xTaskResumeAll>
 8010caa:	e77a      	b.n	8010ba2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cae:	f000 fa68 	bl	8011182 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010cb2:	f000 fec9 	bl	8011a48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010cb8:	f000 fab5 	bl	8011226 <prvIsQueueEmpty>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	f43f af6f 	beq.w	8010ba2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010cc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3730      	adds	r7, #48	; 0x30
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	e000ed04 	.word	0xe000ed04

08010cd4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b08e      	sub	sp, #56	; 0x38
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
 8010cdc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d10a      	bne.n	8010d06 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf4:	f383 8811 	msr	BASEPRI, r3
 8010cf8:	f3bf 8f6f 	isb	sy
 8010cfc:	f3bf 8f4f 	dsb	sy
 8010d00:	623b      	str	r3, [r7, #32]
}
 8010d02:	bf00      	nop
 8010d04:	e7fe      	b.n	8010d04 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00a      	beq.n	8010d24 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d12:	f383 8811 	msr	BASEPRI, r3
 8010d16:	f3bf 8f6f 	isb	sy
 8010d1a:	f3bf 8f4f 	dsb	sy
 8010d1e:	61fb      	str	r3, [r7, #28]
}
 8010d20:	bf00      	nop
 8010d22:	e7fe      	b.n	8010d22 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d24:	f001 fa90 	bl	8012248 <xTaskGetSchedulerState>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d102      	bne.n	8010d34 <xQueueSemaphoreTake+0x60>
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d101      	bne.n	8010d38 <xQueueSemaphoreTake+0x64>
 8010d34:	2301      	movs	r3, #1
 8010d36:	e000      	b.n	8010d3a <xQueueSemaphoreTake+0x66>
 8010d38:	2300      	movs	r3, #0
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d10a      	bne.n	8010d54 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d42:	f383 8811 	msr	BASEPRI, r3
 8010d46:	f3bf 8f6f 	isb	sy
 8010d4a:	f3bf 8f4f 	dsb	sy
 8010d4e:	61bb      	str	r3, [r7, #24]
}
 8010d50:	bf00      	nop
 8010d52:	e7fe      	b.n	8010d52 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d54:	f002 fc0e 	bl	8013574 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d5c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d024      	beq.n	8010dae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d66:	1e5a      	subs	r2, r3, #1
 8010d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d6a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d104      	bne.n	8010d7e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010d74:	f001 fbde 	bl	8012534 <pvTaskIncrementMutexHeldCount>
 8010d78:	4602      	mov	r2, r0
 8010d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d80:	691b      	ldr	r3, [r3, #16]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d00f      	beq.n	8010da6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d88:	3310      	adds	r3, #16
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f001 f88a 	bl	8011ea4 <xTaskRemoveFromEventList>
 8010d90:	4603      	mov	r3, r0
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d007      	beq.n	8010da6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010d96:	4b54      	ldr	r3, [pc, #336]	; (8010ee8 <xQueueSemaphoreTake+0x214>)
 8010d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d9c:	601a      	str	r2, [r3, #0]
 8010d9e:	f3bf 8f4f 	dsb	sy
 8010da2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010da6:	f002 fc15 	bl	80135d4 <vPortExitCritical>
				return pdPASS;
 8010daa:	2301      	movs	r3, #1
 8010dac:	e097      	b.n	8010ede <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d111      	bne.n	8010dd8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d00a      	beq.n	8010dd0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dbe:	f383 8811 	msr	BASEPRI, r3
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	f3bf 8f4f 	dsb	sy
 8010dca:	617b      	str	r3, [r7, #20]
}
 8010dcc:	bf00      	nop
 8010dce:	e7fe      	b.n	8010dce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010dd0:	f002 fc00 	bl	80135d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	e082      	b.n	8010ede <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d106      	bne.n	8010dec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010dde:	f107 030c 	add.w	r3, r7, #12
 8010de2:	4618      	mov	r0, r3
 8010de4:	f001 f8c2 	bl	8011f6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010de8:	2301      	movs	r3, #1
 8010dea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010dec:	f002 fbf2 	bl	80135d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010df0:	f000 fe1c 	bl	8011a2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010df4:	f002 fbbe 	bl	8013574 <vPortEnterCritical>
 8010df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010dfe:	b25b      	sxtb	r3, r3
 8010e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e04:	d103      	bne.n	8010e0e <xQueueSemaphoreTake+0x13a>
 8010e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e08:	2200      	movs	r2, #0
 8010e0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e14:	b25b      	sxtb	r3, r3
 8010e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e1a:	d103      	bne.n	8010e24 <xQueueSemaphoreTake+0x150>
 8010e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e1e:	2200      	movs	r2, #0
 8010e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e24:	f002 fbd6 	bl	80135d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e28:	463a      	mov	r2, r7
 8010e2a:	f107 030c 	add.w	r3, r7, #12
 8010e2e:	4611      	mov	r1, r2
 8010e30:	4618      	mov	r0, r3
 8010e32:	f001 f8b1 	bl	8011f98 <xTaskCheckForTimeOut>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d132      	bne.n	8010ea2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e3e:	f000 f9f2 	bl	8011226 <prvIsQueueEmpty>
 8010e42:	4603      	mov	r3, r0
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d026      	beq.n	8010e96 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d109      	bne.n	8010e64 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010e50:	f002 fb90 	bl	8013574 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e56:	689b      	ldr	r3, [r3, #8]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f001 fa13 	bl	8012284 <xTaskPriorityInherit>
 8010e5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010e60:	f002 fbb8 	bl	80135d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e66:	3324      	adds	r3, #36	; 0x24
 8010e68:	683a      	ldr	r2, [r7, #0]
 8010e6a:	4611      	mov	r1, r2
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f000 ffc9 	bl	8011e04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e74:	f000 f985 	bl	8011182 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e78:	f000 fde6 	bl	8011a48 <xTaskResumeAll>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	f47f af68 	bne.w	8010d54 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010e84:	4b18      	ldr	r3, [pc, #96]	; (8010ee8 <xQueueSemaphoreTake+0x214>)
 8010e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e8a:	601a      	str	r2, [r3, #0]
 8010e8c:	f3bf 8f4f 	dsb	sy
 8010e90:	f3bf 8f6f 	isb	sy
 8010e94:	e75e      	b.n	8010d54 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e98:	f000 f973 	bl	8011182 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e9c:	f000 fdd4 	bl	8011a48 <xTaskResumeAll>
 8010ea0:	e758      	b.n	8010d54 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010ea2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ea4:	f000 f96d 	bl	8011182 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010ea8:	f000 fdce 	bl	8011a48 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010eac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010eae:	f000 f9ba 	bl	8011226 <prvIsQueueEmpty>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	f43f af4d 	beq.w	8010d54 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d00d      	beq.n	8010edc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010ec0:	f002 fb58 	bl	8013574 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010ec4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ec6:	f000 f8b4 	bl	8011032 <prvGetDisinheritPriorityAfterTimeout>
 8010eca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ece:	689b      	ldr	r3, [r3, #8]
 8010ed0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	f001 faac 	bl	8012430 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010ed8:	f002 fb7c 	bl	80135d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010edc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3738      	adds	r7, #56	; 0x38
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}
 8010ee6:	bf00      	nop
 8010ee8:	e000ed04 	.word	0xe000ed04

08010eec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b08e      	sub	sp, #56	; 0x38
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60f8      	str	r0, [r7, #12]
 8010ef4:	60b9      	str	r1, [r7, #8]
 8010ef6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d10a      	bne.n	8010f18 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f06:	f383 8811 	msr	BASEPRI, r3
 8010f0a:	f3bf 8f6f 	isb	sy
 8010f0e:	f3bf 8f4f 	dsb	sy
 8010f12:	623b      	str	r3, [r7, #32]
}
 8010f14:	bf00      	nop
 8010f16:	e7fe      	b.n	8010f16 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d103      	bne.n	8010f26 <xQueueReceiveFromISR+0x3a>
 8010f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d101      	bne.n	8010f2a <xQueueReceiveFromISR+0x3e>
 8010f26:	2301      	movs	r3, #1
 8010f28:	e000      	b.n	8010f2c <xQueueReceiveFromISR+0x40>
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d10a      	bne.n	8010f46 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f34:	f383 8811 	msr	BASEPRI, r3
 8010f38:	f3bf 8f6f 	isb	sy
 8010f3c:	f3bf 8f4f 	dsb	sy
 8010f40:	61fb      	str	r3, [r7, #28]
}
 8010f42:	bf00      	nop
 8010f44:	e7fe      	b.n	8010f44 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f46:	f002 fbf7 	bl	8013738 <vPortValidateInterruptPriority>
	__asm volatile
 8010f4a:	f3ef 8211 	mrs	r2, BASEPRI
 8010f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f52:	f383 8811 	msr	BASEPRI, r3
 8010f56:	f3bf 8f6f 	isb	sy
 8010f5a:	f3bf 8f4f 	dsb	sy
 8010f5e:	61ba      	str	r2, [r7, #24]
 8010f60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010f62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d02f      	beq.n	8010fd2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f7c:	68b9      	ldr	r1, [r7, #8]
 8010f7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f80:	f000 f8d9 	bl	8011136 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f86:	1e5a      	subs	r2, r3, #1
 8010f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010f8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f94:	d112      	bne.n	8010fbc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f98:	691b      	ldr	r3, [r3, #16]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d016      	beq.n	8010fcc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa0:	3310      	adds	r3, #16
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f000 ff7e 	bl	8011ea4 <xTaskRemoveFromEventList>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d00e      	beq.n	8010fcc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d00b      	beq.n	8010fcc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2201      	movs	r2, #1
 8010fb8:	601a      	str	r2, [r3, #0]
 8010fba:	e007      	b.n	8010fcc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fc0:	3301      	adds	r3, #1
 8010fc2:	b2db      	uxtb	r3, r3
 8010fc4:	b25a      	sxtb	r2, r3
 8010fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010fcc:	2301      	movs	r3, #1
 8010fce:	637b      	str	r3, [r7, #52]	; 0x34
 8010fd0:	e001      	b.n	8010fd6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8010fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	f383 8811 	msr	BASEPRI, r3
}
 8010fe0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3738      	adds	r7, #56	; 0x38
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b084      	sub	sp, #16
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d10a      	bne.n	8011014 <vQueueDelete+0x28>
	__asm volatile
 8010ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011002:	f383 8811 	msr	BASEPRI, r3
 8011006:	f3bf 8f6f 	isb	sy
 801100a:	f3bf 8f4f 	dsb	sy
 801100e:	60bb      	str	r3, [r7, #8]
}
 8011010:	bf00      	nop
 8011012:	e7fe      	b.n	8011012 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011014:	68f8      	ldr	r0, [r7, #12]
 8011016:	f000 f95f 	bl	80112d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011020:	2b00      	cmp	r3, #0
 8011022:	d102      	bne.n	801102a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8011024:	68f8      	ldr	r0, [r7, #12]
 8011026:	f002 fc93 	bl	8013950 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801102a:	bf00      	nop
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}

08011032 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011032:	b480      	push	{r7}
 8011034:	b085      	sub	sp, #20
 8011036:	af00      	add	r7, sp, #0
 8011038:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801103e:	2b00      	cmp	r3, #0
 8011040:	d006      	beq.n	8011050 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801104c:	60fb      	str	r3, [r7, #12]
 801104e:	e001      	b.n	8011054 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011050:	2300      	movs	r3, #0
 8011052:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011054:	68fb      	ldr	r3, [r7, #12]
	}
 8011056:	4618      	mov	r0, r3
 8011058:	3714      	adds	r7, #20
 801105a:	46bd      	mov	sp, r7
 801105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011060:	4770      	bx	lr

08011062 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011062:	b580      	push	{r7, lr}
 8011064:	b086      	sub	sp, #24
 8011066:	af00      	add	r7, sp, #0
 8011068:	60f8      	str	r0, [r7, #12]
 801106a:	60b9      	str	r1, [r7, #8]
 801106c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801106e:	2300      	movs	r3, #0
 8011070:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011076:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801107c:	2b00      	cmp	r3, #0
 801107e:	d10d      	bne.n	801109c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d14d      	bne.n	8011124 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	689b      	ldr	r3, [r3, #8]
 801108c:	4618      	mov	r0, r3
 801108e:	f001 f961 	bl	8012354 <xTaskPriorityDisinherit>
 8011092:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	2200      	movs	r2, #0
 8011098:	609a      	str	r2, [r3, #8]
 801109a:	e043      	b.n	8011124 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d119      	bne.n	80110d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	6858      	ldr	r0, [r3, #4]
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110aa:	461a      	mov	r2, r3
 80110ac:	68b9      	ldr	r1, [r7, #8]
 80110ae:	f012 f988 	bl	80233c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	685a      	ldr	r2, [r3, #4]
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110ba:	441a      	add	r2, r3
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	685a      	ldr	r2, [r3, #4]
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	689b      	ldr	r3, [r3, #8]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d32b      	bcc.n	8011124 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	605a      	str	r2, [r3, #4]
 80110d4:	e026      	b.n	8011124 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	68d8      	ldr	r0, [r3, #12]
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110de:	461a      	mov	r2, r3
 80110e0:	68b9      	ldr	r1, [r7, #8]
 80110e2:	f012 f96e 	bl	80233c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	68da      	ldr	r2, [r3, #12]
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110ee:	425b      	negs	r3, r3
 80110f0:	441a      	add	r2, r3
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	68da      	ldr	r2, [r3, #12]
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	429a      	cmp	r2, r3
 8011100:	d207      	bcs.n	8011112 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	689a      	ldr	r2, [r3, #8]
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801110a:	425b      	negs	r3, r3
 801110c:	441a      	add	r2, r3
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	2b02      	cmp	r3, #2
 8011116:	d105      	bne.n	8011124 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d002      	beq.n	8011124 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	3b01      	subs	r3, #1
 8011122:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011124:	693b      	ldr	r3, [r7, #16]
 8011126:	1c5a      	adds	r2, r3, #1
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801112c:	697b      	ldr	r3, [r7, #20]
}
 801112e:	4618      	mov	r0, r3
 8011130:	3718      	adds	r7, #24
 8011132:	46bd      	mov	sp, r7
 8011134:	bd80      	pop	{r7, pc}

08011136 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011136:	b580      	push	{r7, lr}
 8011138:	b082      	sub	sp, #8
 801113a:	af00      	add	r7, sp, #0
 801113c:	6078      	str	r0, [r7, #4]
 801113e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011144:	2b00      	cmp	r3, #0
 8011146:	d018      	beq.n	801117a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	68da      	ldr	r2, [r3, #12]
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011150:	441a      	add	r2, r3
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	68da      	ldr	r2, [r3, #12]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	689b      	ldr	r3, [r3, #8]
 801115e:	429a      	cmp	r2, r3
 8011160:	d303      	bcc.n	801116a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681a      	ldr	r2, [r3, #0]
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	68d9      	ldr	r1, [r3, #12]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011172:	461a      	mov	r2, r3
 8011174:	6838      	ldr	r0, [r7, #0]
 8011176:	f012 f924 	bl	80233c2 <memcpy>
	}
}
 801117a:	bf00      	nop
 801117c:	3708      	adds	r7, #8
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}

08011182 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011182:	b580      	push	{r7, lr}
 8011184:	b084      	sub	sp, #16
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801118a:	f002 f9f3 	bl	8013574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011194:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011196:	e011      	b.n	80111bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801119c:	2b00      	cmp	r3, #0
 801119e:	d012      	beq.n	80111c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	3324      	adds	r3, #36	; 0x24
 80111a4:	4618      	mov	r0, r3
 80111a6:	f000 fe7d 	bl	8011ea4 <xTaskRemoveFromEventList>
 80111aa:	4603      	mov	r3, r0
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d001      	beq.n	80111b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80111b0:	f000 ff54 	bl	801205c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80111b4:	7bfb      	ldrb	r3, [r7, #15]
 80111b6:	3b01      	subs	r3, #1
 80111b8:	b2db      	uxtb	r3, r3
 80111ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80111bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	dce9      	bgt.n	8011198 <prvUnlockQueue+0x16>
 80111c4:	e000      	b.n	80111c8 <prvUnlockQueue+0x46>
					break;
 80111c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	22ff      	movs	r2, #255	; 0xff
 80111cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80111d0:	f002 fa00 	bl	80135d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80111d4:	f002 f9ce 	bl	8013574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80111de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80111e0:	e011      	b.n	8011206 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	691b      	ldr	r3, [r3, #16]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d012      	beq.n	8011210 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	3310      	adds	r3, #16
 80111ee:	4618      	mov	r0, r3
 80111f0:	f000 fe58 	bl	8011ea4 <xTaskRemoveFromEventList>
 80111f4:	4603      	mov	r3, r0
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d001      	beq.n	80111fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80111fa:	f000 ff2f 	bl	801205c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80111fe:	7bbb      	ldrb	r3, [r7, #14]
 8011200:	3b01      	subs	r3, #1
 8011202:	b2db      	uxtb	r3, r3
 8011204:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011206:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801120a:	2b00      	cmp	r3, #0
 801120c:	dce9      	bgt.n	80111e2 <prvUnlockQueue+0x60>
 801120e:	e000      	b.n	8011212 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011210:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	22ff      	movs	r2, #255	; 0xff
 8011216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801121a:	f002 f9db 	bl	80135d4 <vPortExitCritical>
}
 801121e:	bf00      	nop
 8011220:	3710      	adds	r7, #16
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011226:	b580      	push	{r7, lr}
 8011228:	b084      	sub	sp, #16
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801122e:	f002 f9a1 	bl	8013574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011236:	2b00      	cmp	r3, #0
 8011238:	d102      	bne.n	8011240 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801123a:	2301      	movs	r3, #1
 801123c:	60fb      	str	r3, [r7, #12]
 801123e:	e001      	b.n	8011244 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011240:	2300      	movs	r3, #0
 8011242:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011244:	f002 f9c6 	bl	80135d4 <vPortExitCritical>

	return xReturn;
 8011248:	68fb      	ldr	r3, [r7, #12]
}
 801124a:	4618      	mov	r0, r3
 801124c:	3710      	adds	r7, #16
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}

08011252 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011252:	b580      	push	{r7, lr}
 8011254:	b084      	sub	sp, #16
 8011256:	af00      	add	r7, sp, #0
 8011258:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801125a:	f002 f98b 	bl	8013574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011266:	429a      	cmp	r2, r3
 8011268:	d102      	bne.n	8011270 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801126a:	2301      	movs	r3, #1
 801126c:	60fb      	str	r3, [r7, #12]
 801126e:	e001      	b.n	8011274 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011270:	2300      	movs	r3, #0
 8011272:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011274:	f002 f9ae 	bl	80135d4 <vPortExitCritical>

	return xReturn;
 8011278:	68fb      	ldr	r3, [r7, #12]
}
 801127a:	4618      	mov	r0, r3
 801127c:	3710      	adds	r7, #16
 801127e:	46bd      	mov	sp, r7
 8011280:	bd80      	pop	{r7, pc}
	...

08011284 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011284:	b480      	push	{r7}
 8011286:	b085      	sub	sp, #20
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801128e:	2300      	movs	r3, #0
 8011290:	60fb      	str	r3, [r7, #12]
 8011292:	e014      	b.n	80112be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011294:	4a0f      	ldr	r2, [pc, #60]	; (80112d4 <vQueueAddToRegistry+0x50>)
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d10b      	bne.n	80112b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80112a0:	490c      	ldr	r1, [pc, #48]	; (80112d4 <vQueueAddToRegistry+0x50>)
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	683a      	ldr	r2, [r7, #0]
 80112a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80112aa:	4a0a      	ldr	r2, [pc, #40]	; (80112d4 <vQueueAddToRegistry+0x50>)
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	00db      	lsls	r3, r3, #3
 80112b0:	4413      	add	r3, r2
 80112b2:	687a      	ldr	r2, [r7, #4]
 80112b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80112b6:	e006      	b.n	80112c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	3301      	adds	r3, #1
 80112bc:	60fb      	str	r3, [r7, #12]
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2b07      	cmp	r3, #7
 80112c2:	d9e7      	bls.n	8011294 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80112c4:	bf00      	nop
 80112c6:	bf00      	nop
 80112c8:	3714      	adds	r7, #20
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr
 80112d2:	bf00      	nop
 80112d4:	240013d0 	.word	0x240013d0

080112d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80112d8:	b480      	push	{r7}
 80112da:	b085      	sub	sp, #20
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80112e0:	2300      	movs	r3, #0
 80112e2:	60fb      	str	r3, [r7, #12]
 80112e4:	e016      	b.n	8011314 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80112e6:	4a10      	ldr	r2, [pc, #64]	; (8011328 <vQueueUnregisterQueue+0x50>)
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	00db      	lsls	r3, r3, #3
 80112ec:	4413      	add	r3, r2
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	687a      	ldr	r2, [r7, #4]
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d10b      	bne.n	801130e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80112f6:	4a0c      	ldr	r2, [pc, #48]	; (8011328 <vQueueUnregisterQueue+0x50>)
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	2100      	movs	r1, #0
 80112fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011300:	4a09      	ldr	r2, [pc, #36]	; (8011328 <vQueueUnregisterQueue+0x50>)
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	00db      	lsls	r3, r3, #3
 8011306:	4413      	add	r3, r2
 8011308:	2200      	movs	r2, #0
 801130a:	605a      	str	r2, [r3, #4]
				break;
 801130c:	e006      	b.n	801131c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	3301      	adds	r3, #1
 8011312:	60fb      	str	r3, [r7, #12]
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	2b07      	cmp	r3, #7
 8011318:	d9e5      	bls.n	80112e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801131a:	bf00      	nop
 801131c:	bf00      	nop
 801131e:	3714      	adds	r7, #20
 8011320:	46bd      	mov	sp, r7
 8011322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011326:	4770      	bx	lr
 8011328:	240013d0 	.word	0x240013d0

0801132c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801132c:	b580      	push	{r7, lr}
 801132e:	b086      	sub	sp, #24
 8011330:	af00      	add	r7, sp, #0
 8011332:	60f8      	str	r0, [r7, #12]
 8011334:	60b9      	str	r1, [r7, #8]
 8011336:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801133c:	f002 f91a 	bl	8013574 <vPortEnterCritical>
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011346:	b25b      	sxtb	r3, r3
 8011348:	f1b3 3fff 	cmp.w	r3, #4294967295
 801134c:	d103      	bne.n	8011356 <vQueueWaitForMessageRestricted+0x2a>
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	2200      	movs	r2, #0
 8011352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801135c:	b25b      	sxtb	r3, r3
 801135e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011362:	d103      	bne.n	801136c <vQueueWaitForMessageRestricted+0x40>
 8011364:	697b      	ldr	r3, [r7, #20]
 8011366:	2200      	movs	r2, #0
 8011368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801136c:	f002 f932 	bl	80135d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011370:	697b      	ldr	r3, [r7, #20]
 8011372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011374:	2b00      	cmp	r3, #0
 8011376:	d106      	bne.n	8011386 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	3324      	adds	r3, #36	; 0x24
 801137c:	687a      	ldr	r2, [r7, #4]
 801137e:	68b9      	ldr	r1, [r7, #8]
 8011380:	4618      	mov	r0, r3
 8011382:	f000 fd63 	bl	8011e4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011386:	6978      	ldr	r0, [r7, #20]
 8011388:	f7ff fefb 	bl	8011182 <prvUnlockQueue>
	}
 801138c:	bf00      	nop
 801138e:	3718      	adds	r7, #24
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011394:	b580      	push	{r7, lr}
 8011396:	b08e      	sub	sp, #56	; 0x38
 8011398:	af04      	add	r7, sp, #16
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	60b9      	str	r1, [r7, #8]
 801139e:	607a      	str	r2, [r7, #4]
 80113a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80113a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d10a      	bne.n	80113be <xTaskCreateStatic+0x2a>
	__asm volatile
 80113a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ac:	f383 8811 	msr	BASEPRI, r3
 80113b0:	f3bf 8f6f 	isb	sy
 80113b4:	f3bf 8f4f 	dsb	sy
 80113b8:	623b      	str	r3, [r7, #32]
}
 80113ba:	bf00      	nop
 80113bc:	e7fe      	b.n	80113bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80113be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d10a      	bne.n	80113da <xTaskCreateStatic+0x46>
	__asm volatile
 80113c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c8:	f383 8811 	msr	BASEPRI, r3
 80113cc:	f3bf 8f6f 	isb	sy
 80113d0:	f3bf 8f4f 	dsb	sy
 80113d4:	61fb      	str	r3, [r7, #28]
}
 80113d6:	bf00      	nop
 80113d8:	e7fe      	b.n	80113d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80113da:	23a8      	movs	r3, #168	; 0xa8
 80113dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80113de:	693b      	ldr	r3, [r7, #16]
 80113e0:	2ba8      	cmp	r3, #168	; 0xa8
 80113e2:	d00a      	beq.n	80113fa <xTaskCreateStatic+0x66>
	__asm volatile
 80113e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e8:	f383 8811 	msr	BASEPRI, r3
 80113ec:	f3bf 8f6f 	isb	sy
 80113f0:	f3bf 8f4f 	dsb	sy
 80113f4:	61bb      	str	r3, [r7, #24]
}
 80113f6:	bf00      	nop
 80113f8:	e7fe      	b.n	80113f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80113fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80113fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d01e      	beq.n	8011440 <xTaskCreateStatic+0xac>
 8011402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011404:	2b00      	cmp	r3, #0
 8011406:	d01b      	beq.n	8011440 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801140a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801140e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011410:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011414:	2202      	movs	r2, #2
 8011416:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801141a:	2300      	movs	r3, #0
 801141c:	9303      	str	r3, [sp, #12]
 801141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011420:	9302      	str	r3, [sp, #8]
 8011422:	f107 0314 	add.w	r3, r7, #20
 8011426:	9301      	str	r3, [sp, #4]
 8011428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801142a:	9300      	str	r3, [sp, #0]
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	687a      	ldr	r2, [r7, #4]
 8011430:	68b9      	ldr	r1, [r7, #8]
 8011432:	68f8      	ldr	r0, [r7, #12]
 8011434:	f000 f850 	bl	80114d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801143a:	f000 f8f3 	bl	8011624 <prvAddNewTaskToReadyList>
 801143e:	e001      	b.n	8011444 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011440:	2300      	movs	r3, #0
 8011442:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011444:	697b      	ldr	r3, [r7, #20]
	}
 8011446:	4618      	mov	r0, r3
 8011448:	3728      	adds	r7, #40	; 0x28
 801144a:	46bd      	mov	sp, r7
 801144c:	bd80      	pop	{r7, pc}

0801144e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801144e:	b580      	push	{r7, lr}
 8011450:	b08c      	sub	sp, #48	; 0x30
 8011452:	af04      	add	r7, sp, #16
 8011454:	60f8      	str	r0, [r7, #12]
 8011456:	60b9      	str	r1, [r7, #8]
 8011458:	603b      	str	r3, [r7, #0]
 801145a:	4613      	mov	r3, r2
 801145c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801145e:	88fb      	ldrh	r3, [r7, #6]
 8011460:	009b      	lsls	r3, r3, #2
 8011462:	4618      	mov	r0, r3
 8011464:	f002 f9a8 	bl	80137b8 <pvPortMalloc>
 8011468:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d00e      	beq.n	801148e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011470:	20a8      	movs	r0, #168	; 0xa8
 8011472:	f002 f9a1 	bl	80137b8 <pvPortMalloc>
 8011476:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d003      	beq.n	8011486 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801147e:	69fb      	ldr	r3, [r7, #28]
 8011480:	697a      	ldr	r2, [r7, #20]
 8011482:	631a      	str	r2, [r3, #48]	; 0x30
 8011484:	e005      	b.n	8011492 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011486:	6978      	ldr	r0, [r7, #20]
 8011488:	f002 fa62 	bl	8013950 <vPortFree>
 801148c:	e001      	b.n	8011492 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801148e:	2300      	movs	r3, #0
 8011490:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011492:	69fb      	ldr	r3, [r7, #28]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d017      	beq.n	80114c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011498:	69fb      	ldr	r3, [r7, #28]
 801149a:	2200      	movs	r2, #0
 801149c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80114a0:	88fa      	ldrh	r2, [r7, #6]
 80114a2:	2300      	movs	r3, #0
 80114a4:	9303      	str	r3, [sp, #12]
 80114a6:	69fb      	ldr	r3, [r7, #28]
 80114a8:	9302      	str	r3, [sp, #8]
 80114aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114ac:	9301      	str	r3, [sp, #4]
 80114ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b0:	9300      	str	r3, [sp, #0]
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	68b9      	ldr	r1, [r7, #8]
 80114b6:	68f8      	ldr	r0, [r7, #12]
 80114b8:	f000 f80e 	bl	80114d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80114bc:	69f8      	ldr	r0, [r7, #28]
 80114be:	f000 f8b1 	bl	8011624 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80114c2:	2301      	movs	r3, #1
 80114c4:	61bb      	str	r3, [r7, #24]
 80114c6:	e002      	b.n	80114ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80114c8:	f04f 33ff 	mov.w	r3, #4294967295
 80114cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80114ce:	69bb      	ldr	r3, [r7, #24]
	}
 80114d0:	4618      	mov	r0, r3
 80114d2:	3720      	adds	r7, #32
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}

080114d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b088      	sub	sp, #32
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	607a      	str	r2, [r7, #4]
 80114e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80114e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	009b      	lsls	r3, r3, #2
 80114ee:	461a      	mov	r2, r3
 80114f0:	21a5      	movs	r1, #165	; 0xa5
 80114f2:	f011 fe90 	bl	8023216 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80114f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80114fa:	6879      	ldr	r1, [r7, #4]
 80114fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011500:	440b      	add	r3, r1
 8011502:	009b      	lsls	r3, r3, #2
 8011504:	4413      	add	r3, r2
 8011506:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011508:	69bb      	ldr	r3, [r7, #24]
 801150a:	f023 0307 	bic.w	r3, r3, #7
 801150e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011510:	69bb      	ldr	r3, [r7, #24]
 8011512:	f003 0307 	and.w	r3, r3, #7
 8011516:	2b00      	cmp	r3, #0
 8011518:	d00a      	beq.n	8011530 <prvInitialiseNewTask+0x58>
	__asm volatile
 801151a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801151e:	f383 8811 	msr	BASEPRI, r3
 8011522:	f3bf 8f6f 	isb	sy
 8011526:	f3bf 8f4f 	dsb	sy
 801152a:	617b      	str	r3, [r7, #20]
}
 801152c:	bf00      	nop
 801152e:	e7fe      	b.n	801152e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d01f      	beq.n	8011576 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011536:	2300      	movs	r3, #0
 8011538:	61fb      	str	r3, [r7, #28]
 801153a:	e012      	b.n	8011562 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801153c:	68ba      	ldr	r2, [r7, #8]
 801153e:	69fb      	ldr	r3, [r7, #28]
 8011540:	4413      	add	r3, r2
 8011542:	7819      	ldrb	r1, [r3, #0]
 8011544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011546:	69fb      	ldr	r3, [r7, #28]
 8011548:	4413      	add	r3, r2
 801154a:	3334      	adds	r3, #52	; 0x34
 801154c:	460a      	mov	r2, r1
 801154e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011550:	68ba      	ldr	r2, [r7, #8]
 8011552:	69fb      	ldr	r3, [r7, #28]
 8011554:	4413      	add	r3, r2
 8011556:	781b      	ldrb	r3, [r3, #0]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d006      	beq.n	801156a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	3301      	adds	r3, #1
 8011560:	61fb      	str	r3, [r7, #28]
 8011562:	69fb      	ldr	r3, [r7, #28]
 8011564:	2b0f      	cmp	r3, #15
 8011566:	d9e9      	bls.n	801153c <prvInitialiseNewTask+0x64>
 8011568:	e000      	b.n	801156c <prvInitialiseNewTask+0x94>
			{
				break;
 801156a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801156c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801156e:	2200      	movs	r2, #0
 8011570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011574:	e003      	b.n	801157e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011578:	2200      	movs	r2, #0
 801157a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801157e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011580:	2b37      	cmp	r3, #55	; 0x37
 8011582:	d901      	bls.n	8011588 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011584:	2337      	movs	r3, #55	; 0x37
 8011586:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801158a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801158c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801158e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011592:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011596:	2200      	movs	r2, #0
 8011598:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801159a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159c:	3304      	adds	r3, #4
 801159e:	4618      	mov	r0, r3
 80115a0:	f7fe fe56 	bl	8010250 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80115a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a6:	3318      	adds	r3, #24
 80115a8:	4618      	mov	r0, r3
 80115aa:	f7fe fe51 	bl	8010250 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80115ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80115b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80115ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80115be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80115c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115c6:	2200      	movs	r2, #0
 80115c8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80115cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ce:	2200      	movs	r2, #0
 80115d0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80115d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d6:	3354      	adds	r3, #84	; 0x54
 80115d8:	224c      	movs	r2, #76	; 0x4c
 80115da:	2100      	movs	r1, #0
 80115dc:	4618      	mov	r0, r3
 80115de:	f011 fe1a 	bl	8023216 <memset>
 80115e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e4:	4a0c      	ldr	r2, [pc, #48]	; (8011618 <prvInitialiseNewTask+0x140>)
 80115e6:	659a      	str	r2, [r3, #88]	; 0x58
 80115e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ea:	4a0c      	ldr	r2, [pc, #48]	; (801161c <prvInitialiseNewTask+0x144>)
 80115ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80115ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115f0:	4a0b      	ldr	r2, [pc, #44]	; (8011620 <prvInitialiseNewTask+0x148>)
 80115f2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80115f4:	683a      	ldr	r2, [r7, #0]
 80115f6:	68f9      	ldr	r1, [r7, #12]
 80115f8:	69b8      	ldr	r0, [r7, #24]
 80115fa:	f001 fe8d 	bl	8013318 <pxPortInitialiseStack>
 80115fe:	4602      	mov	r2, r0
 8011600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011602:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011606:	2b00      	cmp	r3, #0
 8011608:	d002      	beq.n	8011610 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801160c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801160e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011610:	bf00      	nop
 8011612:	3720      	adds	r7, #32
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}
 8011618:	2401e45c 	.word	0x2401e45c
 801161c:	2401e4c4 	.word	0x2401e4c4
 8011620:	2401e52c 	.word	0x2401e52c

08011624 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b082      	sub	sp, #8
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801162c:	f001 ffa2 	bl	8013574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011630:	4b2d      	ldr	r3, [pc, #180]	; (80116e8 <prvAddNewTaskToReadyList+0xc4>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	3301      	adds	r3, #1
 8011636:	4a2c      	ldr	r2, [pc, #176]	; (80116e8 <prvAddNewTaskToReadyList+0xc4>)
 8011638:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801163a:	4b2c      	ldr	r3, [pc, #176]	; (80116ec <prvAddNewTaskToReadyList+0xc8>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d109      	bne.n	8011656 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011642:	4a2a      	ldr	r2, [pc, #168]	; (80116ec <prvAddNewTaskToReadyList+0xc8>)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011648:	4b27      	ldr	r3, [pc, #156]	; (80116e8 <prvAddNewTaskToReadyList+0xc4>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b01      	cmp	r3, #1
 801164e:	d110      	bne.n	8011672 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011650:	f000 fd28 	bl	80120a4 <prvInitialiseTaskLists>
 8011654:	e00d      	b.n	8011672 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011656:	4b26      	ldr	r3, [pc, #152]	; (80116f0 <prvAddNewTaskToReadyList+0xcc>)
 8011658:	681b      	ldr	r3, [r3, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d109      	bne.n	8011672 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801165e:	4b23      	ldr	r3, [pc, #140]	; (80116ec <prvAddNewTaskToReadyList+0xc8>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011668:	429a      	cmp	r2, r3
 801166a:	d802      	bhi.n	8011672 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801166c:	4a1f      	ldr	r2, [pc, #124]	; (80116ec <prvAddNewTaskToReadyList+0xc8>)
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011672:	4b20      	ldr	r3, [pc, #128]	; (80116f4 <prvAddNewTaskToReadyList+0xd0>)
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	3301      	adds	r3, #1
 8011678:	4a1e      	ldr	r2, [pc, #120]	; (80116f4 <prvAddNewTaskToReadyList+0xd0>)
 801167a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801167c:	4b1d      	ldr	r3, [pc, #116]	; (80116f4 <prvAddNewTaskToReadyList+0xd0>)
 801167e:	681a      	ldr	r2, [r3, #0]
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011688:	4b1b      	ldr	r3, [pc, #108]	; (80116f8 <prvAddNewTaskToReadyList+0xd4>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	429a      	cmp	r2, r3
 801168e:	d903      	bls.n	8011698 <prvAddNewTaskToReadyList+0x74>
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011694:	4a18      	ldr	r2, [pc, #96]	; (80116f8 <prvAddNewTaskToReadyList+0xd4>)
 8011696:	6013      	str	r3, [r2, #0]
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801169c:	4613      	mov	r3, r2
 801169e:	009b      	lsls	r3, r3, #2
 80116a0:	4413      	add	r3, r2
 80116a2:	009b      	lsls	r3, r3, #2
 80116a4:	4a15      	ldr	r2, [pc, #84]	; (80116fc <prvAddNewTaskToReadyList+0xd8>)
 80116a6:	441a      	add	r2, r3
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	3304      	adds	r3, #4
 80116ac:	4619      	mov	r1, r3
 80116ae:	4610      	mov	r0, r2
 80116b0:	f7fe fddb 	bl	801026a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80116b4:	f001 ff8e 	bl	80135d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80116b8:	4b0d      	ldr	r3, [pc, #52]	; (80116f0 <prvAddNewTaskToReadyList+0xcc>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00e      	beq.n	80116de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80116c0:	4b0a      	ldr	r3, [pc, #40]	; (80116ec <prvAddNewTaskToReadyList+0xc8>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d207      	bcs.n	80116de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80116ce:	4b0c      	ldr	r3, [pc, #48]	; (8011700 <prvAddNewTaskToReadyList+0xdc>)
 80116d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116d4:	601a      	str	r2, [r3, #0]
 80116d6:	f3bf 8f4f 	dsb	sy
 80116da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80116de:	bf00      	nop
 80116e0:	3708      	adds	r7, #8
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
 80116e6:	bf00      	nop
 80116e8:	240018e4 	.word	0x240018e4
 80116ec:	24001410 	.word	0x24001410
 80116f0:	240018f0 	.word	0x240018f0
 80116f4:	24001900 	.word	0x24001900
 80116f8:	240018ec 	.word	0x240018ec
 80116fc:	24001414 	.word	0x24001414
 8011700:	e000ed04 	.word	0xe000ed04

08011704 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8011704:	b580      	push	{r7, lr}
 8011706:	b084      	sub	sp, #16
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 801170c:	f001 ff32 	bl	8013574 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d102      	bne.n	801171c <vTaskDelete+0x18>
 8011716:	4b2c      	ldr	r3, [pc, #176]	; (80117c8 <vTaskDelete+0xc4>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	e000      	b.n	801171e <vTaskDelete+0x1a>
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	3304      	adds	r3, #4
 8011724:	4618      	mov	r0, r3
 8011726:	f7fe fdfd 	bl	8010324 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801172e:	2b00      	cmp	r3, #0
 8011730:	d004      	beq.n	801173c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	3318      	adds	r3, #24
 8011736:	4618      	mov	r0, r3
 8011738:	f7fe fdf4 	bl	8010324 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801173c:	4b23      	ldr	r3, [pc, #140]	; (80117cc <vTaskDelete+0xc8>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	3301      	adds	r3, #1
 8011742:	4a22      	ldr	r2, [pc, #136]	; (80117cc <vTaskDelete+0xc8>)
 8011744:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8011746:	4b20      	ldr	r3, [pc, #128]	; (80117c8 <vTaskDelete+0xc4>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	68fa      	ldr	r2, [r7, #12]
 801174c:	429a      	cmp	r2, r3
 801174e:	d10b      	bne.n	8011768 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	3304      	adds	r3, #4
 8011754:	4619      	mov	r1, r3
 8011756:	481e      	ldr	r0, [pc, #120]	; (80117d0 <vTaskDelete+0xcc>)
 8011758:	f7fe fd87 	bl	801026a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801175c:	4b1d      	ldr	r3, [pc, #116]	; (80117d4 <vTaskDelete+0xd0>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	3301      	adds	r3, #1
 8011762:	4a1c      	ldr	r2, [pc, #112]	; (80117d4 <vTaskDelete+0xd0>)
 8011764:	6013      	str	r3, [r2, #0]
 8011766:	e009      	b.n	801177c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8011768:	4b1b      	ldr	r3, [pc, #108]	; (80117d8 <vTaskDelete+0xd4>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	3b01      	subs	r3, #1
 801176e:	4a1a      	ldr	r2, [pc, #104]	; (80117d8 <vTaskDelete+0xd4>)
 8011770:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8011772:	68f8      	ldr	r0, [r7, #12]
 8011774:	f000 fd04 	bl	8012180 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8011778:	f000 fd36 	bl	80121e8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801177c:	f001 ff2a 	bl	80135d4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8011780:	4b16      	ldr	r3, [pc, #88]	; (80117dc <vTaskDelete+0xd8>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d01b      	beq.n	80117c0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8011788:	4b0f      	ldr	r3, [pc, #60]	; (80117c8 <vTaskDelete+0xc4>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	68fa      	ldr	r2, [r7, #12]
 801178e:	429a      	cmp	r2, r3
 8011790:	d116      	bne.n	80117c0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8011792:	4b13      	ldr	r3, [pc, #76]	; (80117e0 <vTaskDelete+0xdc>)
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d00a      	beq.n	80117b0 <vTaskDelete+0xac>
	__asm volatile
 801179a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179e:	f383 8811 	msr	BASEPRI, r3
 80117a2:	f3bf 8f6f 	isb	sy
 80117a6:	f3bf 8f4f 	dsb	sy
 80117aa:	60bb      	str	r3, [r7, #8]
}
 80117ac:	bf00      	nop
 80117ae:	e7fe      	b.n	80117ae <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80117b0:	4b0c      	ldr	r3, [pc, #48]	; (80117e4 <vTaskDelete+0xe0>)
 80117b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117b6:	601a      	str	r2, [r3, #0]
 80117b8:	f3bf 8f4f 	dsb	sy
 80117bc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80117c0:	bf00      	nop
 80117c2:	3710      	adds	r7, #16
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}
 80117c8:	24001410 	.word	0x24001410
 80117cc:	24001900 	.word	0x24001900
 80117d0:	240018b8 	.word	0x240018b8
 80117d4:	240018cc 	.word	0x240018cc
 80117d8:	240018e4 	.word	0x240018e4
 80117dc:	240018f0 	.word	0x240018f0
 80117e0:	2400190c 	.word	0x2400190c
 80117e4:	e000ed04 	.word	0xe000ed04

080117e8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b08a      	sub	sp, #40	; 0x28
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80117f2:	2300      	movs	r3, #0
 80117f4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d10a      	bne.n	8011812 <vTaskDelayUntil+0x2a>
	__asm volatile
 80117fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011800:	f383 8811 	msr	BASEPRI, r3
 8011804:	f3bf 8f6f 	isb	sy
 8011808:	f3bf 8f4f 	dsb	sy
 801180c:	617b      	str	r3, [r7, #20]
}
 801180e:	bf00      	nop
 8011810:	e7fe      	b.n	8011810 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d10a      	bne.n	801182e <vTaskDelayUntil+0x46>
	__asm volatile
 8011818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801181c:	f383 8811 	msr	BASEPRI, r3
 8011820:	f3bf 8f6f 	isb	sy
 8011824:	f3bf 8f4f 	dsb	sy
 8011828:	613b      	str	r3, [r7, #16]
}
 801182a:	bf00      	nop
 801182c:	e7fe      	b.n	801182c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 801182e:	4b2a      	ldr	r3, [pc, #168]	; (80118d8 <vTaskDelayUntil+0xf0>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d00a      	beq.n	801184c <vTaskDelayUntil+0x64>
	__asm volatile
 8011836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183a:	f383 8811 	msr	BASEPRI, r3
 801183e:	f3bf 8f6f 	isb	sy
 8011842:	f3bf 8f4f 	dsb	sy
 8011846:	60fb      	str	r3, [r7, #12]
}
 8011848:	bf00      	nop
 801184a:	e7fe      	b.n	801184a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 801184c:	f000 f8ee 	bl	8011a2c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8011850:	4b22      	ldr	r3, [pc, #136]	; (80118dc <vTaskDelayUntil+0xf4>)
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	683a      	ldr	r2, [r7, #0]
 801185c:	4413      	add	r3, r2
 801185e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	6a3a      	ldr	r2, [r7, #32]
 8011866:	429a      	cmp	r2, r3
 8011868:	d20b      	bcs.n	8011882 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	69fa      	ldr	r2, [r7, #28]
 8011870:	429a      	cmp	r2, r3
 8011872:	d211      	bcs.n	8011898 <vTaskDelayUntil+0xb0>
 8011874:	69fa      	ldr	r2, [r7, #28]
 8011876:	6a3b      	ldr	r3, [r7, #32]
 8011878:	429a      	cmp	r2, r3
 801187a:	d90d      	bls.n	8011898 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801187c:	2301      	movs	r3, #1
 801187e:	627b      	str	r3, [r7, #36]	; 0x24
 8011880:	e00a      	b.n	8011898 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	69fa      	ldr	r2, [r7, #28]
 8011888:	429a      	cmp	r2, r3
 801188a:	d303      	bcc.n	8011894 <vTaskDelayUntil+0xac>
 801188c:	69fa      	ldr	r2, [r7, #28]
 801188e:	6a3b      	ldr	r3, [r7, #32]
 8011890:	429a      	cmp	r2, r3
 8011892:	d901      	bls.n	8011898 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8011894:	2301      	movs	r3, #1
 8011896:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	69fa      	ldr	r2, [r7, #28]
 801189c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d006      	beq.n	80118b2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80118a4:	69fa      	ldr	r2, [r7, #28]
 80118a6:	6a3b      	ldr	r3, [r7, #32]
 80118a8:	1ad3      	subs	r3, r2, r3
 80118aa:	2100      	movs	r1, #0
 80118ac:	4618      	mov	r0, r3
 80118ae:	f001 f8d7 	bl	8012a60 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80118b2:	f000 f8c9 	bl	8011a48 <xTaskResumeAll>
 80118b6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80118b8:	69bb      	ldr	r3, [r7, #24]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d107      	bne.n	80118ce <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80118be:	4b08      	ldr	r3, [pc, #32]	; (80118e0 <vTaskDelayUntil+0xf8>)
 80118c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80118c4:	601a      	str	r2, [r3, #0]
 80118c6:	f3bf 8f4f 	dsb	sy
 80118ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80118ce:	bf00      	nop
 80118d0:	3728      	adds	r7, #40	; 0x28
 80118d2:	46bd      	mov	sp, r7
 80118d4:	bd80      	pop	{r7, pc}
 80118d6:	bf00      	nop
 80118d8:	2400190c 	.word	0x2400190c
 80118dc:	240018e8 	.word	0x240018e8
 80118e0:	e000ed04 	.word	0xe000ed04

080118e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b084      	sub	sp, #16
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80118ec:	2300      	movs	r3, #0
 80118ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d017      	beq.n	8011926 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80118f6:	4b13      	ldr	r3, [pc, #76]	; (8011944 <vTaskDelay+0x60>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d00a      	beq.n	8011914 <vTaskDelay+0x30>
	__asm volatile
 80118fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011902:	f383 8811 	msr	BASEPRI, r3
 8011906:	f3bf 8f6f 	isb	sy
 801190a:	f3bf 8f4f 	dsb	sy
 801190e:	60bb      	str	r3, [r7, #8]
}
 8011910:	bf00      	nop
 8011912:	e7fe      	b.n	8011912 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011914:	f000 f88a 	bl	8011a2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011918:	2100      	movs	r1, #0
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f001 f8a0 	bl	8012a60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011920:	f000 f892 	bl	8011a48 <xTaskResumeAll>
 8011924:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d107      	bne.n	801193c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801192c:	4b06      	ldr	r3, [pc, #24]	; (8011948 <vTaskDelay+0x64>)
 801192e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011932:	601a      	str	r2, [r3, #0]
 8011934:	f3bf 8f4f 	dsb	sy
 8011938:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801193c:	bf00      	nop
 801193e:	3710      	adds	r7, #16
 8011940:	46bd      	mov	sp, r7
 8011942:	bd80      	pop	{r7, pc}
 8011944:	2400190c 	.word	0x2400190c
 8011948:	e000ed04 	.word	0xe000ed04

0801194c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b08a      	sub	sp, #40	; 0x28
 8011950:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011952:	2300      	movs	r3, #0
 8011954:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011956:	2300      	movs	r3, #0
 8011958:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801195a:	463a      	mov	r2, r7
 801195c:	1d39      	adds	r1, r7, #4
 801195e:	f107 0308 	add.w	r3, r7, #8
 8011962:	4618      	mov	r0, r3
 8011964:	f7fe fc20 	bl	80101a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011968:	6839      	ldr	r1, [r7, #0]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	68ba      	ldr	r2, [r7, #8]
 801196e:	9202      	str	r2, [sp, #8]
 8011970:	9301      	str	r3, [sp, #4]
 8011972:	2300      	movs	r3, #0
 8011974:	9300      	str	r3, [sp, #0]
 8011976:	2300      	movs	r3, #0
 8011978:	460a      	mov	r2, r1
 801197a:	4924      	ldr	r1, [pc, #144]	; (8011a0c <vTaskStartScheduler+0xc0>)
 801197c:	4824      	ldr	r0, [pc, #144]	; (8011a10 <vTaskStartScheduler+0xc4>)
 801197e:	f7ff fd09 	bl	8011394 <xTaskCreateStatic>
 8011982:	4603      	mov	r3, r0
 8011984:	4a23      	ldr	r2, [pc, #140]	; (8011a14 <vTaskStartScheduler+0xc8>)
 8011986:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011988:	4b22      	ldr	r3, [pc, #136]	; (8011a14 <vTaskStartScheduler+0xc8>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d002      	beq.n	8011996 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011990:	2301      	movs	r3, #1
 8011992:	617b      	str	r3, [r7, #20]
 8011994:	e001      	b.n	801199a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011996:	2300      	movs	r3, #0
 8011998:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	2b01      	cmp	r3, #1
 801199e:	d102      	bne.n	80119a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80119a0:	f001 f8b2 	bl	8012b08 <xTimerCreateTimerTask>
 80119a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	2b01      	cmp	r3, #1
 80119aa:	d11b      	bne.n	80119e4 <vTaskStartScheduler+0x98>
	__asm volatile
 80119ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b0:	f383 8811 	msr	BASEPRI, r3
 80119b4:	f3bf 8f6f 	isb	sy
 80119b8:	f3bf 8f4f 	dsb	sy
 80119bc:	613b      	str	r3, [r7, #16]
}
 80119be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80119c0:	4b15      	ldr	r3, [pc, #84]	; (8011a18 <vTaskStartScheduler+0xcc>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	3354      	adds	r3, #84	; 0x54
 80119c6:	4a15      	ldr	r2, [pc, #84]	; (8011a1c <vTaskStartScheduler+0xd0>)
 80119c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80119ca:	4b15      	ldr	r3, [pc, #84]	; (8011a20 <vTaskStartScheduler+0xd4>)
 80119cc:	f04f 32ff 	mov.w	r2, #4294967295
 80119d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80119d2:	4b14      	ldr	r3, [pc, #80]	; (8011a24 <vTaskStartScheduler+0xd8>)
 80119d4:	2201      	movs	r2, #1
 80119d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80119d8:	4b13      	ldr	r3, [pc, #76]	; (8011a28 <vTaskStartScheduler+0xdc>)
 80119da:	2200      	movs	r2, #0
 80119dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80119de:	f001 fd27 	bl	8013430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80119e2:	e00e      	b.n	8011a02 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80119e4:	697b      	ldr	r3, [r7, #20]
 80119e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119ea:	d10a      	bne.n	8011a02 <vTaskStartScheduler+0xb6>
	__asm volatile
 80119ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f0:	f383 8811 	msr	BASEPRI, r3
 80119f4:	f3bf 8f6f 	isb	sy
 80119f8:	f3bf 8f4f 	dsb	sy
 80119fc:	60fb      	str	r3, [r7, #12]
}
 80119fe:	bf00      	nop
 8011a00:	e7fe      	b.n	8011a00 <vTaskStartScheduler+0xb4>
}
 8011a02:	bf00      	nop
 8011a04:	3718      	adds	r7, #24
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	0802507c 	.word	0x0802507c
 8011a10:	08012075 	.word	0x08012075
 8011a14:	24001908 	.word	0x24001908
 8011a18:	24001410 	.word	0x24001410
 8011a1c:	240000b4 	.word	0x240000b4
 8011a20:	24001904 	.word	0x24001904
 8011a24:	240018f0 	.word	0x240018f0
 8011a28:	240018e8 	.word	0x240018e8

08011a2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011a30:	4b04      	ldr	r3, [pc, #16]	; (8011a44 <vTaskSuspendAll+0x18>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	3301      	adds	r3, #1
 8011a36:	4a03      	ldr	r2, [pc, #12]	; (8011a44 <vTaskSuspendAll+0x18>)
 8011a38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011a3a:	bf00      	nop
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a42:	4770      	bx	lr
 8011a44:	2400190c 	.word	0x2400190c

08011a48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b084      	sub	sp, #16
 8011a4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011a52:	2300      	movs	r3, #0
 8011a54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011a56:	4b42      	ldr	r3, [pc, #264]	; (8011b60 <xTaskResumeAll+0x118>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d10a      	bne.n	8011a74 <xTaskResumeAll+0x2c>
	__asm volatile
 8011a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a62:	f383 8811 	msr	BASEPRI, r3
 8011a66:	f3bf 8f6f 	isb	sy
 8011a6a:	f3bf 8f4f 	dsb	sy
 8011a6e:	603b      	str	r3, [r7, #0]
}
 8011a70:	bf00      	nop
 8011a72:	e7fe      	b.n	8011a72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011a74:	f001 fd7e 	bl	8013574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011a78:	4b39      	ldr	r3, [pc, #228]	; (8011b60 <xTaskResumeAll+0x118>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	3b01      	subs	r3, #1
 8011a7e:	4a38      	ldr	r2, [pc, #224]	; (8011b60 <xTaskResumeAll+0x118>)
 8011a80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a82:	4b37      	ldr	r3, [pc, #220]	; (8011b60 <xTaskResumeAll+0x118>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d162      	bne.n	8011b50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011a8a:	4b36      	ldr	r3, [pc, #216]	; (8011b64 <xTaskResumeAll+0x11c>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d05e      	beq.n	8011b50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011a92:	e02f      	b.n	8011af4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011a94:	4b34      	ldr	r3, [pc, #208]	; (8011b68 <xTaskResumeAll+0x120>)
 8011a96:	68db      	ldr	r3, [r3, #12]
 8011a98:	68db      	ldr	r3, [r3, #12]
 8011a9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	3318      	adds	r3, #24
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f7fe fc3f 	bl	8010324 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	3304      	adds	r3, #4
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7fe fc3a 	bl	8010324 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ab4:	4b2d      	ldr	r3, [pc, #180]	; (8011b6c <xTaskResumeAll+0x124>)
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	429a      	cmp	r2, r3
 8011aba:	d903      	bls.n	8011ac4 <xTaskResumeAll+0x7c>
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ac0:	4a2a      	ldr	r2, [pc, #168]	; (8011b6c <xTaskResumeAll+0x124>)
 8011ac2:	6013      	str	r3, [r2, #0]
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ac8:	4613      	mov	r3, r2
 8011aca:	009b      	lsls	r3, r3, #2
 8011acc:	4413      	add	r3, r2
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	4a27      	ldr	r2, [pc, #156]	; (8011b70 <xTaskResumeAll+0x128>)
 8011ad2:	441a      	add	r2, r3
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	3304      	adds	r3, #4
 8011ad8:	4619      	mov	r1, r3
 8011ada:	4610      	mov	r0, r2
 8011adc:	f7fe fbc5 	bl	801026a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ae4:	4b23      	ldr	r3, [pc, #140]	; (8011b74 <xTaskResumeAll+0x12c>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d302      	bcc.n	8011af4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011aee:	4b22      	ldr	r3, [pc, #136]	; (8011b78 <xTaskResumeAll+0x130>)
 8011af0:	2201      	movs	r2, #1
 8011af2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011af4:	4b1c      	ldr	r3, [pc, #112]	; (8011b68 <xTaskResumeAll+0x120>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d1cb      	bne.n	8011a94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d001      	beq.n	8011b06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011b02:	f000 fb71 	bl	80121e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011b06:	4b1d      	ldr	r3, [pc, #116]	; (8011b7c <xTaskResumeAll+0x134>)
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d010      	beq.n	8011b34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011b12:	f000 f859 	bl	8011bc8 <xTaskIncrementTick>
 8011b16:	4603      	mov	r3, r0
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d002      	beq.n	8011b22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011b1c:	4b16      	ldr	r3, [pc, #88]	; (8011b78 <xTaskResumeAll+0x130>)
 8011b1e:	2201      	movs	r2, #1
 8011b20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	3b01      	subs	r3, #1
 8011b26:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d1f1      	bne.n	8011b12 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011b2e:	4b13      	ldr	r3, [pc, #76]	; (8011b7c <xTaskResumeAll+0x134>)
 8011b30:	2200      	movs	r2, #0
 8011b32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011b34:	4b10      	ldr	r3, [pc, #64]	; (8011b78 <xTaskResumeAll+0x130>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d009      	beq.n	8011b50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011b40:	4b0f      	ldr	r3, [pc, #60]	; (8011b80 <xTaskResumeAll+0x138>)
 8011b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b46:	601a      	str	r2, [r3, #0]
 8011b48:	f3bf 8f4f 	dsb	sy
 8011b4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011b50:	f001 fd40 	bl	80135d4 <vPortExitCritical>

	return xAlreadyYielded;
 8011b54:	68bb      	ldr	r3, [r7, #8]
}
 8011b56:	4618      	mov	r0, r3
 8011b58:	3710      	adds	r7, #16
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	2400190c 	.word	0x2400190c
 8011b64:	240018e4 	.word	0x240018e4
 8011b68:	240018a4 	.word	0x240018a4
 8011b6c:	240018ec 	.word	0x240018ec
 8011b70:	24001414 	.word	0x24001414
 8011b74:	24001410 	.word	0x24001410
 8011b78:	240018f8 	.word	0x240018f8
 8011b7c:	240018f4 	.word	0x240018f4
 8011b80:	e000ed04 	.word	0xe000ed04

08011b84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011b84:	b480      	push	{r7}
 8011b86:	b083      	sub	sp, #12
 8011b88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011b8a:	4b05      	ldr	r3, [pc, #20]	; (8011ba0 <xTaskGetTickCount+0x1c>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011b90:	687b      	ldr	r3, [r7, #4]
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	370c      	adds	r7, #12
 8011b96:	46bd      	mov	sp, r7
 8011b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9c:	4770      	bx	lr
 8011b9e:	bf00      	nop
 8011ba0:	240018e8 	.word	0x240018e8

08011ba4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011baa:	f001 fdc5 	bl	8013738 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011bae:	2300      	movs	r3, #0
 8011bb0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011bb2:	4b04      	ldr	r3, [pc, #16]	; (8011bc4 <xTaskGetTickCountFromISR+0x20>)
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011bb8:	683b      	ldr	r3, [r7, #0]
}
 8011bba:	4618      	mov	r0, r3
 8011bbc:	3708      	adds	r7, #8
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	240018e8 	.word	0x240018e8

08011bc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b086      	sub	sp, #24
 8011bcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011bce:	2300      	movs	r3, #0
 8011bd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011bd2:	4b4f      	ldr	r3, [pc, #316]	; (8011d10 <xTaskIncrementTick+0x148>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	f040 808f 	bne.w	8011cfa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011bdc:	4b4d      	ldr	r3, [pc, #308]	; (8011d14 <xTaskIncrementTick+0x14c>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	3301      	adds	r3, #1
 8011be2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011be4:	4a4b      	ldr	r2, [pc, #300]	; (8011d14 <xTaskIncrementTick+0x14c>)
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d120      	bne.n	8011c32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011bf0:	4b49      	ldr	r3, [pc, #292]	; (8011d18 <xTaskIncrementTick+0x150>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d00a      	beq.n	8011c10 <xTaskIncrementTick+0x48>
	__asm volatile
 8011bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bfe:	f383 8811 	msr	BASEPRI, r3
 8011c02:	f3bf 8f6f 	isb	sy
 8011c06:	f3bf 8f4f 	dsb	sy
 8011c0a:	603b      	str	r3, [r7, #0]
}
 8011c0c:	bf00      	nop
 8011c0e:	e7fe      	b.n	8011c0e <xTaskIncrementTick+0x46>
 8011c10:	4b41      	ldr	r3, [pc, #260]	; (8011d18 <xTaskIncrementTick+0x150>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	60fb      	str	r3, [r7, #12]
 8011c16:	4b41      	ldr	r3, [pc, #260]	; (8011d1c <xTaskIncrementTick+0x154>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	4a3f      	ldr	r2, [pc, #252]	; (8011d18 <xTaskIncrementTick+0x150>)
 8011c1c:	6013      	str	r3, [r2, #0]
 8011c1e:	4a3f      	ldr	r2, [pc, #252]	; (8011d1c <xTaskIncrementTick+0x154>)
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	6013      	str	r3, [r2, #0]
 8011c24:	4b3e      	ldr	r3, [pc, #248]	; (8011d20 <xTaskIncrementTick+0x158>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	3301      	adds	r3, #1
 8011c2a:	4a3d      	ldr	r2, [pc, #244]	; (8011d20 <xTaskIncrementTick+0x158>)
 8011c2c:	6013      	str	r3, [r2, #0]
 8011c2e:	f000 fadb 	bl	80121e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011c32:	4b3c      	ldr	r3, [pc, #240]	; (8011d24 <xTaskIncrementTick+0x15c>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	693a      	ldr	r2, [r7, #16]
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d349      	bcc.n	8011cd0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c3c:	4b36      	ldr	r3, [pc, #216]	; (8011d18 <xTaskIncrementTick+0x150>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d104      	bne.n	8011c50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c46:	4b37      	ldr	r3, [pc, #220]	; (8011d24 <xTaskIncrementTick+0x15c>)
 8011c48:	f04f 32ff 	mov.w	r2, #4294967295
 8011c4c:	601a      	str	r2, [r3, #0]
					break;
 8011c4e:	e03f      	b.n	8011cd0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c50:	4b31      	ldr	r3, [pc, #196]	; (8011d18 <xTaskIncrementTick+0x150>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	68db      	ldr	r3, [r3, #12]
 8011c56:	68db      	ldr	r3, [r3, #12]
 8011c58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011c60:	693a      	ldr	r2, [r7, #16]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d203      	bcs.n	8011c70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011c68:	4a2e      	ldr	r2, [pc, #184]	; (8011d24 <xTaskIncrementTick+0x15c>)
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011c6e:	e02f      	b.n	8011cd0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	3304      	adds	r3, #4
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7fe fb55 	bl	8010324 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d004      	beq.n	8011c8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	3318      	adds	r3, #24
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7fe fb4c 	bl	8010324 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c90:	4b25      	ldr	r3, [pc, #148]	; (8011d28 <xTaskIncrementTick+0x160>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d903      	bls.n	8011ca0 <xTaskIncrementTick+0xd8>
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c9c:	4a22      	ldr	r2, [pc, #136]	; (8011d28 <xTaskIncrementTick+0x160>)
 8011c9e:	6013      	str	r3, [r2, #0]
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ca4:	4613      	mov	r3, r2
 8011ca6:	009b      	lsls	r3, r3, #2
 8011ca8:	4413      	add	r3, r2
 8011caa:	009b      	lsls	r3, r3, #2
 8011cac:	4a1f      	ldr	r2, [pc, #124]	; (8011d2c <xTaskIncrementTick+0x164>)
 8011cae:	441a      	add	r2, r3
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	3304      	adds	r3, #4
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	4610      	mov	r0, r2
 8011cb8:	f7fe fad7 	bl	801026a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cc0:	4b1b      	ldr	r3, [pc, #108]	; (8011d30 <xTaskIncrementTick+0x168>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d3b8      	bcc.n	8011c3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011cca:	2301      	movs	r3, #1
 8011ccc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011cce:	e7b5      	b.n	8011c3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011cd0:	4b17      	ldr	r3, [pc, #92]	; (8011d30 <xTaskIncrementTick+0x168>)
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cd6:	4915      	ldr	r1, [pc, #84]	; (8011d2c <xTaskIncrementTick+0x164>)
 8011cd8:	4613      	mov	r3, r2
 8011cda:	009b      	lsls	r3, r3, #2
 8011cdc:	4413      	add	r3, r2
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	440b      	add	r3, r1
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	2b01      	cmp	r3, #1
 8011ce6:	d901      	bls.n	8011cec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011ce8:	2301      	movs	r3, #1
 8011cea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011cec:	4b11      	ldr	r3, [pc, #68]	; (8011d34 <xTaskIncrementTick+0x16c>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d007      	beq.n	8011d04 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	617b      	str	r3, [r7, #20]
 8011cf8:	e004      	b.n	8011d04 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011cfa:	4b0f      	ldr	r3, [pc, #60]	; (8011d38 <xTaskIncrementTick+0x170>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	3301      	adds	r3, #1
 8011d00:	4a0d      	ldr	r2, [pc, #52]	; (8011d38 <xTaskIncrementTick+0x170>)
 8011d02:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011d04:	697b      	ldr	r3, [r7, #20]
}
 8011d06:	4618      	mov	r0, r3
 8011d08:	3718      	adds	r7, #24
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	bd80      	pop	{r7, pc}
 8011d0e:	bf00      	nop
 8011d10:	2400190c 	.word	0x2400190c
 8011d14:	240018e8 	.word	0x240018e8
 8011d18:	2400189c 	.word	0x2400189c
 8011d1c:	240018a0 	.word	0x240018a0
 8011d20:	240018fc 	.word	0x240018fc
 8011d24:	24001904 	.word	0x24001904
 8011d28:	240018ec 	.word	0x240018ec
 8011d2c:	24001414 	.word	0x24001414
 8011d30:	24001410 	.word	0x24001410
 8011d34:	240018f8 	.word	0x240018f8
 8011d38:	240018f4 	.word	0x240018f4

08011d3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b085      	sub	sp, #20
 8011d40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011d42:	4b2a      	ldr	r3, [pc, #168]	; (8011dec <vTaskSwitchContext+0xb0>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d003      	beq.n	8011d52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011d4a:	4b29      	ldr	r3, [pc, #164]	; (8011df0 <vTaskSwitchContext+0xb4>)
 8011d4c:	2201      	movs	r2, #1
 8011d4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011d50:	e046      	b.n	8011de0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011d52:	4b27      	ldr	r3, [pc, #156]	; (8011df0 <vTaskSwitchContext+0xb4>)
 8011d54:	2200      	movs	r2, #0
 8011d56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d58:	4b26      	ldr	r3, [pc, #152]	; (8011df4 <vTaskSwitchContext+0xb8>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	60fb      	str	r3, [r7, #12]
 8011d5e:	e010      	b.n	8011d82 <vTaskSwitchContext+0x46>
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d10a      	bne.n	8011d7c <vTaskSwitchContext+0x40>
	__asm volatile
 8011d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6a:	f383 8811 	msr	BASEPRI, r3
 8011d6e:	f3bf 8f6f 	isb	sy
 8011d72:	f3bf 8f4f 	dsb	sy
 8011d76:	607b      	str	r3, [r7, #4]
}
 8011d78:	bf00      	nop
 8011d7a:	e7fe      	b.n	8011d7a <vTaskSwitchContext+0x3e>
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	3b01      	subs	r3, #1
 8011d80:	60fb      	str	r3, [r7, #12]
 8011d82:	491d      	ldr	r1, [pc, #116]	; (8011df8 <vTaskSwitchContext+0xbc>)
 8011d84:	68fa      	ldr	r2, [r7, #12]
 8011d86:	4613      	mov	r3, r2
 8011d88:	009b      	lsls	r3, r3, #2
 8011d8a:	4413      	add	r3, r2
 8011d8c:	009b      	lsls	r3, r3, #2
 8011d8e:	440b      	add	r3, r1
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d0e4      	beq.n	8011d60 <vTaskSwitchContext+0x24>
 8011d96:	68fa      	ldr	r2, [r7, #12]
 8011d98:	4613      	mov	r3, r2
 8011d9a:	009b      	lsls	r3, r3, #2
 8011d9c:	4413      	add	r3, r2
 8011d9e:	009b      	lsls	r3, r3, #2
 8011da0:	4a15      	ldr	r2, [pc, #84]	; (8011df8 <vTaskSwitchContext+0xbc>)
 8011da2:	4413      	add	r3, r2
 8011da4:	60bb      	str	r3, [r7, #8]
 8011da6:	68bb      	ldr	r3, [r7, #8]
 8011da8:	685b      	ldr	r3, [r3, #4]
 8011daa:	685a      	ldr	r2, [r3, #4]
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	605a      	str	r2, [r3, #4]
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	685a      	ldr	r2, [r3, #4]
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	3308      	adds	r3, #8
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d104      	bne.n	8011dc6 <vTaskSwitchContext+0x8a>
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	685b      	ldr	r3, [r3, #4]
 8011dc0:	685a      	ldr	r2, [r3, #4]
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	605a      	str	r2, [r3, #4]
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	68db      	ldr	r3, [r3, #12]
 8011dcc:	4a0b      	ldr	r2, [pc, #44]	; (8011dfc <vTaskSwitchContext+0xc0>)
 8011dce:	6013      	str	r3, [r2, #0]
 8011dd0:	4a08      	ldr	r2, [pc, #32]	; (8011df4 <vTaskSwitchContext+0xb8>)
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011dd6:	4b09      	ldr	r3, [pc, #36]	; (8011dfc <vTaskSwitchContext+0xc0>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	3354      	adds	r3, #84	; 0x54
 8011ddc:	4a08      	ldr	r2, [pc, #32]	; (8011e00 <vTaskSwitchContext+0xc4>)
 8011dde:	6013      	str	r3, [r2, #0]
}
 8011de0:	bf00      	nop
 8011de2:	3714      	adds	r7, #20
 8011de4:	46bd      	mov	sp, r7
 8011de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dea:	4770      	bx	lr
 8011dec:	2400190c 	.word	0x2400190c
 8011df0:	240018f8 	.word	0x240018f8
 8011df4:	240018ec 	.word	0x240018ec
 8011df8:	24001414 	.word	0x24001414
 8011dfc:	24001410 	.word	0x24001410
 8011e00:	240000b4 	.word	0x240000b4

08011e04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d10a      	bne.n	8011e2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e18:	f383 8811 	msr	BASEPRI, r3
 8011e1c:	f3bf 8f6f 	isb	sy
 8011e20:	f3bf 8f4f 	dsb	sy
 8011e24:	60fb      	str	r3, [r7, #12]
}
 8011e26:	bf00      	nop
 8011e28:	e7fe      	b.n	8011e28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e2a:	4b07      	ldr	r3, [pc, #28]	; (8011e48 <vTaskPlaceOnEventList+0x44>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	3318      	adds	r3, #24
 8011e30:	4619      	mov	r1, r3
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f7fe fa3d 	bl	80102b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011e38:	2101      	movs	r1, #1
 8011e3a:	6838      	ldr	r0, [r7, #0]
 8011e3c:	f000 fe10 	bl	8012a60 <prvAddCurrentTaskToDelayedList>
}
 8011e40:	bf00      	nop
 8011e42:	3710      	adds	r7, #16
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	24001410 	.word	0x24001410

08011e4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b086      	sub	sp, #24
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	60f8      	str	r0, [r7, #12]
 8011e54:	60b9      	str	r1, [r7, #8]
 8011e56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d10a      	bne.n	8011e74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e62:	f383 8811 	msr	BASEPRI, r3
 8011e66:	f3bf 8f6f 	isb	sy
 8011e6a:	f3bf 8f4f 	dsb	sy
 8011e6e:	617b      	str	r3, [r7, #20]
}
 8011e70:	bf00      	nop
 8011e72:	e7fe      	b.n	8011e72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011e74:	4b0a      	ldr	r3, [pc, #40]	; (8011ea0 <vTaskPlaceOnEventListRestricted+0x54>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	3318      	adds	r3, #24
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	68f8      	ldr	r0, [r7, #12]
 8011e7e:	f7fe f9f4 	bl	801026a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d002      	beq.n	8011e8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011e88:	f04f 33ff 	mov.w	r3, #4294967295
 8011e8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011e8e:	6879      	ldr	r1, [r7, #4]
 8011e90:	68b8      	ldr	r0, [r7, #8]
 8011e92:	f000 fde5 	bl	8012a60 <prvAddCurrentTaskToDelayedList>
	}
 8011e96:	bf00      	nop
 8011e98:	3718      	adds	r7, #24
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	24001410 	.word	0x24001410

08011ea4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011ea4:	b580      	push	{r7, lr}
 8011ea6:	b086      	sub	sp, #24
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	68db      	ldr	r3, [r3, #12]
 8011eb0:	68db      	ldr	r3, [r3, #12]
 8011eb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d10a      	bne.n	8011ed0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ebe:	f383 8811 	msr	BASEPRI, r3
 8011ec2:	f3bf 8f6f 	isb	sy
 8011ec6:	f3bf 8f4f 	dsb	sy
 8011eca:	60fb      	str	r3, [r7, #12]
}
 8011ecc:	bf00      	nop
 8011ece:	e7fe      	b.n	8011ece <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	3318      	adds	r3, #24
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7fe fa25 	bl	8010324 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011eda:	4b1e      	ldr	r3, [pc, #120]	; (8011f54 <xTaskRemoveFromEventList+0xb0>)
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d11d      	bne.n	8011f1e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011ee2:	693b      	ldr	r3, [r7, #16]
 8011ee4:	3304      	adds	r3, #4
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7fe fa1c 	bl	8010324 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011eec:	693b      	ldr	r3, [r7, #16]
 8011eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ef0:	4b19      	ldr	r3, [pc, #100]	; (8011f58 <xTaskRemoveFromEventList+0xb4>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	d903      	bls.n	8011f00 <xTaskRemoveFromEventList+0x5c>
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011efc:	4a16      	ldr	r2, [pc, #88]	; (8011f58 <xTaskRemoveFromEventList+0xb4>)
 8011efe:	6013      	str	r3, [r2, #0]
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f04:	4613      	mov	r3, r2
 8011f06:	009b      	lsls	r3, r3, #2
 8011f08:	4413      	add	r3, r2
 8011f0a:	009b      	lsls	r3, r3, #2
 8011f0c:	4a13      	ldr	r2, [pc, #76]	; (8011f5c <xTaskRemoveFromEventList+0xb8>)
 8011f0e:	441a      	add	r2, r3
 8011f10:	693b      	ldr	r3, [r7, #16]
 8011f12:	3304      	adds	r3, #4
 8011f14:	4619      	mov	r1, r3
 8011f16:	4610      	mov	r0, r2
 8011f18:	f7fe f9a7 	bl	801026a <vListInsertEnd>
 8011f1c:	e005      	b.n	8011f2a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	3318      	adds	r3, #24
 8011f22:	4619      	mov	r1, r3
 8011f24:	480e      	ldr	r0, [pc, #56]	; (8011f60 <xTaskRemoveFromEventList+0xbc>)
 8011f26:	f7fe f9a0 	bl	801026a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f2e:	4b0d      	ldr	r3, [pc, #52]	; (8011f64 <xTaskRemoveFromEventList+0xc0>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f34:	429a      	cmp	r2, r3
 8011f36:	d905      	bls.n	8011f44 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011f38:	2301      	movs	r3, #1
 8011f3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011f3c:	4b0a      	ldr	r3, [pc, #40]	; (8011f68 <xTaskRemoveFromEventList+0xc4>)
 8011f3e:	2201      	movs	r2, #1
 8011f40:	601a      	str	r2, [r3, #0]
 8011f42:	e001      	b.n	8011f48 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011f44:	2300      	movs	r3, #0
 8011f46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011f48:	697b      	ldr	r3, [r7, #20]
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3718      	adds	r7, #24
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	2400190c 	.word	0x2400190c
 8011f58:	240018ec 	.word	0x240018ec
 8011f5c:	24001414 	.word	0x24001414
 8011f60:	240018a4 	.word	0x240018a4
 8011f64:	24001410 	.word	0x24001410
 8011f68:	240018f8 	.word	0x240018f8

08011f6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011f6c:	b480      	push	{r7}
 8011f6e:	b083      	sub	sp, #12
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011f74:	4b06      	ldr	r3, [pc, #24]	; (8011f90 <vTaskInternalSetTimeOutState+0x24>)
 8011f76:	681a      	ldr	r2, [r3, #0]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011f7c:	4b05      	ldr	r3, [pc, #20]	; (8011f94 <vTaskInternalSetTimeOutState+0x28>)
 8011f7e:	681a      	ldr	r2, [r3, #0]
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	605a      	str	r2, [r3, #4]
}
 8011f84:	bf00      	nop
 8011f86:	370c      	adds	r7, #12
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f8e:	4770      	bx	lr
 8011f90:	240018fc 	.word	0x240018fc
 8011f94:	240018e8 	.word	0x240018e8

08011f98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b088      	sub	sp, #32
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d10a      	bne.n	8011fbe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fac:	f383 8811 	msr	BASEPRI, r3
 8011fb0:	f3bf 8f6f 	isb	sy
 8011fb4:	f3bf 8f4f 	dsb	sy
 8011fb8:	613b      	str	r3, [r7, #16]
}
 8011fba:	bf00      	nop
 8011fbc:	e7fe      	b.n	8011fbc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d10a      	bne.n	8011fda <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc8:	f383 8811 	msr	BASEPRI, r3
 8011fcc:	f3bf 8f6f 	isb	sy
 8011fd0:	f3bf 8f4f 	dsb	sy
 8011fd4:	60fb      	str	r3, [r7, #12]
}
 8011fd6:	bf00      	nop
 8011fd8:	e7fe      	b.n	8011fd8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011fda:	f001 facb 	bl	8013574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011fde:	4b1d      	ldr	r3, [pc, #116]	; (8012054 <xTaskCheckForTimeOut+0xbc>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	69ba      	ldr	r2, [r7, #24]
 8011fea:	1ad3      	subs	r3, r2, r3
 8011fec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ff6:	d102      	bne.n	8011ffe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	61fb      	str	r3, [r7, #28]
 8011ffc:	e023      	b.n	8012046 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	681a      	ldr	r2, [r3, #0]
 8012002:	4b15      	ldr	r3, [pc, #84]	; (8012058 <xTaskCheckForTimeOut+0xc0>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	429a      	cmp	r2, r3
 8012008:	d007      	beq.n	801201a <xTaskCheckForTimeOut+0x82>
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	685b      	ldr	r3, [r3, #4]
 801200e:	69ba      	ldr	r2, [r7, #24]
 8012010:	429a      	cmp	r2, r3
 8012012:	d302      	bcc.n	801201a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012014:	2301      	movs	r3, #1
 8012016:	61fb      	str	r3, [r7, #28]
 8012018:	e015      	b.n	8012046 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	697a      	ldr	r2, [r7, #20]
 8012020:	429a      	cmp	r2, r3
 8012022:	d20b      	bcs.n	801203c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	681a      	ldr	r2, [r3, #0]
 8012028:	697b      	ldr	r3, [r7, #20]
 801202a:	1ad2      	subs	r2, r2, r3
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f7ff ff9b 	bl	8011f6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012036:	2300      	movs	r3, #0
 8012038:	61fb      	str	r3, [r7, #28]
 801203a:	e004      	b.n	8012046 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	2200      	movs	r2, #0
 8012040:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012042:	2301      	movs	r3, #1
 8012044:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012046:	f001 fac5 	bl	80135d4 <vPortExitCritical>

	return xReturn;
 801204a:	69fb      	ldr	r3, [r7, #28]
}
 801204c:	4618      	mov	r0, r3
 801204e:	3720      	adds	r7, #32
 8012050:	46bd      	mov	sp, r7
 8012052:	bd80      	pop	{r7, pc}
 8012054:	240018e8 	.word	0x240018e8
 8012058:	240018fc 	.word	0x240018fc

0801205c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801205c:	b480      	push	{r7}
 801205e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012060:	4b03      	ldr	r3, [pc, #12]	; (8012070 <vTaskMissedYield+0x14>)
 8012062:	2201      	movs	r2, #1
 8012064:	601a      	str	r2, [r3, #0]
}
 8012066:	bf00      	nop
 8012068:	46bd      	mov	sp, r7
 801206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206e:	4770      	bx	lr
 8012070:	240018f8 	.word	0x240018f8

08012074 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b082      	sub	sp, #8
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801207c:	f000 f852 	bl	8012124 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012080:	4b06      	ldr	r3, [pc, #24]	; (801209c <prvIdleTask+0x28>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	2b01      	cmp	r3, #1
 8012086:	d9f9      	bls.n	801207c <prvIdleTask+0x8>
			{
				taskYIELD();
 8012088:	4b05      	ldr	r3, [pc, #20]	; (80120a0 <prvIdleTask+0x2c>)
 801208a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801208e:	601a      	str	r2, [r3, #0]
 8012090:	f3bf 8f4f 	dsb	sy
 8012094:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012098:	e7f0      	b.n	801207c <prvIdleTask+0x8>
 801209a:	bf00      	nop
 801209c:	24001414 	.word	0x24001414
 80120a0:	e000ed04 	.word	0xe000ed04

080120a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80120aa:	2300      	movs	r3, #0
 80120ac:	607b      	str	r3, [r7, #4]
 80120ae:	e00c      	b.n	80120ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80120b0:	687a      	ldr	r2, [r7, #4]
 80120b2:	4613      	mov	r3, r2
 80120b4:	009b      	lsls	r3, r3, #2
 80120b6:	4413      	add	r3, r2
 80120b8:	009b      	lsls	r3, r3, #2
 80120ba:	4a12      	ldr	r2, [pc, #72]	; (8012104 <prvInitialiseTaskLists+0x60>)
 80120bc:	4413      	add	r3, r2
 80120be:	4618      	mov	r0, r3
 80120c0:	f7fe f8a6 	bl	8010210 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	3301      	adds	r3, #1
 80120c8:	607b      	str	r3, [r7, #4]
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2b37      	cmp	r3, #55	; 0x37
 80120ce:	d9ef      	bls.n	80120b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80120d0:	480d      	ldr	r0, [pc, #52]	; (8012108 <prvInitialiseTaskLists+0x64>)
 80120d2:	f7fe f89d 	bl	8010210 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80120d6:	480d      	ldr	r0, [pc, #52]	; (801210c <prvInitialiseTaskLists+0x68>)
 80120d8:	f7fe f89a 	bl	8010210 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80120dc:	480c      	ldr	r0, [pc, #48]	; (8012110 <prvInitialiseTaskLists+0x6c>)
 80120de:	f7fe f897 	bl	8010210 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80120e2:	480c      	ldr	r0, [pc, #48]	; (8012114 <prvInitialiseTaskLists+0x70>)
 80120e4:	f7fe f894 	bl	8010210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80120e8:	480b      	ldr	r0, [pc, #44]	; (8012118 <prvInitialiseTaskLists+0x74>)
 80120ea:	f7fe f891 	bl	8010210 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80120ee:	4b0b      	ldr	r3, [pc, #44]	; (801211c <prvInitialiseTaskLists+0x78>)
 80120f0:	4a05      	ldr	r2, [pc, #20]	; (8012108 <prvInitialiseTaskLists+0x64>)
 80120f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80120f4:	4b0a      	ldr	r3, [pc, #40]	; (8012120 <prvInitialiseTaskLists+0x7c>)
 80120f6:	4a05      	ldr	r2, [pc, #20]	; (801210c <prvInitialiseTaskLists+0x68>)
 80120f8:	601a      	str	r2, [r3, #0]
}
 80120fa:	bf00      	nop
 80120fc:	3708      	adds	r7, #8
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
 8012102:	bf00      	nop
 8012104:	24001414 	.word	0x24001414
 8012108:	24001874 	.word	0x24001874
 801210c:	24001888 	.word	0x24001888
 8012110:	240018a4 	.word	0x240018a4
 8012114:	240018b8 	.word	0x240018b8
 8012118:	240018d0 	.word	0x240018d0
 801211c:	2400189c 	.word	0x2400189c
 8012120:	240018a0 	.word	0x240018a0

08012124 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801212a:	e019      	b.n	8012160 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801212c:	f001 fa22 	bl	8013574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012130:	4b10      	ldr	r3, [pc, #64]	; (8012174 <prvCheckTasksWaitingTermination+0x50>)
 8012132:	68db      	ldr	r3, [r3, #12]
 8012134:	68db      	ldr	r3, [r3, #12]
 8012136:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	3304      	adds	r3, #4
 801213c:	4618      	mov	r0, r3
 801213e:	f7fe f8f1 	bl	8010324 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012142:	4b0d      	ldr	r3, [pc, #52]	; (8012178 <prvCheckTasksWaitingTermination+0x54>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	3b01      	subs	r3, #1
 8012148:	4a0b      	ldr	r2, [pc, #44]	; (8012178 <prvCheckTasksWaitingTermination+0x54>)
 801214a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801214c:	4b0b      	ldr	r3, [pc, #44]	; (801217c <prvCheckTasksWaitingTermination+0x58>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	3b01      	subs	r3, #1
 8012152:	4a0a      	ldr	r2, [pc, #40]	; (801217c <prvCheckTasksWaitingTermination+0x58>)
 8012154:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012156:	f001 fa3d 	bl	80135d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f000 f810 	bl	8012180 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012160:	4b06      	ldr	r3, [pc, #24]	; (801217c <prvCheckTasksWaitingTermination+0x58>)
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d1e1      	bne.n	801212c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012168:	bf00      	nop
 801216a:	bf00      	nop
 801216c:	3708      	adds	r7, #8
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}
 8012172:	bf00      	nop
 8012174:	240018b8 	.word	0x240018b8
 8012178:	240018e4 	.word	0x240018e4
 801217c:	240018cc 	.word	0x240018cc

08012180 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012180:	b580      	push	{r7, lr}
 8012182:	b084      	sub	sp, #16
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	3354      	adds	r3, #84	; 0x54
 801218c:	4618      	mov	r0, r3
 801218e:	f011 f85f 	bl	8023250 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8012198:	2b00      	cmp	r3, #0
 801219a:	d108      	bne.n	80121ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121a0:	4618      	mov	r0, r3
 80121a2:	f001 fbd5 	bl	8013950 <vPortFree>
				vPortFree( pxTCB );
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	f001 fbd2 	bl	8013950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80121ac:	e018      	b.n	80121e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80121b4:	2b01      	cmp	r3, #1
 80121b6:	d103      	bne.n	80121c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f001 fbc9 	bl	8013950 <vPortFree>
	}
 80121be:	e00f      	b.n	80121e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80121c6:	2b02      	cmp	r3, #2
 80121c8:	d00a      	beq.n	80121e0 <prvDeleteTCB+0x60>
	__asm volatile
 80121ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ce:	f383 8811 	msr	BASEPRI, r3
 80121d2:	f3bf 8f6f 	isb	sy
 80121d6:	f3bf 8f4f 	dsb	sy
 80121da:	60fb      	str	r3, [r7, #12]
}
 80121dc:	bf00      	nop
 80121de:	e7fe      	b.n	80121de <prvDeleteTCB+0x5e>
	}
 80121e0:	bf00      	nop
 80121e2:	3710      	adds	r7, #16
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}

080121e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80121e8:	b480      	push	{r7}
 80121ea:	b083      	sub	sp, #12
 80121ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80121ee:	4b0c      	ldr	r3, [pc, #48]	; (8012220 <prvResetNextTaskUnblockTime+0x38>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d104      	bne.n	8012202 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80121f8:	4b0a      	ldr	r3, [pc, #40]	; (8012224 <prvResetNextTaskUnblockTime+0x3c>)
 80121fa:	f04f 32ff 	mov.w	r2, #4294967295
 80121fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012200:	e008      	b.n	8012214 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012202:	4b07      	ldr	r3, [pc, #28]	; (8012220 <prvResetNextTaskUnblockTime+0x38>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	68db      	ldr	r3, [r3, #12]
 8012208:	68db      	ldr	r3, [r3, #12]
 801220a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	4a04      	ldr	r2, [pc, #16]	; (8012224 <prvResetNextTaskUnblockTime+0x3c>)
 8012212:	6013      	str	r3, [r2, #0]
}
 8012214:	bf00      	nop
 8012216:	370c      	adds	r7, #12
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr
 8012220:	2400189c 	.word	0x2400189c
 8012224:	24001904 	.word	0x24001904

08012228 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8012228:	b480      	push	{r7}
 801222a:	b083      	sub	sp, #12
 801222c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801222e:	4b05      	ldr	r3, [pc, #20]	; (8012244 <xTaskGetCurrentTaskHandle+0x1c>)
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012234:	687b      	ldr	r3, [r7, #4]
	}
 8012236:	4618      	mov	r0, r3
 8012238:	370c      	adds	r7, #12
 801223a:	46bd      	mov	sp, r7
 801223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012240:	4770      	bx	lr
 8012242:	bf00      	nop
 8012244:	24001410 	.word	0x24001410

08012248 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012248:	b480      	push	{r7}
 801224a:	b083      	sub	sp, #12
 801224c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801224e:	4b0b      	ldr	r3, [pc, #44]	; (801227c <xTaskGetSchedulerState+0x34>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d102      	bne.n	801225c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012256:	2301      	movs	r3, #1
 8012258:	607b      	str	r3, [r7, #4]
 801225a:	e008      	b.n	801226e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801225c:	4b08      	ldr	r3, [pc, #32]	; (8012280 <xTaskGetSchedulerState+0x38>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d102      	bne.n	801226a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012264:	2302      	movs	r3, #2
 8012266:	607b      	str	r3, [r7, #4]
 8012268:	e001      	b.n	801226e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801226a:	2300      	movs	r3, #0
 801226c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801226e:	687b      	ldr	r3, [r7, #4]
	}
 8012270:	4618      	mov	r0, r3
 8012272:	370c      	adds	r7, #12
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr
 801227c:	240018f0 	.word	0x240018f0
 8012280:	2400190c 	.word	0x2400190c

08012284 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012284:	b580      	push	{r7, lr}
 8012286:	b084      	sub	sp, #16
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012290:	2300      	movs	r3, #0
 8012292:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d051      	beq.n	801233e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801229e:	4b2a      	ldr	r3, [pc, #168]	; (8012348 <xTaskPriorityInherit+0xc4>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122a4:	429a      	cmp	r2, r3
 80122a6:	d241      	bcs.n	801232c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	699b      	ldr	r3, [r3, #24]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	db06      	blt.n	80122be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122b0:	4b25      	ldr	r3, [pc, #148]	; (8012348 <xTaskPriorityInherit+0xc4>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	6959      	ldr	r1, [r3, #20]
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122c6:	4613      	mov	r3, r2
 80122c8:	009b      	lsls	r3, r3, #2
 80122ca:	4413      	add	r3, r2
 80122cc:	009b      	lsls	r3, r3, #2
 80122ce:	4a1f      	ldr	r2, [pc, #124]	; (801234c <xTaskPriorityInherit+0xc8>)
 80122d0:	4413      	add	r3, r2
 80122d2:	4299      	cmp	r1, r3
 80122d4:	d122      	bne.n	801231c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	3304      	adds	r3, #4
 80122da:	4618      	mov	r0, r3
 80122dc:	f7fe f822 	bl	8010324 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80122e0:	4b19      	ldr	r3, [pc, #100]	; (8012348 <xTaskPriorityInherit+0xc4>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122e6:	68bb      	ldr	r3, [r7, #8]
 80122e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122ee:	4b18      	ldr	r3, [pc, #96]	; (8012350 <xTaskPriorityInherit+0xcc>)
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d903      	bls.n	80122fe <xTaskPriorityInherit+0x7a>
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122fa:	4a15      	ldr	r2, [pc, #84]	; (8012350 <xTaskPriorityInherit+0xcc>)
 80122fc:	6013      	str	r3, [r2, #0]
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012302:	4613      	mov	r3, r2
 8012304:	009b      	lsls	r3, r3, #2
 8012306:	4413      	add	r3, r2
 8012308:	009b      	lsls	r3, r3, #2
 801230a:	4a10      	ldr	r2, [pc, #64]	; (801234c <xTaskPriorityInherit+0xc8>)
 801230c:	441a      	add	r2, r3
 801230e:	68bb      	ldr	r3, [r7, #8]
 8012310:	3304      	adds	r3, #4
 8012312:	4619      	mov	r1, r3
 8012314:	4610      	mov	r0, r2
 8012316:	f7fd ffa8 	bl	801026a <vListInsertEnd>
 801231a:	e004      	b.n	8012326 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801231c:	4b0a      	ldr	r3, [pc, #40]	; (8012348 <xTaskPriorityInherit+0xc4>)
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012322:	68bb      	ldr	r3, [r7, #8]
 8012324:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012326:	2301      	movs	r3, #1
 8012328:	60fb      	str	r3, [r7, #12]
 801232a:	e008      	b.n	801233e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801232c:	68bb      	ldr	r3, [r7, #8]
 801232e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012330:	4b05      	ldr	r3, [pc, #20]	; (8012348 <xTaskPriorityInherit+0xc4>)
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012336:	429a      	cmp	r2, r3
 8012338:	d201      	bcs.n	801233e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801233a:	2301      	movs	r3, #1
 801233c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801233e:	68fb      	ldr	r3, [r7, #12]
	}
 8012340:	4618      	mov	r0, r3
 8012342:	3710      	adds	r7, #16
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}
 8012348:	24001410 	.word	0x24001410
 801234c:	24001414 	.word	0x24001414
 8012350:	240018ec 	.word	0x240018ec

08012354 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012354:	b580      	push	{r7, lr}
 8012356:	b086      	sub	sp, #24
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012360:	2300      	movs	r3, #0
 8012362:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d056      	beq.n	8012418 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801236a:	4b2e      	ldr	r3, [pc, #184]	; (8012424 <xTaskPriorityDisinherit+0xd0>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	693a      	ldr	r2, [r7, #16]
 8012370:	429a      	cmp	r2, r3
 8012372:	d00a      	beq.n	801238a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012378:	f383 8811 	msr	BASEPRI, r3
 801237c:	f3bf 8f6f 	isb	sy
 8012380:	f3bf 8f4f 	dsb	sy
 8012384:	60fb      	str	r3, [r7, #12]
}
 8012386:	bf00      	nop
 8012388:	e7fe      	b.n	8012388 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801238e:	2b00      	cmp	r3, #0
 8012390:	d10a      	bne.n	80123a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012396:	f383 8811 	msr	BASEPRI, r3
 801239a:	f3bf 8f6f 	isb	sy
 801239e:	f3bf 8f4f 	dsb	sy
 80123a2:	60bb      	str	r3, [r7, #8]
}
 80123a4:	bf00      	nop
 80123a6:	e7fe      	b.n	80123a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123ac:	1e5a      	subs	r2, r3, #1
 80123ae:	693b      	ldr	r3, [r7, #16]
 80123b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80123b2:	693b      	ldr	r3, [r7, #16]
 80123b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d02c      	beq.n	8012418 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80123be:	693b      	ldr	r3, [r7, #16]
 80123c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d128      	bne.n	8012418 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	3304      	adds	r3, #4
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7fd ffaa 	bl	8010324 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123d8:	693b      	ldr	r3, [r7, #16]
 80123da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80123e4:	693b      	ldr	r3, [r7, #16]
 80123e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123e8:	4b0f      	ldr	r3, [pc, #60]	; (8012428 <xTaskPriorityDisinherit+0xd4>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	429a      	cmp	r2, r3
 80123ee:	d903      	bls.n	80123f8 <xTaskPriorityDisinherit+0xa4>
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123f4:	4a0c      	ldr	r2, [pc, #48]	; (8012428 <xTaskPriorityDisinherit+0xd4>)
 80123f6:	6013      	str	r3, [r2, #0]
 80123f8:	693b      	ldr	r3, [r7, #16]
 80123fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123fc:	4613      	mov	r3, r2
 80123fe:	009b      	lsls	r3, r3, #2
 8012400:	4413      	add	r3, r2
 8012402:	009b      	lsls	r3, r3, #2
 8012404:	4a09      	ldr	r2, [pc, #36]	; (801242c <xTaskPriorityDisinherit+0xd8>)
 8012406:	441a      	add	r2, r3
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	3304      	adds	r3, #4
 801240c:	4619      	mov	r1, r3
 801240e:	4610      	mov	r0, r2
 8012410:	f7fd ff2b 	bl	801026a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012414:	2301      	movs	r3, #1
 8012416:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012418:	697b      	ldr	r3, [r7, #20]
	}
 801241a:	4618      	mov	r0, r3
 801241c:	3718      	adds	r7, #24
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}
 8012422:	bf00      	nop
 8012424:	24001410 	.word	0x24001410
 8012428:	240018ec 	.word	0x240018ec
 801242c:	24001414 	.word	0x24001414

08012430 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012430:	b580      	push	{r7, lr}
 8012432:	b088      	sub	sp, #32
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801243e:	2301      	movs	r3, #1
 8012440:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d06a      	beq.n	801251e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012448:	69bb      	ldr	r3, [r7, #24]
 801244a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801244c:	2b00      	cmp	r3, #0
 801244e:	d10a      	bne.n	8012466 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8012450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012454:	f383 8811 	msr	BASEPRI, r3
 8012458:	f3bf 8f6f 	isb	sy
 801245c:	f3bf 8f4f 	dsb	sy
 8012460:	60fb      	str	r3, [r7, #12]
}
 8012462:	bf00      	nop
 8012464:	e7fe      	b.n	8012464 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012466:	69bb      	ldr	r3, [r7, #24]
 8012468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801246a:	683a      	ldr	r2, [r7, #0]
 801246c:	429a      	cmp	r2, r3
 801246e:	d902      	bls.n	8012476 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	61fb      	str	r3, [r7, #28]
 8012474:	e002      	b.n	801247c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012476:	69bb      	ldr	r3, [r7, #24]
 8012478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801247a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012480:	69fa      	ldr	r2, [r7, #28]
 8012482:	429a      	cmp	r2, r3
 8012484:	d04b      	beq.n	801251e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012486:	69bb      	ldr	r3, [r7, #24]
 8012488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801248a:	697a      	ldr	r2, [r7, #20]
 801248c:	429a      	cmp	r2, r3
 801248e:	d146      	bne.n	801251e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012490:	4b25      	ldr	r3, [pc, #148]	; (8012528 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	69ba      	ldr	r2, [r7, #24]
 8012496:	429a      	cmp	r2, r3
 8012498:	d10a      	bne.n	80124b0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801249e:	f383 8811 	msr	BASEPRI, r3
 80124a2:	f3bf 8f6f 	isb	sy
 80124a6:	f3bf 8f4f 	dsb	sy
 80124aa:	60bb      	str	r3, [r7, #8]
}
 80124ac:	bf00      	nop
 80124ae:	e7fe      	b.n	80124ae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80124b0:	69bb      	ldr	r3, [r7, #24]
 80124b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80124b6:	69bb      	ldr	r3, [r7, #24]
 80124b8:	69fa      	ldr	r2, [r7, #28]
 80124ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80124bc:	69bb      	ldr	r3, [r7, #24]
 80124be:	699b      	ldr	r3, [r3, #24]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	db04      	blt.n	80124ce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124c4:	69fb      	ldr	r3, [r7, #28]
 80124c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80124ca:	69bb      	ldr	r3, [r7, #24]
 80124cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80124ce:	69bb      	ldr	r3, [r7, #24]
 80124d0:	6959      	ldr	r1, [r3, #20]
 80124d2:	693a      	ldr	r2, [r7, #16]
 80124d4:	4613      	mov	r3, r2
 80124d6:	009b      	lsls	r3, r3, #2
 80124d8:	4413      	add	r3, r2
 80124da:	009b      	lsls	r3, r3, #2
 80124dc:	4a13      	ldr	r2, [pc, #76]	; (801252c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80124de:	4413      	add	r3, r2
 80124e0:	4299      	cmp	r1, r3
 80124e2:	d11c      	bne.n	801251e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	3304      	adds	r3, #4
 80124e8:	4618      	mov	r0, r3
 80124ea:	f7fd ff1b 	bl	8010324 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80124ee:	69bb      	ldr	r3, [r7, #24]
 80124f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124f2:	4b0f      	ldr	r3, [pc, #60]	; (8012530 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d903      	bls.n	8012502 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80124fa:	69bb      	ldr	r3, [r7, #24]
 80124fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124fe:	4a0c      	ldr	r2, [pc, #48]	; (8012530 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012500:	6013      	str	r3, [r2, #0]
 8012502:	69bb      	ldr	r3, [r7, #24]
 8012504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012506:	4613      	mov	r3, r2
 8012508:	009b      	lsls	r3, r3, #2
 801250a:	4413      	add	r3, r2
 801250c:	009b      	lsls	r3, r3, #2
 801250e:	4a07      	ldr	r2, [pc, #28]	; (801252c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012510:	441a      	add	r2, r3
 8012512:	69bb      	ldr	r3, [r7, #24]
 8012514:	3304      	adds	r3, #4
 8012516:	4619      	mov	r1, r3
 8012518:	4610      	mov	r0, r2
 801251a:	f7fd fea6 	bl	801026a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801251e:	bf00      	nop
 8012520:	3720      	adds	r7, #32
 8012522:	46bd      	mov	sp, r7
 8012524:	bd80      	pop	{r7, pc}
 8012526:	bf00      	nop
 8012528:	24001410 	.word	0x24001410
 801252c:	24001414 	.word	0x24001414
 8012530:	240018ec 	.word	0x240018ec

08012534 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012534:	b480      	push	{r7}
 8012536:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012538:	4b07      	ldr	r3, [pc, #28]	; (8012558 <pvTaskIncrementMutexHeldCount+0x24>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d004      	beq.n	801254a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012540:	4b05      	ldr	r3, [pc, #20]	; (8012558 <pvTaskIncrementMutexHeldCount+0x24>)
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012546:	3201      	adds	r2, #1
 8012548:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801254a:	4b03      	ldr	r3, [pc, #12]	; (8012558 <pvTaskIncrementMutexHeldCount+0x24>)
 801254c:	681b      	ldr	r3, [r3, #0]
	}
 801254e:	4618      	mov	r0, r3
 8012550:	46bd      	mov	sp, r7
 8012552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012556:	4770      	bx	lr
 8012558:	24001410 	.word	0x24001410

0801255c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
 8012564:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8012566:	f001 f805 	bl	8013574 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801256a:	4b20      	ldr	r3, [pc, #128]	; (80125ec <ulTaskNotifyTake+0x90>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012572:	2b00      	cmp	r3, #0
 8012574:	d113      	bne.n	801259e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8012576:	4b1d      	ldr	r3, [pc, #116]	; (80125ec <ulTaskNotifyTake+0x90>)
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	2201      	movs	r2, #1
 801257c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d00b      	beq.n	801259e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012586:	2101      	movs	r1, #1
 8012588:	6838      	ldr	r0, [r7, #0]
 801258a:	f000 fa69 	bl	8012a60 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801258e:	4b18      	ldr	r3, [pc, #96]	; (80125f0 <ulTaskNotifyTake+0x94>)
 8012590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012594:	601a      	str	r2, [r3, #0]
 8012596:	f3bf 8f4f 	dsb	sy
 801259a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801259e:	f001 f819 	bl	80135d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80125a2:	f000 ffe7 	bl	8013574 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80125a6:	4b11      	ldr	r3, [pc, #68]	; (80125ec <ulTaskNotifyTake+0x90>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80125ae:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d00e      	beq.n	80125d4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d005      	beq.n	80125c8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80125bc:	4b0b      	ldr	r3, [pc, #44]	; (80125ec <ulTaskNotifyTake+0x90>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	2200      	movs	r2, #0
 80125c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 80125c6:	e005      	b.n	80125d4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80125c8:	4b08      	ldr	r3, [pc, #32]	; (80125ec <ulTaskNotifyTake+0x90>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	68fa      	ldr	r2, [r7, #12]
 80125ce:	3a01      	subs	r2, #1
 80125d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80125d4:	4b05      	ldr	r3, [pc, #20]	; (80125ec <ulTaskNotifyTake+0x90>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	2200      	movs	r2, #0
 80125da:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 80125de:	f000 fff9 	bl	80135d4 <vPortExitCritical>

		return ulReturn;
 80125e2:	68fb      	ldr	r3, [r7, #12]
	}
 80125e4:	4618      	mov	r0, r3
 80125e6:	3710      	adds	r7, #16
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd80      	pop	{r7, pc}
 80125ec:	24001410 	.word	0x24001410
 80125f0:	e000ed04 	.word	0xe000ed04

080125f4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b08a      	sub	sp, #40	; 0x28
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	60f8      	str	r0, [r7, #12]
 80125fc:	60b9      	str	r1, [r7, #8]
 80125fe:	603b      	str	r3, [r7, #0]
 8012600:	4613      	mov	r3, r2
 8012602:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8012604:	2301      	movs	r3, #1
 8012606:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d10a      	bne.n	8012624 <xTaskGenericNotify+0x30>
	__asm volatile
 801260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012612:	f383 8811 	msr	BASEPRI, r3
 8012616:	f3bf 8f6f 	isb	sy
 801261a:	f3bf 8f4f 	dsb	sy
 801261e:	61bb      	str	r3, [r7, #24]
}
 8012620:	bf00      	nop
 8012622:	e7fe      	b.n	8012622 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8012628:	f000 ffa4 	bl	8013574 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d004      	beq.n	801263c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012632:	6a3b      	ldr	r3, [r7, #32]
 8012634:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801263c:	6a3b      	ldr	r3, [r7, #32]
 801263e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8012642:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012644:	6a3b      	ldr	r3, [r7, #32]
 8012646:	2202      	movs	r2, #2
 8012648:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 801264c:	79fb      	ldrb	r3, [r7, #7]
 801264e:	2b04      	cmp	r3, #4
 8012650:	d82d      	bhi.n	80126ae <xTaskGenericNotify+0xba>
 8012652:	a201      	add	r2, pc, #4	; (adr r2, 8012658 <xTaskGenericNotify+0x64>)
 8012654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012658:	080126d1 	.word	0x080126d1
 801265c:	0801266d 	.word	0x0801266d
 8012660:	0801267f 	.word	0x0801267f
 8012664:	0801268f 	.word	0x0801268f
 8012668:	08012699 	.word	0x08012699
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801266c:	6a3b      	ldr	r3, [r7, #32]
 801266e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	431a      	orrs	r2, r3
 8012676:	6a3b      	ldr	r3, [r7, #32]
 8012678:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 801267c:	e02b      	b.n	80126d6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801267e:	6a3b      	ldr	r3, [r7, #32]
 8012680:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012684:	1c5a      	adds	r2, r3, #1
 8012686:	6a3b      	ldr	r3, [r7, #32]
 8012688:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 801268c:	e023      	b.n	80126d6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801268e:	6a3b      	ldr	r3, [r7, #32]
 8012690:	68ba      	ldr	r2, [r7, #8]
 8012692:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8012696:	e01e      	b.n	80126d6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012698:	7ffb      	ldrb	r3, [r7, #31]
 801269a:	2b02      	cmp	r3, #2
 801269c:	d004      	beq.n	80126a8 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801269e:	6a3b      	ldr	r3, [r7, #32]
 80126a0:	68ba      	ldr	r2, [r7, #8]
 80126a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80126a6:	e016      	b.n	80126d6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80126a8:	2300      	movs	r3, #0
 80126aa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80126ac:	e013      	b.n	80126d6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80126ae:	6a3b      	ldr	r3, [r7, #32]
 80126b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80126b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126b8:	d00c      	beq.n	80126d4 <xTaskGenericNotify+0xe0>
	__asm volatile
 80126ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126be:	f383 8811 	msr	BASEPRI, r3
 80126c2:	f3bf 8f6f 	isb	sy
 80126c6:	f3bf 8f4f 	dsb	sy
 80126ca:	617b      	str	r3, [r7, #20]
}
 80126cc:	bf00      	nop
 80126ce:	e7fe      	b.n	80126ce <xTaskGenericNotify+0xda>
					break;
 80126d0:	bf00      	nop
 80126d2:	e000      	b.n	80126d6 <xTaskGenericNotify+0xe2>

					break;
 80126d4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80126d6:	7ffb      	ldrb	r3, [r7, #31]
 80126d8:	2b01      	cmp	r3, #1
 80126da:	d13a      	bne.n	8012752 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80126dc:	6a3b      	ldr	r3, [r7, #32]
 80126de:	3304      	adds	r3, #4
 80126e0:	4618      	mov	r0, r3
 80126e2:	f7fd fe1f 	bl	8010324 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80126e6:	6a3b      	ldr	r3, [r7, #32]
 80126e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126ea:	4b1d      	ldr	r3, [pc, #116]	; (8012760 <xTaskGenericNotify+0x16c>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	429a      	cmp	r2, r3
 80126f0:	d903      	bls.n	80126fa <xTaskGenericNotify+0x106>
 80126f2:	6a3b      	ldr	r3, [r7, #32]
 80126f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126f6:	4a1a      	ldr	r2, [pc, #104]	; (8012760 <xTaskGenericNotify+0x16c>)
 80126f8:	6013      	str	r3, [r2, #0]
 80126fa:	6a3b      	ldr	r3, [r7, #32]
 80126fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126fe:	4613      	mov	r3, r2
 8012700:	009b      	lsls	r3, r3, #2
 8012702:	4413      	add	r3, r2
 8012704:	009b      	lsls	r3, r3, #2
 8012706:	4a17      	ldr	r2, [pc, #92]	; (8012764 <xTaskGenericNotify+0x170>)
 8012708:	441a      	add	r2, r3
 801270a:	6a3b      	ldr	r3, [r7, #32]
 801270c:	3304      	adds	r3, #4
 801270e:	4619      	mov	r1, r3
 8012710:	4610      	mov	r0, r2
 8012712:	f7fd fdaa 	bl	801026a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012716:	6a3b      	ldr	r3, [r7, #32]
 8012718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801271a:	2b00      	cmp	r3, #0
 801271c:	d00a      	beq.n	8012734 <xTaskGenericNotify+0x140>
	__asm volatile
 801271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012722:	f383 8811 	msr	BASEPRI, r3
 8012726:	f3bf 8f6f 	isb	sy
 801272a:	f3bf 8f4f 	dsb	sy
 801272e:	613b      	str	r3, [r7, #16]
}
 8012730:	bf00      	nop
 8012732:	e7fe      	b.n	8012732 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012734:	6a3b      	ldr	r3, [r7, #32]
 8012736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012738:	4b0b      	ldr	r3, [pc, #44]	; (8012768 <xTaskGenericNotify+0x174>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801273e:	429a      	cmp	r2, r3
 8012740:	d907      	bls.n	8012752 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012742:	4b0a      	ldr	r3, [pc, #40]	; (801276c <xTaskGenericNotify+0x178>)
 8012744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012748:	601a      	str	r2, [r3, #0]
 801274a:	f3bf 8f4f 	dsb	sy
 801274e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012752:	f000 ff3f 	bl	80135d4 <vPortExitCritical>

		return xReturn;
 8012756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012758:	4618      	mov	r0, r3
 801275a:	3728      	adds	r7, #40	; 0x28
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}
 8012760:	240018ec 	.word	0x240018ec
 8012764:	24001414 	.word	0x24001414
 8012768:	24001410 	.word	0x24001410
 801276c:	e000ed04 	.word	0xe000ed04

08012770 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012770:	b580      	push	{r7, lr}
 8012772:	b08e      	sub	sp, #56	; 0x38
 8012774:	af00      	add	r7, sp, #0
 8012776:	60f8      	str	r0, [r7, #12]
 8012778:	60b9      	str	r1, [r7, #8]
 801277a:	603b      	str	r3, [r7, #0]
 801277c:	4613      	mov	r3, r2
 801277e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8012780:	2301      	movs	r3, #1
 8012782:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d10a      	bne.n	80127a0 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 801278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801278e:	f383 8811 	msr	BASEPRI, r3
 8012792:	f3bf 8f6f 	isb	sy
 8012796:	f3bf 8f4f 	dsb	sy
 801279a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801279c:	bf00      	nop
 801279e:	e7fe      	b.n	801279e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80127a0:	f000 ffca 	bl	8013738 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80127a8:	f3ef 8211 	mrs	r2, BASEPRI
 80127ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b0:	f383 8811 	msr	BASEPRI, r3
 80127b4:	f3bf 8f6f 	isb	sy
 80127b8:	f3bf 8f4f 	dsb	sy
 80127bc:	623a      	str	r2, [r7, #32]
 80127be:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80127c0:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80127c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d004      	beq.n	80127d4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80127ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127cc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80127d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80127da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80127de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e0:	2202      	movs	r2, #2
 80127e2:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 80127e6:	79fb      	ldrb	r3, [r7, #7]
 80127e8:	2b04      	cmp	r3, #4
 80127ea:	d82f      	bhi.n	801284c <xTaskGenericNotifyFromISR+0xdc>
 80127ec:	a201      	add	r2, pc, #4	; (adr r2, 80127f4 <xTaskGenericNotifyFromISR+0x84>)
 80127ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127f2:	bf00      	nop
 80127f4:	0801286f 	.word	0x0801286f
 80127f8:	08012809 	.word	0x08012809
 80127fc:	0801281b 	.word	0x0801281b
 8012800:	0801282b 	.word	0x0801282b
 8012804:	08012835 	.word	0x08012835
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801280a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	431a      	orrs	r2, r3
 8012812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012814:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8012818:	e02c      	b.n	8012874 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801281c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012820:	1c5a      	adds	r2, r3, #1
 8012822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012824:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8012828:	e024      	b.n	8012874 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801282c:	68ba      	ldr	r2, [r7, #8]
 801282e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8012832:	e01f      	b.n	8012874 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012834:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012838:	2b02      	cmp	r3, #2
 801283a:	d004      	beq.n	8012846 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801283c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801283e:	68ba      	ldr	r2, [r7, #8]
 8012840:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012844:	e016      	b.n	8012874 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8012846:	2300      	movs	r3, #0
 8012848:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801284a:	e013      	b.n	8012874 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801284c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801284e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012856:	d00c      	beq.n	8012872 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8012858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801285c:	f383 8811 	msr	BASEPRI, r3
 8012860:	f3bf 8f6f 	isb	sy
 8012864:	f3bf 8f4f 	dsb	sy
 8012868:	61bb      	str	r3, [r7, #24]
}
 801286a:	bf00      	nop
 801286c:	e7fe      	b.n	801286c <xTaskGenericNotifyFromISR+0xfc>
					break;
 801286e:	bf00      	nop
 8012870:	e000      	b.n	8012874 <xTaskGenericNotifyFromISR+0x104>
					break;
 8012872:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012874:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012878:	2b01      	cmp	r3, #1
 801287a:	d146      	bne.n	801290a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801287c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012880:	2b00      	cmp	r3, #0
 8012882:	d00a      	beq.n	801289a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8012884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012888:	f383 8811 	msr	BASEPRI, r3
 801288c:	f3bf 8f6f 	isb	sy
 8012890:	f3bf 8f4f 	dsb	sy
 8012894:	617b      	str	r3, [r7, #20]
}
 8012896:	bf00      	nop
 8012898:	e7fe      	b.n	8012898 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801289a:	4b21      	ldr	r3, [pc, #132]	; (8012920 <xTaskGenericNotifyFromISR+0x1b0>)
 801289c:	681b      	ldr	r3, [r3, #0]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d11d      	bne.n	80128de <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80128a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a4:	3304      	adds	r3, #4
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fd fd3c 	bl	8010324 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80128ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128b0:	4b1c      	ldr	r3, [pc, #112]	; (8012924 <xTaskGenericNotifyFromISR+0x1b4>)
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d903      	bls.n	80128c0 <xTaskGenericNotifyFromISR+0x150>
 80128b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128bc:	4a19      	ldr	r2, [pc, #100]	; (8012924 <xTaskGenericNotifyFromISR+0x1b4>)
 80128be:	6013      	str	r3, [r2, #0]
 80128c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128c4:	4613      	mov	r3, r2
 80128c6:	009b      	lsls	r3, r3, #2
 80128c8:	4413      	add	r3, r2
 80128ca:	009b      	lsls	r3, r3, #2
 80128cc:	4a16      	ldr	r2, [pc, #88]	; (8012928 <xTaskGenericNotifyFromISR+0x1b8>)
 80128ce:	441a      	add	r2, r3
 80128d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d2:	3304      	adds	r3, #4
 80128d4:	4619      	mov	r1, r3
 80128d6:	4610      	mov	r0, r2
 80128d8:	f7fd fcc7 	bl	801026a <vListInsertEnd>
 80128dc:	e005      	b.n	80128ea <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80128de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e0:	3318      	adds	r3, #24
 80128e2:	4619      	mov	r1, r3
 80128e4:	4811      	ldr	r0, [pc, #68]	; (801292c <xTaskGenericNotifyFromISR+0x1bc>)
 80128e6:	f7fd fcc0 	bl	801026a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80128ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128ee:	4b10      	ldr	r3, [pc, #64]	; (8012930 <xTaskGenericNotifyFromISR+0x1c0>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128f4:	429a      	cmp	r2, r3
 80128f6:	d908      	bls.n	801290a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80128f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d002      	beq.n	8012904 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80128fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012900:	2201      	movs	r2, #1
 8012902:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8012904:	4b0b      	ldr	r3, [pc, #44]	; (8012934 <xTaskGenericNotifyFromISR+0x1c4>)
 8012906:	2201      	movs	r2, #1
 8012908:	601a      	str	r2, [r3, #0]
 801290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	f383 8811 	msr	BASEPRI, r3
}
 8012914:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8012916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8012918:	4618      	mov	r0, r3
 801291a:	3738      	adds	r7, #56	; 0x38
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}
 8012920:	2400190c 	.word	0x2400190c
 8012924:	240018ec 	.word	0x240018ec
 8012928:	24001414 	.word	0x24001414
 801292c:	240018a4 	.word	0x240018a4
 8012930:	24001410 	.word	0x24001410
 8012934:	240018f8 	.word	0x240018f8

08012938 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012938:	b580      	push	{r7, lr}
 801293a:	b08a      	sub	sp, #40	; 0x28
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d10a      	bne.n	801295e <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 8012948:	f04f 0350 	mov.w	r3, #80	; 0x50
 801294c:	f383 8811 	msr	BASEPRI, r3
 8012950:	f3bf 8f6f 	isb	sy
 8012954:	f3bf 8f4f 	dsb	sy
 8012958:	61bb      	str	r3, [r7, #24]
}
 801295a:	bf00      	nop
 801295c:	e7fe      	b.n	801295c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801295e:	f000 feeb 	bl	8013738 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8012966:	f3ef 8211 	mrs	r2, BASEPRI
 801296a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801296e:	f383 8811 	msr	BASEPRI, r3
 8012972:	f3bf 8f6f 	isb	sy
 8012976:	f3bf 8f4f 	dsb	sy
 801297a:	617a      	str	r2, [r7, #20]
 801297c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801297e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012980:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012984:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8012988:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298c:	2202      	movs	r2, #2
 801298e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8012992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012994:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012998:	1c5a      	adds	r2, r3, #1
 801299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80129a0:	7ffb      	ldrb	r3, [r7, #31]
 80129a2:	2b01      	cmp	r3, #1
 80129a4:	d146      	bne.n	8012a34 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80129a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d00a      	beq.n	80129c4 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 80129ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b2:	f383 8811 	msr	BASEPRI, r3
 80129b6:	f3bf 8f6f 	isb	sy
 80129ba:	f3bf 8f4f 	dsb	sy
 80129be:	60fb      	str	r3, [r7, #12]
}
 80129c0:	bf00      	nop
 80129c2:	e7fe      	b.n	80129c2 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129c4:	4b20      	ldr	r3, [pc, #128]	; (8012a48 <vTaskNotifyGiveFromISR+0x110>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d11d      	bne.n	8012a08 <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80129cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ce:	3304      	adds	r3, #4
 80129d0:	4618      	mov	r0, r3
 80129d2:	f7fd fca7 	bl	8010324 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80129d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129da:	4b1c      	ldr	r3, [pc, #112]	; (8012a4c <vTaskNotifyGiveFromISR+0x114>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	429a      	cmp	r2, r3
 80129e0:	d903      	bls.n	80129ea <vTaskNotifyGiveFromISR+0xb2>
 80129e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129e6:	4a19      	ldr	r2, [pc, #100]	; (8012a4c <vTaskNotifyGiveFromISR+0x114>)
 80129e8:	6013      	str	r3, [r2, #0]
 80129ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129ee:	4613      	mov	r3, r2
 80129f0:	009b      	lsls	r3, r3, #2
 80129f2:	4413      	add	r3, r2
 80129f4:	009b      	lsls	r3, r3, #2
 80129f6:	4a16      	ldr	r2, [pc, #88]	; (8012a50 <vTaskNotifyGiveFromISR+0x118>)
 80129f8:	441a      	add	r2, r3
 80129fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fc:	3304      	adds	r3, #4
 80129fe:	4619      	mov	r1, r3
 8012a00:	4610      	mov	r0, r2
 8012a02:	f7fd fc32 	bl	801026a <vListInsertEnd>
 8012a06:	e005      	b.n	8012a14 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0a:	3318      	adds	r3, #24
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	4811      	ldr	r0, [pc, #68]	; (8012a54 <vTaskNotifyGiveFromISR+0x11c>)
 8012a10:	f7fd fc2b 	bl	801026a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a18:	4b0f      	ldr	r3, [pc, #60]	; (8012a58 <vTaskNotifyGiveFromISR+0x120>)
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a1e:	429a      	cmp	r2, r3
 8012a20:	d908      	bls.n	8012a34 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d002      	beq.n	8012a2e <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8012a2e:	4b0b      	ldr	r3, [pc, #44]	; (8012a5c <vTaskNotifyGiveFromISR+0x124>)
 8012a30:	2201      	movs	r2, #1
 8012a32:	601a      	str	r2, [r3, #0]
 8012a34:	6a3b      	ldr	r3, [r7, #32]
 8012a36:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	f383 8811 	msr	BASEPRI, r3
}
 8012a3e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8012a40:	bf00      	nop
 8012a42:	3728      	adds	r7, #40	; 0x28
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd80      	pop	{r7, pc}
 8012a48:	2400190c 	.word	0x2400190c
 8012a4c:	240018ec 	.word	0x240018ec
 8012a50:	24001414 	.word	0x24001414
 8012a54:	240018a4 	.word	0x240018a4
 8012a58:	24001410 	.word	0x24001410
 8012a5c:	240018f8 	.word	0x240018f8

08012a60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b084      	sub	sp, #16
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
 8012a68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012a6a:	4b21      	ldr	r3, [pc, #132]	; (8012af0 <prvAddCurrentTaskToDelayedList+0x90>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a70:	4b20      	ldr	r3, [pc, #128]	; (8012af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	3304      	adds	r3, #4
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7fd fc54 	bl	8010324 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a82:	d10a      	bne.n	8012a9a <prvAddCurrentTaskToDelayedList+0x3a>
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d007      	beq.n	8012a9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012a8a:	4b1a      	ldr	r3, [pc, #104]	; (8012af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	3304      	adds	r3, #4
 8012a90:	4619      	mov	r1, r3
 8012a92:	4819      	ldr	r0, [pc, #100]	; (8012af8 <prvAddCurrentTaskToDelayedList+0x98>)
 8012a94:	f7fd fbe9 	bl	801026a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012a98:	e026      	b.n	8012ae8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012a9a:	68fa      	ldr	r2, [r7, #12]
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	4413      	add	r3, r2
 8012aa0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012aa2:	4b14      	ldr	r3, [pc, #80]	; (8012af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	68ba      	ldr	r2, [r7, #8]
 8012aa8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012aaa:	68ba      	ldr	r2, [r7, #8]
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d209      	bcs.n	8012ac6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ab2:	4b12      	ldr	r3, [pc, #72]	; (8012afc <prvAddCurrentTaskToDelayedList+0x9c>)
 8012ab4:	681a      	ldr	r2, [r3, #0]
 8012ab6:	4b0f      	ldr	r3, [pc, #60]	; (8012af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	3304      	adds	r3, #4
 8012abc:	4619      	mov	r1, r3
 8012abe:	4610      	mov	r0, r2
 8012ac0:	f7fd fbf7 	bl	80102b2 <vListInsert>
}
 8012ac4:	e010      	b.n	8012ae8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012ac6:	4b0e      	ldr	r3, [pc, #56]	; (8012b00 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012ac8:	681a      	ldr	r2, [r3, #0]
 8012aca:	4b0a      	ldr	r3, [pc, #40]	; (8012af4 <prvAddCurrentTaskToDelayedList+0x94>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	3304      	adds	r3, #4
 8012ad0:	4619      	mov	r1, r3
 8012ad2:	4610      	mov	r0, r2
 8012ad4:	f7fd fbed 	bl	80102b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012ad8:	4b0a      	ldr	r3, [pc, #40]	; (8012b04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	68ba      	ldr	r2, [r7, #8]
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d202      	bcs.n	8012ae8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012ae2:	4a08      	ldr	r2, [pc, #32]	; (8012b04 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012ae4:	68bb      	ldr	r3, [r7, #8]
 8012ae6:	6013      	str	r3, [r2, #0]
}
 8012ae8:	bf00      	nop
 8012aea:	3710      	adds	r7, #16
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}
 8012af0:	240018e8 	.word	0x240018e8
 8012af4:	24001410 	.word	0x24001410
 8012af8:	240018d0 	.word	0x240018d0
 8012afc:	240018a0 	.word	0x240018a0
 8012b00:	2400189c 	.word	0x2400189c
 8012b04:	24001904 	.word	0x24001904

08012b08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b08a      	sub	sp, #40	; 0x28
 8012b0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012b12:	f000 fba1 	bl	8013258 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012b16:	4b1c      	ldr	r3, [pc, #112]	; (8012b88 <xTimerCreateTimerTask+0x80>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d021      	beq.n	8012b62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012b1e:	2300      	movs	r3, #0
 8012b20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012b22:	2300      	movs	r3, #0
 8012b24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012b26:	1d3a      	adds	r2, r7, #4
 8012b28:	f107 0108 	add.w	r1, r7, #8
 8012b2c:	f107 030c 	add.w	r3, r7, #12
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7fd fb53 	bl	80101dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012b36:	6879      	ldr	r1, [r7, #4]
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	68fa      	ldr	r2, [r7, #12]
 8012b3c:	9202      	str	r2, [sp, #8]
 8012b3e:	9301      	str	r3, [sp, #4]
 8012b40:	2302      	movs	r3, #2
 8012b42:	9300      	str	r3, [sp, #0]
 8012b44:	2300      	movs	r3, #0
 8012b46:	460a      	mov	r2, r1
 8012b48:	4910      	ldr	r1, [pc, #64]	; (8012b8c <xTimerCreateTimerTask+0x84>)
 8012b4a:	4811      	ldr	r0, [pc, #68]	; (8012b90 <xTimerCreateTimerTask+0x88>)
 8012b4c:	f7fe fc22 	bl	8011394 <xTaskCreateStatic>
 8012b50:	4603      	mov	r3, r0
 8012b52:	4a10      	ldr	r2, [pc, #64]	; (8012b94 <xTimerCreateTimerTask+0x8c>)
 8012b54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012b56:	4b0f      	ldr	r3, [pc, #60]	; (8012b94 <xTimerCreateTimerTask+0x8c>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d001      	beq.n	8012b62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012b5e:	2301      	movs	r3, #1
 8012b60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012b62:	697b      	ldr	r3, [r7, #20]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d10a      	bne.n	8012b7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b6c:	f383 8811 	msr	BASEPRI, r3
 8012b70:	f3bf 8f6f 	isb	sy
 8012b74:	f3bf 8f4f 	dsb	sy
 8012b78:	613b      	str	r3, [r7, #16]
}
 8012b7a:	bf00      	nop
 8012b7c:	e7fe      	b.n	8012b7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012b7e:	697b      	ldr	r3, [r7, #20]
}
 8012b80:	4618      	mov	r0, r3
 8012b82:	3718      	adds	r7, #24
 8012b84:	46bd      	mov	sp, r7
 8012b86:	bd80      	pop	{r7, pc}
 8012b88:	24001940 	.word	0x24001940
 8012b8c:	08025084 	.word	0x08025084
 8012b90:	08012e01 	.word	0x08012e01
 8012b94:	24001944 	.word	0x24001944

08012b98 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b088      	sub	sp, #32
 8012b9c:	af02      	add	r7, sp, #8
 8012b9e:	60f8      	str	r0, [r7, #12]
 8012ba0:	60b9      	str	r1, [r7, #8]
 8012ba2:	607a      	str	r2, [r7, #4]
 8012ba4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8012ba6:	202c      	movs	r0, #44	; 0x2c
 8012ba8:	f000 fe06 	bl	80137b8 <pvPortMalloc>
 8012bac:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d00d      	beq.n	8012bd0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012bbc:	697b      	ldr	r3, [r7, #20]
 8012bbe:	9301      	str	r3, [sp, #4]
 8012bc0:	6a3b      	ldr	r3, [r7, #32]
 8012bc2:	9300      	str	r3, [sp, #0]
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	687a      	ldr	r2, [r7, #4]
 8012bc8:	68b9      	ldr	r1, [r7, #8]
 8012bca:	68f8      	ldr	r0, [r7, #12]
 8012bcc:	f000 f843 	bl	8012c56 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8012bd0:	697b      	ldr	r3, [r7, #20]
	}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3718      	adds	r7, #24
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}

08012bda <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8012bda:	b580      	push	{r7, lr}
 8012bdc:	b08a      	sub	sp, #40	; 0x28
 8012bde:	af02      	add	r7, sp, #8
 8012be0:	60f8      	str	r0, [r7, #12]
 8012be2:	60b9      	str	r1, [r7, #8]
 8012be4:	607a      	str	r2, [r7, #4]
 8012be6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012be8:	232c      	movs	r3, #44	; 0x2c
 8012bea:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8012bec:	693b      	ldr	r3, [r7, #16]
 8012bee:	2b2c      	cmp	r3, #44	; 0x2c
 8012bf0:	d00a      	beq.n	8012c08 <xTimerCreateStatic+0x2e>
	__asm volatile
 8012bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bf6:	f383 8811 	msr	BASEPRI, r3
 8012bfa:	f3bf 8f6f 	isb	sy
 8012bfe:	f3bf 8f4f 	dsb	sy
 8012c02:	61bb      	str	r3, [r7, #24]
}
 8012c04:	bf00      	nop
 8012c06:	e7fe      	b.n	8012c06 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012c08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8012c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d10a      	bne.n	8012c26 <xTimerCreateStatic+0x4c>
	__asm volatile
 8012c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c14:	f383 8811 	msr	BASEPRI, r3
 8012c18:	f3bf 8f6f 	isb	sy
 8012c1c:	f3bf 8f4f 	dsb	sy
 8012c20:	617b      	str	r3, [r7, #20]
}
 8012c22:	bf00      	nop
 8012c24:	e7fe      	b.n	8012c24 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8012c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c28:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8012c2a:	69fb      	ldr	r3, [r7, #28]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d00d      	beq.n	8012c4c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8012c30:	69fb      	ldr	r3, [r7, #28]
 8012c32:	2202      	movs	r2, #2
 8012c34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012c38:	69fb      	ldr	r3, [r7, #28]
 8012c3a:	9301      	str	r3, [sp, #4]
 8012c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c3e:	9300      	str	r3, [sp, #0]
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	687a      	ldr	r2, [r7, #4]
 8012c44:	68b9      	ldr	r1, [r7, #8]
 8012c46:	68f8      	ldr	r0, [r7, #12]
 8012c48:	f000 f805 	bl	8012c56 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8012c4c:	69fb      	ldr	r3, [r7, #28]
	}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	3720      	adds	r7, #32
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bd80      	pop	{r7, pc}

08012c56 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8012c56:	b580      	push	{r7, lr}
 8012c58:	b086      	sub	sp, #24
 8012c5a:	af00      	add	r7, sp, #0
 8012c5c:	60f8      	str	r0, [r7, #12]
 8012c5e:	60b9      	str	r1, [r7, #8]
 8012c60:	607a      	str	r2, [r7, #4]
 8012c62:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012c64:	68bb      	ldr	r3, [r7, #8]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d10a      	bne.n	8012c80 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8012c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c6e:	f383 8811 	msr	BASEPRI, r3
 8012c72:	f3bf 8f6f 	isb	sy
 8012c76:	f3bf 8f4f 	dsb	sy
 8012c7a:	617b      	str	r3, [r7, #20]
}
 8012c7c:	bf00      	nop
 8012c7e:	e7fe      	b.n	8012c7e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8012c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d01e      	beq.n	8012cc4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8012c86:	f000 fae7 	bl	8013258 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8012c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8c:	68fa      	ldr	r2, [r7, #12]
 8012c8e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c92:	68ba      	ldr	r2, [r7, #8]
 8012c94:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8012c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c98:	683a      	ldr	r2, [r7, #0]
 8012c9a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9e:	6a3a      	ldr	r2, [r7, #32]
 8012ca0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca4:	3304      	adds	r3, #4
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f7fd fad2 	bl	8010250 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d008      	beq.n	8012cc4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012cb8:	f043 0304 	orr.w	r3, r3, #4
 8012cbc:	b2da      	uxtb	r2, r3
 8012cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8012cc4:	bf00      	nop
 8012cc6:	3718      	adds	r7, #24
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	bd80      	pop	{r7, pc}

08012ccc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b08a      	sub	sp, #40	; 0x28
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	60f8      	str	r0, [r7, #12]
 8012cd4:	60b9      	str	r1, [r7, #8]
 8012cd6:	607a      	str	r2, [r7, #4]
 8012cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012cda:	2300      	movs	r3, #0
 8012cdc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d10a      	bne.n	8012cfa <xTimerGenericCommand+0x2e>
	__asm volatile
 8012ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce8:	f383 8811 	msr	BASEPRI, r3
 8012cec:	f3bf 8f6f 	isb	sy
 8012cf0:	f3bf 8f4f 	dsb	sy
 8012cf4:	623b      	str	r3, [r7, #32]
}
 8012cf6:	bf00      	nop
 8012cf8:	e7fe      	b.n	8012cf8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012cfa:	4b1a      	ldr	r3, [pc, #104]	; (8012d64 <xTimerGenericCommand+0x98>)
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d02a      	beq.n	8012d58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012d02:	68bb      	ldr	r3, [r7, #8]
 8012d04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012d0a:	68fb      	ldr	r3, [r7, #12]
 8012d0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	2b05      	cmp	r3, #5
 8012d12:	dc18      	bgt.n	8012d46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012d14:	f7ff fa98 	bl	8012248 <xTaskGetSchedulerState>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	2b02      	cmp	r3, #2
 8012d1c:	d109      	bne.n	8012d32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012d1e:	4b11      	ldr	r3, [pc, #68]	; (8012d64 <xTimerGenericCommand+0x98>)
 8012d20:	6818      	ldr	r0, [r3, #0]
 8012d22:	f107 0110 	add.w	r1, r7, #16
 8012d26:	2300      	movs	r3, #0
 8012d28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012d2a:	f7fd fccd 	bl	80106c8 <xQueueGenericSend>
 8012d2e:	6278      	str	r0, [r7, #36]	; 0x24
 8012d30:	e012      	b.n	8012d58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012d32:	4b0c      	ldr	r3, [pc, #48]	; (8012d64 <xTimerGenericCommand+0x98>)
 8012d34:	6818      	ldr	r0, [r3, #0]
 8012d36:	f107 0110 	add.w	r1, r7, #16
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	f7fd fcc3 	bl	80106c8 <xQueueGenericSend>
 8012d42:	6278      	str	r0, [r7, #36]	; 0x24
 8012d44:	e008      	b.n	8012d58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012d46:	4b07      	ldr	r3, [pc, #28]	; (8012d64 <xTimerGenericCommand+0x98>)
 8012d48:	6818      	ldr	r0, [r3, #0]
 8012d4a:	f107 0110 	add.w	r1, r7, #16
 8012d4e:	2300      	movs	r3, #0
 8012d50:	683a      	ldr	r2, [r7, #0]
 8012d52:	f7fd fdb7 	bl	80108c4 <xQueueGenericSendFromISR>
 8012d56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	3728      	adds	r7, #40	; 0x28
 8012d5e:	46bd      	mov	sp, r7
 8012d60:	bd80      	pop	{r7, pc}
 8012d62:	bf00      	nop
 8012d64:	24001940 	.word	0x24001940

08012d68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b088      	sub	sp, #32
 8012d6c:	af02      	add	r7, sp, #8
 8012d6e:	6078      	str	r0, [r7, #4]
 8012d70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d72:	4b22      	ldr	r3, [pc, #136]	; (8012dfc <prvProcessExpiredTimer+0x94>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	68db      	ldr	r3, [r3, #12]
 8012d78:	68db      	ldr	r3, [r3, #12]
 8012d7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012d7c:	697b      	ldr	r3, [r7, #20]
 8012d7e:	3304      	adds	r3, #4
 8012d80:	4618      	mov	r0, r3
 8012d82:	f7fd facf 	bl	8010324 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012d8c:	f003 0304 	and.w	r3, r3, #4
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d022      	beq.n	8012dda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012d94:	697b      	ldr	r3, [r7, #20]
 8012d96:	699a      	ldr	r2, [r3, #24]
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	18d1      	adds	r1, r2, r3
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	683a      	ldr	r2, [r7, #0]
 8012da0:	6978      	ldr	r0, [r7, #20]
 8012da2:	f000 f8d1 	bl	8012f48 <prvInsertTimerInActiveList>
 8012da6:	4603      	mov	r3, r0
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d01f      	beq.n	8012dec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012dac:	2300      	movs	r3, #0
 8012dae:	9300      	str	r3, [sp, #0]
 8012db0:	2300      	movs	r3, #0
 8012db2:	687a      	ldr	r2, [r7, #4]
 8012db4:	2100      	movs	r1, #0
 8012db6:	6978      	ldr	r0, [r7, #20]
 8012db8:	f7ff ff88 	bl	8012ccc <xTimerGenericCommand>
 8012dbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012dbe:	693b      	ldr	r3, [r7, #16]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d113      	bne.n	8012dec <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc8:	f383 8811 	msr	BASEPRI, r3
 8012dcc:	f3bf 8f6f 	isb	sy
 8012dd0:	f3bf 8f4f 	dsb	sy
 8012dd4:	60fb      	str	r3, [r7, #12]
}
 8012dd6:	bf00      	nop
 8012dd8:	e7fe      	b.n	8012dd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012de0:	f023 0301 	bic.w	r3, r3, #1
 8012de4:	b2da      	uxtb	r2, r3
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012dec:	697b      	ldr	r3, [r7, #20]
 8012dee:	6a1b      	ldr	r3, [r3, #32]
 8012df0:	6978      	ldr	r0, [r7, #20]
 8012df2:	4798      	blx	r3
}
 8012df4:	bf00      	nop
 8012df6:	3718      	adds	r7, #24
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}
 8012dfc:	24001938 	.word	0x24001938

08012e00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b084      	sub	sp, #16
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e08:	f107 0308 	add.w	r3, r7, #8
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f000 f857 	bl	8012ec0 <prvGetNextExpireTime>
 8012e12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	4619      	mov	r1, r3
 8012e18:	68f8      	ldr	r0, [r7, #12]
 8012e1a:	f000 f803 	bl	8012e24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012e1e:	f000 f8d5 	bl	8012fcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012e22:	e7f1      	b.n	8012e08 <prvTimerTask+0x8>

08012e24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b084      	sub	sp, #16
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012e2e:	f7fe fdfd 	bl	8011a2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012e32:	f107 0308 	add.w	r3, r7, #8
 8012e36:	4618      	mov	r0, r3
 8012e38:	f000 f866 	bl	8012f08 <prvSampleTimeNow>
 8012e3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012e3e:	68bb      	ldr	r3, [r7, #8]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d130      	bne.n	8012ea6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d10a      	bne.n	8012e60 <prvProcessTimerOrBlockTask+0x3c>
 8012e4a:	687a      	ldr	r2, [r7, #4]
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d806      	bhi.n	8012e60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012e52:	f7fe fdf9 	bl	8011a48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012e56:	68f9      	ldr	r1, [r7, #12]
 8012e58:	6878      	ldr	r0, [r7, #4]
 8012e5a:	f7ff ff85 	bl	8012d68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012e5e:	e024      	b.n	8012eaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d008      	beq.n	8012e78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012e66:	4b13      	ldr	r3, [pc, #76]	; (8012eb4 <prvProcessTimerOrBlockTask+0x90>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d101      	bne.n	8012e74 <prvProcessTimerOrBlockTask+0x50>
 8012e70:	2301      	movs	r3, #1
 8012e72:	e000      	b.n	8012e76 <prvProcessTimerOrBlockTask+0x52>
 8012e74:	2300      	movs	r3, #0
 8012e76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012e78:	4b0f      	ldr	r3, [pc, #60]	; (8012eb8 <prvProcessTimerOrBlockTask+0x94>)
 8012e7a:	6818      	ldr	r0, [r3, #0]
 8012e7c:	687a      	ldr	r2, [r7, #4]
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	1ad3      	subs	r3, r2, r3
 8012e82:	683a      	ldr	r2, [r7, #0]
 8012e84:	4619      	mov	r1, r3
 8012e86:	f7fe fa51 	bl	801132c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012e8a:	f7fe fddd 	bl	8011a48 <xTaskResumeAll>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d10a      	bne.n	8012eaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012e94:	4b09      	ldr	r3, [pc, #36]	; (8012ebc <prvProcessTimerOrBlockTask+0x98>)
 8012e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e9a:	601a      	str	r2, [r3, #0]
 8012e9c:	f3bf 8f4f 	dsb	sy
 8012ea0:	f3bf 8f6f 	isb	sy
}
 8012ea4:	e001      	b.n	8012eaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012ea6:	f7fe fdcf 	bl	8011a48 <xTaskResumeAll>
}
 8012eaa:	bf00      	nop
 8012eac:	3710      	adds	r7, #16
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}
 8012eb2:	bf00      	nop
 8012eb4:	2400193c 	.word	0x2400193c
 8012eb8:	24001940 	.word	0x24001940
 8012ebc:	e000ed04 	.word	0xe000ed04

08012ec0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012ec0:	b480      	push	{r7}
 8012ec2:	b085      	sub	sp, #20
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012ec8:	4b0e      	ldr	r3, [pc, #56]	; (8012f04 <prvGetNextExpireTime+0x44>)
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d101      	bne.n	8012ed6 <prvGetNextExpireTime+0x16>
 8012ed2:	2201      	movs	r2, #1
 8012ed4:	e000      	b.n	8012ed8 <prvGetNextExpireTime+0x18>
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d105      	bne.n	8012ef0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012ee4:	4b07      	ldr	r3, [pc, #28]	; (8012f04 <prvGetNextExpireTime+0x44>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	68db      	ldr	r3, [r3, #12]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	60fb      	str	r3, [r7, #12]
 8012eee:	e001      	b.n	8012ef4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
}
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	3714      	adds	r7, #20
 8012efa:	46bd      	mov	sp, r7
 8012efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f00:	4770      	bx	lr
 8012f02:	bf00      	nop
 8012f04:	24001938 	.word	0x24001938

08012f08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012f08:	b580      	push	{r7, lr}
 8012f0a:	b084      	sub	sp, #16
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012f10:	f7fe fe38 	bl	8011b84 <xTaskGetTickCount>
 8012f14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012f16:	4b0b      	ldr	r3, [pc, #44]	; (8012f44 <prvSampleTimeNow+0x3c>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	68fa      	ldr	r2, [r7, #12]
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	d205      	bcs.n	8012f2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012f20:	f000 f936 	bl	8013190 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2201      	movs	r2, #1
 8012f28:	601a      	str	r2, [r3, #0]
 8012f2a:	e002      	b.n	8012f32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2200      	movs	r2, #0
 8012f30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012f32:	4a04      	ldr	r2, [pc, #16]	; (8012f44 <prvSampleTimeNow+0x3c>)
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012f38:	68fb      	ldr	r3, [r7, #12]
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3710      	adds	r7, #16
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
 8012f42:	bf00      	nop
 8012f44:	24001948 	.word	0x24001948

08012f48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b086      	sub	sp, #24
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	60f8      	str	r0, [r7, #12]
 8012f50:	60b9      	str	r1, [r7, #8]
 8012f52:	607a      	str	r2, [r7, #4]
 8012f54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012f56:	2300      	movs	r3, #0
 8012f58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	68ba      	ldr	r2, [r7, #8]
 8012f5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	68fa      	ldr	r2, [r7, #12]
 8012f64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012f66:	68ba      	ldr	r2, [r7, #8]
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	d812      	bhi.n	8012f94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f6e:	687a      	ldr	r2, [r7, #4]
 8012f70:	683b      	ldr	r3, [r7, #0]
 8012f72:	1ad2      	subs	r2, r2, r3
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	699b      	ldr	r3, [r3, #24]
 8012f78:	429a      	cmp	r2, r3
 8012f7a:	d302      	bcc.n	8012f82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	617b      	str	r3, [r7, #20]
 8012f80:	e01b      	b.n	8012fba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012f82:	4b10      	ldr	r3, [pc, #64]	; (8012fc4 <prvInsertTimerInActiveList+0x7c>)
 8012f84:	681a      	ldr	r2, [r3, #0]
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	3304      	adds	r3, #4
 8012f8a:	4619      	mov	r1, r3
 8012f8c:	4610      	mov	r0, r2
 8012f8e:	f7fd f990 	bl	80102b2 <vListInsert>
 8012f92:	e012      	b.n	8012fba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012f94:	687a      	ldr	r2, [r7, #4]
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d206      	bcs.n	8012faa <prvInsertTimerInActiveList+0x62>
 8012f9c:	68ba      	ldr	r2, [r7, #8]
 8012f9e:	683b      	ldr	r3, [r7, #0]
 8012fa0:	429a      	cmp	r2, r3
 8012fa2:	d302      	bcc.n	8012faa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012fa4:	2301      	movs	r3, #1
 8012fa6:	617b      	str	r3, [r7, #20]
 8012fa8:	e007      	b.n	8012fba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012faa:	4b07      	ldr	r3, [pc, #28]	; (8012fc8 <prvInsertTimerInActiveList+0x80>)
 8012fac:	681a      	ldr	r2, [r3, #0]
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	3304      	adds	r3, #4
 8012fb2:	4619      	mov	r1, r3
 8012fb4:	4610      	mov	r0, r2
 8012fb6:	f7fd f97c 	bl	80102b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012fba:	697b      	ldr	r3, [r7, #20]
}
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	3718      	adds	r7, #24
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}
 8012fc4:	2400193c 	.word	0x2400193c
 8012fc8:	24001938 	.word	0x24001938

08012fcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b08e      	sub	sp, #56	; 0x38
 8012fd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012fd2:	e0ca      	b.n	801316a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	da18      	bge.n	801300c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012fda:	1d3b      	adds	r3, r7, #4
 8012fdc:	3304      	adds	r3, #4
 8012fde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d10a      	bne.n	8012ffc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fea:	f383 8811 	msr	BASEPRI, r3
 8012fee:	f3bf 8f6f 	isb	sy
 8012ff2:	f3bf 8f4f 	dsb	sy
 8012ff6:	61fb      	str	r3, [r7, #28]
}
 8012ff8:	bf00      	nop
 8012ffa:	e7fe      	b.n	8012ffa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013002:	6850      	ldr	r0, [r2, #4]
 8013004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013006:	6892      	ldr	r2, [r2, #8]
 8013008:	4611      	mov	r1, r2
 801300a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	2b00      	cmp	r3, #0
 8013010:	f2c0 80ab 	blt.w	801316a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801301a:	695b      	ldr	r3, [r3, #20]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d004      	beq.n	801302a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013022:	3304      	adds	r3, #4
 8013024:	4618      	mov	r0, r3
 8013026:	f7fd f97d 	bl	8010324 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801302a:	463b      	mov	r3, r7
 801302c:	4618      	mov	r0, r3
 801302e:	f7ff ff6b 	bl	8012f08 <prvSampleTimeNow>
 8013032:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	2b09      	cmp	r3, #9
 8013038:	f200 8096 	bhi.w	8013168 <prvProcessReceivedCommands+0x19c>
 801303c:	a201      	add	r2, pc, #4	; (adr r2, 8013044 <prvProcessReceivedCommands+0x78>)
 801303e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013042:	bf00      	nop
 8013044:	0801306d 	.word	0x0801306d
 8013048:	0801306d 	.word	0x0801306d
 801304c:	0801306d 	.word	0x0801306d
 8013050:	080130e1 	.word	0x080130e1
 8013054:	080130f5 	.word	0x080130f5
 8013058:	0801313f 	.word	0x0801313f
 801305c:	0801306d 	.word	0x0801306d
 8013060:	0801306d 	.word	0x0801306d
 8013064:	080130e1 	.word	0x080130e1
 8013068:	080130f5 	.word	0x080130f5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801306e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013072:	f043 0301 	orr.w	r3, r3, #1
 8013076:	b2da      	uxtb	r2, r3
 8013078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801307a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801307e:	68ba      	ldr	r2, [r7, #8]
 8013080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013082:	699b      	ldr	r3, [r3, #24]
 8013084:	18d1      	adds	r1, r2, r3
 8013086:	68bb      	ldr	r3, [r7, #8]
 8013088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801308a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801308c:	f7ff ff5c 	bl	8012f48 <prvInsertTimerInActiveList>
 8013090:	4603      	mov	r3, r0
 8013092:	2b00      	cmp	r3, #0
 8013094:	d069      	beq.n	801316a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013098:	6a1b      	ldr	r3, [r3, #32]
 801309a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801309c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801309e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130a4:	f003 0304 	and.w	r3, r3, #4
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d05e      	beq.n	801316a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80130ac:	68ba      	ldr	r2, [r7, #8]
 80130ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b0:	699b      	ldr	r3, [r3, #24]
 80130b2:	441a      	add	r2, r3
 80130b4:	2300      	movs	r3, #0
 80130b6:	9300      	str	r3, [sp, #0]
 80130b8:	2300      	movs	r3, #0
 80130ba:	2100      	movs	r1, #0
 80130bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130be:	f7ff fe05 	bl	8012ccc <xTimerGenericCommand>
 80130c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80130c4:	6a3b      	ldr	r3, [r7, #32]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d14f      	bne.n	801316a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80130ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ce:	f383 8811 	msr	BASEPRI, r3
 80130d2:	f3bf 8f6f 	isb	sy
 80130d6:	f3bf 8f4f 	dsb	sy
 80130da:	61bb      	str	r3, [r7, #24]
}
 80130dc:	bf00      	nop
 80130de:	e7fe      	b.n	80130de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80130e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130e6:	f023 0301 	bic.w	r3, r3, #1
 80130ea:	b2da      	uxtb	r2, r3
 80130ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80130f2:	e03a      	b.n	801316a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80130f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80130fa:	f043 0301 	orr.w	r3, r3, #1
 80130fe:	b2da      	uxtb	r2, r3
 8013100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013106:	68ba      	ldr	r2, [r7, #8]
 8013108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801310e:	699b      	ldr	r3, [r3, #24]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d10a      	bne.n	801312a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013118:	f383 8811 	msr	BASEPRI, r3
 801311c:	f3bf 8f6f 	isb	sy
 8013120:	f3bf 8f4f 	dsb	sy
 8013124:	617b      	str	r3, [r7, #20]
}
 8013126:	bf00      	nop
 8013128:	e7fe      	b.n	8013128 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801312a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801312c:	699a      	ldr	r2, [r3, #24]
 801312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013130:	18d1      	adds	r1, r2, r3
 8013132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013138:	f7ff ff06 	bl	8012f48 <prvInsertTimerInActiveList>
					break;
 801313c:	e015      	b.n	801316a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013144:	f003 0302 	and.w	r3, r3, #2
 8013148:	2b00      	cmp	r3, #0
 801314a:	d103      	bne.n	8013154 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801314c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801314e:	f000 fbff 	bl	8013950 <vPortFree>
 8013152:	e00a      	b.n	801316a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013156:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801315a:	f023 0301 	bic.w	r3, r3, #1
 801315e:	b2da      	uxtb	r2, r3
 8013160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013166:	e000      	b.n	801316a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8013168:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801316a:	4b08      	ldr	r3, [pc, #32]	; (801318c <prvProcessReceivedCommands+0x1c0>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	1d39      	adds	r1, r7, #4
 8013170:	2200      	movs	r2, #0
 8013172:	4618      	mov	r0, r3
 8013174:	f7fd fcce 	bl	8010b14 <xQueueReceive>
 8013178:	4603      	mov	r3, r0
 801317a:	2b00      	cmp	r3, #0
 801317c:	f47f af2a 	bne.w	8012fd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8013180:	bf00      	nop
 8013182:	bf00      	nop
 8013184:	3730      	adds	r7, #48	; 0x30
 8013186:	46bd      	mov	sp, r7
 8013188:	bd80      	pop	{r7, pc}
 801318a:	bf00      	nop
 801318c:	24001940 	.word	0x24001940

08013190 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b088      	sub	sp, #32
 8013194:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013196:	e048      	b.n	801322a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013198:	4b2d      	ldr	r3, [pc, #180]	; (8013250 <prvSwitchTimerLists+0xc0>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	68db      	ldr	r3, [r3, #12]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131a2:	4b2b      	ldr	r3, [pc, #172]	; (8013250 <prvSwitchTimerLists+0xc0>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	68db      	ldr	r3, [r3, #12]
 80131a8:	68db      	ldr	r3, [r3, #12]
 80131aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	3304      	adds	r3, #4
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7fd f8b7 	bl	8010324 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	6a1b      	ldr	r3, [r3, #32]
 80131ba:	68f8      	ldr	r0, [r7, #12]
 80131bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80131c4:	f003 0304 	and.w	r3, r3, #4
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d02e      	beq.n	801322a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	699b      	ldr	r3, [r3, #24]
 80131d0:	693a      	ldr	r2, [r7, #16]
 80131d2:	4413      	add	r3, r2
 80131d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80131d6:	68ba      	ldr	r2, [r7, #8]
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	429a      	cmp	r2, r3
 80131dc:	d90e      	bls.n	80131fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	68ba      	ldr	r2, [r7, #8]
 80131e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80131e4:	68fb      	ldr	r3, [r7, #12]
 80131e6:	68fa      	ldr	r2, [r7, #12]
 80131e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80131ea:	4b19      	ldr	r3, [pc, #100]	; (8013250 <prvSwitchTimerLists+0xc0>)
 80131ec:	681a      	ldr	r2, [r3, #0]
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	3304      	adds	r3, #4
 80131f2:	4619      	mov	r1, r3
 80131f4:	4610      	mov	r0, r2
 80131f6:	f7fd f85c 	bl	80102b2 <vListInsert>
 80131fa:	e016      	b.n	801322a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80131fc:	2300      	movs	r3, #0
 80131fe:	9300      	str	r3, [sp, #0]
 8013200:	2300      	movs	r3, #0
 8013202:	693a      	ldr	r2, [r7, #16]
 8013204:	2100      	movs	r1, #0
 8013206:	68f8      	ldr	r0, [r7, #12]
 8013208:	f7ff fd60 	bl	8012ccc <xTimerGenericCommand>
 801320c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d10a      	bne.n	801322a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8013214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013218:	f383 8811 	msr	BASEPRI, r3
 801321c:	f3bf 8f6f 	isb	sy
 8013220:	f3bf 8f4f 	dsb	sy
 8013224:	603b      	str	r3, [r7, #0]
}
 8013226:	bf00      	nop
 8013228:	e7fe      	b.n	8013228 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801322a:	4b09      	ldr	r3, [pc, #36]	; (8013250 <prvSwitchTimerLists+0xc0>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d1b1      	bne.n	8013198 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013234:	4b06      	ldr	r3, [pc, #24]	; (8013250 <prvSwitchTimerLists+0xc0>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801323a:	4b06      	ldr	r3, [pc, #24]	; (8013254 <prvSwitchTimerLists+0xc4>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	4a04      	ldr	r2, [pc, #16]	; (8013250 <prvSwitchTimerLists+0xc0>)
 8013240:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013242:	4a04      	ldr	r2, [pc, #16]	; (8013254 <prvSwitchTimerLists+0xc4>)
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	6013      	str	r3, [r2, #0]
}
 8013248:	bf00      	nop
 801324a:	3718      	adds	r7, #24
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}
 8013250:	24001938 	.word	0x24001938
 8013254:	2400193c 	.word	0x2400193c

08013258 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801325e:	f000 f989 	bl	8013574 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013262:	4b15      	ldr	r3, [pc, #84]	; (80132b8 <prvCheckForValidListAndQueue+0x60>)
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d120      	bne.n	80132ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801326a:	4814      	ldr	r0, [pc, #80]	; (80132bc <prvCheckForValidListAndQueue+0x64>)
 801326c:	f7fc ffd0 	bl	8010210 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013270:	4813      	ldr	r0, [pc, #76]	; (80132c0 <prvCheckForValidListAndQueue+0x68>)
 8013272:	f7fc ffcd 	bl	8010210 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013276:	4b13      	ldr	r3, [pc, #76]	; (80132c4 <prvCheckForValidListAndQueue+0x6c>)
 8013278:	4a10      	ldr	r2, [pc, #64]	; (80132bc <prvCheckForValidListAndQueue+0x64>)
 801327a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801327c:	4b12      	ldr	r3, [pc, #72]	; (80132c8 <prvCheckForValidListAndQueue+0x70>)
 801327e:	4a10      	ldr	r2, [pc, #64]	; (80132c0 <prvCheckForValidListAndQueue+0x68>)
 8013280:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013282:	2300      	movs	r3, #0
 8013284:	9300      	str	r3, [sp, #0]
 8013286:	4b11      	ldr	r3, [pc, #68]	; (80132cc <prvCheckForValidListAndQueue+0x74>)
 8013288:	4a11      	ldr	r2, [pc, #68]	; (80132d0 <prvCheckForValidListAndQueue+0x78>)
 801328a:	2110      	movs	r1, #16
 801328c:	200a      	movs	r0, #10
 801328e:	f7fd f8db 	bl	8010448 <xQueueGenericCreateStatic>
 8013292:	4603      	mov	r3, r0
 8013294:	4a08      	ldr	r2, [pc, #32]	; (80132b8 <prvCheckForValidListAndQueue+0x60>)
 8013296:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013298:	4b07      	ldr	r3, [pc, #28]	; (80132b8 <prvCheckForValidListAndQueue+0x60>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d005      	beq.n	80132ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80132a0:	4b05      	ldr	r3, [pc, #20]	; (80132b8 <prvCheckForValidListAndQueue+0x60>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	490b      	ldr	r1, [pc, #44]	; (80132d4 <prvCheckForValidListAndQueue+0x7c>)
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7fd ffec 	bl	8011284 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80132ac:	f000 f992 	bl	80135d4 <vPortExitCritical>
}
 80132b0:	bf00      	nop
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	bf00      	nop
 80132b8:	24001940 	.word	0x24001940
 80132bc:	24001910 	.word	0x24001910
 80132c0:	24001924 	.word	0x24001924
 80132c4:	24001938 	.word	0x24001938
 80132c8:	2400193c 	.word	0x2400193c
 80132cc:	240019ec 	.word	0x240019ec
 80132d0:	2400194c 	.word	0x2400194c
 80132d4:	0802508c 	.word	0x0802508c

080132d8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b086      	sub	sp, #24
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d10a      	bne.n	8013300 <pvTimerGetTimerID+0x28>
	__asm volatile
 80132ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ee:	f383 8811 	msr	BASEPRI, r3
 80132f2:	f3bf 8f6f 	isb	sy
 80132f6:	f3bf 8f4f 	dsb	sy
 80132fa:	60fb      	str	r3, [r7, #12]
}
 80132fc:	bf00      	nop
 80132fe:	e7fe      	b.n	80132fe <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8013300:	f000 f938 	bl	8013574 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8013304:	697b      	ldr	r3, [r7, #20]
 8013306:	69db      	ldr	r3, [r3, #28]
 8013308:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801330a:	f000 f963 	bl	80135d4 <vPortExitCritical>

	return pvReturn;
 801330e:	693b      	ldr	r3, [r7, #16]
}
 8013310:	4618      	mov	r0, r3
 8013312:	3718      	adds	r7, #24
 8013314:	46bd      	mov	sp, r7
 8013316:	bd80      	pop	{r7, pc}

08013318 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013318:	b480      	push	{r7}
 801331a:	b085      	sub	sp, #20
 801331c:	af00      	add	r7, sp, #0
 801331e:	60f8      	str	r0, [r7, #12]
 8013320:	60b9      	str	r1, [r7, #8]
 8013322:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	3b04      	subs	r3, #4
 8013328:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	3b04      	subs	r3, #4
 8013336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013338:	68bb      	ldr	r3, [r7, #8]
 801333a:	f023 0201 	bic.w	r2, r3, #1
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	3b04      	subs	r3, #4
 8013346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013348:	4a0c      	ldr	r2, [pc, #48]	; (801337c <pxPortInitialiseStack+0x64>)
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	3b14      	subs	r3, #20
 8013352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013354:	687a      	ldr	r2, [r7, #4]
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	3b04      	subs	r3, #4
 801335e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	f06f 0202 	mvn.w	r2, #2
 8013366:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	3b20      	subs	r3, #32
 801336c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801336e:	68fb      	ldr	r3, [r7, #12]
}
 8013370:	4618      	mov	r0, r3
 8013372:	3714      	adds	r7, #20
 8013374:	46bd      	mov	sp, r7
 8013376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801337a:	4770      	bx	lr
 801337c:	08013381 	.word	0x08013381

08013380 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013380:	b480      	push	{r7}
 8013382:	b085      	sub	sp, #20
 8013384:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013386:	2300      	movs	r3, #0
 8013388:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801338a:	4b12      	ldr	r3, [pc, #72]	; (80133d4 <prvTaskExitError+0x54>)
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013392:	d00a      	beq.n	80133aa <prvTaskExitError+0x2a>
	__asm volatile
 8013394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013398:	f383 8811 	msr	BASEPRI, r3
 801339c:	f3bf 8f6f 	isb	sy
 80133a0:	f3bf 8f4f 	dsb	sy
 80133a4:	60fb      	str	r3, [r7, #12]
}
 80133a6:	bf00      	nop
 80133a8:	e7fe      	b.n	80133a8 <prvTaskExitError+0x28>
	__asm volatile
 80133aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133ae:	f383 8811 	msr	BASEPRI, r3
 80133b2:	f3bf 8f6f 	isb	sy
 80133b6:	f3bf 8f4f 	dsb	sy
 80133ba:	60bb      	str	r3, [r7, #8]
}
 80133bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80133be:	bf00      	nop
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d0fc      	beq.n	80133c0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80133c6:	bf00      	nop
 80133c8:	bf00      	nop
 80133ca:	3714      	adds	r7, #20
 80133cc:	46bd      	mov	sp, r7
 80133ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d2:	4770      	bx	lr
 80133d4:	24000010 	.word	0x24000010
	...

080133e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80133e0:	4b07      	ldr	r3, [pc, #28]	; (8013400 <pxCurrentTCBConst2>)
 80133e2:	6819      	ldr	r1, [r3, #0]
 80133e4:	6808      	ldr	r0, [r1, #0]
 80133e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133ea:	f380 8809 	msr	PSP, r0
 80133ee:	f3bf 8f6f 	isb	sy
 80133f2:	f04f 0000 	mov.w	r0, #0
 80133f6:	f380 8811 	msr	BASEPRI, r0
 80133fa:	4770      	bx	lr
 80133fc:	f3af 8000 	nop.w

08013400 <pxCurrentTCBConst2>:
 8013400:	24001410 	.word	0x24001410
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013404:	bf00      	nop
 8013406:	bf00      	nop

08013408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013408:	4808      	ldr	r0, [pc, #32]	; (801342c <prvPortStartFirstTask+0x24>)
 801340a:	6800      	ldr	r0, [r0, #0]
 801340c:	6800      	ldr	r0, [r0, #0]
 801340e:	f380 8808 	msr	MSP, r0
 8013412:	f04f 0000 	mov.w	r0, #0
 8013416:	f380 8814 	msr	CONTROL, r0
 801341a:	b662      	cpsie	i
 801341c:	b661      	cpsie	f
 801341e:	f3bf 8f4f 	dsb	sy
 8013422:	f3bf 8f6f 	isb	sy
 8013426:	df00      	svc	0
 8013428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801342a:	bf00      	nop
 801342c:	e000ed08 	.word	0xe000ed08

08013430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b086      	sub	sp, #24
 8013434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013436:	4b46      	ldr	r3, [pc, #280]	; (8013550 <xPortStartScheduler+0x120>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	4a46      	ldr	r2, [pc, #280]	; (8013554 <xPortStartScheduler+0x124>)
 801343c:	4293      	cmp	r3, r2
 801343e:	d10a      	bne.n	8013456 <xPortStartScheduler+0x26>
	__asm volatile
 8013440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013444:	f383 8811 	msr	BASEPRI, r3
 8013448:	f3bf 8f6f 	isb	sy
 801344c:	f3bf 8f4f 	dsb	sy
 8013450:	613b      	str	r3, [r7, #16]
}
 8013452:	bf00      	nop
 8013454:	e7fe      	b.n	8013454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013456:	4b3e      	ldr	r3, [pc, #248]	; (8013550 <xPortStartScheduler+0x120>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	4a3f      	ldr	r2, [pc, #252]	; (8013558 <xPortStartScheduler+0x128>)
 801345c:	4293      	cmp	r3, r2
 801345e:	d10a      	bne.n	8013476 <xPortStartScheduler+0x46>
	__asm volatile
 8013460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013464:	f383 8811 	msr	BASEPRI, r3
 8013468:	f3bf 8f6f 	isb	sy
 801346c:	f3bf 8f4f 	dsb	sy
 8013470:	60fb      	str	r3, [r7, #12]
}
 8013472:	bf00      	nop
 8013474:	e7fe      	b.n	8013474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013476:	4b39      	ldr	r3, [pc, #228]	; (801355c <xPortStartScheduler+0x12c>)
 8013478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801347a:	697b      	ldr	r3, [r7, #20]
 801347c:	781b      	ldrb	r3, [r3, #0]
 801347e:	b2db      	uxtb	r3, r3
 8013480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013482:	697b      	ldr	r3, [r7, #20]
 8013484:	22ff      	movs	r2, #255	; 0xff
 8013486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013488:	697b      	ldr	r3, [r7, #20]
 801348a:	781b      	ldrb	r3, [r3, #0]
 801348c:	b2db      	uxtb	r3, r3
 801348e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013490:	78fb      	ldrb	r3, [r7, #3]
 8013492:	b2db      	uxtb	r3, r3
 8013494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013498:	b2da      	uxtb	r2, r3
 801349a:	4b31      	ldr	r3, [pc, #196]	; (8013560 <xPortStartScheduler+0x130>)
 801349c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801349e:	4b31      	ldr	r3, [pc, #196]	; (8013564 <xPortStartScheduler+0x134>)
 80134a0:	2207      	movs	r2, #7
 80134a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80134a4:	e009      	b.n	80134ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80134a6:	4b2f      	ldr	r3, [pc, #188]	; (8013564 <xPortStartScheduler+0x134>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	3b01      	subs	r3, #1
 80134ac:	4a2d      	ldr	r2, [pc, #180]	; (8013564 <xPortStartScheduler+0x134>)
 80134ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80134b0:	78fb      	ldrb	r3, [r7, #3]
 80134b2:	b2db      	uxtb	r3, r3
 80134b4:	005b      	lsls	r3, r3, #1
 80134b6:	b2db      	uxtb	r3, r3
 80134b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80134ba:	78fb      	ldrb	r3, [r7, #3]
 80134bc:	b2db      	uxtb	r3, r3
 80134be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134c2:	2b80      	cmp	r3, #128	; 0x80
 80134c4:	d0ef      	beq.n	80134a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80134c6:	4b27      	ldr	r3, [pc, #156]	; (8013564 <xPortStartScheduler+0x134>)
 80134c8:	681b      	ldr	r3, [r3, #0]
 80134ca:	f1c3 0307 	rsb	r3, r3, #7
 80134ce:	2b04      	cmp	r3, #4
 80134d0:	d00a      	beq.n	80134e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80134d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d6:	f383 8811 	msr	BASEPRI, r3
 80134da:	f3bf 8f6f 	isb	sy
 80134de:	f3bf 8f4f 	dsb	sy
 80134e2:	60bb      	str	r3, [r7, #8]
}
 80134e4:	bf00      	nop
 80134e6:	e7fe      	b.n	80134e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80134e8:	4b1e      	ldr	r3, [pc, #120]	; (8013564 <xPortStartScheduler+0x134>)
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	021b      	lsls	r3, r3, #8
 80134ee:	4a1d      	ldr	r2, [pc, #116]	; (8013564 <xPortStartScheduler+0x134>)
 80134f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80134f2:	4b1c      	ldr	r3, [pc, #112]	; (8013564 <xPortStartScheduler+0x134>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80134fa:	4a1a      	ldr	r2, [pc, #104]	; (8013564 <xPortStartScheduler+0x134>)
 80134fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	b2da      	uxtb	r2, r3
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8013506:	4b18      	ldr	r3, [pc, #96]	; (8013568 <xPortStartScheduler+0x138>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	4a17      	ldr	r2, [pc, #92]	; (8013568 <xPortStartScheduler+0x138>)
 801350c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013512:	4b15      	ldr	r3, [pc, #84]	; (8013568 <xPortStartScheduler+0x138>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	4a14      	ldr	r2, [pc, #80]	; (8013568 <xPortStartScheduler+0x138>)
 8013518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801351c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801351e:	f000 f8dd 	bl	80136dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013522:	4b12      	ldr	r3, [pc, #72]	; (801356c <xPortStartScheduler+0x13c>)
 8013524:	2200      	movs	r2, #0
 8013526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013528:	f000 f8fc 	bl	8013724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801352c:	4b10      	ldr	r3, [pc, #64]	; (8013570 <xPortStartScheduler+0x140>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	4a0f      	ldr	r2, [pc, #60]	; (8013570 <xPortStartScheduler+0x140>)
 8013532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013538:	f7ff ff66 	bl	8013408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801353c:	f7fe fbfe 	bl	8011d3c <vTaskSwitchContext>
	prvTaskExitError();
 8013540:	f7ff ff1e 	bl	8013380 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013544:	2300      	movs	r3, #0
}
 8013546:	4618      	mov	r0, r3
 8013548:	3718      	adds	r7, #24
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	e000ed00 	.word	0xe000ed00
 8013554:	410fc271 	.word	0x410fc271
 8013558:	410fc270 	.word	0x410fc270
 801355c:	e000e400 	.word	0xe000e400
 8013560:	24001a3c 	.word	0x24001a3c
 8013564:	24001a40 	.word	0x24001a40
 8013568:	e000ed20 	.word	0xe000ed20
 801356c:	24000010 	.word	0x24000010
 8013570:	e000ef34 	.word	0xe000ef34

08013574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013574:	b480      	push	{r7}
 8013576:	b083      	sub	sp, #12
 8013578:	af00      	add	r7, sp, #0
	__asm volatile
 801357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801357e:	f383 8811 	msr	BASEPRI, r3
 8013582:	f3bf 8f6f 	isb	sy
 8013586:	f3bf 8f4f 	dsb	sy
 801358a:	607b      	str	r3, [r7, #4]
}
 801358c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801358e:	4b0f      	ldr	r3, [pc, #60]	; (80135cc <vPortEnterCritical+0x58>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	3301      	adds	r3, #1
 8013594:	4a0d      	ldr	r2, [pc, #52]	; (80135cc <vPortEnterCritical+0x58>)
 8013596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013598:	4b0c      	ldr	r3, [pc, #48]	; (80135cc <vPortEnterCritical+0x58>)
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	2b01      	cmp	r3, #1
 801359e:	d10f      	bne.n	80135c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80135a0:	4b0b      	ldr	r3, [pc, #44]	; (80135d0 <vPortEnterCritical+0x5c>)
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	b2db      	uxtb	r3, r3
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d00a      	beq.n	80135c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80135aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ae:	f383 8811 	msr	BASEPRI, r3
 80135b2:	f3bf 8f6f 	isb	sy
 80135b6:	f3bf 8f4f 	dsb	sy
 80135ba:	603b      	str	r3, [r7, #0]
}
 80135bc:	bf00      	nop
 80135be:	e7fe      	b.n	80135be <vPortEnterCritical+0x4a>
	}
}
 80135c0:	bf00      	nop
 80135c2:	370c      	adds	r7, #12
 80135c4:	46bd      	mov	sp, r7
 80135c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ca:	4770      	bx	lr
 80135cc:	24000010 	.word	0x24000010
 80135d0:	e000ed04 	.word	0xe000ed04

080135d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80135d4:	b480      	push	{r7}
 80135d6:	b083      	sub	sp, #12
 80135d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80135da:	4b12      	ldr	r3, [pc, #72]	; (8013624 <vPortExitCritical+0x50>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d10a      	bne.n	80135f8 <vPortExitCritical+0x24>
	__asm volatile
 80135e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e6:	f383 8811 	msr	BASEPRI, r3
 80135ea:	f3bf 8f6f 	isb	sy
 80135ee:	f3bf 8f4f 	dsb	sy
 80135f2:	607b      	str	r3, [r7, #4]
}
 80135f4:	bf00      	nop
 80135f6:	e7fe      	b.n	80135f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80135f8:	4b0a      	ldr	r3, [pc, #40]	; (8013624 <vPortExitCritical+0x50>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	3b01      	subs	r3, #1
 80135fe:	4a09      	ldr	r2, [pc, #36]	; (8013624 <vPortExitCritical+0x50>)
 8013600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013602:	4b08      	ldr	r3, [pc, #32]	; (8013624 <vPortExitCritical+0x50>)
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d105      	bne.n	8013616 <vPortExitCritical+0x42>
 801360a:	2300      	movs	r3, #0
 801360c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	f383 8811 	msr	BASEPRI, r3
}
 8013614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013616:	bf00      	nop
 8013618:	370c      	adds	r7, #12
 801361a:	46bd      	mov	sp, r7
 801361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013620:	4770      	bx	lr
 8013622:	bf00      	nop
 8013624:	24000010 	.word	0x24000010
	...

08013630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013630:	f3ef 8009 	mrs	r0, PSP
 8013634:	f3bf 8f6f 	isb	sy
 8013638:	4b15      	ldr	r3, [pc, #84]	; (8013690 <pxCurrentTCBConst>)
 801363a:	681a      	ldr	r2, [r3, #0]
 801363c:	f01e 0f10 	tst.w	lr, #16
 8013640:	bf08      	it	eq
 8013642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801364a:	6010      	str	r0, [r2, #0]
 801364c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013654:	f380 8811 	msr	BASEPRI, r0
 8013658:	f3bf 8f4f 	dsb	sy
 801365c:	f3bf 8f6f 	isb	sy
 8013660:	f7fe fb6c 	bl	8011d3c <vTaskSwitchContext>
 8013664:	f04f 0000 	mov.w	r0, #0
 8013668:	f380 8811 	msr	BASEPRI, r0
 801366c:	bc09      	pop	{r0, r3}
 801366e:	6819      	ldr	r1, [r3, #0]
 8013670:	6808      	ldr	r0, [r1, #0]
 8013672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013676:	f01e 0f10 	tst.w	lr, #16
 801367a:	bf08      	it	eq
 801367c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013680:	f380 8809 	msr	PSP, r0
 8013684:	f3bf 8f6f 	isb	sy
 8013688:	4770      	bx	lr
 801368a:	bf00      	nop
 801368c:	f3af 8000 	nop.w

08013690 <pxCurrentTCBConst>:
 8013690:	24001410 	.word	0x24001410
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013694:	bf00      	nop
 8013696:	bf00      	nop

08013698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
	__asm volatile
 801369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a2:	f383 8811 	msr	BASEPRI, r3
 80136a6:	f3bf 8f6f 	isb	sy
 80136aa:	f3bf 8f4f 	dsb	sy
 80136ae:	607b      	str	r3, [r7, #4]
}
 80136b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80136b2:	f7fe fa89 	bl	8011bc8 <xTaskIncrementTick>
 80136b6:	4603      	mov	r3, r0
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d003      	beq.n	80136c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80136bc:	4b06      	ldr	r3, [pc, #24]	; (80136d8 <xPortSysTickHandler+0x40>)
 80136be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136c2:	601a      	str	r2, [r3, #0]
 80136c4:	2300      	movs	r3, #0
 80136c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	f383 8811 	msr	BASEPRI, r3
}
 80136ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80136d0:	bf00      	nop
 80136d2:	3708      	adds	r7, #8
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}
 80136d8:	e000ed04 	.word	0xe000ed04

080136dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80136dc:	b480      	push	{r7}
 80136de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80136e0:	4b0b      	ldr	r3, [pc, #44]	; (8013710 <vPortSetupTimerInterrupt+0x34>)
 80136e2:	2200      	movs	r2, #0
 80136e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80136e6:	4b0b      	ldr	r3, [pc, #44]	; (8013714 <vPortSetupTimerInterrupt+0x38>)
 80136e8:	2200      	movs	r2, #0
 80136ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80136ec:	4b0a      	ldr	r3, [pc, #40]	; (8013718 <vPortSetupTimerInterrupt+0x3c>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	4a0a      	ldr	r2, [pc, #40]	; (801371c <vPortSetupTimerInterrupt+0x40>)
 80136f2:	fba2 2303 	umull	r2, r3, r2, r3
 80136f6:	099b      	lsrs	r3, r3, #6
 80136f8:	4a09      	ldr	r2, [pc, #36]	; (8013720 <vPortSetupTimerInterrupt+0x44>)
 80136fa:	3b01      	subs	r3, #1
 80136fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80136fe:	4b04      	ldr	r3, [pc, #16]	; (8013710 <vPortSetupTimerInterrupt+0x34>)
 8013700:	2207      	movs	r2, #7
 8013702:	601a      	str	r2, [r3, #0]
}
 8013704:	bf00      	nop
 8013706:	46bd      	mov	sp, r7
 8013708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370c:	4770      	bx	lr
 801370e:	bf00      	nop
 8013710:	e000e010 	.word	0xe000e010
 8013714:	e000e018 	.word	0xe000e018
 8013718:	24000000 	.word	0x24000000
 801371c:	10624dd3 	.word	0x10624dd3
 8013720:	e000e014 	.word	0xe000e014

08013724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013734 <vPortEnableVFP+0x10>
 8013728:	6801      	ldr	r1, [r0, #0]
 801372a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801372e:	6001      	str	r1, [r0, #0]
 8013730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013732:	bf00      	nop
 8013734:	e000ed88 	.word	0xe000ed88

08013738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013738:	b480      	push	{r7}
 801373a:	b085      	sub	sp, #20
 801373c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801373e:	f3ef 8305 	mrs	r3, IPSR
 8013742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	2b0f      	cmp	r3, #15
 8013748:	d914      	bls.n	8013774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801374a:	4a17      	ldr	r2, [pc, #92]	; (80137a8 <vPortValidateInterruptPriority+0x70>)
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	4413      	add	r3, r2
 8013750:	781b      	ldrb	r3, [r3, #0]
 8013752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013754:	4b15      	ldr	r3, [pc, #84]	; (80137ac <vPortValidateInterruptPriority+0x74>)
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	7afa      	ldrb	r2, [r7, #11]
 801375a:	429a      	cmp	r2, r3
 801375c:	d20a      	bcs.n	8013774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013762:	f383 8811 	msr	BASEPRI, r3
 8013766:	f3bf 8f6f 	isb	sy
 801376a:	f3bf 8f4f 	dsb	sy
 801376e:	607b      	str	r3, [r7, #4]
}
 8013770:	bf00      	nop
 8013772:	e7fe      	b.n	8013772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013774:	4b0e      	ldr	r3, [pc, #56]	; (80137b0 <vPortValidateInterruptPriority+0x78>)
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801377c:	4b0d      	ldr	r3, [pc, #52]	; (80137b4 <vPortValidateInterruptPriority+0x7c>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	429a      	cmp	r2, r3
 8013782:	d90a      	bls.n	801379a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013788:	f383 8811 	msr	BASEPRI, r3
 801378c:	f3bf 8f6f 	isb	sy
 8013790:	f3bf 8f4f 	dsb	sy
 8013794:	603b      	str	r3, [r7, #0]
}
 8013796:	bf00      	nop
 8013798:	e7fe      	b.n	8013798 <vPortValidateInterruptPriority+0x60>
	}
 801379a:	bf00      	nop
 801379c:	3714      	adds	r7, #20
 801379e:	46bd      	mov	sp, r7
 80137a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a4:	4770      	bx	lr
 80137a6:	bf00      	nop
 80137a8:	e000e3f0 	.word	0xe000e3f0
 80137ac:	24001a3c 	.word	0x24001a3c
 80137b0:	e000ed0c 	.word	0xe000ed0c
 80137b4:	24001a40 	.word	0x24001a40

080137b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b08a      	sub	sp, #40	; 0x28
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80137c0:	2300      	movs	r3, #0
 80137c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80137c4:	f7fe f932 	bl	8011a2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80137c8:	4b5b      	ldr	r3, [pc, #364]	; (8013938 <pvPortMalloc+0x180>)
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d101      	bne.n	80137d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80137d0:	f000 f920 	bl	8013a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80137d4:	4b59      	ldr	r3, [pc, #356]	; (801393c <pvPortMalloc+0x184>)
 80137d6:	681a      	ldr	r2, [r3, #0]
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	4013      	ands	r3, r2
 80137dc:	2b00      	cmp	r3, #0
 80137de:	f040 8093 	bne.w	8013908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d01d      	beq.n	8013824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80137e8:	2208      	movs	r2, #8
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4413      	add	r3, r2
 80137ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	f003 0307 	and.w	r3, r3, #7
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d014      	beq.n	8013824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f023 0307 	bic.w	r3, r3, #7
 8013800:	3308      	adds	r3, #8
 8013802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	f003 0307 	and.w	r3, r3, #7
 801380a:	2b00      	cmp	r3, #0
 801380c:	d00a      	beq.n	8013824 <pvPortMalloc+0x6c>
	__asm volatile
 801380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013812:	f383 8811 	msr	BASEPRI, r3
 8013816:	f3bf 8f6f 	isb	sy
 801381a:	f3bf 8f4f 	dsb	sy
 801381e:	617b      	str	r3, [r7, #20]
}
 8013820:	bf00      	nop
 8013822:	e7fe      	b.n	8013822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d06e      	beq.n	8013908 <pvPortMalloc+0x150>
 801382a:	4b45      	ldr	r3, [pc, #276]	; (8013940 <pvPortMalloc+0x188>)
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	687a      	ldr	r2, [r7, #4]
 8013830:	429a      	cmp	r2, r3
 8013832:	d869      	bhi.n	8013908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013834:	4b43      	ldr	r3, [pc, #268]	; (8013944 <pvPortMalloc+0x18c>)
 8013836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013838:	4b42      	ldr	r3, [pc, #264]	; (8013944 <pvPortMalloc+0x18c>)
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801383e:	e004      	b.n	801384a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384c:	685b      	ldr	r3, [r3, #4]
 801384e:	687a      	ldr	r2, [r7, #4]
 8013850:	429a      	cmp	r2, r3
 8013852:	d903      	bls.n	801385c <pvPortMalloc+0xa4>
 8013854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013856:	681b      	ldr	r3, [r3, #0]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d1f1      	bne.n	8013840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801385c:	4b36      	ldr	r3, [pc, #216]	; (8013938 <pvPortMalloc+0x180>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013862:	429a      	cmp	r2, r3
 8013864:	d050      	beq.n	8013908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013866:	6a3b      	ldr	r3, [r7, #32]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	2208      	movs	r2, #8
 801386c:	4413      	add	r3, r2
 801386e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013872:	681a      	ldr	r2, [r3, #0]
 8013874:	6a3b      	ldr	r3, [r7, #32]
 8013876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387a:	685a      	ldr	r2, [r3, #4]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	1ad2      	subs	r2, r2, r3
 8013880:	2308      	movs	r3, #8
 8013882:	005b      	lsls	r3, r3, #1
 8013884:	429a      	cmp	r2, r3
 8013886:	d91f      	bls.n	80138c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	4413      	add	r3, r2
 801388e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013890:	69bb      	ldr	r3, [r7, #24]
 8013892:	f003 0307 	and.w	r3, r3, #7
 8013896:	2b00      	cmp	r3, #0
 8013898:	d00a      	beq.n	80138b0 <pvPortMalloc+0xf8>
	__asm volatile
 801389a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801389e:	f383 8811 	msr	BASEPRI, r3
 80138a2:	f3bf 8f6f 	isb	sy
 80138a6:	f3bf 8f4f 	dsb	sy
 80138aa:	613b      	str	r3, [r7, #16]
}
 80138ac:	bf00      	nop
 80138ae:	e7fe      	b.n	80138ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80138b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b2:	685a      	ldr	r2, [r3, #4]
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	1ad2      	subs	r2, r2, r3
 80138b8:	69bb      	ldr	r3, [r7, #24]
 80138ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80138bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138be:	687a      	ldr	r2, [r7, #4]
 80138c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80138c2:	69b8      	ldr	r0, [r7, #24]
 80138c4:	f000 f90a 	bl	8013adc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80138c8:	4b1d      	ldr	r3, [pc, #116]	; (8013940 <pvPortMalloc+0x188>)
 80138ca:	681a      	ldr	r2, [r3, #0]
 80138cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ce:	685b      	ldr	r3, [r3, #4]
 80138d0:	1ad3      	subs	r3, r2, r3
 80138d2:	4a1b      	ldr	r2, [pc, #108]	; (8013940 <pvPortMalloc+0x188>)
 80138d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80138d6:	4b1a      	ldr	r3, [pc, #104]	; (8013940 <pvPortMalloc+0x188>)
 80138d8:	681a      	ldr	r2, [r3, #0]
 80138da:	4b1b      	ldr	r3, [pc, #108]	; (8013948 <pvPortMalloc+0x190>)
 80138dc:	681b      	ldr	r3, [r3, #0]
 80138de:	429a      	cmp	r2, r3
 80138e0:	d203      	bcs.n	80138ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80138e2:	4b17      	ldr	r3, [pc, #92]	; (8013940 <pvPortMalloc+0x188>)
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	4a18      	ldr	r2, [pc, #96]	; (8013948 <pvPortMalloc+0x190>)
 80138e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80138ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ec:	685a      	ldr	r2, [r3, #4]
 80138ee:	4b13      	ldr	r3, [pc, #76]	; (801393c <pvPortMalloc+0x184>)
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	431a      	orrs	r2, r3
 80138f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80138f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fa:	2200      	movs	r2, #0
 80138fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80138fe:	4b13      	ldr	r3, [pc, #76]	; (801394c <pvPortMalloc+0x194>)
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	3301      	adds	r3, #1
 8013904:	4a11      	ldr	r2, [pc, #68]	; (801394c <pvPortMalloc+0x194>)
 8013906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013908:	f7fe f89e 	bl	8011a48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	f003 0307 	and.w	r3, r3, #7
 8013912:	2b00      	cmp	r3, #0
 8013914:	d00a      	beq.n	801392c <pvPortMalloc+0x174>
	__asm volatile
 8013916:	f04f 0350 	mov.w	r3, #80	; 0x50
 801391a:	f383 8811 	msr	BASEPRI, r3
 801391e:	f3bf 8f6f 	isb	sy
 8013922:	f3bf 8f4f 	dsb	sy
 8013926:	60fb      	str	r3, [r7, #12]
}
 8013928:	bf00      	nop
 801392a:	e7fe      	b.n	801392a <pvPortMalloc+0x172>
	return pvReturn;
 801392c:	69fb      	ldr	r3, [r7, #28]
}
 801392e:	4618      	mov	r0, r3
 8013930:	3728      	adds	r7, #40	; 0x28
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}
 8013936:	bf00      	nop
 8013938:	240152cc 	.word	0x240152cc
 801393c:	240152e0 	.word	0x240152e0
 8013940:	240152d0 	.word	0x240152d0
 8013944:	240152c4 	.word	0x240152c4
 8013948:	240152d4 	.word	0x240152d4
 801394c:	240152d8 	.word	0x240152d8

08013950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013950:	b580      	push	{r7, lr}
 8013952:	b086      	sub	sp, #24
 8013954:	af00      	add	r7, sp, #0
 8013956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d04d      	beq.n	80139fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013962:	2308      	movs	r3, #8
 8013964:	425b      	negs	r3, r3
 8013966:	697a      	ldr	r2, [r7, #20]
 8013968:	4413      	add	r3, r2
 801396a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	685a      	ldr	r2, [r3, #4]
 8013974:	4b24      	ldr	r3, [pc, #144]	; (8013a08 <vPortFree+0xb8>)
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	4013      	ands	r3, r2
 801397a:	2b00      	cmp	r3, #0
 801397c:	d10a      	bne.n	8013994 <vPortFree+0x44>
	__asm volatile
 801397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013982:	f383 8811 	msr	BASEPRI, r3
 8013986:	f3bf 8f6f 	isb	sy
 801398a:	f3bf 8f4f 	dsb	sy
 801398e:	60fb      	str	r3, [r7, #12]
}
 8013990:	bf00      	nop
 8013992:	e7fe      	b.n	8013992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	2b00      	cmp	r3, #0
 801399a:	d00a      	beq.n	80139b2 <vPortFree+0x62>
	__asm volatile
 801399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139a0:	f383 8811 	msr	BASEPRI, r3
 80139a4:	f3bf 8f6f 	isb	sy
 80139a8:	f3bf 8f4f 	dsb	sy
 80139ac:	60bb      	str	r3, [r7, #8]
}
 80139ae:	bf00      	nop
 80139b0:	e7fe      	b.n	80139b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80139b2:	693b      	ldr	r3, [r7, #16]
 80139b4:	685a      	ldr	r2, [r3, #4]
 80139b6:	4b14      	ldr	r3, [pc, #80]	; (8013a08 <vPortFree+0xb8>)
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	4013      	ands	r3, r2
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d01e      	beq.n	80139fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80139c0:	693b      	ldr	r3, [r7, #16]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d11a      	bne.n	80139fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	685a      	ldr	r2, [r3, #4]
 80139cc:	4b0e      	ldr	r3, [pc, #56]	; (8013a08 <vPortFree+0xb8>)
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	43db      	mvns	r3, r3
 80139d2:	401a      	ands	r2, r3
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80139d8:	f7fe f828 	bl	8011a2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80139dc:	693b      	ldr	r3, [r7, #16]
 80139de:	685a      	ldr	r2, [r3, #4]
 80139e0:	4b0a      	ldr	r3, [pc, #40]	; (8013a0c <vPortFree+0xbc>)
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	4413      	add	r3, r2
 80139e6:	4a09      	ldr	r2, [pc, #36]	; (8013a0c <vPortFree+0xbc>)
 80139e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80139ea:	6938      	ldr	r0, [r7, #16]
 80139ec:	f000 f876 	bl	8013adc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80139f0:	4b07      	ldr	r3, [pc, #28]	; (8013a10 <vPortFree+0xc0>)
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	3301      	adds	r3, #1
 80139f6:	4a06      	ldr	r2, [pc, #24]	; (8013a10 <vPortFree+0xc0>)
 80139f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80139fa:	f7fe f825 	bl	8011a48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80139fe:	bf00      	nop
 8013a00:	3718      	adds	r7, #24
 8013a02:	46bd      	mov	sp, r7
 8013a04:	bd80      	pop	{r7, pc}
 8013a06:	bf00      	nop
 8013a08:	240152e0 	.word	0x240152e0
 8013a0c:	240152d0 	.word	0x240152d0
 8013a10:	240152dc 	.word	0x240152dc

08013a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013a14:	b480      	push	{r7}
 8013a16:	b085      	sub	sp, #20
 8013a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013a1a:	4b29      	ldr	r3, [pc, #164]	; (8013ac0 <prvHeapInit+0xac>)
 8013a1c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013a1e:	4b29      	ldr	r3, [pc, #164]	; (8013ac4 <prvHeapInit+0xb0>)
 8013a20:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	f003 0307 	and.w	r3, r3, #7
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d00c      	beq.n	8013a46 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	3307      	adds	r3, #7
 8013a30:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	f023 0307 	bic.w	r3, r3, #7
 8013a38:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013a3a:	68ba      	ldr	r2, [r7, #8]
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	1ad3      	subs	r3, r2, r3
 8013a40:	4a20      	ldr	r2, [pc, #128]	; (8013ac4 <prvHeapInit+0xb0>)
 8013a42:	4413      	add	r3, r2
 8013a44:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013a4a:	4a1f      	ldr	r2, [pc, #124]	; (8013ac8 <prvHeapInit+0xb4>)
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013a50:	4b1d      	ldr	r3, [pc, #116]	; (8013ac8 <prvHeapInit+0xb4>)
 8013a52:	2200      	movs	r2, #0
 8013a54:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	68ba      	ldr	r2, [r7, #8]
 8013a5a:	4413      	add	r3, r2
 8013a5c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013a5e:	2208      	movs	r2, #8
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	1a9b      	subs	r3, r3, r2
 8013a64:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	f023 0307 	bic.w	r3, r3, #7
 8013a6c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	4a16      	ldr	r2, [pc, #88]	; (8013acc <prvHeapInit+0xb8>)
 8013a72:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013a74:	4b15      	ldr	r3, [pc, #84]	; (8013acc <prvHeapInit+0xb8>)
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013a7c:	4b13      	ldr	r3, [pc, #76]	; (8013acc <prvHeapInit+0xb8>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2200      	movs	r2, #0
 8013a82:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	68fa      	ldr	r2, [r7, #12]
 8013a8c:	1ad2      	subs	r2, r2, r3
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013a92:	4b0e      	ldr	r3, [pc, #56]	; (8013acc <prvHeapInit+0xb8>)
 8013a94:	681a      	ldr	r2, [r3, #0]
 8013a96:	683b      	ldr	r3, [r7, #0]
 8013a98:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	4a0c      	ldr	r2, [pc, #48]	; (8013ad0 <prvHeapInit+0xbc>)
 8013aa0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	685b      	ldr	r3, [r3, #4]
 8013aa6:	4a0b      	ldr	r2, [pc, #44]	; (8013ad4 <prvHeapInit+0xc0>)
 8013aa8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013aaa:	4b0b      	ldr	r3, [pc, #44]	; (8013ad8 <prvHeapInit+0xc4>)
 8013aac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013ab0:	601a      	str	r2, [r3, #0]
}
 8013ab2:	bf00      	nop
 8013ab4:	3714      	adds	r7, #20
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abc:	4770      	bx	lr
 8013abe:	bf00      	nop
 8013ac0:	00013880 	.word	0x00013880
 8013ac4:	24001a44 	.word	0x24001a44
 8013ac8:	240152c4 	.word	0x240152c4
 8013acc:	240152cc 	.word	0x240152cc
 8013ad0:	240152d4 	.word	0x240152d4
 8013ad4:	240152d0 	.word	0x240152d0
 8013ad8:	240152e0 	.word	0x240152e0

08013adc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013adc:	b480      	push	{r7}
 8013ade:	b085      	sub	sp, #20
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013ae4:	4b28      	ldr	r3, [pc, #160]	; (8013b88 <prvInsertBlockIntoFreeList+0xac>)
 8013ae6:	60fb      	str	r3, [r7, #12]
 8013ae8:	e002      	b.n	8013af0 <prvInsertBlockIntoFreeList+0x14>
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	60fb      	str	r3, [r7, #12]
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	687a      	ldr	r2, [r7, #4]
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d8f7      	bhi.n	8013aea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	685b      	ldr	r3, [r3, #4]
 8013b02:	68ba      	ldr	r2, [r7, #8]
 8013b04:	4413      	add	r3, r2
 8013b06:	687a      	ldr	r2, [r7, #4]
 8013b08:	429a      	cmp	r2, r3
 8013b0a:	d108      	bne.n	8013b1e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	685a      	ldr	r2, [r3, #4]
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	685b      	ldr	r3, [r3, #4]
 8013b14:	441a      	add	r2, r3
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	685b      	ldr	r3, [r3, #4]
 8013b26:	68ba      	ldr	r2, [r7, #8]
 8013b28:	441a      	add	r2, r3
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d118      	bne.n	8013b64 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	681a      	ldr	r2, [r3, #0]
 8013b36:	4b15      	ldr	r3, [pc, #84]	; (8013b8c <prvInsertBlockIntoFreeList+0xb0>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	429a      	cmp	r2, r3
 8013b3c:	d00d      	beq.n	8013b5a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	685a      	ldr	r2, [r3, #4]
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	685b      	ldr	r3, [r3, #4]
 8013b48:	441a      	add	r2, r3
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	681a      	ldr	r2, [r3, #0]
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	601a      	str	r2, [r3, #0]
 8013b58:	e008      	b.n	8013b6c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013b5a:	4b0c      	ldr	r3, [pc, #48]	; (8013b8c <prvInsertBlockIntoFreeList+0xb0>)
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	601a      	str	r2, [r3, #0]
 8013b62:	e003      	b.n	8013b6c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	681a      	ldr	r2, [r3, #0]
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013b6c:	68fa      	ldr	r2, [r7, #12]
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d002      	beq.n	8013b7a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b7a:	bf00      	nop
 8013b7c:	3714      	adds	r7, #20
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b84:	4770      	bx	lr
 8013b86:	bf00      	nop
 8013b88:	240152c4 	.word	0x240152c4
 8013b8c:	240152cc 	.word	0x240152cc

08013b90 <_ZN8CallbackC1Ev>:
#include "stdint.h"
#include "core_utils_functionpointer.h"

class Callback {
public:
	Callback(){
 8013b90:	b480      	push	{r7}
 8013b92:	b083      	sub	sp, #12
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
 8013b98:	4a04      	ldr	r2, [pc, #16]	; (8013bac <_ZN8CallbackC1Ev+0x1c>)
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	601a      	str	r2, [r3, #0]

	}
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	370c      	adds	r7, #12
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013baa:	4770      	bx	lr
 8013bac:	08025400 	.word	0x08025400

08013bb0 <_ZN8Callback4callEv>:

	virtual void call(){
 8013bb0:	b480      	push	{r7}
 8013bb2:	b083      	sub	sp, #12
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	6078      	str	r0, [r7, #4]

	}
 8013bb8:	bf00      	nop
 8013bba:	370c      	adds	r7, #12
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bc2:	4770      	bx	lr

08013bc4 <_ZN8Callback4callEPv>:

	virtual void call(void* argument){
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	6039      	str	r1, [r7, #0]

	}
 8013bce:	bf00      	nop
 8013bd0:	370c      	adds	r7, #12
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd8:	4770      	bx	lr

08013bda <_ZN8CallbackaSERKS_>:
class Callback {
 8013bda:	b480      	push	{r7}
 8013bdc:	b083      	sub	sp, #12
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	6078      	str	r0, [r7, #4]
 8013be2:	6039      	str	r1, [r7, #0]
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	4618      	mov	r0, r3
 8013be8:	370c      	adds	r7, #12
 8013bea:	46bd      	mov	sp, r7
 8013bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf0:	4770      	bx	lr

08013bf2 <_ZN26twipr_spi_comm_callbacks_tC1Ev>:

typedef enum twipr_spi_comm_callback_id_t {
	TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX, TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
} twipr_spi_comm_callback_id_t;

typedef struct twipr_spi_comm_callbacks_t {
 8013bf2:	b580      	push	{r7, lr}
 8013bf4:	b082      	sub	sp, #8
 8013bf6:	af00      	add	r7, sp, #0
 8013bf8:	6078      	str	r0, [r7, #4]
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f000 f945 	bl	8013e8c <_ZN19core_utils_CallbackIvtEC1Ev>
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	3320      	adds	r3, #32
 8013c06:	4618      	mov	r0, r3
 8013c08:	f000 f940 	bl	8013e8c <_ZN19core_utils_CallbackIvtEC1Ev>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3708      	adds	r7, #8
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}

08013c16 <_ZN23TWIPR_SPI_CommunicationC1Ev>:

#include "twipr_spi_communication.h"
//
//static uint8_t tx_cmd_buf[4] = { 0x55, 0x00, 0x00, 10};

TWIPR_SPI_Communication::TWIPR_SPI_Communication() {
 8013c16:	b580      	push	{r7, lr}
 8013c18:	b082      	sub	sp, #8
 8013c1a:	af00      	add	r7, sp, #0
 8013c1c:	6078      	str	r0, [r7, #4]
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	2200      	movs	r2, #0
 8013c22:	751a      	strb	r2, [r3, #20]
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	331c      	adds	r3, #28
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f00b fc5c 	bl	801f4e6 <_ZN23core_hardware_SPI_slaveC1Ev>
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	3388      	adds	r3, #136	; 0x88
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7ff ffdd 	bl	8013bf2 <_ZN26twipr_spi_comm_callbacks_tC1Ev>

}
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3708      	adds	r7, #8
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}
	...

08013c44 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t>:

/* =============================================================== */
void TWIPR_SPI_Communication::init(twipr_spi_comm_config_t config) {
 8013c44:	b084      	sub	sp, #16
 8013c46:	b5b0      	push	{r4, r5, r7, lr}
 8013c48:	b09a      	sub	sp, #104	; 0x68
 8013c4a:	af00      	add	r7, sp, #0
 8013c4c:	6078      	str	r0, [r7, #4]
 8013c4e:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8013c52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	461d      	mov	r5, r3
 8013c5a:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 8013c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013c62:	6823      	ldr	r3, [r4, #0]
 8013c64:	602b      	str	r3, [r5, #0]

	core_hardware_spi_config_t spi_config = { .hspi = this->config.hspi,
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
			.rx_buffer = (uint8_t*) this->config.trajectory_buffer, .tx_buffer =
					(uint8_t*) this->config.sample_buffer, };
 8013c6a:	60bb      	str	r3, [r7, #8]
			.rx_buffer = (uint8_t*) this->config.trajectory_buffer, .tx_buffer =
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	68db      	ldr	r3, [r3, #12]
					(uint8_t*) this->config.sample_buffer, };
 8013c70:	60fb      	str	r3, [r7, #12]
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	685b      	ldr	r3, [r3, #4]
 8013c76:	613b      	str	r3, [r7, #16]

	this->spi_slave.init(spi_config);
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f103 001c 	add.w	r0, r3, #28
 8013c7e:	f107 0308 	add.w	r3, r7, #8
 8013c82:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013c84:	f00b fc3e 	bl	801f504 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_RX,
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	f103 041c 	add.w	r4, r3, #28
			core_utils_Callback<void, void>(this,
 8013c8e:	4b1b      	ldr	r3, [pc, #108]	; (8013cfc <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t+0xb8>)
 8013c90:	637b      	str	r3, [r7, #52]	; 0x34
 8013c92:	2300      	movs	r3, #0
 8013c94:	63bb      	str	r3, [r7, #56]	; 0x38
 8013c96:	f107 0014 	add.w	r0, r7, #20
 8013c9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013c9e:	cb0c      	ldmia	r3, {r2, r3}
 8013ca0:	6879      	ldr	r1, [r7, #4]
 8013ca2:	f000 f911 	bl	8013ec8 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_RX,
 8013ca6:	f107 0314 	add.w	r3, r7, #20
 8013caa:	461a      	mov	r2, r3
 8013cac:	2100      	movs	r1, #0
 8013cae:	4620      	mov	r0, r4
 8013cb0:	f00b fc82 	bl	801f5b8 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>
					&TWIPR_SPI_Communication::rx_cmplt_function));

	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_TX,
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	f103 041c 	add.w	r4, r3, #28
			core_utils_Callback<void, void>(this,
 8013cba:	4b11      	ldr	r3, [pc, #68]	; (8013d00 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t+0xbc>)
 8013cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	663b      	str	r3, [r7, #96]	; 0x60
 8013cc2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8013cc6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013cca:	cb0c      	ldmia	r3, {r2, r3}
 8013ccc:	6879      	ldr	r1, [r7, #4]
 8013cce:	f000 f8fb 	bl	8013ec8 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_TX,
 8013cd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013cd6:	461a      	mov	r2, r3
 8013cd8:	2101      	movs	r1, #1
 8013cda:	4620      	mov	r0, r4
 8013cdc:	f00b fc6c 	bl	801f5b8 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>

//	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_RXTX,
//			core_utils_Callback<void, void>(this,
//					&TWIPR_SPI_Communication::rxtx_cmplt_function));

	uint8_t trajectory_size = sizeof(twipr_control_trajectory_input_t);
 8013ce0:	230c      	movs	r3, #12
 8013ce2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t sample_size = sizeof(twipr_logging_sample_t);
 8013ce6:	235c      	movs	r3, #92	; 0x5c
 8013ce8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66

//	tx_cmd_buf[1] = trajectory_size;
//	tx_cmd_buf[2] =	sample_size;

}
 8013cec:	bf00      	nop
 8013cee:	3768      	adds	r7, #104	; 0x68
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8013cf6:	b004      	add	sp, #16
 8013cf8:	4770      	bx	lr
 8013cfa:	bf00      	nop
 8013cfc:	08013dfb 	.word	0x08013dfb
 8013d00:	08013e27 	.word	0x08013e27

08013d04 <_ZN23TWIPR_SPI_Communication5startEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::start() {
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b082      	sub	sp, #8
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
	this->spi_slave.start();
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	331c      	adds	r3, #28
 8013d10:	4618      	mov	r0, r3
 8013d12:	f00b fc35 	bl	801f580 <_ZN23core_hardware_SPI_slave5startEv>
	this->provideSampleData();
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f000 f842 	bl	8013da0 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 8013d1c:	bf00      	nop
 8013d1e:	3708      	adds	r7, #8
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}

08013d24 <_ZN19core_utils_CallbackIvtEaSERKS0_>:
private:

};

template<typename R, typename A>
class core_utils_Callback: public Callback {
 8013d24:	b5b0      	push	{r4, r5, r7, lr}
 8013d26:	b082      	sub	sp, #8
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
 8013d2c:	6039      	str	r1, [r7, #0]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	683a      	ldr	r2, [r7, #0]
 8013d32:	4611      	mov	r1, r2
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7ff ff50 	bl	8013bda <_ZN8CallbackaSERKS_>
 8013d3a:	683b      	ldr	r3, [r7, #0]
 8013d3c:	791a      	ldrb	r2, [r3, #4]
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	711a      	strb	r2, [r3, #4]
 8013d42:	687a      	ldr	r2, [r7, #4]
 8013d44:	683b      	ldr	r3, [r7, #0]
 8013d46:	f102 0408 	add.w	r4, r2, #8
 8013d4a:	f103 0508 	add.w	r5, r3, #8
 8013d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d52:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013d56:	e884 0003 	stmia.w	r4, {r0, r1}
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	3708      	adds	r7, #8
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bdb0      	pop	{r4, r5, r7, pc}

08013d64 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>:
/* =============================================================== */
void TWIPR_SPI_Communication::registerCallback(
		twipr_spi_comm_callback_id_t callback_id,
		core_utils_Callback<void, uint16_t> callback) {
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b084      	sub	sp, #16
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	60f8      	str	r0, [r7, #12]
 8013d6c:	460b      	mov	r3, r1
 8013d6e:	607a      	str	r2, [r7, #4]
 8013d70:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 8013d72:	7afb      	ldrb	r3, [r7, #11]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d008      	beq.n	8013d8a <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x26>
 8013d78:	2b01      	cmp	r3, #1
 8013d7a:	d10d      	bne.n	8013d98 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x34>
	case TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX: {
		this->callbacks.sample_tx_callback = callback;
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	33a8      	adds	r3, #168	; 0xa8
 8013d80:	6879      	ldr	r1, [r7, #4]
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7ff ffce 	bl	8013d24 <_ZN19core_utils_CallbackIvtEaSERKS0_>
		break;
 8013d88:	e006      	b.n	8013d98 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x34>
	}
	case TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX: {
		this->callbacks.trajectory_rx_callback = callback;
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	3388      	adds	r3, #136	; 0x88
 8013d8e:	6879      	ldr	r1, [r7, #4]
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7ff ffc7 	bl	8013d24 <_ZN19core_utils_CallbackIvtEaSERKS0_>
		break;
 8013d96:	bf00      	nop
	}
	}
}
 8013d98:	bf00      	nop
 8013d9a:	3710      	adds	r7, #16
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}

08013da0 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::receiveTrajectory(){
	this->receiveTrajectory(this->config.trajectory_buffer, this->config.len_trajectory_buffer);
}
/* =============================================================== */
void TWIPR_SPI_Communication::provideSampleData(){
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b082      	sub	sp, #8
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	6078      	str	r0, [r7, #4]
	this->provideSampleData(this->config.sample_buffer, this->config.len_sample_buffer);
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	6859      	ldr	r1, [r3, #4]
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	891b      	ldrh	r3, [r3, #8]
 8013db0:	461a      	mov	r2, r3
 8013db2:	6878      	ldr	r0, [r7, #4]
 8013db4:	f000 f804 	bl	8013dc0 <_ZN23TWIPR_SPI_Communication17provideSampleDataEP22twipr_logging_sample_tt>
}
 8013db8:	bf00      	nop
 8013dba:	3708      	adds	r7, #8
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bd80      	pop	{r7, pc}

08013dc0 <_ZN23TWIPR_SPI_Communication17provideSampleDataEP22twipr_logging_sample_tt>:
	this->spi_slave.receiveData((uint8_t*) trajectory_buffer,  sizeof(twipr_control_trajectory_input_t) * len);
}

/* =============================================================== */
void TWIPR_SPI_Communication::provideSampleData(
		twipr_logging_sample_t *sample_buffer, uint16_t len) {
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b084      	sub	sp, #16
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	60f8      	str	r0, [r7, #12]
 8013dc8:	60b9      	str	r1, [r7, #8]
 8013dca:	4613      	mov	r3, r2
 8013dcc:	80fb      	strh	r3, [r7, #6]

	this->mode = TWIPR_SPI_COMM_MODE_TX;
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	2202      	movs	r2, #2
 8013dd2:	751a      	strb	r2, [r3, #20]
	this->spi_slave.provideData((uint8_t*) sample_buffer, sizeof(twipr_logging_sample_t) * len);
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	f103 001c 	add.w	r0, r3, #28
 8013dda:	88fb      	ldrh	r3, [r7, #6]
 8013ddc:	461a      	mov	r2, r3
 8013dde:	0052      	lsls	r2, r2, #1
 8013de0:	441a      	add	r2, r3
 8013de2:	00d2      	lsls	r2, r2, #3
 8013de4:	1ad3      	subs	r3, r2, r3
 8013de6:	009b      	lsls	r3, r3, #2
 8013de8:	b29b      	uxth	r3, r3
 8013dea:	461a      	mov	r2, r3
 8013dec:	68b9      	ldr	r1, [r7, #8]
 8013dee:	f00b fbd1 	bl	801f594 <_ZN23core_hardware_SPI_slave11provideDataEPht>
}
 8013df2:	bf00      	nop
 8013df4:	3710      	adds	r7, #16
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}

08013dfa <_ZN23TWIPR_SPI_Communication17rx_cmplt_functionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::rx_cmplt_function() {
 8013dfa:	b580      	push	{r7, lr}
 8013dfc:	b082      	sub	sp, #8
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	6078      	str	r0, [r7, #4]
	if (this->callbacks.trajectory_rx_callback.registered) {
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d008      	beq.n	8013e1e <_ZN23TWIPR_SPI_Communication17rx_cmplt_functionEv+0x24>
		this->callbacks.trajectory_rx_callback.call(this->config.len_trajectory_buffer);
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	8a1b      	ldrh	r3, [r3, #16]
 8013e16:	4619      	mov	r1, r3
 8013e18:	4610      	mov	r0, r2
 8013e1a:	f000 f889 	bl	8013f30 <_ZN19core_utils_CallbackIvtE4callEt>
	}
}
 8013e1e:	bf00      	nop
 8013e20:	3708      	adds	r7, #8
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}

08013e26 <_ZN23TWIPR_SPI_Communication17tx_cmplt_functionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::tx_cmplt_function() {
 8013e26:	b580      	push	{r7, lr}
 8013e28:	b082      	sub	sp, #8
 8013e2a:	af00      	add	r7, sp, #0
 8013e2c:	6078      	str	r0, [r7, #4]

	// Execute the TX Callback, if registered
	if (this->callbacks.sample_tx_callback.registered) {
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d008      	beq.n	8013e4a <_ZN23TWIPR_SPI_Communication17tx_cmplt_functionEv+0x24>
		this->callbacks.sample_tx_callback.call(this->_len);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	8b5b      	ldrh	r3, [r3, #26]
 8013e42:	4619      	mov	r1, r3
 8013e44:	4610      	mov	r0, r2
 8013e46:	f000 f873 	bl	8013f30 <_ZN19core_utils_CallbackIvtE4callEt>
	}
	this->provideSampleData();
 8013e4a:	6878      	ldr	r0, [r7, #4]
 8013e4c:	f7ff ffa8 	bl	8013da0 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 8013e50:	bf00      	nop
 8013e52:	3708      	adds	r7, #8
 8013e54:	46bd      	mov	sp, r7
 8013e56:	bd80      	pop	{r7, pc}

08013e58 <_ZN23TWIPR_SPI_Communication16stopTransmissionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::stopTransmission(){
 8013e58:	b580      	push	{r7, lr}
 8013e5a:	b082      	sub	sp, #8
 8013e5c:	af00      	add	r7, sp, #0
 8013e5e:	6078      	str	r0, [r7, #4]
	HAL_SPI_Abort(this->config.hspi);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7f6 fc95 	bl	800a794 <HAL_SPI_Abort>
}
 8013e6a:	bf00      	nop
 8013e6c:	3708      	adds	r7, #8
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}

08013e72 <_ZN19core_utils_CallbackIvvE4callEv>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
		_fp = core_utils_FunctionPointer<R,void>(object, member);
		this->registered = 1;
	}

	R call() {
 8013e72:	b580      	push	{r7, lr}
 8013e74:	b082      	sub	sp, #8
 8013e76:	af00      	add	r7, sp, #0
 8013e78:	6078      	str	r0, [r7, #4]
		return this->_fp();
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	3308      	adds	r3, #8
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f000 f875 	bl	8013f6e <_ZN26core_utils_FunctionPointerIvvEclEv>
 8013e84:	bf00      	nop
	}
 8013e86:	3708      	adds	r7, #8
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}

08013e8c <_ZN19core_utils_CallbackIvtEC1Ev>:
	core_utils_Callback() {
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b082      	sub	sp, #8
 8013e90:	af00      	add	r7, sp, #0
 8013e92:	6078      	str	r0, [r7, #4]
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7ff fe7a 	bl	8013b90 <_ZN8CallbackC1Ev>
 8013e9c:	4a09      	ldr	r2, [pc, #36]	; (8013ec4 <_ZN19core_utils_CallbackIvtEC1Ev+0x38>)
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	601a      	str	r2, [r3, #0]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	711a      	strb	r2, [r3, #4]
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	3308      	adds	r3, #8
 8013eac:	2100      	movs	r1, #0
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f000 f868 	bl	8013f84 <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>
		this->registered = 0;
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2200      	movs	r2, #0
 8013eb8:	711a      	strb	r2, [r3, #4]
	}
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	3708      	adds	r7, #8
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}
 8013ec4:	080253e0 	.word	0x080253e0

08013ec8 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
 8013ec8:	b5b0      	push	{r4, r5, r7, lr}
 8013eca:	b08a      	sub	sp, #40	; 0x28
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	60f8      	str	r0, [r7, #12]
 8013ed0:	60b9      	str	r1, [r7, #8]
 8013ed2:	4639      	mov	r1, r7
 8013ed4:	e881 000c 	stmia.w	r1, {r2, r3}
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	4618      	mov	r0, r3
 8013edc:	f7ff fe58 	bl	8013b90 <_ZN8CallbackC1Ev>
 8013ee0:	4a12      	ldr	r2, [pc, #72]	; (8013f2c <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE+0x64>)
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	601a      	str	r2, [r3, #0]
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	2200      	movs	r2, #0
 8013eea:	711a      	strb	r2, [r3, #4]
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	3308      	adds	r3, #8
 8013ef0:	2100      	movs	r1, #0
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f000 f82d 	bl	8013f52 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<R,void>(object, member);
 8013ef8:	f107 0010 	add.w	r0, r7, #16
 8013efc:	463b      	mov	r3, r7
 8013efe:	cb0c      	ldmia	r3, {r2, r3}
 8013f00:	68b9      	ldr	r1, [r7, #8]
 8013f02:	f000 f84d 	bl	8013fa0 <_ZN26core_utils_FunctionPointerIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	f103 0408 	add.w	r4, r3, #8
 8013f0c:	f107 0510 	add.w	r5, r7, #16
 8013f10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013f18:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	2201      	movs	r2, #1
 8013f20:	711a      	strb	r2, [r3, #4]
	}
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	4618      	mov	r0, r3
 8013f26:	3728      	adds	r7, #40	; 0x28
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8013f2c:	080253f0 	.word	0x080253f0

08013f30 <_ZN19core_utils_CallbackIvtE4callEt>:
	R call(A argument){
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b082      	sub	sp, #8
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
 8013f38:	460b      	mov	r3, r1
 8013f3a:	807b      	strh	r3, [r7, #2]
		return this->_fp(argument);
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	3308      	adds	r3, #8
 8013f40:	887a      	ldrh	r2, [r7, #2]
 8013f42:	4611      	mov	r1, r2
 8013f44:	4618      	mov	r0, r3
 8013f46:	f000 f83e 	bl	8013fc6 <_ZN26core_utils_FunctionPointerIvtEclEt>
 8013f4a:	bf00      	nop
	}
 8013f4c:	3708      	adds	r7, #8
 8013f4e:	46bd      	mov	sp, r7
 8013f50:	bd80      	pop	{r7, pc}

08013f52 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>:
public:
    /** Create a FunctionPointer, attaching a static function
     *
     *  @param function The static function to attach (default is none)
     */
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 8013f52:	b580      	push	{r7, lr}
 8013f54:	b082      	sub	sp, #8
 8013f56:	af00      	add	r7, sp, #0
 8013f58:	6078      	str	r0, [r7, #4]
 8013f5a:	6039      	str	r1, [r7, #0]
        attach(function);
 8013f5c:	6839      	ldr	r1, [r7, #0]
 8013f5e:	6878      	ldr	r0, [r7, #4]
 8013f60:	f000 f840 	bl	8013fe4 <_ZN26core_utils_FunctionPointerIvvE6attachEPFvvE>
    }
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	4618      	mov	r0, r3
 8013f68:	3708      	adds	r7, #8
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	bd80      	pop	{r7, pc}

08013f6e <_ZN26core_utils_FunctionPointerIvvEclEv>:
    R(*get_function())() {
        return _membercaller ? (R(*)())0 : (R(*)())_p.function;
    }

#ifdef MBED_OPERATORS
    R operator ()(void) {
 8013f6e:	b580      	push	{r7, lr}
 8013f70:	b082      	sub	sp, #8
 8013f72:	af00      	add	r7, sp, #0
 8013f74:	6078      	str	r0, [r7, #4]
        return call();
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f000 f845 	bl	8014006 <_ZN26core_utils_FunctionPointerIvvE4callEv>
 8013f7c:	bf00      	nop
    }
 8013f7e:	3708      	adds	r7, #8
 8013f80:	46bd      	mov	sp, r7
 8013f82:	bd80      	pop	{r7, pc}

08013f84 <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b082      	sub	sp, #8
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
 8013f8c:	6039      	str	r1, [r7, #0]
        attach(function);
 8013f8e:	6839      	ldr	r1, [r7, #0]
 8013f90:	6878      	ldr	r0, [r7, #4]
 8013f92:	f000 f85d 	bl	8014050 <_ZN26core_utils_FunctionPointerIvtE6attachEPFvtE>
    }
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3708      	adds	r7, #8
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <_ZN26core_utils_FunctionPointerIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b084      	sub	sp, #16
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	60f8      	str	r0, [r7, #12]
 8013fa8:	60b9      	str	r1, [r7, #8]
 8013faa:	4639      	mov	r1, r7
 8013fac:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8013fb0:	463b      	mov	r3, r7
 8013fb2:	cb0c      	ldmia	r3, {r2, r3}
 8013fb4:	68b9      	ldr	r1, [r7, #8]
 8013fb6:	68f8      	ldr	r0, [r7, #12]
 8013fb8:	f000 f85c 	bl	8014074 <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE>
    }
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3710      	adds	r7, #16
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}

08013fc6 <_ZN26core_utils_FunctionPointerIvtEclEt>:
    R operator ()(A1 a) {
 8013fc6:	b580      	push	{r7, lr}
 8013fc8:	b082      	sub	sp, #8
 8013fca:	af00      	add	r7, sp, #0
 8013fcc:	6078      	str	r0, [r7, #4]
 8013fce:	460b      	mov	r3, r1
 8013fd0:	807b      	strh	r3, [r7, #2]
        return call(a);
 8013fd2:	887b      	ldrh	r3, [r7, #2]
 8013fd4:	4619      	mov	r1, r3
 8013fd6:	6878      	ldr	r0, [r7, #4]
 8013fd8:	f000 f86a 	bl	80140b0 <_ZN26core_utils_FunctionPointerIvtE4callEt>
 8013fdc:	bf00      	nop
    }
 8013fde:	3708      	adds	r7, #8
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	bd80      	pop	{r7, pc}

08013fe4 <_ZN26core_utils_FunctionPointerIvvE6attachEPFvvE>:
    void attach(R (*function)(void)) {
 8013fe4:	b480      	push	{r7}
 8013fe6:	b083      	sub	sp, #12
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	6078      	str	r0, [r7, #4]
 8013fec:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	683a      	ldr	r2, [r7, #0]
 8013ff2:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2200      	movs	r2, #0
 8013ff8:	615a      	str	r2, [r3, #20]
    }
 8013ffa:	bf00      	nop
 8013ffc:	370c      	adds	r7, #12
 8013ffe:	46bd      	mov	sp, r7
 8014000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014004:	4770      	bx	lr

08014006 <_ZN26core_utils_FunctionPointerIvvE4callEv>:
    R call(){
 8014006:	b580      	push	{r7, lr}
 8014008:	b082      	sub	sp, #8
 801400a:	af00      	add	r7, sp, #0
 801400c:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	695b      	ldr	r3, [r3, #20]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d107      	bne.n	8014026 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x20>
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d003      	beq.n	8014026 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x20>
            return _p.function();
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	4798      	blx	r3
 8014024:	e011      	b.n	801404a <_ZN26core_utils_FunctionPointerIvvE4callEv+0x44>
        } else if (_membercaller && _p.object) {
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	695b      	ldr	r3, [r3, #20]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d00c      	beq.n	8014048 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x42>
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d008      	beq.n	8014048 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x42>
            return _membercaller(_p.object, _member);
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	695b      	ldr	r3, [r3, #20]
 801403a:	687a      	ldr	r2, [r7, #4]
 801403c:	6810      	ldr	r0, [r2, #0]
 801403e:	687a      	ldr	r2, [r7, #4]
 8014040:	3204      	adds	r2, #4
 8014042:	4611      	mov	r1, r2
 8014044:	4798      	blx	r3
 8014046:	e000      	b.n	801404a <_ZN26core_utils_FunctionPointerIvvE4callEv+0x44>
        return (R)0;
 8014048:	bf00      	nop
    }
 801404a:	3708      	adds	r7, #8
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}

08014050 <_ZN26core_utils_FunctionPointerIvtE6attachEPFvtE>:
    void attach(R (*function)(A1)) {
 8014050:	b480      	push	{r7}
 8014052:	b083      	sub	sp, #12
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
 8014058:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	683a      	ldr	r2, [r7, #0]
 801405e:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	2200      	movs	r2, #0
 8014064:	615a      	str	r2, [r3, #20]
    }
 8014066:	bf00      	nop
 8014068:	370c      	adds	r7, #12
 801406a:	46bd      	mov	sp, r7
 801406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014070:	4770      	bx	lr
	...

08014074 <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 8014074:	b480      	push	{r7}
 8014076:	b085      	sub	sp, #20
 8014078:	af00      	add	r7, sp, #0
 801407a:	60f8      	str	r0, [r7, #12]
 801407c:	60b9      	str	r1, [r7, #8]
 801407e:	4639      	mov	r1, r7
 8014080:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	68ba      	ldr	r2, [r7, #8]
 8014088:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	3304      	adds	r3, #4
 801408e:	461a      	mov	r2, r3
 8014090:	463b      	mov	r3, r7
 8014092:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014096:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	4a03      	ldr	r2, [pc, #12]	; (80140ac <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE+0x38>)
 801409e:	615a      	str	r2, [r3, #20]
    }
 80140a0:	bf00      	nop
 80140a2:	3714      	adds	r7, #20
 80140a4:	46bd      	mov	sp, r7
 80140a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140aa:	4770      	bx	lr
 80140ac:	08014103 	.word	0x08014103

080140b0 <_ZN26core_utils_FunctionPointerIvtE4callEt>:
    R call(A1 a) {
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	460b      	mov	r3, r1
 80140ba:	807b      	strh	r3, [r7, #2]
        if (_membercaller == 0 && _p.function) {
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	695b      	ldr	r3, [r3, #20]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d109      	bne.n	80140d8 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x28>
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d005      	beq.n	80140d8 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x28>
           return _p.function(a);
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	887a      	ldrh	r2, [r7, #2]
 80140d2:	4610      	mov	r0, r2
 80140d4:	4798      	blx	r3
 80140d6:	e011      	b.n	80140fc <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4c>
        } else if (_membercaller && _p.object) {
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	695b      	ldr	r3, [r3, #20]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d00c      	beq.n	80140fa <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4a>
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d008      	beq.n	80140fa <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4a>
           return _membercaller(_p.object, _member, a);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	695b      	ldr	r3, [r3, #20]
 80140ec:	687a      	ldr	r2, [r7, #4]
 80140ee:	6810      	ldr	r0, [r2, #0]
 80140f0:	687a      	ldr	r2, [r7, #4]
 80140f2:	1d11      	adds	r1, r2, #4
 80140f4:	887a      	ldrh	r2, [r7, #2]
 80140f6:	4798      	blx	r3
 80140f8:	e000      	b.n	80140fc <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4c>
        return (R)0;
 80140fa:	bf00      	nop
    }
 80140fc:	3708      	adds	r7, #8
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}

08014102 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj>:
    }
#endif

private:
    template<typename T>
    static R membercaller(void *object, uintptr_t *member) {
 8014102:	b580      	push	{r7, lr}
 8014104:	b084      	sub	sp, #16
 8014106:	af00      	add	r7, sp, #0
 8014108:	6078      	str	r0, [r7, #4]
 801410a:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	685b      	ldr	r3, [r3, #4]
 8014118:	105b      	asrs	r3, r3, #1
 801411a:	461a      	mov	r2, r3
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	1899      	adds	r1, r3, r2
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	685b      	ldr	r3, [r3, #4]
 8014124:	f003 0301 	and.w	r3, r3, #1
 8014128:	2b00      	cmp	r3, #0
 801412a:	d00b      	beq.n	8014144 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj+0x42>
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	685b      	ldr	r3, [r3, #4]
 8014130:	105b      	asrs	r3, r3, #1
 8014132:	461a      	mov	r2, r3
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	4413      	add	r3, r2
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	68ba      	ldr	r2, [r7, #8]
 801413c:	6812      	ldr	r2, [r2, #0]
 801413e:	4413      	add	r3, r2
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	e001      	b.n	8014148 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj+0x46>
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	4608      	mov	r0, r1
 801414a:	4798      	blx	r3
 801414c:	bf00      	nop
    }
 801414e:	3710      	adds	r7, #16
 8014150:	46bd      	mov	sp, r7
 8014152:	bd80      	pop	{r7, pc}

08014154 <_ZN6BufferC1Ev>:
#include "stdint.h"
#include "../core_default_config.h"

class Buffer {
public:
	Buffer() {
 8014154:	b480      	push	{r7}
 8014156:	b083      	sub	sp, #12
 8014158:	af00      	add	r7, sp, #0
 801415a:	6078      	str	r0, [r7, #4]
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2200      	movs	r2, #0
 8014160:	809a      	strh	r2, [r3, #4]

	}
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	4618      	mov	r0, r3
 8014166:	370c      	adds	r7, #12
 8014168:	46bd      	mov	sp, r7
 801416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801416e:	4770      	bx	lr

08014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>:
class core_utils_Callback<R, void>: public Callback {
 8014170:	b5b0      	push	{r4, r5, r7, lr}
 8014172:	b082      	sub	sp, #8
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
 8014178:	6039      	str	r1, [r7, #0]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	683a      	ldr	r2, [r7, #0]
 801417e:	4611      	mov	r1, r2
 8014180:	4618      	mov	r0, r3
 8014182:	f7ff fd2a 	bl	8013bda <_ZN8CallbackaSERKS_>
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	791a      	ldrb	r2, [r3, #4]
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	711a      	strb	r2, [r3, #4]
 801418e:	687a      	ldr	r2, [r7, #4]
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	f102 0408 	add.w	r4, r2, #8
 8014196:	f103 0508 	add.w	r5, r3, #8
 801419a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801419c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801419e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80141a2:	e884 0003 	stmia.w	r4, {r0, r1}
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	4618      	mov	r0, r3
 80141aa:	3708      	adds	r7, #8
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bdb0      	pop	{r4, r5, r7, pc}

080141b0 <_Z3nopv>:
#include "core_utils_RingBuffer.h"
#include "core_utils_functionpointer.h"
#include "core_utils_registermap.h"


inline void nop(){
 80141b0:	b480      	push	{r7}
 80141b2:	af00      	add	r7, sp, #0

}
 80141b4:	bf00      	nop
 80141b6:	46bd      	mov	sp, r7
 80141b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141bc:	4770      	bx	lr
	...

080141c0 <_ZN4UARTC1Ev>:
extern core_hardware_UART_config core_hardware_uart_std_config;
extern uint8_t num_uarts;
/* =========================================================================== */
class UART {
public:
	UART() {
 80141c0:	b480      	push	{r7}
 80141c2:	b083      	sub	sp, #12
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
 80141c8:	4a04      	ldr	r2, [pc, #16]	; (80141dc <_ZN4UARTC1Ev+0x1c>)
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	601a      	str	r2, [r3, #0]

	}
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	4618      	mov	r0, r3
 80141d2:	370c      	adds	r7, #12
 80141d4:	46bd      	mov	sp, r7
 80141d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141da:	4770      	bx	lr
 80141dc:	0802548c 	.word	0x0802548c

080141e0 <_ZN4UART10rxFunctionEt>:

	virtual void rxFunction(uint16_t len) {
 80141e0:	b480      	push	{r7}
 80141e2:	b083      	sub	sp, #12
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	460b      	mov	r3, r1
 80141ea:	807b      	strh	r3, [r7, #2]

	}
 80141ec:	bf00      	nop
 80141ee:	370c      	adds	r7, #12
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr

080141f8 <_ZN4UART9get_huartEv>:

	virtual UART_HandleTypeDef* get_huart() {
 80141f8:	b480      	push	{r7}
 80141fa:	b083      	sub	sp, #12
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
		return NULL;
 8014200:	2300      	movs	r3, #0
	}
 8014202:	4618      	mov	r0, r3
 8014204:	370c      	adds	r7, #12
 8014206:	46bd      	mov	sp, r7
 8014208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801420c:	4770      	bx	lr
	...

08014210 <_ZN13UartInterfaceC1Ev>:
extern core_hardware_UART_config std_hardware_uart_config;
extern core_comm_UartInterface_config_t std_uart_config;
/* ---------------------------------------------------------- */
class UartInterface {
public:
	UartInterface() {
 8014210:	b480      	push	{r7}
 8014212:	b083      	sub	sp, #12
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
 8014218:	4a06      	ldr	r2, [pc, #24]	; (8014234 <_ZN13UartInterfaceC1Ev+0x24>)
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	601a      	str	r2, [r3, #0]
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	2200      	movs	r2, #0
 8014222:	711a      	strb	r2, [r3, #4]

	}
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	4618      	mov	r0, r3
 8014228:	370c      	adds	r7, #12
 801422a:	46bd      	mov	sp, r7
 801422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014230:	4770      	bx	lr
 8014232:	bf00      	nop
 8014234:	08025458 	.word	0x08025458

08014238 <_ZN13UartInterface11rx_functionEv>:
	virtual uint8_t rx_function() {
 8014238:	b480      	push	{r7}
 801423a:	b083      	sub	sp, #12
 801423c:	af00      	add	r7, sp, #0
 801423e:	6078      	str	r0, [r7, #4]
		return 0;
 8014240:	2300      	movs	r3, #0
	}
 8014242:	4618      	mov	r0, r3
 8014244:	370c      	adds	r7, #12
 8014246:	46bd      	mov	sp, r7
 8014248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424c:	4770      	bx	lr

0801424e <_ZN13UartInterface9setTaskIDEP19tskTaskControlBlock>:
	virtual void setTaskID(TaskHandle_t task) {
 801424e:	b480      	push	{r7}
 8014250:	b083      	sub	sp, #12
 8014252:	af00      	add	r7, sp, #0
 8014254:	6078      	str	r0, [r7, #4]
 8014256:	6039      	str	r1, [r7, #0]

	}
 8014258:	bf00      	nop
 801425a:	370c      	adds	r7, #12
 801425c:	46bd      	mov	sp, r7
 801425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014262:	4770      	bx	lr

08014264 <_ZN13UartInterface9getTaskIDEv>:
	virtual TaskHandle_t getTaskID() {
 8014264:	b480      	push	{r7}
 8014266:	b083      	sub	sp, #12
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
		return NULL;
 801426c:	2300      	movs	r3, #0
	}
 801426e:	4618      	mov	r0, r3
 8014270:	370c      	adds	r7, #12
 8014272:	46bd      	mov	sp, r7
 8014274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014278:	4770      	bx	lr

0801427a <_Z20twipr_uart_comm_taskPv>:

static core_comm_SerialMessage_memory<128> incoming_msg;
static core_comm_SerialMessage_memory<128> outgoing_msg;

/* =========================================================================== */
void twipr_uart_comm_task(void *argument) {
 801427a:	b580      	push	{r7, lr}
 801427c:	b084      	sub	sp, #16
 801427e:	af00      	add	r7, sp, #0
 8014280:	6078      	str	r0, [r7, #4]

	TWIPR_UART_Communication *comm = (TWIPR_UART_Communication*) argument;
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	60fb      	str	r3, [r7, #12]
	comm->task = xTaskGetCurrentTaskHandle();
 8014286:	f7fd ffcf 	bl	8012228 <xTaskGetCurrentTaskHandle>
 801428a:	4602      	mov	r2, r0
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	601a      	str	r2, [r3, #0]
	comm->taskFunction();
 8014290:	68f8      	ldr	r0, [r7, #12]
 8014292:	f000 f8f9 	bl	8014488 <_ZN24TWIPR_UART_Communication12taskFunctionEv>
}
 8014296:	bf00      	nop
 8014298:	3710      	adds	r7, #16
 801429a:	46bd      	mov	sp, r7
 801429c:	bd80      	pop	{r7, pc}

0801429e <_ZN27twipr_uart_comm_callbacks_tC1Ev>:
	TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
	TWIPR_UART_COMM_CALLBACK_MSG_READ,
	TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
} twipr_uart_comm_callback_id_t;

typedef struct twipr_uart_comm_callbacks_t {
 801429e:	b580      	push	{r7, lr}
 80142a0:	b082      	sub	sp, #8
 80142a2:	af00      	add	r7, sp, #0
 80142a4:	6078      	str	r0, [r7, #4]
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	4618      	mov	r0, r3
 80142aa:	f000 fa53 	bl	8014754 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	3320      	adds	r3, #32
 80142b2:	4618      	mov	r0, r3
 80142b4:	f000 fa4e 	bl	8014754 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	3340      	adds	r3, #64	; 0x40
 80142bc:	4618      	mov	r0, r3
 80142be:	f000 fa49 	bl	8014754 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	3360      	adds	r3, #96	; 0x60
 80142c6:	4618      	mov	r0, r3
 80142c8:	f000 fa44 	bl	8014754 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	4618      	mov	r0, r3
 80142d0:	3708      	adds	r7, #8
 80142d2:	46bd      	mov	sp, r7
 80142d4:	bd80      	pop	{r7, pc}

080142d6 <_ZN24TWIPR_UART_CommunicationC1Ev>:

/* =========================================================================== */
TWIPR_UART_Communication::TWIPR_UART_Communication() {
 80142d6:	b580      	push	{r7, lr}
 80142d8:	b082      	sub	sp, #8
 80142da:	af00      	add	r7, sp, #0
 80142dc:	6078      	str	r0, [r7, #4]
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	2200      	movs	r2, #0
 80142e2:	605a      	str	r2, [r3, #4]
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	330c      	adds	r3, #12
 80142e8:	4618      	mov	r0, r3
 80142ea:	f000 f9f5 	bl	80146d8 <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev>
 80142ee:	687a      	ldr	r2, [r7, #4]
 80142f0:	f241 339c 	movw	r3, #5020	; 0x139c
 80142f4:	4413      	add	r3, r2
 80142f6:	4618      	mov	r0, r3
 80142f8:	f7ff ffd1 	bl	801429e <_ZN27twipr_uart_comm_callbacks_tC1Ev>

}
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	4618      	mov	r0, r3
 8014300:	3708      	adds	r7, #8
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
	...

08014308 <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t>:

/* =========================================================================== */
void TWIPR_UART_Communication::init(twipr_uart_comm_config_t config) {
 8014308:	b590      	push	{r4, r7, lr}
 801430a:	b08d      	sub	sp, #52	; 0x34
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
 8014310:	6039      	str	r1, [r7, #0]

	// Initialize the UART interface to the Raspberry Pi
	this->_uart_cm4.init(config.huart,
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	f103 000c 	add.w	r0, r3, #12
 8014318:	6839      	ldr	r1, [r7, #0]
 801431a:	4b0f      	ldr	r3, [pc, #60]	; (8014358 <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t+0x50>)
 801431c:	cb0c      	ldmia	r3, {r2, r3}
 801431e:	f000 fa37 	bl	8014790 <_ZN23core_comm_UartInterfaceILi10ELi128EE4initEP20__UART_HandleTypeDef32core_comm_UartInterface_config_t>
			twipr_communication_uart_cm4_interface_config);

	this->_uart_cm4.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX,
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	f103 040c 	add.w	r4, r3, #12
			core_utils_Callback<void, void*>(this,
 8014328:	4b0c      	ldr	r3, [pc, #48]	; (801435c <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t+0x54>)
 801432a:	62bb      	str	r3, [r7, #40]	; 0x28
 801432c:	2300      	movs	r3, #0
 801432e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014330:	f107 0008 	add.w	r0, r7, #8
 8014334:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014338:	cb0c      	ldmia	r3, {r2, r3}
 801433a:	6879      	ldr	r1, [r7, #4]
 801433c:	f000 fa62 	bl	8014804 <_ZN19core_utils_CallbackIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E>
	this->_uart_cm4.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX,
 8014340:	f107 0308 	add.w	r3, r7, #8
 8014344:	461a      	mov	r2, r3
 8014346:	2100      	movs	r1, #0
 8014348:	4620      	mov	r0, r4
 801434a:	f000 faaf 	bl	80148ac <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE>
					&TWIPR_UART_Communication::_rx_callback));
}
 801434e:	bf00      	nop
 8014350:	3734      	adds	r7, #52	; 0x34
 8014352:	46bd      	mov	sp, r7
 8014354:	bd90      	pop	{r4, r7, pc}
 8014356:	bf00      	nop
 8014358:	24000014 	.word	0x24000014
 801435c:	080145b9 	.word	0x080145b9

08014360 <_ZN24TWIPR_UART_Communication5startEv>:

/* =========================================================================== */
void TWIPR_UART_Communication::start() {
 8014360:	b580      	push	{r7, lr}
 8014362:	b082      	sub	sp, #8
 8014364:	af00      	add	r7, sp, #0
 8014366:	6078      	str	r0, [r7, #4]

	// Start the UART interfaces
	this->_uart_cm4.start();
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	330c      	adds	r3, #12
 801436c:	4618      	mov	r0, r3
 801436e:	f000 fac0 	bl	80148f2 <_ZN23core_comm_UartInterfaceILi10ELi128EE5startEv>

	// Start the task
	this->_thread = osThreadNew(twipr_uart_comm_task, this, &task_attributes);
 8014372:	4a06      	ldr	r2, [pc, #24]	; (801438c <_ZN24TWIPR_UART_Communication5startEv+0x2c>)
 8014374:	6879      	ldr	r1, [r7, #4]
 8014376:	4806      	ldr	r0, [pc, #24]	; (8014390 <_ZN24TWIPR_UART_Communication5startEv+0x30>)
 8014378:	f7fb fb4d 	bl	800fa16 <osThreadNew>
 801437c:	4602      	mov	r2, r0
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	609a      	str	r2, [r3, #8]
}
 8014382:	bf00      	nop
 8014384:	3708      	adds	r7, #8
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}
 801438a:	bf00      	nop
 801438c:	08025408 	.word	0x08025408
 8014390:	0801427b 	.word	0x0801427b

08014394 <_ZN24TWIPR_UART_Communication5resetEv>:
/* =========================================================================== */
void TWIPR_UART_Communication::reset(){
 8014394:	b580      	push	{r7, lr}
 8014396:	b082      	sub	sp, #8
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
	this->_uart_cm4.reset();
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	330c      	adds	r3, #12
 80143a0:	4618      	mov	r0, r3
 80143a2:	f000 faba 	bl	801491a <_ZN23core_comm_UartInterfaceILi10ELi128EE5resetEv>
}
 80143a6:	bf00      	nop
 80143a8:	3708      	adds	r7, #8
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}

080143ae <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>:
	outgoing_msg.len = len;
	this->send(&outgoing_msg);
}

/* =========================================================================== */
void TWIPR_UART_Communication::send(core_comm_SerialMessage *msg) {
 80143ae:	b580      	push	{r7, lr}
 80143b0:	b082      	sub	sp, #8
 80143b2:	af00      	add	r7, sp, #0
 80143b4:	6078      	str	r0, [r7, #4]
 80143b6:	6039      	str	r1, [r7, #0]

	// Check the message
	this->_uart_cm4.send(msg);
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	330c      	adds	r3, #12
 80143bc:	6839      	ldr	r1, [r7, #0]
 80143be:	4618      	mov	r0, r3
 80143c0:	f000 fab9 	bl	8014936 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEP23core_comm_SerialMessage>
}
 80143c4:	bf00      	nop
 80143c6:	3708      	adds	r7, #8
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bd80      	pop	{r7, pc}

080143cc <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>:
class core_utils_Callback: public Callback {
 80143cc:	b5b0      	push	{r4, r5, r7, lr}
 80143ce:	b082      	sub	sp, #8
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	6039      	str	r1, [r7, #0]
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	683a      	ldr	r2, [r7, #0]
 80143da:	4611      	mov	r1, r2
 80143dc:	4618      	mov	r0, r3
 80143de:	f7ff fbfc 	bl	8013bda <_ZN8CallbackaSERKS_>
 80143e2:	683b      	ldr	r3, [r7, #0]
 80143e4:	791a      	ldrb	r2, [r3, #4]
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	711a      	strb	r2, [r3, #4]
 80143ea:	687a      	ldr	r2, [r7, #4]
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	f102 0408 	add.w	r4, r2, #8
 80143f2:	f103 0508 	add.w	r5, r3, #8
 80143f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80143f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80143fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80143fe:	e884 0003 	stmia.w	r4, {r0, r1}
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	4618      	mov	r0, r3
 8014406:	3708      	adds	r7, #8
 8014408:	46bd      	mov	sp, r7
 801440a:	bdb0      	pop	{r4, r5, r7, pc}

0801440c <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>:

/* =========================================================================== */
void TWIPR_UART_Communication::registerCallback(
		twipr_uart_comm_callback_id_t callback_id,
		core_utils_Callback<void, core_comm_SerialMessage*> callback) {
 801440c:	b580      	push	{r7, lr}
 801440e:	b084      	sub	sp, #16
 8014410:	af00      	add	r7, sp, #0
 8014412:	60f8      	str	r0, [r7, #12]
 8014414:	460b      	mov	r3, r1
 8014416:	607a      	str	r2, [r7, #4]
 8014418:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 801441a:	7afb      	ldrb	r3, [r7, #11]
 801441c:	2b03      	cmp	r3, #3
 801441e:	d82f      	bhi.n	8014480 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
 8014420:	a201      	add	r2, pc, #4	; (adr r2, 8014428 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x1c>)
 8014422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014426:	bf00      	nop
 8014428:	08014439 	.word	0x08014439
 801442c:	0801444b 	.word	0x0801444b
 8014430:	0801445d 	.word	0x0801445d
 8014434:	0801446f 	.word	0x0801446f
	case TWIPR_UART_COMM_CALLBACK_RX_MSG: {
		this->_callbacks.rx_msg = callback;
 8014438:	68fa      	ldr	r2, [r7, #12]
 801443a:	f241 339c 	movw	r3, #5020	; 0x139c
 801443e:	4413      	add	r3, r2
 8014440:	6879      	ldr	r1, [r7, #4]
 8014442:	4618      	mov	r0, r3
 8014444:	f7ff ffc2 	bl	80143cc <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 8014448:	e01a      	b.n	8014480 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_WRITE: {
		this->_callbacks.write_msg = callback;
 801444a:	68fa      	ldr	r2, [r7, #12]
 801444c:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8014450:	4413      	add	r3, r2
 8014452:	6879      	ldr	r1, [r7, #4]
 8014454:	4618      	mov	r0, r3
 8014456:	f7ff ffb9 	bl	80143cc <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 801445a:	e011      	b.n	8014480 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_READ: {
		this->_callbacks.read_msg = callback;
 801445c:	68fa      	ldr	r2, [r7, #12]
 801445e:	f241 33dc 	movw	r3, #5084	; 0x13dc
 8014462:	4413      	add	r3, r2
 8014464:	6879      	ldr	r1, [r7, #4]
 8014466:	4618      	mov	r0, r3
 8014468:	f7ff ffb0 	bl	80143cc <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 801446c:	e008      	b.n	8014480 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_FUNC: {
		this->_callbacks.func_msg = callback;
 801446e:	68fa      	ldr	r2, [r7, #12]
 8014470:	f241 33fc 	movw	r3, #5116	; 0x13fc
 8014474:	4413      	add	r3, r2
 8014476:	6879      	ldr	r1, [r7, #4]
 8014478:	4618      	mov	r0, r3
 801447a:	f7ff ffa7 	bl	80143cc <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 801447e:	bf00      	nop
	}
	}

}
 8014480:	bf00      	nop
 8014482:	3710      	adds	r7, #16
 8014484:	46bd      	mov	sp, r7
 8014486:	bd80      	pop	{r7, pc}

08014488 <_ZN24TWIPR_UART_Communication12taskFunctionEv>:

/* =========================================================================== */
void TWIPR_UART_Communication::taskFunction() {
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
	//	uint32_t kernel_ticks = 0;
	while (true) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8014490:	f04f 31ff 	mov.w	r1, #4294967295
 8014494:	2001      	movs	r0, #1
 8014496:	f7fe f861 	bl	801255c <ulTaskNotifyTake>
		if (this->_uart_cm4.rx_queue.available()) {
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	3318      	adds	r3, #24
 801449e:	4618      	mov	r0, r3
 80144a0:	f000 fa66 	bl	8014970 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 80144a4:	4603      	mov	r3, r0
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	bf14      	ite	ne
 80144aa:	2301      	movne	r3, #1
 80144ac:	2300      	moveq	r3, #0
 80144ae:	b2db      	uxtb	r3, r3
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d0ed      	beq.n	8014490 <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x8>
			this->_handleIncomingMessages();
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f000 f801 	bl	80144bc <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80144ba:	e7e9      	b.n	8014490 <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x8>

080144bc <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv>:
		}
	}
}

/* =========================================================================== */
void TWIPR_UART_Communication::_handleIncomingMessages() {
 80144bc:	b580      	push	{r7, lr}
 80144be:	b082      	sub	sp, #8
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
	// Loop through all the messages in the rx queue
	while (this->_uart_cm4.rx_queue.available()) {
 80144c4:	e063      	b.n	801458e <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xd2>
		this->_uart_cm4.rx_queue.read(&incoming_msg);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	3318      	adds	r3, #24
 80144ca:	493a      	ldr	r1, [pc, #232]	; (80145b4 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xf8>)
 80144cc:	4618      	mov	r0, r3
 80144ce:	f000 fa6e 	bl	80149ae <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage>
		// TODO

		// Handle the different addresses

		// Handle the different commands
		switch (incoming_msg.cmd) {
 80144d2:	4b38      	ldr	r3, [pc, #224]	; (80145b4 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xf8>)
 80144d4:	781b      	ldrb	r3, [r3, #0]
 80144d6:	3b01      	subs	r3, #1
 80144d8:	2b07      	cmp	r3, #7
 80144da:	d858      	bhi.n	801458e <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xd2>
 80144dc:	a201      	add	r2, pc, #4	; (adr r2, 80144e4 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0x28>)
 80144de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144e2:	bf00      	nop
 80144e4:	08014505 	.word	0x08014505
 80144e8:	08014525 	.word	0x08014525
 80144ec:	0801458f 	.word	0x0801458f
 80144f0:	0801458f 	.word	0x0801458f
 80144f4:	08014545 	.word	0x08014545
 80144f8:	0801454b 	.word	0x0801454b
 80144fc:	08014551 	.word	0x08014551
 8014500:	08014571 	.word	0x08014571
		case MSG_COMMAND_WRITE: {
//			this->_handleMessage_write(&incoming_msg);
			if (this->_callbacks.write_msg.registered) {
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801450a:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 801450e:	2b00      	cmp	r3, #0
 8014510:	d033      	beq.n	801457a <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xbe>
				this->_callbacks.write_msg.call(&incoming_msg);
 8014512:	687a      	ldr	r2, [r7, #4]
 8014514:	f241 33bc 	movw	r3, #5052	; 0x13bc
 8014518:	4413      	add	r3, r2
 801451a:	4926      	ldr	r1, [pc, #152]	; (80145b4 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xf8>)
 801451c:	4618      	mov	r0, r3
 801451e:	f000 fad3 	bl	8014ac8 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
			break;
 8014522:	e02a      	b.n	801457a <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xbe>
		}
		case MSG_COMMAND_READ: {
			if (this->_callbacks.read_msg.registered) {
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801452a:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 801452e:	2b00      	cmp	r3, #0
 8014530:	d025      	beq.n	801457e <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc2>
				this->_callbacks.read_msg.call(&incoming_msg);
 8014532:	687a      	ldr	r2, [r7, #4]
 8014534:	f241 33dc 	movw	r3, #5084	; 0x13dc
 8014538:	4413      	add	r3, r2
 801453a:	491e      	ldr	r1, [pc, #120]	; (80145b4 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xf8>)
 801453c:	4618      	mov	r0, r3
 801453e:	f000 fac3 	bl	8014ac8 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
//			this->_handleMessage_read(&incoming_msg);
			break;
 8014542:	e01c      	b.n	801457e <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc2>
		}
		case MSG_COMMAND_EVENT: {
			nop();
 8014544:	f7ff fe34 	bl	80141b0 <_Z3nopv>
			break;
 8014548:	e01c      	b.n	8014584 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
		}
		case MSG_COMMAND_MSG: {
			nop();
 801454a:	f7ff fe31 	bl	80141b0 <_Z3nopv>
			break;
 801454e:	e019      	b.n	8014584 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
		}
		case MSG_COMMAND_FCT: {
			if (this->_callbacks.func_msg.registered) {
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014556:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 801455a:	2b00      	cmp	r3, #0
 801455c:	d011      	beq.n	8014582 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc6>
				this->_callbacks.func_msg.call(&incoming_msg);
 801455e:	687a      	ldr	r2, [r7, #4]
 8014560:	f241 33fc 	movw	r3, #5116	; 0x13fc
 8014564:	4413      	add	r3, r2
 8014566:	4913      	ldr	r1, [pc, #76]	; (80145b4 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xf8>)
 8014568:	4618      	mov	r0, r3
 801456a:	f000 faad 	bl	8014ac8 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
//			this->_handleMessage_function(&incoming_msg);
			break;
 801456e:	e008      	b.n	8014582 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc6>
		}
		case MSG_COMMAND_ECHO: {
			this->send(&incoming_msg);
 8014570:	4910      	ldr	r1, [pc, #64]	; (80145b4 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xf8>)
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	f7ff ff1b 	bl	80143ae <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
			break;
 8014578:	e004      	b.n	8014584 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
			break;
 801457a:	bf00      	nop
 801457c:	e002      	b.n	8014584 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
			break;
 801457e:	bf00      	nop
 8014580:	e000      	b.n	8014584 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
			break;
 8014582:	bf00      	nop
		default: {
			continue;
			break;
		}
		}
		this->last_received_message_tick = osKernelGetTickCount();
 8014584:	f7fb fa32 	bl	800f9ec <osKernelGetTickCount>
 8014588:	4602      	mov	r2, r0
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	605a      	str	r2, [r3, #4]
	while (this->_uart_cm4.rx_queue.available()) {
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	3318      	adds	r3, #24
 8014592:	4618      	mov	r0, r3
 8014594:	f000 f9ec 	bl	8014970 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 8014598:	4603      	mov	r3, r0
 801459a:	2b00      	cmp	r3, #0
 801459c:	bf14      	ite	ne
 801459e:	2301      	movne	r3, #1
 80145a0:	2300      	moveq	r3, #0
 80145a2:	b2db      	uxtb	r3, r3
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d18e      	bne.n	80144c6 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xa>
	}
}
 80145a8:	bf00      	nop
 80145aa:	bf00      	nop
 80145ac:	3708      	adds	r7, #8
 80145ae:	46bd      	mov	sp, r7
 80145b0:	bd80      	pop	{r7, pc}
 80145b2:	bf00      	nop
 80145b4:	240152e4 	.word	0x240152e4

080145b8 <_ZN24TWIPR_UART_Communication12_rx_callbackEPv>:
		this->send(&outgoing_msg);
	}
}

/* =========================================================================== */
void TWIPR_UART_Communication::_rx_callback(void *argument) {
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
 80145c0:	6039      	str	r1, [r7, #0]
	if (this->task != NULL) {
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d006      	beq.n	80145d8 <_ZN24TWIPR_UART_Communication12_rx_callbackEPv+0x20>
		xTaskNotifyGive(this->task);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	6818      	ldr	r0, [r3, #0]
 80145ce:	2300      	movs	r3, #0
 80145d0:	2202      	movs	r2, #2
 80145d2:	2100      	movs	r1, #0
 80145d4:	f7fe f80e 	bl	80125f4 <xTaskGenericNotify>
	}
}
 80145d8:	bf00      	nop
 80145da:	3708      	adds	r7, #8
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}

080145e0 <_ZN19core_utils_CallbackIvvEC1Ev>:
	core_utils_Callback() {
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b082      	sub	sp, #8
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	4618      	mov	r0, r3
 80145ec:	f7ff fad0 	bl	8013b90 <_ZN8CallbackC1Ev>
 80145f0:	4a09      	ldr	r2, [pc, #36]	; (8014618 <_ZN19core_utils_CallbackIvvEC1Ev+0x38>)
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	601a      	str	r2, [r3, #0]
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2200      	movs	r2, #0
 80145fa:	711a      	strb	r2, [r3, #4]
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	3308      	adds	r3, #8
 8014600:	2100      	movs	r1, #0
 8014602:	4618      	mov	r0, r3
 8014604:	f7ff fca5 	bl	8013f52 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		this->registered = 0;
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	2200      	movs	r2, #0
 801460c:	711a      	strb	r2, [r3, #4]
	}
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	4618      	mov	r0, r3
 8014612:	3708      	adds	r7, #8
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}
 8014618:	080253f0 	.word	0x080253f0

0801461c <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>:
};

template <int size>
class core_comm_SerialMessage_memory: public core_comm_SerialMessage {
public:
	core_comm_SerialMessage_memory(){
 801461c:	b480      	push	{r7}
 801461e:	b083      	sub	sp, #12
 8014620:	af00      	add	r7, sp, #0
 8014622:	6078      	str	r0, [r7, #4]
		this->data_ptr = data;
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f103 0210 	add.w	r2, r3, #16
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	609a      	str	r2, [r3, #8]
	}
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	4618      	mov	r0, r3
 8014632:	370c      	adds	r7, #12
 8014634:	46bd      	mov	sp, r7
 8014636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463a:	4770      	bx	lr

0801463c <_ZN25core_hardware_UART_configC1Ev>:
typedef struct core_hardware_UART_config {
 801463c:	b480      	push	{r7}
 801463e:	b083      	sub	sp, #12
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2202      	movs	r2, #2
 8014648:	701a      	strb	r2, [r3, #0]
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	2201      	movs	r2, #1
 801464e:	705a      	strb	r2, [r3, #1]
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	2201      	movs	r2, #1
 8014654:	709a      	strb	r2, [r3, #2]
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	2201      	movs	r2, #1
 801465a:	70da      	strb	r2, [r3, #3]
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	4618      	mov	r0, r3
 8014660:	370c      	adds	r7, #12
 8014662:	46bd      	mov	sp, r7
 8014664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014668:	4770      	bx	lr

0801466a <_ZN32core_comm_UartInterface_config_tC1Ev>:
typedef struct core_comm_UartInterface_config_t {
 801466a:	b580      	push	{r7, lr}
 801466c:	b082      	sub	sp, #8
 801466e:	af00      	add	r7, sp, #0
 8014670:	6078      	str	r0, [r7, #4]
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	4618      	mov	r0, r3
 8014676:	f7ff ffe1 	bl	801463c <_ZN25core_hardware_UART_configC1Ev>
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	4618      	mov	r0, r3
 801467e:	3708      	adds	r7, #8
 8014680:	46bd      	mov	sp, r7
 8014682:	bd80      	pop	{r7, pc}

08014684 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev>:
#define CORE_COMMUNICATION_SERIAL_SOCKET_CORE_COMM_MESSAGEQUEUE_H_

#include <communication/uart_interface/core_comm_SerialProtocol.h>

template<int num_messages, int buf_size>
class core_comm_MessageQueue {
 8014684:	b5b0      	push	{r4, r5, r7, lr}
 8014686:	b082      	sub	sp, #8
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2409      	movs	r4, #9
 8014690:	461d      	mov	r5, r3
 8014692:	e004      	b.n	801469e <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev+0x1a>
 8014694:	4628      	mov	r0, r5
 8014696:	f7ff ffc1 	bl	801461c <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
 801469a:	3590      	adds	r5, #144	; 0x90
 801469c:	3c01      	subs	r4, #1
 801469e:	2c00      	cmp	r4, #0
 80146a0:	daf8      	bge.n	8014694 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev+0x10>
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	220a      	movs	r2, #10
 80146a6:	f883 25a3 	strb.w	r2, [r3, #1443]	; 0x5a3
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	4618      	mov	r0, r3
 80146ae:	3708      	adds	r7, #8
 80146b0:	46bd      	mov	sp, r7
 80146b2:	bdb0      	pop	{r4, r5, r7, pc}

080146b4 <_ZN35core_comm_UartInterface_callbacks_tC1Ev>:
typedef struct core_comm_UartInterface_callbacks_t {
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b082      	sub	sp, #8
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	4618      	mov	r0, r3
 80146c0:	f000 fa56 	bl	8014b70 <_ZN19core_utils_CallbackIvPvEC1Ev>
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	3320      	adds	r3, #32
 80146c8:	4618      	mov	r0, r3
 80146ca:	f000 f843 	bl	8014754 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	4618      	mov	r0, r3
 80146d2:	3708      	adds	r7, #8
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}

080146d8 <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev>:
	core_comm_UartInterface_config_t config;
	core_comm_UartInterface_status_t status;
	core_comm_MessageQueue<uart_buffers, uart_buffer_size> rx_queue;

	/* ------------------------------------------------------------- */
	core_comm_UartInterface() {
 80146d8:	b580      	push	{r7, lr}
 80146da:	b082      	sub	sp, #8
 80146dc:	af00      	add	r7, sp, #0
 80146de:	6078      	str	r0, [r7, #4]
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	4618      	mov	r0, r3
 80146e4:	f7ff fd94 	bl	8014210 <_ZN13UartInterfaceC1Ev>
 80146e8:	4a19      	ldr	r2, [pc, #100]	; (8014750 <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev+0x78>)
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	601a      	str	r2, [r3, #0]
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	3305      	adds	r3, #5
 80146f2:	4618      	mov	r0, r3
 80146f4:	f7ff ffb9 	bl	801466a <_ZN32core_comm_UartInterface_config_tC1Ev>
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	330c      	adds	r3, #12
 80146fc:	4618      	mov	r0, r3
 80146fe:	f7ff ffc1 	bl	8014684 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev>
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8014708:	4618      	mov	r0, r3
 801470a:	f000 f9f9 	bl	8014b00 <_ZN18core_hardware_UARTILi10ELi128EEC1Ev>
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	f241 3344 	movw	r3, #4932	; 0x1344
 8014714:	4413      	add	r3, r2
 8014716:	4618      	mov	r0, r3
 8014718:	f7ff ffcc 	bl	80146b4 <_ZN35core_comm_UartInterface_callbacks_tC1Ev>
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014722:	461a      	mov	r2, r3
 8014724:	2300      	movs	r3, #0
 8014726:	f8c2 3384 	str.w	r3, [r2, #900]	; 0x384
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014730:	461a      	mov	r2, r3
 8014732:	2300      	movs	r3, #0
 8014734:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
		this->status = CORE_COMM_SERIAL_SOCKET_STATE_NONE;
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	2200      	movs	r2, #0
 801473c:	72da      	strb	r2, [r3, #11]
		this->exit = 0;
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2200      	movs	r2, #0
 8014742:	711a      	strb	r2, [r3, #4]
	}
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	4618      	mov	r0, r3
 8014748:	3708      	adds	r7, #8
 801474a:	46bd      	mov	sp, r7
 801474c:	bd80      	pop	{r7, pc}
 801474e:	bf00      	nop
 8014750:	08025434 	.word	0x08025434

08014754 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>:
	core_utils_Callback() {
 8014754:	b580      	push	{r7, lr}
 8014756:	b082      	sub	sp, #8
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	4618      	mov	r0, r3
 8014760:	f7ff fa16 	bl	8013b90 <_ZN8CallbackC1Ev>
 8014764:	4a09      	ldr	r2, [pc, #36]	; (801478c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev+0x38>)
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	601a      	str	r2, [r3, #0]
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	2200      	movs	r2, #0
 801476e:	711a      	strb	r2, [r3, #4]
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	3308      	adds	r3, #8
 8014774:	2100      	movs	r1, #0
 8014776:	4618      	mov	r0, r3
 8014778:	f000 fa18 	bl	8014bac <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>
		this->registered = 0;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	2200      	movs	r2, #0
 8014780:	711a      	strb	r2, [r3, #4]
	}
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	4618      	mov	r0, r3
 8014786:	3708      	adds	r7, #8
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}
 801478c:	0802546c 	.word	0x0802546c

08014790 <_ZN23core_comm_UartInterfaceILi10ELi128EE4initEP20__UART_HandleTypeDef32core_comm_UartInterface_config_t>:
	/* ------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart) {
		this->init(huart, std_uart_config);
	}
	/* ------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart,
 8014790:	b590      	push	{r4, r7, lr}
 8014792:	b08f      	sub	sp, #60	; 0x3c
 8014794:	af00      	add	r7, sp, #0
 8014796:	60f8      	str	r0, [r7, #12]
 8014798:	60b9      	str	r1, [r7, #8]
 801479a:	4639      	mov	r1, r7
 801479c:	e881 000c 	stmia.w	r1, {r2, r3}
			core_comm_UartInterface_config_t config) {

		this->config = config;
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	3305      	adds	r3, #5
 80147a4:	463a      	mov	r2, r7
 80147a6:	6810      	ldr	r0, [r2, #0]
 80147a8:	6018      	str	r0, [r3, #0]
 80147aa:	8892      	ldrh	r2, [r2, #4]
 80147ac:	809a      	strh	r2, [r3, #4]
		this->_uart.init(huart, this->config.uart);
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	f503 60b8 	add.w	r0, r3, #1472	; 0x5c0
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80147ba:	4613      	mov	r3, r2
 80147bc:	461a      	mov	r2, r3
 80147be:	68b9      	ldr	r1, [r7, #8]
 80147c0:	f000 fa02 	bl	8014bc8 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config>

		// Add the rx callback to the UARTs
		this->_uart.registerCallback(CORE_HARDWARE_UART_CB_RX,
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	f503 64b8 	add.w	r4, r3, #1472	; 0x5c0
				core_utils_Callback<void, void>(this,
 80147ca:	4b0d      	ldr	r3, [pc, #52]	; (8014800 <_ZN23core_comm_UartInterfaceILi10ELi128EE4initEP20__UART_HandleTypeDef32core_comm_UartInterface_config_t+0x70>)
 80147cc:	633b      	str	r3, [r7, #48]	; 0x30
 80147ce:	2300      	movs	r3, #0
 80147d0:	637b      	str	r3, [r7, #52]	; 0x34
 80147d2:	f107 0010 	add.w	r0, r7, #16
 80147d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80147da:	cb0c      	ldmia	r3, {r2, r3}
 80147dc:	68f9      	ldr	r1, [r7, #12]
 80147de:	f000 fb0f 	bl	8014e00 <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>
		this->_uart.registerCallback(CORE_HARDWARE_UART_CB_RX,
 80147e2:	f107 0310 	add.w	r3, r7, #16
 80147e6:	461a      	mov	r2, r3
 80147e8:	2100      	movs	r1, #0
 80147ea:	4620      	mov	r0, r4
 80147ec:	f000 fb3c 	bl	8014e68 <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE>
						&core_comm_UartInterface<uart_buffers, uart_buffer_size>::_rxNotify_callback));

		this->status = CORE_COMM_SERIAL_SOCKET_STATE_INIT;
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	2201      	movs	r2, #1
 80147f4:	72da      	strb	r2, [r3, #11]
	}
 80147f6:	bf00      	nop
 80147f8:	373c      	adds	r7, #60	; 0x3c
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd90      	pop	{r4, r7, pc}
 80147fe:	bf00      	nop
 8014800:	08014dad 	.word	0x08014dad

08014804 <_ZN19core_utils_CallbackIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 8014804:	b5b0      	push	{r4, r5, r7, lr}
 8014806:	b08a      	sub	sp, #40	; 0x28
 8014808:	af00      	add	r7, sp, #0
 801480a:	60f8      	str	r0, [r7, #12]
 801480c:	60b9      	str	r1, [r7, #8]
 801480e:	4639      	mov	r1, r7
 8014810:	e881 000c 	stmia.w	r1, {r2, r3}
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	4618      	mov	r0, r3
 8014818:	f7ff f9ba 	bl	8013b90 <_ZN8CallbackC1Ev>
 801481c:	4a12      	ldr	r2, [pc, #72]	; (8014868 <_ZN19core_utils_CallbackIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E+0x64>)
 801481e:	68fb      	ldr	r3, [r7, #12]
 8014820:	601a      	str	r2, [r3, #0]
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	2200      	movs	r2, #0
 8014826:	711a      	strb	r2, [r3, #4]
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	3308      	adds	r3, #8
 801482c:	2100      	movs	r1, #0
 801482e:	4618      	mov	r0, r3
 8014830:	f000 fb2f 	bl	8014e92 <_ZN26core_utils_FunctionPointerIvPvEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8014834:	f107 0010 	add.w	r0, r7, #16
 8014838:	463b      	mov	r3, r7
 801483a:	cb0c      	ldmia	r3, {r2, r3}
 801483c:	68b9      	ldr	r1, [r7, #8]
 801483e:	f000 fb36 	bl	8014eae <_ZN26core_utils_FunctionPointerIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E>
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	f103 0408 	add.w	r4, r3, #8
 8014848:	f107 0510 	add.w	r5, r7, #16
 801484c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801484e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014850:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014854:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	2201      	movs	r2, #1
 801485c:	711a      	strb	r2, [r3, #4]
	}
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	4618      	mov	r0, r3
 8014862:	3728      	adds	r7, #40	; 0x28
 8014864:	46bd      	mov	sp, r7
 8014866:	bdb0      	pop	{r4, r5, r7, pc}
 8014868:	0802547c 	.word	0x0802547c

0801486c <_ZN19core_utils_CallbackIvPvEaSERKS1_>:
class core_utils_Callback: public Callback {
 801486c:	b5b0      	push	{r4, r5, r7, lr}
 801486e:	b082      	sub	sp, #8
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	6039      	str	r1, [r7, #0]
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	683a      	ldr	r2, [r7, #0]
 801487a:	4611      	mov	r1, r2
 801487c:	4618      	mov	r0, r3
 801487e:	f7ff f9ac 	bl	8013bda <_ZN8CallbackaSERKS_>
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	791a      	ldrb	r2, [r3, #4]
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	711a      	strb	r2, [r3, #4]
 801488a:	687a      	ldr	r2, [r7, #4]
 801488c:	683b      	ldr	r3, [r7, #0]
 801488e:	f102 0408 	add.w	r4, r2, #8
 8014892:	f103 0508 	add.w	r5, r3, #8
 8014896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801489a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801489e:	e884 0003 	stmia.w	r4, {r0, r1}
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	4618      	mov	r0, r3
 80148a6:	3708      	adds	r7, #8
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bdb0      	pop	{r4, r5, r7, pc}

080148ac <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE>:
	/* ------------------------------------------------------------- */
	core_comm_SerialMessage* getMessagePointer() {
		return this->rx_queue.readPointer();
	}
	/* ------------------------------------------------------------- */
	void registerCallback(core_comm_UartInterface_callback_id_t callback_id,
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b084      	sub	sp, #16
 80148b0:	af00      	add	r7, sp, #0
 80148b2:	60f8      	str	r0, [r7, #12]
 80148b4:	460b      	mov	r3, r1
 80148b6:	607a      	str	r2, [r7, #4]
 80148b8:	72fb      	strb	r3, [r7, #11]
			core_utils_Callback<void, void*> callback) {
		switch (callback_id) {
 80148ba:	7afb      	ldrb	r3, [r7, #11]
 80148bc:	2b02      	cmp	r3, #2
 80148be:	d013      	beq.n	80148e8 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3c>
 80148c0:	2b02      	cmp	r3, #2
 80148c2:	dc12      	bgt.n	80148ea <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3e>
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d002      	beq.n	80148ce <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x22>
 80148c8:	2b01      	cmp	r3, #1
 80148ca:	d009      	beq.n	80148e0 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x34>
		}
		case CORE_COMM_SERIAL_SOCKET_CB_ERROR: {
			break;
		}
		}
	}
 80148cc:	e00d      	b.n	80148ea <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3e>
			this->_callbacks.rx = callback;
 80148ce:	68fa      	ldr	r2, [r7, #12]
 80148d0:	f241 3344 	movw	r3, #4932	; 0x1344
 80148d4:	4413      	add	r3, r2
 80148d6:	6879      	ldr	r1, [r7, #4]
 80148d8:	4618      	mov	r0, r3
 80148da:	f7ff ffc7 	bl	801486c <_ZN19core_utils_CallbackIvPvEaSERKS1_>
			break;
 80148de:	e004      	b.n	80148ea <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3e>
			core_ErrorHandler(0x00);
 80148e0:	2000      	movs	r0, #0
 80148e2:	f00c f9c4 	bl	8020c6e <_Z17core_ErrorHandleri>
			break;
 80148e6:	e000      	b.n	80148ea <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3e>
			break;
 80148e8:	bf00      	nop
	}
 80148ea:	bf00      	nop
 80148ec:	3710      	adds	r7, #16
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}

080148f2 <_ZN23core_comm_UartInterfaceILi10ELi128EE5startEv>:
	void start() {
 80148f2:	b580      	push	{r7, lr}
 80148f4:	b082      	sub	sp, #8
 80148f6:	af00      	add	r7, sp, #0
 80148f8:	6078      	str	r0, [r7, #4]
		this->_uart.start();
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8014900:	4618      	mov	r0, r3
 8014902:	f000 fae7 	bl	8014ed4 <_ZN18core_hardware_UARTILi10ELi128EE5startEv>
		this->status = CORE_COMM_SERIAL_SOCKET_STATE_RUN;
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	2202      	movs	r2, #2
 801490a:	72da      	strb	r2, [r3, #11]
		this->_startRTOS();
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f000 faff 	bl	8014f10 <_ZN23core_comm_UartInterfaceILi10ELi128EE10_startRTOSEv>
	}
 8014912:	bf00      	nop
 8014914:	3708      	adds	r7, #8
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}

0801491a <_ZN23core_comm_UartInterfaceILi10ELi128EE5resetEv>:
	void reset(){
 801491a:	b580      	push	{r7, lr}
 801491c:	b082      	sub	sp, #8
 801491e:	af00      	add	r7, sp, #0
 8014920:	6078      	str	r0, [r7, #4]
		this->_uart.reset();
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8014928:	4618      	mov	r0, r3
 801492a:	f000 fb19 	bl	8014f60 <_ZN18core_hardware_UARTILi10ELi128EE5resetEv>
	}
 801492e:	bf00      	nop
 8014930:	3708      	adds	r7, #8
 8014932:	46bd      	mov	sp, r7
 8014934:	bd80      	pop	{r7, pc}

08014936 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEP23core_comm_SerialMessage>:
	void send(core_comm_SerialMessage *message) {
 8014936:	b580      	push	{r7, lr}
 8014938:	b084      	sub	sp, #16
 801493a:	af00      	add	r7, sp, #0
 801493c:	6078      	str	r0, [r7, #4]
 801493e:	6039      	str	r1, [r7, #0]
		uint8_t len = message->encode(this->_tx_buf);
 8014940:	687a      	ldr	r2, [r7, #4]
 8014942:	f241 23c4 	movw	r3, #4804	; 0x12c4
 8014946:	4413      	add	r3, r2
 8014948:	4619      	mov	r1, r3
 801494a:	6838      	ldr	r0, [r7, #0]
 801494c:	f008 fe9a 	bl	801d684 <_ZN23core_comm_SerialMessage6encodeEPh>
 8014950:	4603      	mov	r3, r0
 8014952:	73fb      	strb	r3, [r7, #15]
		this->send(this->_tx_buf, len);
 8014954:	687a      	ldr	r2, [r7, #4]
 8014956:	f241 23c4 	movw	r3, #4804	; 0x12c4
 801495a:	4413      	add	r3, r2
 801495c:	7bfa      	ldrb	r2, [r7, #15]
 801495e:	b292      	uxth	r2, r2
 8014960:	4619      	mov	r1, r3
 8014962:	6878      	ldr	r0, [r7, #4]
 8014964:	f000 fb0f 	bl	8014f86 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht>
	}
 8014968:	bf00      	nop
 801496a:	3710      	adds	r7, #16
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}

08014970 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>:
		core_comm_SerialMessage *msg = &this->messages[this->idx_read];
		this->inc_read();
		return msg;
	}

	uint8_t available() {
 8014970:	b480      	push	{r7}
 8014972:	b085      	sub	sp, #20
 8014974:	af00      	add	r7, sp, #0
 8014976:	6078      	str	r0, [r7, #4]
		int8_t available_msg = this->idx_write - this->idx_read;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	f893 25a1 	ldrb.w	r2, [r3, #1441]	; 0x5a1
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8014984:	1ad3      	subs	r3, r2, r3
 8014986:	b2db      	uxtb	r3, r3
 8014988:	73fb      	strb	r3, [r7, #15]
		if (available_msg < 0) {
 801498a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801498e:	2b00      	cmp	r3, #0
 8014990:	da06      	bge.n	80149a0 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv+0x30>
			available_msg += this->len;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	f893 25a3 	ldrb.w	r2, [r3, #1443]	; 0x5a3
 8014998:	7bfb      	ldrb	r3, [r7, #15]
 801499a:	4413      	add	r3, r2
 801499c:	b2db      	uxtb	r3, r3
 801499e:	73fb      	strb	r3, [r7, #15]
		}
		return available_msg;
 80149a0:	7bfb      	ldrb	r3, [r7, #15]
	}
 80149a2:	4618      	mov	r0, r3
 80149a4:	3714      	adds	r7, #20
 80149a6:	46bd      	mov	sp, r7
 80149a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ac:	4770      	bx	lr

080149ae <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage>:
	uint8_t read(core_comm_SerialMessage *message) {
 80149ae:	b580      	push	{r7, lr}
 80149b0:	b084      	sub	sp, #16
 80149b2:	af00      	add	r7, sp, #0
 80149b4:	6078      	str	r0, [r7, #4]
 80149b6:	6039      	str	r1, [r7, #0]
		if (this->available() < 1) {
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f7ff ffd9 	bl	8014970 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 80149be:	4603      	mov	r3, r0
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	bf0c      	ite	eq
 80149c4:	2301      	moveq	r3, #1
 80149c6:	2300      	movne	r3, #0
 80149c8:	b2db      	uxtb	r3, r3
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d001      	beq.n	80149d2 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0x24>
			return 0;
 80149ce:	2300      	movs	r3, #0
 80149d0:	e076      	b.n	8014ac0 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0x112>
		message->address_1 = this->messages[this->idx_read].address_1;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 80149d8:	4619      	mov	r1, r3
 80149da:	687a      	ldr	r2, [r7, #4]
 80149dc:	460b      	mov	r3, r1
 80149de:	00db      	lsls	r3, r3, #3
 80149e0:	440b      	add	r3, r1
 80149e2:	011b      	lsls	r3, r3, #4
 80149e4:	4413      	add	r3, r2
 80149e6:	3301      	adds	r3, #1
 80149e8:	781a      	ldrb	r2, [r3, #0]
 80149ea:	683b      	ldr	r3, [r7, #0]
 80149ec:	705a      	strb	r2, [r3, #1]
		message->address_2 = this->messages[this->idx_read].address_2;
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 80149f4:	4619      	mov	r1, r3
 80149f6:	687a      	ldr	r2, [r7, #4]
 80149f8:	460b      	mov	r3, r1
 80149fa:	00db      	lsls	r3, r3, #3
 80149fc:	440b      	add	r3, r1
 80149fe:	011b      	lsls	r3, r3, #4
 8014a00:	4413      	add	r3, r2
 8014a02:	3302      	adds	r3, #2
 8014a04:	781a      	ldrb	r2, [r3, #0]
 8014a06:	683b      	ldr	r3, [r7, #0]
 8014a08:	709a      	strb	r2, [r3, #2]
		message->address_3 = this->messages[this->idx_read].address_3;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8014a10:	4619      	mov	r1, r3
 8014a12:	687a      	ldr	r2, [r7, #4]
 8014a14:	460b      	mov	r3, r1
 8014a16:	00db      	lsls	r3, r3, #3
 8014a18:	440b      	add	r3, r1
 8014a1a:	011b      	lsls	r3, r3, #4
 8014a1c:	4413      	add	r3, r2
 8014a1e:	3303      	adds	r3, #3
 8014a20:	781a      	ldrb	r2, [r3, #0]
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	70da      	strb	r2, [r3, #3]
		message->flag = this->messages[this->idx_read].flag;
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	687a      	ldr	r2, [r7, #4]
 8014a30:	460b      	mov	r3, r1
 8014a32:	00db      	lsls	r3, r3, #3
 8014a34:	440b      	add	r3, r1
 8014a36:	011b      	lsls	r3, r3, #4
 8014a38:	4413      	add	r3, r2
 8014a3a:	3304      	adds	r3, #4
 8014a3c:	781a      	ldrb	r2, [r3, #0]
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	711a      	strb	r2, [r3, #4]
		message->cmd = this->messages[this->idx_read].cmd;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8014a48:	4619      	mov	r1, r3
 8014a4a:	687a      	ldr	r2, [r7, #4]
 8014a4c:	460b      	mov	r3, r1
 8014a4e:	00db      	lsls	r3, r3, #3
 8014a50:	440b      	add	r3, r1
 8014a52:	011b      	lsls	r3, r3, #4
 8014a54:	4413      	add	r3, r2
 8014a56:	781a      	ldrb	r2, [r3, #0]
 8014a58:	683b      	ldr	r3, [r7, #0]
 8014a5a:	701a      	strb	r2, [r3, #0]
		message->len = this->messages[this->idx_read].len;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8014a62:	4619      	mov	r1, r3
 8014a64:	687a      	ldr	r2, [r7, #4]
 8014a66:	460b      	mov	r3, r1
 8014a68:	00db      	lsls	r3, r3, #3
 8014a6a:	440b      	add	r3, r1
 8014a6c:	011b      	lsls	r3, r3, #4
 8014a6e:	4413      	add	r3, r2
 8014a70:	330c      	adds	r3, #12
 8014a72:	881a      	ldrh	r2, [r3, #0]
 8014a74:	683b      	ldr	r3, [r7, #0]
 8014a76:	819a      	strh	r2, [r3, #12]
		for (int i = 0; i<message->len; i++){
 8014a78:	2300      	movs	r3, #0
 8014a7a:	60fb      	str	r3, [r7, #12]
 8014a7c:	e016      	b.n	8014aac <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0xfe>
			message->data_ptr[i] = this->messages[this->idx_read].data_ptr[i];
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8014a84:	4619      	mov	r1, r3
 8014a86:	687a      	ldr	r2, [r7, #4]
 8014a88:	460b      	mov	r3, r1
 8014a8a:	00db      	lsls	r3, r3, #3
 8014a8c:	440b      	add	r3, r1
 8014a8e:	011b      	lsls	r3, r3, #4
 8014a90:	4413      	add	r3, r2
 8014a92:	3308      	adds	r3, #8
 8014a94:	681a      	ldr	r2, [r3, #0]
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	441a      	add	r2, r3
 8014a9a:	683b      	ldr	r3, [r7, #0]
 8014a9c:	6899      	ldr	r1, [r3, #8]
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	440b      	add	r3, r1
 8014aa2:	7812      	ldrb	r2, [r2, #0]
 8014aa4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i<message->len; i++){
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	3301      	adds	r3, #1
 8014aaa:	60fb      	str	r3, [r7, #12]
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	899b      	ldrh	r3, [r3, #12]
 8014ab0:	461a      	mov	r2, r3
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	4293      	cmp	r3, r2
 8014ab6:	dbe2      	blt.n	8014a7e <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0xd0>
		this->inc_read();
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	f000 fa7e 	bl	8014fba <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv>
		return 1;
 8014abe:	2301      	movs	r3, #1
	}
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	3710      	adds	r7, #16
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bd80      	pop	{r7, pc}

08014ac8 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>:
	R call(A argument){
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	6078      	str	r0, [r7, #4]
 8014ad0:	6039      	str	r1, [r7, #0]
		return this->_fp(argument);
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	3308      	adds	r3, #8
 8014ad6:	6839      	ldr	r1, [r7, #0]
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f000 fa8f 	bl	8014ffc <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEclES1_>
 8014ade:	bf00      	nop
	}
 8014ae0:	3708      	adds	r7, #8
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	bd80      	pop	{r7, pc}

08014ae6 <_ZN30core_hardware_UART_callbacks_tC1Ev>:
typedef struct core_hardware_UART_callbacks_t {
 8014ae6:	b580      	push	{r7, lr}
 8014ae8:	b082      	sub	sp, #8
 8014aea:	af00      	add	r7, sp, #0
 8014aec:	6078      	str	r0, [r7, #4]
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7ff fd75 	bl	80145e0 <_ZN19core_utils_CallbackIvvEC1Ev>
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	4618      	mov	r0, r3
 8014afa:	3708      	adds	r7, #8
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}

08014b00 <_ZN18core_hardware_UARTILi10ELi128EEC1Ev>:

template<int num_buffers, int size_buffers>
class core_hardware_UART: public UART {
public:

	core_hardware_UART() {
 8014b00:	b580      	push	{r7, lr}
 8014b02:	b082      	sub	sp, #8
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	6078      	str	r0, [r7, #4]
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7ff fb58 	bl	80141c0 <_ZN4UARTC1Ev>
 8014b10:	4a16      	ldr	r2, [pc, #88]	; (8014b6c <_ZN18core_hardware_UARTILi10ELi128EEC1Ev+0x6c>)
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	601a      	str	r2, [r3, #0]
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	2200      	movs	r2, #0
 8014b1a:	711a      	strb	r2, [r3, #4]
 8014b1c:	687b      	ldr	r3, [r7, #4]
 8014b1e:	3305      	adds	r3, #5
 8014b20:	4618      	mov	r0, r3
 8014b22:	f7ff fd8b 	bl	801463c <_ZN25core_hardware_UART_configC1Ev>
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	3310      	adds	r3, #16
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f000 fa73 	bl	8015016 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8014b36:	4618      	mov	r0, r3
 8014b38:	f000 fa6d 	bl	8015016 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8014b42:	4618      	mov	r0, r3
 8014b44:	f7ff ffcf 	bl	8014ae6 <_ZN30core_hardware_UART_callbacks_tC1Ev>
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	f603 33f4 	addw	r3, r3, #3060	; 0xbf4
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f000 fa85 	bl	801505e <_ZN17core_utils_BufferILi128EEC1Ev>
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f603 437c 	addw	r3, r3, #3196	; 0xc7c
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f000 fa7f 	bl	801505e <_ZN17core_utils_BufferILi128EEC1Ev>

	}
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	4618      	mov	r0, r3
 8014b64:	3708      	adds	r7, #8
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}
 8014b6a:	bf00      	nop
 8014b6c:	08025448 	.word	0x08025448

08014b70 <_ZN19core_utils_CallbackIvPvEC1Ev>:
	core_utils_Callback() {
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b082      	sub	sp, #8
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	6078      	str	r0, [r7, #4]
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7ff f808 	bl	8013b90 <_ZN8CallbackC1Ev>
 8014b80:	4a09      	ldr	r2, [pc, #36]	; (8014ba8 <_ZN19core_utils_CallbackIvPvEC1Ev+0x38>)
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	601a      	str	r2, [r3, #0]
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	2200      	movs	r2, #0
 8014b8a:	711a      	strb	r2, [r3, #4]
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	3308      	adds	r3, #8
 8014b90:	2100      	movs	r1, #0
 8014b92:	4618      	mov	r0, r3
 8014b94:	f000 f97d 	bl	8014e92 <_ZN26core_utils_FunctionPointerIvPvEC1EPFvS0_E>
		this->registered = 0;
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	711a      	strb	r2, [r3, #4]
	}
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	3708      	adds	r7, #8
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bd80      	pop	{r7, pc}
 8014ba8:	0802547c 	.word	0x0802547c

08014bac <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b082      	sub	sp, #8
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
 8014bb4:	6039      	str	r1, [r7, #0]
        attach(function);
 8014bb6:	6839      	ldr	r1, [r7, #0]
 8014bb8:	6878      	ldr	r0, [r7, #4]
 8014bba:	f000 fa68 	bl	801508e <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachEPFvS1_E>
    }
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	4618      	mov	r0, r3
 8014bc2:	3708      	adds	r7, #8
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	bd80      	pop	{r7, pc}

08014bc8 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config>:
	void init(UART_HandleTypeDef *huart) {
		this->init(huart, core_hardware_uart_std_config);
	}

	/* ------------------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart, core_hardware_UART_config config) {
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b084      	sub	sp, #16
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	60f8      	str	r0, [r7, #12]
 8014bd0:	60b9      	str	r1, [r7, #8]
 8014bd2:	607a      	str	r2, [r7, #4]

		this->huart = huart;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	68ba      	ldr	r2, [r7, #8]
 8014bd8:	60da      	str	r2, [r3, #12]

		this->config = config;
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	3305      	adds	r3, #5
 8014bde:	1d3a      	adds	r2, r7, #4
 8014be0:	6810      	ldr	r0, [r2, #0]
 8014be2:	6018      	str	r0, [r3, #0]
		if (this->huart == NULL) {
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	68db      	ldr	r3, [r3, #12]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d102      	bne.n	8014bf2 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x2a>
			core_ErrorHandler(1);
 8014bec:	2001      	movs	r0, #1
 8014bee:	f00c f83e 	bl	8020c6e <_Z17core_ErrorHandleri>
		}
		HAL_UART_RegisterRxEventCallback(this->huart, uartRxCmpltDMA_callback);
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	68db      	ldr	r3, [r3, #12]
 8014bf6:	495a      	ldr	r1, [pc, #360]	; (8014d60 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x198>)
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f7f7 f963 	bl	800bec4 <HAL_UART_RegisterRxEventCallback>
		__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	68db      	ldr	r3, [r3, #12]
 8014c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	4a56      	ldr	r2, [pc, #344]	; (8014d64 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x19c>)
 8014c0a:	4293      	cmp	r3, r2
 8014c0c:	d077      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	68db      	ldr	r3, [r3, #12]
 8014c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c16:	681b      	ldr	r3, [r3, #0]
 8014c18:	4a53      	ldr	r2, [pc, #332]	; (8014d68 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a0>)
 8014c1a:	4293      	cmp	r3, r2
 8014c1c:	d06f      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	68db      	ldr	r3, [r3, #12]
 8014c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	4a50      	ldr	r2, [pc, #320]	; (8014d6c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a4>)
 8014c2a:	4293      	cmp	r3, r2
 8014c2c:	d067      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	68db      	ldr	r3, [r3, #12]
 8014c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	4a4d      	ldr	r2, [pc, #308]	; (8014d70 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a8>)
 8014c3a:	4293      	cmp	r3, r2
 8014c3c:	d05f      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	68db      	ldr	r3, [r3, #12]
 8014c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c46:	681b      	ldr	r3, [r3, #0]
 8014c48:	4a4a      	ldr	r2, [pc, #296]	; (8014d74 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1ac>)
 8014c4a:	4293      	cmp	r3, r2
 8014c4c:	d057      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	68db      	ldr	r3, [r3, #12]
 8014c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	4a47      	ldr	r2, [pc, #284]	; (8014d78 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b0>)
 8014c5a:	4293      	cmp	r3, r2
 8014c5c:	d04f      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	68db      	ldr	r3, [r3, #12]
 8014c62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	4a44      	ldr	r2, [pc, #272]	; (8014d7c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b4>)
 8014c6a:	4293      	cmp	r3, r2
 8014c6c:	d047      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	68db      	ldr	r3, [r3, #12]
 8014c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	4a41      	ldr	r2, [pc, #260]	; (8014d80 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b8>)
 8014c7a:	4293      	cmp	r3, r2
 8014c7c:	d03f      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	68db      	ldr	r3, [r3, #12]
 8014c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	4a3e      	ldr	r2, [pc, #248]	; (8014d84 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1bc>)
 8014c8a:	4293      	cmp	r3, r2
 8014c8c:	d037      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	68db      	ldr	r3, [r3, #12]
 8014c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	4a3b      	ldr	r2, [pc, #236]	; (8014d88 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c0>)
 8014c9a:	4293      	cmp	r3, r2
 8014c9c:	d02f      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	68db      	ldr	r3, [r3, #12]
 8014ca2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	4a38      	ldr	r2, [pc, #224]	; (8014d8c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c4>)
 8014caa:	4293      	cmp	r3, r2
 8014cac:	d027      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	68db      	ldr	r3, [r3, #12]
 8014cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cb6:	681b      	ldr	r3, [r3, #0]
 8014cb8:	4a35      	ldr	r2, [pc, #212]	; (8014d90 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c8>)
 8014cba:	4293      	cmp	r3, r2
 8014cbc:	d01f      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	68db      	ldr	r3, [r3, #12]
 8014cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	4a32      	ldr	r2, [pc, #200]	; (8014d94 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1cc>)
 8014cca:	4293      	cmp	r3, r2
 8014ccc:	d017      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	68db      	ldr	r3, [r3, #12]
 8014cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	4a2f      	ldr	r2, [pc, #188]	; (8014d98 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d0>)
 8014cda:	4293      	cmp	r3, r2
 8014cdc:	d00f      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	68db      	ldr	r3, [r3, #12]
 8014ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	4a2c      	ldr	r2, [pc, #176]	; (8014d9c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d4>)
 8014cea:	4293      	cmp	r3, r2
 8014cec:	d007      	beq.n	8014cfe <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	68db      	ldr	r3, [r3, #12]
 8014cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	4a29      	ldr	r2, [pc, #164]	; (8014da0 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d8>)
 8014cfa:	4293      	cmp	r3, r2
 8014cfc:	d10e      	bne.n	8014d1c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x154>
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	68db      	ldr	r3, [r3, #12]
 8014d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	681a      	ldr	r2, [r3, #0]
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	68db      	ldr	r3, [r3, #12]
 8014d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	f022 0208 	bic.w	r2, r2, #8
 8014d18:	601a      	str	r2, [r3, #0]
 8014d1a:	e00d      	b.n	8014d38 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x170>
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	68db      	ldr	r3, [r3, #12]
 8014d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	681a      	ldr	r2, [r3, #0]
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	68db      	ldr	r3, [r3, #12]
 8014d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	f022 0204 	bic.w	r2, r2, #4
 8014d36:	601a      	str	r2, [r3, #0]

		this->state = CORE_HARDWARE_UART_STATE_INIT;
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	2201      	movs	r2, #1
 8014d3c:	711a      	strb	r2, [r3, #4]

		uarts[num_uarts] = this;
 8014d3e:	4b19      	ldr	r3, [pc, #100]	; (8014da4 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 8014d40:	781b      	ldrb	r3, [r3, #0]
 8014d42:	4619      	mov	r1, r3
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	4a18      	ldr	r2, [pc, #96]	; (8014da8 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1e0>)
 8014d48:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		num_uarts++;
 8014d4c:	4b15      	ldr	r3, [pc, #84]	; (8014da4 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 8014d4e:	781b      	ldrb	r3, [r3, #0]
 8014d50:	3301      	adds	r3, #1
 8014d52:	b2da      	uxtb	r2, r3
 8014d54:	4b13      	ldr	r3, [pc, #76]	; (8014da4 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 8014d56:	701a      	strb	r2, [r3, #0]
	}
 8014d58:	bf00      	nop
 8014d5a:	3710      	adds	r7, #16
 8014d5c:	46bd      	mov	sp, r7
 8014d5e:	bd80      	pop	{r7, pc}
 8014d60:	0801f679 	.word	0x0801f679
 8014d64:	40020010 	.word	0x40020010
 8014d68:	40020028 	.word	0x40020028
 8014d6c:	40020040 	.word	0x40020040
 8014d70:	40020058 	.word	0x40020058
 8014d74:	40020070 	.word	0x40020070
 8014d78:	40020088 	.word	0x40020088
 8014d7c:	400200a0 	.word	0x400200a0
 8014d80:	400200b8 	.word	0x400200b8
 8014d84:	40020410 	.word	0x40020410
 8014d88:	40020428 	.word	0x40020428
 8014d8c:	40020440 	.word	0x40020440
 8014d90:	40020458 	.word	0x40020458
 8014d94:	40020470 	.word	0x40020470
 8014d98:	40020488 	.word	0x40020488
 8014d9c:	400204a0 	.word	0x400204a0
 8014da0:	400204b8 	.word	0x400204b8
 8014da4:	2401e158 	.word	0x2401e158
 8014da8:	2401e144 	.word	0x2401e144

08014dac <_ZN23core_comm_UartInterfaceILi10ELi128EE18_rxNotify_callbackEv>:

		this->_thread_id = osThreadNew(core_comm_SerialSocket_RTOS_Task, this,
				&task_attributes);
	}
	/* ------------------------------------------------------------- */
	void _rxNotify_callback() {
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b084      	sub	sp, #16
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	6078      	str	r0, [r7, #4]
		if (this->_task_id != NULL) {
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014dba:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d017      	beq.n	8014df2 <_ZN23core_comm_UartInterfaceILi10ELi128EE18_rxNotify_callbackEv+0x46>
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	60fb      	str	r3, [r7, #12]
			vTaskNotifyGiveFromISR(this->_task_id, &xHigherPriorityTaskWoken);
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014dcc:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8014dd0:	f107 020c 	add.w	r2, r7, #12
 8014dd4:	4611      	mov	r1, r2
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7fd fdae 	bl	8012938 <vTaskNotifyGiveFromISR>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d007      	beq.n	8014df2 <_ZN23core_comm_UartInterfaceILi10ELi128EE18_rxNotify_callbackEv+0x46>
 8014de2:	4b06      	ldr	r3, [pc, #24]	; (8014dfc <_ZN23core_comm_UartInterfaceILi10ELi128EE18_rxNotify_callbackEv+0x50>)
 8014de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014de8:	601a      	str	r2, [r3, #0]
 8014dea:	f3bf 8f4f 	dsb	sy
 8014dee:	f3bf 8f6f 	isb	sy
		}
	}
 8014df2:	bf00      	nop
 8014df4:	3710      	adds	r7, #16
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}
 8014dfa:	bf00      	nop
 8014dfc:	e000ed04 	.word	0xe000ed04

08014e00 <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
 8014e00:	b5b0      	push	{r4, r5, r7, lr}
 8014e02:	b08a      	sub	sp, #40	; 0x28
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	60f8      	str	r0, [r7, #12]
 8014e08:	60b9      	str	r1, [r7, #8]
 8014e0a:	4639      	mov	r1, r7
 8014e0c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	4618      	mov	r0, r3
 8014e14:	f7fe febc 	bl	8013b90 <_ZN8CallbackC1Ev>
 8014e18:	4a12      	ldr	r2, [pc, #72]	; (8014e64 <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE+0x64>)
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	601a      	str	r2, [r3, #0]
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	2200      	movs	r2, #0
 8014e22:	711a      	strb	r2, [r3, #4]
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	3308      	adds	r3, #8
 8014e28:	2100      	movs	r1, #0
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7ff f891 	bl	8013f52 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<R,void>(object, member);
 8014e30:	f107 0010 	add.w	r0, r7, #16
 8014e34:	463b      	mov	r3, r7
 8014e36:	cb0c      	ldmia	r3, {r2, r3}
 8014e38:	68b9      	ldr	r1, [r7, #8]
 8014e3a:	f000 f939 	bl	80150b0 <_ZN26core_utils_FunctionPointerIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	f103 0408 	add.w	r4, r3, #8
 8014e44:	f107 0510 	add.w	r5, r7, #16
 8014e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014e4c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014e50:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	2201      	movs	r2, #1
 8014e58:	711a      	strb	r2, [r3, #4]
	}
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	3728      	adds	r7, #40	; 0x28
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bdb0      	pop	{r4, r5, r7, pc}
 8014e64:	080253f0 	.word	0x080253f0

08014e68 <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE>:

		this->startReceiveDMA();
	}

	/* ------------------------------------------------------------------------- */
	void registerCallback(core_hardware_UART_CB_ID callback_id,
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b084      	sub	sp, #16
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	60f8      	str	r0, [r7, #12]
 8014e70:	460b      	mov	r3, r1
 8014e72:	607a      	str	r2, [r7, #4]
 8014e74:	72fb      	strb	r3, [r7, #11]
			core_utils_Callback<void, void> callback) {
		if (callback_id == CORE_HARDWARE_UART_CB_RX) {
 8014e76:	7afb      	ldrb	r3, [r7, #11]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d106      	bne.n	8014e8a <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE+0x22>
			this->_callbacks.rx = callback;
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8014e82:	6879      	ldr	r1, [r7, #4]
 8014e84:	4618      	mov	r0, r3
 8014e86:	f7ff f973 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		}
	}
 8014e8a:	bf00      	nop
 8014e8c:	3710      	adds	r7, #16
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}

08014e92 <_ZN26core_utils_FunctionPointerIvPvEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8014e92:	b580      	push	{r7, lr}
 8014e94:	b082      	sub	sp, #8
 8014e96:	af00      	add	r7, sp, #0
 8014e98:	6078      	str	r0, [r7, #4]
 8014e9a:	6039      	str	r1, [r7, #0]
        attach(function);
 8014e9c:	6839      	ldr	r1, [r7, #0]
 8014e9e:	6878      	ldr	r0, [r7, #4]
 8014ea0:	f000 f919 	bl	80150d6 <_ZN26core_utils_FunctionPointerIvPvE6attachEPFvS0_E>
    }
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	3708      	adds	r7, #8
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}

08014eae <_ZN26core_utils_FunctionPointerIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8014eae:	b580      	push	{r7, lr}
 8014eb0:	b084      	sub	sp, #16
 8014eb2:	af00      	add	r7, sp, #0
 8014eb4:	60f8      	str	r0, [r7, #12]
 8014eb6:	60b9      	str	r1, [r7, #8]
 8014eb8:	4639      	mov	r1, r7
 8014eba:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8014ebe:	463b      	mov	r3, r7
 8014ec0:	cb0c      	ldmia	r3, {r2, r3}
 8014ec2:	68b9      	ldr	r1, [r7, #8]
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f000 f917 	bl	80150f8 <_ZN26core_utils_FunctionPointerIvPvE6attachI24TWIPR_UART_CommunicationEEvPT_MS4_FvS0_E>
    }
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3710      	adds	r7, #16
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <_ZN18core_hardware_UARTILi10ELi128EE5startEv>:
	void start() {
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b082      	sub	sp, #8
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
		if (this->state != CORE_HARDWARE_UART_STATE_INIT) {
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	791b      	ldrb	r3, [r3, #4]
 8014ee0:	2b01      	cmp	r3, #1
 8014ee2:	d002      	beq.n	8014eea <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x16>
			core_ErrorHandler(2);
 8014ee4:	2002      	movs	r0, #2
 8014ee6:	f00b fec2 	bl	8020c6e <_Z17core_ErrorHandleri>
		if (this->config.mode == CORE_HARDWARE_UART_MODE_DMA) {
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	795b      	ldrb	r3, [r3, #5]
 8014eee:	2b02      	cmp	r3, #2
 8014ef0:	d103      	bne.n	8014efa <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x26>
			this->startReceiveDMA();
 8014ef2:	6878      	ldr	r0, [r7, #4]
 8014ef4:	f000 f91e 	bl	8015134 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>
 8014ef8:	e002      	b.n	8014f00 <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x2c>
			core_ErrorHandler(3);
 8014efa:	2003      	movs	r0, #3
 8014efc:	f00b feb7 	bl	8020c6e <_Z17core_ErrorHandleri>
		this->state = CORE_HARDWARE_UART_STATE_RUN;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2202      	movs	r2, #2
 8014f04:	711a      	strb	r2, [r3, #4]
	}
 8014f06:	bf00      	nop
 8014f08:	3708      	adds	r7, #8
 8014f0a:	46bd      	mov	sp, r7
 8014f0c:	bd80      	pop	{r7, pc}
	...

08014f10 <_ZN23core_comm_UartInterfaceILi10ELi128EE10_startRTOSEv>:
	void _startRTOS() {
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b08c      	sub	sp, #48	; 0x30
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
		const osThreadAttr_t task_attributes =
 8014f18:	f107 030c 	add.w	r3, r7, #12
 8014f1c:	2224      	movs	r2, #36	; 0x24
 8014f1e:	2100      	movs	r1, #0
 8014f20:	4618      	mov	r0, r3
 8014f22:	f00e f978 	bl	8023216 <memset>
 8014f26:	4b0c      	ldr	r3, [pc, #48]	; (8014f58 <_ZN23core_comm_UartInterfaceILi10ELi128EE10_startRTOSEv+0x48>)
 8014f28:	60fb      	str	r3, [r7, #12]
 8014f2a:	f241 0310 	movw	r3, #4112	; 0x1010
 8014f2e:	623b      	str	r3, [r7, #32]
 8014f30:	232c      	movs	r3, #44	; 0x2c
 8014f32:	627b      	str	r3, [r7, #36]	; 0x24
		this->_thread_id = osThreadNew(core_comm_SerialSocket_RTOS_Task, this,
 8014f34:	f107 030c 	add.w	r3, r7, #12
 8014f38:	461a      	mov	r2, r3
 8014f3a:	6879      	ldr	r1, [r7, #4]
 8014f3c:	4807      	ldr	r0, [pc, #28]	; (8014f5c <_ZN23core_comm_UartInterfaceILi10ELi128EE10_startRTOSEv+0x4c>)
 8014f3e:	f7fa fd6a 	bl	800fa16 <osThreadNew>
 8014f42:	4602      	mov	r2, r0
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f4a:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
	}
 8014f4e:	bf00      	nop
 8014f50:	3730      	adds	r7, #48	; 0x30
 8014f52:	46bd      	mov	sp, r7
 8014f54:	bd80      	pop	{r7, pc}
 8014f56:	bf00      	nop
 8014f58:	080250ac 	.word	0x080250ac
 8014f5c:	0801d853 	.word	0x0801d853

08014f60 <_ZN18core_hardware_UARTILi10ELi128EE5resetEv>:
	void reset() {
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b082      	sub	sp, #8
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
		HAL_UART_Abort(this->huart);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	68db      	ldr	r3, [r3, #12]
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f7f7 f9dd 	bl	800c32c <HAL_UART_Abort>
		this->state = CORE_HARDWARE_UART_STATE_INIT;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	2201      	movs	r2, #1
 8014f76:	711a      	strb	r2, [r3, #4]
		this->start();
 8014f78:	6878      	ldr	r0, [r7, #4]
 8014f7a:	f7ff ffab 	bl	8014ed4 <_ZN18core_hardware_UARTILi10ELi128EE5startEv>
	}
 8014f7e:	bf00      	nop
 8014f80:	3708      	adds	r7, #8
 8014f82:	46bd      	mov	sp, r7
 8014f84:	bd80      	pop	{r7, pc}

08014f86 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht>:
	void send(uint8_t *buffer, uint16_t len) {
 8014f86:	b580      	push	{r7, lr}
 8014f88:	b084      	sub	sp, #16
 8014f8a:	af00      	add	r7, sp, #0
 8014f8c:	60f8      	str	r0, [r7, #12]
 8014f8e:	60b9      	str	r1, [r7, #8]
 8014f90:	4613      	mov	r3, r2
 8014f92:	80fb      	strh	r3, [r7, #6]
		if (this->status != CORE_COMM_SERIAL_SOCKET_STATE_RUN) {
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	7adb      	ldrb	r3, [r3, #11]
 8014f98:	2b02      	cmp	r3, #2
 8014f9a:	d002      	beq.n	8014fa2 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht+0x1c>
			core_ErrorHandler(1);
 8014f9c:	2001      	movs	r0, #1
 8014f9e:	f00b fe66 	bl	8020c6e <_Z17core_ErrorHandleri>
		this->_uart.send(buffer, len);
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8014fa8:	88fa      	ldrh	r2, [r7, #6]
 8014faa:	68b9      	ldr	r1, [r7, #8]
 8014fac:	4618      	mov	r0, r3
 8014fae:	f000 f999 	bl	80152e4 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht>
	}
 8014fb2:	bf00      	nop
 8014fb4:	3710      	adds	r7, #16
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}

08014fba <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv>:
	uint8_t inc_read() {
 8014fba:	b480      	push	{r7}
 8014fbc:	b083      	sub	sp, #12
 8014fbe:	af00      	add	r7, sp, #0
 8014fc0:	6078      	str	r0, [r7, #4]
		this->idx_read++;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
 8014fc8:	3301      	adds	r3, #1
 8014fca:	b2da      	uxtb	r2, r3
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
		if (this->idx_read == this->len) {
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	f893 25a0 	ldrb.w	r2, [r3, #1440]	; 0x5a0
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f893 35a3 	ldrb.w	r3, [r3, #1443]	; 0x5a3
 8014fde:	429a      	cmp	r2, r3
 8014fe0:	d103      	bne.n	8014fea <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv+0x30>
			this->idx_read = 0;
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	f883 25a0 	strb.w	r2, [r3, #1440]	; 0x5a0
		return this->idx_read;
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	f893 35a0 	ldrb.w	r3, [r3, #1440]	; 0x5a0
	}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	370c      	adds	r7, #12
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffa:	4770      	bx	lr

08014ffc <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEclES1_>:
    R operator ()(A1 a) {
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b082      	sub	sp, #8
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
 8015004:	6039      	str	r1, [r7, #0]
        return call(a);
 8015006:	6839      	ldr	r1, [r7, #0]
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f000 f9bc 	bl	8015386 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_>
 801500e:	bf00      	nop
    }
 8015010:	3708      	adds	r7, #8
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}

08015016 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>:
};

template<int num, int size>
class core_utils_BufferQueue {
public:
	core_utils_BufferQueue() {
 8015016:	b5b0      	push	{r4, r5, r7, lr}
 8015018:	b082      	sub	sp, #8
 801501a:	af00      	add	r7, sp, #0
 801501c:	6078      	str	r0, [r7, #4]
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	3304      	adds	r3, #4
 8015022:	2409      	movs	r4, #9
 8015024:	461d      	mov	r5, r3
 8015026:	e004      	b.n	8015032 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev+0x1c>
 8015028:	4628      	mov	r0, r5
 801502a:	f000 f818 	bl	801505e <_ZN17core_utils_BufferILi128EEC1Ev>
 801502e:	3588      	adds	r5, #136	; 0x88
 8015030:	3c01      	subs	r4, #1
 8015032:	2c00      	cmp	r4, #0
 8015034:	daf8      	bge.n	8015028 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev+0x12>
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	220a      	movs	r2, #10
 801503a:	f883 2554 	strb.w	r2, [r3, #1364]	; 0x554
		this->idx_read = 0;
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	2200      	movs	r2, #0
 8015042:	f883 2556 	strb.w	r2, [r3, #1366]	; 0x556
		this->idx_write = 0;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	2200      	movs	r2, #0
 801504a:	f883 2555 	strb.w	r2, [r3, #1365]	; 0x555
		this->overflow = 0;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2200      	movs	r2, #0
 8015052:	701a      	strb	r2, [r3, #0]
	}
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	4618      	mov	r0, r3
 8015058:	3708      	adds	r7, #8
 801505a:	46bd      	mov	sp, r7
 801505c:	bdb0      	pop	{r4, r5, r7, pc}

0801505e <_ZN17core_utils_BufferILi128EEC1Ev>:
	core_utils_Buffer<size>(){
 801505e:	b580      	push	{r7, lr}
 8015060:	b082      	sub	sp, #8
 8015062:	af00      	add	r7, sp, #0
 8015064:	6078      	str	r0, [r7, #4]
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	4618      	mov	r0, r3
 801506a:	f7ff f873 	bl	8014154 <_ZN6BufferC1Ev>
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	3306      	adds	r3, #6
 8015072:	2280      	movs	r2, #128	; 0x80
 8015074:	2100      	movs	r1, #0
 8015076:	4618      	mov	r0, r3
 8015078:	f00e f8cd 	bl	8023216 <memset>
		this->data_ptr = this->buffer;
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	1d9a      	adds	r2, r3, #6
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	601a      	str	r2, [r3, #0]
	}
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	4618      	mov	r0, r3
 8015088:	3708      	adds	r7, #8
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}

0801508e <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachEPFvS1_E>:
    void attach(R (*function)(A1)) {
 801508e:	b480      	push	{r7}
 8015090:	b083      	sub	sp, #12
 8015092:	af00      	add	r7, sp, #0
 8015094:	6078      	str	r0, [r7, #4]
 8015096:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	683a      	ldr	r2, [r7, #0]
 801509c:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	2200      	movs	r2, #0
 80150a2:	615a      	str	r2, [r3, #20]
    }
 80150a4:	bf00      	nop
 80150a6:	370c      	adds	r7, #12
 80150a8:	46bd      	mov	sp, r7
 80150aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ae:	4770      	bx	lr

080150b0 <_ZN26core_utils_FunctionPointerIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b084      	sub	sp, #16
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	60f8      	str	r0, [r7, #12]
 80150b8:	60b9      	str	r1, [r7, #8]
 80150ba:	4639      	mov	r1, r7
 80150bc:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80150c0:	463b      	mov	r3, r7
 80150c2:	cb0c      	ldmia	r3, {r2, r3}
 80150c4:	68b9      	ldr	r1, [r7, #8]
 80150c6:	68f8      	ldr	r0, [r7, #12]
 80150c8:	f000 f984 	bl	80153d4 <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE>
    }
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	4618      	mov	r0, r3
 80150d0:	3710      	adds	r7, #16
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}

080150d6 <_ZN26core_utils_FunctionPointerIvPvE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 80150d6:	b480      	push	{r7}
 80150d8:	b083      	sub	sp, #12
 80150da:	af00      	add	r7, sp, #0
 80150dc:	6078      	str	r0, [r7, #4]
 80150de:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	683a      	ldr	r2, [r7, #0]
 80150e4:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	2200      	movs	r2, #0
 80150ea:	615a      	str	r2, [r3, #20]
    }
 80150ec:	bf00      	nop
 80150ee:	370c      	adds	r7, #12
 80150f0:	46bd      	mov	sp, r7
 80150f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f6:	4770      	bx	lr

080150f8 <_ZN26core_utils_FunctionPointerIvPvE6attachI24TWIPR_UART_CommunicationEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 80150f8:	b480      	push	{r7}
 80150fa:	b085      	sub	sp, #20
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	60f8      	str	r0, [r7, #12]
 8015100:	60b9      	str	r1, [r7, #8]
 8015102:	4639      	mov	r1, r7
 8015104:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	68ba      	ldr	r2, [r7, #8]
 801510c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	3304      	adds	r3, #4
 8015112:	461a      	mov	r2, r3
 8015114:	463b      	mov	r3, r7
 8015116:	e893 0003 	ldmia.w	r3, {r0, r1}
 801511a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	4a03      	ldr	r2, [pc, #12]	; (8015130 <_ZN26core_utils_FunctionPointerIvPvE6attachI24TWIPR_UART_CommunicationEEvPT_MS4_FvS0_E+0x38>)
 8015122:	615a      	str	r2, [r3, #20]
    }
 8015124:	bf00      	nop
 8015126:	3714      	adds	r7, #20
 8015128:	46bd      	mov	sp, r7
 801512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801512e:	4770      	bx	lr
 8015130:	08015411 	.word	0x08015411

08015134 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>:
	void startReceiveDMA() {
 8015134:	b580      	push	{r7, lr}
 8015136:	b082      	sub	sp, #8
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
		if (this->config.queues) {
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	7a1b      	ldrb	r3, [r3, #8]
 8015140:	2b00      	cmp	r3, #0
 8015142:	f000 80a7 	beq.w	8015294 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x160>
			HAL_UARTEx_ReceiveToIdle_DMA(this->huart,
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	68d8      	ldr	r0, [r3, #12]
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	f603 33fa 	addw	r3, r3, #3066	; 0xbfa
 8015150:	2280      	movs	r2, #128	; 0x80
 8015152:	4619      	mov	r1, r3
 8015154:	f7fa faf7 	bl	800f746 <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	68db      	ldr	r3, [r3, #12]
 801515c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	4a50      	ldr	r2, [pc, #320]	; (80152a4 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x170>)
 8015164:	4293      	cmp	r3, r2
 8015166:	d077      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	68db      	ldr	r3, [r3, #12]
 801516c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	4a4d      	ldr	r2, [pc, #308]	; (80152a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x174>)
 8015174:	4293      	cmp	r3, r2
 8015176:	d06f      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	68db      	ldr	r3, [r3, #12]
 801517c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	4a4a      	ldr	r2, [pc, #296]	; (80152ac <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x178>)
 8015184:	4293      	cmp	r3, r2
 8015186:	d067      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	68db      	ldr	r3, [r3, #12]
 801518c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	4a47      	ldr	r2, [pc, #284]	; (80152b0 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x17c>)
 8015194:	4293      	cmp	r3, r2
 8015196:	d05f      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	68db      	ldr	r3, [r3, #12]
 801519c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	4a44      	ldr	r2, [pc, #272]	; (80152b4 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x180>)
 80151a4:	4293      	cmp	r3, r2
 80151a6:	d057      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	68db      	ldr	r3, [r3, #12]
 80151ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	4a41      	ldr	r2, [pc, #260]	; (80152b8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x184>)
 80151b4:	4293      	cmp	r3, r2
 80151b6:	d04f      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	68db      	ldr	r3, [r3, #12]
 80151bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	4a3e      	ldr	r2, [pc, #248]	; (80152bc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x188>)
 80151c4:	4293      	cmp	r3, r2
 80151c6:	d047      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	68db      	ldr	r3, [r3, #12]
 80151cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	4a3b      	ldr	r2, [pc, #236]	; (80152c0 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x18c>)
 80151d4:	4293      	cmp	r3, r2
 80151d6:	d03f      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	68db      	ldr	r3, [r3, #12]
 80151dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	4a38      	ldr	r2, [pc, #224]	; (80152c4 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x190>)
 80151e4:	4293      	cmp	r3, r2
 80151e6:	d037      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	68db      	ldr	r3, [r3, #12]
 80151ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	4a35      	ldr	r2, [pc, #212]	; (80152c8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x194>)
 80151f4:	4293      	cmp	r3, r2
 80151f6:	d02f      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	68db      	ldr	r3, [r3, #12]
 80151fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	4a32      	ldr	r2, [pc, #200]	; (80152cc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x198>)
 8015204:	4293      	cmp	r3, r2
 8015206:	d027      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	68db      	ldr	r3, [r3, #12]
 801520c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	4a2f      	ldr	r2, [pc, #188]	; (80152d0 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x19c>)
 8015214:	4293      	cmp	r3, r2
 8015216:	d01f      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	68db      	ldr	r3, [r3, #12]
 801521c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	4a2c      	ldr	r2, [pc, #176]	; (80152d4 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a0>)
 8015224:	4293      	cmp	r3, r2
 8015226:	d017      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	68db      	ldr	r3, [r3, #12]
 801522c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	4a29      	ldr	r2, [pc, #164]	; (80152d8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a4>)
 8015234:	4293      	cmp	r3, r2
 8015236:	d00f      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	68db      	ldr	r3, [r3, #12]
 801523c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	4a26      	ldr	r2, [pc, #152]	; (80152dc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a8>)
 8015244:	4293      	cmp	r3, r2
 8015246:	d007      	beq.n	8015258 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	68db      	ldr	r3, [r3, #12]
 801524c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	4a23      	ldr	r2, [pc, #140]	; (80152e0 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1ac>)
 8015254:	4293      	cmp	r3, r2
 8015256:	d10e      	bne.n	8015276 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x142>
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	68db      	ldr	r3, [r3, #12]
 801525c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	681a      	ldr	r2, [r3, #0]
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	68db      	ldr	r3, [r3, #12]
 8015268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	f022 0208 	bic.w	r2, r2, #8
 8015272:	601a      	str	r2, [r3, #0]
	}
 8015274:	e011      	b.n	801529a <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x166>
			__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	68db      	ldr	r3, [r3, #12]
 801527a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	681a      	ldr	r2, [r3, #0]
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	68db      	ldr	r3, [r3, #12]
 8015286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	f022 0204 	bic.w	r2, r2, #4
 8015290:	601a      	str	r2, [r3, #0]
	}
 8015292:	e002      	b.n	801529a <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x166>
			core_ErrorHandler(CORE_ERROR_NOT_IMPLEMENTED);
 8015294:	2005      	movs	r0, #5
 8015296:	f00b fcea 	bl	8020c6e <_Z17core_ErrorHandleri>
	}
 801529a:	bf00      	nop
 801529c:	3708      	adds	r7, #8
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd80      	pop	{r7, pc}
 80152a2:	bf00      	nop
 80152a4:	40020010 	.word	0x40020010
 80152a8:	40020028 	.word	0x40020028
 80152ac:	40020040 	.word	0x40020040
 80152b0:	40020058 	.word	0x40020058
 80152b4:	40020070 	.word	0x40020070
 80152b8:	40020088 	.word	0x40020088
 80152bc:	400200a0 	.word	0x400200a0
 80152c0:	400200b8 	.word	0x400200b8
 80152c4:	40020410 	.word	0x40020410
 80152c8:	40020428 	.word	0x40020428
 80152cc:	40020440 	.word	0x40020440
 80152d0:	40020458 	.word	0x40020458
 80152d4:	40020470 	.word	0x40020470
 80152d8:	40020488 	.word	0x40020488
 80152dc:	400204a0 	.word	0x400204a0
 80152e0:	400204b8 	.word	0x400204b8

080152e4 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht>:
	void send(uint8_t *data, uint16_t len) {
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b086      	sub	sp, #24
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	60f8      	str	r0, [r7, #12]
 80152ec:	60b9      	str	r1, [r7, #8]
 80152ee:	4613      	mov	r3, r2
 80152f0:	80fb      	strh	r3, [r7, #6]
		if (this->state != CORE_HARDWARE_UART_STATE_RUN) {
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	791b      	ldrb	r3, [r3, #4]
 80152f6:	2b02      	cmp	r3, #2
 80152f8:	d002      	beq.n	8015300 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x1c>
			core_ErrorHandler(4);
 80152fa:	2004      	movs	r0, #4
 80152fc:	f00b fcb7 	bl	8020c6e <_Z17core_ErrorHandleri>
		if (this->config.mode != CORE_HARDWARE_UART_MODE_DMA
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	795b      	ldrb	r3, [r3, #5]
 8015304:	2b02      	cmp	r3, #2
 8015306:	d006      	beq.n	8015316 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x32>
				&& this->config.queues != 1) {
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	7a1b      	ldrb	r3, [r3, #8]
 801530c:	2b01      	cmp	r3, #1
 801530e:	d002      	beq.n	8015316 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x32>
			core_ErrorHandler(5);
 8015310:	2005      	movs	r0, #5
 8015312:	f00b fcac 	bl	8020c6e <_Z17core_ErrorHandleri>
		if (this->config.cobs_encode_tx) {
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	79db      	ldrb	r3, [r3, #7]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d022      	beq.n	8015364 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x80>
			uint8_t len_encode = cobsEncode(data, len, this->_tx_buffer.buffer);
 801531e:	88fb      	ldrh	r3, [r7, #6]
 8015320:	b2d9      	uxtb	r1, r3
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	f603 4382 	addw	r3, r3, #3202	; 0xc82
 8015328:	461a      	mov	r2, r3
 801532a:	68b8      	ldr	r0, [r7, #8]
 801532c:	f00b fbb5 	bl	8020a9a <_Z10cobsEncodePhhS_>
 8015330:	4603      	mov	r3, r0
 8015332:	75fb      	strb	r3, [r7, #23]
			this->_tx_buffer.buffer[len_encode] = 0x00;
 8015334:	7dfb      	ldrb	r3, [r7, #23]
 8015336:	68fa      	ldr	r2, [r7, #12]
 8015338:	4413      	add	r3, r2
 801533a:	2200      	movs	r2, #0
 801533c:	f883 2c82 	strb.w	r2, [r3, #3202]	; 0xc82
			this->_tx_buffer.len = len_encode + 1;
 8015340:	7dfb      	ldrb	r3, [r7, #23]
 8015342:	b29b      	uxth	r3, r3
 8015344:	3301      	adds	r3, #1
 8015346:	b29a      	uxth	r2, r3
 8015348:	68fb      	ldr	r3, [r7, #12]
 801534a:	f8a3 2c80 	strh.w	r2, [r3, #3200]	; 0xc80
			this->tx_queue.write(&this->_tx_buffer);
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	f503 62ad 	add.w	r2, r3, #1384	; 0x568
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	f603 437c 	addw	r3, r3, #3196	; 0xc7c
 801535a:	4619      	mov	r1, r3
 801535c:	4610      	mov	r0, r2
 801535e:	f000 f881 	bl	8015464 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>
 8015362:	e009      	b.n	8015378 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x94>
			this->tx_queue.write(data, (uint8_t) len);
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801536a:	88fa      	ldrh	r2, [r7, #6]
 801536c:	b2d2      	uxtb	r2, r2
 801536e:	b292      	uxth	r2, r2
 8015370:	68b9      	ldr	r1, [r7, #8]
 8015372:	4618      	mov	r0, r3
 8015374:	f000 f8b2 	bl	80154dc <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht>
		this->flushTx();
 8015378:	68f8      	ldr	r0, [r7, #12]
 801537a:	f000 f8e8 	bl	801554e <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv>
	}
 801537e:	bf00      	nop
 8015380:	3718      	adds	r7, #24
 8015382:	46bd      	mov	sp, r7
 8015384:	bd80      	pop	{r7, pc}

08015386 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_>:
    R call(A1 a) {
 8015386:	b580      	push	{r7, lr}
 8015388:	b082      	sub	sp, #8
 801538a:	af00      	add	r7, sp, #0
 801538c:	6078      	str	r0, [r7, #4]
 801538e:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	695b      	ldr	r3, [r3, #20]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d108      	bne.n	80153aa <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x24>
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d004      	beq.n	80153aa <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x24>
           return _p.function(a);
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	6838      	ldr	r0, [r7, #0]
 80153a6:	4798      	blx	r3
 80153a8:	e011      	b.n	80153ce <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x48>
        } else if (_membercaller && _p.object) {
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	695b      	ldr	r3, [r3, #20]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d00c      	beq.n	80153cc <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x46>
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d008      	beq.n	80153cc <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x46>
           return _membercaller(_p.object, _member, a);
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	695b      	ldr	r3, [r3, #20]
 80153be:	687a      	ldr	r2, [r7, #4]
 80153c0:	6810      	ldr	r0, [r2, #0]
 80153c2:	687a      	ldr	r2, [r7, #4]
 80153c4:	1d11      	adds	r1, r2, #4
 80153c6:	683a      	ldr	r2, [r7, #0]
 80153c8:	4798      	blx	r3
 80153ca:	e000      	b.n	80153ce <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x48>
        return (R)0;
 80153cc:	bf00      	nop
    }
 80153ce:	3708      	adds	r7, #8
 80153d0:	46bd      	mov	sp, r7
 80153d2:	bd80      	pop	{r7, pc}

080153d4 <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 80153d4:	b480      	push	{r7}
 80153d6:	b085      	sub	sp, #20
 80153d8:	af00      	add	r7, sp, #0
 80153da:	60f8      	str	r0, [r7, #12]
 80153dc:	60b9      	str	r1, [r7, #8]
 80153de:	4639      	mov	r1, r7
 80153e0:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	68ba      	ldr	r2, [r7, #8]
 80153e8:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	3304      	adds	r3, #4
 80153ee:	461a      	mov	r2, r3
 80153f0:	463b      	mov	r3, r7
 80153f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80153f6:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	4a03      	ldr	r2, [pc, #12]	; (801540c <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE+0x38>)
 80153fe:	615a      	str	r2, [r3, #20]
    }
 8015400:	bf00      	nop
 8015402:	3714      	adds	r7, #20
 8015404:	46bd      	mov	sp, r7
 8015406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540a:	4770      	bx	lr
 801540c:	0801557d 	.word	0x0801557d

08015410 <_ZN26core_utils_FunctionPointerIvPvE12membercallerI24TWIPR_UART_CommunicationEEvS0_PjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8015410:	b580      	push	{r7, lr}
 8015412:	b086      	sub	sp, #24
 8015414:	af00      	add	r7, sp, #0
 8015416:	60f8      	str	r0, [r7, #12]
 8015418:	60b9      	str	r1, [r7, #8]
 801541a:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8015420:	68bb      	ldr	r3, [r7, #8]
 8015422:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8015424:	693b      	ldr	r3, [r7, #16]
 8015426:	685b      	ldr	r3, [r3, #4]
 8015428:	105b      	asrs	r3, r3, #1
 801542a:	461a      	mov	r2, r3
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	1898      	adds	r0, r3, r2
 8015430:	693b      	ldr	r3, [r7, #16]
 8015432:	685b      	ldr	r3, [r3, #4]
 8015434:	f003 0301 	and.w	r3, r3, #1
 8015438:	2b00      	cmp	r3, #0
 801543a:	d00b      	beq.n	8015454 <_ZN26core_utils_FunctionPointerIvPvE12membercallerI24TWIPR_UART_CommunicationEEvS0_PjS0_+0x44>
 801543c:	693b      	ldr	r3, [r7, #16]
 801543e:	685b      	ldr	r3, [r3, #4]
 8015440:	105b      	asrs	r3, r3, #1
 8015442:	461a      	mov	r2, r3
 8015444:	697b      	ldr	r3, [r7, #20]
 8015446:	4413      	add	r3, r2
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	693a      	ldr	r2, [r7, #16]
 801544c:	6812      	ldr	r2, [r2, #0]
 801544e:	4413      	add	r3, r2
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	e001      	b.n	8015458 <_ZN26core_utils_FunctionPointerIvPvE12membercallerI24TWIPR_UART_CommunicationEEvS0_PjS0_+0x48>
 8015454:	693b      	ldr	r3, [r7, #16]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	6879      	ldr	r1, [r7, #4]
 801545a:	4798      	blx	r3
 801545c:	bf00      	nop
    }
 801545e:	3718      	adds	r7, #24
 8015460:	46bd      	mov	sp, r7
 8015462:	bd80      	pop	{r7, pc}

08015464 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>:

	uint8_t overflow;

	uint8_t write(Buffer *buffer) {
 8015464:	b580      	push	{r7, lr}
 8015466:	b084      	sub	sp, #16
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
 801546c:	6039      	str	r1, [r7, #0]
		for (int i = 0; i < buffer->len; i++) {
 801546e:	2300      	movs	r3, #0
 8015470:	60fb      	str	r3, [r7, #12]
 8015472:	e016      	b.n	80154a2 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer+0x3e>
			this->buffers[this->idx_write].data_ptr[i] = buffer->data_ptr[i];
 8015474:	683b      	ldr	r3, [r7, #0]
 8015476:	681a      	ldr	r2, [r3, #0]
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	441a      	add	r2, r3
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f893 3555 	ldrb.w	r3, [r3, #1365]	; 0x555
 8015482:	4618      	mov	r0, r3
 8015484:	6879      	ldr	r1, [r7, #4]
 8015486:	4603      	mov	r3, r0
 8015488:	011b      	lsls	r3, r3, #4
 801548a:	4403      	add	r3, r0
 801548c:	00db      	lsls	r3, r3, #3
 801548e:	440b      	add	r3, r1
 8015490:	3304      	adds	r3, #4
 8015492:	6819      	ldr	r1, [r3, #0]
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	440b      	add	r3, r1
 8015498:	7812      	ldrb	r2, [r2, #0]
 801549a:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < buffer->len; i++) {
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	3301      	adds	r3, #1
 80154a0:	60fb      	str	r3, [r7, #12]
 80154a2:	683b      	ldr	r3, [r7, #0]
 80154a4:	889b      	ldrh	r3, [r3, #4]
 80154a6:	461a      	mov	r2, r3
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	4293      	cmp	r3, r2
 80154ac:	dbe2      	blt.n	8015474 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer+0x10>
		}

		this->buffers[this->idx_write].len = buffer->len;
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	f893 3555 	ldrb.w	r3, [r3, #1365]	; 0x555
 80154b4:	4619      	mov	r1, r3
 80154b6:	683b      	ldr	r3, [r7, #0]
 80154b8:	8898      	ldrh	r0, [r3, #4]
 80154ba:	687a      	ldr	r2, [r7, #4]
 80154bc:	460b      	mov	r3, r1
 80154be:	011b      	lsls	r3, r3, #4
 80154c0:	440b      	add	r3, r1
 80154c2:	00db      	lsls	r3, r3, #3
 80154c4:	4413      	add	r3, r2
 80154c6:	3308      	adds	r3, #8
 80154c8:	4602      	mov	r2, r0
 80154ca:	801a      	strh	r2, [r3, #0]
		return this->inc_write();
 80154cc:	6878      	ldr	r0, [r7, #4]
 80154ce:	f000 f87e 	bl	80155ce <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>
 80154d2:	4603      	mov	r3, r0
	}
 80154d4:	4618      	mov	r0, r3
 80154d6:	3710      	adds	r7, #16
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd80      	pop	{r7, pc}

080154dc <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht>:

	uint8_t write(uint8_t *buffer, uint16_t len) {
 80154dc:	b580      	push	{r7, lr}
 80154de:	b086      	sub	sp, #24
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	60f8      	str	r0, [r7, #12]
 80154e4:	60b9      	str	r1, [r7, #8]
 80154e6:	4613      	mov	r3, r2
 80154e8:	80fb      	strh	r3, [r7, #6]
		for (int i = 0; i < len; i++) {
 80154ea:	2300      	movs	r3, #0
 80154ec:	617b      	str	r3, [r7, #20]
 80154ee:	e015      	b.n	801551c <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht+0x40>
			this->buffers[this->idx_write].data_ptr[i] = buffer[i];
 80154f0:	697b      	ldr	r3, [r7, #20]
 80154f2:	68ba      	ldr	r2, [r7, #8]
 80154f4:	441a      	add	r2, r3
 80154f6:	68fb      	ldr	r3, [r7, #12]
 80154f8:	f893 3555 	ldrb.w	r3, [r3, #1365]	; 0x555
 80154fc:	4618      	mov	r0, r3
 80154fe:	68f9      	ldr	r1, [r7, #12]
 8015500:	4603      	mov	r3, r0
 8015502:	011b      	lsls	r3, r3, #4
 8015504:	4403      	add	r3, r0
 8015506:	00db      	lsls	r3, r3, #3
 8015508:	440b      	add	r3, r1
 801550a:	3304      	adds	r3, #4
 801550c:	6819      	ldr	r1, [r3, #0]
 801550e:	697b      	ldr	r3, [r7, #20]
 8015510:	440b      	add	r3, r1
 8015512:	7812      	ldrb	r2, [r2, #0]
 8015514:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++) {
 8015516:	697b      	ldr	r3, [r7, #20]
 8015518:	3301      	adds	r3, #1
 801551a:	617b      	str	r3, [r7, #20]
 801551c:	88fb      	ldrh	r3, [r7, #6]
 801551e:	697a      	ldr	r2, [r7, #20]
 8015520:	429a      	cmp	r2, r3
 8015522:	dbe5      	blt.n	80154f0 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht+0x14>
		}
		this->buffers[this->idx_write].len = len;
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	f893 3555 	ldrb.w	r3, [r3, #1365]	; 0x555
 801552a:	4619      	mov	r1, r3
 801552c:	68fa      	ldr	r2, [r7, #12]
 801552e:	460b      	mov	r3, r1
 8015530:	011b      	lsls	r3, r3, #4
 8015532:	440b      	add	r3, r1
 8015534:	00db      	lsls	r3, r3, #3
 8015536:	4413      	add	r3, r2
 8015538:	3308      	adds	r3, #8
 801553a:	88fa      	ldrh	r2, [r7, #6]
 801553c:	801a      	strh	r2, [r3, #0]
		return this->inc_write();
 801553e:	68f8      	ldr	r0, [r7, #12]
 8015540:	f000 f845 	bl	80155ce <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>
 8015544:	4603      	mov	r3, r0
	}
 8015546:	4618      	mov	r0, r3
 8015548:	3718      	adds	r7, #24
 801554a:	46bd      	mov	sp, r7
 801554c:	bd80      	pop	{r7, pc}

0801554e <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv>:
	uint8_t _tx_encode_buf[size_buffers + 10];
	core_utils_Buffer<size_buffers> _rx_buffer;
	core_utils_Buffer<size_buffers> _tx_buffer;

	/* ------------------------------------------------------------------------- */
	void flushTx() {
 801554e:	b580      	push	{r7, lr}
 8015550:	b082      	sub	sp, #8
 8015552:	af00      	add	r7, sp, #0
 8015554:	6078      	str	r0, [r7, #4]
		while (!(this->huart->gState == HAL_UART_STATE_READY)) {
 8015556:	bf00      	nop
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	68db      	ldr	r3, [r3, #12]
 801555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015560:	2b20      	cmp	r3, #32
 8015562:	bf14      	ite	ne
 8015564:	2301      	movne	r3, #1
 8015566:	2300      	moveq	r3, #0
 8015568:	b2db      	uxtb	r3, r3
 801556a:	2b00      	cmp	r3, #0
 801556c:	d1f4      	bne.n	8015558 <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv+0xa>

		}
		this->sendNextBuffer();
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f000 f859 	bl	8015626 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv>
	}
 8015574:	bf00      	nop
 8015576:	3708      	adds	r7, #8
 8015578:	46bd      	mov	sp, r7
 801557a:	bd80      	pop	{r7, pc}

0801557c <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 801557c:	b580      	push	{r7, lr}
 801557e:	b084      	sub	sp, #16
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
 8015584:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 801558a:	683b      	ldr	r3, [r7, #0]
 801558c:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 801558e:	68bb      	ldr	r3, [r7, #8]
 8015590:	685b      	ldr	r3, [r3, #4]
 8015592:	105b      	asrs	r3, r3, #1
 8015594:	461a      	mov	r2, r3
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	1899      	adds	r1, r3, r2
 801559a:	68bb      	ldr	r3, [r7, #8]
 801559c:	685b      	ldr	r3, [r3, #4]
 801559e:	f003 0301 	and.w	r3, r3, #1
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d00b      	beq.n	80155be <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj+0x42>
 80155a6:	68bb      	ldr	r3, [r7, #8]
 80155a8:	685b      	ldr	r3, [r3, #4]
 80155aa:	105b      	asrs	r3, r3, #1
 80155ac:	461a      	mov	r2, r3
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	4413      	add	r3, r2
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	68ba      	ldr	r2, [r7, #8]
 80155b6:	6812      	ldr	r2, [r2, #0]
 80155b8:	4413      	add	r3, r2
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	e001      	b.n	80155c2 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj+0x46>
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	4608      	mov	r0, r1
 80155c4:	4798      	blx	r3
 80155c6:	bf00      	nop
    }
 80155c8:	3710      	adds	r7, #16
 80155ca:	46bd      	mov	sp, r7
 80155cc:	bd80      	pop	{r7, pc}

080155ce <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>:
	core_utils_Buffer<size> buffers[num];  // Array of buffers
	const uint8_t num_buffers = num; // Number of buffers for the queue
	uint8_t idx_write;
	uint8_t idx_read;

	uint8_t inc_write() {
 80155ce:	b480      	push	{r7}
 80155d0:	b083      	sub	sp, #12
 80155d2:	af00      	add	r7, sp, #0
 80155d4:	6078      	str	r0, [r7, #4]
		this->idx_write++;
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	f893 3555 	ldrb.w	r3, [r3, #1365]	; 0x555
 80155dc:	3301      	adds	r3, #1
 80155de:	b2da      	uxtb	r2, r3
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	f883 2555 	strb.w	r2, [r3, #1365]	; 0x555

		if (this->idx_write == this->num_buffers) {
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	f893 2555 	ldrb.w	r2, [r3, #1365]	; 0x555
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 80155f2:	429a      	cmp	r2, r3
 80155f4:	d103      	bne.n	80155fe <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x30>
			this->idx_write = 0;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	2200      	movs	r2, #0
 80155fa:	f883 2555 	strb.w	r2, [r3, #1365]	; 0x555
		}
		if (this->idx_write == this->idx_read) {
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	f893 2555 	ldrb.w	r2, [r3, #1365]	; 0x555
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	f893 3556 	ldrb.w	r3, [r3, #1366]	; 0x556
 801560a:	429a      	cmp	r2, r3
 801560c:	d104      	bne.n	8015618 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x4a>
			this->overflow = 1;
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	2201      	movs	r2, #1
 8015612:	701a      	strb	r2, [r3, #0]
			return 0;
 8015614:	2300      	movs	r3, #0
 8015616:	e000      	b.n	801561a <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x4c>
		} else {
			return 1;
 8015618:	2301      	movs	r3, #1
		}
	}
 801561a:	4618      	mov	r0, r3
 801561c:	370c      	adds	r7, #12
 801561e:	46bd      	mov	sp, r7
 8015620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015624:	4770      	bx	lr

08015626 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv>:

	/* ------------------------------------------------------------------------- */
	void sendNextBuffer() {
 8015626:	b580      	push	{r7, lr}
 8015628:	b084      	sub	sp, #16
 801562a:	af00      	add	r7, sp, #0
 801562c:	6078      	str	r0, [r7, #4]
		if (!this->tx_queue.available()) {
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 8015634:	4618      	mov	r0, r3
 8015636:	f000 f82f 	bl	8015698 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 801563a:	4603      	mov	r3, r0
 801563c:	2b00      	cmp	r3, #0
 801563e:	bf0c      	ite	eq
 8015640:	2301      	moveq	r3, #1
 8015642:	2300      	movne	r3, #0
 8015644:	b2db      	uxtb	r3, r3
 8015646:	2b00      	cmp	r3, #0
 8015648:	d120      	bne.n	801568c <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x66>
			return;
		}

		if (this->huart->gState != HAL_UART_STATE_READY) {
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	68db      	ldr	r3, [r3, #12]
 801564e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015652:	2b20      	cmp	r3, #32
 8015654:	bf14      	ite	ne
 8015656:	2301      	movne	r3, #1
 8015658:	2300      	moveq	r3, #0
 801565a:	b2db      	uxtb	r3, r3
 801565c:	2b00      	cmp	r3, #0
 801565e:	d117      	bne.n	8015690 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6a>
			return;
		}

		uint8_t *buffer = NULL;
 8015660:	2300      	movs	r3, #0
 8015662:	60bb      	str	r3, [r7, #8]
		uint8_t len = this->tx_queue.read(&buffer);
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	f503 63ad 	add.w	r3, r3, #1384	; 0x568
 801566a:	f107 0208 	add.w	r2, r7, #8
 801566e:	4611      	mov	r1, r2
 8015670:	4618      	mov	r0, r3
 8015672:	f000 f838 	bl	80156e6 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh>
 8015676:	4603      	mov	r3, r0
 8015678:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit_DMA(this->huart, buffer, len);
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	68db      	ldr	r3, [r3, #12]
 801567e:	68b9      	ldr	r1, [r7, #8]
 8015680:	7bfa      	ldrb	r2, [r7, #15]
 8015682:	b292      	uxth	r2, r2
 8015684:	4618      	mov	r0, r3
 8015686:	f7f6 fd3b 	bl	800c100 <HAL_UART_Transmit_DMA>
 801568a:	e002      	b.n	8015692 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6c>
			return;
 801568c:	bf00      	nop
 801568e:	e000      	b.n	8015692 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6c>
			return;
 8015690:	bf00      	nop
	}
 8015692:	3710      	adds	r7, #16
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}

08015698 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>:
	int8_t available() {
 8015698:	b480      	push	{r7}
 801569a:	b085      	sub	sp, #20
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
		if (this->overflow) {
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	781b      	ldrb	r3, [r3, #0]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d002      	beq.n	80156ae <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x16>
			return -1;
 80156a8:	f04f 33ff 	mov.w	r3, #4294967295
 80156ac:	e015      	b.n	80156da <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x42>
		int8_t available = this->idx_write - this->idx_read;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	f893 2555 	ldrb.w	r2, [r3, #1365]	; 0x555
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	f893 3556 	ldrb.w	r3, [r3, #1366]	; 0x556
 80156ba:	1ad3      	subs	r3, r2, r3
 80156bc:	b2db      	uxtb	r3, r3
 80156be:	73fb      	strb	r3, [r7, #15]
		if (available < 0) {
 80156c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	da06      	bge.n	80156d6 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x3e>
			available += this->num_buffers;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f893 2554 	ldrb.w	r2, [r3, #1364]	; 0x554
 80156ce:	7bfb      	ldrb	r3, [r7, #15]
 80156d0:	4413      	add	r3, r2
 80156d2:	b2db      	uxtb	r3, r3
 80156d4:	73fb      	strb	r3, [r7, #15]
		return available;
 80156d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
	}
 80156da:	4618      	mov	r0, r3
 80156dc:	3714      	adds	r7, #20
 80156de:	46bd      	mov	sp, r7
 80156e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e4:	4770      	bx	lr

080156e6 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh>:
	uint8_t read(uint8_t **buffer) {
 80156e6:	b580      	push	{r7, lr}
 80156e8:	b084      	sub	sp, #16
 80156ea:	af00      	add	r7, sp, #0
 80156ec:	6078      	str	r0, [r7, #4]
 80156ee:	6039      	str	r1, [r7, #0]
		if (this->available() < 1) {
 80156f0:	6878      	ldr	r0, [r7, #4]
 80156f2:	f7ff ffd1 	bl	8015698 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 80156f6:	4603      	mov	r3, r0
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	bfd4      	ite	le
 80156fc:	2301      	movle	r3, #1
 80156fe:	2300      	movgt	r3, #0
 8015700:	b2db      	uxtb	r3, r3
 8015702:	2b00      	cmp	r3, #0
 8015704:	d001      	beq.n	801570a <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh+0x24>
			return 0;
 8015706:	2300      	movs	r3, #0
 8015708:	e01e      	b.n	8015748 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh+0x62>
		*buffer = &this->buffers[this->idx_read].data_ptr[0];
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	f893 3556 	ldrb.w	r3, [r3, #1366]	; 0x556
 8015710:	4619      	mov	r1, r3
 8015712:	687a      	ldr	r2, [r7, #4]
 8015714:	460b      	mov	r3, r1
 8015716:	011b      	lsls	r3, r3, #4
 8015718:	440b      	add	r3, r1
 801571a:	00db      	lsls	r3, r3, #3
 801571c:	4413      	add	r3, r2
 801571e:	3304      	adds	r3, #4
 8015720:	681a      	ldr	r2, [r3, #0]
 8015722:	683b      	ldr	r3, [r7, #0]
 8015724:	601a      	str	r2, [r3, #0]
		uint8_t len = this->buffers[this->idx_read].len;
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	f893 3556 	ldrb.w	r3, [r3, #1366]	; 0x556
 801572c:	4619      	mov	r1, r3
 801572e:	687a      	ldr	r2, [r7, #4]
 8015730:	460b      	mov	r3, r1
 8015732:	011b      	lsls	r3, r3, #4
 8015734:	440b      	add	r3, r1
 8015736:	00db      	lsls	r3, r3, #3
 8015738:	4413      	add	r3, r2
 801573a:	3308      	adds	r3, #8
 801573c:	881b      	ldrh	r3, [r3, #0]
 801573e:	73fb      	strb	r3, [r7, #15]
		this->inc_read();
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f000 f805 	bl	8015750 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>
		return len;
 8015746:	7bfb      	ldrb	r3, [r7, #15]
	}
 8015748:	4618      	mov	r0, r3
 801574a:	3710      	adds	r7, #16
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}

08015750 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>:
	uint8_t inc_read() {
 8015750:	b480      	push	{r7}
 8015752:	b083      	sub	sp, #12
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
		this->idx_read++;
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	f893 3556 	ldrb.w	r3, [r3, #1366]	; 0x556
 801575e:	3301      	adds	r3, #1
 8015760:	b2da      	uxtb	r2, r3
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	f883 2556 	strb.w	r2, [r3, #1366]	; 0x556

		if (this->idx_read == this->num_buffers) {
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f893 2556 	ldrb.w	r2, [r3, #1366]	; 0x556
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	f893 3554 	ldrb.w	r3, [r3, #1364]	; 0x554
 8015774:	429a      	cmp	r2, r3
 8015776:	d103      	bne.n	8015780 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv+0x30>
			this->idx_read = 0;
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	2200      	movs	r2, #0
 801577c:	f883 2556 	strb.w	r2, [r3, #1366]	; 0x556
		}
		return 1;
 8015780:	2301      	movs	r3, #1
	}
 8015782:	4618      	mov	r0, r3
 8015784:	370c      	adds	r7, #12
 8015786:	46bd      	mov	sp, r7
 8015788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578c:	4770      	bx	lr
	...

08015790 <_Z41__static_initialization_and_destruction_0ii>:
 8015790:	b580      	push	{r7, lr}
 8015792:	b082      	sub	sp, #8
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
 8015798:	6039      	str	r1, [r7, #0]
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2b01      	cmp	r3, #1
 801579e:	d10a      	bne.n	80157b6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80157a0:	683b      	ldr	r3, [r7, #0]
 80157a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80157a6:	4293      	cmp	r3, r2
 80157a8:	d105      	bne.n	80157b6 <_Z41__static_initialization_and_destruction_0ii+0x26>
static core_comm_SerialMessage_memory<128> incoming_msg;
 80157aa:	4805      	ldr	r0, [pc, #20]	; (80157c0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80157ac:	f7fe ff36 	bl	801461c <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
static core_comm_SerialMessage_memory<128> outgoing_msg;
 80157b0:	4804      	ldr	r0, [pc, #16]	; (80157c4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80157b2:	f7fe ff33 	bl	801461c <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
}
 80157b6:	bf00      	nop
 80157b8:	3708      	adds	r7, #8
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bd80      	pop	{r7, pc}
 80157be:	bf00      	nop
 80157c0:	240152e4 	.word	0x240152e4
 80157c4:	24015374 	.word	0x24015374

080157c8 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv>:
	uint8_t rx_function() {
 80157c8:	b580      	push	{r7, lr}
 80157ca:	b086      	sub	sp, #24
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
		uint8_t num_messages = 0;
 80157d0:	2300      	movs	r3, #0
 80157d2:	75fb      	strb	r3, [r7, #23]
		while (this->_uart.available() > 0) {
 80157d4:	e04d      	b.n	8015872 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xaa>
			Buffer *buffer = this->_uart.rx_queue.read();
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 80157dc:	4618      	mov	r0, r3
 80157de:	f000 f8e4 	bl	80159aa <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv>
 80157e2:	6138      	str	r0, [r7, #16]
			if (this->config.use_protocol) {
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	7a5b      	ldrb	r3, [r3, #9]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d03c      	beq.n	8015866 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x9e>
				uint8_t correct_message = this->_rx_msg.decode(buffer);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 80157f2:	6939      	ldr	r1, [r7, #16]
 80157f4:	4618      	mov	r0, r3
 80157f6:	f008 f81a 	bl	801d82e <_ZN23core_comm_SerialMessage6decodeEP6Buffer>
 80157fa:	4603      	mov	r3, r0
 80157fc:	73fb      	strb	r3, [r7, #15]
				if (!correct_message) {
 80157fe:	7bfb      	ldrb	r3, [r7, #15]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d100      	bne.n	8015806 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x3e>
					continue;
 8015804:	e035      	b.n	8015872 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xaa>
				if (this->config.use_queue) {
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	7a9b      	ldrb	r3, [r3, #10]
 801580a:	2b00      	cmp	r3, #0
 801580c:	d009      	beq.n	8015822 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x5a>
					this->rx_queue.write(&_rx_msg);
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	f103 020c 	add.w	r2, r3, #12
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 801581a:	4619      	mov	r1, r3
 801581c:	4610      	mov	r0, r2
 801581e:	f000 f8e9 	bl	80159f4 <_ZN22core_comm_MessageQueueILi10ELi128EE5writeEP23core_comm_SerialMessage>
				if (this->_callbacks.rx.registered) {
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015828:	f893 3348 	ldrb.w	r3, [r3, #840]	; 0x348
 801582c:	2b00      	cmp	r3, #0
 801582e:	d007      	beq.n	8015840 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x78>
					this->_callbacks.rx.call(this);
 8015830:	687a      	ldr	r2, [r7, #4]
 8015832:	f241 3344 	movw	r3, #4932	; 0x1344
 8015836:	4413      	add	r3, r2
 8015838:	6879      	ldr	r1, [r7, #4]
 801583a:	4618      	mov	r0, r3
 801583c:	f000 f898 	bl	8015970 <_ZN19core_utils_CallbackIvPvE4callES0_>
				if (this->_callbacks.rx_msg.registered) {
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015846:	f893 3368 	ldrb.w	r3, [r3, #872]	; 0x368
 801584a:	2b00      	cmp	r3, #0
 801584c:	d00e      	beq.n	801586c <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xa4>
					this->_callbacks.rx_msg.call(&_rx_msg);
 801584e:	687a      	ldr	r2, [r7, #4]
 8015850:	f241 3364 	movw	r3, #4964	; 0x1364
 8015854:	4413      	add	r3, r2
 8015856:	687a      	ldr	r2, [r7, #4]
 8015858:	f502 62b6 	add.w	r2, r2, #1456	; 0x5b0
 801585c:	4611      	mov	r1, r2
 801585e:	4618      	mov	r0, r3
 8015860:	f7ff f932 	bl	8014ac8 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
 8015864:	e002      	b.n	801586c <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xa4>
					nop();
 8015866:	f7fe fca3 	bl	80141b0 <_Z3nopv>
 801586a:	e7fc      	b.n	8015866 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x9e>
			num_messages++;
 801586c:	7dfb      	ldrb	r3, [r7, #23]
 801586e:	3301      	adds	r3, #1
 8015870:	75fb      	strb	r3, [r7, #23]
		while (this->_uart.available() > 0) {
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 8015878:	4618      	mov	r0, r3
 801587a:	f000 f888 	bl	801598e <_ZN18core_hardware_UARTILi10ELi128EE9availableEv>
 801587e:	4603      	mov	r3, r0
 8015880:	2b00      	cmp	r3, #0
 8015882:	bfcc      	ite	gt
 8015884:	2301      	movgt	r3, #1
 8015886:	2300      	movle	r3, #0
 8015888:	b2db      	uxtb	r3, r3
 801588a:	2b00      	cmp	r3, #0
 801588c:	d1a3      	bne.n	80157d6 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xe>
		return num_messages;
 801588e:	7dfb      	ldrb	r3, [r7, #23]
	}
 8015890:	4618      	mov	r0, r3
 8015892:	3718      	adds	r7, #24
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}

08015898 <_ZN23core_comm_UartInterfaceILi10ELi128EE9setTaskIDEP19tskTaskControlBlock>:
	void setTaskID(TaskHandle_t task) {
 8015898:	b480      	push	{r7}
 801589a:	b083      	sub	sp, #12
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
 80158a0:	6039      	str	r1, [r7, #0]
		this->_task_id = task;
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80158a8:	461a      	mov	r2, r3
 80158aa:	683b      	ldr	r3, [r7, #0]
 80158ac:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
	}
 80158b0:	bf00      	nop
 80158b2:	370c      	adds	r7, #12
 80158b4:	46bd      	mov	sp, r7
 80158b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158ba:	4770      	bx	lr

080158bc <_ZN23core_comm_UartInterfaceILi10ELi128EE9getTaskIDEv>:
	TaskHandle_t getTaskID() {
 80158bc:	b480      	push	{r7}
 80158be:	b083      	sub	sp, #12
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
		return this->_task_id;
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80158ca:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
	}
 80158ce:	4618      	mov	r0, r3
 80158d0:	370c      	adds	r7, #12
 80158d2:	46bd      	mov	sp, r7
 80158d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d8:	4770      	bx	lr

080158da <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt>:
	void rxFunction(uint16_t len) {
 80158da:	b580      	push	{r7, lr}
 80158dc:	b082      	sub	sp, #8
 80158de:	af00      	add	r7, sp, #0
 80158e0:	6078      	str	r0, [r7, #4]
 80158e2:	460b      	mov	r3, r1
 80158e4:	807b      	strh	r3, [r7, #2]
		if (len == 0) {
 80158e6:	887b      	ldrh	r3, [r7, #2]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d031      	beq.n	8015950 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x76>
		if (this->config.cobs_encode_rx) {
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	799b      	ldrb	r3, [r3, #6]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d00c      	beq.n	801590e <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x34>
			len = cobsDecodeInPlace(this->_rx_buffer.buffer, len - 1);
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f603 32fa 	addw	r2, r3, #3066	; 0xbfa
 80158fa:	887b      	ldrh	r3, [r7, #2]
 80158fc:	b2db      	uxtb	r3, r3
 80158fe:	3b01      	subs	r3, #1
 8015900:	b2db      	uxtb	r3, r3
 8015902:	4619      	mov	r1, r3
 8015904:	4610      	mov	r0, r2
 8015906:	f00b f95d 	bl	8020bc4 <_Z17cobsDecodeInPlacePhh>
 801590a:	4603      	mov	r3, r0
 801590c:	807b      	strh	r3, [r7, #2]
		this->_rx_buffer.len = len;
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	887a      	ldrh	r2, [r7, #2]
 8015912:	f8a3 2bf8 	strh.w	r2, [r3, #3064]	; 0xbf8
		if (this->config.queues) {
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	7a1b      	ldrb	r3, [r3, #8]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d009      	beq.n	8015932 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x58>
			this->rx_queue.write(&this->_rx_buffer);
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	f103 0210 	add.w	r2, r3, #16
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	f603 33f4 	addw	r3, r3, #3060	; 0xbf4
 801592a:	4619      	mov	r1, r3
 801592c:	4610      	mov	r0, r2
 801592e:	f7ff fd99 	bl	8015464 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>
		if (this->_callbacks.rx.registered) {
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	f893 3ac4 	ldrb.w	r3, [r3, #2756]	; 0xac4
 8015938:	2b00      	cmp	r3, #0
 801593a:	d005      	beq.n	8015948 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x6e>
			this->_callbacks.rx.call();
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f503 632c 	add.w	r3, r3, #2752	; 0xac0
 8015942:	4618      	mov	r0, r3
 8015944:	f7fe fa95 	bl	8013e72 <_ZN19core_utils_CallbackIvvE4callEv>
		this->startReceiveDMA();
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	f7ff fbf3 	bl	8015134 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>
 801594e:	e000      	b.n	8015952 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x78>
			return;
 8015950:	bf00      	nop
	}
 8015952:	3708      	adds	r7, #8
 8015954:	46bd      	mov	sp, r7
 8015956:	bd80      	pop	{r7, pc}

08015958 <_ZN18core_hardware_UARTILi10ELi128EE9get_huartEv>:
	UART_HandleTypeDef* get_huart() {
 8015958:	b480      	push	{r7}
 801595a:	b083      	sub	sp, #12
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
		return this->huart;
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	68db      	ldr	r3, [r3, #12]
	}
 8015964:	4618      	mov	r0, r3
 8015966:	370c      	adds	r7, #12
 8015968:	46bd      	mov	sp, r7
 801596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801596e:	4770      	bx	lr

08015970 <_ZN19core_utils_CallbackIvPvE4callES0_>:
	R call(A argument){
 8015970:	b580      	push	{r7, lr}
 8015972:	b082      	sub	sp, #8
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
 8015978:	6039      	str	r1, [r7, #0]
		return this->_fp(argument);
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	3308      	adds	r3, #8
 801597e:	6839      	ldr	r1, [r7, #0]
 8015980:	4618      	mov	r0, r3
 8015982:	f000 f852 	bl	8015a2a <_ZN26core_utils_FunctionPointerIvPvEclES0_>
 8015986:	bf00      	nop
	}
 8015988:	3708      	adds	r7, #8
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}

0801598e <_ZN18core_hardware_UARTILi10ELi128EE9availableEv>:
	int8_t available() {
 801598e:	b580      	push	{r7, lr}
 8015990:	b082      	sub	sp, #8
 8015992:	af00      	add	r7, sp, #0
 8015994:	6078      	str	r0, [r7, #4]
		return this->rx_queue.available();
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	3310      	adds	r3, #16
 801599a:	4618      	mov	r0, r3
 801599c:	f7ff fe7c 	bl	8015698 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 80159a0:	4603      	mov	r3, r0
	}
 80159a2:	4618      	mov	r0, r3
 80159a4:	3708      	adds	r7, #8
 80159a6:	46bd      	mov	sp, r7
 80159a8:	bd80      	pop	{r7, pc}

080159aa <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv>:
	Buffer* read() {
 80159aa:	b580      	push	{r7, lr}
 80159ac:	b084      	sub	sp, #16
 80159ae:	af00      	add	r7, sp, #0
 80159b0:	6078      	str	r0, [r7, #4]
		if (this->available() < 1) {
 80159b2:	6878      	ldr	r0, [r7, #4]
 80159b4:	f7ff fe70 	bl	8015698 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 80159b8:	4603      	mov	r3, r0
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	bfd4      	ite	le
 80159be:	2301      	movle	r3, #1
 80159c0:	2300      	movgt	r3, #0
 80159c2:	b2db      	uxtb	r3, r3
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d001      	beq.n	80159cc <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv+0x22>
			return 0;
 80159c8:	2300      	movs	r3, #0
 80159ca:	e00f      	b.n	80159ec <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv+0x42>
		Buffer *buffer = &this->buffers[this->idx_read];
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	f893 3556 	ldrb.w	r3, [r3, #1366]	; 0x556
 80159d2:	461a      	mov	r2, r3
 80159d4:	4613      	mov	r3, r2
 80159d6:	011b      	lsls	r3, r3, #4
 80159d8:	4413      	add	r3, r2
 80159da:	00db      	lsls	r3, r3, #3
 80159dc:	687a      	ldr	r2, [r7, #4]
 80159de:	4413      	add	r3, r2
 80159e0:	3304      	adds	r3, #4
 80159e2:	60fb      	str	r3, [r7, #12]
		this->inc_read();
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f7ff feb3 	bl	8015750 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>
		return buffer;
 80159ea:	68fb      	ldr	r3, [r7, #12]
	}
 80159ec:	4618      	mov	r0, r3
 80159ee:	3710      	adds	r7, #16
 80159f0:	46bd      	mov	sp, r7
 80159f2:	bd80      	pop	{r7, pc}

080159f4 <_ZN22core_comm_MessageQueueILi10ELi128EE5writeEP23core_comm_SerialMessage>:
	uint8_t write(core_comm_SerialMessage *message) {
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b082      	sub	sp, #8
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
 80159fc:	6039      	str	r1, [r7, #0]
		message->copyTo(&this->messages[this->idx_write]);
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	f893 35a1 	ldrb.w	r3, [r3, #1441]	; 0x5a1
 8015a04:	461a      	mov	r2, r3
 8015a06:	4613      	mov	r3, r2
 8015a08:	00db      	lsls	r3, r3, #3
 8015a0a:	4413      	add	r3, r2
 8015a0c:	011b      	lsls	r3, r3, #4
 8015a0e:	687a      	ldr	r2, [r7, #4]
 8015a10:	4413      	add	r3, r2
 8015a12:	4619      	mov	r1, r3
 8015a14:	6838      	ldr	r0, [r7, #0]
 8015a16:	f007 fdff 	bl	801d618 <_ZN23core_comm_SerialMessage6copyToEPS_>
		return this->inc_write();
 8015a1a:	6878      	ldr	r0, [r7, #4]
 8015a1c:	f000 f812 	bl	8015a44 <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv>
 8015a20:	4603      	mov	r3, r0
	}
 8015a22:	4618      	mov	r0, r3
 8015a24:	3708      	adds	r7, #8
 8015a26:	46bd      	mov	sp, r7
 8015a28:	bd80      	pop	{r7, pc}

08015a2a <_ZN26core_utils_FunctionPointerIvPvEclES0_>:
    R operator ()(A1 a) {
 8015a2a:	b580      	push	{r7, lr}
 8015a2c:	b082      	sub	sp, #8
 8015a2e:	af00      	add	r7, sp, #0
 8015a30:	6078      	str	r0, [r7, #4]
 8015a32:	6039      	str	r1, [r7, #0]
        return call(a);
 8015a34:	6839      	ldr	r1, [r7, #0]
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	f000 f825 	bl	8015a86 <_ZN26core_utils_FunctionPointerIvPvE4callES0_>
 8015a3c:	bf00      	nop
    }
 8015a3e:	3708      	adds	r7, #8
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bd80      	pop	{r7, pc}

08015a44 <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv>:
	uint8_t inc_write() {
 8015a44:	b480      	push	{r7}
 8015a46:	b083      	sub	sp, #12
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
		this->idx_write++;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	f893 35a1 	ldrb.w	r3, [r3, #1441]	; 0x5a1
 8015a52:	3301      	adds	r3, #1
 8015a54:	b2da      	uxtb	r2, r3
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f883 25a1 	strb.w	r2, [r3, #1441]	; 0x5a1
		if (this->idx_write == this->len) {
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f893 25a1 	ldrb.w	r2, [r3, #1441]	; 0x5a1
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f893 35a3 	ldrb.w	r3, [r3, #1443]	; 0x5a3
 8015a68:	429a      	cmp	r2, r3
 8015a6a:	d103      	bne.n	8015a74 <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv+0x30>
			this->idx_write = 0;
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	2200      	movs	r2, #0
 8015a70:	f883 25a1 	strb.w	r2, [r3, #1441]	; 0x5a1
		return this->idx_write;
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	f893 35a1 	ldrb.w	r3, [r3, #1441]	; 0x5a1
	}
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	370c      	adds	r7, #12
 8015a7e:	46bd      	mov	sp, r7
 8015a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a84:	4770      	bx	lr

08015a86 <_ZN26core_utils_FunctionPointerIvPvE4callES0_>:
    R call(A1 a) {
 8015a86:	b580      	push	{r7, lr}
 8015a88:	b082      	sub	sp, #8
 8015a8a:	af00      	add	r7, sp, #0
 8015a8c:	6078      	str	r0, [r7, #4]
 8015a8e:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	695b      	ldr	r3, [r3, #20]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d108      	bne.n	8015aaa <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x24>
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d004      	beq.n	8015aaa <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x24>
           return _p.function(a);
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	6838      	ldr	r0, [r7, #0]
 8015aa6:	4798      	blx	r3
 8015aa8:	e011      	b.n	8015ace <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x48>
        } else if (_membercaller && _p.object) {
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	695b      	ldr	r3, [r3, #20]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d00c      	beq.n	8015acc <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x46>
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d008      	beq.n	8015acc <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x46>
           return _membercaller(_p.object, _member, a);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	695b      	ldr	r3, [r3, #20]
 8015abe:	687a      	ldr	r2, [r7, #4]
 8015ac0:	6810      	ldr	r0, [r2, #0]
 8015ac2:	687a      	ldr	r2, [r7, #4]
 8015ac4:	1d11      	adds	r1, r2, #4
 8015ac6:	683a      	ldr	r2, [r7, #0]
 8015ac8:	4798      	blx	r3
 8015aca:	e000      	b.n	8015ace <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x48>
        return (R)0;
 8015acc:	bf00      	nop
    }
 8015ace:	3708      	adds	r7, #8
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}

08015ad4 <_GLOBAL__sub_I__Z20twipr_uart_comm_taskPv>:
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	af00      	add	r7, sp, #0
 8015ad8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015adc:	2001      	movs	r0, #1
 8015ade:	f7ff fe57 	bl	8015790 <_Z41__static_initialization_and_destruction_0ii>
 8015ae2:	bd80      	pop	{r7, pc}

08015ae4 <_ZN15core_utils_GPIOC1Ev>:
void core_utils_gpio_registerExtiCallback(uint16_t line, void (* function) (void));


class core_utils_GPIO {
public:
	core_utils_GPIO(){
 8015ae4:	b480      	push	{r7}
 8015ae6:	b083      	sub	sp, #12
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]

	}
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	4618      	mov	r0, r3
 8015af0:	370c      	adds	r7, #12
 8015af2:	46bd      	mov	sp, r7
 8015af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af8:	4770      	bx	lr

08015afa <_ZN28twipr_communication_config_tC1Ev>:

typedef struct twipr_communication_callbacks_t {
	core_utils_Callback<void, uint16_t> new_trajectory;
}twipr_communication_callbacks_t;

typedef struct twipr_communication_config_t {
 8015afa:	b580      	push	{r7, lr}
 8015afc:	b082      	sub	sp, #8
 8015afe:	af00      	add	r7, sp, #0
 8015b00:	6078      	str	r0, [r7, #4]
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	3308      	adds	r3, #8
 8015b06:	4618      	mov	r0, r3
 8015b08:	f7ff ffec 	bl	8015ae4 <_ZN15core_utils_GPIOC1Ev>
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	4618      	mov	r0, r3
 8015b10:	3708      	adds	r7, #8
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}

08015b16 <_ZN31twipr_communication_callbacks_tC1Ev>:
typedef struct twipr_communication_callbacks_t {
 8015b16:	b580      	push	{r7, lr}
 8015b18:	b082      	sub	sp, #8
 8015b1a:	af00      	add	r7, sp, #0
 8015b1c:	6078      	str	r0, [r7, #4]
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	4618      	mov	r0, r3
 8015b22:	f7fe f9b3 	bl	8013e8c <_ZN19core_utils_CallbackIvtEC1Ev>
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	4618      	mov	r0, r3
 8015b2a:	3708      	adds	r7, #8
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}

08015b30 <_ZN26TWIPR_CommunicationManagerC1Ev>:

void sample_dma_transfer_cmplt_callback(DMA_HandleTypeDef *hdma);

TWIPR_CommunicationManager* active_manager = NULL;

TWIPR_CommunicationManager::TWIPR_CommunicationManager() {
 8015b30:	b580      	push	{r7, lr}
 8015b32:	b082      	sub	sp, #8
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	6078      	str	r0, [r7, #4]
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	f7ff ffdd 	bl	8015afa <_ZN28twipr_communication_config_tC1Ev>
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	332c      	adds	r3, #44	; 0x2c
 8015b44:	4618      	mov	r0, r3
 8015b46:	f7fe fbc6 	bl	80142d6 <_ZN24TWIPR_UART_CommunicationC1Ev>
 8015b4a:	687a      	ldr	r2, [r7, #4]
 8015b4c:	f241 4348 	movw	r3, #5192	; 0x1448
 8015b50:	4413      	add	r3, r2
 8015b52:	4618      	mov	r0, r3
 8015b54:	f7fe f85f 	bl	8013c16 <_ZN23TWIPR_SPI_CommunicationC1Ev>
 8015b58:	687a      	ldr	r2, [r7, #4]
 8015b5a:	f241 5314 	movw	r3, #5396	; 0x1514
 8015b5e:	4413      	add	r3, r2
 8015b60:	4618      	mov	r0, r3
 8015b62:	f7ff ffd8 	bl	8015b16 <_ZN31twipr_communication_callbacks_tC1Ev>

}
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	4618      	mov	r0, r3
 8015b6a:	3708      	adds	r7, #8
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd80      	pop	{r7, pc}

08015b70 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t>:

/* ====================================================================== */
void TWIPR_CommunicationManager::init(twipr_communication_config_t config) {
 8015b70:	b084      	sub	sp, #16
 8015b72:	b5b0      	push	{r4, r5, r7, lr}
 8015b74:	b0d0      	sub	sp, #320	; 0x140
 8015b76:	af02      	add	r7, sp, #8
 8015b78:	f507 749c 	add.w	r4, r7, #312	; 0x138
 8015b7c:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 8015b80:	6020      	str	r0, [r4, #0]
 8015b82:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8015b86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 8015b8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015b8e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	461d      	mov	r5, r3
 8015b96:	f507 74a6 	add.w	r4, r7, #332	; 0x14c
 8015b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015ba2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8015ba6:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	active_manager = this;
 8015baa:	4aba      	ldr	r2, [pc, #744]	; (8015e94 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x324>)
 8015bac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015bb0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	6013      	str	r3, [r2, #0]

	// Initialize the UART CM4 Interface
	twipr_uart_comm_config_t uart_config = { .huart = this->config.huart };
 8015bb8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015bbc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	681a      	ldr	r2, [r3, #0]
 8015bc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015bc8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015bcc:	601a      	str	r2, [r3, #0]
	this->uart_interface.init(uart_config);
 8015bce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015bd2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8015bdc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015be0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8015be4:	6819      	ldr	r1, [r3, #0]
 8015be6:	4610      	mov	r0, r2
 8015be8:	f7fe fb8e 	bl	8014308 <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t>

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
 8015bec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015bf0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 8015bfa:	4ba7      	ldr	r3, [pc, #668]	; (8015e98 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x328>)
 8015bfc:	643b      	str	r3, [r7, #64]	; 0x40
 8015bfe:	2300      	movs	r3, #0
 8015c00:	647b      	str	r3, [r7, #68]	; 0x44
 8015c02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015c06:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 8015c0a:	f107 0020 	add.w	r0, r7, #32
 8015c0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015c12:	cb0c      	ldmia	r3, {r2, r3}
 8015c14:	6809      	ldr	r1, [r1, #0]
 8015c16:	f000 fc7f 	bl	8016518 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
 8015c1a:	f107 0320 	add.w	r3, r7, #32
 8015c1e:	461a      	mov	r2, r3
 8015c20:	2101      	movs	r1, #1
 8015c22:	4620      	mov	r0, r4
 8015c24:	f7fe fbf2 	bl	801440c <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_write_callback));

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_READ,
 8015c28:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015c2c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	f103 042c 	add.w	r4, r3, #44	; 0x2c
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 8015c36:	4b99      	ldr	r3, [pc, #612]	; (8015e9c <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x32c>)
 8015c38:	66bb      	str	r3, [r7, #104]	; 0x68
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015c3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015c42:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 8015c46:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8015c4a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015c4e:	cb0c      	ldmia	r3, {r2, r3}
 8015c50:	6809      	ldr	r1, [r1, #0]
 8015c52:	f000 fc61 	bl	8016518 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_READ,
 8015c56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015c5a:	461a      	mov	r2, r3
 8015c5c:	2102      	movs	r1, #2
 8015c5e:	4620      	mov	r0, r4
 8015c60:	f7fe fbd4 	bl	801440c <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_read_callback));

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
 8015c64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015c68:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 8015c72:	4b8b      	ldr	r3, [pc, #556]	; (8015ea0 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x330>)
 8015c74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8015c78:	2300      	movs	r3, #0
 8015c7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015c7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015c82:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 8015c86:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8015c8a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8015c8e:	cb0c      	ldmia	r3, {r2, r3}
 8015c90:	6809      	ldr	r1, [r1, #0]
 8015c92:	f000 fc41 	bl	8016518 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
 8015c96:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015c9a:	461a      	mov	r2, r3
 8015c9c:	2103      	movs	r1, #3
 8015c9e:	4620      	mov	r0, r4
 8015ca0:	f7fe fbb4 	bl	801440c <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_func_callback));


	core_utils_gpio_registerExtiCallback(this->config.reset_uart_exti,
 8015ca4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015ca8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015cac:	681b      	ldr	r3, [r3, #0]
 8015cae:	8bdc      	ldrh	r4, [r3, #30]
			core_utils_Callback<void, void>(this,
 8015cb0:	4b7c      	ldr	r3, [pc, #496]	; (8015ea4 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x334>)
 8015cb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8015cbc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015cc0:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 8015cc4:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8015cc8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8015ccc:	cb0c      	ldmia	r3, {r2, r3}
 8015cce:	6809      	ldr	r1, [r1, #0]
 8015cd0:	f000 fc56 	bl	8016580 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>
	core_utils_gpio_registerExtiCallback(this->config.reset_uart_exti,
 8015cd4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015cd8:	4619      	mov	r1, r3
 8015cda:	4620      	mov	r0, r4
 8015cdc:	f00b f852 	bl	8020d84 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE>
					&TWIPR_CommunicationManager::resetUART));

	// Initialize the SPI Interface
	twipr_spi_comm_config_t spi_config = { .hspi = this->config.hspi,
 8015ce0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015ce8:	461a      	mov	r2, r3
 8015cea:	2300      	movs	r3, #0
 8015cec:	6013      	str	r3, [r2, #0]
 8015cee:	6053      	str	r3, [r2, #4]
 8015cf0:	6093      	str	r3, [r2, #8]
 8015cf2:	60d3      	str	r3, [r2, #12]
 8015cf4:	6113      	str	r3, [r2, #16]
 8015cf6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015cfe:	220a      	movs	r2, #10
 8015d00:	811a      	strh	r2, [r3, #8]
 8015d02:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015d06:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	685a      	ldr	r2, [r3, #4]
			.sample_buffer = this->_sample_buffer_tx, .len_sample_buffer =
					TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE, .trajectory_buffer =
					this->config.trajectory_rx_buffer, .len_trajectory_buffer =
					this->config.len_trajectory_buffer };
 8015d0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015d16:	601a      	str	r2, [r3, #0]
			.sample_buffer = this->_sample_buffer_tx, .len_sample_buffer =
 8015d18:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015d1c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015d20:	681a      	ldr	r2, [r3, #0]
 8015d22:	f641 03cc 	movw	r3, #6348	; 0x18cc
 8015d26:	4413      	add	r3, r2
					this->config.len_trajectory_buffer };
 8015d28:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8015d2c:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8015d30:	6053      	str	r3, [r2, #4]
					this->config.trajectory_rx_buffer, .len_trajectory_buffer =
 8015d32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015d36:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	699a      	ldr	r2, [r3, #24]
					this->config.len_trajectory_buffer };
 8015d3e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015d42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015d46:	60da      	str	r2, [r3, #12]
 8015d48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015d4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	8b9a      	ldrh	r2, [r3, #28]
 8015d54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015d5c:	821a      	strh	r2, [r3, #16]
	this->spi_interface.init(spi_config);
 8015d5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015d62:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	f241 4448 	movw	r4, #5192	; 0x1448
 8015d6c:	441c      	add	r4, r3
 8015d6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015d72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015d76:	466d      	mov	r5, sp
 8015d78:	f103 020c 	add.w	r2, r3, #12
 8015d7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d80:	e885 0003 	stmia.w	r5, {r0, r1}
 8015d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8015d86:	4620      	mov	r0, r4
 8015d88:	f7fd ff5c 	bl	8013c44 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t>

	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX,
 8015d8c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015d90:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	f241 4448 	movw	r4, #5192	; 0x1448
 8015d9a:	441c      	add	r4, r3
			core_utils_Callback<void, uint16_t>(this,
 8015d9c:	4b42      	ldr	r3, [pc, #264]	; (8015ea8 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x338>)
 8015d9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8015da2:	2300      	movs	r3, #0
 8015da4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8015da8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015dac:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 8015db0:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8015db4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8015db8:	cb0c      	ldmia	r3, {r2, r3}
 8015dba:	6809      	ldr	r1, [r1, #0]
 8015dbc:	f000 fc14 	bl	80165e8 <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX,
 8015dc0:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8015dc4:	461a      	mov	r2, r3
 8015dc6:	2100      	movs	r1, #0
 8015dc8:	4620      	mov	r0, r4
 8015dca:	f7fd ffcb 	bl	8013d64 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>
					&TWIPR_CommunicationManager::_spi_rxTrajectory_callback));
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
 8015dce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015dd2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015dd6:	681b      	ldr	r3, [r3, #0]
 8015dd8:	f241 4448 	movw	r4, #5192	; 0x1448
 8015ddc:	441c      	add	r4, r3
			core_utils_Callback<void, uint16_t>(this,
 8015dde:	4b33      	ldr	r3, [pc, #204]	; (8015eac <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x33c>)
 8015de0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8015de4:	2300      	movs	r3, #0
 8015de6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8015dea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015dee:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 8015df2:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8015df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015dfa:	cb0c      	ldmia	r3, {r2, r3}
 8015dfc:	6809      	ldr	r1, [r1, #0]
 8015dfe:	f000 fbf3 	bl	80165e8 <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
 8015e02:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8015e06:	461a      	mov	r2, r3
 8015e08:	2101      	movs	r1, #1
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	f7fd ffaa 	bl	8013d64 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>
//	core_utils_gpio_registerExtiCallback(CM4_SPI_READY_PIN,
//			core_utils_Callback<void, void>(this,
//					&TWIPR_CommunicationManager::spi_pin_callback));


	HAL_DMA_RegisterCallback(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
 8015e10:	4a27      	ldr	r2, [pc, #156]	; (8015eb0 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x340>)
 8015e12:	2100      	movs	r1, #0
 8015e14:	4827      	ldr	r0, [pc, #156]	; (8015eb4 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x344>)
 8015e16:	f7ee fdc3 	bl	80049a0 <HAL_DMA_RegisterCallback>
			HAL_DMA_XFER_CPLT_CB_ID, sample_dma_transfer_cmplt_callback);

	// Register the Control Step Callback to fill the sample buffer
	this->config.control->registerCallback(TWIPR_CONTROL_CALLBACK_STEP,
 8015e1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015e1e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	6a1c      	ldr	r4, [r3, #32]
			core_utils_Callback<void, uint32_t>(this,
 8015e26:	4b24      	ldr	r3, [pc, #144]	; (8015eb8 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x348>)
 8015e28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8015e2c:	2300      	movs	r3, #0
 8015e2e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8015e32:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015e36:	f5a3 719a 	sub.w	r1, r3, #308	; 0x134
 8015e3a:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8015e3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015e42:	cb0c      	ldmia	r3, {r2, r3}
 8015e44:	6809      	ldr	r1, [r1, #0]
 8015e46:	f000 fc03 	bl	8016650 <_ZN19core_utils_CallbackIvmEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvmE>
	this->config.control->registerCallback(TWIPR_CONTROL_CALLBACK_STEP,
 8015e4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015e4e:	461a      	mov	r2, r3
 8015e50:	2103      	movs	r1, #3
 8015e52:	4620      	mov	r0, r4
 8015e54:	f001 ff50 	bl	8017cf8 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE>
					&TWIPR_CommunicationManager::_controlStep_callback));

	// Reset the sample buffer index to zero, so that the communication starts here
	this->_sample_buffer_index = 0;
 8015e58:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015e5c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e66:	461a      	mov	r2, r3
 8015e68:	2300      	movs	r3, #0
 8015e6a:	f8c2 3c64 	str.w	r3, [r2, #3172]	; 0xc64

	this->tick = 0;
 8015e6e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8015e72:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015e7c:	461a      	mov	r2, r3
 8015e7e:	2300      	movs	r3, #0
 8015e80:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
 8015e84:	bf00      	nop
 8015e86:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8015e90:	b004      	add	sp, #16
 8015e92:	4770      	bx	lr
 8015e94:	24015414 	.word	0x24015414
 8015e98:	08015f01 	.word	0x08015f01
 8015e9c:	0801604d 	.word	0x0801604d
 8015ea0:	08016169 	.word	0x08016169
 8015ea4:	08015ee5 	.word	0x08015ee5
 8015ea8:	080162f1 	.word	0x080162f1
 8015eac:	08016369 	.word	0x08016369
 8015eb0:	080164f9 	.word	0x080164f9
 8015eb4:	24000ba8 	.word	0x24000ba8
 8015eb8:	08016389 	.word	0x08016389

08015ebc <_ZN26TWIPR_CommunicationManager5startEv>:
/* ====================================================================== */
void TWIPR_CommunicationManager::start() {
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b082      	sub	sp, #8
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]

	// Start the UART Interface
	this->uart_interface.start();
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	332c      	adds	r3, #44	; 0x2c
 8015ec8:	4618      	mov	r0, r3
 8015eca:	f7fe fa49 	bl	8014360 <_ZN24TWIPR_UART_Communication5startEv>

	// Start the SPI Interface
	this->spi_interface.start();
 8015ece:	687a      	ldr	r2, [r7, #4]
 8015ed0:	f241 4348 	movw	r3, #5192	; 0x1448
 8015ed4:	4413      	add	r3, r2
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	f7fd ff14 	bl	8013d04 <_ZN23TWIPR_SPI_Communication5startEv>
}
 8015edc:	bf00      	nop
 8015ede:	3708      	adds	r7, #8
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd80      	pop	{r7, pc}

08015ee4 <_ZN26TWIPR_CommunicationManager9resetUARTEv>:
	}
	}
}

/* ====================================================================== */
void TWIPR_CommunicationManager::resetUART(){
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b082      	sub	sp, #8
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
	this->uart_interface.reset();
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	332c      	adds	r3, #44	; 0x2c
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f7fe fa4f 	bl	8014394 <_ZN24TWIPR_UART_Communication5resetEv>
}
 8015ef6:	bf00      	nop
 8015ef8:	3708      	adds	r7, #8
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}
	...

08015f00 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_write_callback(
		core_comm_SerialMessage *msg) {
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b084      	sub	sp, #16
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	6078      	str	r0, [r7, #4]
 8015f08:	6039      	str	r1, [r7, #0]

	RegisterMap *reg_map;

	switch (msg->address_1) {
 8015f0a:	683b      	ldr	r3, [r7, #0]
 8015f0c:	785b      	ldrb	r3, [r3, #1]
 8015f0e:	2b01      	cmp	r3, #1
 8015f10:	d002      	beq.n	8015f18 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x18>
 8015f12:	2b02      	cmp	r3, #2
 8015f14:	d004      	beq.n	8015f20 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x20>
 8015f16:	e007      	b.n	8015f28 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x28>
	case TWIPR_FIRMWARE_REGISTER_MAP_GENERAL: {
		reg_map = this->config.reg_map_general;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	695b      	ldr	r3, [r3, #20]
 8015f1c:	60fb      	str	r3, [r7, #12]
		break;
 8015f1e:	e009      	b.n	8015f34 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x34>
	}
	case TWIPR_FIRMWARE_REGISTER_MAP_CONTROL: {
		reg_map = this->config.reg_map_control;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	691b      	ldr	r3, [r3, #16]
 8015f24:	60fb      	str	r3, [r7, #12]
		break;
 8015f26:	e005      	b.n	8015f34 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x34>
	}
	default: {
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 8015f28:	2202      	movs	r2, #2
 8015f2a:	6839      	ldr	r1, [r7, #0]
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f000 f9b3 	bl	8016298 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8015f32:	e086      	b.n	8016042 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
		break;
	}
	}

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	789a      	ldrb	r2, [r3, #2]
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	78db      	ldrb	r3, [r3, #3]
 8015f3c:	4619      	mov	r1, r3
 8015f3e:	4610      	mov	r0, r2
 8015f40:	f00a fe68 	bl	8020c14 <_Z15uint8_to_uint16hh>
 8015f44:	4603      	mov	r3, r0
 8015f46:	817b      	strh	r3, [r7, #10]
	if (!reg_map->hasEntry(address)){
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	330c      	adds	r3, #12
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	897a      	ldrh	r2, [r7, #10]
 8015f52:	4611      	mov	r1, r2
 8015f54:	68f8      	ldr	r0, [r7, #12]
 8015f56:	4798      	blx	r3
 8015f58:	4603      	mov	r3, r0
 8015f5a:	f083 0301 	eor.w	r3, r3, #1
 8015f5e:	b2db      	uxtb	r3, r3
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d005      	beq.n	8015f70 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x70>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 8015f64:	2202      	movs	r2, #2
 8015f66:	6839      	ldr	r1, [r7, #0]
 8015f68:	6878      	ldr	r0, [r7, #4]
 8015f6a:	f000 f995 	bl	8016298 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8015f6e:	e068      	b.n	8016042 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
	}
	if (reg_map->getSize(address) != msg->len) {
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	3314      	adds	r3, #20
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	897a      	ldrh	r2, [r7, #10]
 8015f7a:	4611      	mov	r1, r2
 8015f7c:	68f8      	ldr	r0, [r7, #12]
 8015f7e:	4798      	blx	r3
 8015f80:	4603      	mov	r3, r0
 8015f82:	461a      	mov	r2, r3
 8015f84:	683b      	ldr	r3, [r7, #0]
 8015f86:	899b      	ldrh	r3, [r3, #12]
 8015f88:	429a      	cmp	r2, r3
 8015f8a:	bf14      	ite	ne
 8015f8c:	2301      	movne	r3, #1
 8015f8e:	2300      	moveq	r3, #0
 8015f90:	b2db      	uxtb	r3, r3
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d005      	beq.n	8015fa2 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xa2>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_LEN);
 8015f96:	2205      	movs	r2, #5
 8015f98:	6839      	ldr	r1, [r7, #0]
 8015f9a:	6878      	ldr	r0, [r7, #4]
 8015f9c:	f000 f97c 	bl	8016298 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8015fa0:	e04f      	b.n	8016042 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
	}
	if (reg_map->getType(address) != REGISTER_ENTRY_DATA) {
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	3318      	adds	r3, #24
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	897a      	ldrh	r2, [r7, #10]
 8015fac:	4611      	mov	r1, r2
 8015fae:	68f8      	ldr	r0, [r7, #12]
 8015fb0:	4798      	blx	r3
 8015fb2:	4603      	mov	r3, r0
 8015fb4:	2b01      	cmp	r3, #1
 8015fb6:	bf14      	ite	ne
 8015fb8:	2301      	movne	r3, #1
 8015fba:	2300      	moveq	r3, #0
 8015fbc:	b2db      	uxtb	r3, r3
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d005      	beq.n	8015fce <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xce>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 8015fc2:	2206      	movs	r2, #6
 8015fc4:	6839      	ldr	r1, [r7, #0]
 8015fc6:	6878      	ldr	r0, [r7, #4]
 8015fc8:	f000 f966 	bl	8016298 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8015fcc:	e039      	b.n	8016042 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
	}
	if (reg_map->getReadWriteSetting(address) == REGISTER_ENTRY_READ) {
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	331c      	adds	r3, #28
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	897a      	ldrh	r2, [r7, #10]
 8015fd8:	4611      	mov	r1, r2
 8015fda:	68f8      	ldr	r0, [r7, #12]
 8015fdc:	4798      	blx	r3
 8015fde:	4603      	mov	r3, r0
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	bf0c      	ite	eq
 8015fe4:	2301      	moveq	r3, #1
 8015fe6:	2300      	movne	r3, #0
 8015fe8:	b2db      	uxtb	r3, r3
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d005      	beq.n	8015ffa <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xfa>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRITE);
 8015fee:	2203      	movs	r2, #3
 8015ff0:	6839      	ldr	r1, [r7, #0]
 8015ff2:	6878      	ldr	r0, [r7, #4]
 8015ff4:	f000 f950 	bl	8016298 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8015ff8:	e023      	b.n	8016042 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
	}

	reg_map->write(address, msg->data_ptr);
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	3304      	adds	r3, #4
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	683a      	ldr	r2, [r7, #0]
 8016004:	6892      	ldr	r2, [r2, #8]
 8016006:	8979      	ldrh	r1, [r7, #10]
 8016008:	68f8      	ldr	r0, [r7, #12]
 801600a:	4798      	blx	r3

	outgoing_msg.address_1 = msg->address_1;
 801600c:	683b      	ldr	r3, [r7, #0]
 801600e:	785a      	ldrb	r2, [r3, #1]
 8016010:	4b0d      	ldr	r3, [pc, #52]	; (8016048 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 8016012:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_1 = msg->address_2;
 8016014:	683b      	ldr	r3, [r7, #0]
 8016016:	789a      	ldrb	r2, [r3, #2]
 8016018:	4b0b      	ldr	r3, [pc, #44]	; (8016048 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 801601a:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_1 = msg->address_3;
 801601c:	683b      	ldr	r3, [r7, #0]
 801601e:	78da      	ldrb	r2, [r3, #3]
 8016020:	4b09      	ldr	r3, [pc, #36]	; (8016048 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 8016022:	705a      	strb	r2, [r3, #1]
	outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 8016024:	4b08      	ldr	r3, [pc, #32]	; (8016048 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 8016026:	2203      	movs	r2, #3
 8016028:	701a      	strb	r2, [r3, #0]
	outgoing_msg.flag = 1;
 801602a:	4b07      	ldr	r3, [pc, #28]	; (8016048 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 801602c:	2201      	movs	r2, #1
 801602e:	711a      	strb	r2, [r3, #4]
	outgoing_msg.len = 0;
 8016030:	4b05      	ldr	r3, [pc, #20]	; (8016048 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 8016032:	2200      	movs	r2, #0
 8016034:	819a      	strh	r2, [r3, #12]

	this->uart_interface.send(&outgoing_msg);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	332c      	adds	r3, #44	; 0x2c
 801603a:	4903      	ldr	r1, [pc, #12]	; (8016048 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 801603c:	4618      	mov	r0, r3
 801603e:	f7fe f9b6 	bl	80143ae <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>

}
 8016042:	3710      	adds	r7, #16
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}
 8016048:	24015404 	.word	0x24015404

0801604c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_read_callback(
		core_comm_SerialMessage *msg) {
 801604c:	b580      	push	{r7, lr}
 801604e:	b084      	sub	sp, #16
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
 8016054:	6039      	str	r1, [r7, #0]

	RegisterMap *reg_map;

	switch (msg->address_1) {
 8016056:	683b      	ldr	r3, [r7, #0]
 8016058:	785b      	ldrb	r3, [r3, #1]
 801605a:	2b01      	cmp	r3, #1
 801605c:	d002      	beq.n	8016064 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x18>
 801605e:	2b02      	cmp	r3, #2
 8016060:	d004      	beq.n	801606c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x20>
 8016062:	e007      	b.n	8016074 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x28>
	case TWIPR_FIRMWARE_REGISTER_MAP_GENERAL: {
		reg_map = this->config.reg_map_general;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	695b      	ldr	r3, [r3, #20]
 8016068:	60fb      	str	r3, [r7, #12]
		break;
 801606a:	e009      	b.n	8016080 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x34>
	}
	case TWIPR_FIRMWARE_REGISTER_MAP_CONTROL: {
		reg_map = this->config.reg_map_control;
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	691b      	ldr	r3, [r3, #16]
 8016070:	60fb      	str	r3, [r7, #12]
		break;
 8016072:	e005      	b.n	8016080 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x34>
	}
	default: {
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 8016074:	2202      	movs	r2, #2
 8016076:	6839      	ldr	r1, [r7, #0]
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f000 f90d 	bl	8016298 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 801607e:	e06e      	b.n	801615e <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x112>
		break;
	}
	}

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	789a      	ldrb	r2, [r3, #2]
 8016084:	683b      	ldr	r3, [r7, #0]
 8016086:	78db      	ldrb	r3, [r3, #3]
 8016088:	4619      	mov	r1, r3
 801608a:	4610      	mov	r0, r2
 801608c:	f00a fdc2 	bl	8020c14 <_Z15uint8_to_uint16hh>
 8016090:	4603      	mov	r3, r0
 8016092:	817b      	strh	r3, [r7, #10]

	if (!reg_map->hasEntry(address)){
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	330c      	adds	r3, #12
 801609a:	681b      	ldr	r3, [r3, #0]
 801609c:	897a      	ldrh	r2, [r7, #10]
 801609e:	4611      	mov	r1, r2
 80160a0:	68f8      	ldr	r0, [r7, #12]
 80160a2:	4798      	blx	r3
 80160a4:	4603      	mov	r3, r0
 80160a6:	f083 0301 	eor.w	r3, r3, #1
 80160aa:	b2db      	uxtb	r3, r3
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d005      	beq.n	80160bc <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x70>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 80160b0:	2202      	movs	r2, #2
 80160b2:	6839      	ldr	r1, [r7, #0]
 80160b4:	6878      	ldr	r0, [r7, #4]
 80160b6:	f000 f8ef 	bl	8016298 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 80160ba:	e050      	b.n	801615e <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x112>
	}
	if (reg_map->getType(address) != REGISTER_ENTRY_DATA) {
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	3318      	adds	r3, #24
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	897a      	ldrh	r2, [r7, #10]
 80160c6:	4611      	mov	r1, r2
 80160c8:	68f8      	ldr	r0, [r7, #12]
 80160ca:	4798      	blx	r3
 80160cc:	4603      	mov	r3, r0
 80160ce:	2b01      	cmp	r3, #1
 80160d0:	bf14      	ite	ne
 80160d2:	2301      	movne	r3, #1
 80160d4:	2300      	moveq	r3, #0
 80160d6:	b2db      	uxtb	r3, r3
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d005      	beq.n	80160e8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x9c>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 80160dc:	2206      	movs	r2, #6
 80160de:	6839      	ldr	r1, [r7, #0]
 80160e0:	6878      	ldr	r0, [r7, #4]
 80160e2:	f000 f8d9 	bl	8016298 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 80160e6:	e03a      	b.n	801615e <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x112>
	}
	if (reg_map->getReadWriteSetting(address) == REGISTER_ENTRY_WRITE) {
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	331c      	adds	r3, #28
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	897a      	ldrh	r2, [r7, #10]
 80160f2:	4611      	mov	r1, r2
 80160f4:	68f8      	ldr	r0, [r7, #12]
 80160f6:	4798      	blx	r3
 80160f8:	4603      	mov	r3, r0
 80160fa:	2b01      	cmp	r3, #1
 80160fc:	bf0c      	ite	eq
 80160fe:	2301      	moveq	r3, #1
 8016100:	2300      	movne	r3, #0
 8016102:	b2db      	uxtb	r3, r3
 8016104:	2b00      	cmp	r3, #0
 8016106:	d005      	beq.n	8016114 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xc8>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_READ);
 8016108:	2204      	movs	r2, #4
 801610a:	6839      	ldr	r1, [r7, #0]
 801610c:	6878      	ldr	r0, [r7, #4]
 801610e:	f000 f8c3 	bl	8016298 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8016112:	e024      	b.n	801615e <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x112>
	}

	// Read the entry into the outgoing message
	outgoing_msg.len = reg_map->read(address, outgoing_msg.data_ptr);
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	3310      	adds	r3, #16
 801611a:	681b      	ldr	r3, [r3, #0]
 801611c:	4a11      	ldr	r2, [pc, #68]	; (8016164 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 801611e:	6892      	ldr	r2, [r2, #8]
 8016120:	8979      	ldrh	r1, [r7, #10]
 8016122:	68f8      	ldr	r0, [r7, #12]
 8016124:	4798      	blx	r3
 8016126:	4603      	mov	r3, r0
 8016128:	b29a      	uxth	r2, r3
 801612a:	4b0e      	ldr	r3, [pc, #56]	; (8016164 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 801612c:	819a      	strh	r2, [r3, #12]

	// Construct the outgoing message
	outgoing_msg.address_1 = msg->address_1;
 801612e:	683b      	ldr	r3, [r7, #0]
 8016130:	785a      	ldrb	r2, [r3, #1]
 8016132:	4b0c      	ldr	r3, [pc, #48]	; (8016164 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 8016134:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_2 = msg->address_2;
 8016136:	683b      	ldr	r3, [r7, #0]
 8016138:	789a      	ldrb	r2, [r3, #2]
 801613a:	4b0a      	ldr	r3, [pc, #40]	; (8016164 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 801613c:	709a      	strb	r2, [r3, #2]
	outgoing_msg.address_3 = msg->address_3;
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	78da      	ldrb	r2, [r3, #3]
 8016142:	4b08      	ldr	r3, [pc, #32]	; (8016164 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 8016144:	70da      	strb	r2, [r3, #3]
	outgoing_msg.flag = 1;
 8016146:	4b07      	ldr	r3, [pc, #28]	; (8016164 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 8016148:	2201      	movs	r2, #1
 801614a:	711a      	strb	r2, [r3, #4]
	outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 801614c:	4b05      	ldr	r3, [pc, #20]	; (8016164 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 801614e:	2203      	movs	r2, #3
 8016150:	701a      	strb	r2, [r3, #0]

	this->uart_interface.send(&outgoing_msg);
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	332c      	adds	r3, #44	; 0x2c
 8016156:	4903      	ldr	r1, [pc, #12]	; (8016164 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 8016158:	4618      	mov	r0, r3
 801615a:	f7fe f928 	bl	80143ae <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
}
 801615e:	3710      	adds	r7, #16
 8016160:	46bd      	mov	sp, r7
 8016162:	bd80      	pop	{r7, pc}
 8016164:	24015404 	.word	0x24015404

08016168 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_func_callback(
		core_comm_SerialMessage *msg) {
 8016168:	b590      	push	{r4, r7, lr}
 801616a:	b085      	sub	sp, #20
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
 8016170:	6039      	str	r1, [r7, #0]
	RegisterMap *reg_map;

	switch (msg->address_1) {
 8016172:	683b      	ldr	r3, [r7, #0]
 8016174:	785b      	ldrb	r3, [r3, #1]
 8016176:	2b01      	cmp	r3, #1
 8016178:	d002      	beq.n	8016180 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x18>
 801617a:	2b02      	cmp	r3, #2
 801617c:	d004      	beq.n	8016188 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x20>
 801617e:	e007      	b.n	8016190 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x28>
	case TWIPR_FIRMWARE_REGISTER_MAP_GENERAL: {
		reg_map = this->config.reg_map_general;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	695b      	ldr	r3, [r3, #20]
 8016184:	60fb      	str	r3, [r7, #12]
		break;
 8016186:	e009      	b.n	801619c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x34>
	}
	case TWIPR_FIRMWARE_REGISTER_MAP_CONTROL: {
		reg_map = this->config.reg_map_control;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	691b      	ldr	r3, [r3, #16]
 801618c:	60fb      	str	r3, [r7, #12]
		break;
 801618e:	e005      	b.n	801619c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x34>
	}
	default: {
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 8016190:	2202      	movs	r2, #2
 8016192:	6839      	ldr	r1, [r7, #0]
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f000 f87f 	bl	8016298 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 801619a:	e077      	b.n	801628c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x124>
		break;
	}
	}

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 801619c:	683b      	ldr	r3, [r7, #0]
 801619e:	789a      	ldrb	r2, [r3, #2]
 80161a0:	683b      	ldr	r3, [r7, #0]
 80161a2:	78db      	ldrb	r3, [r3, #3]
 80161a4:	4619      	mov	r1, r3
 80161a6:	4610      	mov	r0, r2
 80161a8:	f00a fd34 	bl	8020c14 <_Z15uint8_to_uint16hh>
 80161ac:	4603      	mov	r3, r0
 80161ae:	817b      	strh	r3, [r7, #10]
	if (!reg_map->hasEntry(address)){
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	330c      	adds	r3, #12
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	897a      	ldrh	r2, [r7, #10]
 80161ba:	4611      	mov	r1, r2
 80161bc:	68f8      	ldr	r0, [r7, #12]
 80161be:	4798      	blx	r3
 80161c0:	4603      	mov	r3, r0
 80161c2:	f083 0301 	eor.w	r3, r3, #1
 80161c6:	b2db      	uxtb	r3, r3
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d005      	beq.n	80161d8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x70>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 80161cc:	2202      	movs	r2, #2
 80161ce:	6839      	ldr	r1, [r7, #0]
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f000 f861 	bl	8016298 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 80161d6:	e059      	b.n	801628c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x124>
	}
	if (reg_map->getSize(address) != msg->len) {
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	3314      	adds	r3, #20
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	897a      	ldrh	r2, [r7, #10]
 80161e2:	4611      	mov	r1, r2
 80161e4:	68f8      	ldr	r0, [r7, #12]
 80161e6:	4798      	blx	r3
 80161e8:	4603      	mov	r3, r0
 80161ea:	461a      	mov	r2, r3
 80161ec:	683b      	ldr	r3, [r7, #0]
 80161ee:	899b      	ldrh	r3, [r3, #12]
 80161f0:	429a      	cmp	r2, r3
 80161f2:	bf14      	ite	ne
 80161f4:	2301      	movne	r3, #1
 80161f6:	2300      	moveq	r3, #0
 80161f8:	b2db      	uxtb	r3, r3
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d005      	beq.n	801620a <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xa2>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_LEN);
 80161fe:	2205      	movs	r2, #5
 8016200:	6839      	ldr	r1, [r7, #0]
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	f000 f848 	bl	8016298 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8016208:	e040      	b.n	801628c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x124>
	}
	if (reg_map->getType(address) != REGISTER_ENTRY_FUNCTION) {
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	3318      	adds	r3, #24
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	897a      	ldrh	r2, [r7, #10]
 8016214:	4611      	mov	r1, r2
 8016216:	68f8      	ldr	r0, [r7, #12]
 8016218:	4798      	blx	r3
 801621a:	4603      	mov	r3, r0
 801621c:	2b02      	cmp	r3, #2
 801621e:	bf14      	ite	ne
 8016220:	2301      	movne	r3, #1
 8016222:	2300      	moveq	r3, #0
 8016224:	b2db      	uxtb	r3, r3
 8016226:	2b00      	cmp	r3, #0
 8016228:	d004      	beq.n	8016234 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xcc>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 801622a:	2206      	movs	r2, #6
 801622c:	6839      	ldr	r1, [r7, #0]
 801622e:	6878      	ldr	r0, [r7, #4]
 8016230:	f000 f832 	bl	8016298 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
	}

	// Execute the function and store the data
	uint8_t ret_size = reg_map->execute(address, msg->data_ptr,
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	3320      	adds	r3, #32
 801623a:	681c      	ldr	r4, [r3, #0]
 801623c:	683b      	ldr	r3, [r7, #0]
 801623e:	689a      	ldr	r2, [r3, #8]
 8016240:	4b14      	ldr	r3, [pc, #80]	; (8016294 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 8016242:	689b      	ldr	r3, [r3, #8]
 8016244:	8979      	ldrh	r1, [r7, #10]
 8016246:	68f8      	ldr	r0, [r7, #12]
 8016248:	47a0      	blx	r4
 801624a:	4603      	mov	r3, r0
 801624c:	727b      	strb	r3, [r7, #9]
			outgoing_msg.data_ptr);

	// Send back a message if the function returns something
	if (ret_size > 0) {
 801624e:	7a7b      	ldrb	r3, [r7, #9]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d01b      	beq.n	801628c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x124>
		outgoing_msg.address_1 = msg->address_1;
 8016254:	683b      	ldr	r3, [r7, #0]
 8016256:	785a      	ldrb	r2, [r3, #1]
 8016258:	4b0e      	ldr	r3, [pc, #56]	; (8016294 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 801625a:	705a      	strb	r2, [r3, #1]
		outgoing_msg.address_2 = msg->address_2;
 801625c:	683b      	ldr	r3, [r7, #0]
 801625e:	789a      	ldrb	r2, [r3, #2]
 8016260:	4b0c      	ldr	r3, [pc, #48]	; (8016294 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 8016262:	709a      	strb	r2, [r3, #2]
		outgoing_msg.address_3 = msg->address_3;
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	78da      	ldrb	r2, [r3, #3]
 8016268:	4b0a      	ldr	r3, [pc, #40]	; (8016294 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 801626a:	70da      	strb	r2, [r3, #3]
		outgoing_msg.flag = 1;
 801626c:	4b09      	ldr	r3, [pc, #36]	; (8016294 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 801626e:	2201      	movs	r2, #1
 8016270:	711a      	strb	r2, [r3, #4]
		outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 8016272:	4b08      	ldr	r3, [pc, #32]	; (8016294 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 8016274:	2203      	movs	r2, #3
 8016276:	701a      	strb	r2, [r3, #0]
		outgoing_msg.len = ret_size;
 8016278:	7a7b      	ldrb	r3, [r7, #9]
 801627a:	b29a      	uxth	r2, r3
 801627c:	4b05      	ldr	r3, [pc, #20]	; (8016294 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 801627e:	819a      	strh	r2, [r3, #12]
		this->uart_interface.send(&outgoing_msg);
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	332c      	adds	r3, #44	; 0x2c
 8016284:	4903      	ldr	r1, [pc, #12]	; (8016294 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 8016286:	4618      	mov	r0, r3
 8016288:	f7fe f891 	bl	80143ae <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
	}
}
 801628c:	3714      	adds	r7, #20
 801628e:	46bd      	mov	sp, r7
 8016290:	bd90      	pop	{r4, r7, pc}
 8016292:	bf00      	nop
 8016294:	24015404 	.word	0x24015404

08016298 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uartResponseError(core_comm_SerialMessage* incoming_message, uint8_t error_code){
 8016298:	b580      	push	{r7, lr}
 801629a:	b084      	sub	sp, #16
 801629c:	af00      	add	r7, sp, #0
 801629e:	60f8      	str	r0, [r7, #12]
 80162a0:	60b9      	str	r1, [r7, #8]
 80162a2:	4613      	mov	r3, r2
 80162a4:	71fb      	strb	r3, [r7, #7]
	outgoing_msg.address_1 = incoming_message->address_1;
 80162a6:	68bb      	ldr	r3, [r7, #8]
 80162a8:	785a      	ldrb	r2, [r3, #1]
 80162aa:	4b10      	ldr	r3, [pc, #64]	; (80162ec <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80162ac:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_2 = incoming_message->address_2;
 80162ae:	68bb      	ldr	r3, [r7, #8]
 80162b0:	789a      	ldrb	r2, [r3, #2]
 80162b2:	4b0e      	ldr	r3, [pc, #56]	; (80162ec <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80162b4:	709a      	strb	r2, [r3, #2]
	outgoing_msg.address_3 = incoming_message->address_3;
 80162b6:	68bb      	ldr	r3, [r7, #8]
 80162b8:	78da      	ldrb	r2, [r3, #3]
 80162ba:	4b0c      	ldr	r3, [pc, #48]	; (80162ec <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80162bc:	70da      	strb	r2, [r3, #3]
	outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 80162be:	4b0b      	ldr	r3, [pc, #44]	; (80162ec <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80162c0:	2203      	movs	r2, #3
 80162c2:	701a      	strb	r2, [r3, #0]
	outgoing_msg.flag = 0;
 80162c4:	4b09      	ldr	r3, [pc, #36]	; (80162ec <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80162c6:	2200      	movs	r2, #0
 80162c8:	711a      	strb	r2, [r3, #4]
	outgoing_msg.len = 1;
 80162ca:	4b08      	ldr	r3, [pc, #32]	; (80162ec <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80162cc:	2201      	movs	r2, #1
 80162ce:	819a      	strh	r2, [r3, #12]
	outgoing_msg.data_ptr[0] = error_code;
 80162d0:	4b06      	ldr	r3, [pc, #24]	; (80162ec <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80162d2:	689b      	ldr	r3, [r3, #8]
 80162d4:	79fa      	ldrb	r2, [r7, #7]
 80162d6:	701a      	strb	r2, [r3, #0]
	this->uart_interface.send(&outgoing_msg);
 80162d8:	68fb      	ldr	r3, [r7, #12]
 80162da:	332c      	adds	r3, #44	; 0x2c
 80162dc:	4903      	ldr	r1, [pc, #12]	; (80162ec <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 80162de:	4618      	mov	r0, r3
 80162e0:	f7fe f865 	bl	80143ae <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
}
 80162e4:	bf00      	nop
 80162e6:	3710      	adds	r7, #16
 80162e8:	46bd      	mov	sp, r7
 80162ea:	bd80      	pop	{r7, pc}
 80162ec:	24015404 	.word	0x24015404

080162f0 <_ZN26TWIPR_CommunicationManager26_spi_rxTrajectory_callbackEt>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_spi_rxTrajectory_callback(uint16_t len) {
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b082      	sub	sp, #8
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
 80162f8:	460b      	mov	r3, r1
 80162fa:	807b      	strh	r3, [r7, #2]
	// We have received a new trajectory by the CM4
	if (this->_callbacks.new_trajectory.registered){
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016302:	f893 3518 	ldrb.w	r3, [r3, #1304]	; 0x518
 8016306:	2b00      	cmp	r3, #0
 8016308:	d008      	beq.n	801631c <_ZN26TWIPR_CommunicationManager26_spi_rxTrajectory_callbackEt+0x2c>
		this->_callbacks.new_trajectory.call(len);
 801630a:	687a      	ldr	r2, [r7, #4]
 801630c:	f241 5314 	movw	r3, #5396	; 0x1514
 8016310:	4413      	add	r3, r2
 8016312:	887a      	ldrh	r2, [r7, #2]
 8016314:	4611      	mov	r1, r2
 8016316:	4618      	mov	r0, r3
 8016318:	f7fd fe0a 	bl	8013f30 <_ZN19core_utils_CallbackIvtE4callEt>
	}
	this->spi_interface.provideSampleData();
 801631c:	687a      	ldr	r2, [r7, #4]
 801631e:	f241 4348 	movw	r3, #5192	; 0x1448
 8016322:	4413      	add	r3, r2
 8016324:	4618      	mov	r0, r3
 8016326:	f7fd fd3b 	bl	8013da0 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 801632a:	bf00      	nop
 801632c:	3708      	adds	r7, #8
 801632e:	46bd      	mov	sp, r7
 8016330:	bd80      	pop	{r7, pc}

08016332 <_ZN26TWIPR_CommunicationManager16sampleBufferFullEv>:
/* ====================================================================== */
void TWIPR_CommunicationManager::sampleBufferFull(){
 8016332:	b580      	push	{r7, lr}
 8016334:	b082      	sub	sp, #8
 8016336:	af00      	add	r7, sp, #0
 8016338:	6078      	str	r0, [r7, #4]
	this->spi_interface.stopTransmission();
 801633a:	687a      	ldr	r2, [r7, #4]
 801633c:	f241 4348 	movw	r3, #5192	; 0x1448
 8016340:	4413      	add	r3, r2
 8016342:	4618      	mov	r0, r3
 8016344:	f7fd fd88 	bl	8013e58 <_ZN23TWIPR_SPI_Communication16stopTransmissionEv>

	this->spi_interface.provideSampleData();
 8016348:	687a      	ldr	r2, [r7, #4]
 801634a:	f241 4348 	movw	r3, #5192	; 0x1448
 801634e:	4413      	add	r3, r2
 8016350:	4618      	mov	r0, r3
 8016352:	f7fd fd25 	bl	8013da0 <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
	this->config.notification_gpio_tx.toggle();
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	3308      	adds	r3, #8
 801635a:	4618      	mov	r0, r3
 801635c:	f00a fd01 	bl	8020d62 <_ZN15core_utils_GPIO6toggleEv>
//	this->config.notification_gpio_tx.write(0);
////	// Notify the CM4 that the sample buffer is full by writing a HIGH to the communication pin
//	this->config.notification_gpio_tx.write(1);

}
 8016360:	bf00      	nop
 8016362:	3708      	adds	r7, #8
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}

08016368 <_ZN26TWIPR_CommunicationManager23_spi_txSamples_callbackEt>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_spi_txSamples_callback(uint16_t len) {
 8016368:	b580      	push	{r7, lr}
 801636a:	b082      	sub	sp, #8
 801636c:	af00      	add	r7, sp, #0
 801636e:	6078      	str	r0, [r7, #4]
 8016370:	460b      	mov	r3, r1
 8016372:	807b      	strh	r3, [r7, #2]
	this->config.notification_gpio_tx.write(0);
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	3308      	adds	r3, #8
 8016378:	2100      	movs	r1, #0
 801637a:	4618      	mov	r0, r3
 801637c:	f00a fcd3 	bl	8020d26 <_ZN15core_utils_GPIO5writeEh>
}
 8016380:	bf00      	nop
 8016382:	3708      	adds	r7, #8
 8016384:	46bd      	mov	sp, r7
 8016386:	bd80      	pop	{r7, pc}

08016388 <_ZN26TWIPR_CommunicationManager21_controlStep_callbackEm>:
//	}
}


/* ====================================================================== */
void TWIPR_CommunicationManager::_controlStep_callback(uint32_t tick){
 8016388:	b580      	push	{r7, lr}
 801638a:	b082      	sub	sp, #8
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
 8016390:	6039      	str	r1, [r7, #0]
	this->tick = tick;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016398:	461a      	mov	r2, r3
 801639a:	683b      	ldr	r3, [r7, #0]
 801639c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
	this->_collectSampleData();
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f000 f805 	bl	80163b0 <_ZN26TWIPR_CommunicationManager18_collectSampleDataEv>
}
 80163a6:	bf00      	nop
 80163a8:	3708      	adds	r7, #8
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bd80      	pop	{r7, pc}
	...

080163b0 <_ZN26TWIPR_CommunicationManager18_collectSampleDataEv>:


/* ======================================================================*/
void TWIPR_CommunicationManager::_collectSampleData(){
 80163b0:	b5b0      	push	{r4, r5, r7, lr}
 80163b2:	b08a      	sub	sp, #40	; 0x28
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6278      	str	r0, [r7, #36]	; 0x24
		// Build the sample
		this->_sample_buffer[this->_sample_buffer_index].general.tick = this->tick;
 80163b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80163be:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	; 0xc64
 80163c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80163c8:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510
 80163cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80163ce:	205c      	movs	r0, #92	; 0x5c
 80163d0:	fb00 f303 	mul.w	r3, r0, r3
 80163d4:	4419      	add	r1, r3
 80163d6:	f241 5334 	movw	r3, #5428	; 0x1534
 80163da:	440b      	add	r3, r1
 80163dc:	601a      	str	r2, [r3, #0]
		this->_sample_buffer[this->_sample_buffer_index].general.status = 1;
 80163de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80163e4:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	; 0xc64
 80163e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163ea:	215c      	movs	r1, #92	; 0x5c
 80163ec:	fb01 f303 	mul.w	r3, r1, r3
 80163f0:	441a      	add	r2, r3
 80163f2:	f241 5338 	movw	r3, #5432	; 0x1538
 80163f6:	4413      	add	r3, r2
 80163f8:	2201      	movs	r2, #1
 80163fa:	701a      	strb	r2, [r3, #0]


		this->_sample_buffer[this->_sample_buffer_index].control =
				this->config.control->getSample();
 80163fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fe:	6a19      	ldr	r1, [r3, #32]
		this->_sample_buffer[this->_sample_buffer_index].control =
 8016400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016406:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	; 0xc64
				this->config.control->getSample();
 801640a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801640c:	205c      	movs	r0, #92	; 0x5c
 801640e:	fb00 f303 	mul.w	r3, r0, r3
 8016412:	4413      	add	r3, r2
 8016414:	f241 5438 	movw	r4, #5432	; 0x1538
 8016418:	441c      	add	r4, r3
 801641a:	463b      	mov	r3, r7
 801641c:	4618      	mov	r0, r3
 801641e:	f001 fcca 	bl	8017db6 <_ZN20TWIPR_ControlManager9getSampleEv>
 8016422:	3404      	adds	r4, #4
 8016424:	463d      	mov	r5, r7
 8016426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801642a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801642e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		this->_sample_buffer[this->_sample_buffer_index].estimation =
				this->config.estimation->getSample();
 8016432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016434:	6a59      	ldr	r1, [r3, #36]	; 0x24
		this->_sample_buffer[this->_sample_buffer_index].estimation =
 8016436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801643c:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	; 0xc64
				this->config.estimation->getSample();
 8016440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016442:	205c      	movs	r0, #92	; 0x5c
 8016444:	fb00 f303 	mul.w	r3, r0, r3
 8016448:	4413      	add	r3, r2
 801644a:	f241 5450 	movw	r4, #5456	; 0x1550
 801644e:	441c      	add	r4, r3
 8016450:	463b      	mov	r3, r7
 8016452:	4618      	mov	r0, r3
 8016454:	f004 f9e4 	bl	801a820 <_ZN16TWIPR_Estimation9getSampleEv>
 8016458:	3408      	adds	r4, #8
 801645a:	463d      	mov	r5, r7
 801645c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801645e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016460:	682b      	ldr	r3, [r5, #0]
 8016462:	6023      	str	r3, [r4, #0]
		this->_sample_buffer[this->_sample_buffer_index].sensors =
				this->config.sensors->getData();
 8016464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016466:	6a99      	ldr	r1, [r3, #40]	; 0x28
		this->_sample_buffer[this->_sample_buffer_index].sensors =
 8016468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801646a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801646e:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	; 0xc64
				this->config.sensors->getData();
 8016472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016474:	205c      	movs	r0, #92	; 0x5c
 8016476:	fb00 f303 	mul.w	r3, r0, r3
 801647a:	4413      	add	r3, r2
 801647c:	f241 5468 	movw	r4, #5480	; 0x1568
 8016480:	441c      	add	r4, r3
 8016482:	463b      	mov	r3, r7
 8016484:	4618      	mov	r0, r3
 8016486:	f004 fa6f 	bl	801a968 <_ZN13TWIPR_Sensors7getDataEv>
 801648a:	3404      	adds	r4, #4
 801648c:	463d      	mov	r5, r7
 801648e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016492:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016496:	682b      	ldr	r3, [r5, #0]
 8016498:	6023      	str	r3, [r4, #0]

		this->_sample_buffer_index++;
 801649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801649c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164a0:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	; 0xc64
 80164a4:	3301      	adds	r3, #1
 80164a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80164ac:	f8c2 3c64 	str.w	r3, [r2, #3172]	; 0xc64

		if (this->_sample_buffer_index == TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE) {
 80164b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164b6:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	; 0xc64
 80164ba:	2b0a      	cmp	r3, #10
 80164bc:	d115      	bne.n	80164ea <_ZN26TWIPR_CommunicationManager18_collectSampleDataEv+0x13a>
			// Copy the sample buffer to the outgoing buffer
			HAL_DMA_Start_IT(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
					(uint32_t) &this->_sample_buffer,
 80164be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164c0:	f241 5334 	movw	r3, #5428	; 0x1534
 80164c4:	4413      	add	r3, r2
			HAL_DMA_Start_IT(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
 80164c6:	4619      	mov	r1, r3
					(uint32_t) &this->_sample_buffer_tx,
 80164c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164ca:	f641 03cc 	movw	r3, #6348	; 0x18cc
 80164ce:	4413      	add	r3, r2
			HAL_DMA_Start_IT(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
 80164d0:	461a      	mov	r2, r3
 80164d2:	f44f 7366 	mov.w	r3, #920	; 0x398
 80164d6:	4807      	ldr	r0, [pc, #28]	; (80164f4 <_ZN26TWIPR_CommunicationManager18_collectSampleDataEv+0x144>)
 80164d8:	f7ec fb6a 	bl	8002bb0 <HAL_DMA_Start_IT>
					TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE
							* sizeof(twipr_logging_sample_t));
			this->_sample_buffer_index = 0;
 80164dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80164e2:	461a      	mov	r2, r3
 80164e4:	2300      	movs	r3, #0
 80164e6:	f8c2 3c64 	str.w	r3, [r2, #3172]	; 0xc64
		} else {
	//		osSemaphoreRelease(sem);
		}
}
 80164ea:	bf00      	nop
 80164ec:	3728      	adds	r7, #40	; 0x28
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bdb0      	pop	{r4, r5, r7, pc}
 80164f2:	bf00      	nop
 80164f4:	24000ba8 	.word	0x24000ba8

080164f8 <_Z34sample_dma_transfer_cmplt_callbackP19__DMA_HandleTypeDef>:

/* ======================================================================*/
void sample_dma_transfer_cmplt_callback(DMA_HandleTypeDef *hdma) {
 80164f8:	b580      	push	{r7, lr}
 80164fa:	b082      	sub	sp, #8
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
	active_manager->sampleBufferFull();
 8016500:	4b04      	ldr	r3, [pc, #16]	; (8016514 <_Z34sample_dma_transfer_cmplt_callbackP19__DMA_HandleTypeDef+0x1c>)
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	4618      	mov	r0, r3
 8016506:	f7ff ff14 	bl	8016332 <_ZN26TWIPR_CommunicationManager16sampleBufferFullEv>
}
 801650a:	bf00      	nop
 801650c:	3708      	adds	r7, #8
 801650e:	46bd      	mov	sp, r7
 8016510:	bd80      	pop	{r7, pc}
 8016512:	bf00      	nop
 8016514:	24015414 	.word	0x24015414

08016518 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 8016518:	b5b0      	push	{r4, r5, r7, lr}
 801651a:	b08a      	sub	sp, #40	; 0x28
 801651c:	af00      	add	r7, sp, #0
 801651e:	60f8      	str	r0, [r7, #12]
 8016520:	60b9      	str	r1, [r7, #8]
 8016522:	4639      	mov	r1, r7
 8016524:	e881 000c 	stmia.w	r1, {r2, r3}
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	4618      	mov	r0, r3
 801652c:	f7fd fb30 	bl	8013b90 <_ZN8CallbackC1Ev>
 8016530:	4a12      	ldr	r2, [pc, #72]	; (801657c <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E+0x64>)
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	601a      	str	r2, [r3, #0]
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	2200      	movs	r2, #0
 801653a:	711a      	strb	r2, [r3, #4]
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	3308      	adds	r3, #8
 8016540:	2100      	movs	r1, #0
 8016542:	4618      	mov	r0, r3
 8016544:	f7fe fb32 	bl	8014bac <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8016548:	f107 0010 	add.w	r0, r7, #16
 801654c:	463b      	mov	r3, r7
 801654e:	cb0c      	ldmia	r3, {r2, r3}
 8016550:	68b9      	ldr	r1, [r7, #8]
 8016552:	f000 f8b1 	bl	80166b8 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	f103 0408 	add.w	r4, r3, #8
 801655c:	f107 0510 	add.w	r5, r7, #16
 8016560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016564:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016568:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	2201      	movs	r2, #1
 8016570:	711a      	strb	r2, [r3, #4]
	}
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	4618      	mov	r0, r3
 8016576:	3728      	adds	r7, #40	; 0x28
 8016578:	46bd      	mov	sp, r7
 801657a:	bdb0      	pop	{r4, r5, r7, pc}
 801657c:	0802546c 	.word	0x0802546c

08016580 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
 8016580:	b5b0      	push	{r4, r5, r7, lr}
 8016582:	b08a      	sub	sp, #40	; 0x28
 8016584:	af00      	add	r7, sp, #0
 8016586:	60f8      	str	r0, [r7, #12]
 8016588:	60b9      	str	r1, [r7, #8]
 801658a:	4639      	mov	r1, r7
 801658c:	e881 000c 	stmia.w	r1, {r2, r3}
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	4618      	mov	r0, r3
 8016594:	f7fd fafc 	bl	8013b90 <_ZN8CallbackC1Ev>
 8016598:	4a12      	ldr	r2, [pc, #72]	; (80165e4 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE+0x64>)
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	601a      	str	r2, [r3, #0]
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	2200      	movs	r2, #0
 80165a2:	711a      	strb	r2, [r3, #4]
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	3308      	adds	r3, #8
 80165a8:	2100      	movs	r1, #0
 80165aa:	4618      	mov	r0, r3
 80165ac:	f7fd fcd1 	bl	8013f52 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<R,void>(object, member);
 80165b0:	f107 0010 	add.w	r0, r7, #16
 80165b4:	463b      	mov	r3, r7
 80165b6:	cb0c      	ldmia	r3, {r2, r3}
 80165b8:	68b9      	ldr	r1, [r7, #8]
 80165ba:	f000 f890 	bl	80166de <_ZN26core_utils_FunctionPointerIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	f103 0408 	add.w	r4, r3, #8
 80165c4:	f107 0510 	add.w	r5, r7, #16
 80165c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80165ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80165cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80165d0:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	2201      	movs	r2, #1
 80165d8:	711a      	strb	r2, [r3, #4]
	}
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	4618      	mov	r0, r3
 80165de:	3728      	adds	r7, #40	; 0x28
 80165e0:	46bd      	mov	sp, r7
 80165e2:	bdb0      	pop	{r4, r5, r7, pc}
 80165e4:	080253f0 	.word	0x080253f0

080165e8 <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 80165e8:	b5b0      	push	{r4, r5, r7, lr}
 80165ea:	b08a      	sub	sp, #40	; 0x28
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	60f8      	str	r0, [r7, #12]
 80165f0:	60b9      	str	r1, [r7, #8]
 80165f2:	4639      	mov	r1, r7
 80165f4:	e881 000c 	stmia.w	r1, {r2, r3}
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	4618      	mov	r0, r3
 80165fc:	f7fd fac8 	bl	8013b90 <_ZN8CallbackC1Ev>
 8016600:	4a12      	ldr	r2, [pc, #72]	; (801664c <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE+0x64>)
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	601a      	str	r2, [r3, #0]
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	2200      	movs	r2, #0
 801660a:	711a      	strb	r2, [r3, #4]
 801660c:	68fb      	ldr	r3, [r7, #12]
 801660e:	3308      	adds	r3, #8
 8016610:	2100      	movs	r1, #0
 8016612:	4618      	mov	r0, r3
 8016614:	f7fd fcb6 	bl	8013f84 <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8016618:	f107 0010 	add.w	r0, r7, #16
 801661c:	463b      	mov	r3, r7
 801661e:	cb0c      	ldmia	r3, {r2, r3}
 8016620:	68b9      	ldr	r1, [r7, #8]
 8016622:	f000 f86f 	bl	8016704 <_ZN26core_utils_FunctionPointerIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	f103 0408 	add.w	r4, r3, #8
 801662c:	f107 0510 	add.w	r5, r7, #16
 8016630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016634:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016638:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	2201      	movs	r2, #1
 8016640:	711a      	strb	r2, [r3, #4]
	}
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	4618      	mov	r0, r3
 8016646:	3728      	adds	r7, #40	; 0x28
 8016648:	46bd      	mov	sp, r7
 801664a:	bdb0      	pop	{r4, r5, r7, pc}
 801664c:	080253e0 	.word	0x080253e0

08016650 <_ZN19core_utils_CallbackIvmEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvmE>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 8016650:	b5b0      	push	{r4, r5, r7, lr}
 8016652:	b08a      	sub	sp, #40	; 0x28
 8016654:	af00      	add	r7, sp, #0
 8016656:	60f8      	str	r0, [r7, #12]
 8016658:	60b9      	str	r1, [r7, #8]
 801665a:	4639      	mov	r1, r7
 801665c:	e881 000c 	stmia.w	r1, {r2, r3}
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	4618      	mov	r0, r3
 8016664:	f7fd fa94 	bl	8013b90 <_ZN8CallbackC1Ev>
 8016668:	4a12      	ldr	r2, [pc, #72]	; (80166b4 <_ZN19core_utils_CallbackIvmEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvmE+0x64>)
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	601a      	str	r2, [r3, #0]
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	2200      	movs	r2, #0
 8016672:	711a      	strb	r2, [r3, #4]
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	3308      	adds	r3, #8
 8016678:	2100      	movs	r1, #0
 801667a:	4618      	mov	r0, r3
 801667c:	f000 f855 	bl	801672a <_ZN26core_utils_FunctionPointerIvmEC1EPFvmE>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8016680:	f107 0010 	add.w	r0, r7, #16
 8016684:	463b      	mov	r3, r7
 8016686:	cb0c      	ldmia	r3, {r2, r3}
 8016688:	68b9      	ldr	r1, [r7, #8]
 801668a:	f000 f85c 	bl	8016746 <_ZN26core_utils_FunctionPointerIvmEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvmE>
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	f103 0408 	add.w	r4, r3, #8
 8016694:	f107 0510 	add.w	r5, r7, #16
 8016698:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801669a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801669c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80166a0:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	2201      	movs	r2, #1
 80166a8:	711a      	strb	r2, [r3, #4]
	}
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	4618      	mov	r0, r3
 80166ae:	3728      	adds	r7, #40	; 0x28
 80166b0:	46bd      	mov	sp, r7
 80166b2:	bdb0      	pop	{r4, r5, r7, pc}
 80166b4:	0802549c 	.word	0x0802549c

080166b8 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 80166b8:	b580      	push	{r7, lr}
 80166ba:	b084      	sub	sp, #16
 80166bc:	af00      	add	r7, sp, #0
 80166be:	60f8      	str	r0, [r7, #12]
 80166c0:	60b9      	str	r1, [r7, #8]
 80166c2:	4639      	mov	r1, r7
 80166c4:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80166c8:	463b      	mov	r3, r7
 80166ca:	cb0c      	ldmia	r3, {r2, r3}
 80166cc:	68b9      	ldr	r1, [r7, #8]
 80166ce:	68f8      	ldr	r0, [r7, #12]
 80166d0:	f000 f84c 	bl	801676c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E>
    }
 80166d4:	68fb      	ldr	r3, [r7, #12]
 80166d6:	4618      	mov	r0, r3
 80166d8:	3710      	adds	r7, #16
 80166da:	46bd      	mov	sp, r7
 80166dc:	bd80      	pop	{r7, pc}

080166de <_ZN26core_utils_FunctionPointerIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 80166de:	b580      	push	{r7, lr}
 80166e0:	b084      	sub	sp, #16
 80166e2:	af00      	add	r7, sp, #0
 80166e4:	60f8      	str	r0, [r7, #12]
 80166e6:	60b9      	str	r1, [r7, #8]
 80166e8:	4639      	mov	r1, r7
 80166ea:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80166ee:	463b      	mov	r3, r7
 80166f0:	cb0c      	ldmia	r3, {r2, r3}
 80166f2:	68b9      	ldr	r1, [r7, #8]
 80166f4:	68f8      	ldr	r0, [r7, #12]
 80166f6:	f000 f857 	bl	80167a8 <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE>
    }
 80166fa:	68fb      	ldr	r3, [r7, #12]
 80166fc:	4618      	mov	r0, r3
 80166fe:	3710      	adds	r7, #16
 8016700:	46bd      	mov	sp, r7
 8016702:	bd80      	pop	{r7, pc}

08016704 <_ZN26core_utils_FunctionPointerIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8016704:	b580      	push	{r7, lr}
 8016706:	b084      	sub	sp, #16
 8016708:	af00      	add	r7, sp, #0
 801670a:	60f8      	str	r0, [r7, #12]
 801670c:	60b9      	str	r1, [r7, #8]
 801670e:	4639      	mov	r1, r7
 8016710:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8016714:	463b      	mov	r3, r7
 8016716:	cb0c      	ldmia	r3, {r2, r3}
 8016718:	68b9      	ldr	r1, [r7, #8]
 801671a:	68f8      	ldr	r0, [r7, #12]
 801671c:	f000 f862 	bl	80167e4 <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE>
    }
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	4618      	mov	r0, r3
 8016724:	3710      	adds	r7, #16
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}

0801672a <_ZN26core_utils_FunctionPointerIvmEC1EPFvmE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 801672a:	b580      	push	{r7, lr}
 801672c:	b082      	sub	sp, #8
 801672e:	af00      	add	r7, sp, #0
 8016730:	6078      	str	r0, [r7, #4]
 8016732:	6039      	str	r1, [r7, #0]
        attach(function);
 8016734:	6839      	ldr	r1, [r7, #0]
 8016736:	6878      	ldr	r0, [r7, #4]
 8016738:	f000 f872 	bl	8016820 <_ZN26core_utils_FunctionPointerIvmE6attachEPFvmE>
    }
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	4618      	mov	r0, r3
 8016740:	3708      	adds	r7, #8
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}

08016746 <_ZN26core_utils_FunctionPointerIvmEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvmE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8016746:	b580      	push	{r7, lr}
 8016748:	b084      	sub	sp, #16
 801674a:	af00      	add	r7, sp, #0
 801674c:	60f8      	str	r0, [r7, #12]
 801674e:	60b9      	str	r1, [r7, #8]
 8016750:	4639      	mov	r1, r7
 8016752:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8016756:	463b      	mov	r3, r7
 8016758:	cb0c      	ldmia	r3, {r2, r3}
 801675a:	68b9      	ldr	r1, [r7, #8]
 801675c:	68f8      	ldr	r0, [r7, #12]
 801675e:	f000 f871 	bl	8016844 <_ZN26core_utils_FunctionPointerIvmE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvmE>
    }
 8016762:	68fb      	ldr	r3, [r7, #12]
 8016764:	4618      	mov	r0, r3
 8016766:	3710      	adds	r7, #16
 8016768:	46bd      	mov	sp, r7
 801676a:	bd80      	pop	{r7, pc}

0801676c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E>:
    void attach(T *object, R (T::*member)(A1)) {
 801676c:	b480      	push	{r7}
 801676e:	b085      	sub	sp, #20
 8016770:	af00      	add	r7, sp, #0
 8016772:	60f8      	str	r0, [r7, #12]
 8016774:	60b9      	str	r1, [r7, #8]
 8016776:	4639      	mov	r1, r7
 8016778:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	68ba      	ldr	r2, [r7, #8]
 8016780:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8016782:	68fb      	ldr	r3, [r7, #12]
 8016784:	3304      	adds	r3, #4
 8016786:	461a      	mov	r2, r3
 8016788:	463b      	mov	r3, r7
 801678a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801678e:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	4a03      	ldr	r2, [pc, #12]	; (80167a4 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E+0x38>)
 8016796:	615a      	str	r2, [r3, #20]
    }
 8016798:	bf00      	nop
 801679a:	3714      	adds	r7, #20
 801679c:	46bd      	mov	sp, r7
 801679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a2:	4770      	bx	lr
 80167a4:	08016881 	.word	0x08016881

080167a8 <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 80167a8:	b480      	push	{r7}
 80167aa:	b085      	sub	sp, #20
 80167ac:	af00      	add	r7, sp, #0
 80167ae:	60f8      	str	r0, [r7, #12]
 80167b0:	60b9      	str	r1, [r7, #8]
 80167b2:	4639      	mov	r1, r7
 80167b4:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 80167b8:	68fb      	ldr	r3, [r7, #12]
 80167ba:	68ba      	ldr	r2, [r7, #8]
 80167bc:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	3304      	adds	r3, #4
 80167c2:	461a      	mov	r2, r3
 80167c4:	463b      	mov	r3, r7
 80167c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80167ca:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	4a03      	ldr	r2, [pc, #12]	; (80167e0 <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE+0x38>)
 80167d2:	615a      	str	r2, [r3, #20]
    }
 80167d4:	bf00      	nop
 80167d6:	3714      	adds	r7, #20
 80167d8:	46bd      	mov	sp, r7
 80167da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167de:	4770      	bx	lr
 80167e0:	080168d5 	.word	0x080168d5

080167e4 <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE>:
    void attach(T *object, R (T::*member)(A1)) {
 80167e4:	b480      	push	{r7}
 80167e6:	b085      	sub	sp, #20
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	60f8      	str	r0, [r7, #12]
 80167ec:	60b9      	str	r1, [r7, #8]
 80167ee:	4639      	mov	r1, r7
 80167f0:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	68ba      	ldr	r2, [r7, #8]
 80167f8:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 80167fa:	68fb      	ldr	r3, [r7, #12]
 80167fc:	3304      	adds	r3, #4
 80167fe:	461a      	mov	r2, r3
 8016800:	463b      	mov	r3, r7
 8016802:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016806:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	4a03      	ldr	r2, [pc, #12]	; (801681c <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE+0x38>)
 801680e:	615a      	str	r2, [r3, #20]
    }
 8016810:	bf00      	nop
 8016812:	3714      	adds	r7, #20
 8016814:	46bd      	mov	sp, r7
 8016816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801681a:	4770      	bx	lr
 801681c:	08016927 	.word	0x08016927

08016820 <_ZN26core_utils_FunctionPointerIvmE6attachEPFvmE>:
    void attach(R (*function)(A1)) {
 8016820:	b480      	push	{r7}
 8016822:	b083      	sub	sp, #12
 8016824:	af00      	add	r7, sp, #0
 8016826:	6078      	str	r0, [r7, #4]
 8016828:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	683a      	ldr	r2, [r7, #0]
 801682e:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	2200      	movs	r2, #0
 8016834:	615a      	str	r2, [r3, #20]
    }
 8016836:	bf00      	nop
 8016838:	370c      	adds	r7, #12
 801683a:	46bd      	mov	sp, r7
 801683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016840:	4770      	bx	lr
	...

08016844 <_ZN26core_utils_FunctionPointerIvmE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvmE>:
    void attach(T *object, R (T::*member)(A1)) {
 8016844:	b480      	push	{r7}
 8016846:	b085      	sub	sp, #20
 8016848:	af00      	add	r7, sp, #0
 801684a:	60f8      	str	r0, [r7, #12]
 801684c:	60b9      	str	r1, [r7, #8]
 801684e:	4639      	mov	r1, r7
 8016850:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	68ba      	ldr	r2, [r7, #8]
 8016858:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	3304      	adds	r3, #4
 801685e:	461a      	mov	r2, r3
 8016860:	463b      	mov	r3, r7
 8016862:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016866:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	4a03      	ldr	r2, [pc, #12]	; (801687c <_ZN26core_utils_FunctionPointerIvmE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvmE+0x38>)
 801686e:	615a      	str	r2, [r3, #20]
    }
 8016870:	bf00      	nop
 8016872:	3714      	adds	r7, #20
 8016874:	46bd      	mov	sp, r7
 8016876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687a:	4770      	bx	lr
 801687c:	0801697f 	.word	0x0801697f

08016880 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8016880:	b580      	push	{r7, lr}
 8016882:	b086      	sub	sp, #24
 8016884:	af00      	add	r7, sp, #0
 8016886:	60f8      	str	r0, [r7, #12]
 8016888:	60b9      	str	r1, [r7, #8]
 801688a:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8016890:	68bb      	ldr	r3, [r7, #8]
 8016892:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8016894:	693b      	ldr	r3, [r7, #16]
 8016896:	685b      	ldr	r3, [r3, #4]
 8016898:	105b      	asrs	r3, r3, #1
 801689a:	461a      	mov	r2, r3
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	1898      	adds	r0, r3, r2
 80168a0:	693b      	ldr	r3, [r7, #16]
 80168a2:	685b      	ldr	r3, [r3, #4]
 80168a4:	f003 0301 	and.w	r3, r3, #1
 80168a8:	2b00      	cmp	r3, #0
 80168aa:	d00b      	beq.n	80168c4 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_+0x44>
 80168ac:	693b      	ldr	r3, [r7, #16]
 80168ae:	685b      	ldr	r3, [r3, #4]
 80168b0:	105b      	asrs	r3, r3, #1
 80168b2:	461a      	mov	r2, r3
 80168b4:	697b      	ldr	r3, [r7, #20]
 80168b6:	4413      	add	r3, r2
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	693a      	ldr	r2, [r7, #16]
 80168bc:	6812      	ldr	r2, [r2, #0]
 80168be:	4413      	add	r3, r2
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	e001      	b.n	80168c8 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_+0x48>
 80168c4:	693b      	ldr	r3, [r7, #16]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	6879      	ldr	r1, [r7, #4]
 80168ca:	4798      	blx	r3
 80168cc:	bf00      	nop
    }
 80168ce:	3718      	adds	r7, #24
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b084      	sub	sp, #16
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
 80168dc:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 80168e2:	683b      	ldr	r3, [r7, #0]
 80168e4:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 80168e6:	68bb      	ldr	r3, [r7, #8]
 80168e8:	685b      	ldr	r3, [r3, #4]
 80168ea:	105b      	asrs	r3, r3, #1
 80168ec:	461a      	mov	r2, r3
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	1899      	adds	r1, r3, r2
 80168f2:	68bb      	ldr	r3, [r7, #8]
 80168f4:	685b      	ldr	r3, [r3, #4]
 80168f6:	f003 0301 	and.w	r3, r3, #1
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d00b      	beq.n	8016916 <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj+0x42>
 80168fe:	68bb      	ldr	r3, [r7, #8]
 8016900:	685b      	ldr	r3, [r3, #4]
 8016902:	105b      	asrs	r3, r3, #1
 8016904:	461a      	mov	r2, r3
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	4413      	add	r3, r2
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	68ba      	ldr	r2, [r7, #8]
 801690e:	6812      	ldr	r2, [r2, #0]
 8016910:	4413      	add	r3, r2
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	e001      	b.n	801691a <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj+0x46>
 8016916:	68bb      	ldr	r3, [r7, #8]
 8016918:	681b      	ldr	r3, [r3, #0]
 801691a:	4608      	mov	r0, r1
 801691c:	4798      	blx	r3
 801691e:	bf00      	nop
    }
 8016920:	3710      	adds	r7, #16
 8016922:	46bd      	mov	sp, r7
 8016924:	bd80      	pop	{r7, pc}

08016926 <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8016926:	b580      	push	{r7, lr}
 8016928:	b086      	sub	sp, #24
 801692a:	af00      	add	r7, sp, #0
 801692c:	60f8      	str	r0, [r7, #12]
 801692e:	60b9      	str	r1, [r7, #8]
 8016930:	4613      	mov	r3, r2
 8016932:	80fb      	strh	r3, [r7, #6]
        T* o = static_cast<T*>(object);
 8016934:	68fb      	ldr	r3, [r7, #12]
 8016936:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8016938:	68bb      	ldr	r3, [r7, #8]
 801693a:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801693c:	693b      	ldr	r3, [r7, #16]
 801693e:	685b      	ldr	r3, [r3, #4]
 8016940:	105b      	asrs	r3, r3, #1
 8016942:	461a      	mov	r2, r3
 8016944:	697b      	ldr	r3, [r7, #20]
 8016946:	1898      	adds	r0, r3, r2
 8016948:	693b      	ldr	r3, [r7, #16]
 801694a:	685b      	ldr	r3, [r3, #4]
 801694c:	f003 0301 	and.w	r3, r3, #1
 8016950:	2b00      	cmp	r3, #0
 8016952:	d00b      	beq.n	801696c <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt+0x46>
 8016954:	693b      	ldr	r3, [r7, #16]
 8016956:	685b      	ldr	r3, [r3, #4]
 8016958:	105b      	asrs	r3, r3, #1
 801695a:	461a      	mov	r2, r3
 801695c:	697b      	ldr	r3, [r7, #20]
 801695e:	4413      	add	r3, r2
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	693a      	ldr	r2, [r7, #16]
 8016964:	6812      	ldr	r2, [r2, #0]
 8016966:	4413      	add	r3, r2
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	e001      	b.n	8016970 <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt+0x4a>
 801696c:	693b      	ldr	r3, [r7, #16]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	88fa      	ldrh	r2, [r7, #6]
 8016972:	4611      	mov	r1, r2
 8016974:	4798      	blx	r3
 8016976:	bf00      	nop
    }
 8016978:	3718      	adds	r7, #24
 801697a:	46bd      	mov	sp, r7
 801697c:	bd80      	pop	{r7, pc}

0801697e <_ZN26core_utils_FunctionPointerIvmE12membercallerI26TWIPR_CommunicationManagerEEvPvPjm>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 801697e:	b580      	push	{r7, lr}
 8016980:	b086      	sub	sp, #24
 8016982:	af00      	add	r7, sp, #0
 8016984:	60f8      	str	r0, [r7, #12]
 8016986:	60b9      	str	r1, [r7, #8]
 8016988:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 801698e:	68bb      	ldr	r3, [r7, #8]
 8016990:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8016992:	693b      	ldr	r3, [r7, #16]
 8016994:	685b      	ldr	r3, [r3, #4]
 8016996:	105b      	asrs	r3, r3, #1
 8016998:	461a      	mov	r2, r3
 801699a:	697b      	ldr	r3, [r7, #20]
 801699c:	1898      	adds	r0, r3, r2
 801699e:	693b      	ldr	r3, [r7, #16]
 80169a0:	685b      	ldr	r3, [r3, #4]
 80169a2:	f003 0301 	and.w	r3, r3, #1
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d00b      	beq.n	80169c2 <_ZN26core_utils_FunctionPointerIvmE12membercallerI26TWIPR_CommunicationManagerEEvPvPjm+0x44>
 80169aa:	693b      	ldr	r3, [r7, #16]
 80169ac:	685b      	ldr	r3, [r3, #4]
 80169ae:	105b      	asrs	r3, r3, #1
 80169b0:	461a      	mov	r2, r3
 80169b2:	697b      	ldr	r3, [r7, #20]
 80169b4:	4413      	add	r3, r2
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	693a      	ldr	r2, [r7, #16]
 80169ba:	6812      	ldr	r2, [r2, #0]
 80169bc:	4413      	add	r3, r2
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	e001      	b.n	80169c6 <_ZN26core_utils_FunctionPointerIvmE12membercallerI26TWIPR_CommunicationManagerEEvPvPjm+0x48>
 80169c2:	693b      	ldr	r3, [r7, #16]
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	6879      	ldr	r1, [r7, #4]
 80169c8:	4798      	blx	r3
 80169ca:	bf00      	nop
    }
 80169cc:	3718      	adds	r7, #24
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}

080169d2 <_ZN32twipr_balancing_control_config_tC1Ev>:

typedef enum twipr_balancing_control_callback_id_t {
	TWIPR_BALANCING_CONTROL_CALLBACK_ERROR = 1,
} twipr_balancing_control_callback_id_t;

typedef struct twipr_balancing_control_config_t {
 80169d2:	b480      	push	{r7}
 80169d4:	b083      	sub	sp, #12
 80169d6:	af00      	add	r7, sp, #0
 80169d8:	6078      	str	r0, [r7, #4]
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	f04f 0200 	mov.w	r2, #0
 80169e0:	621a      	str	r2, [r3, #32]
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	4618      	mov	r0, r3
 80169e6:	370c      	adds	r7, #12
 80169e8:	46bd      	mov	sp, r7
 80169ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ee:	4770      	bx	lr

080169f0 <_ZN22TWIPR_BalancingControlC1Ev>:
 *      Author: Dustin Lehmann
 */

#include <twipr_balancing_control.h>

TWIPR_BalancingControl::TWIPR_BalancingControl() {
 80169f0:	b580      	push	{r7, lr}
 80169f2:	b082      	sub	sp, #8
 80169f4:	af00      	add	r7, sp, #0
 80169f6:	6078      	str	r0, [r7, #4]
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	3304      	adds	r3, #4
 80169fc:	4618      	mov	r0, r3
 80169fe:	f7ff ffe8 	bl	80169d2 <_ZN32twipr_balancing_control_config_tC1Ev>
	this->mode = TWIPR_BALANCING_CONTROL_MODE_OFF;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	2200      	movs	r2, #0
 8016a06:	705a      	strb	r2, [r3, #1]
	this->status = TWIPR_BALANCING_CONTROL_STATUS_NONE;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	701a      	strb	r2, [r3, #0]
}
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	4618      	mov	r0, r3
 8016a12:	3708      	adds	r7, #8
 8016a14:	46bd      	mov	sp, r7
 8016a16:	bd80      	pop	{r7, pc}

08016a18 <_ZN22TWIPR_BalancingControl4initE32twipr_balancing_control_config_t>:

/* ========================================================================= */
void TWIPR_BalancingControl::init(twipr_balancing_control_config_t config) {
 8016a18:	b084      	sub	sp, #16
 8016a1a:	b4b0      	push	{r4, r5, r7}
 8016a1c:	b083      	sub	sp, #12
 8016a1e:	af00      	add	r7, sp, #0
 8016a20:	6078      	str	r0, [r7, #4]
 8016a22:	f107 001c 	add.w	r0, r7, #28
 8016a26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	1d1c      	adds	r4, r3, #4
 8016a2e:	f107 051c 	add.w	r5, r7, #28
 8016a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a3a:	682b      	ldr	r3, [r5, #0]
 8016a3c:	6023      	str	r3, [r4, #0]
	this->status = TWIPR_BALANCING_CONTROL_STATUS_IDLE;
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	2201      	movs	r2, #1
 8016a42:	701a      	strb	r2, [r3, #0]
}
 8016a44:	bf00      	nop
 8016a46:	370c      	adds	r7, #12
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bcb0      	pop	{r4, r5, r7}
 8016a4c:	b004      	add	sp, #16
 8016a4e:	4770      	bx	lr

08016a50 <_ZN22TWIPR_BalancingControl5startEv>:

/* ========================================================================= */
void TWIPR_BalancingControl::start() {
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b082      	sub	sp, #8
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_NONE
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	f993 3000 	ldrsb.w	r3, [r3]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d005      	beq.n	8016a6e <_ZN22TWIPR_BalancingControl5startEv+0x1e>
			|| this->status == TWIPR_BALANCING_CONTROL_STATUS_ERROR) {
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	f993 3000 	ldrsb.w	r3, [r3]
 8016a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a6c:	d103      	bne.n	8016a76 <_ZN22TWIPR_BalancingControl5startEv+0x26>
		twipr_error_handler(TWIPR_BALANCING_CONTROL_ERROR_INIT);
 8016a6e:	f240 6002 	movw	r0, #1538	; 0x602
 8016a72:	f003 fbdd 	bl	801a230 <_Z19twipr_error_handlerm>
	}
	this->status = TWIPR_BALANCING_CONTROL_STATUS_RUNNING;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	2202      	movs	r2, #2
 8016a7a:	701a      	strb	r2, [r3, #0]
}
 8016a7c:	bf00      	nop
 8016a7e:	3708      	adds	r7, #8
 8016a80:	46bd      	mov	sp, r7
 8016a82:	bd80      	pop	{r7, pc}

08016a84 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>:

/* ========================================================================= */
void TWIPR_BalancingControl::update(twipr_estimation_state_t state,
		twipr_balancing_control_input_t input,
		twipr_balancing_control_output_t *output) {
 8016a84:	b084      	sub	sp, #16
 8016a86:	b580      	push	{r7, lr}
 8016a88:	b088      	sub	sp, #32
 8016a8a:	af04      	add	r7, sp, #16
 8016a8c:	60f8      	str	r0, [r7, #12]
 8016a8e:	f107 001c 	add.w	r0, r7, #28
 8016a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016a96:	eeb0 7a40 	vmov.f32	s14, s0
 8016a9a:	eef0 7a60 	vmov.f32	s15, s1
 8016a9e:	ed87 7a01 	vstr	s14, [r7, #4]
 8016aa2:	edc7 7a02 	vstr	s15, [r7, #8]

	switch (this->status) {
 8016aa6:	68fb      	ldr	r3, [r7, #12]
 8016aa8:	f993 3000 	ldrsb.w	r3, [r3]
 8016aac:	3301      	adds	r3, #1
 8016aae:	2b03      	cmp	r3, #3
 8016ab0:	d858      	bhi.n	8016b64 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 8016ab2:	a201      	add	r2, pc, #4	; (adr r2, 8016ab8 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0x34>)
 8016ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ab8:	08016aed 	.word	0x08016aed
 8016abc:	08016ac9 	.word	0x08016ac9
 8016ac0:	08016adb 	.word	0x08016adb
 8016ac4:	08016aff 	.word	0x08016aff
	case TWIPR_BALANCING_CONTROL_STATUS_NONE: {
		output->u_1 = 0;
 8016ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aca:	f04f 0200 	mov.w	r2, #0
 8016ace:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 8016ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ad2:	f04f 0200 	mov.w	r2, #0
 8016ad6:	605a      	str	r2, [r3, #4]
		break;
 8016ad8:	e044      	b.n	8016b64 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_IDLE: {
		output->u_1 = 0;
 8016ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016adc:	f04f 0200 	mov.w	r2, #0
 8016ae0:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 8016ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ae4:	f04f 0200 	mov.w	r2, #0
 8016ae8:	605a      	str	r2, [r3, #4]
		break;
 8016aea:	e03b      	b.n	8016b64 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_ERROR: {
		output->u_1 = 0;
 8016aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aee:	f04f 0200 	mov.w	r2, #0
 8016af2:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 8016af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016af6:	f04f 0200 	mov.w	r2, #0
 8016afa:	605a      	str	r2, [r3, #4]
		break;
 8016afc:	e032      	b.n	8016b64 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_RUNNING: {
		switch (this->mode) {
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	785b      	ldrb	r3, [r3, #1]
 8016b02:	2b02      	cmp	r3, #2
 8016b04:	d016      	beq.n	8016b34 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xb0>
 8016b06:	2b02      	cmp	r3, #2
 8016b08:	dc2c      	bgt.n	8016b64 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d002      	beq.n	8016b14 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0x90>
 8016b0e:	2b01      	cmp	r3, #1
 8016b10:	d009      	beq.n	8016b26 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xa2>
			this->_calculateOutput(state, input, output);
		}
		}
	}
	}
}
 8016b12:	e027      	b.n	8016b64 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			output->u_1 = 0;
 8016b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b16:	f04f 0200 	mov.w	r2, #0
 8016b1a:	601a      	str	r2, [r3, #0]
			output->u_2 = 0;
 8016b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b1e:	f04f 0200 	mov.w	r2, #0
 8016b22:	605a      	str	r2, [r3, #4]
			break;
 8016b24:	e01e      	b.n	8016b64 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			output->u_1 = input.u_1;
 8016b26:	687a      	ldr	r2, [r7, #4]
 8016b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b2a:	601a      	str	r2, [r3, #0]
			output->u_2 = input.u_2;
 8016b2c:	68ba      	ldr	r2, [r7, #8]
 8016b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b30:	605a      	str	r2, [r3, #4]
			break;
 8016b32:	e017      	b.n	8016b64 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			this->_calculateOutput(state, input, output);
 8016b34:	ed97 7a01 	vldr	s14, [r7, #4]
 8016b38:	edd7 7a02 	vldr	s15, [r7, #8]
 8016b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b3e:	9302      	str	r3, [sp, #8]
 8016b40:	466a      	mov	r2, sp
 8016b42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016b46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016b4a:	e882 0003 	stmia.w	r2, {r0, r1}
 8016b4e:	f107 031c 	add.w	r3, r7, #28
 8016b52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016b54:	eeb0 0a47 	vmov.f32	s0, s14
 8016b58:	eef0 0a67 	vmov.f32	s1, s15
 8016b5c:	68f8      	ldr	r0, [r7, #12]
 8016b5e:	f000 f809 	bl	8016b74 <_ZN22TWIPR_BalancingControl16_calculateOutputE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>
}
 8016b62:	e7ff      	b.n	8016b64 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 8016b64:	bf00      	nop
 8016b66:	3710      	adds	r7, #16
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016b6e:	b004      	add	sp, #16
 8016b70:	4770      	bx	lr
 8016b72:	bf00      	nop

08016b74 <_ZN22TWIPR_BalancingControl16_calculateOutputE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>:
/* ========================================================================= */
void TWIPR_BalancingControl::_calculateOutput(twipr_estimation_state_t state,
		twipr_balancing_control_input_t input,
		twipr_balancing_control_output_t *output) {
 8016b74:	b084      	sub	sp, #16
 8016b76:	b480      	push	{r7}
 8016b78:	b085      	sub	sp, #20
 8016b7a:	af00      	add	r7, sp, #0
 8016b7c:	60f8      	str	r0, [r7, #12]
 8016b7e:	f107 001c 	add.w	r0, r7, #28
 8016b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016b86:	eeb0 7a40 	vmov.f32	s14, s0
 8016b8a:	eef0 7a60 	vmov.f32	s15, s1
 8016b8e:	ed87 7a01 	vstr	s14, [r7, #4]
 8016b92:	edc7 7a02 	vstr	s15, [r7, #8]
	output->u_1 = this->config.K[0] * state.v + this->config.K[1] * state.theta
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	ed93 7a01 	vldr	s14, [r3, #4]
 8016b9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8016ba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	edd3 6a02 	vldr	s13, [r3, #8]
 8016baa:	edd7 7a08 	vldr	s15, [r7, #32]
 8016bae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016bb2:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[2] * state.theta_dot
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	edd3 6a03 	vldr	s13, [r3, #12]
 8016bbc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016bc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016bc4:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[3] * state.psi_dot;
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	edd3 6a04 	vldr	s13, [r3, #16]
 8016bce:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
	output->u_1 = this->config.K[0] * state.v + this->config.K[1] * state.theta
 8016bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016bdc:	edc3 7a00 	vstr	s15, [r3]

	output->u_2 = this->config.K[4] * state.v + this->config.K[5] * state.theta
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	ed93 7a05 	vldr	s14, [r3, #20]
 8016be6:	edd7 7a07 	vldr	s15, [r7, #28]
 8016bea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	edd3 6a06 	vldr	s13, [r3, #24]
 8016bf4:	edd7 7a08 	vldr	s15, [r7, #32]
 8016bf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[6] * state.theta_dot
 8016c00:	68fb      	ldr	r3, [r7, #12]
 8016c02:	edd3 6a07 	vldr	s13, [r3, #28]
 8016c06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8016c0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016c0e:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[7] * state.psi_dot;
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	edd3 6a08 	vldr	s13, [r3, #32]
 8016c18:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8016c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8016c20:	ee77 7a27 	vadd.f32	s15, s14, s15
	output->u_2 = this->config.K[4] * state.v + this->config.K[5] * state.theta
 8016c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c26:	edc3 7a01 	vstr	s15, [r3, #4]

	output->u_1 = output->u_1 + input.u_1;
 8016c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c2c:	ed93 7a00 	vldr	s14, [r3]
 8016c30:	edd7 7a01 	vldr	s15, [r7, #4]
 8016c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c3a:	edc3 7a00 	vstr	s15, [r3]
	output->u_2 = output->u_2 + input.u_2;
 8016c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c40:	ed93 7a01 	vldr	s14, [r3, #4]
 8016c44:	edd7 7a02 	vldr	s15, [r7, #8]
 8016c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c4e:	edc3 7a01 	vstr	s15, [r3, #4]

}
 8016c52:	bf00      	nop
 8016c54:	3714      	adds	r7, #20
 8016c56:	46bd      	mov	sp, r7
 8016c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c5c:	b004      	add	sp, #16
 8016c5e:	4770      	bx	lr

08016c60 <_ZN22TWIPR_BalancingControl4stopEv>:
void TWIPR_BalancingControl::reset() {
	this->stop();
	this->start();
}
/* ========================================================================= */
void TWIPR_BalancingControl::stop() {
 8016c60:	b480      	push	{r7}
 8016c62:	b083      	sub	sp, #12
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
	this->mode = TWIPR_BALANCING_CONTROL_MODE_OFF;
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	705a      	strb	r2, [r3, #1]
//	this->status = TWIPR_BALANCING_CONTROL_STATUS_IDLE;
}
 8016c6e:	bf00      	nop
 8016c70:	370c      	adds	r7, #12
 8016c72:	46bd      	mov	sp, r7
 8016c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c78:	4770      	bx	lr

08016c7a <_ZN22TWIPR_BalancingControl5set_KEPf>:
/* ========================================================================= */
void TWIPR_BalancingControl::set_K(float K[8]) {
 8016c7a:	b580      	push	{r7, lr}
 8016c7c:	b082      	sub	sp, #8
 8016c7e:	af00      	add	r7, sp, #0
 8016c80:	6078      	str	r0, [r7, #4]
 8016c82:	6039      	str	r1, [r7, #0]
	memcpy(this->config.K, K, sizeof(float) * 8);
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	3304      	adds	r3, #4
 8016c88:	2220      	movs	r2, #32
 8016c8a:	6839      	ldr	r1, [r7, #0]
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	f00c fb98 	bl	80233c2 <memcpy>
}
 8016c92:	bf00      	nop
 8016c94:	3708      	adds	r7, #8
 8016c96:	46bd      	mov	sp, r7
 8016c98:	bd80      	pop	{r7, pc}

08016c9a <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>:
/* ========================================================================= */
void TWIPR_BalancingControl::setMode(twipr_balancing_control_mode_t mode) {
 8016c9a:	b480      	push	{r7}
 8016c9c:	b083      	sub	sp, #12
 8016c9e:	af00      	add	r7, sp, #0
 8016ca0:	6078      	str	r0, [r7, #4]
 8016ca2:	460b      	mov	r3, r1
 8016ca4:	70fb      	strb	r3, [r7, #3]

	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_ERROR){
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	f993 3000 	ldrsb.w	r3, [r3]
 8016cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cb0:	d008      	beq.n	8016cc4 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x2a>
		return;
	}

	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_NONE){
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d005      	beq.n	8016cc8 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x2e>
		return;
	}
	this->mode = mode;
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	78fa      	ldrb	r2, [r7, #3]
 8016cc0:	705a      	strb	r2, [r3, #1]
 8016cc2:	e002      	b.n	8016cca <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x30>
		return;
 8016cc4:	bf00      	nop
 8016cc6:	e000      	b.n	8016cca <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x30>
		return;
 8016cc8:	bf00      	nop
}
 8016cca:	370c      	adds	r7, #12
 8016ccc:	46bd      	mov	sp, r7
 8016cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd2:	4770      	bx	lr

08016cd4 <_ZN13RegisterEntry5writeEPv>:


/* ============================================================ */
class RegisterEntry {
public:
	virtual void write(void *value) {
 8016cd4:	b480      	push	{r7}
 8016cd6:	b083      	sub	sp, #12
 8016cd8:	af00      	add	r7, sp, #0
 8016cda:	6078      	str	r0, [r7, #4]
 8016cdc:	6039      	str	r1, [r7, #0]
		;
	}
 8016cde:	bf00      	nop
 8016ce0:	370c      	adds	r7, #12
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ce8:	4770      	bx	lr

08016cea <_ZN13RegisterEntry5writeEPh>:
	virtual void write(uint8_t *data) {
 8016cea:	b480      	push	{r7}
 8016cec:	b083      	sub	sp, #12
 8016cee:	af00      	add	r7, sp, #0
 8016cf0:	6078      	str	r0, [r7, #4]
 8016cf2:	6039      	str	r1, [r7, #0]
		;
	}
 8016cf4:	bf00      	nop
 8016cf6:	370c      	adds	r7, #12
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfe:	4770      	bx	lr

08016d00 <_ZN13RegisterEntry9readBytesEPh>:
	virtual uint8_t readBytes(uint8_t *data) {
 8016d00:	b480      	push	{r7}
 8016d02:	b083      	sub	sp, #12
 8016d04:	af00      	add	r7, sp, #0
 8016d06:	6078      	str	r0, [r7, #4]
 8016d08:	6039      	str	r1, [r7, #0]
		return 0;
 8016d0a:	2300      	movs	r3, #0
	}
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	370c      	adds	r7, #12
 8016d10:	46bd      	mov	sp, r7
 8016d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d16:	4770      	bx	lr

08016d18 <_ZN13RegisterEntry7getSizeEv>:
	virtual uint8_t getSize() {
 8016d18:	b480      	push	{r7}
 8016d1a:	b083      	sub	sp, #12
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
		return 0;;
 8016d20:	2300      	movs	r3, #0
	}
 8016d22:	4618      	mov	r0, r3
 8016d24:	370c      	adds	r7, #12
 8016d26:	46bd      	mov	sp, r7
 8016d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d2c:	4770      	bx	lr

08016d2e <_ZN13RegisterEntry12getInputSizeEv>:
	virtual uint8_t getInputSize() {
 8016d2e:	b480      	push	{r7}
 8016d30:	b083      	sub	sp, #12
 8016d32:	af00      	add	r7, sp, #0
 8016d34:	6078      	str	r0, [r7, #4]
		return 0;
 8016d36:	2300      	movs	r3, #0
	}
 8016d38:	4618      	mov	r0, r3
 8016d3a:	370c      	adds	r7, #12
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d42:	4770      	bx	lr

08016d44 <_ZN13RegisterEntry13getOutputSizeEv>:

	virtual uint8_t getOutputSize() {
 8016d44:	b480      	push	{r7}
 8016d46:	b083      	sub	sp, #12
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
		return 0;
 8016d4c:	2300      	movs	r3, #0
	}
 8016d4e:	4618      	mov	r0, r3
 8016d50:	370c      	adds	r7, #12
 8016d52:	46bd      	mov	sp, r7
 8016d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d58:	4770      	bx	lr

08016d5a <_ZN13RegisterEntry7executeEv>:

	virtual void execute() {
 8016d5a:	b480      	push	{r7}
 8016d5c:	b083      	sub	sp, #12
 8016d5e:	af00      	add	r7, sp, #0
 8016d60:	6078      	str	r0, [r7, #4]
	}
 8016d62:	bf00      	nop
 8016d64:	370c      	adds	r7, #12
 8016d66:	46bd      	mov	sp, r7
 8016d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d6c:	4770      	bx	lr

08016d6e <_ZN13RegisterEntry7executeEPhS0_>:

	virtual uint8_t execute(uint8_t *input, uint8_t *output) {
 8016d6e:	b480      	push	{r7}
 8016d70:	b085      	sub	sp, #20
 8016d72:	af00      	add	r7, sp, #0
 8016d74:	60f8      	str	r0, [r7, #12]
 8016d76:	60b9      	str	r1, [r7, #8]
 8016d78:	607a      	str	r2, [r7, #4]
		return 0;
 8016d7a:	2300      	movs	r3, #0
	}
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	3714      	adds	r7, #20
 8016d80:	46bd      	mov	sp, r7
 8016d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d86:	4770      	bx	lr

08016d88 <_ZN11RegisterMap5writeEtPv>:
};

/* ============================================================ */
class RegisterMap {
public:
	virtual void write(uint16_t address, void *data) {
 8016d88:	b480      	push	{r7}
 8016d8a:	b085      	sub	sp, #20
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	60f8      	str	r0, [r7, #12]
 8016d90:	460b      	mov	r3, r1
 8016d92:	607a      	str	r2, [r7, #4]
 8016d94:	817b      	strh	r3, [r7, #10]
	}
 8016d96:	bf00      	nop
 8016d98:	3714      	adds	r7, #20
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da0:	4770      	bx	lr

08016da2 <_ZN11RegisterMap5writeEtPh>:
	virtual void write(uint16_t address, uint8_t *data) {
 8016da2:	b480      	push	{r7}
 8016da4:	b085      	sub	sp, #20
 8016da6:	af00      	add	r7, sp, #0
 8016da8:	60f8      	str	r0, [r7, #12]
 8016daa:	460b      	mov	r3, r1
 8016dac:	607a      	str	r2, [r7, #4]
 8016dae:	817b      	strh	r3, [r7, #10]
	}
 8016db0:	bf00      	nop
 8016db2:	3714      	adds	r7, #20
 8016db4:	46bd      	mov	sp, r7
 8016db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dba:	4770      	bx	lr

08016dbc <_ZN11RegisterMap8addEntryEtP13RegisterEntry>:
	virtual void addEntry(uint16_t address, RegisterEntry *entry) {
 8016dbc:	b480      	push	{r7}
 8016dbe:	b085      	sub	sp, #20
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	60f8      	str	r0, [r7, #12]
 8016dc4:	460b      	mov	r3, r1
 8016dc6:	607a      	str	r2, [r7, #4]
 8016dc8:	817b      	strh	r3, [r7, #10]

	}
 8016dca:	bf00      	nop
 8016dcc:	3714      	adds	r7, #20
 8016dce:	46bd      	mov	sp, r7
 8016dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dd4:	4770      	bx	lr

08016dd6 <_ZN11RegisterMap8hasEntryEt>:
	virtual bool hasEntry(uint16_t address) {
 8016dd6:	b480      	push	{r7}
 8016dd8:	b083      	sub	sp, #12
 8016dda:	af00      	add	r7, sp, #0
 8016ddc:	6078      	str	r0, [r7, #4]
 8016dde:	460b      	mov	r3, r1
 8016de0:	807b      	strh	r3, [r7, #2]
		return false;
 8016de2:	2300      	movs	r3, #0
	}
 8016de4:	4618      	mov	r0, r3
 8016de6:	370c      	adds	r7, #12
 8016de8:	46bd      	mov	sp, r7
 8016dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dee:	4770      	bx	lr

08016df0 <_ZN11RegisterMap4readEtPh>:
	virtual uint8_t read(uint16_t address, uint8_t *data) {
 8016df0:	b480      	push	{r7}
 8016df2:	b085      	sub	sp, #20
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	60f8      	str	r0, [r7, #12]
 8016df8:	460b      	mov	r3, r1
 8016dfa:	607a      	str	r2, [r7, #4]
 8016dfc:	817b      	strh	r3, [r7, #10]
		return 0;
 8016dfe:	2300      	movs	r3, #0
	}
 8016e00:	4618      	mov	r0, r3
 8016e02:	3714      	adds	r7, #20
 8016e04:	46bd      	mov	sp, r7
 8016e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0a:	4770      	bx	lr

08016e0c <_ZN11RegisterMap7getSizeEt>:
	virtual uint8_t getSize(uint16_t address) {
 8016e0c:	b480      	push	{r7}
 8016e0e:	b083      	sub	sp, #12
 8016e10:	af00      	add	r7, sp, #0
 8016e12:	6078      	str	r0, [r7, #4]
 8016e14:	460b      	mov	r3, r1
 8016e16:	807b      	strh	r3, [r7, #2]
		return 0;
 8016e18:	2300      	movs	r3, #0
	}
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	370c      	adds	r7, #12
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e24:	4770      	bx	lr

08016e26 <_ZN11RegisterMap7executeEtPhS0_>:
	virtual register_entry_type getType(uint16_t address) = 0;
	virtual register_entry_rw_t getReadWriteSetting(uint16_t address) = 0;

	/* -------------------------------------------------- */
	virtual uint8_t execute(uint16_t address, uint8_t *input, uint8_t *output) {
 8016e26:	b480      	push	{r7}
 8016e28:	b085      	sub	sp, #20
 8016e2a:	af00      	add	r7, sp, #0
 8016e2c:	60f8      	str	r0, [r7, #12]
 8016e2e:	607a      	str	r2, [r7, #4]
 8016e30:	603b      	str	r3, [r7, #0]
 8016e32:	460b      	mov	r3, r1
 8016e34:	817b      	strh	r3, [r7, #10]
		return 0;
 8016e36:	2300      	movs	r3, #0
	}
 8016e38:	4618      	mov	r0, r3
 8016e3a:	3714      	adds	r7, #20
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e42:	4770      	bx	lr

08016e44 <_ZN11RegisterMap7executeEt>:
	/* -------------------------------------------------- */
	virtual uint8_t execute(uint16_t address) {
 8016e44:	b480      	push	{r7}
 8016e46:	b083      	sub	sp, #12
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
 8016e4c:	460b      	mov	r3, r1
 8016e4e:	807b      	strh	r3, [r7, #2]
		return 0;
 8016e50:	2300      	movs	r3, #0
	}
 8016e52:	4618      	mov	r0, r3
 8016e54:	370c      	adds	r7, #12
 8016e56:	46bd      	mov	sp, r7
 8016e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5c:	4770      	bx	lr
	...

08016e60 <_ZN13RegisterEntryC1Ev>:
class RegisterEntry {
 8016e60:	b480      	push	{r7}
 8016e62:	b083      	sub	sp, #12
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
 8016e68:	4a04      	ldr	r2, [pc, #16]	; (8016e7c <_ZN13RegisterEntryC1Ev+0x1c>)
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	601a      	str	r2, [r3, #0]
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	4618      	mov	r0, r3
 8016e72:	370c      	adds	r7, #12
 8016e74:	46bd      	mov	sp, r7
 8016e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7a:	4770      	bx	lr
 8016e7c:	08025730 	.word	0x08025730

08016e80 <_ZN27core_utils_RegisterFunctionIvvEC1Ev>:

/* ============================================================ */
template<>
class core_utils_RegisterFunction<void, void> : public RegisterEntry {
public:
	core_utils_RegisterFunction() {
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b082      	sub	sp, #8
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	4618      	mov	r0, r3
 8016e8c:	f7ff ffe8 	bl	8016e60 <_ZN13RegisterEntryC1Ev>
 8016e90:	4a06      	ldr	r2, [pc, #24]	; (8016eac <_ZN27core_utils_RegisterFunctionIvvEC1Ev+0x2c>)
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	601a      	str	r2, [r3, #0]
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	330c      	adds	r3, #12
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	f7fd fba0 	bl	80145e0 <_ZN19core_utils_CallbackIvvEC1Ev>

	}
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	3708      	adds	r7, #8
 8016ea6:	46bd      	mov	sp, r7
 8016ea8:	bd80      	pop	{r7, pc}
 8016eaa:	bf00      	nop
 8016eac:	080256d0 	.word	0x080256d0

08016eb0 <_ZN8CallbackC1EOS_>:
class Callback {
 8016eb0:	b480      	push	{r7}
 8016eb2:	b083      	sub	sp, #12
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6078      	str	r0, [r7, #4]
 8016eb8:	6039      	str	r1, [r7, #0]
 8016eba:	4a05      	ldr	r2, [pc, #20]	; (8016ed0 <_ZN8CallbackC1EOS_+0x20>)
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	601a      	str	r2, [r3, #0]
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	370c      	adds	r7, #12
 8016ec6:	46bd      	mov	sp, r7
 8016ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ecc:	4770      	bx	lr
 8016ece:	bf00      	nop
 8016ed0:	08025400 	.word	0x08025400

08016ed4 <_ZN27core_utils_RegisterFunctionIvvE3setEtP11RegisterMap19core_utils_CallbackIvvE>:
		this->function = function;
		map->addEntry(this->address, this);
		this->type = REGISTER_ENTRY_FUNCTION;
	}
	/* -------------------------------------------------- */
	void set(uint16_t address, RegisterMap *map,
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b084      	sub	sp, #16
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	60f8      	str	r0, [r7, #12]
 8016edc:	607a      	str	r2, [r7, #4]
 8016ede:	603b      	str	r3, [r7, #0]
 8016ee0:	460b      	mov	r3, r1
 8016ee2:	817b      	strh	r3, [r7, #10]
			core_utils_Callback<void, void> function) {
		this->address = address;
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	897a      	ldrh	r2, [r7, #10]
 8016ee8:	811a      	strh	r2, [r3, #8]
		this->function = function;
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	330c      	adds	r3, #12
 8016eee:	6839      	ldr	r1, [r7, #0]
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f7fd f93d 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		map->addEntry(this->address, this);
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	3308      	adds	r3, #8
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	68fa      	ldr	r2, [r7, #12]
 8016f00:	8911      	ldrh	r1, [r2, #8]
 8016f02:	68fa      	ldr	r2, [r7, #12]
 8016f04:	6878      	ldr	r0, [r7, #4]
 8016f06:	4798      	blx	r3
		this->type = REGISTER_ENTRY_FUNCTION;
 8016f08:	68fb      	ldr	r3, [r7, #12]
 8016f0a:	2202      	movs	r2, #2
 8016f0c:	719a      	strb	r2, [r3, #6]
	}
 8016f0e:	bf00      	nop
 8016f10:	3710      	adds	r7, #16
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bd80      	pop	{r7, pc}

08016f16 <_ZN27core_utils_RegisterFunctionIvvE7executeEv>:

	/* -------------------------------------------------- */
	void execute() {
 8016f16:	b580      	push	{r7, lr}
 8016f18:	b082      	sub	sp, #8
 8016f1a:	af00      	add	r7, sp, #0
 8016f1c:	6078      	str	r0, [r7, #4]
		if (this->function.registered) {
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	7c1b      	ldrb	r3, [r3, #16]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d005      	beq.n	8016f32 <_ZN27core_utils_RegisterFunctionIvvE7executeEv+0x1c>
			return this->function.call();
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	330c      	adds	r3, #12
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	f7fc ffa1 	bl	8013e72 <_ZN19core_utils_CallbackIvvE4callEv>
 8016f30:	bf00      	nop
		}
	}
 8016f32:	3708      	adds	r7, #8
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd80      	pop	{r7, pc}

08016f38 <_ZN27core_utils_RegisterFunctionIvvE7executeEPhS1_>:
		this->execute();
		return 0;
	}

	/* -------------------------------------------------- */
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 8016f38:	b580      	push	{r7, lr}
 8016f3a:	b084      	sub	sp, #16
 8016f3c:	af00      	add	r7, sp, #0
 8016f3e:	60f8      	str	r0, [r7, #12]
 8016f40:	60b9      	str	r1, [r7, #8]
 8016f42:	607a      	str	r2, [r7, #4]
		this->execute();
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	3318      	adds	r3, #24
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	68f8      	ldr	r0, [r7, #12]
 8016f4e:	4798      	blx	r3
		return 0;
 8016f50:	2300      	movs	r3, #0
	}
 8016f52:	4618      	mov	r0, r3
 8016f54:	3710      	adds	r7, #16
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bd80      	pop	{r7, pc}

08016f5a <_ZN27core_utils_RegisterFunctionIvvE7getSizeEv>:
	/* -------------------------------------------------- */
	uint8_t getSize() {
 8016f5a:	b480      	push	{r7}
 8016f5c:	b083      	sub	sp, #12
 8016f5e:	af00      	add	r7, sp, #0
 8016f60:	6078      	str	r0, [r7, #4]
		return 0;
 8016f62:	2300      	movs	r3, #0
	}
 8016f64:	4618      	mov	r0, r3
 8016f66:	370c      	adds	r7, #12
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f6e:	4770      	bx	lr

08016f70 <_ZN27core_utils_RegisterFunctionIvvE12getInputSizeEv>:
	/* -------------------------------------------------- */
	uint8_t getInputSize() {
 8016f70:	b480      	push	{r7}
 8016f72:	b083      	sub	sp, #12
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
		return 0;
 8016f78:	2300      	movs	r3, #0
	}
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	370c      	adds	r7, #12
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f84:	4770      	bx	lr

08016f86 <_ZN27core_utils_RegisterFunctionIvvE13getOutputSizeEv>:

	/* -------------------------------------------------- */
	uint8_t getOutputSize() {
 8016f86:	b480      	push	{r7}
 8016f88:	b083      	sub	sp, #12
 8016f8a:	af00      	add	r7, sp, #0
 8016f8c:	6078      	str	r0, [r7, #4]
		return 0;
 8016f8e:	2300      	movs	r3, #0
	}
 8016f90:	4618      	mov	r0, r3
 8016f92:	370c      	adds	r7, #12
 8016f94:	46bd      	mov	sp, r7
 8016f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f9a:	4770      	bx	lr

08016f9c <_ZN27core_utils_RegisterFunctionIvvE7getTypeEv>:

	/* -------------------------------------------------- */
	register_entry_type getType() {
 8016f9c:	b480      	push	{r7}
 8016f9e:	b083      	sub	sp, #12
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 8016fa4:	2302      	movs	r3, #2
	}
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	370c      	adds	r7, #12
 8016faa:	46bd      	mov	sp, r7
 8016fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb0:	4770      	bx	lr

08016fb2 <_ZN27core_utils_RegisterFunctionIvvE19getReadWriteSettingEv>:
	/* -------------------------------------------------- */
	register_entry_rw_t getReadWriteSetting() {
 8016fb2:	b480      	push	{r7}
 8016fb4:	b083      	sub	sp, #12
 8016fb6:	af00      	add	r7, sp, #0
 8016fb8:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 8016fba:	2302      	movs	r3, #2
	}
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	370c      	adds	r7, #12
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc6:	4770      	bx	lr

08016fc8 <_Z18twipr_control_taskPv>:
TWIPR_ControlManager *manager;

osSemaphoreId_t semaphore_external_input;

/* ======================================================== */
void twipr_control_task(void *argument) {
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b084      	sub	sp, #16
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
	TWIPR_ControlManager *control_manager = (TWIPR_ControlManager*) argument;
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	60fb      	str	r3, [r7, #12]
	control_manager->task_function();
 8016fd4:	68f8      	ldr	r0, [r7, #12]
 8016fd6:	f000 f9bf 	bl	8017358 <_ZN20TWIPR_ControlManager13task_functionEv>
}
 8016fda:	bf00      	nop
 8016fdc:	3710      	adds	r7, #16
 8016fde:	46bd      	mov	sp, r7
 8016fe0:	bd80      	pop	{r7, pc}

08016fe2 <_ZN27twipr_control_reg_entries_tC1Ev>:
#define TWIPR_CONTROL_REG_FUNCTION_STOP 0x06
#define TWIPR_CONTROL_REG_ENTRY_CONFIG 0x07
#define TWIPR_CONTROL_REG_FUNCTION_SET_K 0x08
#define TWIPR_CONTROL_REG_ENTRY_PITCH_OFFSET 0x09

typedef struct twipr_control_reg_entries_t {
 8016fe2:	b580      	push	{r7, lr}
 8016fe4:	b082      	sub	sp, #8
 8016fe6:	af00      	add	r7, sp, #0
 8016fe8:	6078      	str	r0, [r7, #4]
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	4618      	mov	r0, r3
 8016fee:	f000 ff55 	bl	8017e9c <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tEC1Ev>
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	3334      	adds	r3, #52	; 0x34
 8016ff6:	4618      	mov	r0, r3
 8016ff8:	f000 ff6a 	bl	8017ed0 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tEC1Ev>
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	3348      	adds	r3, #72	; 0x48
 8017000:	4618      	mov	r0, r3
 8017002:	f000 ff89 	bl	8017f18 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tEC1Ev>
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	335c      	adds	r3, #92	; 0x5c
 801700a:	4618      	mov	r0, r3
 801700c:	f000 ffa8 	bl	8017f60 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tEC1Ev>
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	3388      	adds	r3, #136	; 0x88
 8017014:	4618      	mov	r0, r3
 8017016:	f000 ffbd 	bl	8017f94 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tEC1Ev>
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	33b8      	adds	r3, #184	; 0xb8
 801701e:	4618      	mov	r0, r3
 8017020:	f7ff ff2e 	bl	8016e80 <_ZN27core_utils_RegisterFunctionIvvEC1Ev>
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	33e4      	adds	r3, #228	; 0xe4
 8017028:	4618      	mov	r0, r3
 801702a:	f000 ffcd 	bl	8017fc8 <_ZN27core_utils_RegisterFunctionIhA8_fEC1Ev>
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8017034:	4618      	mov	r0, r3
 8017036:	f000 ffe3 	bl	8018000 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tEC1Ev>
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8017040:	4618      	mov	r0, r3
 8017042:	f001 f801 	bl	8018048 <_ZN27core_utils_RegisterFunctionIvfEC1Ev>
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	4618      	mov	r0, r3
 801704a:	3708      	adds	r7, #8
 801704c:	46bd      	mov	sp, r7
 801704e:	bd80      	pop	{r7, pc}

08017050 <_ZN25twipr_control_callbacks_tC1Ev>:
typedef struct twipr_control_callbacks_t {
 8017050:	b580      	push	{r7, lr}
 8017052:	b082      	sub	sp, #8
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	4618      	mov	r0, r3
 801705c:	f7fc ff16 	bl	8013e8c <_ZN19core_utils_CallbackIvtEC1Ev>
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	3320      	adds	r3, #32
 8017064:	4618      	mov	r0, r3
 8017066:	f7fc ff11 	bl	8013e8c <_ZN19core_utils_CallbackIvtEC1Ev>
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	3340      	adds	r3, #64	; 0x40
 801706e:	4618      	mov	r0, r3
 8017070:	f7fc ff0c 	bl	8013e8c <_ZN19core_utils_CallbackIvtEC1Ev>
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	3360      	adds	r3, #96	; 0x60
 8017078:	4618      	mov	r0, r3
 801707a:	f000 ffff 	bl	801807c <_ZN19core_utils_CallbackIvmEC1Ev>
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	4618      	mov	r0, r3
 8017082:	3708      	adds	r7, #8
 8017084:	46bd      	mov	sp, r7
 8017086:	bd80      	pop	{r7, pc}

08017088 <_ZN20TWIPR_ControlManagerC1Ev>:

/* ======================================================== */
TWIPR_ControlManager::TWIPR_ControlManager() {
 8017088:	b580      	push	{r7, lr}
 801708a:	b082      	sub	sp, #8
 801708c:	af00      	add	r7, sp, #0
 801708e:	6078      	str	r0, [r7, #4]
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	2200      	movs	r2, #0
 8017094:	701a      	strb	r2, [r3, #0]
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	2200      	movs	r2, #0
 801709a:	705a      	strb	r2, [r3, #1]
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	3334      	adds	r3, #52	; 0x34
 80170a0:	4618      	mov	r0, r3
 80170a2:	f7ff ff9e 	bl	8016fe2 <_ZN27twipr_control_reg_entries_tC1Ev>
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80170ac:	2102      	movs	r1, #2
 80170ae:	4618      	mov	r0, r3
 80170b0:	f000 fed6 	bl	8017e60 <_ZN22core_utils_RegisterMapILi20EEC1Et>
 80170b4:	687a      	ldr	r2, [r7, #4]
 80170b6:	f243 1318 	movw	r3, #12568	; 0x3118
 80170ba:	4413      	add	r3, r2
 80170bc:	4618      	mov	r0, r3
 80170be:	f7ff fc97 	bl	80169f0 <_ZN22TWIPR_BalancingControlC1Ev>
 80170c2:	687a      	ldr	r2, [r7, #4]
 80170c4:	f246 038c 	movw	r3, #24716	; 0x608c
 80170c8:	4413      	add	r3, r2
 80170ca:	4618      	mov	r0, r3
 80170cc:	f7ff ffc0 	bl	8017050 <_ZN25twipr_control_callbacks_tC1Ev>
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80170d6:	461a      	mov	r2, r3
 80170d8:	f04f 0300 	mov.w	r3, #0
 80170dc:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80170e6:	461a      	mov	r2, r3
 80170e8:	f04f 0300 	mov.w	r3, #0
 80170ec:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

}
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	4618      	mov	r0, r3
 80170f4:	3708      	adds	r7, #8
 80170f6:	46bd      	mov	sp, r7
 80170f8:	bd80      	pop	{r7, pc}
	...

080170fc <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t>:

/* ======================================================== */
void TWIPR_ControlManager::init(twipr_control_config_t config) {
 80170fc:	b084      	sub	sp, #16
 80170fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017100:	b0c5      	sub	sp, #276	; 0x114
 8017102:	af06      	add	r7, sp, #24
 8017104:	6078      	str	r0, [r7, #4]
 8017106:	f507 708a 	add.w	r0, r7, #276	; 0x114
 801710a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	manager = this;
 801710e:	4a83      	ldr	r2, [pc, #524]	; (801731c <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x220>)
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	6013      	str	r3, [r2, #0]
	this->config = config;
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	1d1c      	adds	r4, r3, #4
 8017118:	f507 758a 	add.w	r5, r7, #276	; 0x114
 801711c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801711e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017124:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8017128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	this->_estimation = config.estimation;
 801712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8017130:	687a      	ldr	r2, [r7, #4]
 8017132:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8017136:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

	// Initialize the balancing controller
	twipr_balancing_control_config_t balancing_control_config;
 801713a:	f107 030c 	add.w	r3, r7, #12
 801713e:	4618      	mov	r0, r3
 8017140:	f7ff fc47 	bl	80169d2 <_ZN32twipr_balancing_control_config_tC1Ev>
	memcpy(balancing_control_config.K, this->config.K,
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	f103 010c 	add.w	r1, r3, #12
 801714a:	f107 030c 	add.w	r3, r7, #12
 801714e:	2220      	movs	r2, #32
 8017150:	4618      	mov	r0, r3
 8017152:	f00c f936 	bl	80233c2 <memcpy>
			sizeof(balancing_control_config.K));
	this->_balancing_control.init(balancing_control_config);
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	f243 1618 	movw	r6, #12568	; 0x3118
 801715c:	441e      	add	r6, r3
 801715e:	466d      	mov	r5, sp
 8017160:	f107 0418 	add.w	r4, r7, #24
 8017164:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017166:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017168:	e894 0003 	ldmia.w	r4, {r0, r1}
 801716c:	e885 0003 	stmia.w	r5, {r0, r1}
 8017170:	f107 030c 	add.w	r3, r7, #12
 8017174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017176:	4630      	mov	r0, r6
 8017178:	f7ff fc4e 	bl	8016a18 <_ZN22TWIPR_BalancingControl4initE32twipr_balancing_control_config_t>

	this->status = TWIPR_CONTROL_STATUS_IDLE;
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	2200      	movs	r2, #0
 8017180:	701a      	strb	r2, [r3, #0]
	this->mode = TWIPR_CONTROL_MODE_OFF;
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	2200      	movs	r2, #0
 8017186:	705a      	strb	r2, [r3, #1]
	this->_input.u_1 = 0;
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801718e:	461a      	mov	r2, r3
 8017190:	f04f 0300 	mov.w	r3, #0
 8017194:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178
	this->_input.u_2 = 0;
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801719e:	461a      	mov	r2, r3
 80171a0:	f04f 0300 	mov.w	r3, #0
 80171a4:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
	this->_output.u_left = 0;
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80171ae:	461a      	mov	r2, r3
 80171b0:	f04f 0300 	mov.w	r3, #0
 80171b4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	this->_output.u_right = 0;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80171be:	461a      	mov	r2, r3
 80171c0:	f04f 0300 	mov.w	r3, #0
 80171c4:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	this->_tick = 0;
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80171ce:	461a      	mov	r2, r3
 80171d0:	2300      	movs	r3, #0
 80171d2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

	// Setting the Register Entries
	this->reg_entries.reg_function_set_external_input.set(
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	f503 75ee 	add.w	r5, r3, #476	; 0x1dc
	TWIPR_CONTROL_REG_ENTRY_EXT_INPUT, &this->reg_map,
			core_utils_Callback<void, twipr_control_input_t>(this,
 80171e2:	4b4f      	ldr	r3, [pc, #316]	; (8017320 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x224>)
 80171e4:	653b      	str	r3, [r7, #80]	; 0x50
 80171e6:	2300      	movs	r3, #0
 80171e8:	657b      	str	r3, [r7, #84]	; 0x54
 80171ea:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80171ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80171f2:	cb0c      	ldmia	r3, {r2, r3}
 80171f4:	6879      	ldr	r1, [r7, #4]
 80171f6:	f000 ff5f 	bl	80180b8 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
	this->reg_entries.reg_function_set_external_input.set(
 80171fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80171fe:	462a      	mov	r2, r5
 8017200:	2101      	movs	r1, #1
 8017202:	4620      	mov	r0, r4
 8017204:	f000 ffac 	bl	8018160 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE3setEtP11RegisterMap19core_utils_CallbackIvS0_E>
					&TWIPR_ControlManager::setInput));

	this->reg_entries.reg_entry_status.set(
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	2100      	movs	r1, #0
 8017218:	9100      	str	r1, [sp, #0]
 801721a:	2102      	movs	r1, #2
 801721c:	f000 ffbe 	bl	801819c <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>
	TWIPR_CONTROL_REG_ENTRY_STATUS, &this->reg_map, &this->status,
			REGISTER_ENTRY_READ);

	this->reg_entries.reg_function_set_mode.set(
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	f503 75ee 	add.w	r5, r3, #476	; 0x1dc
	TWIPR_CONTROL_REG_FUNCTION_SET_MODE, &this->reg_map,
			core_utils_Callback<uint8_t, twipr_control_mode_t>(this,
 801722c:	4b3d      	ldr	r3, [pc, #244]	; (8017324 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x228>)
 801722e:	67bb      	str	r3, [r7, #120]	; 0x78
 8017230:	2300      	movs	r3, #0
 8017232:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017234:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8017238:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801723c:	cb0c      	ldmia	r3, {r2, r3}
 801723e:	6879      	ldr	r1, [r7, #4]
 8017240:	f000 ffca 	bl	80181d8 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
	this->reg_entries.reg_function_set_mode.set(
 8017244:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8017248:	462a      	mov	r2, r5
 801724a:	2104      	movs	r1, #4
 801724c:	4620      	mov	r0, r4
 801724e:	f001 f817 	bl	8018280 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>
					&TWIPR_ControlManager::setMode));

	this->reg_entries.reg_function_start_trajectory.set(
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	f103 04bc 	add.w	r4, r3, #188	; 0xbc
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	f503 75ee 	add.w	r5, r3, #476	; 0x1dc
	TWIPR_CONTROL_REG_FUNCTION_START_TRAJECTORY, &this->reg_map,
			core_utils_Callback<uint8_t, twipr_control_trajectory_t>(this,
 801725e:	4b32      	ldr	r3, [pc, #200]	; (8017328 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x22c>)
 8017260:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8017264:	2300      	movs	r3, #0
 8017266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801726a:	f107 0080 	add.w	r0, r7, #128	; 0x80
 801726e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8017272:	cb0c      	ldmia	r3, {r2, r3}
 8017274:	6879      	ldr	r1, [r7, #4]
 8017276:	f001 f821 	bl	80182bc <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
	this->reg_entries.reg_function_start_trajectory.set(
 801727a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801727e:	462a      	mov	r2, r5
 8017280:	2105      	movs	r1, #5
 8017282:	4620      	mov	r0, r4
 8017284:	f001 f86e 	bl	8018364 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>
					&TWIPR_ControlManager::startTrajectory));

	this->reg_entries.reg_function_stop.set(
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	f103 04ec 	add.w	r4, r3, #236	; 0xec
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	f503 75ee 	add.w	r5, r3, #476	; 0x1dc
	TWIPR_CONTROL_REG_FUNCTION_STOP, &this->reg_map,
			core_utils_Callback<void, void>(this, &TWIPR_ControlManager::stop));
 8017294:	4b25      	ldr	r3, [pc, #148]	; (801732c <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x230>)
 8017296:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801729a:	2300      	movs	r3, #0
 801729c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80172a0:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80172a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80172a8:	cb0c      	ldmia	r3, {r2, r3}
 80172aa:	6879      	ldr	r1, [r7, #4]
 80172ac:	f001 f878 	bl	80183a0 <_ZN19core_utils_CallbackIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE>
	this->reg_entries.reg_function_stop.set(
 80172b0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80172b4:	462a      	mov	r2, r5
 80172b6:	2106      	movs	r1, #6
 80172b8:	4620      	mov	r0, r4
 80172ba:	f7ff fe0b 	bl	8016ed4 <_ZN27core_utils_RegisterFunctionIvvE3setEtP11RegisterMap19core_utils_CallbackIvvE>

	this->reg_entries.reg_entry_config.set(
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	f503 70b2 	add.w	r0, r3, #356	; 0x164
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	f503 72ee 	add.w	r2, r3, #476	; 0x1dc
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	3304      	adds	r3, #4
 80172ce:	2100      	movs	r1, #0
 80172d0:	9100      	str	r1, [sp, #0]
 80172d2:	2107      	movs	r1, #7
 80172d4:	f001 f898 	bl	8018408 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>
	TWIPR_CONTROL_REG_ENTRY_CONFIG, &this->reg_map, &this->config,
			REGISTER_ENTRY_READ);

	this->reg_entries.reg_function_set_K.set(
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	f503 748c 	add.w	r4, r3, #280	; 0x118
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	f503 75ee 	add.w	r5, r3, #476	; 0x1dc
	TWIPR_CONTROL_REG_FUNCTION_SET_K, &this->reg_map,
			core_utils_Callback<uint8_t, float[8]>(this,
 80172e4:	4b12      	ldr	r3, [pc, #72]	; (8017330 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x234>)
 80172e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80172ea:	2300      	movs	r3, #0
 80172ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80172f0:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 80172f4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80172f8:	cb0c      	ldmia	r3, {r2, r3}
 80172fa:	6879      	ldr	r1, [r7, #4]
 80172fc:	f001 f8a2 	bl	8018444 <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>
	this->reg_entries.reg_function_set_K.set(
 8017300:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8017304:	462a      	mov	r2, r5
 8017306:	2108      	movs	r1, #8
 8017308:	4620      	mov	r0, r4
 801730a:	f001 f8ef 	bl	80184ec <_ZN27core_utils_RegisterFunctionIhA8_fE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>



//	semaphore_external_input = osSemaphoreNew(1, 1, NULL);

}
 801730e:	bf00      	nop
 8017310:	37fc      	adds	r7, #252	; 0xfc
 8017312:	46bd      	mov	sp, r7
 8017314:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017318:	b004      	add	sp, #16
 801731a:	4770      	bx	lr
 801731c:	24015418 	.word	0x24015418
 8017320:	08017649 	.word	0x08017649
 8017324:	0801753d 	.word	0x0801753d
 8017328:	08017709 	.word	0x08017709
 801732c:	080173d1 	.word	0x080173d1
 8017330:	080176b9 	.word	0x080176b9

08017334 <_ZN20TWIPR_ControlManager5startEv>:
/* ======================================================== */
uint8_t TWIPR_ControlManager::start() {
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]

	osThreadNew(twipr_control_task, (void*) this, &control_task_attributes);
 801733c:	4a04      	ldr	r2, [pc, #16]	; (8017350 <_ZN20TWIPR_ControlManager5startEv+0x1c>)
 801733e:	6879      	ldr	r1, [r7, #4]
 8017340:	4804      	ldr	r0, [pc, #16]	; (8017354 <_ZN20TWIPR_ControlManager5startEv+0x20>)
 8017342:	f7f8 fb68 	bl	800fa16 <osThreadNew>
	return 1;
 8017346:	2301      	movs	r3, #1
}
 8017348:	4618      	mov	r0, r3
 801734a:	3708      	adds	r7, #8
 801734c:	46bd      	mov	sp, r7
 801734e:	bd80      	pop	{r7, pc}
 8017350:	080254a4 	.word	0x080254a4
 8017354:	08016fc9 	.word	0x08016fc9

08017358 <_ZN20TWIPR_ControlManager13task_functionEv>:

/* ======================================================== */
void TWIPR_ControlManager::task_function() {
 8017358:	b580      	push	{r7, lr}
 801735a:	b084      	sub	sp, #16
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
	this->status = TWIPR_CONTROL_STATUS_RUNNING;
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	2201      	movs	r2, #1
 8017364:	701a      	strb	r2, [r3, #0]
	this->_balancing_control.start();
 8017366:	687a      	ldr	r2, [r7, #4]
 8017368:	f243 1318 	movw	r3, #12568	; 0x3118
 801736c:	4413      	add	r3, r2
 801736e:	4618      	mov	r0, r3
 8017370:	f7ff fb6e 	bl	8016a50 <_ZN22TWIPR_BalancingControl5startEv>

	this->_task = xTaskGetCurrentTaskHandle();
 8017374:	f7fa ff58 	bl	8012228 <xTaskGetCurrentTaskHandle>
 8017378:	4602      	mov	r2, r0
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017380:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	uint32_t global_tick;

	while (true) {
		global_tick = osKernelGetTickCount();
 8017384:	f7f8 fb32 	bl	800f9ec <osKernelGetTickCount>
 8017388:	60f8      	str	r0, [r7, #12]
		this->step();
 801738a:	6878      	ldr	r0, [r7, #4]
 801738c:	f000 f852 	bl	8017434 <_ZN20TWIPR_ControlManager4stepEv>
		osDelayUntil(global_tick + (1000.0 / (float) this->config.freq));
 8017390:	68fb      	ldr	r3, [r7, #12]
 8017392:	ee07 3a90 	vmov	s15, r3
 8017396:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801739e:	ee07 3a90 	vmov	s15, r3
 80173a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80173a6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80173aa:	ed9f 4b07 	vldr	d4, [pc, #28]	; 80173c8 <_ZN20TWIPR_ControlManager13task_functionEv+0x70>
 80173ae:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80173b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80173b6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80173ba:	ee17 0a90 	vmov	r0, s15
 80173be:	f7f8 fbe2 	bl	800fb86 <osDelayUntil>
		global_tick = osKernelGetTickCount();
 80173c2:	e7df      	b.n	8017384 <_ZN20TWIPR_ControlManager13task_functionEv+0x2c>
 80173c4:	f3af 8000 	nop.w
 80173c8:	00000000 	.word	0x00000000
 80173cc:	408f4000 	.word	0x408f4000

080173d0 <_ZN20TWIPR_ControlManager4stopEv>:
	}
}

/* ======================================================== */
void TWIPR_ControlManager::stop() {
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b082      	sub	sp, #8
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]

	// Stop the balancing controller
	this->_balancing_control.stop();
 80173d8:	687a      	ldr	r2, [r7, #4]
 80173da:	f243 1318 	movw	r3, #12568	; 0x3118
 80173de:	4413      	add	r3, r2
 80173e0:	4618      	mov	r0, r3
 80173e2:	f7ff fc3d 	bl	8016c60 <_ZN22TWIPR_BalancingControl4stopEv>

	// Set the own state to idle
	this->mode = TWIPR_CONTROL_MODE_OFF;
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	2200      	movs	r2, #0
 80173ea:	705a      	strb	r2, [r3, #1]

	// Stop the drive
//	this->config.drive->stop();

	// Set the input to 0
	this->_input.u_1 = 0.0;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80173f2:	461a      	mov	r2, r3
 80173f4:	f04f 0300 	mov.w	r3, #0
 80173f8:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178
	this->_input.u_2 = 0.0;
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017402:	461a      	mov	r2, r3
 8017404:	f04f 0300 	mov.w	r3, #0
 8017408:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
	this->_output.u_left = 0.0;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017412:	461a      	mov	r2, r3
 8017414:	f04f 0300 	mov.w	r3, #0
 8017418:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	this->_output.u_right = 0.0;
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017422:	461a      	mov	r2, r3
 8017424:	f04f 0300 	mov.w	r3, #0
 8017428:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
}
 801742c:	bf00      	nop
 801742e:	3708      	adds	r7, #8
 8017430:	46bd      	mov	sp, r7
 8017432:	bd80      	pop	{r7, pc}

08017434 <_ZN20TWIPR_ControlManager4stepEv>:
			(uint8_t*) this->trajectory_rx_buffer,
			sizeof(twipr_control_trajectory_input_t)
					* TWIPR_CONTROL_TRAJECTORY_BUFFER_SIZE);
}
/* ======================================================== */
void TWIPR_ControlManager::step() {
 8017434:	b5b0      	push	{r4, r5, r7, lr}
 8017436:	b088      	sub	sp, #32
 8017438:	af00      	add	r7, sp, #0
 801743a:	61f8      	str	r0, [r7, #28]
	// Read the state from the estimator
	this->_dynamic_state = this->_estimation->getState();
 801743c:	69fb      	ldr	r3, [r7, #28]
 801743e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017442:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8017446:	69fb      	ldr	r3, [r7, #28]
 8017448:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801744c:	461c      	mov	r4, r3
 801744e:	463b      	mov	r3, r7
 8017450:	4611      	mov	r1, r2
 8017452:	4618      	mov	r0, r3
 8017454:	f003 f9c4 	bl	801a7e0 <_ZN16TWIPR_Estimation8getStateEv>
 8017458:	3470      	adds	r4, #112	; 0x70
 801745a:	463d      	mov	r5, r7
 801745c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801745e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017460:	682b      	ldr	r3, [r5, #0]
 8017462:	6023      	str	r3, [r4, #0]

	// Check for errors
	// Drive
	// TODO

	switch (this->status) {
 8017464:	69fb      	ldr	r3, [r7, #28]
 8017466:	f993 3000 	ldrsb.w	r3, [r3]
 801746a:	2b01      	cmp	r3, #1
 801746c:	d00f      	beq.n	801748e <_ZN20TWIPR_ControlManager4stepEv+0x5a>
 801746e:	2b01      	cmp	r3, #1
 8017470:	dc2d      	bgt.n	80174ce <_ZN20TWIPR_ControlManager4stepEv+0x9a>
 8017472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017476:	d002      	beq.n	801747e <_ZN20TWIPR_ControlManager4stepEv+0x4a>
 8017478:	2b00      	cmp	r3, #0
 801747a:	d004      	beq.n	8017486 <_ZN20TWIPR_ControlManager4stepEv+0x52>
 801747c:	e027      	b.n	80174ce <_ZN20TWIPR_ControlManager4stepEv+0x9a>
	case TWIPR_CONTROL_STATUS_ERROR: {
		this->_step_error();
 801747e:	69f8      	ldr	r0, [r7, #28]
 8017480:	f000 fa1e 	bl	80178c0 <_ZN20TWIPR_ControlManager11_step_errorEv>
		break;
 8017484:	e023      	b.n	80174ce <_ZN20TWIPR_ControlManager4stepEv+0x9a>
	}
	case TWIPR_CONTROL_STATUS_IDLE: {
		this->_step_idle();
 8017486:	69f8      	ldr	r0, [r7, #28]
 8017488:	f000 f9e4 	bl	8017854 <_ZN20TWIPR_ControlManager10_step_idleEv>
		break;
 801748c:	e01f      	b.n	80174ce <_ZN20TWIPR_ControlManager4stepEv+0x9a>
	}
	case TWIPR_CONTROL_STATUS_RUNNING: {
		switch (this->mode) {
 801748e:	69fb      	ldr	r3, [r7, #28]
 8017490:	785b      	ldrb	r3, [r3, #1]
 8017492:	2b03      	cmp	r3, #3
 8017494:	d81a      	bhi.n	80174cc <_ZN20TWIPR_ControlManager4stepEv+0x98>
 8017496:	a201      	add	r2, pc, #4	; (adr r2, 801749c <_ZN20TWIPR_ControlManager4stepEv+0x68>)
 8017498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801749c:	080174ad 	.word	0x080174ad
 80174a0:	080174b5 	.word	0x080174b5
 80174a4:	080174bd 	.word	0x080174bd
 80174a8:	080174c5 	.word	0x080174c5
		case TWIPR_CONTROL_MODE_OFF: {
			this->_step_off();
 80174ac:	69f8      	ldr	r0, [r7, #28]
 80174ae:	f000 f95b 	bl	8017768 <_ZN20TWIPR_ControlManager9_step_offEv>
			break;
 80174b2:	e00b      	b.n	80174cc <_ZN20TWIPR_ControlManager4stepEv+0x98>
		}
		case TWIPR_CONTROL_MODE_DIRECT: {
			this->_step_direct();
 80174b4:	69f8      	ldr	r0, [r7, #28]
 80174b6:	f000 f98d 	bl	80177d4 <_ZN20TWIPR_ControlManager12_step_directEv>
			break;
 80174ba:	e007      	b.n	80174cc <_ZN20TWIPR_ControlManager4stepEv+0x98>
		}
		case TWIPR_CONTROL_MODE_BALANCING: {
			this->_step_balancing();
 80174bc:	69f8      	ldr	r0, [r7, #28]
 80174be:	f000 fa35 	bl	801792c <_ZN20TWIPR_ControlManager15_step_balancingEv>
			break;
 80174c2:	e003      	b.n	80174cc <_ZN20TWIPR_ControlManager4stepEv+0x98>
		}
		case TWIPR_CONTROL_MODE_TRAJECTORY: {
			this->_step_trajectory();
 80174c4:	69f8      	ldr	r0, [r7, #28]
 80174c6:	f000 fb37 	bl	8017b38 <_ZN20TWIPR_ControlManager16_step_trajectoryEv>
			break;
 80174ca:	bf00      	nop
		}
		}
		break;
 80174cc:	bf00      	nop
	}
	}

	// Call the step callback
	if (this->_callbacks.step.registered) {
 80174ce:	69fb      	ldr	r3, [r7, #28]
 80174d0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80174d4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d00c      	beq.n	80174f6 <_ZN20TWIPR_ControlManager4stepEv+0xc2>
		this->_callbacks.step.call(this->_tick);
 80174dc:	69fa      	ldr	r2, [r7, #28]
 80174de:	f246 03ec 	movw	r3, #24812	; 0x60ec
 80174e2:	4413      	add	r3, r2
 80174e4:	69fa      	ldr	r2, [r7, #28]
 80174e6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 80174ea:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 80174ee:	4611      	mov	r1, r2
 80174f0:	4618      	mov	r0, r3
 80174f2:	f001 f819 	bl	8018528 <_ZN19core_utils_CallbackIvmE4callEm>
	}

	// Check for state transitions // TODO
	if (this->mode == TWIPR_CONTROL_MODE_TRAJECTORY) {
 80174f6:	69fb      	ldr	r3, [r7, #28]
 80174f8:	785b      	ldrb	r3, [r3, #1]
 80174fa:	2b03      	cmp	r3, #3
 80174fc:	d10e      	bne.n	801751c <_ZN20TWIPR_ControlManager4stepEv+0xe8>
		//	 Check if the trajectory is finished
		if (this->_trajectory.step == this->_trajectory.length) {
 80174fe:	69fb      	ldr	r3, [r7, #28]
 8017500:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017504:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 8017508:	69fb      	ldr	r3, [r7, #28]
 801750a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 801750e:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8017512:	429a      	cmp	r2, r3
 8017514:	d102      	bne.n	801751c <_ZN20TWIPR_ControlManager4stepEv+0xe8>
			this->_trajectoryFinished();
 8017516:	69f8      	ldr	r0, [r7, #28]
 8017518:	f000 fc1e 	bl	8017d58 <_ZN20TWIPR_ControlManager19_trajectoryFinishedEv>
		}
	}

	this->_tick++;
 801751c:	69fb      	ldr	r3, [r7, #28]
 801751e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017522:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8017526:	3301      	adds	r3, #1
 8017528:	69fa      	ldr	r2, [r7, #28]
 801752a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 801752e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

}
 8017532:	bf00      	nop
 8017534:	3720      	adds	r7, #32
 8017536:	46bd      	mov	sp, r7
 8017538:	bdb0      	pop	{r4, r5, r7, pc}
 801753a:	bf00      	nop

0801753c <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t>:
/* ======================================================== */
uint8_t TWIPR_ControlManager::setMode(twipr_control_mode_t mode) {
 801753c:	b580      	push	{r7, lr}
 801753e:	b082      	sub	sp, #8
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
 8017544:	460b      	mov	r3, r1
 8017546:	70fb      	strb	r3, [r7, #3]

	// Setting mode should only work while running
	if (this->status == TWIPR_CONTROL_STATUS_IDLE) {
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	f993 3000 	ldrsb.w	r3, [r3]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d101      	bne.n	8017556 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x1a>
		return 0;
 8017552:	2300      	movs	r3, #0
 8017554:	e074      	b.n	8017640 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x104>
	}
	if (this->status == TWIPR_CONTROL_STATUS_ERROR) {
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	f993 3000 	ldrsb.w	r3, [r3]
 801755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017560:	d101      	bne.n	8017566 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x2a>
		return 0;
 8017562:	2300      	movs	r3, #0
 8017564:	e06c      	b.n	8017640 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x104>
	}

	if (mode == TWIPR_CONTROL_MODE_TRAJECTORY) {
 8017566:	78fb      	ldrb	r3, [r7, #3]
 8017568:	2b03      	cmp	r3, #3
 801756a:	d101      	bne.n	8017570 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x34>
		return 0;
 801756c:	2300      	movs	r3, #0
 801756e:	e067      	b.n	8017640 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x104>
	}

	this->mode = mode;
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	78fa      	ldrb	r2, [r7, #3]
 8017574:	705a      	strb	r2, [r3, #1]

	// Switch the mode of the balancing controller to the appropriate mode
	switch (this->mode) {
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	785b      	ldrb	r3, [r3, #1]
 801757a:	2b03      	cmp	r3, #3
 801757c:	d84f      	bhi.n	801761e <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xe2>
 801757e:	a201      	add	r2, pc, #4	; (adr r2, 8017584 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x48>)
 8017580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017584:	08017595 	.word	0x08017595
 8017588:	0801759d 	.word	0x0801759d
 801758c:	080175c3 	.word	0x080175c3
 8017590:	080175f9 	.word	0x080175f9
	case TWIPR_CONTROL_MODE_OFF: {
		this->stop();
 8017594:	6878      	ldr	r0, [r7, #4]
 8017596:	f7ff ff1b 	bl	80173d0 <_ZN20TWIPR_ControlManager4stopEv>
		break;
 801759a:	e040      	b.n	801761e <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xe2>
	}
	case TWIPR_CONTROL_MODE_DIRECT: {
		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	689b      	ldr	r3, [r3, #8]
 80175a0:	781b      	ldrb	r3, [r3, #0]
 80175a2:	2b02      	cmp	r3, #2
 80175a4:	d004      	beq.n	80175b0 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x74>
			this->config.drive->start();
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	689b      	ldr	r3, [r3, #8]
 80175aa:	4618      	mov	r0, r3
 80175ac:	f002 fd4c 	bl	801a048 <_ZN11TWIPR_Drive5startEv>
		}

		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_DIRECT);
 80175b0:	687a      	ldr	r2, [r7, #4]
 80175b2:	f243 1318 	movw	r3, #12568	; 0x3118
 80175b6:	4413      	add	r3, r2
 80175b8:	2101      	movs	r1, #1
 80175ba:	4618      	mov	r0, r3
 80175bc:	f7ff fb6d 	bl	8016c9a <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		break;
 80175c0:	e02d      	b.n	801761e <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xe2>
	}
	case TWIPR_CONTROL_MODE_BALANCING: {
		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	689b      	ldr	r3, [r3, #8]
 80175c6:	781b      	ldrb	r3, [r3, #0]
 80175c8:	2b02      	cmp	r3, #2
 80175ca:	d004      	beq.n	80175d6 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x9a>
			this->config.drive->start();
 80175cc:	687b      	ldr	r3, [r7, #4]
 80175ce:	689b      	ldr	r3, [r3, #8]
 80175d0:	4618      	mov	r0, r3
 80175d2:	f002 fd39 	bl	801a048 <_ZN11TWIPR_Drive5startEv>
		}
		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_ON);
 80175d6:	687a      	ldr	r2, [r7, #4]
 80175d8:	f243 1318 	movw	r3, #12568	; 0x3118
 80175dc:	4413      	add	r3, r2
 80175de:	2102      	movs	r1, #2
 80175e0:	4618      	mov	r0, r3
 80175e2:	f7ff fb5a 	bl	8016c9a <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		this->_sum_theta = 0;
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80175ec:	461a      	mov	r2, r3
 80175ee:	f04f 0300 	mov.w	r3, #0
 80175f2:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
		break;
 80175f6:	e012      	b.n	801761e <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xe2>
	}
	case TWIPR_CONTROL_MODE_TRAJECTORY: {
		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	689b      	ldr	r3, [r3, #8]
 80175fc:	781b      	ldrb	r3, [r3, #0]
 80175fe:	2b02      	cmp	r3, #2
 8017600:	d004      	beq.n	801760c <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xd0>
			this->config.drive->start();
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	689b      	ldr	r3, [r3, #8]
 8017606:	4618      	mov	r0, r3
 8017608:	f002 fd1e 	bl	801a048 <_ZN11TWIPR_Drive5startEv>
		}
		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_ON);
 801760c:	687a      	ldr	r2, [r7, #4]
 801760e:	f243 1318 	movw	r3, #12568	; 0x3118
 8017612:	4413      	add	r3, r2
 8017614:	2102      	movs	r1, #2
 8017616:	4618      	mov	r0, r3
 8017618:	f7ff fb3f 	bl	8016c9a <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		break;
 801761c:	bf00      	nop
	}
	}

	// Reset the input
	this->_input.u_1 = 0;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017624:	461a      	mov	r2, r3
 8017626:	f04f 0300 	mov.w	r3, #0
 801762a:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178
	this->_input.u_2 = 0;
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017634:	461a      	mov	r2, r3
 8017636:	f04f 0300 	mov.w	r3, #0
 801763a:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c


	return 1;
 801763e:	2301      	movs	r3, #1
}
 8017640:	4618      	mov	r0, r3
 8017642:	3708      	adds	r7, #8
 8017644:	46bd      	mov	sp, r7
 8017646:	bd80      	pop	{r7, pc}

08017648 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t>:
/* ======================================================== */
void TWIPR_ControlManager::setInput(twipr_control_input_t input) {
 8017648:	b580      	push	{r7, lr}
 801764a:	b084      	sub	sp, #16
 801764c:	af00      	add	r7, sp, #0
 801764e:	60f8      	str	r0, [r7, #12]
 8017650:	eeb0 7a40 	vmov.f32	s14, s0
 8017654:	eef0 7a60 	vmov.f32	s15, s1
 8017658:	ed87 7a01 	vstr	s14, [r7, #4]
 801765c:	edc7 7a02 	vstr	s15, [r7, #8]
// TODO: We need some input checking here
	if (this->status != TWIPR_CONTROL_STATUS_RUNNING) {
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	f993 3000 	ldrsb.w	r3, [r3]
 8017666:	2b01      	cmp	r3, #1
 8017668:	d11e      	bne.n	80176a8 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x60>
		return;
	}
	if (this->mode == TWIPR_CONTROL_MODE_OFF || this->mode == TWIPR_CONTROL_MODE_TRAJECTORY) {
 801766a:	68fb      	ldr	r3, [r7, #12]
 801766c:	785b      	ldrb	r3, [r3, #1]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d01c      	beq.n	80176ac <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x64>
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	785b      	ldrb	r3, [r3, #1]
 8017676:	2b03      	cmp	r3, #3
 8017678:	d018      	beq.n	80176ac <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x64>
		return;
	}

	osSemaphoreAcquire(semaphore_external_input, portMAX_DELAY);
 801767a:	4b0e      	ldr	r3, [pc, #56]	; (80176b4 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x6c>)
 801767c:	681b      	ldr	r3, [r3, #0]
 801767e:	f04f 31ff 	mov.w	r1, #4294967295
 8017682:	4618      	mov	r0, r3
 8017684:	f7f8 fbc8 	bl	800fe18 <osSemaphoreAcquire>
	this->_input = input;
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801768e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8017692:	1d3a      	adds	r2, r7, #4
 8017694:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017698:	e883 0003 	stmia.w	r3, {r0, r1}
	osSemaphoreRelease(semaphore_external_input);
 801769c:	4b05      	ldr	r3, [pc, #20]	; (80176b4 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x6c>)
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	4618      	mov	r0, r3
 80176a2:	f7f8 fc0b 	bl	800febc <osSemaphoreRelease>
 80176a6:	e002      	b.n	80176ae <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x66>
		return;
 80176a8:	bf00      	nop
 80176aa:	e000      	b.n	80176ae <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x66>
		return;
 80176ac:	bf00      	nop
}
 80176ae:	3710      	adds	r7, #16
 80176b0:	46bd      	mov	sp, r7
 80176b2:	bd80      	pop	{r7, pc}
 80176b4:	2401541c 	.word	0x2401541c

080176b8 <_ZN20TWIPR_ControlManager16setBalancingGainEPf>:
twipr_control_status_t TWIPR_ControlManager::getStatus() {
	return this->status;
}

/* ======================================================== */
uint8_t TWIPR_ControlManager::setBalancingGain(float *K) {
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b082      	sub	sp, #8
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
 80176c0:	6039      	str	r1, [r7, #0]
	// This is only allowed if the controller is off
	if (this->status != TWIPR_CONTROL_STATUS_RUNNING) {
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	f993 3000 	ldrsb.w	r3, [r3]
 80176c8:	2b01      	cmp	r3, #1
 80176ca:	d001      	beq.n	80176d0 <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x18>
		return 0;
 80176cc:	2300      	movs	r3, #0
 80176ce:	e017      	b.n	8017700 <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x48>
	}
	if (this->mode != TWIPR_CONTROL_MODE_OFF) {
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	785b      	ldrb	r3, [r3, #1]
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d001      	beq.n	80176dc <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x24>
		return 0;
 80176d8:	2300      	movs	r3, #0
 80176da:	e011      	b.n	8017700 <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x48>
	}

	memcpy(this->config.K, K, sizeof(float) * 8);
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	330c      	adds	r3, #12
 80176e0:	2220      	movs	r2, #32
 80176e2:	6839      	ldr	r1, [r7, #0]
 80176e4:	4618      	mov	r0, r3
 80176e6:	f00b fe6c 	bl	80233c2 <memcpy>
	this->_balancing_control.set_K(this->config.K);
 80176ea:	687a      	ldr	r2, [r7, #4]
 80176ec:	f243 1318 	movw	r3, #12568	; 0x3118
 80176f0:	4413      	add	r3, r2
 80176f2:	687a      	ldr	r2, [r7, #4]
 80176f4:	320c      	adds	r2, #12
 80176f6:	4611      	mov	r1, r2
 80176f8:	4618      	mov	r0, r3
 80176fa:	f7ff fabe 	bl	8016c7a <_ZN22TWIPR_BalancingControl5set_KEPf>
	return 1;
 80176fe:	2301      	movs	r3, #1
}
 8017700:	4618      	mov	r0, r3
 8017702:	3708      	adds	r7, #8
 8017704:	46bd      	mov	sp, r7
 8017706:	bd80      	pop	{r7, pc}

08017708 <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t>:
/* ======================================================== */
uint8_t TWIPR_ControlManager::startTrajectory(
		twipr_control_trajectory_t trajectory) {
 8017708:	b480      	push	{r7}
 801770a:	b085      	sub	sp, #20
 801770c:	af00      	add	r7, sp, #0
 801770e:	60f8      	str	r0, [r7, #12]
 8017710:	1d3b      	adds	r3, r7, #4
 8017712:	e883 0006 	stmia.w	r3, {r1, r2}

	if (this->status != TWIPR_CONTROL_STATUS_RUNNING) {
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	f993 3000 	ldrsb.w	r3, [r3]
 801771c:	2b01      	cmp	r3, #1
 801771e:	d001      	beq.n	8017724 <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t+0x1c>
		return 0;
 8017720:	2300      	movs	r3, #0
 8017722:	e01b      	b.n	801775c <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t+0x54>
	}

	// This is only allowed when we are in balancing mode for now // TODO
	if (this->mode != TWIPR_CONTROL_MODE_BALANCING) {
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	785b      	ldrb	r3, [r3, #1]
 8017728:	2b02      	cmp	r3, #2
 801772a:	d001      	beq.n	8017730 <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t+0x28>
		return 0;
 801772c:	2300      	movs	r3, #0
 801772e:	e015      	b.n	801775c <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t+0x54>
	}

	this->_trajectory.step = trajectory.step;
 8017730:	88ba      	ldrh	r2, [r7, #4]
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017738:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	this->_trajectory.trajectory_id = trajectory.trajectory_id;
 801773c:	88fa      	ldrh	r2, [r7, #6]
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017744:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	this->_trajectory.length = trajectory.length;
 8017748:	893a      	ldrh	r2, [r7, #8]
 801774a:	68fb      	ldr	r3, [r7, #12]
 801774c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017750:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	// Set the mode to trajectory
	this->mode = TWIPR_CONTROL_MODE_TRAJECTORY;
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	2203      	movs	r2, #3
 8017758:	705a      	strb	r2, [r3, #1]

	return 1;
 801775a:	2301      	movs	r3, #1
}
 801775c:	4618      	mov	r0, r3
 801775e:	3714      	adds	r7, #20
 8017760:	46bd      	mov	sp, r7
 8017762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017766:	4770      	bx	lr

08017768 <_ZN20TWIPR_ControlManager9_step_offEv>:
	this->_input.u_2 = 0;

	return 1;
}
/* ======================================================== */
void TWIPR_ControlManager::_step_off() {
 8017768:	b580      	push	{r7, lr}
 801776a:	b082      	sub	sp, #8
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
	this->_input.u_1 = 0.0;
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017776:	461a      	mov	r2, r3
 8017778:	f04f 0300 	mov.w	r3, #0
 801777c:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178
	this->_input.u_2 = 0.0;
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017786:	461a      	mov	r2, r3
 8017788:	f04f 0300 	mov.w	r3, #0
 801778c:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
	this->_output.u_left = 0.0;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017796:	461a      	mov	r2, r3
 8017798:	f04f 0300 	mov.w	r3, #0
 801779c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	this->_output.u_right = 0.0;
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80177a6:	461a      	mov	r2, r3
 80177a8:	f04f 0300 	mov.w	r3, #0
 80177ac:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	this->_setTorque(this->_output);
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80177b6:	ed93 7a60 	vldr	s14, [r3, #384]	; 0x180
 80177ba:	edd3 7a61 	vldr	s15, [r3, #388]	; 0x184
 80177be:	eeb0 0a47 	vmov.f32	s0, s14
 80177c2:	eef0 0a67 	vmov.f32	s1, s15
 80177c6:	6878      	ldr	r0, [r7, #4]
 80177c8:	f000 fa55 	bl	8017c76 <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 80177cc:	bf00      	nop
 80177ce:	3708      	adds	r7, #8
 80177d0:	46bd      	mov	sp, r7
 80177d2:	bd80      	pop	{r7, pc}

080177d4 <_ZN20TWIPR_ControlManager12_step_directEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_direct() {
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b082      	sub	sp, #8
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
	this->_output.u_left = limit(this->_input.u_1, this->config.max_torque);
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80177e2:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80177ec:	eef0 0a47 	vmov.f32	s1, s14
 80177f0:	eeb0 0a67 	vmov.f32	s0, s15
 80177f4:	f009 fa69 	bl	8020cca <_Z5limitff>
 80177f8:	eef0 7a40 	vmov.f32	s15, s0
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017802:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
	this->_output.u_right = limit(this->_input.u_2, this->config.max_torque);
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801780c:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8017816:	eef0 0a47 	vmov.f32	s1, s14
 801781a:	eeb0 0a67 	vmov.f32	s0, s15
 801781e:	f009 fa54 	bl	8020cca <_Z5limitff>
 8017822:	eef0 7a40 	vmov.f32	s15, s0
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801782c:	edc3 7a61 	vstr	s15, [r3, #388]	; 0x184

	this->_setTorque(this->_output);
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017836:	ed93 7a60 	vldr	s14, [r3, #384]	; 0x180
 801783a:	edd3 7a61 	vldr	s15, [r3, #388]	; 0x184
 801783e:	eeb0 0a47 	vmov.f32	s0, s14
 8017842:	eef0 0a67 	vmov.f32	s1, s15
 8017846:	6878      	ldr	r0, [r7, #4]
 8017848:	f000 fa15 	bl	8017c76 <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 801784c:	bf00      	nop
 801784e:	3708      	adds	r7, #8
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}

08017854 <_ZN20TWIPR_ControlManager10_step_idleEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_idle() {
 8017854:	b580      	push	{r7, lr}
 8017856:	b082      	sub	sp, #8
 8017858:	af00      	add	r7, sp, #0
 801785a:	6078      	str	r0, [r7, #4]
	this->_input.u_1 = 0.0;
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017862:	461a      	mov	r2, r3
 8017864:	f04f 0300 	mov.w	r3, #0
 8017868:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178
	this->_input.u_2 = 0.0;
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017872:	461a      	mov	r2, r3
 8017874:	f04f 0300 	mov.w	r3, #0
 8017878:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
	this->_output.u_left = 0.0;
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017882:	461a      	mov	r2, r3
 8017884:	f04f 0300 	mov.w	r3, #0
 8017888:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	this->_output.u_right = 0.0;
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017892:	461a      	mov	r2, r3
 8017894:	f04f 0300 	mov.w	r3, #0
 8017898:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184

	this->_setTorque(this->_output);
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80178a2:	ed93 7a60 	vldr	s14, [r3, #384]	; 0x180
 80178a6:	edd3 7a61 	vldr	s15, [r3, #388]	; 0x184
 80178aa:	eeb0 0a47 	vmov.f32	s0, s14
 80178ae:	eef0 0a67 	vmov.f32	s1, s15
 80178b2:	6878      	ldr	r0, [r7, #4]
 80178b4:	f000 f9df 	bl	8017c76 <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 80178b8:	bf00      	nop
 80178ba:	3708      	adds	r7, #8
 80178bc:	46bd      	mov	sp, r7
 80178be:	bd80      	pop	{r7, pc}

080178c0 <_ZN20TWIPR_ControlManager11_step_errorEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_error() {
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b082      	sub	sp, #8
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
	this->_input.u_1 = 0.0;
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80178ce:	461a      	mov	r2, r3
 80178d0:	f04f 0300 	mov.w	r3, #0
 80178d4:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178
	this->_input.u_2 = 0.0;
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80178de:	461a      	mov	r2, r3
 80178e0:	f04f 0300 	mov.w	r3, #0
 80178e4:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
	this->_output.u_left = 0.0;
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80178ee:	461a      	mov	r2, r3
 80178f0:	f04f 0300 	mov.w	r3, #0
 80178f4:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
	this->_output.u_right = 0.0;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80178fe:	461a      	mov	r2, r3
 8017900:	f04f 0300 	mov.w	r3, #0
 8017904:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184

	this->_setTorque(this->_output);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801790e:	ed93 7a60 	vldr	s14, [r3, #384]	; 0x180
 8017912:	edd3 7a61 	vldr	s15, [r3, #388]	; 0x184
 8017916:	eeb0 0a47 	vmov.f32	s0, s14
 801791a:	eef0 0a67 	vmov.f32	s1, s15
 801791e:	6878      	ldr	r0, [r7, #4]
 8017920:	f000 f9a9 	bl	8017c76 <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 8017924:	bf00      	nop
 8017926:	3708      	adds	r7, #8
 8017928:	46bd      	mov	sp, r7
 801792a:	bd80      	pop	{r7, pc}

0801792c <_ZN20TWIPR_ControlManager15_step_balancingEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_balancing() {
 801792c:	b5b0      	push	{r4, r5, r7, lr}
 801792e:	b08e      	sub	sp, #56	; 0x38
 8017930:	af04      	add	r7, sp, #16
 8017932:	6078      	str	r0, [r7, #4]
	//	 Calculate the input from the balancing controller

	osSemaphoreAcquire(semaphore_external_input, portMAX_DELAY);
 8017934:	4b7c      	ldr	r3, [pc, #496]	; (8017b28 <_ZN20TWIPR_ControlManager15_step_balancingEv+0x1fc>)
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	f04f 31ff 	mov.w	r1, #4294967295
 801793c:	4618      	mov	r0, r3
 801793e:	f7f8 fa6b 	bl	800fe18 <osSemaphoreAcquire>
	twipr_control_input_t external_input = this->_input;
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017948:	461a      	mov	r2, r3
 801794a:	f107 0318 	add.w	r3, r7, #24
 801794e:	f502 72bc 	add.w	r2, r2, #376	; 0x178
 8017952:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017956:	e883 0003 	stmia.w	r3, {r0, r1}
	osSemaphoreRelease(semaphore_external_input);
 801795a:	4b73      	ldr	r3, [pc, #460]	; (8017b28 <_ZN20TWIPR_ControlManager15_step_balancingEv+0x1fc>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	4618      	mov	r0, r3
 8017960:	f7f8 faac 	bl	800febc <osSemaphoreRelease>

//	this->_output.u_left = 0.1;
//	this->_output.u_right = 0.1;

	this->_output.u_left = limit(this->_output.u_left, this->config.max_torque);
 8017964:	687b      	ldr	r3, [r7, #4]
 8017966:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801796a:	edd3 7a60 	vldr	s15, [r3, #384]	; 0x180
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8017974:	eef0 0a47 	vmov.f32	s1, s14
 8017978:	eeb0 0a67 	vmov.f32	s0, s15
 801797c:	f009 f9a5 	bl	8020cca <_Z5limitff>
 8017980:	eef0 7a40 	vmov.f32	s15, s0
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 801798a:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
	this->_output.u_right = limit(this->_output.u_right,
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017994:	edd3 7a61 	vldr	s15, [r3, #388]	; 0x184
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 801799e:	eef0 0a47 	vmov.f32	s1, s14
 80179a2:	eeb0 0a67 	vmov.f32	s0, s15
 80179a6:	f009 f990 	bl	8020cca <_Z5limitff>
 80179aa:	eef0 7a40 	vmov.f32	s15, s0
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 80179b4:	edc3 7a61 	vstr	s15, [r3, #388]	; 0x184
			this->config.max_torque);


	twipr_balancing_control_input_t balancing_input = { .u_1 = external_input.u_1,
 80179b8:	69bb      	ldr	r3, [r7, #24]
			.u_2 = external_input.u_2 };
 80179ba:	613b      	str	r3, [r7, #16]
 80179bc:	69fb      	ldr	r3, [r7, #28]
 80179be:	617b      	str	r3, [r7, #20]

	twipr_balancing_control_output_t balancing_output;

	// Update the balancing controller
	this->_balancing_control.update(this->_dynamic_state, balancing_input,
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	f243 1418 	movw	r4, #12568	; 0x3118
 80179c6:	441c      	add	r4, r3
 80179c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80179cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 80179d6:	f107 0208 	add.w	r2, r7, #8
 80179da:	9202      	str	r2, [sp, #8]
 80179dc:	466d      	mov	r5, sp
 80179de:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80179e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80179e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80179ea:	3370      	adds	r3, #112	; 0x70
 80179ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80179ee:	eeb0 0a47 	vmov.f32	s0, s14
 80179f2:	eef0 0a67 	vmov.f32	s1, s15
 80179f6:	4620      	mov	r0, r4
 80179f8:	f7ff f844 	bl	8016a84 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>
			&balancing_output);

	this->_sum_theta += this->_dynamic_state.theta;
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017a02:	ed93 7a44 	vldr	s14, [r3, #272]	; 0x110
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017a0c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8017a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017a1a:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
	this->_sum_v += this->_dynamic_state.v;
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017a24:	ed93 7a45 	vldr	s14, [r3, #276]	; 0x114
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017a2e:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8017a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017a3c:	edc3 7a45 	vstr	s15, [r3, #276]	; 0x114

	float theta_ouput_int = this->_sum_theta * 0.000;
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017a46:	edd3 7a44 	vldr	s15, [r3, #272]	; 0x110
 8017a4a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8017b2c <_ZN20TWIPR_ControlManager15_step_balancingEv+0x200>
 8017a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017a52:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float v_ouput_int = this->_sum_v * (0.0);
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017a5c:	edd3 7a45 	vldr	s15, [r3, #276]	; 0x114
 8017a60:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8017b2c <_ZN20TWIPR_ControlManager15_step_balancingEv+0x200>
 8017a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017a68:	edc7 7a08 	vstr	s15, [r7, #32]

	theta_ouput_int = limit(theta_ouput_int, 0.004);
 8017a6c:	eddf 0a30 	vldr	s1, [pc, #192]	; 8017b30 <_ZN20TWIPR_ControlManager15_step_balancingEv+0x204>
 8017a70:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8017a74:	f009 f929 	bl	8020cca <_Z5limitff>
 8017a78:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	v_ouput_int = limit(v_ouput_int, 0.02);
 8017a7c:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8017b34 <_ZN20TWIPR_ControlManager15_step_balancingEv+0x208>
 8017a80:	ed97 0a08 	vldr	s0, [r7, #32]
 8017a84:	f009 f921 	bl	8020cca <_Z5limitff>
 8017a88:	ed87 0a08 	vstr	s0, [r7, #32]

	balancing_output.u_1 = balancing_output.u_1 + theta_ouput_int + v_ouput_int;
 8017a8c:	ed97 7a02 	vldr	s14, [r7, #8]
 8017a90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017a94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017a98:	edd7 7a08 	vldr	s15, [r7, #32]
 8017a9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017aa0:	edc7 7a02 	vstr	s15, [r7, #8]
	balancing_output.u_2 = balancing_output.u_2 + theta_ouput_int + v_ouput_int;
 8017aa4:	ed97 7a03 	vldr	s14, [r7, #12]
 8017aa8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8017aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017ab0:	edd7 7a08 	vldr	s15, [r7, #32]
 8017ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017ab8:	edc7 7a03 	vstr	s15, [r7, #12]

	this->_output.u_left = limit(balancing_output.u_1, this->config.max_torque);
 8017abc:	edd7 7a02 	vldr	s15, [r7, #8]
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8017ac6:	eef0 0a47 	vmov.f32	s1, s14
 8017aca:	eeb0 0a67 	vmov.f32	s0, s15
 8017ace:	f009 f8fc 	bl	8020cca <_Z5limitff>
 8017ad2:	eef0 7a40 	vmov.f32	s15, s0
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017adc:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
	this->_output.u_right = limit(balancing_output.u_2,
 8017ae0:	edd7 7a03 	vldr	s15, [r7, #12]
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8017aea:	eef0 0a47 	vmov.f32	s1, s14
 8017aee:	eeb0 0a67 	vmov.f32	s0, s15
 8017af2:	f009 f8ea 	bl	8020cca <_Z5limitff>
 8017af6:	eef0 7a40 	vmov.f32	s15, s0
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017b00:	edc3 7a61 	vstr	s15, [r3, #388]	; 0x184
			this->config.max_torque);

	// Drive the motors
	this->_setTorque(this->_output);
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017b0a:	ed93 7a60 	vldr	s14, [r3, #384]	; 0x180
 8017b0e:	edd3 7a61 	vldr	s15, [r3, #388]	; 0x184
 8017b12:	eeb0 0a47 	vmov.f32	s0, s14
 8017b16:	eef0 0a67 	vmov.f32	s1, s15
 8017b1a:	6878      	ldr	r0, [r7, #4]
 8017b1c:	f000 f8ab 	bl	8017c76 <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 8017b20:	bf00      	nop
 8017b22:	3728      	adds	r7, #40	; 0x28
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bdb0      	pop	{r4, r5, r7, pc}
 8017b28:	2401541c 	.word	0x2401541c
 8017b2c:	00000000 	.word	0x00000000
 8017b30:	3b83126f 	.word	0x3b83126f
 8017b34:	3ca3d70a 	.word	0x3ca3d70a

08017b38 <_ZN20TWIPR_ControlManager16_step_trajectoryEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_trajectory() {
 8017b38:	b5b0      	push	{r4, r5, r7, lr}
 8017b3a:	b08a      	sub	sp, #40	; 0x28
 8017b3c:	af04      	add	r7, sp, #16
 8017b3e:	6078      	str	r0, [r7, #4]

	// Check if the step is correct
	if (this->_trajectory_buffer[this->_trajectory.step].step
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017b46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
			!= this->_trajectory.step) {
		// TODO
	}

	// Set the input from the current input of the buffer
	this->_input.u_1 = this->_trajectory_buffer[this->_trajectory.step].u_1;
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017b50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017b54:	4619      	mov	r1, r3
 8017b56:	687a      	ldr	r2, [r7, #4]
 8017b58:	460b      	mov	r3, r1
 8017b5a:	005b      	lsls	r3, r3, #1
 8017b5c:	440b      	add	r3, r1
 8017b5e:	009b      	lsls	r3, r3, #2
 8017b60:	441a      	add	r2, r3
 8017b62:	f243 138c 	movw	r3, #12684	; 0x318c
 8017b66:	4413      	add	r3, r2
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	687a      	ldr	r2, [r7, #4]
 8017b6c:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8017b70:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178
	this->_input.u_2 = this->_trajectory_buffer[this->_trajectory.step].u_2;
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017b7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017b7e:	4619      	mov	r1, r3
 8017b80:	687a      	ldr	r2, [r7, #4]
 8017b82:	460b      	mov	r3, r1
 8017b84:	005b      	lsls	r3, r3, #1
 8017b86:	440b      	add	r3, r1
 8017b88:	009b      	lsls	r3, r3, #2
 8017b8a:	441a      	add	r2, r3
 8017b8c:	f243 1390 	movw	r3, #12688	; 0x3190
 8017b90:	4413      	add	r3, r2
 8017b92:	681b      	ldr	r3, [r3, #0]
 8017b94:	687a      	ldr	r2, [r7, #4]
 8017b96:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8017b9a:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c

	// Perform a control step
	twipr_balancing_control_input_t balancing_input = { .u_1 = this->_input.u_1,
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017ba4:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
			.u_2 = this->_input.u_2 };
 8017ba8:	613b      	str	r3, [r7, #16]
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017bb0:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8017bb4:	617b      	str	r3, [r7, #20]

	twipr_balancing_control_output_t balancing_output;

	// Update the balancing controller
	this->_balancing_control.update(this->_dynamic_state, balancing_input,
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	f243 1418 	movw	r4, #12568	; 0x3118
 8017bbc:	441c      	add	r4, r3
 8017bbe:	ed97 7a04 	vldr	s14, [r7, #16]
 8017bc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017bcc:	f107 0208 	add.w	r2, r7, #8
 8017bd0:	9202      	str	r2, [sp, #8]
 8017bd2:	466d      	mov	r5, sp
 8017bd4:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8017bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017bdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8017be0:	3370      	adds	r3, #112	; 0x70
 8017be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017be4:	eeb0 0a47 	vmov.f32	s0, s14
 8017be8:	eef0 0a67 	vmov.f32	s1, s15
 8017bec:	4620      	mov	r0, r4
 8017bee:	f7fe ff49 	bl	8016a84 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>
			&balancing_output);

	this->_output.u_left = limit(balancing_output.u_1, this->config.max_torque);
 8017bf2:	edd7 7a02 	vldr	s15, [r7, #8]
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8017bfc:	eef0 0a47 	vmov.f32	s1, s14
 8017c00:	eeb0 0a67 	vmov.f32	s0, s15
 8017c04:	f009 f861 	bl	8020cca <_Z5limitff>
 8017c08:	eef0 7a40 	vmov.f32	s15, s0
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017c12:	edc3 7a60 	vstr	s15, [r3, #384]	; 0x180
	this->_output.u_right = limit(balancing_output.u_2,
 8017c16:	edd7 7a03 	vldr	s15, [r7, #12]
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8017c20:	eef0 0a47 	vmov.f32	s1, s14
 8017c24:	eeb0 0a67 	vmov.f32	s0, s15
 8017c28:	f009 f84f 	bl	8020cca <_Z5limitff>
 8017c2c:	eef0 7a40 	vmov.f32	s15, s0
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017c36:	edc3 7a61 	vstr	s15, [r3, #388]	; 0x184
			this->config.max_torque);

	// Drive the motors
	this->_setTorque(this->_output);
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017c40:	ed93 7a60 	vldr	s14, [r3, #384]	; 0x180
 8017c44:	edd3 7a61 	vldr	s15, [r3, #388]	; 0x184
 8017c48:	eeb0 0a47 	vmov.f32	s0, s14
 8017c4c:	eef0 0a67 	vmov.f32	s1, s15
 8017c50:	6878      	ldr	r0, [r7, #4]
 8017c52:	f000 f810 	bl	8017c76 <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>

	// Increase the trajectory step counter
	this->_trajectory.step++;
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017c5c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017c60:	3301      	adds	r3, #1
 8017c62:	b29a      	uxth	r2, r3
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017c6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

}
 8017c6e:	bf00      	nop
 8017c70:	3718      	adds	r7, #24
 8017c72:	46bd      	mov	sp, r7
 8017c74:	bdb0      	pop	{r4, r5, r7, pc}

08017c76 <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>:
/* ======================================================== */
void TWIPR_ControlManager::_setTorque(twipr_control_output_t output) {
 8017c76:	b580      	push	{r7, lr}
 8017c78:	b086      	sub	sp, #24
 8017c7a:	af00      	add	r7, sp, #0
 8017c7c:	60f8      	str	r0, [r7, #12]
 8017c7e:	eeb0 7a40 	vmov.f32	s14, s0
 8017c82:	eef0 7a60 	vmov.f32	s15, s1
 8017c86:	ed87 7a01 	vstr	s14, [r7, #4]
 8017c8a:	edc7 7a02 	vstr	s15, [r7, #8]

	// Apply the torque to the motors
	twipr_drive_input_t drive_input = { .torque_left = output.u_left,
 8017c8e:	687b      	ldr	r3, [r7, #4]
			.torque_right = output.u_right };
 8017c90:	613b      	str	r3, [r7, #16]
 8017c92:	68bb      	ldr	r3, [r7, #8]
 8017c94:	617b      	str	r3, [r7, #20]

	this->config.drive->setTorque(drive_input);
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	689b      	ldr	r3, [r3, #8]
 8017c9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8017c9e:	edd7 7a05 	vldr	s15, [r7, #20]
 8017ca2:	eeb0 0a47 	vmov.f32	s0, s14
 8017ca6:	eef0 0a67 	vmov.f32	s1, s15
 8017caa:	4618      	mov	r0, r3
 8017cac:	f002 fa6c 	bl	801a188 <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t>
}
 8017cb0:	bf00      	nop
 8017cb2:	3718      	adds	r7, #24
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	bd80      	pop	{r7, pc}

08017cb8 <_ZN19core_utils_CallbackIvmEaSERKS0_>:
class core_utils_Callback: public Callback {
 8017cb8:	b5b0      	push	{r4, r5, r7, lr}
 8017cba:	b082      	sub	sp, #8
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	6078      	str	r0, [r7, #4]
 8017cc0:	6039      	str	r1, [r7, #0]
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	683a      	ldr	r2, [r7, #0]
 8017cc6:	4611      	mov	r1, r2
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f7fb ff86 	bl	8013bda <_ZN8CallbackaSERKS_>
 8017cce:	683b      	ldr	r3, [r7, #0]
 8017cd0:	791a      	ldrb	r2, [r3, #4]
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	711a      	strb	r2, [r3, #4]
 8017cd6:	687a      	ldr	r2, [r7, #4]
 8017cd8:	683b      	ldr	r3, [r7, #0]
 8017cda:	f102 0408 	add.w	r4, r2, #8
 8017cde:	f103 0508 	add.w	r5, r3, #8
 8017ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017ce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017ce6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017cea:	e884 0003 	stmia.w	r4, {r0, r1}
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	4618      	mov	r0, r3
 8017cf2:	3708      	adds	r7, #8
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	bdb0      	pop	{r4, r5, r7, pc}

08017cf8 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE>:
	}
}
/* ======================================================== */
void TWIPR_ControlManager::registerCallback(
		twipr_control_callback_id_t callback_id,
		core_utils_Callback<void, uint32_t> callback) {
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b084      	sub	sp, #16
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	60f8      	str	r0, [r7, #12]
 8017d00:	460b      	mov	r3, r1
 8017d02:	607a      	str	r2, [r7, #4]
 8017d04:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 8017d06:	7afb      	ldrb	r3, [r7, #11]
 8017d08:	2b03      	cmp	r3, #3
 8017d0a:	d820      	bhi.n	8017d4e <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x56>
 8017d0c:	a201      	add	r2, pc, #4	; (adr r2, 8017d14 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x1c>)
 8017d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d12:	bf00      	nop
 8017d14:	08017d25 	.word	0x08017d25
 8017d18:	08017d2d 	.word	0x08017d2d
 8017d1c:	08017d35 	.word	0x08017d35
 8017d20:	08017d3d 	.word	0x08017d3d
	case TWIPR_CONTROL_CALLBACK_ERROR: {
		twipr_error_handler(0);
 8017d24:	2000      	movs	r0, #0
 8017d26:	f002 fa83 	bl	801a230 <_Z19twipr_error_handlerm>
		break;
 8017d2a:	e010      	b.n	8017d4e <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x56>
	}
	case TWIPR_CONTROL_CALLBACK_TRAJECTORY_START: {
		twipr_error_handler(0);
 8017d2c:	2000      	movs	r0, #0
 8017d2e:	f002 fa7f 	bl	801a230 <_Z19twipr_error_handlerm>
		break;
 8017d32:	e00c      	b.n	8017d4e <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x56>
	}
	case TWIPR_CONTROL_CALLBACK_TRAJECTORY_FINISHED: {
		twipr_error_handler(0);
 8017d34:	2000      	movs	r0, #0
 8017d36:	f002 fa7b 	bl	801a230 <_Z19twipr_error_handlerm>
		break;
 8017d3a:	e008      	b.n	8017d4e <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x56>
	}
	case TWIPR_CONTROL_CALLBACK_STEP: {
		this->_callbacks.step = callback;
 8017d3c:	68fa      	ldr	r2, [r7, #12]
 8017d3e:	f246 03ec 	movw	r3, #24812	; 0x60ec
 8017d42:	4413      	add	r3, r2
 8017d44:	6879      	ldr	r1, [r7, #4]
 8017d46:	4618      	mov	r0, r3
 8017d48:	f7ff ffb6 	bl	8017cb8 <_ZN19core_utils_CallbackIvmEaSERKS0_>
		break;
 8017d4c:	bf00      	nop
	}
	}
}
 8017d4e:	bf00      	nop
 8017d50:	3710      	adds	r7, #16
 8017d52:	46bd      	mov	sp, r7
 8017d54:	bd80      	pop	{r7, pc}
 8017d56:	bf00      	nop

08017d58 <_ZN20TWIPR_ControlManager19_trajectoryFinishedEv>:
/* ======================================================== */
void TWIPR_ControlManager::_trajectoryFinished() {
 8017d58:	b580      	push	{r7, lr}
 8017d5a:	b082      	sub	sp, #8
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]

	// Reset the external input
	this->_input.u_1 = 0;
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017d66:	461a      	mov	r2, r3
 8017d68:	f04f 0300 	mov.w	r3, #0
 8017d6c:	f8c2 3178 	str.w	r3, [r2, #376]	; 0x178
	this->_input.u_2 = 0;
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8017d76:	461a      	mov	r2, r3
 8017d78:	f04f 0300 	mov.w	r3, #0
 8017d7c:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c

	// Set the mode back to balancing
	this->mode = TWIPR_CONTROL_MODE_BALANCING;
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	2202      	movs	r2, #2
 8017d84:	705a      	strb	r2, [r3, #1]

	if (this->_callbacks.trajectory_finished.registered) {
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017d8c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d00c      	beq.n	8017dae <_ZN20TWIPR_ControlManager19_trajectoryFinishedEv+0x56>
		this->_callbacks.trajectory_finished.call(this->_trajectory.length);
 8017d94:	687a      	ldr	r2, [r7, #4]
 8017d96:	f246 03cc 	movw	r3, #24780	; 0x60cc
 8017d9a:	4413      	add	r3, r2
 8017d9c:	687a      	ldr	r2, [r7, #4]
 8017d9e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8017da2:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
 8017da6:	4611      	mov	r1, r2
 8017da8:	4618      	mov	r0, r3
 8017daa:	f7fc f8c1 	bl	8013f30 <_ZN19core_utils_CallbackIvtE4callEt>
	}
}
 8017dae:	bf00      	nop
 8017db0:	3708      	adds	r7, #8
 8017db2:	46bd      	mov	sp, r7
 8017db4:	bd80      	pop	{r7, pc}

08017db6 <_ZN20TWIPR_ControlManager9getSampleEv>:
/* ======================================================== */
twipr_logging_control_t TWIPR_ControlManager::getSample() {
 8017db6:	b480      	push	{r7}
 8017db8:	b083      	sub	sp, #12
 8017dba:	af00      	add	r7, sp, #0
 8017dbc:	6078      	str	r0, [r7, #4]
 8017dbe:	6039      	str	r1, [r7, #0]
	twipr_logging_control_t sample;
	sample.control_mode = this->mode;
 8017dc0:	683b      	ldr	r3, [r7, #0]
 8017dc2:	785a      	ldrb	r2, [r3, #1]
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	705a      	strb	r2, [r3, #1]
	sample.control_status = this->status;
 8017dc8:	683b      	ldr	r3, [r7, #0]
 8017dca:	f993 2000 	ldrsb.w	r2, [r3]
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	701a      	strb	r2, [r3, #0]
	sample.input = this->_input;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	683a      	ldr	r2, [r7, #0]
 8017dd6:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8017dda:	3304      	adds	r3, #4
 8017ddc:	f502 72bc 	add.w	r2, r2, #376	; 0x178
 8017de0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017de4:	e883 0003 	stmia.w	r3, {r0, r1}
	sample.output = this->_output;
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	683a      	ldr	r2, [r7, #0]
 8017dec:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
 8017df0:	330c      	adds	r3, #12
 8017df2:	f502 72c0 	add.w	r2, r2, #384	; 0x180
 8017df6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017dfa:	e883 0003 	stmia.w	r3, {r0, r1}

	if (this->mode == TWIPR_CONTROL_MODE_TRAJECTORY) {
 8017dfe:	683b      	ldr	r3, [r7, #0]
 8017e00:	785b      	ldrb	r3, [r3, #1]
 8017e02:	2b03      	cmp	r3, #3
 8017e04:	d10f      	bne.n	8017e26 <_ZN20TWIPR_ControlManager9getSampleEv+0x70>
		sample.trajectory_step = this->_trajectory.step;
 8017e06:	683b      	ldr	r3, [r7, #0]
 8017e08:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017e0c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017e10:	461a      	mov	r2, r3
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	615a      	str	r2, [r3, #20]
		sample.trajectory_id = this->_trajectory.trajectory_id;
 8017e16:	683b      	ldr	r3, [r7, #0]
 8017e18:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8017e1c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017e20:	687b      	ldr	r3, [r7, #4]
 8017e22:	831a      	strh	r2, [r3, #24]
	} else {
		sample.trajectory_step = 0;
		sample.trajectory_id = 0;
	}

	return sample;
 8017e24:	e005      	b.n	8017e32 <_ZN20TWIPR_ControlManager9getSampleEv+0x7c>
		sample.trajectory_step = 0;
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	2200      	movs	r2, #0
 8017e2a:	615a      	str	r2, [r3, #20]
		sample.trajectory_id = 0;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	2200      	movs	r2, #0
 8017e30:	831a      	strh	r2, [r3, #24]
	return sample;
 8017e32:	bf00      	nop
}
 8017e34:	6878      	ldr	r0, [r7, #4]
 8017e36:	370c      	adds	r7, #12
 8017e38:	46bd      	mov	sp, r7
 8017e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3e:	4770      	bx	lr

08017e40 <_ZN11RegisterMapC1Ev>:
class RegisterMap {
 8017e40:	b480      	push	{r7}
 8017e42:	b083      	sub	sp, #12
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
 8017e48:	4a04      	ldr	r2, [pc, #16]	; (8017e5c <_ZN11RegisterMapC1Ev+0x1c>)
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	601a      	str	r2, [r3, #0]
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	4618      	mov	r0, r3
 8017e52:	370c      	adds	r7, #12
 8017e54:	46bd      	mov	sp, r7
 8017e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5a:	4770      	bx	lr
 8017e5c:	08025700 	.word	0x08025700

08017e60 <_ZN22core_utils_RegisterMapILi20EEC1Et>:
	core_utils_RegisterMap<size>(uint16_t address) {
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b082      	sub	sp, #8
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
 8017e68:	460b      	mov	r3, r1
 8017e6a:	807b      	strh	r3, [r7, #2]
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	4618      	mov	r0, r3
 8017e70:	f7ff ffe6 	bl	8017e40 <_ZN11RegisterMapC1Ev>
 8017e74:	4a08      	ldr	r2, [pc, #32]	; (8017e98 <_ZN22core_utils_RegisterMapILi20EEC1Et+0x38>)
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	601a      	str	r2, [r3, #0]
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	330c      	adds	r3, #12
 8017e7e:	2250      	movs	r2, #80	; 0x50
 8017e80:	2100      	movs	r1, #0
 8017e82:	4618      	mov	r0, r3
 8017e84:	f00b f9c7 	bl	8023216 <memset>
		this->address = address;
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	887a      	ldrh	r2, [r7, #2]
 8017e8c:	809a      	strh	r2, [r3, #4]
	}
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	4618      	mov	r0, r3
 8017e92:	3708      	adds	r7, #8
 8017e94:	46bd      	mov	sp, r7
 8017e96:	bd80      	pop	{r7, pc}
 8017e98:	080254d0 	.word	0x080254d0

08017e9c <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tEC1Ev>:
	core_utils_RegisterFunction() {
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	b082      	sub	sp, #8
 8017ea0:	af00      	add	r7, sp, #0
 8017ea2:	6078      	str	r0, [r7, #4]
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	4618      	mov	r0, r3
 8017ea8:	f7fe ffda 	bl	8016e60 <_ZN13RegisterEntryC1Ev>
 8017eac:	4a07      	ldr	r2, [pc, #28]	; (8017ecc <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tEC1Ev+0x30>)
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	601a      	str	r2, [r3, #0]
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	2202      	movs	r2, #2
 8017eb6:	741a      	strb	r2, [r3, #16]
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	3314      	adds	r3, #20
 8017ebc:	4618      	mov	r0, r3
 8017ebe:	f000 fb43 	bl	8018548 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1Ev>
	}
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	3708      	adds	r7, #8
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	bd80      	pop	{r7, pc}
 8017ecc:	08025690 	.word	0x08025690

08017ed0 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tEC1Ev>:
	core_utils_RegisterEntry() {
 8017ed0:	b590      	push	{r4, r7, lr}
 8017ed2:	b08b      	sub	sp, #44	; 0x2c
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	4618      	mov	r0, r3
 8017edc:	f7fe ffc0 	bl	8016e60 <_ZN13RegisterEntryC1Ev>
 8017ee0:	4a0c      	ldr	r2, [pc, #48]	; (8017f14 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tEC1Ev+0x44>)
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	601a      	str	r2, [r3, #0]
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	2201      	movs	r2, #1
 8017eea:	71da      	strb	r2, [r3, #7]
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	f103 0410 	add.w	r4, r3, #16
 8017ef2:	f107 0308 	add.w	r3, r7, #8
 8017ef6:	4618      	mov	r0, r3
 8017ef8:	f7fc fb72 	bl	80145e0 <_ZN19core_utils_CallbackIvvEC1Ev>
 8017efc:	f107 0308 	add.w	r3, r7, #8
 8017f00:	4619      	mov	r1, r3
 8017f02:	4620      	mov	r0, r4
 8017f04:	f7fe ffd4 	bl	8016eb0 <_ZN8CallbackC1EOS_>
	}
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	372c      	adds	r7, #44	; 0x2c
 8017f0e:	46bd      	mov	sp, r7
 8017f10:	bd90      	pop	{r4, r7, pc}
 8017f12:	bf00      	nop
 8017f14:	08025660 	.word	0x08025660

08017f18 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tEC1Ev>:
	core_utils_RegisterEntry() {
 8017f18:	b590      	push	{r4, r7, lr}
 8017f1a:	b08b      	sub	sp, #44	; 0x2c
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	6078      	str	r0, [r7, #4]
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	4618      	mov	r0, r3
 8017f24:	f7fe ff9c 	bl	8016e60 <_ZN13RegisterEntryC1Ev>
 8017f28:	4a0c      	ldr	r2, [pc, #48]	; (8017f5c <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tEC1Ev+0x44>)
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	601a      	str	r2, [r3, #0]
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	2201      	movs	r2, #1
 8017f32:	71da      	strb	r2, [r3, #7]
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	f103 0410 	add.w	r4, r3, #16
 8017f3a:	f107 0308 	add.w	r3, r7, #8
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f7fc fb4e 	bl	80145e0 <_ZN19core_utils_CallbackIvvEC1Ev>
 8017f44:	f107 0308 	add.w	r3, r7, #8
 8017f48:	4619      	mov	r1, r3
 8017f4a:	4620      	mov	r0, r4
 8017f4c:	f7fe ffb0 	bl	8016eb0 <_ZN8CallbackC1EOS_>
	}
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	4618      	mov	r0, r3
 8017f54:	372c      	adds	r7, #44	; 0x2c
 8017f56:	46bd      	mov	sp, r7
 8017f58:	bd90      	pop	{r4, r7, pc}
 8017f5a:	bf00      	nop
 8017f5c:	08025630 	.word	0x08025630

08017f60 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tEC1Ev>:
	core_utils_RegisterFunction() {
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b082      	sub	sp, #8
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	4618      	mov	r0, r3
 8017f6c:	f7fe ff78 	bl	8016e60 <_ZN13RegisterEntryC1Ev>
 8017f70:	4a07      	ldr	r2, [pc, #28]	; (8017f90 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tEC1Ev+0x30>)
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	601a      	str	r2, [r3, #0]
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	2202      	movs	r2, #2
 8017f7a:	71da      	strb	r2, [r3, #7]
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	330c      	adds	r3, #12
 8017f80:	4618      	mov	r0, r3
 8017f82:	f000 faff 	bl	8018584 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev>
	}
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	4618      	mov	r0, r3
 8017f8a:	3708      	adds	r7, #8
 8017f8c:	46bd      	mov	sp, r7
 8017f8e:	bd80      	pop	{r7, pc}
 8017f90:	080255f0 	.word	0x080255f0

08017f94 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tEC1Ev>:
	core_utils_RegisterFunction() {
 8017f94:	b580      	push	{r7, lr}
 8017f96:	b082      	sub	sp, #8
 8017f98:	af00      	add	r7, sp, #0
 8017f9a:	6078      	str	r0, [r7, #4]
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	4618      	mov	r0, r3
 8017fa0:	f7fe ff5e 	bl	8016e60 <_ZN13RegisterEntryC1Ev>
 8017fa4:	4a07      	ldr	r2, [pc, #28]	; (8017fc4 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tEC1Ev+0x30>)
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	601a      	str	r2, [r3, #0]
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	2202      	movs	r2, #2
 8017fae:	731a      	strb	r2, [r3, #12]
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	3310      	adds	r3, #16
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	f000 fb03 	bl	80185c0 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1Ev>
	}
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	3708      	adds	r7, #8
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd80      	pop	{r7, pc}
 8017fc4:	080255b0 	.word	0x080255b0

08017fc8 <_ZN27core_utils_RegisterFunctionIhA8_fEC1Ev>:
	core_utils_RegisterFunction() {
 8017fc8:	b580      	push	{r7, lr}
 8017fca:	b082      	sub	sp, #8
 8017fcc:	af00      	add	r7, sp, #0
 8017fce:	6078      	str	r0, [r7, #4]
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	4618      	mov	r0, r3
 8017fd4:	f7fe ff44 	bl	8016e60 <_ZN13RegisterEntryC1Ev>
 8017fd8:	4a08      	ldr	r2, [pc, #32]	; (8017ffc <_ZN27core_utils_RegisterFunctionIhA8_fEC1Ev+0x34>)
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	601a      	str	r2, [r3, #0]
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	2202      	movs	r2, #2
 8017fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	332c      	adds	r3, #44	; 0x2c
 8017fea:	4618      	mov	r0, r3
 8017fec:	f000 fb06 	bl	80185fc <_ZN19core_utils_CallbackIhA8_fEC1Ev>
	}
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	4618      	mov	r0, r3
 8017ff4:	3708      	adds	r7, #8
 8017ff6:	46bd      	mov	sp, r7
 8017ff8:	bd80      	pop	{r7, pc}
 8017ffa:	bf00      	nop
 8017ffc:	08025570 	.word	0x08025570

08018000 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tEC1Ev>:
	core_utils_RegisterEntry() {
 8018000:	b590      	push	{r4, r7, lr}
 8018002:	b08b      	sub	sp, #44	; 0x2c
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	4618      	mov	r0, r3
 801800c:	f7fe ff28 	bl	8016e60 <_ZN13RegisterEntryC1Ev>
 8018010:	4a0c      	ldr	r2, [pc, #48]	; (8018044 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tEC1Ev+0x44>)
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	601a      	str	r2, [r3, #0]
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	2201      	movs	r2, #1
 801801a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8018024:	f107 0308 	add.w	r3, r7, #8
 8018028:	4618      	mov	r0, r3
 801802a:	f7fc fad9 	bl	80145e0 <_ZN19core_utils_CallbackIvvEC1Ev>
 801802e:	f107 0308 	add.w	r3, r7, #8
 8018032:	4619      	mov	r1, r3
 8018034:	4620      	mov	r0, r4
 8018036:	f7fe ff3b 	bl	8016eb0 <_ZN8CallbackC1EOS_>
	}
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	4618      	mov	r0, r3
 801803e:	372c      	adds	r7, #44	; 0x2c
 8018040:	46bd      	mov	sp, r7
 8018042:	bd90      	pop	{r4, r7, pc}
 8018044:	08025540 	.word	0x08025540

08018048 <_ZN27core_utils_RegisterFunctionIvfEC1Ev>:
	core_utils_RegisterFunction() {
 8018048:	b580      	push	{r7, lr}
 801804a:	b082      	sub	sp, #8
 801804c:	af00      	add	r7, sp, #0
 801804e:	6078      	str	r0, [r7, #4]
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	4618      	mov	r0, r3
 8018054:	f7fe ff04 	bl	8016e60 <_ZN13RegisterEntryC1Ev>
 8018058:	4a07      	ldr	r2, [pc, #28]	; (8018078 <_ZN27core_utils_RegisterFunctionIvfEC1Ev+0x30>)
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	601a      	str	r2, [r3, #0]
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	2202      	movs	r2, #2
 8018062:	731a      	strb	r2, [r3, #12]
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	3310      	adds	r3, #16
 8018068:	4618      	mov	r0, r3
 801806a:	f000 fae5 	bl	8018638 <_ZN19core_utils_CallbackIvfEC1Ev>
	}
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	4618      	mov	r0, r3
 8018072:	3708      	adds	r7, #8
 8018074:	46bd      	mov	sp, r7
 8018076:	bd80      	pop	{r7, pc}
 8018078:	08025500 	.word	0x08025500

0801807c <_ZN19core_utils_CallbackIvmEC1Ev>:
	core_utils_Callback() {
 801807c:	b580      	push	{r7, lr}
 801807e:	b082      	sub	sp, #8
 8018080:	af00      	add	r7, sp, #0
 8018082:	6078      	str	r0, [r7, #4]
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	4618      	mov	r0, r3
 8018088:	f7fb fd82 	bl	8013b90 <_ZN8CallbackC1Ev>
 801808c:	4a09      	ldr	r2, [pc, #36]	; (80180b4 <_ZN19core_utils_CallbackIvmEC1Ev+0x38>)
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	601a      	str	r2, [r3, #0]
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	2200      	movs	r2, #0
 8018096:	711a      	strb	r2, [r3, #4]
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	3308      	adds	r3, #8
 801809c:	2100      	movs	r1, #0
 801809e:	4618      	mov	r0, r3
 80180a0:	f7fe fb43 	bl	801672a <_ZN26core_utils_FunctionPointerIvmEC1EPFvmE>
		this->registered = 0;
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	2200      	movs	r2, #0
 80180a8:	711a      	strb	r2, [r3, #4]
	}
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	4618      	mov	r0, r3
 80180ae:	3708      	adds	r7, #8
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}
 80180b4:	0802549c 	.word	0x0802549c

080180b8 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 80180b8:	b5b0      	push	{r4, r5, r7, lr}
 80180ba:	b08a      	sub	sp, #40	; 0x28
 80180bc:	af00      	add	r7, sp, #0
 80180be:	60f8      	str	r0, [r7, #12]
 80180c0:	60b9      	str	r1, [r7, #8]
 80180c2:	4639      	mov	r1, r7
 80180c4:	e881 000c 	stmia.w	r1, {r2, r3}
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	4618      	mov	r0, r3
 80180cc:	f7fb fd60 	bl	8013b90 <_ZN8CallbackC1Ev>
 80180d0:	4a12      	ldr	r2, [pc, #72]	; (801811c <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E+0x64>)
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	601a      	str	r2, [r3, #0]
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	2200      	movs	r2, #0
 80180da:	711a      	strb	r2, [r3, #4]
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	3308      	adds	r3, #8
 80180e0:	2100      	movs	r1, #0
 80180e2:	4618      	mov	r0, r3
 80180e4:	f000 fac6 	bl	8018674 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 80180e8:	f107 0010 	add.w	r0, r7, #16
 80180ec:	463b      	mov	r3, r7
 80180ee:	cb0c      	ldmia	r3, {r2, r3}
 80180f0:	68b9      	ldr	r1, [r7, #8]
 80180f2:	f000 facd 	bl	8018690 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	f103 0408 	add.w	r4, r3, #8
 80180fc:	f107 0510 	add.w	r5, r7, #16
 8018100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018104:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018108:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	2201      	movs	r2, #1
 8018110:	711a      	strb	r2, [r3, #4]
	}
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	4618      	mov	r0, r3
 8018116:	3728      	adds	r7, #40	; 0x28
 8018118:	46bd      	mov	sp, r7
 801811a:	bdb0      	pop	{r4, r5, r7, pc}
 801811c:	080256c0 	.word	0x080256c0

08018120 <_ZN19core_utils_CallbackIv21twipr_control_input_tEaSERKS1_>:
class core_utils_Callback: public Callback {
 8018120:	b5b0      	push	{r4, r5, r7, lr}
 8018122:	b082      	sub	sp, #8
 8018124:	af00      	add	r7, sp, #0
 8018126:	6078      	str	r0, [r7, #4]
 8018128:	6039      	str	r1, [r7, #0]
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	683a      	ldr	r2, [r7, #0]
 801812e:	4611      	mov	r1, r2
 8018130:	4618      	mov	r0, r3
 8018132:	f7fb fd52 	bl	8013bda <_ZN8CallbackaSERKS_>
 8018136:	683b      	ldr	r3, [r7, #0]
 8018138:	791a      	ldrb	r2, [r3, #4]
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	711a      	strb	r2, [r3, #4]
 801813e:	687a      	ldr	r2, [r7, #4]
 8018140:	683b      	ldr	r3, [r7, #0]
 8018142:	f102 0408 	add.w	r4, r2, #8
 8018146:	f103 0508 	add.w	r5, r3, #8
 801814a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801814c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801814e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018152:	e884 0003 	stmia.w	r4, {r0, r1}
 8018156:	687b      	ldr	r3, [r7, #4]
 8018158:	4618      	mov	r0, r3
 801815a:	3708      	adds	r7, #8
 801815c:	46bd      	mov	sp, r7
 801815e:	bdb0      	pop	{r4, r5, r7, pc}

08018160 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE3setEtP11RegisterMap19core_utils_CallbackIvS0_E>:
	void set(uint16_t address, RegisterMap *map,
 8018160:	b580      	push	{r7, lr}
 8018162:	b084      	sub	sp, #16
 8018164:	af00      	add	r7, sp, #0
 8018166:	60f8      	str	r0, [r7, #12]
 8018168:	607a      	str	r2, [r7, #4]
 801816a:	603b      	str	r3, [r7, #0]
 801816c:	460b      	mov	r3, r1
 801816e:	817b      	strh	r3, [r7, #10]
		this->address = address;
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	897a      	ldrh	r2, [r7, #10]
 8018174:	825a      	strh	r2, [r3, #18]
		this->function = function;
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	3314      	adds	r3, #20
 801817a:	6839      	ldr	r1, [r7, #0]
 801817c:	4618      	mov	r0, r3
 801817e:	f7ff ffcf 	bl	8018120 <_ZN19core_utils_CallbackIv21twipr_control_input_tEaSERKS1_>
		map->addEntry(this->address, this);
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	3308      	adds	r3, #8
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	68fa      	ldr	r2, [r7, #12]
 801818c:	8a51      	ldrh	r1, [r2, #18]
 801818e:	68fa      	ldr	r2, [r7, #12]
 8018190:	6878      	ldr	r0, [r7, #4]
 8018192:	4798      	blx	r3
	}
 8018194:	bf00      	nop
 8018196:	3710      	adds	r7, #16
 8018198:	46bd      	mov	sp, r7
 801819a:	bd80      	pop	{r7, pc}

0801819c <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>:
	void set(uint16_t address, RegisterMap *map, T *data,
 801819c:	b580      	push	{r7, lr}
 801819e:	b084      	sub	sp, #16
 80181a0:	af00      	add	r7, sp, #0
 80181a2:	60f8      	str	r0, [r7, #12]
 80181a4:	607a      	str	r2, [r7, #4]
 80181a6:	603b      	str	r3, [r7, #0]
 80181a8:	460b      	mov	r3, r1
 80181aa:	817b      	strh	r3, [r7, #10]
		this->address = address;
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	897a      	ldrh	r2, [r7, #10]
 80181b0:	811a      	strh	r2, [r3, #8]
		this->data = data;
 80181b2:	68fb      	ldr	r3, [r7, #12]
 80181b4:	683a      	ldr	r2, [r7, #0]
 80181b6:	60da      	str	r2, [r3, #12]
		map->addEntry(address, this);
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	3308      	adds	r3, #8
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	68fa      	ldr	r2, [r7, #12]
 80181c2:	8979      	ldrh	r1, [r7, #10]
 80181c4:	6878      	ldr	r0, [r7, #4]
 80181c6:	4798      	blx	r3
		this->rw = rw;
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	7e3a      	ldrb	r2, [r7, #24]
 80181cc:	729a      	strb	r2, [r3, #10]
	}
 80181ce:	bf00      	nop
 80181d0:	3710      	adds	r7, #16
 80181d2:	46bd      	mov	sp, r7
 80181d4:	bd80      	pop	{r7, pc}
	...

080181d8 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 80181d8:	b5b0      	push	{r4, r5, r7, lr}
 80181da:	b08a      	sub	sp, #40	; 0x28
 80181dc:	af00      	add	r7, sp, #0
 80181de:	60f8      	str	r0, [r7, #12]
 80181e0:	60b9      	str	r1, [r7, #8]
 80181e2:	4639      	mov	r1, r7
 80181e4:	e881 000c 	stmia.w	r1, {r2, r3}
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	4618      	mov	r0, r3
 80181ec:	f7fb fcd0 	bl	8013b90 <_ZN8CallbackC1Ev>
 80181f0:	4a12      	ldr	r2, [pc, #72]	; (801823c <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E+0x64>)
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	601a      	str	r2, [r3, #0]
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	2200      	movs	r2, #0
 80181fa:	711a      	strb	r2, [r3, #4]
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	3308      	adds	r3, #8
 8018200:	2100      	movs	r1, #0
 8018202:	4618      	mov	r0, r3
 8018204:	f000 fa57 	bl	80186b6 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8018208:	f107 0010 	add.w	r0, r7, #16
 801820c:	463b      	mov	r3, r7
 801820e:	cb0c      	ldmia	r3, {r2, r3}
 8018210:	68b9      	ldr	r1, [r7, #8]
 8018212:	f000 fa5e 	bl	80186d2 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	f103 0408 	add.w	r4, r3, #8
 801821c:	f107 0510 	add.w	r5, r7, #16
 8018220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018224:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018228:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	2201      	movs	r2, #1
 8018230:	711a      	strb	r2, [r3, #4]
	}
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	4618      	mov	r0, r3
 8018236:	3728      	adds	r7, #40	; 0x28
 8018238:	46bd      	mov	sp, r7
 801823a:	bdb0      	pop	{r4, r5, r7, pc}
 801823c:	08025620 	.word	0x08025620

08018240 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEaSERKS1_>:
class core_utils_Callback: public Callback {
 8018240:	b5b0      	push	{r4, r5, r7, lr}
 8018242:	b082      	sub	sp, #8
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]
 8018248:	6039      	str	r1, [r7, #0]
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	683a      	ldr	r2, [r7, #0]
 801824e:	4611      	mov	r1, r2
 8018250:	4618      	mov	r0, r3
 8018252:	f7fb fcc2 	bl	8013bda <_ZN8CallbackaSERKS_>
 8018256:	683b      	ldr	r3, [r7, #0]
 8018258:	791a      	ldrb	r2, [r3, #4]
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	711a      	strb	r2, [r3, #4]
 801825e:	687a      	ldr	r2, [r7, #4]
 8018260:	683b      	ldr	r3, [r7, #0]
 8018262:	f102 0408 	add.w	r4, r2, #8
 8018266:	f103 0508 	add.w	r5, r3, #8
 801826a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801826c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801826e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018272:	e884 0003 	stmia.w	r4, {r0, r1}
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	4618      	mov	r0, r3
 801827a:	3708      	adds	r7, #8
 801827c:	46bd      	mov	sp, r7
 801827e:	bdb0      	pop	{r4, r5, r7, pc}

08018280 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>:
	void set(uint16_t address, RegisterMap *map,
 8018280:	b580      	push	{r7, lr}
 8018282:	b084      	sub	sp, #16
 8018284:	af00      	add	r7, sp, #0
 8018286:	60f8      	str	r0, [r7, #12]
 8018288:	607a      	str	r2, [r7, #4]
 801828a:	603b      	str	r3, [r7, #0]
 801828c:	460b      	mov	r3, r1
 801828e:	817b      	strh	r3, [r7, #10]
		this->address = address;
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	897a      	ldrh	r2, [r7, #10]
 8018294:	811a      	strh	r2, [r3, #8]
		this->function = function;
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	330c      	adds	r3, #12
 801829a:	6839      	ldr	r1, [r7, #0]
 801829c:	4618      	mov	r0, r3
 801829e:	f7ff ffcf 	bl	8018240 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEaSERKS1_>
		map->addEntry(this->address, this);
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	3308      	adds	r3, #8
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	68fa      	ldr	r2, [r7, #12]
 80182ac:	8911      	ldrh	r1, [r2, #8]
 80182ae:	68fa      	ldr	r2, [r7, #12]
 80182b0:	6878      	ldr	r0, [r7, #4]
 80182b2:	4798      	blx	r3
	}
 80182b4:	bf00      	nop
 80182b6:	3710      	adds	r7, #16
 80182b8:	46bd      	mov	sp, r7
 80182ba:	bd80      	pop	{r7, pc}

080182bc <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 80182bc:	b5b0      	push	{r4, r5, r7, lr}
 80182be:	b08a      	sub	sp, #40	; 0x28
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	60f8      	str	r0, [r7, #12]
 80182c4:	60b9      	str	r1, [r7, #8]
 80182c6:	4639      	mov	r1, r7
 80182c8:	e881 000c 	stmia.w	r1, {r2, r3}
 80182cc:	68fb      	ldr	r3, [r7, #12]
 80182ce:	4618      	mov	r0, r3
 80182d0:	f7fb fc5e 	bl	8013b90 <_ZN8CallbackC1Ev>
 80182d4:	4a12      	ldr	r2, [pc, #72]	; (8018320 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E+0x64>)
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	601a      	str	r2, [r3, #0]
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	2200      	movs	r2, #0
 80182de:	711a      	strb	r2, [r3, #4]
 80182e0:	68fb      	ldr	r3, [r7, #12]
 80182e2:	3308      	adds	r3, #8
 80182e4:	2100      	movs	r1, #0
 80182e6:	4618      	mov	r0, r3
 80182e8:	f000 fa06 	bl	80186f8 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1EPFhS0_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 80182ec:	f107 0010 	add.w	r0, r7, #16
 80182f0:	463b      	mov	r3, r7
 80182f2:	cb0c      	ldmia	r3, {r2, r3}
 80182f4:	68b9      	ldr	r1, [r7, #8]
 80182f6:	f000 fa0d 	bl	8018714 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	f103 0408 	add.w	r4, r3, #8
 8018300:	f107 0510 	add.w	r5, r7, #16
 8018304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018308:	e895 0003 	ldmia.w	r5, {r0, r1}
 801830c:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	2201      	movs	r2, #1
 8018314:	711a      	strb	r2, [r3, #4]
	}
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	4618      	mov	r0, r3
 801831a:	3728      	adds	r7, #40	; 0x28
 801831c:	46bd      	mov	sp, r7
 801831e:	bdb0      	pop	{r4, r5, r7, pc}
 8018320:	080255e0 	.word	0x080255e0

08018324 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEaSERKS1_>:
class core_utils_Callback: public Callback {
 8018324:	b5b0      	push	{r4, r5, r7, lr}
 8018326:	b082      	sub	sp, #8
 8018328:	af00      	add	r7, sp, #0
 801832a:	6078      	str	r0, [r7, #4]
 801832c:	6039      	str	r1, [r7, #0]
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	683a      	ldr	r2, [r7, #0]
 8018332:	4611      	mov	r1, r2
 8018334:	4618      	mov	r0, r3
 8018336:	f7fb fc50 	bl	8013bda <_ZN8CallbackaSERKS_>
 801833a:	683b      	ldr	r3, [r7, #0]
 801833c:	791a      	ldrb	r2, [r3, #4]
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	711a      	strb	r2, [r3, #4]
 8018342:	687a      	ldr	r2, [r7, #4]
 8018344:	683b      	ldr	r3, [r7, #0]
 8018346:	f102 0408 	add.w	r4, r2, #8
 801834a:	f103 0508 	add.w	r5, r3, #8
 801834e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018350:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018352:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018356:	e884 0003 	stmia.w	r4, {r0, r1}
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	4618      	mov	r0, r3
 801835e:	3708      	adds	r7, #8
 8018360:	46bd      	mov	sp, r7
 8018362:	bdb0      	pop	{r4, r5, r7, pc}

08018364 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>:
	void set(uint16_t address, RegisterMap *map,
 8018364:	b580      	push	{r7, lr}
 8018366:	b084      	sub	sp, #16
 8018368:	af00      	add	r7, sp, #0
 801836a:	60f8      	str	r0, [r7, #12]
 801836c:	607a      	str	r2, [r7, #4]
 801836e:	603b      	str	r3, [r7, #0]
 8018370:	460b      	mov	r3, r1
 8018372:	817b      	strh	r3, [r7, #10]
		this->address = address;
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	897a      	ldrh	r2, [r7, #10]
 8018378:	81da      	strh	r2, [r3, #14]
		this->function = function;
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	3310      	adds	r3, #16
 801837e:	6839      	ldr	r1, [r7, #0]
 8018380:	4618      	mov	r0, r3
 8018382:	f7ff ffcf 	bl	8018324 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEaSERKS1_>
		map->addEntry(this->address, this);
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	681b      	ldr	r3, [r3, #0]
 801838a:	3308      	adds	r3, #8
 801838c:	681b      	ldr	r3, [r3, #0]
 801838e:	68fa      	ldr	r2, [r7, #12]
 8018390:	89d1      	ldrh	r1, [r2, #14]
 8018392:	68fa      	ldr	r2, [r7, #12]
 8018394:	6878      	ldr	r0, [r7, #4]
 8018396:	4798      	blx	r3
	}
 8018398:	bf00      	nop
 801839a:	3710      	adds	r7, #16
 801839c:	46bd      	mov	sp, r7
 801839e:	bd80      	pop	{r7, pc}

080183a0 <_ZN19core_utils_CallbackIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
 80183a0:	b5b0      	push	{r4, r5, r7, lr}
 80183a2:	b08a      	sub	sp, #40	; 0x28
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	60f8      	str	r0, [r7, #12]
 80183a8:	60b9      	str	r1, [r7, #8]
 80183aa:	4639      	mov	r1, r7
 80183ac:	e881 000c 	stmia.w	r1, {r2, r3}
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	4618      	mov	r0, r3
 80183b4:	f7fb fbec 	bl	8013b90 <_ZN8CallbackC1Ev>
 80183b8:	4a12      	ldr	r2, [pc, #72]	; (8018404 <_ZN19core_utils_CallbackIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE+0x64>)
 80183ba:	68fb      	ldr	r3, [r7, #12]
 80183bc:	601a      	str	r2, [r3, #0]
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	2200      	movs	r2, #0
 80183c2:	711a      	strb	r2, [r3, #4]
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	3308      	adds	r3, #8
 80183c8:	2100      	movs	r1, #0
 80183ca:	4618      	mov	r0, r3
 80183cc:	f7fb fdc1 	bl	8013f52 <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<R,void>(object, member);
 80183d0:	f107 0010 	add.w	r0, r7, #16
 80183d4:	463b      	mov	r3, r7
 80183d6:	cb0c      	ldmia	r3, {r2, r3}
 80183d8:	68b9      	ldr	r1, [r7, #8]
 80183da:	f000 f9ae 	bl	801873a <_ZN26core_utils_FunctionPointerIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE>
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	f103 0408 	add.w	r4, r3, #8
 80183e4:	f107 0510 	add.w	r5, r7, #16
 80183e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80183ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80183f0:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	2201      	movs	r2, #1
 80183f8:	711a      	strb	r2, [r3, #4]
	}
 80183fa:	68fb      	ldr	r3, [r7, #12]
 80183fc:	4618      	mov	r0, r3
 80183fe:	3728      	adds	r7, #40	; 0x28
 8018400:	46bd      	mov	sp, r7
 8018402:	bdb0      	pop	{r4, r5, r7, pc}
 8018404:	080253f0 	.word	0x080253f0

08018408 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>:
	void set(uint16_t address, RegisterMap *map, T *data,
 8018408:	b580      	push	{r7, lr}
 801840a:	b084      	sub	sp, #16
 801840c:	af00      	add	r7, sp, #0
 801840e:	60f8      	str	r0, [r7, #12]
 8018410:	607a      	str	r2, [r7, #4]
 8018412:	603b      	str	r3, [r7, #0]
 8018414:	460b      	mov	r3, r1
 8018416:	817b      	strh	r3, [r7, #10]
		this->address = address;
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	897a      	ldrh	r2, [r7, #10]
 801841c:	875a      	strh	r2, [r3, #58]	; 0x3a
		this->data = data;
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	683a      	ldr	r2, [r7, #0]
 8018422:	641a      	str	r2, [r3, #64]	; 0x40
		map->addEntry(address, this);
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	3308      	adds	r3, #8
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	68fa      	ldr	r2, [r7, #12]
 801842e:	8979      	ldrh	r1, [r7, #10]
 8018430:	6878      	ldr	r0, [r7, #4]
 8018432:	4798      	blx	r3
		this->rw = rw;
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	7e3a      	ldrb	r2, [r7, #24]
 8018438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	}
 801843c:	bf00      	nop
 801843e:	3710      	adds	r7, #16
 8018440:	46bd      	mov	sp, r7
 8018442:	bd80      	pop	{r7, pc}

08018444 <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 8018444:	b5b0      	push	{r4, r5, r7, lr}
 8018446:	b08a      	sub	sp, #40	; 0x28
 8018448:	af00      	add	r7, sp, #0
 801844a:	60f8      	str	r0, [r7, #12]
 801844c:	60b9      	str	r1, [r7, #8]
 801844e:	4639      	mov	r1, r7
 8018450:	e881 000c 	stmia.w	r1, {r2, r3}
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	4618      	mov	r0, r3
 8018458:	f7fb fb9a 	bl	8013b90 <_ZN8CallbackC1Ev>
 801845c:	4a12      	ldr	r2, [pc, #72]	; (80184a8 <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE+0x64>)
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	601a      	str	r2, [r3, #0]
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	2200      	movs	r2, #0
 8018466:	711a      	strb	r2, [r3, #4]
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	3308      	adds	r3, #8
 801846c:	2100      	movs	r1, #0
 801846e:	4618      	mov	r0, r3
 8018470:	f000 f976 	bl	8018760 <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8018474:	f107 0010 	add.w	r0, r7, #16
 8018478:	463b      	mov	r3, r7
 801847a:	cb0c      	ldmia	r3, {r2, r3}
 801847c:	68b9      	ldr	r1, [r7, #8]
 801847e:	f000 f97d 	bl	801877c <_ZN26core_utils_FunctionPointerIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>
 8018482:	68fb      	ldr	r3, [r7, #12]
 8018484:	f103 0408 	add.w	r4, r3, #8
 8018488:	f107 0510 	add.w	r5, r7, #16
 801848c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801848e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018490:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018494:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8018498:	68fb      	ldr	r3, [r7, #12]
 801849a:	2201      	movs	r2, #1
 801849c:	711a      	strb	r2, [r3, #4]
	}
 801849e:	68fb      	ldr	r3, [r7, #12]
 80184a0:	4618      	mov	r0, r3
 80184a2:	3728      	adds	r7, #40	; 0x28
 80184a4:	46bd      	mov	sp, r7
 80184a6:	bdb0      	pop	{r4, r5, r7, pc}
 80184a8:	080255a0 	.word	0x080255a0

080184ac <_ZN19core_utils_CallbackIhA8_fEaSERKS1_>:
class core_utils_Callback: public Callback {
 80184ac:	b5b0      	push	{r4, r5, r7, lr}
 80184ae:	b082      	sub	sp, #8
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
 80184b4:	6039      	str	r1, [r7, #0]
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	683a      	ldr	r2, [r7, #0]
 80184ba:	4611      	mov	r1, r2
 80184bc:	4618      	mov	r0, r3
 80184be:	f7fb fb8c 	bl	8013bda <_ZN8CallbackaSERKS_>
 80184c2:	683b      	ldr	r3, [r7, #0]
 80184c4:	791a      	ldrb	r2, [r3, #4]
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	711a      	strb	r2, [r3, #4]
 80184ca:	687a      	ldr	r2, [r7, #4]
 80184cc:	683b      	ldr	r3, [r7, #0]
 80184ce:	f102 0408 	add.w	r4, r2, #8
 80184d2:	f103 0508 	add.w	r5, r3, #8
 80184d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184da:	e895 0003 	ldmia.w	r5, {r0, r1}
 80184de:	e884 0003 	stmia.w	r4, {r0, r1}
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	4618      	mov	r0, r3
 80184e6:	3708      	adds	r7, #8
 80184e8:	46bd      	mov	sp, r7
 80184ea:	bdb0      	pop	{r4, r5, r7, pc}

080184ec <_ZN27core_utils_RegisterFunctionIhA8_fE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>:
	void set(uint16_t address, RegisterMap *map,
 80184ec:	b580      	push	{r7, lr}
 80184ee:	b084      	sub	sp, #16
 80184f0:	af00      	add	r7, sp, #0
 80184f2:	60f8      	str	r0, [r7, #12]
 80184f4:	607a      	str	r2, [r7, #4]
 80184f6:	603b      	str	r3, [r7, #0]
 80184f8:	460b      	mov	r3, r1
 80184fa:	817b      	strh	r3, [r7, #10]
		this->address = address;
 80184fc:	68fb      	ldr	r3, [r7, #12]
 80184fe:	897a      	ldrh	r2, [r7, #10]
 8018500:	855a      	strh	r2, [r3, #42]	; 0x2a
		this->function = function;
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	332c      	adds	r3, #44	; 0x2c
 8018506:	6839      	ldr	r1, [r7, #0]
 8018508:	4618      	mov	r0, r3
 801850a:	f7ff ffcf 	bl	80184ac <_ZN19core_utils_CallbackIhA8_fEaSERKS1_>
		map->addEntry(this->address, this);
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	3308      	adds	r3, #8
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	68fa      	ldr	r2, [r7, #12]
 8018518:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 801851a:	68fa      	ldr	r2, [r7, #12]
 801851c:	6878      	ldr	r0, [r7, #4]
 801851e:	4798      	blx	r3
	}
 8018520:	bf00      	nop
 8018522:	3710      	adds	r7, #16
 8018524:	46bd      	mov	sp, r7
 8018526:	bd80      	pop	{r7, pc}

08018528 <_ZN19core_utils_CallbackIvmE4callEm>:
	R call(A argument){
 8018528:	b580      	push	{r7, lr}
 801852a:	b082      	sub	sp, #8
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
 8018530:	6039      	str	r1, [r7, #0]
		return this->_fp(argument);
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	3308      	adds	r3, #8
 8018536:	6839      	ldr	r1, [r7, #0]
 8018538:	4618      	mov	r0, r3
 801853a:	f000 f932 	bl	80187a2 <_ZN26core_utils_FunctionPointerIvmEclEm>
 801853e:	bf00      	nop
	}
 8018540:	3708      	adds	r7, #8
 8018542:	46bd      	mov	sp, r7
 8018544:	bd80      	pop	{r7, pc}
	...

08018548 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1Ev>:
	core_utils_Callback() {
 8018548:	b580      	push	{r7, lr}
 801854a:	b082      	sub	sp, #8
 801854c:	af00      	add	r7, sp, #0
 801854e:	6078      	str	r0, [r7, #4]
 8018550:	687b      	ldr	r3, [r7, #4]
 8018552:	4618      	mov	r0, r3
 8018554:	f7fb fb1c 	bl	8013b90 <_ZN8CallbackC1Ev>
 8018558:	4a09      	ldr	r2, [pc, #36]	; (8018580 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1Ev+0x38>)
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	601a      	str	r2, [r3, #0]
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	2200      	movs	r2, #0
 8018562:	711a      	strb	r2, [r3, #4]
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	3308      	adds	r3, #8
 8018568:	2100      	movs	r1, #0
 801856a:	4618      	mov	r0, r3
 801856c:	f000 f882 	bl	8018674 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1EPFvS0_E>
		this->registered = 0;
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	2200      	movs	r2, #0
 8018574:	711a      	strb	r2, [r3, #4]
	}
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	4618      	mov	r0, r3
 801857a:	3708      	adds	r7, #8
 801857c:	46bd      	mov	sp, r7
 801857e:	bd80      	pop	{r7, pc}
 8018580:	080256c0 	.word	0x080256c0

08018584 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev>:
	core_utils_Callback() {
 8018584:	b580      	push	{r7, lr}
 8018586:	b082      	sub	sp, #8
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	4618      	mov	r0, r3
 8018590:	f7fb fafe 	bl	8013b90 <_ZN8CallbackC1Ev>
 8018594:	4a09      	ldr	r2, [pc, #36]	; (80185bc <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev+0x38>)
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	601a      	str	r2, [r3, #0]
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	2200      	movs	r2, #0
 801859e:	711a      	strb	r2, [r3, #4]
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	3308      	adds	r3, #8
 80185a4:	2100      	movs	r1, #0
 80185a6:	4618      	mov	r0, r3
 80185a8:	f000 f885 	bl	80186b6 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>
		this->registered = 0;
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	2200      	movs	r2, #0
 80185b0:	711a      	strb	r2, [r3, #4]
	}
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	4618      	mov	r0, r3
 80185b6:	3708      	adds	r7, #8
 80185b8:	46bd      	mov	sp, r7
 80185ba:	bd80      	pop	{r7, pc}
 80185bc:	08025620 	.word	0x08025620

080185c0 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1Ev>:
	core_utils_Callback() {
 80185c0:	b580      	push	{r7, lr}
 80185c2:	b082      	sub	sp, #8
 80185c4:	af00      	add	r7, sp, #0
 80185c6:	6078      	str	r0, [r7, #4]
 80185c8:	687b      	ldr	r3, [r7, #4]
 80185ca:	4618      	mov	r0, r3
 80185cc:	f7fb fae0 	bl	8013b90 <_ZN8CallbackC1Ev>
 80185d0:	4a09      	ldr	r2, [pc, #36]	; (80185f8 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1Ev+0x38>)
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	601a      	str	r2, [r3, #0]
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	2200      	movs	r2, #0
 80185da:	711a      	strb	r2, [r3, #4]
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	3308      	adds	r3, #8
 80185e0:	2100      	movs	r1, #0
 80185e2:	4618      	mov	r0, r3
 80185e4:	f000 f888 	bl	80186f8 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1EPFhS0_E>
		this->registered = 0;
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	2200      	movs	r2, #0
 80185ec:	711a      	strb	r2, [r3, #4]
	}
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	4618      	mov	r0, r3
 80185f2:	3708      	adds	r7, #8
 80185f4:	46bd      	mov	sp, r7
 80185f6:	bd80      	pop	{r7, pc}
 80185f8:	080255e0 	.word	0x080255e0

080185fc <_ZN19core_utils_CallbackIhA8_fEC1Ev>:
	core_utils_Callback() {
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b082      	sub	sp, #8
 8018600:	af00      	add	r7, sp, #0
 8018602:	6078      	str	r0, [r7, #4]
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	4618      	mov	r0, r3
 8018608:	f7fb fac2 	bl	8013b90 <_ZN8CallbackC1Ev>
 801860c:	4a09      	ldr	r2, [pc, #36]	; (8018634 <_ZN19core_utils_CallbackIhA8_fEC1Ev+0x38>)
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	601a      	str	r2, [r3, #0]
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	2200      	movs	r2, #0
 8018616:	711a      	strb	r2, [r3, #4]
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	3308      	adds	r3, #8
 801861c:	2100      	movs	r1, #0
 801861e:	4618      	mov	r0, r3
 8018620:	f000 f89e 	bl	8018760 <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>
		this->registered = 0;
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	2200      	movs	r2, #0
 8018628:	711a      	strb	r2, [r3, #4]
	}
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	4618      	mov	r0, r3
 801862e:	3708      	adds	r7, #8
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}
 8018634:	080255a0 	.word	0x080255a0

08018638 <_ZN19core_utils_CallbackIvfEC1Ev>:
	core_utils_Callback() {
 8018638:	b580      	push	{r7, lr}
 801863a:	b082      	sub	sp, #8
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	4618      	mov	r0, r3
 8018644:	f7fb faa4 	bl	8013b90 <_ZN8CallbackC1Ev>
 8018648:	4a09      	ldr	r2, [pc, #36]	; (8018670 <_ZN19core_utils_CallbackIvfEC1Ev+0x38>)
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	601a      	str	r2, [r3, #0]
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	2200      	movs	r2, #0
 8018652:	711a      	strb	r2, [r3, #4]
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	3308      	adds	r3, #8
 8018658:	2100      	movs	r1, #0
 801865a:	4618      	mov	r0, r3
 801865c:	f000 f8ae 	bl	80187bc <_ZN26core_utils_FunctionPointerIvfEC1EPFvfE>
		this->registered = 0;
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	2200      	movs	r2, #0
 8018664:	711a      	strb	r2, [r3, #4]
	}
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	4618      	mov	r0, r3
 801866a:	3708      	adds	r7, #8
 801866c:	46bd      	mov	sp, r7
 801866e:	bd80      	pop	{r7, pc}
 8018670:	08025530 	.word	0x08025530

08018674 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8018674:	b580      	push	{r7, lr}
 8018676:	b082      	sub	sp, #8
 8018678:	af00      	add	r7, sp, #0
 801867a:	6078      	str	r0, [r7, #4]
 801867c:	6039      	str	r1, [r7, #0]
        attach(function);
 801867e:	6839      	ldr	r1, [r7, #0]
 8018680:	6878      	ldr	r0, [r7, #4]
 8018682:	f000 f8a9 	bl	80187d8 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachEPFvS0_E>
    }
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	4618      	mov	r0, r3
 801868a:	3708      	adds	r7, #8
 801868c:	46bd      	mov	sp, r7
 801868e:	bd80      	pop	{r7, pc}

08018690 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8018690:	b580      	push	{r7, lr}
 8018692:	b084      	sub	sp, #16
 8018694:	af00      	add	r7, sp, #0
 8018696:	60f8      	str	r0, [r7, #12]
 8018698:	60b9      	str	r1, [r7, #8]
 801869a:	4639      	mov	r1, r7
 801869c:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80186a0:	463b      	mov	r3, r7
 80186a2:	cb0c      	ldmia	r3, {r2, r3}
 80186a4:	68b9      	ldr	r1, [r7, #8]
 80186a6:	68f8      	ldr	r0, [r7, #12]
 80186a8:	f000 f8a8 	bl	80187fc <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>
    }
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	4618      	mov	r0, r3
 80186b0:	3710      	adds	r7, #16
 80186b2:	46bd      	mov	sp, r7
 80186b4:	bd80      	pop	{r7, pc}

080186b6 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 80186b6:	b580      	push	{r7, lr}
 80186b8:	b082      	sub	sp, #8
 80186ba:	af00      	add	r7, sp, #0
 80186bc:	6078      	str	r0, [r7, #4]
 80186be:	6039      	str	r1, [r7, #0]
        attach(function);
 80186c0:	6839      	ldr	r1, [r7, #0]
 80186c2:	6878      	ldr	r0, [r7, #4]
 80186c4:	f000 f8b8 	bl	8018838 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachEPFhS0_E>
    }
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	4618      	mov	r0, r3
 80186cc:	3708      	adds	r7, #8
 80186ce:	46bd      	mov	sp, r7
 80186d0:	bd80      	pop	{r7, pc}

080186d2 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 80186d2:	b580      	push	{r7, lr}
 80186d4:	b084      	sub	sp, #16
 80186d6:	af00      	add	r7, sp, #0
 80186d8:	60f8      	str	r0, [r7, #12]
 80186da:	60b9      	str	r1, [r7, #8]
 80186dc:	4639      	mov	r1, r7
 80186de:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80186e2:	463b      	mov	r3, r7
 80186e4:	cb0c      	ldmia	r3, {r2, r3}
 80186e6:	68b9      	ldr	r1, [r7, #8]
 80186e8:	68f8      	ldr	r0, [r7, #12]
 80186ea:	f000 f8b7 	bl	801885c <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>
    }
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	4618      	mov	r0, r3
 80186f2:	3710      	adds	r7, #16
 80186f4:	46bd      	mov	sp, r7
 80186f6:	bd80      	pop	{r7, pc}

080186f8 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1EPFhS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 80186f8:	b580      	push	{r7, lr}
 80186fa:	b082      	sub	sp, #8
 80186fc:	af00      	add	r7, sp, #0
 80186fe:	6078      	str	r0, [r7, #4]
 8018700:	6039      	str	r1, [r7, #0]
        attach(function);
 8018702:	6839      	ldr	r1, [r7, #0]
 8018704:	6878      	ldr	r0, [r7, #4]
 8018706:	f000 f8c7 	bl	8018898 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachEPFhS0_E>
    }
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	4618      	mov	r0, r3
 801870e:	3708      	adds	r7, #8
 8018710:	46bd      	mov	sp, r7
 8018712:	bd80      	pop	{r7, pc}

08018714 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8018714:	b580      	push	{r7, lr}
 8018716:	b084      	sub	sp, #16
 8018718:	af00      	add	r7, sp, #0
 801871a:	60f8      	str	r0, [r7, #12]
 801871c:	60b9      	str	r1, [r7, #8]
 801871e:	4639      	mov	r1, r7
 8018720:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8018724:	463b      	mov	r3, r7
 8018726:	cb0c      	ldmia	r3, {r2, r3}
 8018728:	68b9      	ldr	r1, [r7, #8]
 801872a:	68f8      	ldr	r0, [r7, #12]
 801872c:	f000 f8c6 	bl	80188bc <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>
    }
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	4618      	mov	r0, r3
 8018734:	3710      	adds	r7, #16
 8018736:	46bd      	mov	sp, r7
 8018738:	bd80      	pop	{r7, pc}

0801873a <_ZN26core_utils_FunctionPointerIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 801873a:	b580      	push	{r7, lr}
 801873c:	b084      	sub	sp, #16
 801873e:	af00      	add	r7, sp, #0
 8018740:	60f8      	str	r0, [r7, #12]
 8018742:	60b9      	str	r1, [r7, #8]
 8018744:	4639      	mov	r1, r7
 8018746:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 801874a:	463b      	mov	r3, r7
 801874c:	cb0c      	ldmia	r3, {r2, r3}
 801874e:	68b9      	ldr	r1, [r7, #8]
 8018750:	68f8      	ldr	r0, [r7, #12]
 8018752:	f000 f8d1 	bl	80188f8 <_ZN26core_utils_FunctionPointerIvvE6attachI20TWIPR_ControlManagerEEvPT_MS3_FvvE>
    }
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	4618      	mov	r0, r3
 801875a:	3710      	adds	r7, #16
 801875c:	46bd      	mov	sp, r7
 801875e:	bd80      	pop	{r7, pc}

08018760 <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8018760:	b580      	push	{r7, lr}
 8018762:	b082      	sub	sp, #8
 8018764:	af00      	add	r7, sp, #0
 8018766:	6078      	str	r0, [r7, #4]
 8018768:	6039      	str	r1, [r7, #0]
        attach(function);
 801876a:	6839      	ldr	r1, [r7, #0]
 801876c:	6878      	ldr	r0, [r7, #4]
 801876e:	f000 f8e1 	bl	8018934 <_ZN26core_utils_FunctionPointerIhA8_fE6attachEPFhPfE>
    }
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	4618      	mov	r0, r3
 8018776:	3708      	adds	r7, #8
 8018778:	46bd      	mov	sp, r7
 801877a:	bd80      	pop	{r7, pc}

0801877c <_ZN26core_utils_FunctionPointerIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 801877c:	b580      	push	{r7, lr}
 801877e:	b084      	sub	sp, #16
 8018780:	af00      	add	r7, sp, #0
 8018782:	60f8      	str	r0, [r7, #12]
 8018784:	60b9      	str	r1, [r7, #8]
 8018786:	4639      	mov	r1, r7
 8018788:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 801878c:	463b      	mov	r3, r7
 801878e:	cb0c      	ldmia	r3, {r2, r3}
 8018790:	68b9      	ldr	r1, [r7, #8]
 8018792:	68f8      	ldr	r0, [r7, #12]
 8018794:	f000 f8e0 	bl	8018958 <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE>
    }
 8018798:	68fb      	ldr	r3, [r7, #12]
 801879a:	4618      	mov	r0, r3
 801879c:	3710      	adds	r7, #16
 801879e:	46bd      	mov	sp, r7
 80187a0:	bd80      	pop	{r7, pc}

080187a2 <_ZN26core_utils_FunctionPointerIvmEclEm>:
    R operator ()(A1 a) {
 80187a2:	b580      	push	{r7, lr}
 80187a4:	b082      	sub	sp, #8
 80187a6:	af00      	add	r7, sp, #0
 80187a8:	6078      	str	r0, [r7, #4]
 80187aa:	6039      	str	r1, [r7, #0]
        return call(a);
 80187ac:	6839      	ldr	r1, [r7, #0]
 80187ae:	6878      	ldr	r0, [r7, #4]
 80187b0:	f000 f8f0 	bl	8018994 <_ZN26core_utils_FunctionPointerIvmE4callEm>
 80187b4:	bf00      	nop
    }
 80187b6:	3708      	adds	r7, #8
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}

080187bc <_ZN26core_utils_FunctionPointerIvfEC1EPFvfE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 80187bc:	b580      	push	{r7, lr}
 80187be:	b082      	sub	sp, #8
 80187c0:	af00      	add	r7, sp, #0
 80187c2:	6078      	str	r0, [r7, #4]
 80187c4:	6039      	str	r1, [r7, #0]
        attach(function);
 80187c6:	6839      	ldr	r1, [r7, #0]
 80187c8:	6878      	ldr	r0, [r7, #4]
 80187ca:	f000 f90a 	bl	80189e2 <_ZN26core_utils_FunctionPointerIvfE6attachEPFvfE>
    }
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	4618      	mov	r0, r3
 80187d2:	3708      	adds	r7, #8
 80187d4:	46bd      	mov	sp, r7
 80187d6:	bd80      	pop	{r7, pc}

080187d8 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 80187d8:	b480      	push	{r7}
 80187da:	b083      	sub	sp, #12
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
 80187e0:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	683a      	ldr	r2, [r7, #0]
 80187e6:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	2200      	movs	r2, #0
 80187ec:	615a      	str	r2, [r3, #20]
    }
 80187ee:	bf00      	nop
 80187f0:	370c      	adds	r7, #12
 80187f2:	46bd      	mov	sp, r7
 80187f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f8:	4770      	bx	lr
	...

080187fc <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 80187fc:	b480      	push	{r7}
 80187fe:	b085      	sub	sp, #20
 8018800:	af00      	add	r7, sp, #0
 8018802:	60f8      	str	r0, [r7, #12]
 8018804:	60b9      	str	r1, [r7, #8]
 8018806:	4639      	mov	r1, r7
 8018808:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	68ba      	ldr	r2, [r7, #8]
 8018810:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	3304      	adds	r3, #4
 8018816:	461a      	mov	r2, r3
 8018818:	463b      	mov	r3, r7
 801881a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801881e:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	4a03      	ldr	r2, [pc, #12]	; (8018834 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E+0x38>)
 8018826:	615a      	str	r2, [r3, #20]
    }
 8018828:	bf00      	nop
 801882a:	3714      	adds	r7, #20
 801882c:	46bd      	mov	sp, r7
 801882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018832:	4770      	bx	lr
 8018834:	08018a05 	.word	0x08018a05

08018838 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachEPFhS0_E>:
    void attach(R (*function)(A1)) {
 8018838:	b480      	push	{r7}
 801883a:	b083      	sub	sp, #12
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
 8018840:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	683a      	ldr	r2, [r7, #0]
 8018846:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	2200      	movs	r2, #0
 801884c:	615a      	str	r2, [r3, #20]
    }
 801884e:	bf00      	nop
 8018850:	370c      	adds	r7, #12
 8018852:	46bd      	mov	sp, r7
 8018854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018858:	4770      	bx	lr
	...

0801885c <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 801885c:	b480      	push	{r7}
 801885e:	b085      	sub	sp, #20
 8018860:	af00      	add	r7, sp, #0
 8018862:	60f8      	str	r0, [r7, #12]
 8018864:	60b9      	str	r1, [r7, #8]
 8018866:	4639      	mov	r1, r7
 8018868:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 801886c:	68fb      	ldr	r3, [r7, #12]
 801886e:	68ba      	ldr	r2, [r7, #8]
 8018870:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	3304      	adds	r3, #4
 8018876:	461a      	mov	r2, r3
 8018878:	463b      	mov	r3, r7
 801887a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801887e:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	4a03      	ldr	r2, [pc, #12]	; (8018894 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E+0x38>)
 8018886:	615a      	str	r2, [r3, #20]
    }
 8018888:	bf00      	nop
 801888a:	3714      	adds	r7, #20
 801888c:	46bd      	mov	sp, r7
 801888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018892:	4770      	bx	lr
 8018894:	08018a77 	.word	0x08018a77

08018898 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachEPFhS0_E>:
    void attach(R (*function)(A1)) {
 8018898:	b480      	push	{r7}
 801889a:	b083      	sub	sp, #12
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
 80188a0:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	683a      	ldr	r2, [r7, #0]
 80188a6:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	2200      	movs	r2, #0
 80188ac:	615a      	str	r2, [r3, #20]
    }
 80188ae:	bf00      	nop
 80188b0:	370c      	adds	r7, #12
 80188b2:	46bd      	mov	sp, r7
 80188b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b8:	4770      	bx	lr
	...

080188bc <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 80188bc:	b480      	push	{r7}
 80188be:	b085      	sub	sp, #20
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	60f8      	str	r0, [r7, #12]
 80188c4:	60b9      	str	r1, [r7, #8]
 80188c6:	4639      	mov	r1, r7
 80188c8:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 80188cc:	68fb      	ldr	r3, [r7, #12]
 80188ce:	68ba      	ldr	r2, [r7, #8]
 80188d0:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	3304      	adds	r3, #4
 80188d6:	461a      	mov	r2, r3
 80188d8:	463b      	mov	r3, r7
 80188da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80188de:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	4a03      	ldr	r2, [pc, #12]	; (80188f4 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E+0x38>)
 80188e6:	615a      	str	r2, [r3, #20]
    }
 80188e8:	bf00      	nop
 80188ea:	3714      	adds	r7, #20
 80188ec:	46bd      	mov	sp, r7
 80188ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f2:	4770      	bx	lr
 80188f4:	08018ad1 	.word	0x08018ad1

080188f8 <_ZN26core_utils_FunctionPointerIvvE6attachI20TWIPR_ControlManagerEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 80188f8:	b480      	push	{r7}
 80188fa:	b085      	sub	sp, #20
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	60f8      	str	r0, [r7, #12]
 8018900:	60b9      	str	r1, [r7, #8]
 8018902:	4639      	mov	r1, r7
 8018904:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	68ba      	ldr	r2, [r7, #8]
 801890c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	3304      	adds	r3, #4
 8018912:	461a      	mov	r2, r3
 8018914:	463b      	mov	r3, r7
 8018916:	e893 0003 	ldmia.w	r3, {r0, r1}
 801891a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801891e:	68fb      	ldr	r3, [r7, #12]
 8018920:	4a03      	ldr	r2, [pc, #12]	; (8018930 <_ZN26core_utils_FunctionPointerIvvE6attachI20TWIPR_ControlManagerEEvPT_MS3_FvvE+0x38>)
 8018922:	615a      	str	r2, [r3, #20]
    }
 8018924:	bf00      	nop
 8018926:	3714      	adds	r7, #20
 8018928:	46bd      	mov	sp, r7
 801892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801892e:	4770      	bx	lr
 8018930:	08018b2d 	.word	0x08018b2d

08018934 <_ZN26core_utils_FunctionPointerIhA8_fE6attachEPFhPfE>:
    void attach(R (*function)(A1)) {
 8018934:	b480      	push	{r7}
 8018936:	b083      	sub	sp, #12
 8018938:	af00      	add	r7, sp, #0
 801893a:	6078      	str	r0, [r7, #4]
 801893c:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	683a      	ldr	r2, [r7, #0]
 8018942:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	2200      	movs	r2, #0
 8018948:	615a      	str	r2, [r3, #20]
    }
 801894a:	bf00      	nop
 801894c:	370c      	adds	r7, #12
 801894e:	46bd      	mov	sp, r7
 8018950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018954:	4770      	bx	lr
	...

08018958 <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE>:
    void attach(T *object, R (T::*member)(A1)) {
 8018958:	b480      	push	{r7}
 801895a:	b085      	sub	sp, #20
 801895c:	af00      	add	r7, sp, #0
 801895e:	60f8      	str	r0, [r7, #12]
 8018960:	60b9      	str	r1, [r7, #8]
 8018962:	4639      	mov	r1, r7
 8018964:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8018968:	68fb      	ldr	r3, [r7, #12]
 801896a:	68ba      	ldr	r2, [r7, #8]
 801896c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	3304      	adds	r3, #4
 8018972:	461a      	mov	r2, r3
 8018974:	463b      	mov	r3, r7
 8018976:	e893 0003 	ldmia.w	r3, {r0, r1}
 801897a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	4a03      	ldr	r2, [pc, #12]	; (8018990 <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE+0x38>)
 8018982:	615a      	str	r2, [r3, #20]
    }
 8018984:	bf00      	nop
 8018986:	3714      	adds	r7, #20
 8018988:	46bd      	mov	sp, r7
 801898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801898e:	4770      	bx	lr
 8018990:	08018b7f 	.word	0x08018b7f

08018994 <_ZN26core_utils_FunctionPointerIvmE4callEm>:
    R call(A1 a) {
 8018994:	b580      	push	{r7, lr}
 8018996:	b082      	sub	sp, #8
 8018998:	af00      	add	r7, sp, #0
 801899a:	6078      	str	r0, [r7, #4]
 801899c:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	695b      	ldr	r3, [r3, #20]
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d108      	bne.n	80189b8 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x24>
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d004      	beq.n	80189b8 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x24>
           return _p.function(a);
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	6838      	ldr	r0, [r7, #0]
 80189b4:	4798      	blx	r3
 80189b6:	e011      	b.n	80189dc <_ZN26core_utils_FunctionPointerIvmE4callEm+0x48>
        } else if (_membercaller && _p.object) {
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	695b      	ldr	r3, [r3, #20]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d00c      	beq.n	80189da <_ZN26core_utils_FunctionPointerIvmE4callEm+0x46>
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d008      	beq.n	80189da <_ZN26core_utils_FunctionPointerIvmE4callEm+0x46>
           return _membercaller(_p.object, _member, a);
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	695b      	ldr	r3, [r3, #20]
 80189cc:	687a      	ldr	r2, [r7, #4]
 80189ce:	6810      	ldr	r0, [r2, #0]
 80189d0:	687a      	ldr	r2, [r7, #4]
 80189d2:	1d11      	adds	r1, r2, #4
 80189d4:	683a      	ldr	r2, [r7, #0]
 80189d6:	4798      	blx	r3
 80189d8:	e000      	b.n	80189dc <_ZN26core_utils_FunctionPointerIvmE4callEm+0x48>
        return (R)0;
 80189da:	bf00      	nop
    }
 80189dc:	3708      	adds	r7, #8
 80189de:	46bd      	mov	sp, r7
 80189e0:	bd80      	pop	{r7, pc}

080189e2 <_ZN26core_utils_FunctionPointerIvfE6attachEPFvfE>:
    void attach(R (*function)(A1)) {
 80189e2:	b480      	push	{r7}
 80189e4:	b083      	sub	sp, #12
 80189e6:	af00      	add	r7, sp, #0
 80189e8:	6078      	str	r0, [r7, #4]
 80189ea:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	683a      	ldr	r2, [r7, #0]
 80189f0:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	2200      	movs	r2, #0
 80189f6:	615a      	str	r2, [r3, #20]
    }
 80189f8:	bf00      	nop
 80189fa:	370c      	adds	r7, #12
 80189fc:	46bd      	mov	sp, r7
 80189fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a02:	4770      	bx	lr

08018a04 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b086      	sub	sp, #24
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	60f8      	str	r0, [r7, #12]
 8018a0c:	60b9      	str	r1, [r7, #8]
 8018a0e:	eeb0 7a40 	vmov.f32	s14, s0
 8018a12:	eef0 7a60 	vmov.f32	s15, s1
 8018a16:	ed87 7a00 	vstr	s14, [r7]
 8018a1a:	edc7 7a01 	vstr	s15, [r7, #4]
        T* o = static_cast<T*>(object);
 8018a1e:	68fb      	ldr	r3, [r7, #12]
 8018a20:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8018a22:	68bb      	ldr	r3, [r7, #8]
 8018a24:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8018a26:	693b      	ldr	r3, [r7, #16]
 8018a28:	685b      	ldr	r3, [r3, #4]
 8018a2a:	105b      	asrs	r3, r3, #1
 8018a2c:	461a      	mov	r2, r3
 8018a2e:	697b      	ldr	r3, [r7, #20]
 8018a30:	1899      	adds	r1, r3, r2
 8018a32:	693b      	ldr	r3, [r7, #16]
 8018a34:	685b      	ldr	r3, [r3, #4]
 8018a36:	f003 0301 	and.w	r3, r3, #1
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d00b      	beq.n	8018a56 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x52>
 8018a3e:	693b      	ldr	r3, [r7, #16]
 8018a40:	685b      	ldr	r3, [r3, #4]
 8018a42:	105b      	asrs	r3, r3, #1
 8018a44:	461a      	mov	r2, r3
 8018a46:	697b      	ldr	r3, [r7, #20]
 8018a48:	4413      	add	r3, r2
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	693a      	ldr	r2, [r7, #16]
 8018a4e:	6812      	ldr	r2, [r2, #0]
 8018a50:	4413      	add	r3, r2
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	e001      	b.n	8018a5a <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x56>
 8018a56:	693b      	ldr	r3, [r7, #16]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	ed97 7a00 	vldr	s14, [r7]
 8018a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8018a62:	eeb0 0a47 	vmov.f32	s0, s14
 8018a66:	eef0 0a67 	vmov.f32	s1, s15
 8018a6a:	4608      	mov	r0, r1
 8018a6c:	4798      	blx	r3
 8018a6e:	bf00      	nop
    }
 8018a70:	3718      	adds	r7, #24
 8018a72:	46bd      	mov	sp, r7
 8018a74:	bd80      	pop	{r7, pc}

08018a76 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8018a76:	b580      	push	{r7, lr}
 8018a78:	b086      	sub	sp, #24
 8018a7a:	af00      	add	r7, sp, #0
 8018a7c:	60f8      	str	r0, [r7, #12]
 8018a7e:	60b9      	str	r1, [r7, #8]
 8018a80:	4613      	mov	r3, r2
 8018a82:	71fb      	strb	r3, [r7, #7]
        T* o = static_cast<T*>(object);
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8018a88:	68bb      	ldr	r3, [r7, #8]
 8018a8a:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8018a8c:	693b      	ldr	r3, [r7, #16]
 8018a8e:	685b      	ldr	r3, [r3, #4]
 8018a90:	105b      	asrs	r3, r3, #1
 8018a92:	461a      	mov	r2, r3
 8018a94:	697b      	ldr	r3, [r7, #20]
 8018a96:	1898      	adds	r0, r3, r2
 8018a98:	693b      	ldr	r3, [r7, #16]
 8018a9a:	685b      	ldr	r3, [r3, #4]
 8018a9c:	f003 0301 	and.w	r3, r3, #1
 8018aa0:	2b00      	cmp	r3, #0
 8018aa2:	d00b      	beq.n	8018abc <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x46>
 8018aa4:	693b      	ldr	r3, [r7, #16]
 8018aa6:	685b      	ldr	r3, [r3, #4]
 8018aa8:	105b      	asrs	r3, r3, #1
 8018aaa:	461a      	mov	r2, r3
 8018aac:	697b      	ldr	r3, [r7, #20]
 8018aae:	4413      	add	r3, r2
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	693a      	ldr	r2, [r7, #16]
 8018ab4:	6812      	ldr	r2, [r2, #0]
 8018ab6:	4413      	add	r3, r2
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	e001      	b.n	8018ac0 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x4a>
 8018abc:	693b      	ldr	r3, [r7, #16]
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	79fa      	ldrb	r2, [r7, #7]
 8018ac2:	4611      	mov	r1, r2
 8018ac4:	4798      	blx	r3
 8018ac6:	4603      	mov	r3, r0
    }
 8018ac8:	4618      	mov	r0, r3
 8018aca:	3718      	adds	r7, #24
 8018acc:	46bd      	mov	sp, r7
 8018ace:	bd80      	pop	{r7, pc}

08018ad0 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b086      	sub	sp, #24
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	60f8      	str	r0, [r7, #12]
 8018ad8:	60b9      	str	r1, [r7, #8]
 8018ada:	4639      	mov	r1, r7
 8018adc:	e881 000c 	stmia.w	r1, {r2, r3}
        T* o = static_cast<T*>(object);
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8018ae4:	68bb      	ldr	r3, [r7, #8]
 8018ae6:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8018ae8:	693b      	ldr	r3, [r7, #16]
 8018aea:	685b      	ldr	r3, [r3, #4]
 8018aec:	105b      	asrs	r3, r3, #1
 8018aee:	461a      	mov	r2, r3
 8018af0:	697b      	ldr	r3, [r7, #20]
 8018af2:	1898      	adds	r0, r3, r2
 8018af4:	693b      	ldr	r3, [r7, #16]
 8018af6:	685b      	ldr	r3, [r3, #4]
 8018af8:	f003 0301 	and.w	r3, r3, #1
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d00b      	beq.n	8018b18 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x48>
 8018b00:	693b      	ldr	r3, [r7, #16]
 8018b02:	685b      	ldr	r3, [r3, #4]
 8018b04:	105b      	asrs	r3, r3, #1
 8018b06:	461a      	mov	r2, r3
 8018b08:	697b      	ldr	r3, [r7, #20]
 8018b0a:	4413      	add	r3, r2
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	693a      	ldr	r2, [r7, #16]
 8018b10:	6812      	ldr	r2, [r2, #0]
 8018b12:	4413      	add	r3, r2
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	e001      	b.n	8018b1c <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x4c>
 8018b18:	693b      	ldr	r3, [r7, #16]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	463a      	mov	r2, r7
 8018b1e:	ca06      	ldmia	r2, {r1, r2}
 8018b20:	4798      	blx	r3
 8018b22:	4603      	mov	r3, r0
    }
 8018b24:	4618      	mov	r0, r3
 8018b26:	3718      	adds	r7, #24
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	bd80      	pop	{r7, pc}

08018b2c <_ZN26core_utils_FunctionPointerIvvE12membercallerI20TWIPR_ControlManagerEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 8018b2c:	b580      	push	{r7, lr}
 8018b2e:	b084      	sub	sp, #16
 8018b30:	af00      	add	r7, sp, #0
 8018b32:	6078      	str	r0, [r7, #4]
 8018b34:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 8018b3a:	683b      	ldr	r3, [r7, #0]
 8018b3c:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 8018b3e:	68bb      	ldr	r3, [r7, #8]
 8018b40:	685b      	ldr	r3, [r3, #4]
 8018b42:	105b      	asrs	r3, r3, #1
 8018b44:	461a      	mov	r2, r3
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	1899      	adds	r1, r3, r2
 8018b4a:	68bb      	ldr	r3, [r7, #8]
 8018b4c:	685b      	ldr	r3, [r3, #4]
 8018b4e:	f003 0301 	and.w	r3, r3, #1
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d00b      	beq.n	8018b6e <_ZN26core_utils_FunctionPointerIvvE12membercallerI20TWIPR_ControlManagerEEvPvPj+0x42>
 8018b56:	68bb      	ldr	r3, [r7, #8]
 8018b58:	685b      	ldr	r3, [r3, #4]
 8018b5a:	105b      	asrs	r3, r3, #1
 8018b5c:	461a      	mov	r2, r3
 8018b5e:	68fb      	ldr	r3, [r7, #12]
 8018b60:	4413      	add	r3, r2
 8018b62:	681b      	ldr	r3, [r3, #0]
 8018b64:	68ba      	ldr	r2, [r7, #8]
 8018b66:	6812      	ldr	r2, [r2, #0]
 8018b68:	4413      	add	r3, r2
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	e001      	b.n	8018b72 <_ZN26core_utils_FunctionPointerIvvE12membercallerI20TWIPR_ControlManagerEEvPvPj+0x46>
 8018b6e:	68bb      	ldr	r3, [r7, #8]
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	4608      	mov	r0, r1
 8018b74:	4798      	blx	r3
 8018b76:	bf00      	nop
    }
 8018b78:	3710      	adds	r7, #16
 8018b7a:	46bd      	mov	sp, r7
 8018b7c:	bd80      	pop	{r7, pc}

08018b7e <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8018b7e:	b580      	push	{r7, lr}
 8018b80:	b086      	sub	sp, #24
 8018b82:	af00      	add	r7, sp, #0
 8018b84:	60f8      	str	r0, [r7, #12]
 8018b86:	60b9      	str	r1, [r7, #8]
 8018b88:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8018b8e:	68bb      	ldr	r3, [r7, #8]
 8018b90:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8018b92:	693b      	ldr	r3, [r7, #16]
 8018b94:	685b      	ldr	r3, [r3, #4]
 8018b96:	105b      	asrs	r3, r3, #1
 8018b98:	461a      	mov	r2, r3
 8018b9a:	697b      	ldr	r3, [r7, #20]
 8018b9c:	1898      	adds	r0, r3, r2
 8018b9e:	693b      	ldr	r3, [r7, #16]
 8018ba0:	685b      	ldr	r3, [r3, #4]
 8018ba2:	f003 0301 	and.w	r3, r3, #1
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d00b      	beq.n	8018bc2 <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf+0x44>
 8018baa:	693b      	ldr	r3, [r7, #16]
 8018bac:	685b      	ldr	r3, [r3, #4]
 8018bae:	105b      	asrs	r3, r3, #1
 8018bb0:	461a      	mov	r2, r3
 8018bb2:	697b      	ldr	r3, [r7, #20]
 8018bb4:	4413      	add	r3, r2
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	693a      	ldr	r2, [r7, #16]
 8018bba:	6812      	ldr	r2, [r2, #0]
 8018bbc:	4413      	add	r3, r2
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	e001      	b.n	8018bc6 <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf+0x48>
 8018bc2:	693b      	ldr	r3, [r7, #16]
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	6879      	ldr	r1, [r7, #4]
 8018bc8:	4798      	blx	r3
 8018bca:	4603      	mov	r3, r0
    }
 8018bcc:	4618      	mov	r0, r3
 8018bce:	3718      	adds	r7, #24
 8018bd0:	46bd      	mov	sp, r7
 8018bd2:	bd80      	pop	{r7, pc}

08018bd4 <_ZN22core_utils_RegisterMapILi20EE5writeEtPv>:
	void write(uint16_t address, void *data) {
 8018bd4:	b580      	push	{r7, lr}
 8018bd6:	b084      	sub	sp, #16
 8018bd8:	af00      	add	r7, sp, #0
 8018bda:	60f8      	str	r0, [r7, #12]
 8018bdc:	460b      	mov	r3, r1
 8018bde:	607a      	str	r2, [r7, #4]
 8018be0:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 8018be2:	897b      	ldrh	r3, [r7, #10]
 8018be4:	68fa      	ldr	r2, [r7, #12]
 8018be6:	3302      	adds	r3, #2
 8018be8:	009b      	lsls	r3, r3, #2
 8018bea:	4413      	add	r3, r2
 8018bec:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d015      	beq.n	8018c1e <_ZN22core_utils_RegisterMapILi20EE5writeEtPv+0x4a>
 8018bf2:	897b      	ldrh	r3, [r7, #10]
 8018bf4:	68fa      	ldr	r2, [r7, #12]
 8018bf6:	3302      	adds	r3, #2
 8018bf8:	009b      	lsls	r3, r3, #2
 8018bfa:	4413      	add	r3, r2
 8018bfc:	6859      	ldr	r1, [r3, #4]
 8018bfe:	897b      	ldrh	r3, [r7, #10]
 8018c00:	68fa      	ldr	r2, [r7, #12]
 8018c02:	3302      	adds	r3, #2
 8018c04:	009b      	lsls	r3, r3, #2
 8018c06:	4413      	add	r3, r2
 8018c08:	685b      	ldr	r3, [r3, #4]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	3320      	adds	r3, #32
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	4608      	mov	r0, r1
 8018c12:	4798      	blx	r3
 8018c14:	4603      	mov	r3, r0
 8018c16:	2b01      	cmp	r3, #1
 8018c18:	d101      	bne.n	8018c1e <_ZN22core_utils_RegisterMapILi20EE5writeEtPv+0x4a>
 8018c1a:	2301      	movs	r3, #1
 8018c1c:	e000      	b.n	8018c20 <_ZN22core_utils_RegisterMapILi20EE5writeEtPv+0x4c>
 8018c1e:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d00f      	beq.n	8018c44 <_ZN22core_utils_RegisterMapILi20EE5writeEtPv+0x70>
			this->entries[address]->write(data);
 8018c24:	897b      	ldrh	r3, [r7, #10]
 8018c26:	68fa      	ldr	r2, [r7, #12]
 8018c28:	3302      	adds	r3, #2
 8018c2a:	009b      	lsls	r3, r3, #2
 8018c2c:	4413      	add	r3, r2
 8018c2e:	6858      	ldr	r0, [r3, #4]
 8018c30:	897b      	ldrh	r3, [r7, #10]
 8018c32:	68fa      	ldr	r2, [r7, #12]
 8018c34:	3302      	adds	r3, #2
 8018c36:	009b      	lsls	r3, r3, #2
 8018c38:	4413      	add	r3, r2
 8018c3a:	685b      	ldr	r3, [r3, #4]
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	6879      	ldr	r1, [r7, #4]
 8018c42:	4798      	blx	r3
	}
 8018c44:	bf00      	nop
 8018c46:	3710      	adds	r7, #16
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	bd80      	pop	{r7, pc}

08018c4c <_ZN22core_utils_RegisterMapILi20EE5writeEtPh>:
	void write(uint16_t address, uint8_t *data) {
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b084      	sub	sp, #16
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	60f8      	str	r0, [r7, #12]
 8018c54:	460b      	mov	r3, r1
 8018c56:	607a      	str	r2, [r7, #4]
 8018c58:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 8018c5a:	897b      	ldrh	r3, [r7, #10]
 8018c5c:	68fa      	ldr	r2, [r7, #12]
 8018c5e:	3302      	adds	r3, #2
 8018c60:	009b      	lsls	r3, r3, #2
 8018c62:	4413      	add	r3, r2
 8018c64:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d015      	beq.n	8018c96 <_ZN22core_utils_RegisterMapILi20EE5writeEtPh+0x4a>
 8018c6a:	897b      	ldrh	r3, [r7, #10]
 8018c6c:	68fa      	ldr	r2, [r7, #12]
 8018c6e:	3302      	adds	r3, #2
 8018c70:	009b      	lsls	r3, r3, #2
 8018c72:	4413      	add	r3, r2
 8018c74:	6859      	ldr	r1, [r3, #4]
 8018c76:	897b      	ldrh	r3, [r7, #10]
 8018c78:	68fa      	ldr	r2, [r7, #12]
 8018c7a:	3302      	adds	r3, #2
 8018c7c:	009b      	lsls	r3, r3, #2
 8018c7e:	4413      	add	r3, r2
 8018c80:	685b      	ldr	r3, [r3, #4]
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	3320      	adds	r3, #32
 8018c86:	681b      	ldr	r3, [r3, #0]
 8018c88:	4608      	mov	r0, r1
 8018c8a:	4798      	blx	r3
 8018c8c:	4603      	mov	r3, r0
 8018c8e:	2b01      	cmp	r3, #1
 8018c90:	d101      	bne.n	8018c96 <_ZN22core_utils_RegisterMapILi20EE5writeEtPh+0x4a>
 8018c92:	2301      	movs	r3, #1
 8018c94:	e000      	b.n	8018c98 <_ZN22core_utils_RegisterMapILi20EE5writeEtPh+0x4c>
 8018c96:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d010      	beq.n	8018cbe <_ZN22core_utils_RegisterMapILi20EE5writeEtPh+0x72>
			this->entries[address]->write(data);
 8018c9c:	897b      	ldrh	r3, [r7, #10]
 8018c9e:	68fa      	ldr	r2, [r7, #12]
 8018ca0:	3302      	adds	r3, #2
 8018ca2:	009b      	lsls	r3, r3, #2
 8018ca4:	4413      	add	r3, r2
 8018ca6:	6858      	ldr	r0, [r3, #4]
 8018ca8:	897b      	ldrh	r3, [r7, #10]
 8018caa:	68fa      	ldr	r2, [r7, #12]
 8018cac:	3302      	adds	r3, #2
 8018cae:	009b      	lsls	r3, r3, #2
 8018cb0:	4413      	add	r3, r2
 8018cb2:	685b      	ldr	r3, [r3, #4]
 8018cb4:	681b      	ldr	r3, [r3, #0]
 8018cb6:	3304      	adds	r3, #4
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	6879      	ldr	r1, [r7, #4]
 8018cbc:	4798      	blx	r3
	}
 8018cbe:	bf00      	nop
 8018cc0:	3710      	adds	r7, #16
 8018cc2:	46bd      	mov	sp, r7
 8018cc4:	bd80      	pop	{r7, pc}

08018cc6 <_ZN22core_utils_RegisterMapILi20EE8addEntryEtP13RegisterEntry>:
	void addEntry(uint16_t address, RegisterEntry *entry) {
 8018cc6:	b480      	push	{r7}
 8018cc8:	b085      	sub	sp, #20
 8018cca:	af00      	add	r7, sp, #0
 8018ccc:	60f8      	str	r0, [r7, #12]
 8018cce:	460b      	mov	r3, r1
 8018cd0:	607a      	str	r2, [r7, #4]
 8018cd2:	817b      	strh	r3, [r7, #10]
		this->entries[address] = entry;
 8018cd4:	897b      	ldrh	r3, [r7, #10]
 8018cd6:	68fa      	ldr	r2, [r7, #12]
 8018cd8:	3302      	adds	r3, #2
 8018cda:	009b      	lsls	r3, r3, #2
 8018cdc:	4413      	add	r3, r2
 8018cde:	687a      	ldr	r2, [r7, #4]
 8018ce0:	605a      	str	r2, [r3, #4]
	}
 8018ce2:	bf00      	nop
 8018ce4:	3714      	adds	r7, #20
 8018ce6:	46bd      	mov	sp, r7
 8018ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cec:	4770      	bx	lr

08018cee <_ZN22core_utils_RegisterMapILi20EE8hasEntryEt>:
	bool hasEntry(uint16_t address) {
 8018cee:	b480      	push	{r7}
 8018cf0:	b083      	sub	sp, #12
 8018cf2:	af00      	add	r7, sp, #0
 8018cf4:	6078      	str	r0, [r7, #4]
 8018cf6:	460b      	mov	r3, r1
 8018cf8:	807b      	strh	r3, [r7, #2]
		if (this->entries[address] != NULL) {
 8018cfa:	887b      	ldrh	r3, [r7, #2]
 8018cfc:	687a      	ldr	r2, [r7, #4]
 8018cfe:	3302      	adds	r3, #2
 8018d00:	009b      	lsls	r3, r3, #2
 8018d02:	4413      	add	r3, r2
 8018d04:	685b      	ldr	r3, [r3, #4]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d001      	beq.n	8018d0e <_ZN22core_utils_RegisterMapILi20EE8hasEntryEt+0x20>
			return true;
 8018d0a:	2301      	movs	r3, #1
 8018d0c:	e000      	b.n	8018d10 <_ZN22core_utils_RegisterMapILi20EE8hasEntryEt+0x22>
			return false;
 8018d0e:	2300      	movs	r3, #0
	}
 8018d10:	4618      	mov	r0, r3
 8018d12:	370c      	adds	r7, #12
 8018d14:	46bd      	mov	sp, r7
 8018d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1a:	4770      	bx	lr

08018d1c <_ZN22core_utils_RegisterMapILi20EE4readEtPh>:
	uint8_t read(uint16_t address, uint8_t *data) {
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b084      	sub	sp, #16
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	60f8      	str	r0, [r7, #12]
 8018d24:	460b      	mov	r3, r1
 8018d26:	607a      	str	r2, [r7, #4]
 8018d28:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 8018d2a:	897b      	ldrh	r3, [r7, #10]
 8018d2c:	68fa      	ldr	r2, [r7, #12]
 8018d2e:	3302      	adds	r3, #2
 8018d30:	009b      	lsls	r3, r3, #2
 8018d32:	4413      	add	r3, r2
 8018d34:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d015      	beq.n	8018d66 <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x4a>
 8018d3a:	897b      	ldrh	r3, [r7, #10]
 8018d3c:	68fa      	ldr	r2, [r7, #12]
 8018d3e:	3302      	adds	r3, #2
 8018d40:	009b      	lsls	r3, r3, #2
 8018d42:	4413      	add	r3, r2
 8018d44:	6859      	ldr	r1, [r3, #4]
 8018d46:	897b      	ldrh	r3, [r7, #10]
 8018d48:	68fa      	ldr	r2, [r7, #12]
 8018d4a:	3302      	adds	r3, #2
 8018d4c:	009b      	lsls	r3, r3, #2
 8018d4e:	4413      	add	r3, r2
 8018d50:	685b      	ldr	r3, [r3, #4]
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	3320      	adds	r3, #32
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	4608      	mov	r0, r1
 8018d5a:	4798      	blx	r3
 8018d5c:	4603      	mov	r3, r0
 8018d5e:	2b01      	cmp	r3, #1
 8018d60:	d101      	bne.n	8018d66 <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x4a>
 8018d62:	2301      	movs	r3, #1
 8018d64:	e000      	b.n	8018d68 <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x4c>
 8018d66:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8018d68:	2b00      	cmp	r3, #0
 8018d6a:	d012      	beq.n	8018d92 <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x76>
			return this->entries[address]->readBytes(data);
 8018d6c:	897b      	ldrh	r3, [r7, #10]
 8018d6e:	68fa      	ldr	r2, [r7, #12]
 8018d70:	3302      	adds	r3, #2
 8018d72:	009b      	lsls	r3, r3, #2
 8018d74:	4413      	add	r3, r2
 8018d76:	6858      	ldr	r0, [r3, #4]
 8018d78:	897b      	ldrh	r3, [r7, #10]
 8018d7a:	68fa      	ldr	r2, [r7, #12]
 8018d7c:	3302      	adds	r3, #2
 8018d7e:	009b      	lsls	r3, r3, #2
 8018d80:	4413      	add	r3, r2
 8018d82:	685b      	ldr	r3, [r3, #4]
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	3308      	adds	r3, #8
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	6879      	ldr	r1, [r7, #4]
 8018d8c:	4798      	blx	r3
 8018d8e:	4603      	mov	r3, r0
 8018d90:	e000      	b.n	8018d94 <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x78>
		return 0;
 8018d92:	2300      	movs	r3, #0
	}
 8018d94:	4618      	mov	r0, r3
 8018d96:	3710      	adds	r7, #16
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	bd80      	pop	{r7, pc}

08018d9c <_ZN22core_utils_RegisterMapILi20EE7getSizeEt>:
	uint8_t getSize(uint16_t address) {
 8018d9c:	b580      	push	{r7, lr}
 8018d9e:	b082      	sub	sp, #8
 8018da0:	af00      	add	r7, sp, #0
 8018da2:	6078      	str	r0, [r7, #4]
 8018da4:	460b      	mov	r3, r1
 8018da6:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getSize();
 8018da8:	887b      	ldrh	r3, [r7, #2]
 8018daa:	687a      	ldr	r2, [r7, #4]
 8018dac:	3302      	adds	r3, #2
 8018dae:	009b      	lsls	r3, r3, #2
 8018db0:	4413      	add	r3, r2
 8018db2:	6859      	ldr	r1, [r3, #4]
 8018db4:	887b      	ldrh	r3, [r7, #2]
 8018db6:	687a      	ldr	r2, [r7, #4]
 8018db8:	3302      	adds	r3, #2
 8018dba:	009b      	lsls	r3, r3, #2
 8018dbc:	4413      	add	r3, r2
 8018dbe:	685b      	ldr	r3, [r3, #4]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	330c      	adds	r3, #12
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	4608      	mov	r0, r1
 8018dc8:	4798      	blx	r3
 8018dca:	4603      	mov	r3, r0
	}
 8018dcc:	4618      	mov	r0, r3
 8018dce:	3708      	adds	r7, #8
 8018dd0:	46bd      	mov	sp, r7
 8018dd2:	bd80      	pop	{r7, pc}

08018dd4 <_ZN22core_utils_RegisterMapILi20EE7getTypeEt>:
	register_entry_type getType(uint16_t address) {
 8018dd4:	b580      	push	{r7, lr}
 8018dd6:	b082      	sub	sp, #8
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	6078      	str	r0, [r7, #4]
 8018ddc:	460b      	mov	r3, r1
 8018dde:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getType();
 8018de0:	887b      	ldrh	r3, [r7, #2]
 8018de2:	687a      	ldr	r2, [r7, #4]
 8018de4:	3302      	adds	r3, #2
 8018de6:	009b      	lsls	r3, r3, #2
 8018de8:	4413      	add	r3, r2
 8018dea:	6859      	ldr	r1, [r3, #4]
 8018dec:	887b      	ldrh	r3, [r7, #2]
 8018dee:	687a      	ldr	r2, [r7, #4]
 8018df0:	3302      	adds	r3, #2
 8018df2:	009b      	lsls	r3, r3, #2
 8018df4:	4413      	add	r3, r2
 8018df6:	685b      	ldr	r3, [r3, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	3320      	adds	r3, #32
 8018dfc:	681b      	ldr	r3, [r3, #0]
 8018dfe:	4608      	mov	r0, r1
 8018e00:	4798      	blx	r3
 8018e02:	4603      	mov	r3, r0
	}
 8018e04:	4618      	mov	r0, r3
 8018e06:	3708      	adds	r7, #8
 8018e08:	46bd      	mov	sp, r7
 8018e0a:	bd80      	pop	{r7, pc}

08018e0c <_ZN22core_utils_RegisterMapILi20EE19getReadWriteSettingEt>:
	register_entry_rw_t getReadWriteSetting(uint16_t address) {
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b082      	sub	sp, #8
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
 8018e14:	460b      	mov	r3, r1
 8018e16:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getReadWriteSetting();
 8018e18:	887b      	ldrh	r3, [r7, #2]
 8018e1a:	687a      	ldr	r2, [r7, #4]
 8018e1c:	3302      	adds	r3, #2
 8018e1e:	009b      	lsls	r3, r3, #2
 8018e20:	4413      	add	r3, r2
 8018e22:	6859      	ldr	r1, [r3, #4]
 8018e24:	887b      	ldrh	r3, [r7, #2]
 8018e26:	687a      	ldr	r2, [r7, #4]
 8018e28:	3302      	adds	r3, #2
 8018e2a:	009b      	lsls	r3, r3, #2
 8018e2c:	4413      	add	r3, r2
 8018e2e:	685b      	ldr	r3, [r3, #4]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	3324      	adds	r3, #36	; 0x24
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	4608      	mov	r0, r1
 8018e38:	4798      	blx	r3
 8018e3a:	4603      	mov	r3, r0
	}
 8018e3c:	4618      	mov	r0, r3
 8018e3e:	3708      	adds	r7, #8
 8018e40:	46bd      	mov	sp, r7
 8018e42:	bd80      	pop	{r7, pc}

08018e44 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_>:
	uint8_t execute(uint16_t address, uint8_t *input, uint8_t *output) {
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b084      	sub	sp, #16
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	60f8      	str	r0, [r7, #12]
 8018e4c:	607a      	str	r2, [r7, #4]
 8018e4e:	603b      	str	r3, [r7, #0]
 8018e50:	460b      	mov	r3, r1
 8018e52:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 8018e54:	897b      	ldrh	r3, [r7, #10]
 8018e56:	68fa      	ldr	r2, [r7, #12]
 8018e58:	3302      	adds	r3, #2
 8018e5a:	009b      	lsls	r3, r3, #2
 8018e5c:	4413      	add	r3, r2
 8018e5e:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType()
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d015      	beq.n	8018e90 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x4c>
 8018e64:	897b      	ldrh	r3, [r7, #10]
 8018e66:	68fa      	ldr	r2, [r7, #12]
 8018e68:	3302      	adds	r3, #2
 8018e6a:	009b      	lsls	r3, r3, #2
 8018e6c:	4413      	add	r3, r2
 8018e6e:	6859      	ldr	r1, [r3, #4]
 8018e70:	897b      	ldrh	r3, [r7, #10]
 8018e72:	68fa      	ldr	r2, [r7, #12]
 8018e74:	3302      	adds	r3, #2
 8018e76:	009b      	lsls	r3, r3, #2
 8018e78:	4413      	add	r3, r2
 8018e7a:	685b      	ldr	r3, [r3, #4]
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	3320      	adds	r3, #32
 8018e80:	681b      	ldr	r3, [r3, #0]
 8018e82:	4608      	mov	r0, r1
 8018e84:	4798      	blx	r3
 8018e86:	4603      	mov	r3, r0
 8018e88:	2b02      	cmp	r3, #2
 8018e8a:	d101      	bne.n	8018e90 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x4c>
 8018e8c:	2301      	movs	r3, #1
 8018e8e:	e000      	b.n	8018e92 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x4e>
 8018e90:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d013      	beq.n	8018ebe <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x7a>
			return this->entries[address]->execute(input, output);
 8018e96:	897b      	ldrh	r3, [r7, #10]
 8018e98:	68fa      	ldr	r2, [r7, #12]
 8018e9a:	3302      	adds	r3, #2
 8018e9c:	009b      	lsls	r3, r3, #2
 8018e9e:	4413      	add	r3, r2
 8018ea0:	6858      	ldr	r0, [r3, #4]
 8018ea2:	897b      	ldrh	r3, [r7, #10]
 8018ea4:	68fa      	ldr	r2, [r7, #12]
 8018ea6:	3302      	adds	r3, #2
 8018ea8:	009b      	lsls	r3, r3, #2
 8018eaa:	4413      	add	r3, r2
 8018eac:	685b      	ldr	r3, [r3, #4]
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	331c      	adds	r3, #28
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	683a      	ldr	r2, [r7, #0]
 8018eb6:	6879      	ldr	r1, [r7, #4]
 8018eb8:	4798      	blx	r3
 8018eba:	4603      	mov	r3, r0
 8018ebc:	e000      	b.n	8018ec0 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x7c>
		return 0;
 8018ebe:	2300      	movs	r3, #0
	}
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	3710      	adds	r7, #16
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	bd80      	pop	{r7, pc}

08018ec8 <_ZN22core_utils_RegisterMapILi20EE7executeEt>:
	uint8_t execute(uint16_t address) {
 8018ec8:	b580      	push	{r7, lr}
 8018eca:	b082      	sub	sp, #8
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	6078      	str	r0, [r7, #4]
 8018ed0:	460b      	mov	r3, r1
 8018ed2:	807b      	strh	r3, [r7, #2]
		if (this->entries[address] != NULL
 8018ed4:	887b      	ldrh	r3, [r7, #2]
 8018ed6:	687a      	ldr	r2, [r7, #4]
 8018ed8:	3302      	adds	r3, #2
 8018eda:	009b      	lsls	r3, r3, #2
 8018edc:	4413      	add	r3, r2
 8018ede:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType()
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d015      	beq.n	8018f10 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0x48>
 8018ee4:	887b      	ldrh	r3, [r7, #2]
 8018ee6:	687a      	ldr	r2, [r7, #4]
 8018ee8:	3302      	adds	r3, #2
 8018eea:	009b      	lsls	r3, r3, #2
 8018eec:	4413      	add	r3, r2
 8018eee:	6859      	ldr	r1, [r3, #4]
 8018ef0:	887b      	ldrh	r3, [r7, #2]
 8018ef2:	687a      	ldr	r2, [r7, #4]
 8018ef4:	3302      	adds	r3, #2
 8018ef6:	009b      	lsls	r3, r3, #2
 8018ef8:	4413      	add	r3, r2
 8018efa:	685b      	ldr	r3, [r3, #4]
 8018efc:	681b      	ldr	r3, [r3, #0]
 8018efe:	3320      	adds	r3, #32
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	4608      	mov	r0, r1
 8018f04:	4798      	blx	r3
 8018f06:	4603      	mov	r3, r0
 8018f08:	2b02      	cmp	r3, #2
 8018f0a:	d101      	bne.n	8018f10 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0x48>
 8018f0c:	2301      	movs	r3, #1
 8018f0e:	e000      	b.n	8018f12 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0x4a>
 8018f10:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d03d      	beq.n	8018f92 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xca>
			if (this->entries[address]->getInputSize() == 0
 8018f16:	887b      	ldrh	r3, [r7, #2]
 8018f18:	687a      	ldr	r2, [r7, #4]
 8018f1a:	3302      	adds	r3, #2
 8018f1c:	009b      	lsls	r3, r3, #2
 8018f1e:	4413      	add	r3, r2
 8018f20:	6859      	ldr	r1, [r3, #4]
 8018f22:	887b      	ldrh	r3, [r7, #2]
 8018f24:	687a      	ldr	r2, [r7, #4]
 8018f26:	3302      	adds	r3, #2
 8018f28:	009b      	lsls	r3, r3, #2
 8018f2a:	4413      	add	r3, r2
 8018f2c:	685b      	ldr	r3, [r3, #4]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	3310      	adds	r3, #16
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	4608      	mov	r0, r1
 8018f36:	4798      	blx	r3
 8018f38:	4603      	mov	r3, r0
					&& this->entries[address]->getOutputSize() == 0) {
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d115      	bne.n	8018f6a <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xa2>
 8018f3e:	887b      	ldrh	r3, [r7, #2]
 8018f40:	687a      	ldr	r2, [r7, #4]
 8018f42:	3302      	adds	r3, #2
 8018f44:	009b      	lsls	r3, r3, #2
 8018f46:	4413      	add	r3, r2
 8018f48:	6859      	ldr	r1, [r3, #4]
 8018f4a:	887b      	ldrh	r3, [r7, #2]
 8018f4c:	687a      	ldr	r2, [r7, #4]
 8018f4e:	3302      	adds	r3, #2
 8018f50:	009b      	lsls	r3, r3, #2
 8018f52:	4413      	add	r3, r2
 8018f54:	685b      	ldr	r3, [r3, #4]
 8018f56:	681b      	ldr	r3, [r3, #0]
 8018f58:	3314      	adds	r3, #20
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	4608      	mov	r0, r1
 8018f5e:	4798      	blx	r3
 8018f60:	4603      	mov	r3, r0
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d101      	bne.n	8018f6a <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xa2>
 8018f66:	2301      	movs	r3, #1
 8018f68:	e000      	b.n	8018f6c <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xa4>
 8018f6a:	2300      	movs	r3, #0
			if (this->entries[address]->getInputSize() == 0
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d010      	beq.n	8018f92 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xca>
				this->entries[address]->execute();
 8018f70:	887b      	ldrh	r3, [r7, #2]
 8018f72:	687a      	ldr	r2, [r7, #4]
 8018f74:	3302      	adds	r3, #2
 8018f76:	009b      	lsls	r3, r3, #2
 8018f78:	4413      	add	r3, r2
 8018f7a:	6859      	ldr	r1, [r3, #4]
 8018f7c:	887b      	ldrh	r3, [r7, #2]
 8018f7e:	687a      	ldr	r2, [r7, #4]
 8018f80:	3302      	adds	r3, #2
 8018f82:	009b      	lsls	r3, r3, #2
 8018f84:	4413      	add	r3, r2
 8018f86:	685b      	ldr	r3, [r3, #4]
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	3318      	adds	r3, #24
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	4608      	mov	r0, r1
 8018f90:	4798      	blx	r3
		return 0;
 8018f92:	2300      	movs	r3, #0
	}
 8018f94:	4618      	mov	r0, r3
 8018f96:	3708      	adds	r7, #8
 8018f98:	46bd      	mov	sp, r7
 8018f9a:	bd80      	pop	{r7, pc}

08018f9c <_ZN27core_utils_RegisterFunctionIvfE7getSizeEv>:
	uint8_t getSize() {
 8018f9c:	b480      	push	{r7}
 8018f9e:	b083      	sub	sp, #12
 8018fa0:	af00      	add	r7, sp, #0
 8018fa2:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 8018fa4:	2304      	movs	r3, #4
	}
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	370c      	adds	r7, #12
 8018faa:	46bd      	mov	sp, r7
 8018fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fb0:	4770      	bx	lr

08018fb2 <_ZN27core_utils_RegisterFunctionIvfE12getInputSizeEv>:
	uint8_t getInputSize() {
 8018fb2:	b480      	push	{r7}
 8018fb4:	b083      	sub	sp, #12
 8018fb6:	af00      	add	r7, sp, #0
 8018fb8:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 8018fba:	2304      	movs	r3, #4
	}
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	370c      	adds	r7, #12
 8018fc0:	46bd      	mov	sp, r7
 8018fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc6:	4770      	bx	lr

08018fc8 <_ZN27core_utils_RegisterFunctionIvfE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 8018fc8:	b480      	push	{r7}
 8018fca:	b083      	sub	sp, #12
 8018fcc:	af00      	add	r7, sp, #0
 8018fce:	6078      	str	r0, [r7, #4]
		return 0;
 8018fd0:	2300      	movs	r3, #0
	}
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	370c      	adds	r7, #12
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fdc:	4770      	bx	lr

08018fde <_ZN27core_utils_RegisterFunctionIvfE7executeEPhS1_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 8018fde:	b580      	push	{r7, lr}
 8018fe0:	b086      	sub	sp, #24
 8018fe2:	af00      	add	r7, sp, #0
 8018fe4:	60f8      	str	r0, [r7, #12]
 8018fe6:	60b9      	str	r1, [r7, #8]
 8018fe8:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 8018fea:	2300      	movs	r3, #0
 8018fec:	75fb      	strb	r3, [r7, #23]
 8018fee:	e00b      	b.n	8019008 <_ZN27core_utils_RegisterFunctionIvfE7executeEPhS1_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 8018ff0:	7dfb      	ldrb	r3, [r7, #23]
 8018ff2:	68ba      	ldr	r2, [r7, #8]
 8018ff4:	441a      	add	r2, r3
 8018ff6:	7dfb      	ldrb	r3, [r7, #23]
 8018ff8:	7811      	ldrb	r1, [r2, #0]
 8018ffa:	68fa      	ldr	r2, [r7, #12]
 8018ffc:	4413      	add	r3, r2
 8018ffe:	460a      	mov	r2, r1
 8019000:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 8019002:	7dfb      	ldrb	r3, [r7, #23]
 8019004:	3301      	adds	r3, #1
 8019006:	75fb      	strb	r3, [r7, #23]
 8019008:	7dfb      	ldrb	r3, [r7, #23]
 801900a:	2b03      	cmp	r3, #3
 801900c:	d9f0      	bls.n	8018ff0 <_ZN27core_utils_RegisterFunctionIvfE7executeEPhS1_+0x12>
		this->execute(this->input_data_union.data);
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	edd3 7a02 	vldr	s15, [r3, #8]
 8019014:	eeb0 0a67 	vmov.f32	s0, s15
 8019018:	68f8      	ldr	r0, [r7, #12]
 801901a:	f000 fb90 	bl	801973e <_ZN27core_utils_RegisterFunctionIvfE7executeEf>
		return 0;
 801901e:	2300      	movs	r3, #0
	}
 8019020:	4618      	mov	r0, r3
 8019022:	3718      	adds	r7, #24
 8019024:	46bd      	mov	sp, r7
 8019026:	bd80      	pop	{r7, pc}

08019028 <_ZN27core_utils_RegisterFunctionIvfE7getTypeEv>:
	register_entry_type getType() {
 8019028:	b480      	push	{r7}
 801902a:	b083      	sub	sp, #12
 801902c:	af00      	add	r7, sp, #0
 801902e:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 8019030:	2302      	movs	r3, #2
	}
 8019032:	4618      	mov	r0, r3
 8019034:	370c      	adds	r7, #12
 8019036:	46bd      	mov	sp, r7
 8019038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903c:	4770      	bx	lr

0801903e <_ZN27core_utils_RegisterFunctionIvfE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 801903e:	b480      	push	{r7}
 8019040:	b083      	sub	sp, #12
 8019042:	af00      	add	r7, sp, #0
 8019044:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 8019046:	2302      	movs	r3, #2
	}
 8019048:	4618      	mov	r0, r3
 801904a:	370c      	adds	r7, #12
 801904c:	46bd      	mov	sp, r7
 801904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019052:	4770      	bx	lr

08019054 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPv>:
	void write(void *value) {
 8019054:	b5b0      	push	{r4, r5, r7, lr}
 8019056:	b084      	sub	sp, #16
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
 801905c:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019064:	2b00      	cmp	r3, #0
 8019066:	d014      	beq.n	8019092 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPv+0x3e>
		T *value_typed = (T*) value;
 8019068:	683b      	ldr	r3, [r7, #0]
 801906a:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	4614      	mov	r4, r2
 8019074:	461d      	mov	r5, r3
 8019076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801907a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801907c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801907e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8019082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		this->write_function.call();
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	3344      	adds	r3, #68	; 0x44
 801908a:	4618      	mov	r0, r3
 801908c:	f7fa fd90 	bl	8013bb0 <_ZN8Callback4callEv>
 8019090:	e000      	b.n	8019094 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPv+0x40>
			return;
 8019092:	bf00      	nop
	}
 8019094:	3710      	adds	r7, #16
 8019096:	46bd      	mov	sp, r7
 8019098:	bdb0      	pop	{r4, r5, r7, pc}

0801909a <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 801909a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801909c:	b08f      	sub	sp, #60	; 0x3c
 801909e:	af0a      	add	r7, sp, #40	; 0x28
 80190a0:	6078      	str	r0, [r7, #4]
 80190a2:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d022      	beq.n	80190f4 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh+0x5a>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80190ae:	2300      	movs	r3, #0
 80190b0:	73fb      	strb	r3, [r7, #15]
 80190b2:	e00b      	b.n	80190cc <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh+0x32>
			this->data_union.data_bytes[i] = data[i];
 80190b4:	7bfb      	ldrb	r3, [r7, #15]
 80190b6:	683a      	ldr	r2, [r7, #0]
 80190b8:	441a      	add	r2, r3
 80190ba:	7bfb      	ldrb	r3, [r7, #15]
 80190bc:	7811      	ldrb	r1, [r2, #0]
 80190be:	687a      	ldr	r2, [r7, #4]
 80190c0:	4413      	add	r3, r2
 80190c2:	460a      	mov	r2, r1
 80190c4:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80190c6:	7bfb      	ldrb	r3, [r7, #15]
 80190c8:	3301      	adds	r3, #1
 80190ca:	73fb      	strb	r3, [r7, #15]
 80190cc:	7bfb      	ldrb	r3, [r7, #15]
 80190ce:	2b2f      	cmp	r3, #47	; 0x2f
 80190d0:	d9f0      	bls.n	80190b4 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh+0x1a>
		this->write(this->data_union.data);
 80190d2:	687e      	ldr	r6, [r7, #4]
 80190d4:	466d      	mov	r5, sp
 80190d6:	f106 0414 	add.w	r4, r6, #20
 80190da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80190de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80190e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80190e2:	6823      	ldr	r3, [r4, #0]
 80190e4:	602b      	str	r3, [r5, #0]
 80190e6:	f106 0308 	add.w	r3, r6, #8
 80190ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80190ec:	6878      	ldr	r0, [r7, #4]
 80190ee:	f000 fb3b 	bl	8019768 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeES0_>
 80190f2:	e000      	b.n	80190f6 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh+0x5c>
			return;
 80190f4:	bf00      	nop
	}
 80190f6:	3714      	adds	r7, #20
 80190f8:	46bd      	mov	sp, r7
 80190fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080190fc <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 80190fc:	b4b0      	push	{r4, r5, r7}
 80190fe:	b085      	sub	sp, #20
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]
 8019104:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801910c:	2b01      	cmp	r3, #1
 801910e:	d101      	bne.n	8019114 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh+0x18>
			return 0;
 8019110:	2300      	movs	r3, #0
 8019112:	e01f      	b.n	8019154 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh+0x58>
		this->data_union.data = *(this->data);
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	f103 0408 	add.w	r4, r3, #8
 801911e:	4615      	mov	r5, r2
 8019120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019128:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801912c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019130:	2300      	movs	r3, #0
 8019132:	73fb      	strb	r3, [r7, #15]
 8019134:	e00a      	b.n	801914c <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh+0x50>
			data[i] = this->data_union.data_bytes[i];
 8019136:	7bfa      	ldrb	r2, [r7, #15]
 8019138:	7bfb      	ldrb	r3, [r7, #15]
 801913a:	6839      	ldr	r1, [r7, #0]
 801913c:	440b      	add	r3, r1
 801913e:	6879      	ldr	r1, [r7, #4]
 8019140:	440a      	add	r2, r1
 8019142:	7a12      	ldrb	r2, [r2, #8]
 8019144:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019146:	7bfb      	ldrb	r3, [r7, #15]
 8019148:	3301      	adds	r3, #1
 801914a:	73fb      	strb	r3, [r7, #15]
 801914c:	7bfb      	ldrb	r3, [r7, #15]
 801914e:	2b2f      	cmp	r3, #47	; 0x2f
 8019150:	d9f1      	bls.n	8019136 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh+0x3a>
		return sizeof(T);
 8019152:	2330      	movs	r3, #48	; 0x30
	}
 8019154:	4618      	mov	r0, r3
 8019156:	3714      	adds	r7, #20
 8019158:	46bd      	mov	sp, r7
 801915a:	bcb0      	pop	{r4, r5, r7}
 801915c:	4770      	bx	lr

0801915e <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE7getSizeEv>:
	uint8_t getSize() {
 801915e:	b480      	push	{r7}
 8019160:	b083      	sub	sp, #12
 8019162:	af00      	add	r7, sp, #0
 8019164:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 8019166:	2330      	movs	r3, #48	; 0x30
	}
 8019168:	4618      	mov	r0, r3
 801916a:	370c      	adds	r7, #12
 801916c:	46bd      	mov	sp, r7
 801916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019172:	4770      	bx	lr

08019174 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE7getTypeEv>:
	register_entry_type getType() {
 8019174:	b480      	push	{r7}
 8019176:	b083      	sub	sp, #12
 8019178:	af00      	add	r7, sp, #0
 801917a:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 801917c:	2301      	movs	r3, #1
	}
 801917e:	4618      	mov	r0, r3
 8019180:	370c      	adds	r7, #12
 8019182:	46bd      	mov	sp, r7
 8019184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019188:	4770      	bx	lr

0801918a <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 801918a:	b480      	push	{r7}
 801918c:	b083      	sub	sp, #12
 801918e:	af00      	add	r7, sp, #0
 8019190:	6078      	str	r0, [r7, #4]
		return this->rw;
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
	}
 8019198:	4618      	mov	r0, r3
 801919a:	370c      	adds	r7, #12
 801919c:	46bd      	mov	sp, r7
 801919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a2:	4770      	bx	lr

080191a4 <_ZN27core_utils_RegisterFunctionIhA8_fE7getSizeEv>:
	uint8_t getSize() {
 80191a4:	b480      	push	{r7}
 80191a6:	b083      	sub	sp, #12
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 80191ac:	2320      	movs	r3, #32
	}
 80191ae:	4618      	mov	r0, r3
 80191b0:	370c      	adds	r7, #12
 80191b2:	46bd      	mov	sp, r7
 80191b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b8:	4770      	bx	lr

080191ba <_ZN27core_utils_RegisterFunctionIhA8_fE12getInputSizeEv>:
	uint8_t getInputSize() {
 80191ba:	b480      	push	{r7}
 80191bc:	b083      	sub	sp, #12
 80191be:	af00      	add	r7, sp, #0
 80191c0:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 80191c2:	2320      	movs	r3, #32
	}
 80191c4:	4618      	mov	r0, r3
 80191c6:	370c      	adds	r7, #12
 80191c8:	46bd      	mov	sp, r7
 80191ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ce:	4770      	bx	lr

080191d0 <_ZN27core_utils_RegisterFunctionIhA8_fE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 80191d0:	b480      	push	{r7}
 80191d2:	b083      	sub	sp, #12
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	6078      	str	r0, [r7, #4]
		return sizeof(output_t);
 80191d8:	2301      	movs	r3, #1
	}
 80191da:	4618      	mov	r0, r3
 80191dc:	370c      	adds	r7, #12
 80191de:	46bd      	mov	sp, r7
 80191e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191e4:	4770      	bx	lr

080191e6 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 80191e6:	b580      	push	{r7, lr}
 80191e8:	b088      	sub	sp, #32
 80191ea:	af00      	add	r7, sp, #0
 80191ec:	60f8      	str	r0, [r7, #12]
 80191ee:	60b9      	str	r1, [r7, #8]
 80191f0:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 80191f2:	2300      	movs	r3, #0
 80191f4:	77fb      	strb	r3, [r7, #31]
 80191f6:	e00b      	b.n	8019210 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 80191f8:	7ffb      	ldrb	r3, [r7, #31]
 80191fa:	68ba      	ldr	r2, [r7, #8]
 80191fc:	441a      	add	r2, r3
 80191fe:	7ffb      	ldrb	r3, [r7, #31]
 8019200:	7811      	ldrb	r1, [r2, #0]
 8019202:	68fa      	ldr	r2, [r7, #12]
 8019204:	4413      	add	r3, r2
 8019206:	460a      	mov	r2, r1
 8019208:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 801920a:	7ffb      	ldrb	r3, [r7, #31]
 801920c:	3301      	adds	r3, #1
 801920e:	77fb      	strb	r3, [r7, #31]
 8019210:	7ffb      	ldrb	r3, [r7, #31]
 8019212:	2b1f      	cmp	r3, #31
 8019214:	d9f0      	bls.n	80191f8 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_+0x12>
		output_t out = this->execute(this->input_data_union.data);
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	3308      	adds	r3, #8
 801921a:	4619      	mov	r1, r3
 801921c:	68f8      	ldr	r0, [r7, #12]
 801921e:	f000 facb 	bl	80197b8 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPf>
 8019222:	4603      	mov	r3, r0
 8019224:	75fb      	strb	r3, [r7, #23]
		uint8_t *data_ptr = (uint8_t*) &out;
 8019226:	f107 0317 	add.w	r3, r7, #23
 801922a:	61bb      	str	r3, [r7, #24]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 801922c:	2300      	movs	r3, #0
 801922e:	77bb      	strb	r3, [r7, #30]
 8019230:	e00a      	b.n	8019248 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_+0x62>
			output_buffer[i] = data_ptr[i];
 8019232:	7fbb      	ldrb	r3, [r7, #30]
 8019234:	69ba      	ldr	r2, [r7, #24]
 8019236:	441a      	add	r2, r3
 8019238:	7fbb      	ldrb	r3, [r7, #30]
 801923a:	6879      	ldr	r1, [r7, #4]
 801923c:	440b      	add	r3, r1
 801923e:	7812      	ldrb	r2, [r2, #0]
 8019240:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 8019242:	7fbb      	ldrb	r3, [r7, #30]
 8019244:	3301      	adds	r3, #1
 8019246:	77bb      	strb	r3, [r7, #30]
 8019248:	7fbb      	ldrb	r3, [r7, #30]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d0f1      	beq.n	8019232 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_+0x4c>
		return sizeof(output_t);
 801924e:	2301      	movs	r3, #1
	}
 8019250:	4618      	mov	r0, r3
 8019252:	3720      	adds	r7, #32
 8019254:	46bd      	mov	sp, r7
 8019256:	bd80      	pop	{r7, pc}

08019258 <_ZN27core_utils_RegisterFunctionIhA8_fE7getTypeEv>:
	register_entry_type getType() {
 8019258:	b480      	push	{r7}
 801925a:	b083      	sub	sp, #12
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 8019260:	2302      	movs	r3, #2
	}
 8019262:	4618      	mov	r0, r3
 8019264:	370c      	adds	r7, #12
 8019266:	46bd      	mov	sp, r7
 8019268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801926c:	4770      	bx	lr

0801926e <_ZN27core_utils_RegisterFunctionIhA8_fE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 801926e:	b480      	push	{r7}
 8019270:	b083      	sub	sp, #12
 8019272:	af00      	add	r7, sp, #0
 8019274:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 8019276:	2302      	movs	r3, #2
	}
 8019278:	4618      	mov	r0, r3
 801927a:	370c      	adds	r7, #12
 801927c:	46bd      	mov	sp, r7
 801927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019282:	4770      	bx	lr

08019284 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7getSizeEv>:
	uint8_t getSize() {
 8019284:	b480      	push	{r7}
 8019286:	b083      	sub	sp, #12
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 801928c:	2306      	movs	r3, #6
	}
 801928e:	4618      	mov	r0, r3
 8019290:	370c      	adds	r7, #12
 8019292:	46bd      	mov	sp, r7
 8019294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019298:	4770      	bx	lr

0801929a <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE12getInputSizeEv>:
	uint8_t getInputSize() {
 801929a:	b480      	push	{r7}
 801929c:	b083      	sub	sp, #12
 801929e:	af00      	add	r7, sp, #0
 80192a0:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 80192a2:	2306      	movs	r3, #6
	}
 80192a4:	4618      	mov	r0, r3
 80192a6:	370c      	adds	r7, #12
 80192a8:	46bd      	mov	sp, r7
 80192aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ae:	4770      	bx	lr

080192b0 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 80192b0:	b480      	push	{r7}
 80192b2:	b083      	sub	sp, #12
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	6078      	str	r0, [r7, #4]
		return sizeof(output_t);
 80192b8:	2301      	movs	r3, #1
	}
 80192ba:	4618      	mov	r0, r3
 80192bc:	370c      	adds	r7, #12
 80192be:	46bd      	mov	sp, r7
 80192c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c4:	4770      	bx	lr

080192c6 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 80192c6:	b580      	push	{r7, lr}
 80192c8:	b088      	sub	sp, #32
 80192ca:	af00      	add	r7, sp, #0
 80192cc:	60f8      	str	r0, [r7, #12]
 80192ce:	60b9      	str	r1, [r7, #8]
 80192d0:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 80192d2:	2300      	movs	r3, #0
 80192d4:	77fb      	strb	r3, [r7, #31]
 80192d6:	e00b      	b.n	80192f0 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 80192d8:	7ffb      	ldrb	r3, [r7, #31]
 80192da:	68ba      	ldr	r2, [r7, #8]
 80192dc:	441a      	add	r2, r3
 80192de:	7ffb      	ldrb	r3, [r7, #31]
 80192e0:	7811      	ldrb	r1, [r2, #0]
 80192e2:	68fa      	ldr	r2, [r7, #12]
 80192e4:	4413      	add	r3, r2
 80192e6:	460a      	mov	r2, r1
 80192e8:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 80192ea:	7ffb      	ldrb	r3, [r7, #31]
 80192ec:	3301      	adds	r3, #1
 80192ee:	77fb      	strb	r3, [r7, #31]
 80192f0:	7ffb      	ldrb	r3, [r7, #31]
 80192f2:	2b05      	cmp	r3, #5
 80192f4:	d9f0      	bls.n	80192d8 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_+0x12>
		output_t out = this->execute(this->input_data_union.data);
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80192fc:	4611      	mov	r1, r2
 80192fe:	895a      	ldrh	r2, [r3, #10]
 8019300:	2300      	movs	r3, #0
 8019302:	f362 030f 	bfi	r3, r2, #0, #16
 8019306:	461a      	mov	r2, r3
 8019308:	68f8      	ldr	r0, [r7, #12]
 801930a:	f000 fa6c 	bl	80197e6 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeES0_>
 801930e:	4603      	mov	r3, r0
 8019310:	75fb      	strb	r3, [r7, #23]
		uint8_t *data_ptr = (uint8_t*) &out;
 8019312:	f107 0317 	add.w	r3, r7, #23
 8019316:	61bb      	str	r3, [r7, #24]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 8019318:	2300      	movs	r3, #0
 801931a:	77bb      	strb	r3, [r7, #30]
 801931c:	e00a      	b.n	8019334 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_+0x6e>
			output_buffer[i] = data_ptr[i];
 801931e:	7fbb      	ldrb	r3, [r7, #30]
 8019320:	69ba      	ldr	r2, [r7, #24]
 8019322:	441a      	add	r2, r3
 8019324:	7fbb      	ldrb	r3, [r7, #30]
 8019326:	6879      	ldr	r1, [r7, #4]
 8019328:	440b      	add	r3, r1
 801932a:	7812      	ldrb	r2, [r2, #0]
 801932c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 801932e:	7fbb      	ldrb	r3, [r7, #30]
 8019330:	3301      	adds	r3, #1
 8019332:	77bb      	strb	r3, [r7, #30]
 8019334:	7fbb      	ldrb	r3, [r7, #30]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d0f1      	beq.n	801931e <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_+0x58>
		return sizeof(output_t);
 801933a:	2301      	movs	r3, #1
	}
 801933c:	4618      	mov	r0, r3
 801933e:	3720      	adds	r7, #32
 8019340:	46bd      	mov	sp, r7
 8019342:	bd80      	pop	{r7, pc}

08019344 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7getTypeEv>:
	register_entry_type getType() {
 8019344:	b480      	push	{r7}
 8019346:	b083      	sub	sp, #12
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 801934c:	2302      	movs	r3, #2
	}
 801934e:	4618      	mov	r0, r3
 8019350:	370c      	adds	r7, #12
 8019352:	46bd      	mov	sp, r7
 8019354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019358:	4770      	bx	lr

0801935a <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 801935a:	b480      	push	{r7}
 801935c:	b083      	sub	sp, #12
 801935e:	af00      	add	r7, sp, #0
 8019360:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 8019362:	2302      	movs	r3, #2
	}
 8019364:	4618      	mov	r0, r3
 8019366:	370c      	adds	r7, #12
 8019368:	46bd      	mov	sp, r7
 801936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801936e:	4770      	bx	lr

08019370 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7getSizeEv>:
	uint8_t getSize() {
 8019370:	b480      	push	{r7}
 8019372:	b083      	sub	sp, #12
 8019374:	af00      	add	r7, sp, #0
 8019376:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 8019378:	2301      	movs	r3, #1
	}
 801937a:	4618      	mov	r0, r3
 801937c:	370c      	adds	r7, #12
 801937e:	46bd      	mov	sp, r7
 8019380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019384:	4770      	bx	lr

08019386 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE12getInputSizeEv>:
	uint8_t getInputSize() {
 8019386:	b480      	push	{r7}
 8019388:	b083      	sub	sp, #12
 801938a:	af00      	add	r7, sp, #0
 801938c:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 801938e:	2301      	movs	r3, #1
	}
 8019390:	4618      	mov	r0, r3
 8019392:	370c      	adds	r7, #12
 8019394:	46bd      	mov	sp, r7
 8019396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801939a:	4770      	bx	lr

0801939c <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 801939c:	b480      	push	{r7}
 801939e:	b083      	sub	sp, #12
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	6078      	str	r0, [r7, #4]
		return sizeof(output_t);
 80193a4:	2301      	movs	r3, #1
	}
 80193a6:	4618      	mov	r0, r3
 80193a8:	370c      	adds	r7, #12
 80193aa:	46bd      	mov	sp, r7
 80193ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b0:	4770      	bx	lr

080193b2 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 80193b2:	b580      	push	{r7, lr}
 80193b4:	b088      	sub	sp, #32
 80193b6:	af00      	add	r7, sp, #0
 80193b8:	60f8      	str	r0, [r7, #12]
 80193ba:	60b9      	str	r1, [r7, #8]
 80193bc:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 80193be:	2300      	movs	r3, #0
 80193c0:	77fb      	strb	r3, [r7, #31]
 80193c2:	e00b      	b.n	80193dc <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 80193c4:	7ffb      	ldrb	r3, [r7, #31]
 80193c6:	68ba      	ldr	r2, [r7, #8]
 80193c8:	441a      	add	r2, r3
 80193ca:	7ffb      	ldrb	r3, [r7, #31]
 80193cc:	7811      	ldrb	r1, [r2, #0]
 80193ce:	68fa      	ldr	r2, [r7, #12]
 80193d0:	4413      	add	r3, r2
 80193d2:	460a      	mov	r2, r1
 80193d4:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 80193d6:	7ffb      	ldrb	r3, [r7, #31]
 80193d8:	3301      	adds	r3, #1
 80193da:	77fb      	strb	r3, [r7, #31]
 80193dc:	7ffb      	ldrb	r3, [r7, #31]
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d0f0      	beq.n	80193c4 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_+0x12>
		output_t out = this->execute(this->input_data_union.data);
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	799b      	ldrb	r3, [r3, #6]
 80193e6:	4619      	mov	r1, r3
 80193e8:	68f8      	ldr	r0, [r7, #12]
 80193ea:	f000 fa16 	bl	801981a <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeES0_>
 80193ee:	4603      	mov	r3, r0
 80193f0:	75fb      	strb	r3, [r7, #23]
		uint8_t *data_ptr = (uint8_t*) &out;
 80193f2:	f107 0317 	add.w	r3, r7, #23
 80193f6:	61bb      	str	r3, [r7, #24]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 80193f8:	2300      	movs	r3, #0
 80193fa:	77bb      	strb	r3, [r7, #30]
 80193fc:	e00a      	b.n	8019414 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_+0x62>
			output_buffer[i] = data_ptr[i];
 80193fe:	7fbb      	ldrb	r3, [r7, #30]
 8019400:	69ba      	ldr	r2, [r7, #24]
 8019402:	441a      	add	r2, r3
 8019404:	7fbb      	ldrb	r3, [r7, #30]
 8019406:	6879      	ldr	r1, [r7, #4]
 8019408:	440b      	add	r3, r1
 801940a:	7812      	ldrb	r2, [r2, #0]
 801940c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 801940e:	7fbb      	ldrb	r3, [r7, #30]
 8019410:	3301      	adds	r3, #1
 8019412:	77bb      	strb	r3, [r7, #30]
 8019414:	7fbb      	ldrb	r3, [r7, #30]
 8019416:	2b00      	cmp	r3, #0
 8019418:	d0f1      	beq.n	80193fe <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_+0x4c>
		return sizeof(output_t);
 801941a:	2301      	movs	r3, #1
	}
 801941c:	4618      	mov	r0, r3
 801941e:	3720      	adds	r7, #32
 8019420:	46bd      	mov	sp, r7
 8019422:	bd80      	pop	{r7, pc}

08019424 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7getTypeEv>:
	register_entry_type getType() {
 8019424:	b480      	push	{r7}
 8019426:	b083      	sub	sp, #12
 8019428:	af00      	add	r7, sp, #0
 801942a:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 801942c:	2302      	movs	r3, #2
	}
 801942e:	4618      	mov	r0, r3
 8019430:	370c      	adds	r7, #12
 8019432:	46bd      	mov	sp, r7
 8019434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019438:	4770      	bx	lr

0801943a <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 801943a:	b480      	push	{r7}
 801943c:	b083      	sub	sp, #12
 801943e:	af00      	add	r7, sp, #0
 8019440:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 8019442:	2302      	movs	r3, #2
	}
 8019444:	4618      	mov	r0, r3
 8019446:	370c      	adds	r7, #12
 8019448:	46bd      	mov	sp, r7
 801944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801944e:	4770      	bx	lr

08019450 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPv>:
	void write(void *value) {
 8019450:	b580      	push	{r7, lr}
 8019452:	b084      	sub	sp, #16
 8019454:	af00      	add	r7, sp, #0
 8019456:	6078      	str	r0, [r7, #4]
 8019458:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801945a:	687b      	ldr	r3, [r7, #4]
 801945c:	7a9b      	ldrb	r3, [r3, #10]
 801945e:	2b00      	cmp	r3, #0
 8019460:	d00c      	beq.n	801947c <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPv+0x2c>
		T *value_typed = (T*) value;
 8019462:	683b      	ldr	r3, [r7, #0]
 8019464:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	68db      	ldr	r3, [r3, #12]
 801946a:	68fa      	ldr	r2, [r7, #12]
 801946c:	7812      	ldrb	r2, [r2, #0]
 801946e:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	3310      	adds	r3, #16
 8019474:	4618      	mov	r0, r3
 8019476:	f7fa fb9b 	bl	8013bb0 <_ZN8Callback4callEv>
 801947a:	e000      	b.n	801947e <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPv+0x2e>
			return;
 801947c:	bf00      	nop
	}
 801947e:	3710      	adds	r7, #16
 8019480:	46bd      	mov	sp, r7
 8019482:	bd80      	pop	{r7, pc}

08019484 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 8019484:	b580      	push	{r7, lr}
 8019486:	b084      	sub	sp, #16
 8019488:	af00      	add	r7, sp, #0
 801948a:	6078      	str	r0, [r7, #4]
 801948c:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	7a9b      	ldrb	r3, [r3, #10]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d018      	beq.n	80194c8 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh+0x44>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019496:	2300      	movs	r3, #0
 8019498:	73fb      	strb	r3, [r7, #15]
 801949a:	e00b      	b.n	80194b4 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh+0x30>
			this->data_union.data_bytes[i] = data[i];
 801949c:	7bfb      	ldrb	r3, [r7, #15]
 801949e:	683a      	ldr	r2, [r7, #0]
 80194a0:	441a      	add	r2, r3
 80194a2:	7bfb      	ldrb	r3, [r7, #15]
 80194a4:	7811      	ldrb	r1, [r2, #0]
 80194a6:	687a      	ldr	r2, [r7, #4]
 80194a8:	4413      	add	r3, r2
 80194aa:	460a      	mov	r2, r1
 80194ac:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80194ae:	7bfb      	ldrb	r3, [r7, #15]
 80194b0:	3301      	adds	r3, #1
 80194b2:	73fb      	strb	r3, [r7, #15]
 80194b4:	7bfb      	ldrb	r3, [r7, #15]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d0f0      	beq.n	801949c <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh+0x18>
		this->write(this->data_union.data);
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	799b      	ldrb	r3, [r3, #6]
 80194be:	4619      	mov	r1, r3
 80194c0:	6878      	ldr	r0, [r7, #4]
 80194c2:	f000 f9c2 	bl	801984a <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeES0_>
 80194c6:	e000      	b.n	80194ca <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh+0x46>
			return;
 80194c8:	bf00      	nop
	}
 80194ca:	3710      	adds	r7, #16
 80194cc:	46bd      	mov	sp, r7
 80194ce:	bd80      	pop	{r7, pc}

080194d0 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 80194d0:	b480      	push	{r7}
 80194d2:	b085      	sub	sp, #20
 80194d4:	af00      	add	r7, sp, #0
 80194d6:	6078      	str	r0, [r7, #4]
 80194d8:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	7a9b      	ldrb	r3, [r3, #10]
 80194de:	2b01      	cmp	r3, #1
 80194e0:	d101      	bne.n	80194e6 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh+0x16>
			return 0;
 80194e2:	2300      	movs	r3, #0
 80194e4:	e016      	b.n	8019514 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh+0x44>
		this->data_union.data = *(this->data);
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	68db      	ldr	r3, [r3, #12]
 80194ea:	781a      	ldrb	r2, [r3, #0]
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80194f0:	2300      	movs	r3, #0
 80194f2:	73fb      	strb	r3, [r7, #15]
 80194f4:	e00a      	b.n	801950c <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh+0x3c>
			data[i] = this->data_union.data_bytes[i];
 80194f6:	7bfa      	ldrb	r2, [r7, #15]
 80194f8:	7bfb      	ldrb	r3, [r7, #15]
 80194fa:	6839      	ldr	r1, [r7, #0]
 80194fc:	440b      	add	r3, r1
 80194fe:	6879      	ldr	r1, [r7, #4]
 8019500:	440a      	add	r2, r1
 8019502:	7992      	ldrb	r2, [r2, #6]
 8019504:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019506:	7bfb      	ldrb	r3, [r7, #15]
 8019508:	3301      	adds	r3, #1
 801950a:	73fb      	strb	r3, [r7, #15]
 801950c:	7bfb      	ldrb	r3, [r7, #15]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d0f1      	beq.n	80194f6 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh+0x26>
		return sizeof(T);
 8019512:	2301      	movs	r3, #1
	}
 8019514:	4618      	mov	r0, r3
 8019516:	3714      	adds	r7, #20
 8019518:	46bd      	mov	sp, r7
 801951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801951e:	4770      	bx	lr

08019520 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE7getSizeEv>:
	uint8_t getSize() {
 8019520:	b480      	push	{r7}
 8019522:	b083      	sub	sp, #12
 8019524:	af00      	add	r7, sp, #0
 8019526:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 8019528:	2301      	movs	r3, #1
	}
 801952a:	4618      	mov	r0, r3
 801952c:	370c      	adds	r7, #12
 801952e:	46bd      	mov	sp, r7
 8019530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019534:	4770      	bx	lr

08019536 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE7getTypeEv>:
	register_entry_type getType() {
 8019536:	b480      	push	{r7}
 8019538:	b083      	sub	sp, #12
 801953a:	af00      	add	r7, sp, #0
 801953c:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 801953e:	2301      	movs	r3, #1
	}
 8019540:	4618      	mov	r0, r3
 8019542:	370c      	adds	r7, #12
 8019544:	46bd      	mov	sp, r7
 8019546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801954a:	4770      	bx	lr

0801954c <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 801954c:	b480      	push	{r7}
 801954e:	b083      	sub	sp, #12
 8019550:	af00      	add	r7, sp, #0
 8019552:	6078      	str	r0, [r7, #4]
		return this->rw;
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	7a9b      	ldrb	r3, [r3, #10]
	}
 8019558:	4618      	mov	r0, r3
 801955a:	370c      	adds	r7, #12
 801955c:	46bd      	mov	sp, r7
 801955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019562:	4770      	bx	lr

08019564 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPv>:
	void write(void *value) {
 8019564:	b580      	push	{r7, lr}
 8019566:	b084      	sub	sp, #16
 8019568:	af00      	add	r7, sp, #0
 801956a:	6078      	str	r0, [r7, #4]
 801956c:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	7a9b      	ldrb	r3, [r3, #10]
 8019572:	2b00      	cmp	r3, #0
 8019574:	d00d      	beq.n	8019592 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPv+0x2e>
		T *value_typed = (T*) value;
 8019576:	683b      	ldr	r3, [r7, #0]
 8019578:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	68db      	ldr	r3, [r3, #12]
 801957e:	68fa      	ldr	r2, [r7, #12]
 8019580:	f992 2000 	ldrsb.w	r2, [r2]
 8019584:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	3310      	adds	r3, #16
 801958a:	4618      	mov	r0, r3
 801958c:	f7fa fb10 	bl	8013bb0 <_ZN8Callback4callEv>
 8019590:	e000      	b.n	8019594 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPv+0x30>
			return;
 8019592:	bf00      	nop
	}
 8019594:	3710      	adds	r7, #16
 8019596:	46bd      	mov	sp, r7
 8019598:	bd80      	pop	{r7, pc}

0801959a <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 801959a:	b580      	push	{r7, lr}
 801959c:	b084      	sub	sp, #16
 801959e:	af00      	add	r7, sp, #0
 80195a0:	6078      	str	r0, [r7, #4]
 80195a2:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	7a9b      	ldrb	r3, [r3, #10]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d019      	beq.n	80195e0 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh+0x46>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80195ac:	2300      	movs	r3, #0
 80195ae:	73fb      	strb	r3, [r7, #15]
 80195b0:	e00b      	b.n	80195ca <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh+0x30>
			this->data_union.data_bytes[i] = data[i];
 80195b2:	7bfb      	ldrb	r3, [r7, #15]
 80195b4:	683a      	ldr	r2, [r7, #0]
 80195b6:	441a      	add	r2, r3
 80195b8:	7bfb      	ldrb	r3, [r7, #15]
 80195ba:	7811      	ldrb	r1, [r2, #0]
 80195bc:	687a      	ldr	r2, [r7, #4]
 80195be:	4413      	add	r3, r2
 80195c0:	460a      	mov	r2, r1
 80195c2:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80195c4:	7bfb      	ldrb	r3, [r7, #15]
 80195c6:	3301      	adds	r3, #1
 80195c8:	73fb      	strb	r3, [r7, #15]
 80195ca:	7bfb      	ldrb	r3, [r7, #15]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d0f0      	beq.n	80195b2 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh+0x18>
		this->write(this->data_union.data);
 80195d0:	687b      	ldr	r3, [r7, #4]
 80195d2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80195d6:	4619      	mov	r1, r3
 80195d8:	6878      	ldr	r0, [r7, #4]
 80195da:	f000 f94e 	bl	801987a <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeES0_>
 80195de:	e000      	b.n	80195e2 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh+0x48>
			return;
 80195e0:	bf00      	nop
	}
 80195e2:	3710      	adds	r7, #16
 80195e4:	46bd      	mov	sp, r7
 80195e6:	bd80      	pop	{r7, pc}

080195e8 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 80195e8:	b480      	push	{r7}
 80195ea:	b085      	sub	sp, #20
 80195ec:	af00      	add	r7, sp, #0
 80195ee:	6078      	str	r0, [r7, #4]
 80195f0:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	7a9b      	ldrb	r3, [r3, #10]
 80195f6:	2b01      	cmp	r3, #1
 80195f8:	d101      	bne.n	80195fe <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh+0x16>
			return 0;
 80195fa:	2300      	movs	r3, #0
 80195fc:	e017      	b.n	801962e <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh+0x46>
		this->data_union.data = *(this->data);
 80195fe:	687b      	ldr	r3, [r7, #4]
 8019600:	68db      	ldr	r3, [r3, #12]
 8019602:	f993 2000 	ldrsb.w	r2, [r3]
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801960a:	2300      	movs	r3, #0
 801960c:	73fb      	strb	r3, [r7, #15]
 801960e:	e00a      	b.n	8019626 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh+0x3e>
			data[i] = this->data_union.data_bytes[i];
 8019610:	7bfa      	ldrb	r2, [r7, #15]
 8019612:	7bfb      	ldrb	r3, [r7, #15]
 8019614:	6839      	ldr	r1, [r7, #0]
 8019616:	440b      	add	r3, r1
 8019618:	6879      	ldr	r1, [r7, #4]
 801961a:	440a      	add	r2, r1
 801961c:	7992      	ldrb	r2, [r2, #6]
 801961e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019620:	7bfb      	ldrb	r3, [r7, #15]
 8019622:	3301      	adds	r3, #1
 8019624:	73fb      	strb	r3, [r7, #15]
 8019626:	7bfb      	ldrb	r3, [r7, #15]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d0f1      	beq.n	8019610 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh+0x28>
		return sizeof(T);
 801962c:	2301      	movs	r3, #1
	}
 801962e:	4618      	mov	r0, r3
 8019630:	3714      	adds	r7, #20
 8019632:	46bd      	mov	sp, r7
 8019634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019638:	4770      	bx	lr

0801963a <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE7getSizeEv>:
	uint8_t getSize() {
 801963a:	b480      	push	{r7}
 801963c:	b083      	sub	sp, #12
 801963e:	af00      	add	r7, sp, #0
 8019640:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 8019642:	2301      	movs	r3, #1
	}
 8019644:	4618      	mov	r0, r3
 8019646:	370c      	adds	r7, #12
 8019648:	46bd      	mov	sp, r7
 801964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801964e:	4770      	bx	lr

08019650 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE7getTypeEv>:
	register_entry_type getType() {
 8019650:	b480      	push	{r7}
 8019652:	b083      	sub	sp, #12
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 8019658:	2301      	movs	r3, #1
	}
 801965a:	4618      	mov	r0, r3
 801965c:	370c      	adds	r7, #12
 801965e:	46bd      	mov	sp, r7
 8019660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019664:	4770      	bx	lr

08019666 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8019666:	b480      	push	{r7}
 8019668:	b083      	sub	sp, #12
 801966a:	af00      	add	r7, sp, #0
 801966c:	6078      	str	r0, [r7, #4]
		return this->rw;
 801966e:	687b      	ldr	r3, [r7, #4]
 8019670:	7a9b      	ldrb	r3, [r3, #10]
	}
 8019672:	4618      	mov	r0, r3
 8019674:	370c      	adds	r7, #12
 8019676:	46bd      	mov	sp, r7
 8019678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801967c:	4770      	bx	lr

0801967e <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7getSizeEv>:
	uint8_t getSize() {
 801967e:	b480      	push	{r7}
 8019680:	b083      	sub	sp, #12
 8019682:	af00      	add	r7, sp, #0
 8019684:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 8019686:	2308      	movs	r3, #8
	}
 8019688:	4618      	mov	r0, r3
 801968a:	370c      	adds	r7, #12
 801968c:	46bd      	mov	sp, r7
 801968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019692:	4770      	bx	lr

08019694 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE12getInputSizeEv>:
	uint8_t getInputSize() {
 8019694:	b480      	push	{r7}
 8019696:	b083      	sub	sp, #12
 8019698:	af00      	add	r7, sp, #0
 801969a:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 801969c:	2308      	movs	r3, #8
	}
 801969e:	4618      	mov	r0, r3
 80196a0:	370c      	adds	r7, #12
 80196a2:	46bd      	mov	sp, r7
 80196a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a8:	4770      	bx	lr

080196aa <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 80196aa:	b480      	push	{r7}
 80196ac:	b083      	sub	sp, #12
 80196ae:	af00      	add	r7, sp, #0
 80196b0:	6078      	str	r0, [r7, #4]
		return 0;
 80196b2:	2300      	movs	r3, #0
	}
 80196b4:	4618      	mov	r0, r3
 80196b6:	370c      	adds	r7, #12
 80196b8:	46bd      	mov	sp, r7
 80196ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196be:	4770      	bx	lr

080196c0 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeEPhS2_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 80196c0:	b580      	push	{r7, lr}
 80196c2:	b086      	sub	sp, #24
 80196c4:	af00      	add	r7, sp, #0
 80196c6:	60f8      	str	r0, [r7, #12]
 80196c8:	60b9      	str	r1, [r7, #8]
 80196ca:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 80196cc:	2300      	movs	r3, #0
 80196ce:	75fb      	strb	r3, [r7, #23]
 80196d0:	e00b      	b.n	80196ea <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 80196d2:	7dfb      	ldrb	r3, [r7, #23]
 80196d4:	68ba      	ldr	r2, [r7, #8]
 80196d6:	441a      	add	r2, r3
 80196d8:	7dfb      	ldrb	r3, [r7, #23]
 80196da:	7811      	ldrb	r1, [r2, #0]
 80196dc:	68fa      	ldr	r2, [r7, #12]
 80196de:	4413      	add	r3, r2
 80196e0:	460a      	mov	r2, r1
 80196e2:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 80196e4:	7dfb      	ldrb	r3, [r7, #23]
 80196e6:	3301      	adds	r3, #1
 80196e8:	75fb      	strb	r3, [r7, #23]
 80196ea:	7dfb      	ldrb	r3, [r7, #23]
 80196ec:	2b07      	cmp	r3, #7
 80196ee:	d9f0      	bls.n	80196d2 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeEPhS2_+0x12>
		this->execute(this->input_data_union.data);
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80196f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80196fa:	eeb0 0a47 	vmov.f32	s0, s14
 80196fe:	eef0 0a67 	vmov.f32	s1, s15
 8019702:	68f8      	ldr	r0, [r7, #12]
 8019704:	f000 f8d1 	bl	80198aa <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeES0_>
		return 0;
 8019708:	2300      	movs	r3, #0
	}
 801970a:	4618      	mov	r0, r3
 801970c:	3718      	adds	r7, #24
 801970e:	46bd      	mov	sp, r7
 8019710:	bd80      	pop	{r7, pc}

08019712 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7getTypeEv>:
	register_entry_type getType() {
 8019712:	b480      	push	{r7}
 8019714:	b083      	sub	sp, #12
 8019716:	af00      	add	r7, sp, #0
 8019718:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 801971a:	2302      	movs	r3, #2
	}
 801971c:	4618      	mov	r0, r3
 801971e:	370c      	adds	r7, #12
 8019720:	46bd      	mov	sp, r7
 8019722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019726:	4770      	bx	lr

08019728 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8019728:	b480      	push	{r7}
 801972a:	b083      	sub	sp, #12
 801972c:	af00      	add	r7, sp, #0
 801972e:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 8019730:	2302      	movs	r3, #2
	}
 8019732:	4618      	mov	r0, r3
 8019734:	370c      	adds	r7, #12
 8019736:	46bd      	mov	sp, r7
 8019738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801973c:	4770      	bx	lr

0801973e <_ZN27core_utils_RegisterFunctionIvfE7executeEf>:
	void execute(input_t argument) {
 801973e:	b580      	push	{r7, lr}
 8019740:	b082      	sub	sp, #8
 8019742:	af00      	add	r7, sp, #0
 8019744:	6078      	str	r0, [r7, #4]
 8019746:	ed87 0a00 	vstr	s0, [r7]
		if (this->function.registered) {
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	7d1b      	ldrb	r3, [r3, #20]
 801974e:	2b00      	cmp	r3, #0
 8019750:	d006      	beq.n	8019760 <_ZN27core_utils_RegisterFunctionIvfE7executeEf+0x22>
			this->function.call(argument);
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	3310      	adds	r3, #16
 8019756:	ed97 0a00 	vldr	s0, [r7]
 801975a:	4618      	mov	r0, r3
 801975c:	f000 f8c6 	bl	80198ec <_ZN19core_utils_CallbackIvfE4callEf>
	}
 8019760:	bf00      	nop
 8019762:	3708      	adds	r7, #8
 8019764:	46bd      	mov	sp, r7
 8019766:	bd80      	pop	{r7, pc}

08019768 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeES0_>:
	void write(T value) {
 8019768:	b084      	sub	sp, #16
 801976a:	b5b0      	push	{r4, r5, r7, lr}
 801976c:	b082      	sub	sp, #8
 801976e:	af00      	add	r7, sp, #0
 8019770:	6078      	str	r0, [r7, #4]
 8019772:	f107 001c 	add.w	r0, r7, #28
 8019776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		if (this->rw == REGISTER_ENTRY_READ) {
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8019780:	2b00      	cmp	r3, #0
 8019782:	d012      	beq.n	80197aa <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeES0_+0x42>
		*(this->data) = value;
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019788:	461d      	mov	r5, r3
 801978a:	f107 041c 	add.w	r4, r7, #28
 801978e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019790:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019796:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801979a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		this->write_function.call();
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	3344      	adds	r3, #68	; 0x44
 80197a2:	4618      	mov	r0, r3
 80197a4:	f7fa fa04 	bl	8013bb0 <_ZN8Callback4callEv>
 80197a8:	e000      	b.n	80197ac <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeES0_+0x44>
			return;
 80197aa:	bf00      	nop
	}
 80197ac:	3708      	adds	r7, #8
 80197ae:	46bd      	mov	sp, r7
 80197b0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80197b4:	b004      	add	sp, #16
 80197b6:	4770      	bx	lr

080197b8 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPf>:
	output_t execute(input_t argument) {
 80197b8:	b580      	push	{r7, lr}
 80197ba:	b082      	sub	sp, #8
 80197bc:	af00      	add	r7, sp, #0
 80197be:	6078      	str	r0, [r7, #4]
 80197c0:	6039      	str	r1, [r7, #0]
		if (this->function.registered) {
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80197c8:	2b00      	cmp	r3, #0
 80197ca:	d007      	beq.n	80197dc <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPf+0x24>
			return this->function.call(argument);
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	332c      	adds	r3, #44	; 0x2c
 80197d0:	6839      	ldr	r1, [r7, #0]
 80197d2:	4618      	mov	r0, r3
 80197d4:	f000 f89b 	bl	801990e <_ZN19core_utils_CallbackIhA8_fE4callEPf>
 80197d8:	4603      	mov	r3, r0
 80197da:	e000      	b.n	80197de <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPf+0x26>
			return (output_t) 0;
 80197dc:	2300      	movs	r3, #0
	}
 80197de:	4618      	mov	r0, r3
 80197e0:	3708      	adds	r7, #8
 80197e2:	46bd      	mov	sp, r7
 80197e4:	bd80      	pop	{r7, pc}

080197e6 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeES0_>:
	output_t execute(input_t argument) {
 80197e6:	b580      	push	{r7, lr}
 80197e8:	b084      	sub	sp, #16
 80197ea:	af00      	add	r7, sp, #0
 80197ec:	60f8      	str	r0, [r7, #12]
 80197ee:	1d3b      	adds	r3, r7, #4
 80197f0:	e883 0006 	stmia.w	r3, {r1, r2}
		if (this->function.registered) {
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	7d1b      	ldrb	r3, [r3, #20]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d009      	beq.n	8019810 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeES0_+0x2a>
			return this->function.call(argument);
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	f103 0010 	add.w	r0, r3, #16
 8019802:	1d3b      	adds	r3, r7, #4
 8019804:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019808:	f000 f891 	bl	801992e <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tE4callES0_>
 801980c:	4603      	mov	r3, r0
 801980e:	e000      	b.n	8019812 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeES0_+0x2c>
			return (output_t) 0;
 8019810:	2300      	movs	r3, #0
	}
 8019812:	4618      	mov	r0, r3
 8019814:	3710      	adds	r7, #16
 8019816:	46bd      	mov	sp, r7
 8019818:	bd80      	pop	{r7, pc}

0801981a <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeES0_>:
	output_t execute(input_t argument) {
 801981a:	b580      	push	{r7, lr}
 801981c:	b082      	sub	sp, #8
 801981e:	af00      	add	r7, sp, #0
 8019820:	6078      	str	r0, [r7, #4]
 8019822:	460b      	mov	r3, r1
 8019824:	70fb      	strb	r3, [r7, #3]
		if (this->function.registered) {
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	7c1b      	ldrb	r3, [r3, #16]
 801982a:	2b00      	cmp	r3, #0
 801982c:	d008      	beq.n	8019840 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeES0_+0x26>
			return this->function.call(argument);
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	330c      	adds	r3, #12
 8019832:	78fa      	ldrb	r2, [r7, #3]
 8019834:	4611      	mov	r1, r2
 8019836:	4618      	mov	r0, r3
 8019838:	f000 f88d 	bl	8019956 <_ZN19core_utils_CallbackIh20twipr_control_mode_tE4callES0_>
 801983c:	4603      	mov	r3, r0
 801983e:	e000      	b.n	8019842 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeES0_+0x28>
			return (output_t) 0;
 8019840:	2300      	movs	r3, #0
	}
 8019842:	4618      	mov	r0, r3
 8019844:	3708      	adds	r7, #8
 8019846:	46bd      	mov	sp, r7
 8019848:	bd80      	pop	{r7, pc}

0801984a <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeES0_>:
	void write(T value) {
 801984a:	b580      	push	{r7, lr}
 801984c:	b082      	sub	sp, #8
 801984e:	af00      	add	r7, sp, #0
 8019850:	6078      	str	r0, [r7, #4]
 8019852:	460b      	mov	r3, r1
 8019854:	70fb      	strb	r3, [r7, #3]
		if (this->rw == REGISTER_ENTRY_READ) {
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	7a9b      	ldrb	r3, [r3, #10]
 801985a:	2b00      	cmp	r3, #0
 801985c:	d009      	beq.n	8019872 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeES0_+0x28>
		*(this->data) = value;
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	68db      	ldr	r3, [r3, #12]
 8019862:	78fa      	ldrb	r2, [r7, #3]
 8019864:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	3310      	adds	r3, #16
 801986a:	4618      	mov	r0, r3
 801986c:	f7fa f9a0 	bl	8013bb0 <_ZN8Callback4callEv>
 8019870:	e000      	b.n	8019874 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeES0_+0x2a>
			return;
 8019872:	bf00      	nop
	}
 8019874:	3708      	adds	r7, #8
 8019876:	46bd      	mov	sp, r7
 8019878:	bd80      	pop	{r7, pc}

0801987a <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeES0_>:
	void write(T value) {
 801987a:	b580      	push	{r7, lr}
 801987c:	b082      	sub	sp, #8
 801987e:	af00      	add	r7, sp, #0
 8019880:	6078      	str	r0, [r7, #4]
 8019882:	460b      	mov	r3, r1
 8019884:	70fb      	strb	r3, [r7, #3]
		if (this->rw == REGISTER_ENTRY_READ) {
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	7a9b      	ldrb	r3, [r3, #10]
 801988a:	2b00      	cmp	r3, #0
 801988c:	d009      	beq.n	80198a2 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeES0_+0x28>
		*(this->data) = value;
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	68db      	ldr	r3, [r3, #12]
 8019892:	78fa      	ldrb	r2, [r7, #3]
 8019894:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	3310      	adds	r3, #16
 801989a:	4618      	mov	r0, r3
 801989c:	f7fa f988 	bl	8013bb0 <_ZN8Callback4callEv>
 80198a0:	e000      	b.n	80198a4 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeES0_+0x2a>
			return;
 80198a2:	bf00      	nop
	}
 80198a4:	3708      	adds	r7, #8
 80198a6:	46bd      	mov	sp, r7
 80198a8:	bd80      	pop	{r7, pc}

080198aa <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeES0_>:
	void execute(input_t argument) {
 80198aa:	b580      	push	{r7, lr}
 80198ac:	b084      	sub	sp, #16
 80198ae:	af00      	add	r7, sp, #0
 80198b0:	60f8      	str	r0, [r7, #12]
 80198b2:	eeb0 7a40 	vmov.f32	s14, s0
 80198b6:	eef0 7a60 	vmov.f32	s15, s1
 80198ba:	ed87 7a01 	vstr	s14, [r7, #4]
 80198be:	edc7 7a02 	vstr	s15, [r7, #8]
		if (this->function.registered) {
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	7e1b      	ldrb	r3, [r3, #24]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d00c      	beq.n	80198e4 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeES0_+0x3a>
			this->function.call(argument);
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	3314      	adds	r3, #20
 80198ce:	ed97 7a01 	vldr	s14, [r7, #4]
 80198d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80198d6:	eeb0 0a47 	vmov.f32	s0, s14
 80198da:	eef0 0a67 	vmov.f32	s1, s15
 80198de:	4618      	mov	r0, r3
 80198e0:	f000 f84b 	bl	801997a <_ZN19core_utils_CallbackIv21twipr_control_input_tE4callES0_>
	}
 80198e4:	bf00      	nop
 80198e6:	3710      	adds	r7, #16
 80198e8:	46bd      	mov	sp, r7
 80198ea:	bd80      	pop	{r7, pc}

080198ec <_ZN19core_utils_CallbackIvfE4callEf>:
	R call(A argument){
 80198ec:	b580      	push	{r7, lr}
 80198ee:	b082      	sub	sp, #8
 80198f0:	af00      	add	r7, sp, #0
 80198f2:	6078      	str	r0, [r7, #4]
 80198f4:	ed87 0a00 	vstr	s0, [r7]
		return this->_fp(argument);
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	3308      	adds	r3, #8
 80198fc:	ed97 0a00 	vldr	s0, [r7]
 8019900:	4618      	mov	r0, r3
 8019902:	f000 f857 	bl	80199b4 <_ZN26core_utils_FunctionPointerIvfEclEf>
 8019906:	bf00      	nop
	}
 8019908:	3708      	adds	r7, #8
 801990a:	46bd      	mov	sp, r7
 801990c:	bd80      	pop	{r7, pc}

0801990e <_ZN19core_utils_CallbackIhA8_fE4callEPf>:
	R call(A argument){
 801990e:	b580      	push	{r7, lr}
 8019910:	b082      	sub	sp, #8
 8019912:	af00      	add	r7, sp, #0
 8019914:	6078      	str	r0, [r7, #4]
 8019916:	6039      	str	r1, [r7, #0]
		return this->_fp(argument);
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	3308      	adds	r3, #8
 801991c:	6839      	ldr	r1, [r7, #0]
 801991e:	4618      	mov	r0, r3
 8019920:	f000 f857 	bl	80199d2 <_ZN26core_utils_FunctionPointerIhA8_fEclEPf>
 8019924:	4603      	mov	r3, r0
	}
 8019926:	4618      	mov	r0, r3
 8019928:	3708      	adds	r7, #8
 801992a:	46bd      	mov	sp, r7
 801992c:	bd80      	pop	{r7, pc}

0801992e <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tE4callES0_>:
	R call(A argument){
 801992e:	b580      	push	{r7, lr}
 8019930:	b084      	sub	sp, #16
 8019932:	af00      	add	r7, sp, #0
 8019934:	60f8      	str	r0, [r7, #12]
 8019936:	1d3b      	adds	r3, r7, #4
 8019938:	e883 0006 	stmia.w	r3, {r1, r2}
		return this->_fp(argument);
 801993c:	68fb      	ldr	r3, [r7, #12]
 801993e:	f103 0008 	add.w	r0, r3, #8
 8019942:	1d3b      	adds	r3, r7, #4
 8019944:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019948:	f000 f851 	bl	80199ee <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEclES0_>
 801994c:	4603      	mov	r3, r0
	}
 801994e:	4618      	mov	r0, r3
 8019950:	3710      	adds	r7, #16
 8019952:	46bd      	mov	sp, r7
 8019954:	bd80      	pop	{r7, pc}

08019956 <_ZN19core_utils_CallbackIh20twipr_control_mode_tE4callES0_>:
	R call(A argument){
 8019956:	b580      	push	{r7, lr}
 8019958:	b082      	sub	sp, #8
 801995a:	af00      	add	r7, sp, #0
 801995c:	6078      	str	r0, [r7, #4]
 801995e:	460b      	mov	r3, r1
 8019960:	70fb      	strb	r3, [r7, #3]
		return this->_fp(argument);
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	3308      	adds	r3, #8
 8019966:	78fa      	ldrb	r2, [r7, #3]
 8019968:	4611      	mov	r1, r2
 801996a:	4618      	mov	r0, r3
 801996c:	f000 f851 	bl	8019a12 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEclES0_>
 8019970:	4603      	mov	r3, r0
	}
 8019972:	4618      	mov	r0, r3
 8019974:	3708      	adds	r7, #8
 8019976:	46bd      	mov	sp, r7
 8019978:	bd80      	pop	{r7, pc}

0801997a <_ZN19core_utils_CallbackIv21twipr_control_input_tE4callES0_>:
	R call(A argument){
 801997a:	b580      	push	{r7, lr}
 801997c:	b084      	sub	sp, #16
 801997e:	af00      	add	r7, sp, #0
 8019980:	60f8      	str	r0, [r7, #12]
 8019982:	eeb0 7a40 	vmov.f32	s14, s0
 8019986:	eef0 7a60 	vmov.f32	s15, s1
 801998a:	ed87 7a01 	vstr	s14, [r7, #4]
 801998e:	edc7 7a02 	vstr	s15, [r7, #8]
		return this->_fp(argument);
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	3308      	adds	r3, #8
 8019996:	ed97 7a01 	vldr	s14, [r7, #4]
 801999a:	edd7 7a02 	vldr	s15, [r7, #8]
 801999e:	eeb0 0a47 	vmov.f32	s0, s14
 80199a2:	eef0 0a67 	vmov.f32	s1, s15
 80199a6:	4618      	mov	r0, r3
 80199a8:	f000 f843 	bl	8019a32 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEclES0_>
 80199ac:	bf00      	nop
	}
 80199ae:	3710      	adds	r7, #16
 80199b0:	46bd      	mov	sp, r7
 80199b2:	bd80      	pop	{r7, pc}

080199b4 <_ZN26core_utils_FunctionPointerIvfEclEf>:
    R operator ()(A1 a) {
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b082      	sub	sp, #8
 80199b8:	af00      	add	r7, sp, #0
 80199ba:	6078      	str	r0, [r7, #4]
 80199bc:	ed87 0a00 	vstr	s0, [r7]
        return call(a);
 80199c0:	ed97 0a00 	vldr	s0, [r7]
 80199c4:	6878      	ldr	r0, [r7, #4]
 80199c6:	f000 f84f 	bl	8019a68 <_ZN26core_utils_FunctionPointerIvfE4callEf>
 80199ca:	bf00      	nop
    }
 80199cc:	3708      	adds	r7, #8
 80199ce:	46bd      	mov	sp, r7
 80199d0:	bd80      	pop	{r7, pc}

080199d2 <_ZN26core_utils_FunctionPointerIhA8_fEclEPf>:
    R operator ()(A1 a) {
 80199d2:	b580      	push	{r7, lr}
 80199d4:	b082      	sub	sp, #8
 80199d6:	af00      	add	r7, sp, #0
 80199d8:	6078      	str	r0, [r7, #4]
 80199da:	6039      	str	r1, [r7, #0]
        return call(a);
 80199dc:	6839      	ldr	r1, [r7, #0]
 80199de:	6878      	ldr	r0, [r7, #4]
 80199e0:	f000 f86d 	bl	8019abe <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf>
 80199e4:	4603      	mov	r3, r0
    }
 80199e6:	4618      	mov	r0, r3
 80199e8:	3708      	adds	r7, #8
 80199ea:	46bd      	mov	sp, r7
 80199ec:	bd80      	pop	{r7, pc}

080199ee <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEclES0_>:
    R operator ()(A1 a) {
 80199ee:	b580      	push	{r7, lr}
 80199f0:	b084      	sub	sp, #16
 80199f2:	af00      	add	r7, sp, #0
 80199f4:	60f8      	str	r0, [r7, #12]
 80199f6:	1d3b      	adds	r3, r7, #4
 80199f8:	e883 0006 	stmia.w	r3, {r1, r2}
        return call(a);
 80199fc:	1d3b      	adds	r3, r7, #4
 80199fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019a02:	68f8      	ldr	r0, [r7, #12]
 8019a04:	f000 f885 	bl	8019b12 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_>
 8019a08:	4603      	mov	r3, r0
    }
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	3710      	adds	r7, #16
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	bd80      	pop	{r7, pc}

08019a12 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEclES0_>:
    R operator ()(A1 a) {
 8019a12:	b580      	push	{r7, lr}
 8019a14:	b082      	sub	sp, #8
 8019a16:	af00      	add	r7, sp, #0
 8019a18:	6078      	str	r0, [r7, #4]
 8019a1a:	460b      	mov	r3, r1
 8019a1c:	70fb      	strb	r3, [r7, #3]
        return call(a);
 8019a1e:	78fb      	ldrb	r3, [r7, #3]
 8019a20:	4619      	mov	r1, r3
 8019a22:	6878      	ldr	r0, [r7, #4]
 8019a24:	f000 f8a4 	bl	8019b70 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_>
 8019a28:	4603      	mov	r3, r0
    }
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	3708      	adds	r7, #8
 8019a2e:	46bd      	mov	sp, r7
 8019a30:	bd80      	pop	{r7, pc}

08019a32 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEclES0_>:
    R operator ()(A1 a) {
 8019a32:	b580      	push	{r7, lr}
 8019a34:	b084      	sub	sp, #16
 8019a36:	af00      	add	r7, sp, #0
 8019a38:	60f8      	str	r0, [r7, #12]
 8019a3a:	eeb0 7a40 	vmov.f32	s14, s0
 8019a3e:	eef0 7a60 	vmov.f32	s15, s1
 8019a42:	ed87 7a01 	vstr	s14, [r7, #4]
 8019a46:	edc7 7a02 	vstr	s15, [r7, #8]
        return call(a);
 8019a4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8019a4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8019a52:	eeb0 0a47 	vmov.f32	s0, s14
 8019a56:	eef0 0a67 	vmov.f32	s1, s15
 8019a5a:	68f8      	ldr	r0, [r7, #12]
 8019a5c:	f000 f8b4 	bl	8019bc8 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_>
 8019a60:	bf00      	nop
    }
 8019a62:	3710      	adds	r7, #16
 8019a64:	46bd      	mov	sp, r7
 8019a66:	bd80      	pop	{r7, pc}

08019a68 <_ZN26core_utils_FunctionPointerIvfE4callEf>:
    R call(A1 a) {
 8019a68:	b580      	push	{r7, lr}
 8019a6a:	b082      	sub	sp, #8
 8019a6c:	af00      	add	r7, sp, #0
 8019a6e:	6078      	str	r0, [r7, #4]
 8019a70:	ed87 0a00 	vstr	s0, [r7]
        if (_membercaller == 0 && _p.function) {
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	695b      	ldr	r3, [r3, #20]
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d109      	bne.n	8019a90 <_ZN26core_utils_FunctionPointerIvfE4callEf+0x28>
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d005      	beq.n	8019a90 <_ZN26core_utils_FunctionPointerIvfE4callEf+0x28>
           return _p.function(a);
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	ed97 0a00 	vldr	s0, [r7]
 8019a8c:	4798      	blx	r3
 8019a8e:	e013      	b.n	8019ab8 <_ZN26core_utils_FunctionPointerIvfE4callEf+0x50>
        } else if (_membercaller && _p.object) {
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	695b      	ldr	r3, [r3, #20]
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d00e      	beq.n	8019ab6 <_ZN26core_utils_FunctionPointerIvfE4callEf+0x4e>
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	2b00      	cmp	r3, #0
 8019a9e:	d00a      	beq.n	8019ab6 <_ZN26core_utils_FunctionPointerIvfE4callEf+0x4e>
           return _membercaller(_p.object, _member, a);
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	695b      	ldr	r3, [r3, #20]
 8019aa4:	687a      	ldr	r2, [r7, #4]
 8019aa6:	6810      	ldr	r0, [r2, #0]
 8019aa8:	687a      	ldr	r2, [r7, #4]
 8019aaa:	3204      	adds	r2, #4
 8019aac:	ed97 0a00 	vldr	s0, [r7]
 8019ab0:	4611      	mov	r1, r2
 8019ab2:	4798      	blx	r3
 8019ab4:	e000      	b.n	8019ab8 <_ZN26core_utils_FunctionPointerIvfE4callEf+0x50>
        return (R)0;
 8019ab6:	bf00      	nop
    }
 8019ab8:	3708      	adds	r7, #8
 8019aba:	46bd      	mov	sp, r7
 8019abc:	bd80      	pop	{r7, pc}

08019abe <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf>:
    R call(A1 a) {
 8019abe:	b580      	push	{r7, lr}
 8019ac0:	b082      	sub	sp, #8
 8019ac2:	af00      	add	r7, sp, #0
 8019ac4:	6078      	str	r0, [r7, #4]
 8019ac6:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	695b      	ldr	r3, [r3, #20]
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d109      	bne.n	8019ae4 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x26>
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	681b      	ldr	r3, [r3, #0]
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d005      	beq.n	8019ae4 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x26>
           return _p.function(a);
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	6838      	ldr	r0, [r7, #0]
 8019ade:	4798      	blx	r3
 8019ae0:	4603      	mov	r3, r0
 8019ae2:	e012      	b.n	8019b0a <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4c>
        } else if (_membercaller && _p.object) {
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	695b      	ldr	r3, [r3, #20]
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d00d      	beq.n	8019b08 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4a>
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d009      	beq.n	8019b08 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4a>
           return _membercaller(_p.object, _member, a);
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	695b      	ldr	r3, [r3, #20]
 8019af8:	687a      	ldr	r2, [r7, #4]
 8019afa:	6810      	ldr	r0, [r2, #0]
 8019afc:	687a      	ldr	r2, [r7, #4]
 8019afe:	1d11      	adds	r1, r2, #4
 8019b00:	683a      	ldr	r2, [r7, #0]
 8019b02:	4798      	blx	r3
 8019b04:	4603      	mov	r3, r0
 8019b06:	e000      	b.n	8019b0a <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4c>
        return (R)0;
 8019b08:	2300      	movs	r3, #0
    }
 8019b0a:	4618      	mov	r0, r3
 8019b0c:	3708      	adds	r7, #8
 8019b0e:	46bd      	mov	sp, r7
 8019b10:	bd80      	pop	{r7, pc}

08019b12 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_>:
    R call(A1 a) {
 8019b12:	b590      	push	{r4, r7, lr}
 8019b14:	b085      	sub	sp, #20
 8019b16:	af00      	add	r7, sp, #0
 8019b18:	60f8      	str	r0, [r7, #12]
 8019b1a:	1d3b      	adds	r3, r7, #4
 8019b1c:	e883 0006 	stmia.w	r3, {r1, r2}
        if (_membercaller == 0 && _p.function) {
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	695b      	ldr	r3, [r3, #20]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d10b      	bne.n	8019b40 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x2e>
 8019b28:	68fb      	ldr	r3, [r7, #12]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d007      	beq.n	8019b40 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x2e>
           return _p.function(a);
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	1d3a      	adds	r2, r7, #4
 8019b36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019b3a:	4798      	blx	r3
 8019b3c:	4603      	mov	r3, r0
 8019b3e:	e013      	b.n	8019b68 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x56>
        } else if (_membercaller && _p.object) {
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	695b      	ldr	r3, [r3, #20]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	d00e      	beq.n	8019b66 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x54>
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d00a      	beq.n	8019b66 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x54>
           return _membercaller(_p.object, _member, a);
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	695c      	ldr	r4, [r3, #20]
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	6818      	ldr	r0, [r3, #0]
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	1d19      	adds	r1, r3, #4
 8019b5c:	1d3b      	adds	r3, r7, #4
 8019b5e:	cb0c      	ldmia	r3, {r2, r3}
 8019b60:	47a0      	blx	r4
 8019b62:	4603      	mov	r3, r0
 8019b64:	e000      	b.n	8019b68 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x56>
        return (R)0;
 8019b66:	2300      	movs	r3, #0
    }
 8019b68:	4618      	mov	r0, r3
 8019b6a:	3714      	adds	r7, #20
 8019b6c:	46bd      	mov	sp, r7
 8019b6e:	bd90      	pop	{r4, r7, pc}

08019b70 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_>:
    R call(A1 a) {
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b082      	sub	sp, #8
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
 8019b78:	460b      	mov	r3, r1
 8019b7a:	70fb      	strb	r3, [r7, #3]
        if (_membercaller == 0 && _p.function) {
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	695b      	ldr	r3, [r3, #20]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d10a      	bne.n	8019b9a <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x2a>
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	d006      	beq.n	8019b9a <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x2a>
           return _p.function(a);
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	78fa      	ldrb	r2, [r7, #3]
 8019b92:	4610      	mov	r0, r2
 8019b94:	4798      	blx	r3
 8019b96:	4603      	mov	r3, r0
 8019b98:	e012      	b.n	8019bc0 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x50>
        } else if (_membercaller && _p.object) {
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	695b      	ldr	r3, [r3, #20]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d00d      	beq.n	8019bbe <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x4e>
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d009      	beq.n	8019bbe <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x4e>
           return _membercaller(_p.object, _member, a);
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	695b      	ldr	r3, [r3, #20]
 8019bae:	687a      	ldr	r2, [r7, #4]
 8019bb0:	6810      	ldr	r0, [r2, #0]
 8019bb2:	687a      	ldr	r2, [r7, #4]
 8019bb4:	1d11      	adds	r1, r2, #4
 8019bb6:	78fa      	ldrb	r2, [r7, #3]
 8019bb8:	4798      	blx	r3
 8019bba:	4603      	mov	r3, r0
 8019bbc:	e000      	b.n	8019bc0 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x50>
        return (R)0;
 8019bbe:	2300      	movs	r3, #0
    }
 8019bc0:	4618      	mov	r0, r3
 8019bc2:	3708      	adds	r7, #8
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	bd80      	pop	{r7, pc}

08019bc8 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_>:
    R call(A1 a) {
 8019bc8:	b580      	push	{r7, lr}
 8019bca:	b084      	sub	sp, #16
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	60f8      	str	r0, [r7, #12]
 8019bd0:	eeb0 7a40 	vmov.f32	s14, s0
 8019bd4:	eef0 7a60 	vmov.f32	s15, s1
 8019bd8:	ed87 7a01 	vstr	s14, [r7, #4]
 8019bdc:	edc7 7a02 	vstr	s15, [r7, #8]
        if (_membercaller == 0 && _p.function) {
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	695b      	ldr	r3, [r3, #20]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d10f      	bne.n	8019c08 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x40>
 8019be8:	68fb      	ldr	r3, [r7, #12]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d00b      	beq.n	8019c08 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x40>
           return _p.function(a);
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	ed97 7a01 	vldr	s14, [r7, #4]
 8019bf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8019bfc:	eeb0 0a47 	vmov.f32	s0, s14
 8019c00:	eef0 0a67 	vmov.f32	s1, s15
 8019c04:	4798      	blx	r3
 8019c06:	e019      	b.n	8019c3c <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x74>
        } else if (_membercaller && _p.object) {
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	695b      	ldr	r3, [r3, #20]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d014      	beq.n	8019c3a <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x72>
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d010      	beq.n	8019c3a <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x72>
           return _membercaller(_p.object, _member, a);
 8019c18:	68fb      	ldr	r3, [r7, #12]
 8019c1a:	695b      	ldr	r3, [r3, #20]
 8019c1c:	68fa      	ldr	r2, [r7, #12]
 8019c1e:	6810      	ldr	r0, [r2, #0]
 8019c20:	68fa      	ldr	r2, [r7, #12]
 8019c22:	3204      	adds	r2, #4
 8019c24:	ed97 7a01 	vldr	s14, [r7, #4]
 8019c28:	edd7 7a02 	vldr	s15, [r7, #8]
 8019c2c:	eeb0 0a47 	vmov.f32	s0, s14
 8019c30:	eef0 0a67 	vmov.f32	s1, s15
 8019c34:	4611      	mov	r1, r2
 8019c36:	4798      	blx	r3
 8019c38:	e000      	b.n	8019c3c <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x74>
        return (R)0;
 8019c3a:	bf00      	nop
    }
 8019c3c:	3710      	adds	r7, #16
 8019c3e:	46bd      	mov	sp, r7
 8019c40:	bd80      	pop	{r7, pc}

08019c42 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8019c42:	b480      	push	{r7}
 8019c44:	b083      	sub	sp, #12
 8019c46:	af00      	add	r7, sp, #0
 8019c48:	ed87 0a01 	vstr	s0, [r7, #4]
 8019c4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8019c50:	eef0 7ae7 	vabs.f32	s15, s15
 8019c54:	eeb0 0a67 	vmov.f32	s0, s15
 8019c58:	370c      	adds	r7, #12
 8019c5a:	46bd      	mov	sp, r7
 8019c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c60:	4770      	bx	lr

08019c62 <_Z23twipr_drive_torque_taskPv>:

osSemaphoreId_t torque_semaphore;

twipr_drive_input_t input_global;

void twipr_drive_torque_task(void *argument) {
 8019c62:	b580      	push	{r7, lr}
 8019c64:	b084      	sub	sp, #16
 8019c66:	af00      	add	r7, sp, #0
 8019c68:	6078      	str	r0, [r7, #4]
	TWIPR_Drive *drive = (TWIPR_Drive*) argument;
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	60fb      	str	r3, [r7, #12]
	drive->torqueTaskFunction();
 8019c6e:	68f8      	ldr	r0, [r7, #12]
 8019c70:	f000 f804 	bl	8019c7c <_ZN11TWIPR_Drive18torqueTaskFunctionEv>
}
 8019c74:	bf00      	nop
 8019c76:	3710      	adds	r7, #16
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	bd80      	pop	{r7, pc}

08019c7c <_ZN11TWIPR_Drive18torqueTaskFunctionEv>:
void twipr_drive_voltage_task(void *argument) {
	TWIPR_Drive *drive = (TWIPR_Drive*) argument;
	drive->voltageTaskFunction();
}
/* ================================================= */
void TWIPR_Drive::torqueTaskFunction() {
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	b08a      	sub	sp, #40	; 0x28
 8019c80:	af00      	add	r7, sp, #0
 8019c82:	6078      	str	r0, [r7, #4]
	twipr_drive_input_t drive_input;
	twipr_drive_speed_t speed;
	float voltage = 0;
 8019c84:	f04f 0300 	mov.w	r3, #0
 8019c88:	61fb      	str	r3, [r7, #28]
	drive_input.torque_left = 0;
 8019c8a:	f04f 0300 	mov.w	r3, #0
 8019c8e:	613b      	str	r3, [r7, #16]
	drive_input.torque_right = 0;
 8019c90:	f04f 0300 	mov.w	r3, #0
 8019c94:	617b      	str	r3, [r7, #20]
	uint32_t tick = 0;
 8019c96:	2300      	movs	r3, #0
 8019c98:	61bb      	str	r3, [r7, #24]
	uint32_t last_voltage_tick = 0;
 8019c9a:	2300      	movs	r3, #0
 8019c9c:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t mode = 0;
 8019c9e:	2300      	movs	r3, #0
 8019ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	while (true) {
		tick = osKernelGetTickCount();
 8019ca4:	f7f5 fea2 	bl	800f9ec <osKernelGetTickCount>
 8019ca8:	61b8      	str	r0, [r7, #24]
		if ((tick - last_voltage_tick) > 1000) {
 8019caa:	69ba      	ldr	r2, [r7, #24]
 8019cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cae:	1ad3      	subs	r3, r2, r3
 8019cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8019cb4:	d917      	bls.n	8019ce6 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x6a>
			last_voltage_tick = tick;
 8019cb6:	69bb      	ldr	r3, [r7, #24]
 8019cb8:	627b      	str	r3, [r7, #36]	; 0x24
			voltage = this->_readVoltage();
 8019cba:	6878      	ldr	r0, [r7, #4]
 8019cbc:	f000 fa22 	bl	801a104 <_ZN11TWIPR_Drive12_readVoltageEv>
 8019cc0:	ed87 0a07 	vstr	s0, [r7, #28]
			osSemaphoreAcquire(voltage_semaphore, portMAX_DELAY);
 8019cc4:	4b45      	ldr	r3, [pc, #276]	; (8019ddc <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x160>)
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8019ccc:	4618      	mov	r0, r3
 8019cce:	f7f6 f8a3 	bl	800fe18 <osSemaphoreAcquire>
			this->_drive_voltage = voltage;
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	69fa      	ldr	r2, [r7, #28]
 8019cd6:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
			osSemaphoreRelease(voltage_semaphore);
 8019cda:	4b40      	ldr	r3, [pc, #256]	; (8019ddc <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x160>)
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	4618      	mov	r0, r3
 8019ce0:	f7f6 f8ec 	bl	800febc <osSemaphoreRelease>
 8019ce4:	e066      	b.n	8019db4 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x138>
		} else {
			if (mode) { // Do torque
 8019ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d02d      	beq.n	8019d4a <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0xce>
				osSemaphoreAcquire(torque_semaphore, portMAX_DELAY);
 8019cee:	4b3c      	ldr	r3, [pc, #240]	; (8019de0 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x164>)
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	f04f 31ff 	mov.w	r1, #4294967295
 8019cf6:	4618      	mov	r0, r3
 8019cf8:	f7f6 f88e 	bl	800fe18 <osSemaphoreAcquire>
				drive_input.torque_left = input_global.torque_left;
 8019cfc:	4b39      	ldr	r3, [pc, #228]	; (8019de4 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x168>)
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	613b      	str	r3, [r7, #16]
				drive_input.torque_right = input_global.torque_right;
 8019d02:	4b38      	ldr	r3, [pc, #224]	; (8019de4 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x168>)
 8019d04:	685b      	ldr	r3, [r3, #4]
 8019d06:	617b      	str	r3, [r7, #20]
				osSemaphoreRelease(torque_semaphore);
 8019d08:	4b35      	ldr	r3, [pc, #212]	; (8019de0 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x164>)
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	f7f6 f8d5 	bl	800febc <osSemaphoreRelease>
				if (this->status == TWIPR_DRIVE_STATUS_RUNNING) {
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	781b      	ldrb	r3, [r3, #0]
 8019d16:	2b02      	cmp	r3, #2
 8019d18:	d143      	bne.n	8019da2 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x126>
					this->motor_left.setTorque(drive_input.torque_left);
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8019d20:	edd7 7a04 	vldr	s15, [r7, #16]
 8019d24:	eeb0 0a67 	vmov.f32	s0, s15
 8019d28:	4618      	mov	r0, r3
 8019d2a:	f005 ffe9 	bl	801fd00 <_ZN18SimplexMotionMotor9setTorqueEf>
					osDelay(2);
 8019d2e:	2002      	movs	r0, #2
 8019d30:	f7f5 ff0e 	bl	800fb50 <osDelay>
					this->motor_right.setTorque(drive_input.torque_right);
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8019d3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8019d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8019d42:	4618      	mov	r0, r3
 8019d44:	f005 ffdc 	bl	801fd00 <_ZN18SimplexMotionMotor9setTorqueEf>
 8019d48:	e02b      	b.n	8019da2 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x126>
				}
			} else { // Do speed
				speed.speed_left = this->motor_left.getSpeed();
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8019d50:	4618      	mov	r0, r3
 8019d52:	f005 ff0d 	bl	801fb70 <_ZN18SimplexMotionMotor8getSpeedEv>
 8019d56:	eef0 7a40 	vmov.f32	s15, s0
 8019d5a:	edc7 7a02 	vstr	s15, [r7, #8]
				osDelay(2);
 8019d5e:	2002      	movs	r0, #2
 8019d60:	f7f5 fef6 	bl	800fb50 <osDelay>
				speed.speed_right = this->motor_right.getSpeed();
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8019d6a:	4618      	mov	r0, r3
 8019d6c:	f005 ff00 	bl	801fb70 <_ZN18SimplexMotionMotor8getSpeedEv>
 8019d70:	eef0 7a40 	vmov.f32	s15, s0
 8019d74:	edc7 7a03 	vstr	s15, [r7, #12]
				osSemaphoreAcquire(speed_semaphore, portMAX_DELAY);
 8019d78:	4b1b      	ldr	r3, [pc, #108]	; (8019de8 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x16c>)
 8019d7a:	681b      	ldr	r3, [r3, #0]
 8019d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8019d80:	4618      	mov	r0, r3
 8019d82:	f7f6 f849 	bl	800fe18 <osSemaphoreAcquire>
				this->_speed = speed;
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	f503 7362 	add.w	r3, r3, #904	; 0x388
 8019d8c:	f107 0208 	add.w	r2, r7, #8
 8019d90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019d94:	e883 0003 	stmia.w	r3, {r0, r1}
				osSemaphoreRelease(speed_semaphore);
 8019d98:	4b13      	ldr	r3, [pc, #76]	; (8019de8 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x16c>)
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	4618      	mov	r0, r3
 8019d9e:	f7f6 f88d 	bl	800febc <osSemaphoreRelease>
			}
			mode = !mode;
 8019da2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	bf0c      	ite	eq
 8019daa:	2301      	moveq	r3, #1
 8019dac:	2300      	movne	r3, #0
 8019dae:	b2db      	uxtb	r3, r3
 8019db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}

		if ((osKernelGetTickCount() - tick) > 20) {
 8019db4:	f7f5 fe1a 	bl	800f9ec <osKernelGetTickCount>
 8019db8:	4602      	mov	r2, r0
 8019dba:	69bb      	ldr	r3, [r7, #24]
 8019dbc:	1ad3      	subs	r3, r2, r3
 8019dbe:	2b14      	cmp	r3, #20
 8019dc0:	bf8c      	ite	hi
 8019dc2:	2301      	movhi	r3, #1
 8019dc4:	2300      	movls	r3, #0
 8019dc6:	b2db      	uxtb	r3, r3
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d001      	beq.n	8019dd0 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x154>
			nop();
 8019dcc:	f7fa f9f0 	bl	80141b0 <_Z3nopv>
		}
		osDelayUntil(tick + 20);
 8019dd0:	69bb      	ldr	r3, [r7, #24]
 8019dd2:	3314      	adds	r3, #20
 8019dd4:	4618      	mov	r0, r3
 8019dd6:	f7f5 fed6 	bl	800fb86 <osDelayUntil>
		tick = osKernelGetTickCount();
 8019dda:	e763      	b.n	8019ca4 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x28>
 8019ddc:	24015424 	.word	0x24015424
 8019de0:	24015428 	.word	0x24015428
 8019de4:	2401542c 	.word	0x2401542c
 8019de8:	24015420 	.word	0x24015420

08019dec <_ZN11TWIPR_DriveC1Ev>:
	}
}


/* ================================================= */
TWIPR_Drive::TWIPR_Drive() {
 8019dec:	b580      	push	{r7, lr}
 8019dee:	b082      	sub	sp, #8
 8019df0:	af00      	add	r7, sp, #0
 8019df2:	6078      	str	r0, [r7, #4]
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	2200      	movs	r2, #0
 8019df8:	701a      	strb	r2, [r3, #0]
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	2200      	movs	r2, #0
 8019dfe:	805a      	strh	r2, [r3, #2]
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	3304      	adds	r3, #4
 8019e04:	4618      	mov	r0, r3
 8019e06:	f002 fa87 	bl	801c318 <_ZN12ModbusMasterC1Ev>
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8019e10:	4618      	mov	r0, r3
 8019e12:	f005 fc82 	bl	801f71a <_ZN18SimplexMotionMotorC1Ev>
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	f005 fc7c 	bl	801f71a <_ZN18SimplexMotionMotorC1Ev>

}
 8019e22:	687b      	ldr	r3, [r7, #4]
 8019e24:	4618      	mov	r0, r3
 8019e26:	3708      	adds	r7, #8
 8019e28:	46bd      	mov	sp, r7
 8019e2a:	bd80      	pop	{r7, pc}
 8019e2c:	0000      	movs	r0, r0
	...

08019e30 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t>:

/* ================================================= */
uint8_t TWIPR_Drive::init(twipr_drive_config_t config) {
 8019e30:	b084      	sub	sp, #16
 8019e32:	b5b0      	push	{r4, r5, r7, lr}
 8019e34:	b08a      	sub	sp, #40	; 0x28
 8019e36:	af00      	add	r7, sp, #0
 8019e38:	6078      	str	r0, [r7, #4]
 8019e3a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8019e3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->_config = config;
 8019e42:	687b      	ldr	r3, [r7, #4]
 8019e44:	f503 745b 	add.w	r4, r3, #876	; 0x36c
 8019e48:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 8019e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019e50:	682b      	ldr	r3, [r5, #0]
 8019e52:	6023      	str	r3, [r4, #0]

	uint8_t ret = 0;
 8019e54:	2300      	movs	r3, #0
 8019e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	input_global.torque_left = 0;
 8019e5a:	4b75      	ldr	r3, [pc, #468]	; (801a030 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x200>)
 8019e5c:	f04f 0200 	mov.w	r2, #0
 8019e60:	601a      	str	r2, [r3, #0]
	input_global.torque_right = 0;
 8019e62:	4b73      	ldr	r3, [pc, #460]	; (801a030 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x200>)
 8019e64:	f04f 0200 	mov.w	r2, #0
 8019e68:	605a      	str	r2, [r3, #4]

	// Initialize the Modbus Interface
	this->modbus_torque.init(this->_config.modbus_config);
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	1d18      	adds	r0, r3, #4
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8019e74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8019e76:	f002 fa5f 	bl	801c338 <_ZN12ModbusMaster4initE15modbus_config_t>
	this->modbus_torque.start();
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	3304      	adds	r3, #4
 8019e7e:	4618      	mov	r0, r3
 8019e80:	f002 faf2 	bl	801c468 <_ZN12ModbusMaster5startEv>

	// Initialize the motors
	simplexmotion_config_t config_left = { .id = this->_config.id_left,
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	f893 336c 	ldrb.w	r3, [r3, #876]	; 0x36c
			.direction = this->_config.direction_left, .modbus =
					&this->modbus_torque, };
 8019e8a:	753b      	strb	r3, [r7, #20]
			.direction = this->_config.direction_left, .modbus =
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	f993 336e 	ldrsb.w	r3, [r3, #878]	; 0x36e
					&this->modbus_torque, };
 8019e92:	757b      	strb	r3, [r7, #21]
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	3304      	adds	r3, #4
 8019e98:	61bb      	str	r3, [r7, #24]

	ret = this->motor_left.init(config_left);
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	f503 702f 	add.w	r0, r3, #700	; 0x2bc
 8019ea0:	f107 0314 	add.w	r3, r7, #20
 8019ea4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019ea8:	f005 fcd1 	bl	801f84e <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t>
 8019eac:	4603      	mov	r3, r0
 8019eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (!ret) {
 8019eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d104      	bne.n	8019ec4 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x94>
		this->_error_handler(TWIPR_DRIVE_ERROR_INIT);
 8019eba:	f240 2101 	movw	r1, #513	; 0x201
 8019ebe:	6878      	ldr	r0, [r7, #4]
 8019ec0:	f000 f98e 	bl	801a1e0 <_ZN11TWIPR_Drive14_error_handlerEm>
	}

	simplexmotion_config_t config_right = { .id = this->_config.id_right,
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	f893 336d 	ldrb.w	r3, [r3, #877]	; 0x36d
			.direction = this->_config.direction_right, .modbus =
					&this->modbus_torque, };
 8019eca:	733b      	strb	r3, [r7, #12]
			.direction = this->_config.direction_right, .modbus =
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	f993 336f 	ldrsb.w	r3, [r3, #879]	; 0x36f
					&this->modbus_torque, };
 8019ed2:	737b      	strb	r3, [r7, #13]
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	3304      	adds	r3, #4
 8019ed8:	613b      	str	r3, [r7, #16]

	ret = this->motor_right.init(config_right);
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	f503 7045 	add.w	r0, r3, #788	; 0x314
 8019ee0:	f107 030c 	add.w	r3, r7, #12
 8019ee4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019ee8:	f005 fcb1 	bl	801f84e <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t>
 8019eec:	4603      	mov	r3, r0
 8019eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (!ret) {
 8019ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d104      	bne.n	8019f04 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0xd4>
		this->_error_handler(TWIPR_DRIVE_ERROR_INIT);
 8019efa:	f240 2101 	movw	r1, #513	; 0x201
 8019efe:	6878      	ldr	r0, [r7, #4]
 8019f00:	f000 f96e 	bl	801a1e0 <_ZN11TWIPR_Drive14_error_handlerEm>
	}

	// Set Torque Limits
	this->motor_left.setTorqueLimit(this->_config.torque_max);
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	f503 722f 	add.w	r2, r3, #700	; 0x2bc
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	edd3 7adc 	vldr	s15, [r3, #880]	; 0x370
 8019f10:	eeb0 0a67 	vmov.f32	s0, s15
 8019f14:	4610      	mov	r0, r2
 8019f16:	f005 fe6b 	bl	801fbf0 <_ZN18SimplexMotionMotor14setTorqueLimitEf>
	this->motor_right.setTorqueLimit(this->_config.torque_max);
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	f503 7245 	add.w	r2, r3, #788	; 0x314
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	edd3 7adc 	vldr	s15, [r3, #880]	; 0x370
 8019f26:	eeb0 0a67 	vmov.f32	s0, s15
 8019f2a:	4610      	mov	r0, r2
 8019f2c:	f005 fe60 	bl	801fbf0 <_ZN18SimplexMotionMotor14setTorqueLimitEf>

	// Check if torque limits have been set correctly
	float torque_limit_left = this->motor_left.getTorqueLimit();
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8019f36:	4618      	mov	r0, r3
 8019f38:	f005 feae 	bl	801fc98 <_ZN18SimplexMotionMotor14getTorqueLimitEv>
 8019f3c:	ed87 0a08 	vstr	s0, [r7, #32]
	float torque_limit_right = this->motor_right.getTorqueLimit();
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	f503 7345 	add.w	r3, r3, #788	; 0x314
 8019f46:	4618      	mov	r0, r3
 8019f48:	f005 fea6 	bl	801fc98 <_ZN18SimplexMotionMotor14getTorqueLimitEv>
 8019f4c:	ed87 0a07 	vstr	s0, [r7, #28]

	if (!(abs(this->_config.torque_max - torque_limit_left) < 0.01)) {
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	ed93 7adc 	vldr	s14, [r3, #880]	; 0x370
 8019f56:	edd7 7a08 	vldr	s15, [r7, #32]
 8019f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8019f62:	f7ff fe6e 	bl	8019c42 <_ZSt3absf>
 8019f66:	eef0 7a40 	vmov.f32	s15, s0
 8019f6a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8019f6e:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 801a028 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x1f8>
 8019f72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019f7a:	bf4c      	ite	mi
 8019f7c:	2301      	movmi	r3, #1
 8019f7e:	2300      	movpl	r3, #0
 8019f80:	b2db      	uxtb	r3, r3
 8019f82:	f083 0301 	eor.w	r3, r3, #1
 8019f86:	b2db      	uxtb	r3, r3
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d004      	beq.n	8019f96 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x166>
		this->_error_handler(TWIPR_DRIVE_ERROR_INIT);
 8019f8c:	f240 2101 	movw	r1, #513	; 0x201
 8019f90:	6878      	ldr	r0, [r7, #4]
 8019f92:	f000 f925 	bl	801a1e0 <_ZN11TWIPR_Drive14_error_handlerEm>
	}

	if (!(abs(this->_config.torque_max - torque_limit_right) < 0.01)) {
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	ed93 7adc 	vldr	s14, [r3, #880]	; 0x370
 8019f9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8019fa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8019fa8:	f7ff fe4b 	bl	8019c42 <_ZSt3absf>
 8019fac:	eef0 7a40 	vmov.f32	s15, s0
 8019fb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8019fb4:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 801a028 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x1f8>
 8019fb8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8019fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fc0:	bf4c      	ite	mi
 8019fc2:	2301      	movmi	r3, #1
 8019fc4:	2300      	movpl	r3, #0
 8019fc6:	b2db      	uxtb	r3, r3
 8019fc8:	f083 0301 	eor.w	r3, r3, #1
 8019fcc:	b2db      	uxtb	r3, r3
 8019fce:	2b00      	cmp	r3, #0
 8019fd0:	d004      	beq.n	8019fdc <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x1ac>
		this->_error_handler(TWIPR_DRIVE_ERROR_INIT);
 8019fd2:	f240 2101 	movw	r1, #513	; 0x201
 8019fd6:	6878      	ldr	r0, [r7, #4]
 8019fd8:	f000 f902 	bl	801a1e0 <_ZN11TWIPR_Drive14_error_handlerEm>
	}

//	drive_input_queue = osMessageQueueNew(1, sizeof(twipr_drive_input_t), NULL);
//
	osThreadNew(twipr_drive_torque_task, (void*) this,
 8019fdc:	4a15      	ldr	r2, [pc, #84]	; (801a034 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x204>)
 8019fde:	6879      	ldr	r1, [r7, #4]
 8019fe0:	4815      	ldr	r0, [pc, #84]	; (801a038 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x208>)
 8019fe2:	f7f5 fd18 	bl	800fa16 <osThreadNew>
			&drive_torque_task_attributes);

//	this->_drive_voltage = this->_readVoltage();

	speed_semaphore = osSemaphoreNew(1, 1, NULL);
 8019fe6:	2200      	movs	r2, #0
 8019fe8:	2101      	movs	r1, #1
 8019fea:	2001      	movs	r0, #1
 8019fec:	f7f5 fe8a 	bl	800fd04 <osSemaphoreNew>
 8019ff0:	4603      	mov	r3, r0
 8019ff2:	4a12      	ldr	r2, [pc, #72]	; (801a03c <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x20c>)
 8019ff4:	6013      	str	r3, [r2, #0]
	torque_semaphore = osSemaphoreNew(1, 1, NULL);
 8019ff6:	2200      	movs	r2, #0
 8019ff8:	2101      	movs	r1, #1
 8019ffa:	2001      	movs	r0, #1
 8019ffc:	f7f5 fe82 	bl	800fd04 <osSemaphoreNew>
 801a000:	4603      	mov	r3, r0
 801a002:	4a0f      	ldr	r2, [pc, #60]	; (801a040 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x210>)
 801a004:	6013      	str	r3, [r2, #0]
	voltage_semaphore = osSemaphoreNew(1, 1, NULL);
 801a006:	2200      	movs	r2, #0
 801a008:	2101      	movs	r1, #1
 801a00a:	2001      	movs	r0, #1
 801a00c:	f7f5 fe7a 	bl	800fd04 <osSemaphoreNew>
 801a010:	4603      	mov	r3, r0
 801a012:	4a0c      	ldr	r2, [pc, #48]	; (801a044 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x214>)
 801a014:	6013      	str	r3, [r2, #0]

	return 1;
 801a016:	2301      	movs	r3, #1
}
 801a018:	4618      	mov	r0, r3
 801a01a:	3728      	adds	r7, #40	; 0x28
 801a01c:	46bd      	mov	sp, r7
 801a01e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801a022:	b004      	add	sp, #16
 801a024:	4770      	bx	lr
 801a026:	bf00      	nop
 801a028:	47ae147b 	.word	0x47ae147b
 801a02c:	3f847ae1 	.word	0x3f847ae1
 801a030:	2401542c 	.word	0x2401542c
 801a034:	08025758 	.word	0x08025758
 801a038:	08019c63 	.word	0x08019c63
 801a03c:	24015420 	.word	0x24015420
 801a040:	24015428 	.word	0x24015428
 801a044:	24015424 	.word	0x24015424

0801a048 <_ZN11TWIPR_Drive5startEv>:
/* ================================================= */
void TWIPR_Drive::start() {
 801a048:	b580      	push	{r7, lr}
 801a04a:	b082      	sub	sp, #8
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	6078      	str	r0, [r7, #4]
	this->motor_left.start(SIMPLEXMOTION_MODE_TORQUE);
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801a056:	2128      	movs	r1, #40	; 0x28
 801a058:	4618      	mov	r0, r3
 801a05a:	f005 fc30 	bl	801f8be <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t>
	this->motor_right.start(SIMPLEXMOTION_MODE_TORQUE);
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	f503 7345 	add.w	r3, r3, #788	; 0x314
 801a064:	2128      	movs	r1, #40	; 0x28
 801a066:	4618      	mov	r0, r3
 801a068:	f005 fc29 	bl	801f8be <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t>
	this->status = TWIPR_DRIVE_STATUS_RUNNING;
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	2202      	movs	r2, #2
 801a070:	701a      	strb	r2, [r3, #0]
}
 801a072:	bf00      	nop
 801a074:	3708      	adds	r7, #8
 801a076:	46bd      	mov	sp, r7
 801a078:	bd80      	pop	{r7, pc}

0801a07a <_ZN11TWIPR_Drive13startup_checkEv>:
	this->motor_left.stop();
	this->motor_right.stop();
	this->status = TWIPR_DRIVE_STATUS_STOP;
}
/* ================================================= */
uint8_t TWIPR_Drive::startup_check() {
 801a07a:	b580      	push	{r7, lr}
 801a07c:	b084      	sub	sp, #16
 801a07e:	af00      	add	r7, sp, #0
 801a080:	6078      	str	r0, [r7, #4]
	// Check both motors
	uint8_t check_left = this->motor_left.startup_check();
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801a088:	4618      	mov	r0, r3
 801a08a:	f005 fc47 	bl	801f91c <_ZN18SimplexMotionMotor13startup_checkEv>
 801a08e:	4603      	mov	r3, r0
 801a090:	73fb      	strb	r3, [r7, #15]
	osDelay(250);
 801a092:	20fa      	movs	r0, #250	; 0xfa
 801a094:	f7f5 fd5c 	bl	800fb50 <osDelay>
	uint8_t check_right = this->motor_right.startup_check();
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	f503 7345 	add.w	r3, r3, #788	; 0x314
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f005 fc3c 	bl	801f91c <_ZN18SimplexMotionMotor13startup_checkEv>
 801a0a4:	4603      	mov	r3, r0
 801a0a6:	73bb      	strb	r3, [r7, #14]

	if (!check_left) {
 801a0a8:	7bfb      	ldrb	r3, [r7, #15]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d101      	bne.n	801a0b2 <_ZN11TWIPR_Drive13startup_checkEv+0x38>
		return 0;
 801a0ae:	2300      	movs	r3, #0
 801a0b0:	e005      	b.n	801a0be <_ZN11TWIPR_Drive13startup_checkEv+0x44>
	}

	if (!check_right) {
 801a0b2:	7bbb      	ldrb	r3, [r7, #14]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d101      	bne.n	801a0bc <_ZN11TWIPR_Drive13startup_checkEv+0x42>
		return 0;
 801a0b8:	2300      	movs	r3, #0
 801a0ba:	e000      	b.n	801a0be <_ZN11TWIPR_Drive13startup_checkEv+0x44>
	}

	return 1;
 801a0bc:	2301      	movs	r3, #1
}
 801a0be:	4618      	mov	r0, r3
 801a0c0:	3710      	adds	r7, #16
 801a0c2:	46bd      	mov	sp, r7
 801a0c4:	bd80      	pop	{r7, pc}
	...

0801a0c8 <_ZN11TWIPR_Drive10getVoltageEv>:
/* ================================================= */
void TWIPR_Drive::update() {
	// Read status of motors and check if everything is running fine
}
/* ================================================= */
float TWIPR_Drive::getVoltage() {
 801a0c8:	b580      	push	{r7, lr}
 801a0ca:	b084      	sub	sp, #16
 801a0cc:	af00      	add	r7, sp, #0
 801a0ce:	6078      	str	r0, [r7, #4]
	osSemaphoreAcquire(voltage_semaphore, portMAX_DELAY);
 801a0d0:	4b0b      	ldr	r3, [pc, #44]	; (801a100 <_ZN11TWIPR_Drive10getVoltageEv+0x38>)
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	f04f 31ff 	mov.w	r1, #4294967295
 801a0d8:	4618      	mov	r0, r3
 801a0da:	f7f5 fe9d 	bl	800fe18 <osSemaphoreAcquire>
	float voltage = this->_drive_voltage;
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 801a0e4:	60fb      	str	r3, [r7, #12]
	osSemaphoreRelease(voltage_semaphore);
 801a0e6:	4b06      	ldr	r3, [pc, #24]	; (801a100 <_ZN11TWIPR_Drive10getVoltageEv+0x38>)
 801a0e8:	681b      	ldr	r3, [r3, #0]
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	f7f5 fee6 	bl	800febc <osSemaphoreRelease>

	return voltage;
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	ee07 3a90 	vmov	s15, r3
}
 801a0f6:	eeb0 0a67 	vmov.f32	s0, s15
 801a0fa:	3710      	adds	r7, #16
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	bd80      	pop	{r7, pc}
 801a100:	24015424 	.word	0x24015424

0801a104 <_ZN11TWIPR_Drive12_readVoltageEv>:
/* ================================================= */
float TWIPR_Drive::_readVoltage() {
 801a104:	b580      	push	{r7, lr}
 801a106:	b082      	sub	sp, #8
 801a108:	af00      	add	r7, sp, #0
 801a10a:	6078      	str	r0, [r7, #4]
	return this->motor_left.getVoltage();
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 801a112:	4618      	mov	r0, r3
 801a114:	f005 fcf8 	bl	801fb08 <_ZN18SimplexMotionMotor10getVoltageEv>
 801a118:	eef0 7a40 	vmov.f32	s15, s0
}
 801a11c:	eeb0 0a67 	vmov.f32	s0, s15
 801a120:	3708      	adds	r7, #8
 801a122:	46bd      	mov	sp, r7
 801a124:	bd80      	pop	{r7, pc}
	...

0801a128 <_ZN11TWIPR_Drive8getSpeedEv>:
/* ================================================= */
twipr_drive_speed_t TWIPR_Drive::getSpeed() {
 801a128:	b580      	push	{r7, lr}
 801a12a:	b088      	sub	sp, #32
 801a12c:	af00      	add	r7, sp, #0
 801a12e:	60f8      	str	r0, [r7, #12]

	twipr_drive_speed_t speed;

	// TODO
	osSemaphoreAcquire(speed_semaphore, portMAX_DELAY);
 801a130:	4b14      	ldr	r3, [pc, #80]	; (801a184 <_ZN11TWIPR_Drive8getSpeedEv+0x5c>)
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	f04f 31ff 	mov.w	r1, #4294967295
 801a138:	4618      	mov	r0, r3
 801a13a:	f7f5 fe6d 	bl	800fe18 <osSemaphoreAcquire>
	speed = this->_speed;
 801a13e:	68fa      	ldr	r2, [r7, #12]
 801a140:	f107 0310 	add.w	r3, r7, #16
 801a144:	f502 7262 	add.w	r2, r2, #904	; 0x388
 801a148:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a14c:	e883 0003 	stmia.w	r3, {r0, r1}
	osSemaphoreRelease(speed_semaphore);
 801a150:	4b0c      	ldr	r3, [pc, #48]	; (801a184 <_ZN11TWIPR_Drive8getSpeedEv+0x5c>)
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	4618      	mov	r0, r3
 801a156:	f7f5 feb1 	bl	800febc <osSemaphoreRelease>
	return speed;
 801a15a:	f107 0318 	add.w	r3, r7, #24
 801a15e:	f107 0210 	add.w	r2, r7, #16
 801a162:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a166:	e883 0003 	stmia.w	r3, {r0, r1}
 801a16a:	69ba      	ldr	r2, [r7, #24]
 801a16c:	69fb      	ldr	r3, [r7, #28]
 801a16e:	ee07 2a10 	vmov	s14, r2
 801a172:	ee07 3a90 	vmov	s15, r3
}
 801a176:	eeb0 0a47 	vmov.f32	s0, s14
 801a17a:	eef0 0a67 	vmov.f32	s1, s15
 801a17e:	3720      	adds	r7, #32
 801a180:	46bd      	mov	sp, r7
 801a182:	bd80      	pop	{r7, pc}
 801a184:	24015420 	.word	0x24015420

0801a188 <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t>:
/* ================================================= */
void TWIPR_Drive::setTorque(twipr_drive_input_t input) {
 801a188:	b580      	push	{r7, lr}
 801a18a:	b084      	sub	sp, #16
 801a18c:	af00      	add	r7, sp, #0
 801a18e:	60f8      	str	r0, [r7, #12]
 801a190:	eeb0 7a40 	vmov.f32	s14, s0
 801a194:	eef0 7a60 	vmov.f32	s15, s1
 801a198:	ed87 7a01 	vstr	s14, [r7, #4]
 801a19c:	edc7 7a02 	vstr	s15, [r7, #8]

	if (this->status != TWIPR_DRIVE_STATUS_RUNNING) {
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	781b      	ldrb	r3, [r3, #0]
 801a1a4:	2b02      	cmp	r3, #2
 801a1a6:	d112      	bne.n	801a1ce <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x46>
		return;
	}

	osSemaphoreAcquire(torque_semaphore, portMAX_DELAY);
 801a1a8:	4b0b      	ldr	r3, [pc, #44]	; (801a1d8 <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x50>)
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	f04f 31ff 	mov.w	r1, #4294967295
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	f7f5 fe31 	bl	800fe18 <osSemaphoreAcquire>
	input_global.torque_left = input.torque_left;
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	4a08      	ldr	r2, [pc, #32]	; (801a1dc <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x54>)
 801a1ba:	6013      	str	r3, [r2, #0]
	input_global.torque_right = input.torque_right;
 801a1bc:	68bb      	ldr	r3, [r7, #8]
 801a1be:	4a07      	ldr	r2, [pc, #28]	; (801a1dc <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x54>)
 801a1c0:	6053      	str	r3, [r2, #4]
	osSemaphoreRelease(torque_semaphore);
 801a1c2:	4b05      	ldr	r3, [pc, #20]	; (801a1d8 <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x50>)
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	f7f5 fe78 	bl	800febc <osSemaphoreRelease>
 801a1cc:	e000      	b.n	801a1d0 <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x48>
		return;
 801a1ce:	bf00      	nop

//	osMessageQueuePut(drive_input_queue, &input, 0, 0);

//	this->motor_left.setTorque(input.torque_left);
//	this->motor_right.setTorque(input.torque_right);
}
 801a1d0:	3710      	adds	r7, #16
 801a1d2:	46bd      	mov	sp, r7
 801a1d4:	bd80      	pop	{r7, pc}
 801a1d6:	bf00      	nop
 801a1d8:	24015428 	.word	0x24015428
 801a1dc:	2401542c 	.word	0x2401542c

0801a1e0 <_ZN11TWIPR_Drive14_error_handlerEm>:
	this->motor_left.setTorque(torque_left);
	this->motor_right.setTorque(torque_right);
}

/* ================================================= */
void TWIPR_Drive::_error_handler(uint32_t error) {
 801a1e0:	b580      	push	{r7, lr}
 801a1e2:	b082      	sub	sp, #8
 801a1e4:	af00      	add	r7, sp, #0
 801a1e6:	6078      	str	r0, [r7, #4]
 801a1e8:	6039      	str	r1, [r7, #0]

	// Set the state to error
	this->status = TWIPR_DRIVE_STATUS_ERROR;
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	2203      	movs	r2, #3
 801a1ee:	701a      	strb	r2, [r3, #0]
	this->error = (twipr_drive_error_t) error;
 801a1f0:	683b      	ldr	r3, [r7, #0]
 801a1f2:	b29a      	uxth	r2, r3
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	805a      	strh	r2, [r3, #2]

	// Call the error handler of the TWIPR
	twipr_error_handler(error);
 801a1f8:	6838      	ldr	r0, [r7, #0]
 801a1fa:	f000 f819 	bl	801a230 <_Z19twipr_error_handlerm>
}
 801a1fe:	bf00      	nop
 801a200:	3708      	adds	r7, #8
 801a202:	46bd      	mov	sp, r7
 801a204:	bd80      	pop	{r7, pc}

0801a206 <_Z5delaym>:

inline void delay(uint32_t msec){
 801a206:	b580      	push	{r7, lr}
 801a208:	b084      	sub	sp, #16
 801a20a:	af00      	add	r7, sp, #0
 801a20c:	6078      	str	r0, [r7, #4]
#if CORE_CONFIG_USE_RTOS

	osKernelState_t state = osKernelGetState();
 801a20e:	f7f5 fba5 	bl	800f95c <osKernelGetState>
 801a212:	60f8      	str	r0, [r7, #12]
	if (state == osKernelRunning){
 801a214:	68fb      	ldr	r3, [r7, #12]
 801a216:	2b02      	cmp	r3, #2
 801a218:	d103      	bne.n	801a222 <_Z5delaym+0x1c>
		osDelay(msec);
 801a21a:	6878      	ldr	r0, [r7, #4]
 801a21c:	f7f5 fc98 	bl	800fb50 <osDelay>
	}

#else
	HAL_Delay(msec);
#endif
}
 801a220:	e002      	b.n	801a228 <_Z5delaym+0x22>
		HAL_Delay(msec);
 801a222:	6878      	ldr	r0, [r7, #4]
 801a224:	f7e8 f858 	bl	80022d8 <HAL_Delay>
}
 801a228:	bf00      	nop
 801a22a:	3710      	adds	r7, #16
 801a22c:	46bd      	mov	sp, r7
 801a22e:	bd80      	pop	{r7, pc}

0801a230 <_Z19twipr_error_handlerm>:
 */


#include "twipr_errors.h"

void twipr_error_handler(uint32_t errorcode) {
 801a230:	b580      	push	{r7, lr}
 801a232:	b086      	sub	sp, #24
 801a234:	af00      	add	r7, sp, #0
 801a236:	6078      	str	r0, [r7, #4]

	// Turn on the LED2

	// if the error code starts with 0x00 then it's severe and should result in a firmware stop
	if (errorcode >> 24 == 0x00) {
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	0e1b      	lsrs	r3, r3, #24
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d13b      	bne.n	801a2b8 <_Z19twipr_error_handlerm+0x88>
		// Try to suspend all tasks
		vTaskSuspendAll();
 801a240:	f7f7 fbf4 	bl	8011a2c <vTaskSuspendAll>
		while (true) {
			uint8_t id1 = errorcode >> 8 & 0xFF;
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	0a1b      	lsrs	r3, r3, #8
 801a248:	73fb      	strb	r3, [r7, #15]
			uint8_t id2 = errorcode & 0xFF;
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	73bb      	strb	r3, [r7, #14]

			for (int i = 0; i < id1; i++) {
 801a24e:	2300      	movs	r3, #0
 801a250:	617b      	str	r3, [r7, #20]
 801a252:	e00e      	b.n	801a272 <_Z19twipr_error_handlerm+0x42>
				rc_status_led_2.on();
 801a254:	481a      	ldr	r0, [pc, #104]	; (801a2c0 <_Z19twipr_error_handlerm+0x90>)
 801a256:	f005 f8c2 	bl	801f3de <_ZN17core_hardware_LED2onEv>
				HAL_Delay(150);
 801a25a:	2096      	movs	r0, #150	; 0x96
 801a25c:	f7e8 f83c 	bl	80022d8 <HAL_Delay>
				rc_status_led_2.off();
 801a260:	4817      	ldr	r0, [pc, #92]	; (801a2c0 <_Z19twipr_error_handlerm+0x90>)
 801a262:	f005 f8cc 	bl	801f3fe <_ZN17core_hardware_LED3offEv>
				HAL_Delay(150);
 801a266:	2096      	movs	r0, #150	; 0x96
 801a268:	f7e8 f836 	bl	80022d8 <HAL_Delay>
			for (int i = 0; i < id1; i++) {
 801a26c:	697b      	ldr	r3, [r7, #20]
 801a26e:	3301      	adds	r3, #1
 801a270:	617b      	str	r3, [r7, #20]
 801a272:	7bfb      	ldrb	r3, [r7, #15]
 801a274:	697a      	ldr	r2, [r7, #20]
 801a276:	429a      	cmp	r2, r3
 801a278:	dbec      	blt.n	801a254 <_Z19twipr_error_handlerm+0x24>
			}
			delay(750);
 801a27a:	f240 20ee 	movw	r0, #750	; 0x2ee
 801a27e:	f7ff ffc2 	bl	801a206 <_Z5delaym>
			for (int i = 0; i < id2; i++) {
 801a282:	2300      	movs	r3, #0
 801a284:	613b      	str	r3, [r7, #16]
 801a286:	e00e      	b.n	801a2a6 <_Z19twipr_error_handlerm+0x76>
				rc_status_led_2.on();
 801a288:	480d      	ldr	r0, [pc, #52]	; (801a2c0 <_Z19twipr_error_handlerm+0x90>)
 801a28a:	f005 f8a8 	bl	801f3de <_ZN17core_hardware_LED2onEv>
				HAL_Delay(150);
 801a28e:	2096      	movs	r0, #150	; 0x96
 801a290:	f7e8 f822 	bl	80022d8 <HAL_Delay>
				rc_status_led_2.off();
 801a294:	480a      	ldr	r0, [pc, #40]	; (801a2c0 <_Z19twipr_error_handlerm+0x90>)
 801a296:	f005 f8b2 	bl	801f3fe <_ZN17core_hardware_LED3offEv>
				HAL_Delay(150);
 801a29a:	2096      	movs	r0, #150	; 0x96
 801a29c:	f7e8 f81c 	bl	80022d8 <HAL_Delay>
			for (int i = 0; i < id2; i++) {
 801a2a0:	693b      	ldr	r3, [r7, #16]
 801a2a2:	3301      	adds	r3, #1
 801a2a4:	613b      	str	r3, [r7, #16]
 801a2a6:	7bbb      	ldrb	r3, [r7, #14]
 801a2a8:	693a      	ldr	r2, [r7, #16]
 801a2aa:	429a      	cmp	r2, r3
 801a2ac:	dbec      	blt.n	801a288 <_Z19twipr_error_handlerm+0x58>
			}
			HAL_Delay(1500);
 801a2ae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 801a2b2:	f7e8 f811 	bl	80022d8 <HAL_Delay>
		}
 801a2b6:	e7c5      	b.n	801a244 <_Z19twipr_error_handlerm+0x14>
	}
}
 801a2b8:	bf00      	nop
 801a2ba:	3718      	adds	r7, #24
 801a2bc:	46bd      	mov	sp, r7
 801a2be:	bd80      	pop	{r7, pc}
 801a2c0:	2401e0c0 	.word	0x2401e0c0

0801a2c4 <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 801a2c4:	b580      	push	{r7, lr}
 801a2c6:	b082      	sub	sp, #8
 801a2c8:	af00      	add	r7, sp, #0
 801a2ca:	ed87 0a01 	vstr	s0, [r7, #4]
 801a2ce:	edc7 0a00 	vstr	s1, [r7]
 801a2d2:	edd7 0a00 	vldr	s1, [r7]
 801a2d6:	ed97 0a01 	vldr	s0, [r7, #4]
 801a2da:	f007 f8bd 	bl	8021458 <atan2f>
 801a2de:	eef0 7a40 	vmov.f32	s15, s0
 801a2e2:	eeb0 0a67 	vmov.f32	s0, s15
 801a2e6:	3708      	adds	r7, #8
 801a2e8:	46bd      	mov	sp, r7
 801a2ea:	bd80      	pop	{r7, pc}

0801a2ec <_ZN8Madgwick5beginEf>:

//-------------------------------------------------------------------------------------------
// Function declarations
public:
    Madgwick(void);
    void begin(float sampleFrequency) { invSampleFreq = 1.0f / sampleFrequency; }
 801a2ec:	b480      	push	{r7}
 801a2ee:	b083      	sub	sp, #12
 801a2f0:	af00      	add	r7, sp, #0
 801a2f2:	6078      	str	r0, [r7, #4]
 801a2f4:	ed87 0a00 	vstr	s0, [r7]
 801a2f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a2fc:	ed97 7a00 	vldr	s14, [r7]
 801a300:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	edc3 7a04 	vstr	s15, [r3, #16]
 801a30a:	bf00      	nop
 801a30c:	370c      	adds	r7, #12
 801a30e:	46bd      	mov	sp, r7
 801a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a314:	4770      	bx	lr
	...

0801a318 <_ZN16TWIPR_EstimationC1Ev>:

static const osThreadAttr_t estimation_task_attributes = { .name = "estimation",
		.stack_size = 1280 * 4, .priority = (osPriority_t) osPriorityNormal, };

/* ======================================================= */
TWIPR_Estimation::TWIPR_Estimation() :
 801a318:	b580      	push	{r7, lr}
 801a31a:	b082      	sub	sp, #8
 801a31c:	af00      	add	r7, sp, #0
 801a31e:	6078      	str	r0, [r7, #4]
		vqf(TWIPR_ESTIMATION_TS) {
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	2200      	movs	r2, #0
 801a324:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 801a32e:	4618      	mov	r0, r3
 801a330:	f004 fc8e 	bl	801ec50 <_ZN8MadgwickC1Ev>
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	f603 0358 	addw	r3, r3, #2136	; 0x858
 801a33a:	eebf 2b00 	vmov.f64	d2, #240	; 0xbf800000 -1.0
 801a33e:	eebf 1b00 	vmov.f64	d1, #240	; 0xbf800000 -1.0
 801a342:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 801a370 <_ZN16TWIPR_EstimationC1Ev+0x58>
 801a346:	4618      	mov	r0, r3
 801a348:	f003 fb32 	bl	801d9b0 <_ZN8BasicVQFC1Eddd>
	this->status = TWIPR_ESTIMATION_STATUS_NONE;
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	2200      	movs	r2, #0
 801a350:	701a      	strb	r2, [r3, #0]
	this->vqf.setTauAcc(0.5);
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	f603 0358 	addw	r3, r3, #2136	; 0x858
 801a358:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 801a35c:	4618      	mov	r0, r3
 801a35e:	f003 fcc5 	bl	801dcec <_ZN8BasicVQF9setTauAccEd>
}
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	4618      	mov	r0, r3
 801a366:	3708      	adds	r7, #8
 801a368:	46bd      	mov	sp, r7
 801a36a:	bd80      	pop	{r7, pc}
 801a36c:	f3af 8000 	nop.w
 801a370:	47ae147b 	.word	0x47ae147b
 801a374:	3f847ae1 	.word	0x3f847ae1

0801a378 <_ZN16TWIPR_Estimation4initE25twipr_estimation_config_t>:

/* ======================================================= */
void TWIPR_Estimation::init(twipr_estimation_config_t config) {
 801a378:	b084      	sub	sp, #16
 801a37a:	b5b0      	push	{r4, r5, r7, lr}
 801a37c:	b082      	sub	sp, #8
 801a37e:	af00      	add	r7, sp, #0
 801a380:	6078      	str	r0, [r7, #4]
 801a382:	f107 001c 	add.w	r0, r7, #28
 801a386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a390:	f107 051c 	add.w	r5, r7, #28
 801a394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a39a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a39c:	682b      	ldr	r3, [r5, #0]
 801a39e:	6023      	str	r3, [r4, #0]

	// Initialize the sensors

	this->status = TWIPR_ESTIMATION_STATUS_IDLE;
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	2201      	movs	r2, #1
 801a3a4:	701a      	strb	r2, [r3, #0]
	this->_semaphore = osSemaphoreNew(1, 1, NULL);
 801a3a6:	2200      	movs	r2, #0
 801a3a8:	2101      	movs	r1, #1
 801a3aa:	2001      	movs	r0, #1
 801a3ac:	f7f5 fcaa 	bl	800fd04 <osSemaphoreNew>
 801a3b0:	4602      	mov	r2, r0
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	f8c3 2828 	str.w	r2, [r3, #2088]	; 0x828
}
 801a3b8:	bf00      	nop
 801a3ba:	3708      	adds	r7, #8
 801a3bc:	46bd      	mov	sp, r7
 801a3be:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801a3c2:	b004      	add	sp, #16
 801a3c4:	4770      	bx	lr
	...

0801a3c8 <_ZN16TWIPR_Estimation5startEv>:

/* ======================================================= */
void TWIPR_Estimation::start() {
 801a3c8:	b580      	push	{r7, lr}
 801a3ca:	b082      	sub	sp, #8
 801a3cc:	af00      	add	r7, sp, #0
 801a3ce:	6078      	str	r0, [r7, #4]
	osThreadNew(estimation_task, (void*) this, &estimation_task_attributes);
 801a3d0:	4a04      	ldr	r2, [pc, #16]	; (801a3e4 <_ZN16TWIPR_Estimation5startEv+0x1c>)
 801a3d2:	6879      	ldr	r1, [r7, #4]
 801a3d4:	4804      	ldr	r0, [pc, #16]	; (801a3e8 <_ZN16TWIPR_Estimation5startEv+0x20>)
 801a3d6:	f7f5 fb1e 	bl	800fa16 <osThreadNew>
}
 801a3da:	bf00      	nop
 801a3dc:	3708      	adds	r7, #8
 801a3de:	46bd      	mov	sp, r7
 801a3e0:	bd80      	pop	{r7, pc}
 801a3e2:	bf00      	nop
 801a3e4:	0802577c 	.word	0x0802577c
 801a3e8:	0801a84d 	.word	0x0801a84d

0801a3ec <_ZN16TWIPR_Estimation13task_functionEv>:
/* ======================================================= */
void TWIPR_Estimation::reset() {
	twipr_error_handler(0);
}
/* ======================================================= */
void TWIPR_Estimation::task_function() {
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b084      	sub	sp, #16
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]

	this->_orientation_fusion.begin((float) TWIPR_ESTIMATION_FREQUENCY);
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 801a3fa:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801a424 <_ZN16TWIPR_Estimation13task_functionEv+0x38>
 801a3fe:	4618      	mov	r0, r3
 801a400:	f7ff ff74 	bl	801a2ec <_ZN8Madgwick5beginEf>
	this->status = TWIPR_ESTIMATION_STATUS_OK;
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	2202      	movs	r2, #2
 801a408:	701a      	strb	r2, [r3, #0]
//	this->_sensors.calibrate();
	uint32_t ticks;

	while (true) {
		ticks = osKernelGetTickCount();
 801a40a:	f7f5 faef 	bl	800f9ec <osKernelGetTickCount>
 801a40e:	60f8      	str	r0, [r7, #12]
		this->update();
 801a410:	6878      	ldr	r0, [r7, #4]
 801a412:	f000 f809 	bl	801a428 <_ZN16TWIPR_Estimation6updateEv>
		osDelayUntil(ticks + (uint32_t) (1000.0 / TWIPR_ESTIMATION_FREQUENCY));
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	330a      	adds	r3, #10
 801a41a:	4618      	mov	r0, r3
 801a41c:	f7f5 fbb3 	bl	800fb86 <osDelayUntil>
		ticks = osKernelGetTickCount();
 801a420:	e7f3      	b.n	801a40a <_ZN16TWIPR_Estimation13task_functionEv+0x1e>
 801a422:	bf00      	nop
 801a424:	42c80000 	.word	0x42c80000

0801a428 <_ZN16TWIPR_Estimation6updateEv>:
/* ======================================================= */
void TWIPR_Estimation::stop() {
	twipr_error_handler(0);
}
/* ======================================================= */
void TWIPR_Estimation::update() {
 801a428:	b5b0      	push	{r4, r5, r7, lr}
 801a42a:	b0a8      	sub	sp, #160	; 0xa0
 801a42c:	af00      	add	r7, sp, #0
 801a42e:	6078      	str	r0, [r7, #4]

	// Update the Sensors
	this->config.sensors->update();
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a434:	4618      	mov	r0, r3
 801a436:	f000 fa86 	bl	801a946 <_ZN13TWIPR_Sensors6updateEv>

	// Read the sensor data
	twipr_sensors_data_t data = this->config.sensors->getData();
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a43e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801a442:	4611      	mov	r1, r2
 801a444:	4618      	mov	r0, r3
 801a446:	f000 fa8f 	bl	801a968 <_ZN13TWIPR_Sensors7getDataEv>

	// Orientation Estimation
	this->_orientation_fusion.updateIMU(data.gyr.x, data.gyr.y, data.gyr.z,
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	f603 032c 	addw	r3, r3, #2092	; 0x82c
 801a450:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 801a454:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 801a458:	edd7 6a1e 	vldr	s13, [r7, #120]	; 0x78
 801a45c:	ed97 6a19 	vldr	s12, [r7, #100]	; 0x64
 801a460:	edd7 5a1a 	vldr	s11, [r7, #104]	; 0x68
 801a464:	ed97 5a1b 	vldr	s10, [r7, #108]	; 0x6c
 801a468:	eef0 2a45 	vmov.f32	s5, s10
 801a46c:	eeb0 2a65 	vmov.f32	s4, s11
 801a470:	eef0 1a46 	vmov.f32	s3, s12
 801a474:	eeb0 1a66 	vmov.f32	s2, s13
 801a478:	eef0 0a47 	vmov.f32	s1, s14
 801a47c:	eeb0 0a67 	vmov.f32	s0, s15
 801a480:	4618      	mov	r0, r3
 801a482:	f004 fc0d 	bl	801eca0 <_ZN8Madgwick9updateIMUEffffff>
			data.acc.x, data.acc.y, data.acc.z);

	vqf_real_t gyr[3] = { data.gyr.x, data.gyr.y, data.gyr.z };
 801a486:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 801a48a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801a48e:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 801a492:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801a496:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801a49a:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
 801a49e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 801a4a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801a4a6:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	vqf_real_t acc[3] = { data.acc.x, data.acc.y, data.acc.z };
 801a4aa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801a4ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801a4b2:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
 801a4b6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 801a4ba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801a4be:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
 801a4c2:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801a4c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801a4ca:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	vqf.update(gyr, acc);
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	f603 0358 	addw	r3, r3, #2136	; 0x858
 801a4d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a4d8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801a4dc:	4618      	mov	r0, r3
 801a4de:	f003 fbe1 	bl	801dca4 <_ZN8BasicVQF6updateEPKdS1_>

	vqf_real_t quat[4];

	vqf.getQuat6D(quat);
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	f603 0358 	addw	r3, r3, #2136	; 0x858
 801a4e8:	f107 0208 	add.w	r2, r7, #8
 801a4ec:	4611      	mov	r1, r2
 801a4ee:	4618      	mov	r0, r3
 801a4f0:	f003 fbea 	bl	801dcc8 <_ZNK8BasicVQF9getQuat6DEPd>
	float w = quat[0];
 801a4f4:	ed97 7b02 	vldr	d7, [r7, #8]
 801a4f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801a4fc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	float x = quat[1];
 801a500:	ed97 7b04 	vldr	d7, [r7, #16]
 801a504:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801a508:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	float y = quat[2];
 801a50c:	ed97 7b06 	vldr	d7, [r7, #24]
 801a510:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801a514:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
	float z = quat[3];
 801a518:	ed97 7b08 	vldr	d7, [r7, #32]
 801a51c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801a520:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90

	float theta = atan2(2 * (w * x + y * z), 1 - 2 * (x * x + y * y));
 801a524:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 801a528:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801a52c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a530:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 801a534:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 801a538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801a53c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a540:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801a544:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 801a548:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801a54c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 801a550:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801a554:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a558:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801a55c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a560:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a564:	eef0 0a67 	vmov.f32	s1, s15
 801a568:	eeb0 0a66 	vmov.f32	s0, s13
 801a56c:	f7ff feaa 	bl	801a2c4 <_ZSt5atan2ff>
 801a570:	ed87 0a23 	vstr	s0, [r7, #140]	; 0x8c

//	float theta = this->_orientation_fusion.getRollRadians();
	float theta_dot = data.gyr.x;
 801a574:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	theta_integral = theta_integral + theta_dot * 0.01;
 801a57a:	4b97      	ldr	r3, [pc, #604]	; (801a7d8 <_ZN16TWIPR_Estimation6updateEv+0x3b0>)
 801a57c:	edd3 7a00 	vldr	s15, [r3]
 801a580:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 801a584:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 801a588:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801a58c:	ed9f 5b90 	vldr	d5, [pc, #576]	; 801a7d0 <_ZN16TWIPR_Estimation6updateEv+0x3a8>
 801a590:	ee27 7b05 	vmul.f64	d7, d7, d5
 801a594:	ee36 7b07 	vadd.f64	d7, d6, d7
 801a598:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801a59c:	4b8e      	ldr	r3, [pc, #568]	; (801a7d8 <_ZN16TWIPR_Estimation6updateEv+0x3b0>)
 801a59e:	edc3 7a00 	vstr	s15, [r3]

//	float theta =

	// Get the speed and yaw speed
	float v = (data.speed_left + data.speed_right) / 2
 801a5a2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 801a5a6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 801a5aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a5ae:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801a5b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
			* this->config.model.r_wheel;
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
	float v = (data.speed_left + data.speed_right) / 2
 801a5bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a5c0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float psi_dot = (data.speed_right - data.speed_left)
 801a5c4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 801a5c8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 801a5cc:	ee37 7a67 	vsub.f32	s14, s14, s15
			* this->config.model.r_wheel / this->config.model.distance_wheels;
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 801a5d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
	float psi_dot = (data.speed_right - data.speed_left)
 801a5e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a5e4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

	// Set the current state
	osSemaphoreAcquire(_semaphore, portMAX_DELAY);
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 801a5ee:	f04f 31ff 	mov.w	r1, #4294967295
 801a5f2:	4618      	mov	r0, r3
 801a5f4:	f7f5 fc10 	bl	800fe18 <osSemaphoreAcquire>
	this->state.v = v;
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801a5fe:	605a      	str	r2, [r3, #4]
	this->state.theta = theta;
 801a600:	687b      	ldr	r3, [r7, #4]
 801a602:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801a606:	609a      	str	r2, [r3, #8]
	this->state.theta_dot = theta_dot;
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801a60e:	60da      	str	r2, [r3, #12]
	this->state.psi = 0;;
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	f04f 0200 	mov.w	r2, #0
 801a616:	611a      	str	r2, [r3, #16]
	this->state.psi_dot = psi_dot;
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801a61e:	615a      	str	r2, [r3, #20]

	// Calculate the average
	this->mean_state.v = this->mean_state.v
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	ed93 7a06 	vldr	s14, [r3, #24]
			- (this->_state_buffer[this->_state_buffer_index].v
 801a626:	687b      	ldr	r3, [r7, #4]
 801a628:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 801a62c:	4619      	mov	r1, r3
 801a62e:	687a      	ldr	r2, [r7, #4]
 801a630:	460b      	mov	r3, r1
 801a632:	009b      	lsls	r3, r3, #2
 801a634:	440b      	add	r3, r1
 801a636:	009b      	lsls	r3, r3, #2
 801a638:	4413      	add	r3, r2
 801a63a:	3354      	adds	r3, #84	; 0x54
 801a63c:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 801a640:	ed9f 6a66 	vldr	s12, [pc, #408]	; 801a7dc <_ZN16TWIPR_Estimation6updateEv+0x3b4>
 801a644:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].v
 801a648:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.v / (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	edd3 6a01 	vldr	s13, [r3, #4]
 801a652:	ed9f 6a62 	vldr	s12, [pc, #392]	; 801a7dc <_ZN16TWIPR_Estimation6updateEv+0x3b4>
 801a656:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801a65a:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.v = this->mean_state.v
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	edc3 7a06 	vstr	s15, [r3, #24]
	this->mean_state.theta = this->mean_state.theta
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	ed93 7a07 	vldr	s14, [r3, #28]
			- (this->_state_buffer[this->_state_buffer_index].theta
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 801a670:	4619      	mov	r1, r3
 801a672:	687a      	ldr	r2, [r7, #4]
 801a674:	460b      	mov	r3, r1
 801a676:	009b      	lsls	r3, r3, #2
 801a678:	440b      	add	r3, r1
 801a67a:	009b      	lsls	r3, r3, #2
 801a67c:	4413      	add	r3, r2
 801a67e:	3358      	adds	r3, #88	; 0x58
 801a680:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 801a684:	ed9f 6a55 	vldr	s12, [pc, #340]	; 801a7dc <_ZN16TWIPR_Estimation6updateEv+0x3b4>
 801a688:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].theta
 801a68c:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.theta / (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	edd3 6a02 	vldr	s13, [r3, #8]
 801a696:	ed9f 6a51 	vldr	s12, [pc, #324]	; 801a7dc <_ZN16TWIPR_Estimation6updateEv+0x3b4>
 801a69a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801a69e:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.theta = this->mean_state.theta
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	edc3 7a07 	vstr	s15, [r3, #28]
	this->mean_state.theta_dot = this->mean_state.theta_dot
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	ed93 7a08 	vldr	s14, [r3, #32]
			- (this->_state_buffer[this->_state_buffer_index].theta_dot
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 801a6b4:	4619      	mov	r1, r3
 801a6b6:	687a      	ldr	r2, [r7, #4]
 801a6b8:	460b      	mov	r3, r1
 801a6ba:	009b      	lsls	r3, r3, #2
 801a6bc:	440b      	add	r3, r1
 801a6be:	009b      	lsls	r3, r3, #2
 801a6c0:	4413      	add	r3, r2
 801a6c2:	335c      	adds	r3, #92	; 0x5c
 801a6c4:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 801a6c8:	ed9f 6a44 	vldr	s12, [pc, #272]	; 801a7dc <_ZN16TWIPR_Estimation6updateEv+0x3b4>
 801a6cc:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].theta_dot
 801a6d0:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.theta_dot
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	edd3 6a03 	vldr	s13, [r3, #12]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 801a6da:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801a7dc <_ZN16TWIPR_Estimation6updateEv+0x3b4>
 801a6de:	eec6 7a86 	vdiv.f32	s15, s13, s12
			+ (this->state.theta_dot
 801a6e2:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.theta_dot = this->mean_state.theta_dot
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	edc3 7a08 	vstr	s15, [r3, #32]
	this->mean_state.psi = this->mean_state.psi
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
			- (this->_state_buffer[this->_state_buffer_index].psi
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 801a6f8:	4619      	mov	r1, r3
 801a6fa:	687a      	ldr	r2, [r7, #4]
 801a6fc:	460b      	mov	r3, r1
 801a6fe:	009b      	lsls	r3, r3, #2
 801a700:	440b      	add	r3, r1
 801a702:	009b      	lsls	r3, r3, #2
 801a704:	4413      	add	r3, r2
 801a706:	3360      	adds	r3, #96	; 0x60
 801a708:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 801a70c:	ed9f 6a33 	vldr	s12, [pc, #204]	; 801a7dc <_ZN16TWIPR_Estimation6updateEv+0x3b4>
 801a710:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].psi
 801a714:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.psi / (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	edd3 6a04 	vldr	s13, [r3, #16]
 801a71e:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801a7dc <_ZN16TWIPR_Estimation6updateEv+0x3b4>
 801a722:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801a726:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.psi = this->mean_state.psi
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	this->mean_state.psi_dot =
			this->mean_state.psi_dot
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
					- (this->_state_buffer[this->_state_buffer_index].psi_dot
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 801a73c:	4619      	mov	r1, r3
 801a73e:	687a      	ldr	r2, [r7, #4]
 801a740:	460b      	mov	r3, r1
 801a742:	009b      	lsls	r3, r3, #2
 801a744:	440b      	add	r3, r1
 801a746:	009b      	lsls	r3, r3, #2
 801a748:	4413      	add	r3, r2
 801a74a:	3364      	adds	r3, #100	; 0x64
 801a74c:	edd3 6a00 	vldr	s13, [r3]
							/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 801a750:	ed9f 6a22 	vldr	s12, [pc, #136]	; 801a7dc <_ZN16TWIPR_Estimation6updateEv+0x3b4>
 801a754:	eec6 7a86 	vdiv.f32	s15, s13, s12
					- (this->_state_buffer[this->_state_buffer_index].psi_dot
 801a758:	ee37 7a67 	vsub.f32	s14, s14, s15
					+ (this->state.psi_dot
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	edd3 6a05 	vldr	s13, [r3, #20]
							/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 801a762:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 801a7dc <_ZN16TWIPR_Estimation6updateEv+0x3b4>
 801a766:	eec6 7a86 	vdiv.f32	s15, s13, s12
					+ (this->state.psi_dot
 801a76a:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.psi_dot =
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	this->_state_buffer[this->_state_buffer_index] = this->state;
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 801a77a:	4619      	mov	r1, r3
 801a77c:	687a      	ldr	r2, [r7, #4]
 801a77e:	460b      	mov	r3, r1
 801a780:	009b      	lsls	r3, r3, #2
 801a782:	440b      	add	r3, r1
 801a784:	009b      	lsls	r3, r3, #2
 801a786:	4413      	add	r3, r2
 801a788:	f103 0250 	add.w	r2, r3, #80	; 0x50
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	1d14      	adds	r4, r2, #4
 801a790:	1d1d      	adds	r5, r3, #4
 801a792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a796:	682b      	ldr	r3, [r5, #0]
 801a798:	6023      	str	r3, [r4, #0]
	osSemaphoreRelease(_semaphore);
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 801a7a0:	4618      	mov	r0, r3
 801a7a2:	f7f5 fb8b 	bl	800febc <osSemaphoreRelease>

	this->_state_buffer_index++;
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 801a7ac:	3301      	adds	r3, #1
 801a7ae:	b29a      	uxth	r2, r3
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
	if (this->_state_buffer_index == TWIPR_ESTIMATION_STATE_BUFFER_SIZE) {
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	; 0x824
 801a7bc:	2b64      	cmp	r3, #100	; 0x64
 801a7be:	d103      	bne.n	801a7c8 <_ZN16TWIPR_Estimation6updateEv+0x3a0>
		this->_state_buffer_index = 0;
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	f8a3 2824 	strh.w	r2, [r3, #2084]	; 0x824
	}

}
 801a7c8:	bf00      	nop
 801a7ca:	37a0      	adds	r7, #160	; 0xa0
 801a7cc:	46bd      	mov	sp, r7
 801a7ce:	bdb0      	pop	{r4, r5, r7, pc}
 801a7d0:	47ae147b 	.word	0x47ae147b
 801a7d4:	3f847ae1 	.word	0x3f847ae1
 801a7d8:	24015434 	.word	0x24015434
 801a7dc:	42c80000 	.word	0x42c80000

0801a7e0 <_ZN16TWIPR_Estimation8getStateEv>:
	out = this->mean_state;
	osSemaphoreRelease(_semaphore);
	return out;
}
/* ======================================================= */
twipr_estimation_state_t TWIPR_Estimation::getState() {
 801a7e0:	b5b0      	push	{r4, r5, r7, lr}
 801a7e2:	b082      	sub	sp, #8
 801a7e4:	af00      	add	r7, sp, #0
 801a7e6:	6078      	str	r0, [r7, #4]
 801a7e8:	6039      	str	r1, [r7, #0]
	osSemaphoreAcquire(_semaphore, portMAX_DELAY);
 801a7ea:	683b      	ldr	r3, [r7, #0]
 801a7ec:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 801a7f0:	f04f 31ff 	mov.w	r1, #4294967295
 801a7f4:	4618      	mov	r0, r3
 801a7f6:	f7f5 fb0f 	bl	800fe18 <osSemaphoreAcquire>
	twipr_estimation_state_t out = this->state;
 801a7fa:	687a      	ldr	r2, [r7, #4]
 801a7fc:	683b      	ldr	r3, [r7, #0]
 801a7fe:	4615      	mov	r5, r2
 801a800:	1d1c      	adds	r4, r3, #4
 801a802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a806:	6823      	ldr	r3, [r4, #0]
 801a808:	602b      	str	r3, [r5, #0]
	osSemaphoreRelease(_semaphore);
 801a80a:	683b      	ldr	r3, [r7, #0]
 801a80c:	f8d3 3828 	ldr.w	r3, [r3, #2088]	; 0x828
 801a810:	4618      	mov	r0, r3
 801a812:	f7f5 fb53 	bl	800febc <osSemaphoreRelease>
	return out;
 801a816:	bf00      	nop
}
 801a818:	6878      	ldr	r0, [r7, #4]
 801a81a:	3708      	adds	r7, #8
 801a81c:	46bd      	mov	sp, r7
 801a81e:	bdb0      	pop	{r4, r5, r7, pc}

0801a820 <_ZN16TWIPR_Estimation9getSampleEv>:
/* ======================================================= */
void TWIPR_Estimation::setState(twipr_estimation_state_t state) {
	twipr_error_handler(0);
}
/* ======================================================= */
twipr_logging_estimation_t TWIPR_Estimation::getSample() {
 801a820:	b5b0      	push	{r4, r5, r7, lr}
 801a822:	b088      	sub	sp, #32
 801a824:	af00      	add	r7, sp, #0
 801a826:	61f8      	str	r0, [r7, #28]
 801a828:	61b9      	str	r1, [r7, #24]
	twipr_logging_estimation_t sample;
	sample.state = this->getState();
 801a82a:	69fc      	ldr	r4, [r7, #28]
 801a82c:	463b      	mov	r3, r7
 801a82e:	69b9      	ldr	r1, [r7, #24]
 801a830:	4618      	mov	r0, r3
 801a832:	f7ff ffd5 	bl	801a7e0 <_ZN16TWIPR_Estimation8getStateEv>
 801a836:	4625      	mov	r5, r4
 801a838:	463c      	mov	r4, r7
 801a83a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a83c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a83e:	6823      	ldr	r3, [r4, #0]
 801a840:	602b      	str	r3, [r5, #0]
	return sample;
 801a842:	bf00      	nop
}
 801a844:	69f8      	ldr	r0, [r7, #28]
 801a846:	3720      	adds	r7, #32
 801a848:	46bd      	mov	sp, r7
 801a84a:	bdb0      	pop	{r4, r5, r7, pc}

0801a84c <_Z15estimation_taskPv>:
/* ======================================================= */
void estimation_task(void *estimation) {
 801a84c:	b580      	push	{r7, lr}
 801a84e:	b084      	sub	sp, #16
 801a850:	af00      	add	r7, sp, #0
 801a852:	6078      	str	r0, [r7, #4]
	TWIPR_Estimation *estimator = (TWIPR_Estimation*) estimation;
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	60fb      	str	r3, [r7, #12]
	estimator->task_function();
 801a858:	68f8      	ldr	r0, [r7, #12]
 801a85a:	f7ff fdc7 	bl	801a3ec <_ZN16TWIPR_Estimation13task_functionEv>
}
 801a85e:	bf00      	nop
 801a860:	3710      	adds	r7, #16
 801a862:	46bd      	mov	sp, r7
 801a864:	bd80      	pop	{r7, pc}

0801a866 <_ZN13TWIPR_SensorsC1Ev>:
 *      Author: Dustin Lehmann
 */

#include "twipr_sensors.h"

TWIPR_Sensors::TWIPR_Sensors() {
 801a866:	b580      	push	{r7, lr}
 801a868:	b082      	sub	sp, #8
 801a86a:	af00      	add	r7, sp, #0
 801a86c:	6078      	str	r0, [r7, #4]
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	3304      	adds	r3, #4
 801a872:	4618      	mov	r0, r3
 801a874:	f005 fb5f 	bl	801ff36 <_ZN6BMI160C1Ev>

}
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	4618      	mov	r0, r3
 801a87c:	3708      	adds	r7, #8
 801a87e:	46bd      	mov	sp, r7
 801a880:	bd80      	pop	{r7, pc}
	...

0801a884 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t>:

/* ======================================================= */
uint8_t TWIPR_Sensors::init(twipr_sensors_config_t config) {
 801a884:	b590      	push	{r4, r7, lr}
 801a886:	b08d      	sub	sp, #52	; 0x34
 801a888:	af02      	add	r7, sp, #8
 801a88a:	6078      	str	r0, [r7, #4]
 801a88c:	6039      	str	r1, [r7, #0]

	// Initialize the IMU
	bmi160_gyr_config_t gyr_config;
 801a88e:	4b23      	ldr	r3, [pc, #140]	; (801a91c <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x98>)
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	623b      	str	r3, [r7, #32]
	bmi160_acc_config_t acc_config;
 801a894:	4b22      	ldr	r3, [pc, #136]	; (801a920 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x9c>)
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	61fb      	str	r3, [r7, #28]
	bmi160_config_t imu_config = { .hspi = BOARD_SPI_INTERN, .CS_GPIOx =
 801a89a:	f107 0308 	add.w	r3, r7, #8
 801a89e:	2200      	movs	r2, #0
 801a8a0:	601a      	str	r2, [r3, #0]
 801a8a2:	605a      	str	r2, [r3, #4]
 801a8a4:	609a      	str	r2, [r3, #8]
 801a8a6:	60da      	str	r2, [r3, #12]
 801a8a8:	611a      	str	r2, [r3, #16]
 801a8aa:	4b1e      	ldr	r3, [pc, #120]	; (801a924 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0xa0>)
 801a8ac:	60bb      	str	r3, [r7, #8]
 801a8ae:	4b1e      	ldr	r3, [pc, #120]	; (801a928 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0xa4>)
 801a8b0:	60fb      	str	r3, [r7, #12]
 801a8b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a8b6:	823b      	strh	r3, [r7, #16]
	BOARD_CS_IMU_PORT, .CS_GPIO_Pin =
	BOARD_CS_IMU_PIN, .gyr = gyr_config, .acc = acc_config };
 801a8b8:	f107 0312 	add.w	r3, r7, #18
 801a8bc:	f107 0220 	add.w	r2, r7, #32
 801a8c0:	6810      	ldr	r0, [r2, #0]
 801a8c2:	6018      	str	r0, [r3, #0]
 801a8c4:	f107 0316 	add.w	r3, r7, #22
 801a8c8:	f107 021c 	add.w	r2, r7, #28
 801a8cc:	6810      	ldr	r0, [r2, #0]
 801a8ce:	6018      	str	r0, [r3, #0]
//
	uint8_t success = imu.init(imu_config);
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	1d1c      	adds	r4, r3, #4
 801a8d4:	466a      	mov	r2, sp
 801a8d6:	f107 0314 	add.w	r3, r7, #20
 801a8da:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a8de:	e882 0003 	stmia.w	r2, {r0, r1}
 801a8e2:	f107 0308 	add.w	r3, r7, #8
 801a8e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a8e8:	4620      	mov	r0, r4
 801a8ea:	f005 fb64 	bl	801ffb6 <_ZN6BMI1604initE15bmi160_config_t>
 801a8ee:	4603      	mov	r3, r0
 801a8f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (!success) {
 801a8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	d104      	bne.n	801a906 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x82>
		this->status = TWIPR_SENSORS_STATUS_ERROR;
 801a8fc:	687b      	ldr	r3, [r7, #4]
 801a8fe:	22ff      	movs	r2, #255	; 0xff
 801a900:	701a      	strb	r2, [r3, #0]
		return 0;
 801a902:	2300      	movs	r3, #0
 801a904:	e006      	b.n	801a914 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x90>
	}

	// Initialize

	this->_config = config;
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	683a      	ldr	r2, [r7, #0]
 801a90a:	651a      	str	r2, [r3, #80]	; 0x50

	this->status = TWIPR_SENSORS_STATUS_IDLE;
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	2200      	movs	r2, #0
 801a910:	701a      	strb	r2, [r3, #0]
	return 1;
 801a912:	2301      	movs	r3, #1
}
 801a914:	4618      	mov	r0, r3
 801a916:	372c      	adds	r7, #44	; 0x2c
 801a918:	46bd      	mov	sp, r7
 801a91a:	bd90      	pop	{r4, r7, pc}
 801a91c:	080250e8 	.word	0x080250e8
 801a920:	080250ec 	.word	0x080250ec
 801a924:	240003ec 	.word	0x240003ec
 801a928:	58020400 	.word	0x58020400

0801a92c <_ZN13TWIPR_Sensors5startEv>:
/* ======================================================= */
void TWIPR_Sensors::start() {
 801a92c:	b480      	push	{r7}
 801a92e:	b083      	sub	sp, #12
 801a930:	af00      	add	r7, sp, #0
 801a932:	6078      	str	r0, [r7, #4]
	// TODO
	this->status = TWIPR_SENSORS_STATUS_RUNNING;
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	2201      	movs	r2, #1
 801a938:	701a      	strb	r2, [r3, #0]
}
 801a93a:	bf00      	nop
 801a93c:	370c      	adds	r7, #12
 801a93e:	46bd      	mov	sp, r7
 801a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a944:	4770      	bx	lr

0801a946 <_ZN13TWIPR_Sensors6updateEv>:

	return success;

}
/* ======================================================= */
void TWIPR_Sensors::update() {
 801a946:	b580      	push	{r7, lr}
 801a948:	b082      	sub	sp, #8
 801a94a:	af00      	add	r7, sp, #0
 801a94c:	6078      	str	r0, [r7, #4]
	this->_readImu();
 801a94e:	6878      	ldr	r0, [r7, #4]
 801a950:	f000 f81f 	bl	801a992 <_ZN13TWIPR_Sensors8_readImuEv>
	this->_readMotorSpeed();
 801a954:	6878      	ldr	r0, [r7, #4]
 801a956:	f000 f83b 	bl	801a9d0 <_ZN13TWIPR_Sensors15_readMotorSpeedEv>
	this->_readBatteryVoltage();
 801a95a:	6878      	ldr	r0, [r7, #4]
 801a95c:	f000 f855 	bl	801aa0a <_ZN13TWIPR_Sensors19_readBatteryVoltageEv>
}
 801a960:	bf00      	nop
 801a962:	3708      	adds	r7, #8
 801a964:	46bd      	mov	sp, r7
 801a966:	bd80      	pop	{r7, pc}

0801a968 <_ZN13TWIPR_Sensors7getDataEv>:
/* ======================================================= */
twipr_sensors_data_t TWIPR_Sensors::getData() {
 801a968:	b4b0      	push	{r4, r5, r7}
 801a96a:	b083      	sub	sp, #12
 801a96c:	af00      	add	r7, sp, #0
 801a96e:	6078      	str	r0, [r7, #4]
 801a970:	6039      	str	r1, [r7, #0]
	return this->_data;
 801a972:	687a      	ldr	r2, [r7, #4]
 801a974:	683b      	ldr	r3, [r7, #0]
 801a976:	4615      	mov	r5, r2
 801a978:	f103 0454 	add.w	r4, r3, #84	; 0x54
 801a97c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a97e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801a982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a984:	6823      	ldr	r3, [r4, #0]
 801a986:	602b      	str	r3, [r5, #0]
}
 801a988:	6878      	ldr	r0, [r7, #4]
 801a98a:	370c      	adds	r7, #12
 801a98c:	46bd      	mov	sp, r7
 801a98e:	bcb0      	pop	{r4, r5, r7}
 801a990:	4770      	bx	lr

0801a992 <_ZN13TWIPR_Sensors8_readImuEv>:
	this->imu.fastOffsetCalibration();
	return 0;
}

/* ======================================================= */
void TWIPR_Sensors::_readImu() {
 801a992:	b580      	push	{r7, lr}
 801a994:	b082      	sub	sp, #8
 801a996:	af00      	add	r7, sp, #0
 801a998:	6078      	str	r0, [r7, #4]
	this->imu.update();
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	3304      	adds	r3, #4
 801a99e:	4618      	mov	r0, r3
 801a9a0:	f005 fc37 	bl	8020212 <_ZN6BMI1606updateEv>
	memcpy(&this->_data.acc, &this->imu.acc, sizeof(this->_data.acc));
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	3320      	adds	r3, #32
 801a9ae:	220c      	movs	r2, #12
 801a9b0:	4619      	mov	r1, r3
 801a9b2:	f008 fd06 	bl	80233c2 <memcpy>
	memcpy(&this->_data.gyr, &this->imu.gyr, sizeof(this->_data.gyr));
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	f103 0068 	add.w	r0, r3, #104	; 0x68
 801a9bc:	687b      	ldr	r3, [r7, #4]
 801a9be:	330c      	adds	r3, #12
 801a9c0:	220c      	movs	r2, #12
 801a9c2:	4619      	mov	r1, r3
 801a9c4:	f008 fcfd 	bl	80233c2 <memcpy>
}
 801a9c8:	bf00      	nop
 801a9ca:	3708      	adds	r7, #8
 801a9cc:	46bd      	mov	sp, r7
 801a9ce:	bd80      	pop	{r7, pc}

0801a9d0 <_ZN13TWIPR_Sensors15_readMotorSpeedEv>:

/* ======================================================= */
void TWIPR_Sensors::_readMotorSpeed() {
 801a9d0:	b580      	push	{r7, lr}
 801a9d2:	b084      	sub	sp, #16
 801a9d4:	af00      	add	r7, sp, #0
 801a9d6:	6078      	str	r0, [r7, #4]
	// TODO: I probably need some check here if this has been initialized or so

	twipr_drive_speed_t motor_speed = this->_config.drive->getSpeed();
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a9dc:	4618      	mov	r0, r3
 801a9de:	f7ff fba3 	bl	801a128 <_ZN11TWIPR_Drive8getSpeedEv>
 801a9e2:	eeb0 7a40 	vmov.f32	s14, s0
 801a9e6:	eef0 7a60 	vmov.f32	s15, s1
 801a9ea:	ed87 7a02 	vstr	s14, [r7, #8]
 801a9ee:	edc7 7a03 	vstr	s15, [r7, #12]

	this->_data.speed_left = motor_speed.speed_left;
 801a9f2:	68ba      	ldr	r2, [r7, #8]
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	655a      	str	r2, [r3, #84]	; 0x54
	this->_data.speed_right = motor_speed.speed_right;
 801a9f8:	68fa      	ldr	r2, [r7, #12]
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	659a      	str	r2, [r3, #88]	; 0x58

	nop();
 801a9fe:	f7f9 fbd7 	bl	80141b0 <_Z3nopv>
}
 801aa02:	bf00      	nop
 801aa04:	3710      	adds	r7, #16
 801aa06:	46bd      	mov	sp, r7
 801aa08:	bd80      	pop	{r7, pc}

0801aa0a <_ZN13TWIPR_Sensors19_readBatteryVoltageEv>:

/* ======================================================= */
void TWIPR_Sensors::_readBatteryVoltage() {
 801aa0a:	b580      	push	{r7, lr}
 801aa0c:	b084      	sub	sp, #16
 801aa0e:	af00      	add	r7, sp, #0
 801aa10:	6078      	str	r0, [r7, #4]
	float voltage = this->_config.drive->getVoltage();
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801aa16:	4618      	mov	r0, r3
 801aa18:	f7ff fb56 	bl	801a0c8 <_ZN11TWIPR_Drive10getVoltageEv>
 801aa1c:	ed87 0a03 	vstr	s0, [r7, #12]
	this->_data.battery_voltage = voltage;
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	68fa      	ldr	r2, [r7, #12]
 801aa24:	675a      	str	r2, [r3, #116]	; 0x74
}
 801aa26:	bf00      	nop
 801aa28:	3710      	adds	r7, #16
 801aa2a:	46bd      	mov	sp, r7
 801aa2c:	bd80      	pop	{r7, pc}
	...

0801aa30 <_Z7deg2radf>:

#include "stdint.h"

const float pi = 3.14159265;

inline float deg2rad(float angle) {
 801aa30:	b480      	push	{r7}
 801aa32:	b083      	sub	sp, #12
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	ed87 0a01 	vstr	s0, [r7, #4]
	return angle * pi / 180.0;
 801aa3a:	edd7 7a01 	vldr	s15, [r7, #4]
 801aa3e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801aa60 <_Z7deg2radf+0x30>
 801aa42:	ee67 7a87 	vmul.f32	s15, s15, s14
 801aa46:	ed9f 7a07 	vldr	s14, [pc, #28]	; 801aa64 <_Z7deg2radf+0x34>
 801aa4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801aa4e:	eef0 7a66 	vmov.f32	s15, s13
}
 801aa52:	eeb0 0a67 	vmov.f32	s0, s15
 801aa56:	370c      	adds	r7, #12
 801aa58:	46bd      	mov	sp, r7
 801aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa5e:	4770      	bx	lr
 801aa60:	40490fdb 	.word	0x40490fdb
 801aa64:	43340000 	.word	0x43340000

0801aa68 <firmware>:

uint8_t led_color_array[3] = { 0, 0, 100 };
void debug(uint8_t state);

/* =======================================================*/
void firmware() {
 801aa68:	b580      	push	{r7, lr}
 801aa6a:	af00      	add	r7, sp, #0
	osThreadNew(firmware_task, (void*) &twipr_firmware,
 801aa6c:	4a03      	ldr	r2, [pc, #12]	; (801aa7c <firmware+0x14>)
 801aa6e:	4904      	ldr	r1, [pc, #16]	; (801aa80 <firmware+0x18>)
 801aa70:	4804      	ldr	r0, [pc, #16]	; (801aa84 <firmware+0x1c>)
 801aa72:	f7f4 ffd0 	bl	800fa16 <osThreadNew>
			&firmware_task_attributes);
}
 801aa76:	bf00      	nop
 801aa78:	bd80      	pop	{r7, pc}
 801aa7a:	bf00      	nop
 801aa7c:	080257a0 	.word	0x080257a0
 801aa80:	24015438 	.word	0x24015438
 801aa84:	0801aa89 	.word	0x0801aa89

0801aa88 <_Z13firmware_taskPv>:

/* =======================================================*/
void firmware_task(void *argument) {
 801aa88:	b580      	push	{r7, lr}
 801aa8a:	b084      	sub	sp, #16
 801aa8c:	af00      	add	r7, sp, #0
 801aa8e:	6078      	str	r0, [r7, #4]
	TWIPR_Firmware *firmware = (TWIPR_Firmware*) argument;
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	60fb      	str	r3, [r7, #12]
	firmware->task = xTaskGetCurrentTaskHandle();
 801aa94:	f7f7 fbc8 	bl	8012228 <xTaskGetCurrentTaskHandle>
 801aa98:	4602      	mov	r2, r0
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	firmware->task_function();
 801aaa0:	68f8      	ldr	r0, [r7, #12]
 801aaa2:	f000 f863 	bl	801ab6c <_ZN14TWIPR_Firmware13task_functionEv>
}
 801aaa6:	bf00      	nop
 801aaa8:	3710      	adds	r7, #16
 801aaaa:	46bd      	mov	sp, r7
 801aaac:	bd80      	pop	{r7, pc}

0801aaae <_ZN33twipr_firmware_register_entries_tC1Ev>:
	TWIPR_FIRMWARE_STATE_IDLE = 0,
	TWIPR_FIRMWARE_STATE_RUNNING = 1,
	TWIPR_FIRMWARE_STATE_RESET = 2,
} twipr_firmware_state_t;

typedef struct twipr_firmware_register_entries_t {
 801aaae:	b580      	push	{r7, lr}
 801aab0:	b082      	sub	sp, #8
 801aab2:	af00      	add	r7, sp, #0
 801aab4:	6078      	str	r0, [r7, #4]
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	4618      	mov	r0, r3
 801aaba:	f000 fa83 	bl	801afc4 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tEC1Ev>
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	3314      	adds	r3, #20
 801aac2:	4618      	mov	r0, r3
 801aac4:	f000 faa2 	bl	801b00c <_ZN27core_utils_RegisterFunctionIvA3_iEC1Ev>
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	334c      	adds	r3, #76	; 0x4c
 801aacc:	4618      	mov	r0, r3
 801aace:	f000 fab7 	bl	801b040 <_ZN24core_utils_RegisterEntryImEC1Ev>
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	3368      	adds	r3, #104	; 0x68
 801aad6:	4618      	mov	r0, r3
 801aad8:	f000 fad6 	bl	801b088 <_ZN27core_utils_RegisterFunctionIvhEC1Ev>
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	4618      	mov	r0, r3
 801aae0:	3708      	adds	r7, #8
 801aae2:	46bd      	mov	sp, r7
 801aae4:	bd80      	pop	{r7, pc}

0801aae6 <_ZN14TWIPR_FirmwareC1Ev>:

/* =======================================================*/
TWIPR_Firmware::TWIPR_Firmware() {
 801aae6:	b580      	push	{r7, lr}
 801aae8:	b082      	sub	sp, #8
 801aaea:	af00      	add	r7, sp, #0
 801aaec:	6078      	str	r0, [r7, #4]
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	2101      	movs	r1, #1
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	f000 fa48 	bl	801af88 <_ZN22core_utils_RegisterMapILi60EEC1Et>
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	33fc      	adds	r3, #252	; 0xfc
 801aafc:	4618      	mov	r0, r3
 801aafe:	f7ff ffd6 	bl	801aaae <_ZN33twipr_firmware_register_entries_tC1Ev>
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	2202      	movs	r2, #2
 801ab06:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	2200      	movs	r2, #0
 801ab0e:	f883 2191 	strb.w	r2, [r3, #401]	; 0x191
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 801ab18:	4618      	mov	r0, r3
 801ab1a:	f7ff f967 	bl	8019dec <_ZN11TWIPR_DriveC1Ev>
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 801ab24:	4618      	mov	r0, r3
 801ab26:	f7fb f803 	bl	8015b30 <_ZN26TWIPR_CommunicationManagerC1Ev>
 801ab2a:	687a      	ldr	r2, [r7, #4]
 801ab2c:	f242 1398 	movw	r3, #8600	; 0x2198
 801ab30:	4413      	add	r3, r2
 801ab32:	4618      	mov	r0, r3
 801ab34:	f7fc faa8 	bl	8017088 <_ZN20TWIPR_ControlManagerC1Ev>
 801ab38:	687a      	ldr	r2, [r7, #4]
 801ab3a:	f248 23b0 	movw	r3, #33456	; 0x82b0
 801ab3e:	4413      	add	r3, r2
 801ab40:	4618      	mov	r0, r3
 801ab42:	f7ff fbe9 	bl	801a318 <_ZN16TWIPR_EstimationC1Ev>
 801ab46:	687a      	ldr	r2, [r7, #4]
 801ab48:	f648 33f8 	movw	r3, #35832	; 0x8bf8
 801ab4c:	4413      	add	r3, r2
 801ab4e:	4618      	mov	r0, r3
 801ab50:	f001 f886 	bl	801bc60 <_ZN12TWIPR_SafetyC1Ev>
 801ab54:	687a      	ldr	r2, [r7, #4]
 801ab56:	f648 4308 	movw	r3, #35848	; 0x8c08
 801ab5a:	4413      	add	r3, r2
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	f7ff fe82 	bl	801a866 <_ZN13TWIPR_SensorsC1Ev>

}
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	4618      	mov	r0, r3
 801ab66:	3708      	adds	r7, #8
 801ab68:	46bd      	mov	sp, r7
 801ab6a:	bd80      	pop	{r7, pc}

0801ab6c <_ZN14TWIPR_Firmware13task_functionEv>:

/* =======================================================*/
void TWIPR_Firmware::task_function() {
 801ab6c:	b580      	push	{r7, lr}
 801ab6e:	b082      	sub	sp, #8
 801ab70:	af00      	add	r7, sp, #0
 801ab72:	6078      	str	r0, [r7, #4]
	this->init();
 801ab74:	6878      	ldr	r0, [r7, #4]
 801ab76:	f000 f82f 	bl	801abd8 <_ZN14TWIPR_Firmware4initEv>
	this->start();
 801ab7a:	6878      	ldr	r0, [r7, #4]
 801ab7c:	f000 f9be 	bl	801aefc <_ZN14TWIPR_Firmware5startEv>

	rc_rgb_led_side_1.setColor(0, 0, 0);
 801ab80:	2300      	movs	r3, #0
 801ab82:	2200      	movs	r2, #0
 801ab84:	2100      	movs	r1, #0
 801ab86:	4813      	ldr	r0, [pc, #76]	; (801abd4 <_ZN14TWIPR_Firmware13task_functionEv+0x68>)
 801ab88:	f001 fa82 	bl	801c090 <_ZN19RobotControl_RGBLED8setColorEhhh>
	rc_rgb_led_side_1.state(1);
 801ab8c:	2101      	movs	r1, #1
 801ab8e:	4811      	ldr	r0, [pc, #68]	; (801abd4 <_ZN14TWIPR_Firmware13task_functionEv+0x68>)
 801ab90:	f001 fa9c 	bl	801c0cc <_ZN19RobotControl_RGBLED5stateEh>

	while (true) {

		if (this->_control.mode == TWIPR_CONTROL_MODE_OFF) {
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801ab9a:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d106      	bne.n	801abb0 <_ZN14TWIPR_Firmware13task_functionEv+0x44>
			rc_rgb_led_side_1.setColor(100, 0, 0);
 801aba2:	2300      	movs	r3, #0
 801aba4:	2200      	movs	r2, #0
 801aba6:	2164      	movs	r1, #100	; 0x64
 801aba8:	480a      	ldr	r0, [pc, #40]	; (801abd4 <_ZN14TWIPR_Firmware13task_functionEv+0x68>)
 801abaa:	f001 fa71 	bl	801c090 <_ZN19RobotControl_RGBLED8setColorEhhh>
 801abae:	e00c      	b.n	801abca <_ZN14TWIPR_Firmware13task_functionEv+0x5e>
		} else if (this->_control.mode == TWIPR_CONTROL_MODE_BALANCING) {
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801abb6:	f893 3199 	ldrb.w	r3, [r3, #409]	; 0x199
 801abba:	2b02      	cmp	r3, #2
 801abbc:	d105      	bne.n	801abca <_ZN14TWIPR_Firmware13task_functionEv+0x5e>
			rc_rgb_led_side_1.setColor(0, 100, 0);
 801abbe:	2300      	movs	r3, #0
 801abc0:	2264      	movs	r2, #100	; 0x64
 801abc2:	2100      	movs	r1, #0
 801abc4:	4803      	ldr	r0, [pc, #12]	; (801abd4 <_ZN14TWIPR_Firmware13task_functionEv+0x68>)
 801abc6:	f001 fa63 	bl	801c090 <_ZN19RobotControl_RGBLED8setColorEhhh>
		}

		osDelay(250);
 801abca:	20fa      	movs	r0, #250	; 0xfa
 801abcc:	f7f4 ffc0 	bl	800fb50 <osDelay>
		if (this->_control.mode == TWIPR_CONTROL_MODE_OFF) {
 801abd0:	e7e0      	b.n	801ab94 <_ZN14TWIPR_Firmware13task_functionEv+0x28>
 801abd2:	bf00      	nop
 801abd4:	2401e0fc 	.word	0x2401e0fc

0801abd8 <_ZN14TWIPR_Firmware4initEv>:
	}
}

/* =======================================================*/
void TWIPR_Firmware::init() {
 801abd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abda:	b0c1      	sub	sp, #260	; 0x104
 801abdc:	af0a      	add	r7, sp, #40	; 0x28
 801abde:	6078      	str	r0, [r7, #4]

	uint8_t ret = 0;
 801abe0:	2300      	movs	r3, #0
 801abe2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7

	robot_control_init();
 801abe6:	f001 fad5 	bl	801c194 <_Z18robot_control_initv>
	robot_control_start();
 801abea:	f001 fae5 	bl	801c1b8 <_Z19robot_control_startv>

	rc_rgb_led_status.setColor(120, 40, 0);
 801abee:	2300      	movs	r3, #0
 801abf0:	2228      	movs	r2, #40	; 0x28
 801abf2:	2178      	movs	r1, #120	; 0x78
 801abf4:	48b2      	ldr	r0, [pc, #712]	; (801aec0 <_ZN14TWIPR_Firmware4initEv+0x2e8>)
 801abf6:	f001 fa4b 	bl	801c090 <_ZN19RobotControl_RGBLED8setColorEhhh>
	rc_rgb_led_status.state(1);
 801abfa:	2101      	movs	r1, #1
 801abfc:	48b0      	ldr	r0, [pc, #704]	; (801aec0 <_ZN14TWIPR_Firmware4initEv+0x2e8>)
 801abfe:	f001 fa65 	bl	801c0cc <_ZN19RobotControl_RGBLED5stateEh>

//	while (side_button.check()){
//		osDelay(10);
//	}

	rc_buzzer.setConfig(800, 250, 1);
 801ac02:	2201      	movs	r2, #1
 801ac04:	21fa      	movs	r1, #250	; 0xfa
 801ac06:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 801aec4 <_ZN14TWIPR_Firmware4initEv+0x2ec>
 801ac0a:	48af      	ldr	r0, [pc, #700]	; (801aec8 <_ZN14TWIPR_Firmware4initEv+0x2f0>)
 801ac0c:	f001 fa7e 	bl	801c10c <_ZN19RobotControl_Buzzer9setConfigEfth>
	rc_buzzer.start();
 801ac10:	48ad      	ldr	r0, [pc, #692]	; (801aec8 <_ZN14TWIPR_Firmware4initEv+0x2f0>)
 801ac12:	f001 fa93 	bl	801c13c <_ZN19RobotControl_Buzzer5startEv>

	osDelay(250);
 801ac16:	20fa      	movs	r0, #250	; 0xfa
 801ac18:	f7f4 ff9a 	bl	800fb50 <osDelay>
	// Initialize the communication module
	twipr_communication_config_t twipr_comm_config = { .huart = BOARD_CM4_UART,
 801ac1c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ac20:	222c      	movs	r2, #44	; 0x2c
 801ac22:	2100      	movs	r1, #0
 801ac24:	4618      	mov	r0, r3
 801ac26:	f008 faf6 	bl	8023216 <memset>
 801ac2a:	4ba8      	ldr	r3, [pc, #672]	; (801aecc <_ZN14TWIPR_Firmware4initEv+0x2f4>)
 801ac2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801ac30:	4ba7      	ldr	r3, [pc, #668]	; (801aed0 <_ZN14TWIPR_Firmware4initEv+0x2f8>)
 801ac32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801ac36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801ac3a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 801ac3e:	2304      	movs	r3, #4
 801ac40:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
			.reg_map_control = &this->_control.reg_map, .reg_map_general =
					&this->register_map, .trajectory_rx_buffer =
					this->_control.trajectory_rx_buffer,
			.len_trajectory_buffer = TWIPR_CONTROL_TRAJECTORY_BUFFER_SIZE,
			.reset_uart_exti = CM4_UART_RESET_EXTI, .control = &this->_control,
			.estimation = &this->_estimation, .sensors = &this->_sensors };
 801ac44:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801ac48:	3308      	adds	r3, #8
 801ac4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ac4e:	49a1      	ldr	r1, [pc, #644]	; (801aed4 <_ZN14TWIPR_Firmware4initEv+0x2fc>)
 801ac50:	4618      	mov	r0, r3
 801ac52:	f006 f854 	bl	8020cfe <_ZN15core_utils_GPIOC1EP12GPIO_TypeDeft>
 801ac56:	687a      	ldr	r2, [r7, #4]
 801ac58:	f242 3374 	movw	r3, #9076	; 0x2374
 801ac5c:	4413      	add	r3, r2
 801ac5e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
					this->_control.trajectory_rx_buffer,
 801ac68:	687a      	ldr	r2, [r7, #4]
 801ac6a:	f242 33d0 	movw	r3, #9168	; 0x23d0
 801ac6e:	4413      	add	r3, r2
			.estimation = &this->_estimation, .sensors = &this->_sensors };
 801ac70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			.reset_uart_exti = CM4_UART_RESET_EXTI, .control = &this->_control,
 801ac74:	687a      	ldr	r2, [r7, #4]
 801ac76:	f242 1398 	movw	r3, #8600	; 0x2198
 801ac7a:	4413      	add	r3, r2
			.estimation = &this->_estimation, .sensors = &this->_sensors };
 801ac7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801ac80:	687a      	ldr	r2, [r7, #4]
 801ac82:	f248 23b0 	movw	r3, #33456	; 0x82b0
 801ac86:	4413      	add	r3, r2
 801ac88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801ac8c:	687a      	ldr	r2, [r7, #4]
 801ac8e:	f648 4308 	movw	r3, #35848	; 0x8c08
 801ac92:	4413      	add	r3, r2
 801ac94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

	this->_comm.init(twipr_comm_config);
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	f503 66a6 	add.w	r6, r3, #1328	; 0x530
 801ac9e:	466d      	mov	r5, sp
 801aca0:	f107 0494 	add.w	r4, r7, #148	; 0x94
 801aca4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801aca6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801aca8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801acac:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801acb0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801acb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 801acb6:	4630      	mov	r0, r6
 801acb8:	f7fa ff5a 	bl	8015b70 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t>
//	this->_comm.registerCallback(TWIPR_COMM_CALLBACK_NEW_TRAJECTORY,
//			core_utils_Callback<void, uint16_t>(&this->_control,
//					&TWIPR_ControlManager::newTrajectoryReceived_callback));

// Initialize the sensors
	twipr_sensors_config_t twipr_sensors_config = { .drive = &this->_drive, };
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 801acc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	this->_sensors.init(twipr_sensors_config);
 801acc6:	687a      	ldr	r2, [r7, #4]
 801acc8:	f648 4308 	movw	r3, #35848	; 0x8c08
 801accc:	4413      	add	r3, r2
 801acce:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801acd2:	4618      	mov	r0, r3
 801acd4:	f7ff fdd6 	bl	801a884 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t>

	// Initialize the estimation module
	twipr_estimation_config_t twipr_estimation_config = {
 801acd8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801acdc:	2224      	movs	r2, #36	; 0x24
 801acde:	2100      	movs	r1, #0
 801ace0:	4618      	mov	r0, r3
 801ace2:	f008 fa98 	bl	8023216 <memset>
 801ace6:	2301      	movs	r3, #1
 801ace8:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 801acec:	2301      	movs	r3, #1
 801acee:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
			.drive = &this->_drive, .sensors = &this->_sensors,
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
			.enable_slip_detection = 1, .enable_angle_threshold = 1,
			.angle_threshold = deg2rad(70.0), .model = twipr_model_small };
 801acf8:	663b      	str	r3, [r7, #96]	; 0x60
			.drive = &this->_drive, .sensors = &this->_sensors,
 801acfa:	687a      	ldr	r2, [r7, #4]
 801acfc:	f648 4308 	movw	r3, #35848	; 0x8c08
 801ad00:	4413      	add	r3, r2
			.angle_threshold = deg2rad(70.0), .model = twipr_model_small };
 801ad02:	667b      	str	r3, [r7, #100]	; 0x64
 801ad04:	ed9f 0a74 	vldr	s0, [pc, #464]	; 801aed8 <_ZN14TWIPR_Firmware4initEv+0x300>
 801ad08:	f7ff fe92 	bl	801aa30 <_Z7deg2radf>
 801ad0c:	eef0 7a40 	vmov.f32	s15, s0
 801ad10:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 801ad14:	4b71      	ldr	r3, [pc, #452]	; (801aedc <_ZN14TWIPR_Firmware4initEv+0x304>)
 801ad16:	f107 0470 	add.w	r4, r7, #112	; 0x70
 801ad1a:	461d      	mov	r5, r3
 801ad1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad20:	682b      	ldr	r3, [r5, #0]
 801ad22:	6023      	str	r3, [r4, #0]

	this->_estimation.init(twipr_estimation_config);
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	f248 26b0 	movw	r6, #33456	; 0x82b0
 801ad2a:	441e      	add	r6, r3
 801ad2c:	466d      	mov	r5, sp
 801ad2e:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 801ad32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ad36:	e894 0003 	ldmia.w	r4, {r0, r1}
 801ad3a:	e885 0003 	stmia.w	r5, {r0, r1}
 801ad3e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801ad42:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ad44:	4630      	mov	r0, r6
 801ad46:	f7ff fb17 	bl	801a378 <_ZN16TWIPR_Estimation4initE25twipr_estimation_config_t>

	// Initialize the control module
	twipr_control_config_t twipr_control_config = { .estimation =
 801ad4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ad4e:	2230      	movs	r2, #48	; 0x30
 801ad50:	2100      	movs	r1, #0
 801ad52:	4618      	mov	r0, r3
 801ad54:	f008 fa5f 	bl	8023216 <memset>
 801ad58:	4b61      	ldr	r3, [pc, #388]	; (801aee0 <_ZN14TWIPR_Firmware4initEv+0x308>)
 801ad5a:	65bb      	str	r3, [r7, #88]	; 0x58
 801ad5c:	2364      	movs	r3, #100	; 0x64
 801ad5e:	65fb      	str	r3, [r7, #92]	; 0x5c
			&this->_estimation, .drive = &this->_drive, .max_torque =
 801ad60:	687a      	ldr	r2, [r7, #4]
 801ad62:	f248 23b0 	movw	r3, #33456	; 0x82b0
 801ad66:	4413      	add	r3, r2
	TWIPR_CONTROL_MAX_TORQUE, .freq = 100 };
 801ad68:	633b      	str	r3, [r7, #48]	; 0x30
			&this->_estimation, .drive = &this->_drive, .max_torque =
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
	TWIPR_CONTROL_MAX_TORQUE, .freq = 100 };
 801ad70:	637b      	str	r3, [r7, #52]	; 0x34
	memcpy(twipr_control_config.K, twipr_control_default_K, sizeof(float) * 8);
 801ad72:	4b5c      	ldr	r3, [pc, #368]	; (801aee4 <_ZN14TWIPR_Firmware4initEv+0x30c>)
 801ad74:	f107 0438 	add.w	r4, r7, #56	; 0x38
 801ad78:	461d      	mov	r5, r3
 801ad7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ad7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ad7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801ad82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	this->_control.init(twipr_control_config);
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	f242 1698 	movw	r6, #8600	; 0x2198
 801ad8c:	441e      	add	r6, r3
 801ad8e:	466d      	mov	r5, sp
 801ad90:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801ad94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ad98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ad9c:	6823      	ldr	r3, [r4, #0]
 801ad9e:	602b      	str	r3, [r5, #0]
 801ada0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801ada4:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ada6:	4630      	mov	r0, r6
 801ada8:	f7fc f9a8 	bl	80170fc <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t>
//			core_utils_Callback<void, uint32_t>(this,
//					&TWIPR_Firmware::_controlStep_callback));

// Initialize the drive module
	if (TWIPR_FIRMWARE_USE_MOTORS) {
		twipr_drive_config_t twipr_drive_config =
 801adac:	4b4e      	ldr	r3, [pc, #312]	; (801aee8 <_ZN14TWIPR_Firmware4initEv+0x310>)
 801adae:	f107 040c 	add.w	r4, r7, #12
 801adb2:	461d      	mov	r5, r3
 801adb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801adb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801adb8:	682b      	ldr	r3, [r5, #0]
 801adba:	6023      	str	r3, [r4, #0]
						.modbus_config = { .huart = BOARD_RS485_UART,
								.EN_GPIOx = BOARD_RS485_UART_EN_GPIOx,
								.EN_GPIO_Pin = BOARD_RS485_UART_EN_GPIO_PIN,
								.hardware = MB_UART_DMA }, };

		this->_drive.init(twipr_drive_config);
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	f503 74ce 	add.w	r4, r3, #412	; 0x19c
 801adc2:	466a      	mov	r2, sp
 801adc4:	f107 0318 	add.w	r3, r7, #24
 801adc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801adcc:	e882 0003 	stmia.w	r2, {r0, r1}
 801add0:	f107 030c 	add.w	r3, r7, #12
 801add4:	cb0e      	ldmia	r3, {r1, r2, r3}
 801add6:	4620      	mov	r0, r4
 801add8:	f7ff f82a 	bl	8019e30 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t>

		ret = this->_drive.startup_check();
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 801ade2:	4618      	mov	r0, r3
 801ade4:	f7ff f949 	bl	801a07a <_ZN11TWIPR_Drive13startup_checkEv>
 801ade8:	4603      	mov	r3, r0
 801adea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
		if (!ret) {
 801adee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 801adf2:	2b00      	cmp	r3, #0
 801adf4:	d101      	bne.n	801adfa <_ZN14TWIPR_Firmware4initEv+0x222>
			nop();
 801adf6:	f7f9 f9db 	bl	80141b0 <_Z3nopv>
		}
	}

	// Initialize the supervisor module
	TWIPR_Safety_Config_t safety_config = { .drive = &this->_drive, .control =
 801adfa:	f107 0320 	add.w	r3, r7, #32
 801adfe:	2200      	movs	r2, #0
 801ae00:	601a      	str	r2, [r3, #0]
 801ae02:	605a      	str	r2, [r3, #4]
 801ae04:	609a      	str	r2, [r3, #8]
 801ae06:	60da      	str	r2, [r3, #12]
 801ae08:	4b38      	ldr	r3, [pc, #224]	; (801aeec <_ZN14TWIPR_Firmware4initEv+0x314>)
 801ae0a:	62bb      	str	r3, [r7, #40]	; 0x28
 801ae0c:	4b38      	ldr	r3, [pc, #224]	; (801aef0 <_ZN14TWIPR_Firmware4initEv+0x318>)
 801ae0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
			&this->_control, .max_speed = 50, .off_button = &off_button };
 801ae16:	623b      	str	r3, [r7, #32]
 801ae18:	687a      	ldr	r2, [r7, #4]
 801ae1a:	f242 1398 	movw	r3, #8600	; 0x2198
 801ae1e:	4413      	add	r3, r2
 801ae20:	627b      	str	r3, [r7, #36]	; 0x24

	this->_safety.init(safety_config);
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	f648 30f8 	movw	r0, #35832	; 0x8bf8
 801ae28:	4418      	add	r0, r3
 801ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae2c:	9300      	str	r3, [sp, #0]
 801ae2e:	f107 0320 	add.w	r3, r7, #32
 801ae32:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ae34:	f000 ff1f 	bl	801bc76 <_ZN12TWIPR_Safety4initE21TWIPR_Safety_Config_t>
	// Initialize the data transfer to the compute module
//	HAL_DMA_RegisterCallback(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
//			HAL_DMA_XFER_CPLT_CB_ID, sample_dma_transfer_cmplt_callback);

// Register all communication register entries
	this->reg_entries.firmware_state.set(0x04, &this->register_map,
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	f103 00fc 	add.w	r0, r3, #252	; 0xfc
 801ae3e:	687a      	ldr	r2, [r7, #4]
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801ae46:	2100      	movs	r1, #0
 801ae48:	9100      	str	r1, [sp, #0]
 801ae4a:	2104      	movs	r1, #4
 801ae4c:	f000 f936 	bl	801b0bc <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>
			&this->firmware_state, REGISTER_ENTRY_READ);
	this->reg_entries.tick.set(0x02, &this->register_map, &this->tick,
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 801ae56:	6879      	ldr	r1, [r7, #4]
 801ae58:	687a      	ldr	r2, [r7, #4]
 801ae5a:	f648 4380 	movw	r3, #35968	; 0x8c80
 801ae5e:	4413      	add	r3, r2
 801ae60:	2200      	movs	r2, #0
 801ae62:	9200      	str	r2, [sp, #0]
 801ae64:	460a      	mov	r2, r1
 801ae66:	2102      	movs	r1, #2
 801ae68:	f000 f945 	bl	801b0f6 <_ZN24core_utils_RegisterEntryImE3setEtP11RegisterMapPm19register_entry_rw_t>
			REGISTER_ENTRY_READ);
//	this->reg_entries.led_color_array.set(0x03, &this->register_map, &led_color_array, REGISTER_ENTRY_READWRITE);
	this->reg_entries.debug.set(0x01, &this->register_map,
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	f503 74b2 	add.w	r4, r3, #356	; 0x164
 801ae72:	687d      	ldr	r5, [r7, #4]
			core_utils_Callback<void, uint8_t>(debug));
 801ae74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801ae78:	491e      	ldr	r1, [pc, #120]	; (801aef4 <_ZN14TWIPR_Firmware4initEv+0x31c>)
 801ae7a:	4618      	mov	r0, r3
 801ae7c:	f000 f958 	bl	801b130 <_ZN19core_utils_CallbackIvhEC1EPFvhE>
	this->reg_entries.debug.set(0x01, &this->register_map,
 801ae80:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801ae84:	462a      	mov	r2, r5
 801ae86:	2101      	movs	r1, #1
 801ae88:	4620      	mov	r0, r4
 801ae8a:	f000 f9a1 	bl	801b1d0 <_ZN27core_utils_RegisterFunctionIvhE3setEtP11RegisterMap19core_utils_CallbackIvhE>

	// If everything ran until here: Beep and set the status LED to green

	rc_buzzer.setConfig(900, 250, 1);
 801ae8e:	2201      	movs	r2, #1
 801ae90:	21fa      	movs	r1, #250	; 0xfa
 801ae92:	ed9f 0a19 	vldr	s0, [pc, #100]	; 801aef8 <_ZN14TWIPR_Firmware4initEv+0x320>
 801ae96:	480c      	ldr	r0, [pc, #48]	; (801aec8 <_ZN14TWIPR_Firmware4initEv+0x2f0>)
 801ae98:	f001 f938 	bl	801c10c <_ZN19RobotControl_Buzzer9setConfigEfth>
	rc_buzzer.start();
 801ae9c:	480a      	ldr	r0, [pc, #40]	; (801aec8 <_ZN14TWIPR_Firmware4initEv+0x2f0>)
 801ae9e:	f001 f94d 	bl	801c13c <_ZN19RobotControl_Buzzer5startEv>
	rc_rgb_led_status.setColor(0, 60, 0);
 801aea2:	2300      	movs	r3, #0
 801aea4:	223c      	movs	r2, #60	; 0x3c
 801aea6:	2100      	movs	r1, #0
 801aea8:	4805      	ldr	r0, [pc, #20]	; (801aec0 <_ZN14TWIPR_Firmware4initEv+0x2e8>)
 801aeaa:	f001 f8f1 	bl	801c090 <_ZN19RobotControl_RGBLED8setColorEhhh>
	rc_rgb_led_status.state(1);
 801aeae:	2101      	movs	r1, #1
 801aeb0:	4803      	ldr	r0, [pc, #12]	; (801aec0 <_ZN14TWIPR_Firmware4initEv+0x2e8>)
 801aeb2:	f001 f90b 	bl	801c0cc <_ZN19RobotControl_RGBLED5stateEh>
}
 801aeb6:	bf00      	nop
 801aeb8:	37dc      	adds	r7, #220	; 0xdc
 801aeba:	46bd      	mov	sp, r7
 801aebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aebe:	bf00      	nop
 801aec0:	2401e0f8 	.word	0x2401e0f8
 801aec4:	44480000 	.word	0x44480000
 801aec8:	2401e104 	.word	0x2401e104
 801aecc:	2400080c 	.word	0x2400080c
 801aed0:	24000338 	.word	0x24000338
 801aed4:	58021000 	.word	0x58021000
 801aed8:	428c0000 	.word	0x428c0000
 801aedc:	2400003c 	.word	0x2400003c
 801aee0:	3e99999a 	.word	0x3e99999a
 801aee4:	2400001c 	.word	0x2400001c
 801aee8:	080250fc 	.word	0x080250fc
 801aeec:	42480000 	.word	0x42480000
 801aef0:	2401e0e0 	.word	0x2401e0e0
 801aef4:	0801af5d 	.word	0x0801af5d
 801aef8:	44610000 	.word	0x44610000

0801aefc <_ZN14TWIPR_Firmware5startEv>:

/* =======================================================*/
void TWIPR_Firmware::start() {
 801aefc:	b580      	push	{r7, lr}
 801aefe:	b082      	sub	sp, #8
 801af00:	af00      	add	r7, sp, #0
 801af02:	6078      	str	r0, [r7, #4]

	// Start the communication module
	this->_comm.start();
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 801af0a:	4618      	mov	r0, r3
 801af0c:	f7fa ffd6 	bl	8015ebc <_ZN26TWIPR_CommunicationManager5startEv>

	// Start the Sensors
	this->_sensors.start();
 801af10:	687a      	ldr	r2, [r7, #4]
 801af12:	f648 4308 	movw	r3, #35848	; 0x8c08
 801af16:	4413      	add	r3, r2
 801af18:	4618      	mov	r0, r3
 801af1a:	f7ff fd07 	bl	801a92c <_ZN13TWIPR_Sensors5startEv>

	// Start the estimation module
	this->_estimation.start();
 801af1e:	687a      	ldr	r2, [r7, #4]
 801af20:	f248 23b0 	movw	r3, #33456	; 0x82b0
 801af24:	4413      	add	r3, r2
 801af26:	4618      	mov	r0, r3
 801af28:	f7ff fa4e 	bl	801a3c8 <_ZN16TWIPR_Estimation5startEv>

	// Start the drive
	if (TWIPR_FIRMWARE_USE_MOTORS) {
		this->_drive.start();
 801af2c:	687b      	ldr	r3, [r7, #4]
 801af2e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 801af32:	4618      	mov	r0, r3
 801af34:	f7ff f888 	bl	801a048 <_ZN11TWIPR_Drive5startEv>
	}

	// Start the control module
	this->_control.start();
 801af38:	687a      	ldr	r2, [r7, #4]
 801af3a:	f242 1398 	movw	r3, #8600	; 0x2198
 801af3e:	4413      	add	r3, r2
 801af40:	4618      	mov	r0, r3
 801af42:	f7fc f9f7 	bl	8017334 <_ZN20TWIPR_ControlManager5startEv>
//
//	// Start the Safety Module
	this->_safety.start();
 801af46:	687a      	ldr	r2, [r7, #4]
 801af48:	f648 33f8 	movw	r3, #35832	; 0x8bf8
 801af4c:	4413      	add	r3, r2
 801af4e:	4618      	mov	r0, r3
 801af50:	f000 fea8 	bl	801bca4 <_ZN12TWIPR_Safety5startEv>

//	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
//	TIM15->CCR1 = 5000;
}
 801af54:	bf00      	nop
 801af56:	3708      	adds	r7, #8
 801af58:	46bd      	mov	sp, r7
 801af5a:	bd80      	pop	{r7, pc}

0801af5c <_Z5debugh>:

/* =======================================================*/
//void TWIPR_Firmware::_controlStep_callback(uint32_t tick) {
//	this->tick = tick;
//}
void debug(uint8_t state) {
 801af5c:	b580      	push	{r7, lr}
 801af5e:	b082      	sub	sp, #8
 801af60:	af00      	add	r7, sp, #0
 801af62:	4603      	mov	r3, r0
 801af64:	71fb      	strb	r3, [r7, #7]
	rc_rgb_led_side_2.state(state);
 801af66:	79fb      	ldrb	r3, [r7, #7]
 801af68:	4619      	mov	r1, r3
 801af6a:	4806      	ldr	r0, [pc, #24]	; (801af84 <_Z5debugh+0x28>)
 801af6c:	f001 f8ae 	bl	801c0cc <_ZN19RobotControl_RGBLED5stateEh>
	rc_rgb_led_side_2.setColor(0, 0, 80);
 801af70:	2350      	movs	r3, #80	; 0x50
 801af72:	2200      	movs	r2, #0
 801af74:	2100      	movs	r1, #0
 801af76:	4803      	ldr	r0, [pc, #12]	; (801af84 <_Z5debugh+0x28>)
 801af78:	f001 f88a 	bl	801c090 <_ZN19RobotControl_RGBLED8setColorEhhh>
}
 801af7c:	bf00      	nop
 801af7e:	3708      	adds	r7, #8
 801af80:	46bd      	mov	sp, r7
 801af82:	bd80      	pop	{r7, pc}
 801af84:	2401e100 	.word	0x2401e100

0801af88 <_ZN22core_utils_RegisterMapILi60EEC1Et>:
	core_utils_RegisterMap<size>(uint16_t address) {
 801af88:	b580      	push	{r7, lr}
 801af8a:	b082      	sub	sp, #8
 801af8c:	af00      	add	r7, sp, #0
 801af8e:	6078      	str	r0, [r7, #4]
 801af90:	460b      	mov	r3, r1
 801af92:	807b      	strh	r3, [r7, #2]
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	4618      	mov	r0, r3
 801af98:	f7fc ff52 	bl	8017e40 <_ZN11RegisterMapC1Ev>
 801af9c:	4a08      	ldr	r2, [pc, #32]	; (801afc0 <_ZN22core_utils_RegisterMapILi60EEC1Et+0x38>)
 801af9e:	687b      	ldr	r3, [r7, #4]
 801afa0:	601a      	str	r2, [r3, #0]
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	330c      	adds	r3, #12
 801afa6:	22f0      	movs	r2, #240	; 0xf0
 801afa8:	2100      	movs	r1, #0
 801afaa:	4618      	mov	r0, r3
 801afac:	f008 f933 	bl	8023216 <memset>
		this->address = address;
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	887a      	ldrh	r2, [r7, #2]
 801afb4:	809a      	strh	r2, [r3, #4]
	}
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	4618      	mov	r0, r3
 801afba:	3708      	adds	r7, #8
 801afbc:	46bd      	mov	sp, r7
 801afbe:	bd80      	pop	{r7, pc}
 801afc0:	080257cc 	.word	0x080257cc

0801afc4 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tEC1Ev>:
	core_utils_RegisterEntry() {
 801afc4:	b590      	push	{r4, r7, lr}
 801afc6:	b08b      	sub	sp, #44	; 0x2c
 801afc8:	af00      	add	r7, sp, #0
 801afca:	6078      	str	r0, [r7, #4]
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	4618      	mov	r0, r3
 801afd0:	f7fb ff46 	bl	8016e60 <_ZN13RegisterEntryC1Ev>
 801afd4:	4a0c      	ldr	r2, [pc, #48]	; (801b008 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tEC1Ev+0x44>)
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	601a      	str	r2, [r3, #0]
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	2201      	movs	r2, #1
 801afde:	71da      	strb	r2, [r3, #7]
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	f103 0410 	add.w	r4, r3, #16
 801afe6:	f107 0308 	add.w	r3, r7, #8
 801afea:	4618      	mov	r0, r3
 801afec:	f7f9 faf8 	bl	80145e0 <_ZN19core_utils_CallbackIvvEC1Ev>
 801aff0:	f107 0308 	add.w	r3, r7, #8
 801aff4:	4619      	mov	r1, r3
 801aff6:	4620      	mov	r0, r4
 801aff8:	f7fb ff5a 	bl	8016eb0 <_ZN8CallbackC1EOS_>
	}
 801affc:	687b      	ldr	r3, [r7, #4]
 801affe:	4618      	mov	r0, r3
 801b000:	372c      	adds	r7, #44	; 0x2c
 801b002:	46bd      	mov	sp, r7
 801b004:	bd90      	pop	{r4, r7, pc}
 801b006:	bf00      	nop
 801b008:	080258ac 	.word	0x080258ac

0801b00c <_ZN27core_utils_RegisterFunctionIvA3_iEC1Ev>:
	core_utils_RegisterFunction() {
 801b00c:	b580      	push	{r7, lr}
 801b00e:	b082      	sub	sp, #8
 801b010:	af00      	add	r7, sp, #0
 801b012:	6078      	str	r0, [r7, #4]
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	4618      	mov	r0, r3
 801b018:	f7fb ff22 	bl	8016e60 <_ZN13RegisterEntryC1Ev>
 801b01c:	4a07      	ldr	r2, [pc, #28]	; (801b03c <_ZN27core_utils_RegisterFunctionIvA3_iEC1Ev+0x30>)
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	601a      	str	r2, [r3, #0]
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	2202      	movs	r2, #2
 801b026:	751a      	strb	r2, [r3, #20]
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	3318      	adds	r3, #24
 801b02c:	4618      	mov	r0, r3
 801b02e:	f000 f8ed 	bl	801b20c <_ZN19core_utils_CallbackIvA3_iEC1Ev>
	}
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	4618      	mov	r0, r3
 801b036:	3708      	adds	r7, #8
 801b038:	46bd      	mov	sp, r7
 801b03a:	bd80      	pop	{r7, pc}
 801b03c:	0802586c 	.word	0x0802586c

0801b040 <_ZN24core_utils_RegisterEntryImEC1Ev>:
	core_utils_RegisterEntry() {
 801b040:	b590      	push	{r4, r7, lr}
 801b042:	b08b      	sub	sp, #44	; 0x2c
 801b044:	af00      	add	r7, sp, #0
 801b046:	6078      	str	r0, [r7, #4]
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	4618      	mov	r0, r3
 801b04c:	f7fb ff08 	bl	8016e60 <_ZN13RegisterEntryC1Ev>
 801b050:	4a0c      	ldr	r2, [pc, #48]	; (801b084 <_ZN24core_utils_RegisterEntryImEC1Ev+0x44>)
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	601a      	str	r2, [r3, #0]
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	2201      	movs	r2, #1
 801b05a:	731a      	strb	r2, [r3, #12]
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	f103 0418 	add.w	r4, r3, #24
 801b062:	f107 0308 	add.w	r3, r7, #8
 801b066:	4618      	mov	r0, r3
 801b068:	f7f9 faba 	bl	80145e0 <_ZN19core_utils_CallbackIvvEC1Ev>
 801b06c:	f107 0308 	add.w	r3, r7, #8
 801b070:	4619      	mov	r1, r3
 801b072:	4620      	mov	r0, r4
 801b074:	f7fb ff1c 	bl	8016eb0 <_ZN8CallbackC1EOS_>
	}
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	4618      	mov	r0, r3
 801b07c:	372c      	adds	r7, #44	; 0x2c
 801b07e:	46bd      	mov	sp, r7
 801b080:	bd90      	pop	{r4, r7, pc}
 801b082:	bf00      	nop
 801b084:	0802583c 	.word	0x0802583c

0801b088 <_ZN27core_utils_RegisterFunctionIvhEC1Ev>:
	core_utils_RegisterFunction() {
 801b088:	b580      	push	{r7, lr}
 801b08a:	b082      	sub	sp, #8
 801b08c:	af00      	add	r7, sp, #0
 801b08e:	6078      	str	r0, [r7, #4]
 801b090:	687b      	ldr	r3, [r7, #4]
 801b092:	4618      	mov	r0, r3
 801b094:	f7fb fee4 	bl	8016e60 <_ZN13RegisterEntryC1Ev>
 801b098:	4a07      	ldr	r2, [pc, #28]	; (801b0b8 <_ZN27core_utils_RegisterFunctionIvhEC1Ev+0x30>)
 801b09a:	687b      	ldr	r3, [r7, #4]
 801b09c:	601a      	str	r2, [r3, #0]
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	2202      	movs	r2, #2
 801b0a2:	71da      	strb	r2, [r3, #7]
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	330c      	adds	r3, #12
 801b0a8:	4618      	mov	r0, r3
 801b0aa:	f000 f8cd 	bl	801b248 <_ZN19core_utils_CallbackIvhEC1Ev>
	}
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	4618      	mov	r0, r3
 801b0b2:	3708      	adds	r7, #8
 801b0b4:	46bd      	mov	sp, r7
 801b0b6:	bd80      	pop	{r7, pc}
 801b0b8:	080257fc 	.word	0x080257fc

0801b0bc <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>:
	void set(uint16_t address, RegisterMap *map, T *data,
 801b0bc:	b580      	push	{r7, lr}
 801b0be:	b084      	sub	sp, #16
 801b0c0:	af00      	add	r7, sp, #0
 801b0c2:	60f8      	str	r0, [r7, #12]
 801b0c4:	607a      	str	r2, [r7, #4]
 801b0c6:	603b      	str	r3, [r7, #0]
 801b0c8:	460b      	mov	r3, r1
 801b0ca:	817b      	strh	r3, [r7, #10]
		this->address = address;
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	897a      	ldrh	r2, [r7, #10]
 801b0d0:	811a      	strh	r2, [r3, #8]
		this->data = data;
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	683a      	ldr	r2, [r7, #0]
 801b0d6:	60da      	str	r2, [r3, #12]
		map->addEntry(address, this);
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	3308      	adds	r3, #8
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	68fa      	ldr	r2, [r7, #12]
 801b0e2:	8979      	ldrh	r1, [r7, #10]
 801b0e4:	6878      	ldr	r0, [r7, #4]
 801b0e6:	4798      	blx	r3
		this->rw = rw;
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	7e3a      	ldrb	r2, [r7, #24]
 801b0ec:	729a      	strb	r2, [r3, #10]
	}
 801b0ee:	bf00      	nop
 801b0f0:	3710      	adds	r7, #16
 801b0f2:	46bd      	mov	sp, r7
 801b0f4:	bd80      	pop	{r7, pc}

0801b0f6 <_ZN24core_utils_RegisterEntryImE3setEtP11RegisterMapPm19register_entry_rw_t>:
	void set(uint16_t address, RegisterMap *map, T *data,
 801b0f6:	b580      	push	{r7, lr}
 801b0f8:	b084      	sub	sp, #16
 801b0fa:	af00      	add	r7, sp, #0
 801b0fc:	60f8      	str	r0, [r7, #12]
 801b0fe:	607a      	str	r2, [r7, #4]
 801b100:	603b      	str	r3, [r7, #0]
 801b102:	460b      	mov	r3, r1
 801b104:	817b      	strh	r3, [r7, #10]
		this->address = address;
 801b106:	68fb      	ldr	r3, [r7, #12]
 801b108:	897a      	ldrh	r2, [r7, #10]
 801b10a:	81da      	strh	r2, [r3, #14]
		this->data = data;
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	683a      	ldr	r2, [r7, #0]
 801b110:	615a      	str	r2, [r3, #20]
		map->addEntry(address, this);
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	681b      	ldr	r3, [r3, #0]
 801b116:	3308      	adds	r3, #8
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	68fa      	ldr	r2, [r7, #12]
 801b11c:	8979      	ldrh	r1, [r7, #10]
 801b11e:	6878      	ldr	r0, [r7, #4]
 801b120:	4798      	blx	r3
		this->rw = rw;
 801b122:	68fb      	ldr	r3, [r7, #12]
 801b124:	7e3a      	ldrb	r2, [r7, #24]
 801b126:	741a      	strb	r2, [r3, #16]
	}
 801b128:	bf00      	nop
 801b12a:	3710      	adds	r7, #16
 801b12c:	46bd      	mov	sp, r7
 801b12e:	bd80      	pop	{r7, pc}

0801b130 <_ZN19core_utils_CallbackIvhEC1EPFvhE>:
	core_utils_Callback(R (*function)(A)) {
 801b130:	b5b0      	push	{r4, r5, r7, lr}
 801b132:	b088      	sub	sp, #32
 801b134:	af00      	add	r7, sp, #0
 801b136:	6078      	str	r0, [r7, #4]
 801b138:	6039      	str	r1, [r7, #0]
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	4618      	mov	r0, r3
 801b13e:	f7f8 fd27 	bl	8013b90 <_ZN8CallbackC1Ev>
 801b142:	4a12      	ldr	r2, [pc, #72]	; (801b18c <_ZN19core_utils_CallbackIvhEC1EPFvhE+0x5c>)
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	601a      	str	r2, [r3, #0]
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	2200      	movs	r2, #0
 801b14c:	711a      	strb	r2, [r3, #4]
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	3308      	adds	r3, #8
 801b152:	2100      	movs	r1, #0
 801b154:	4618      	mov	r0, r3
 801b156:	f000 f895 	bl	801b284 <_ZN26core_utils_FunctionPointerIvhEC1EPFvhE>
		_fp = core_utils_FunctionPointer<R, A>(function);
 801b15a:	f107 0308 	add.w	r3, r7, #8
 801b15e:	6839      	ldr	r1, [r7, #0]
 801b160:	4618      	mov	r0, r3
 801b162:	f000 f88f 	bl	801b284 <_ZN26core_utils_FunctionPointerIvhEC1EPFvhE>
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	f103 0408 	add.w	r4, r3, #8
 801b16c:	f107 0508 	add.w	r5, r7, #8
 801b170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b174:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b178:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	2201      	movs	r2, #1
 801b180:	711a      	strb	r2, [r3, #4]
	}
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	4618      	mov	r0, r3
 801b186:	3720      	adds	r7, #32
 801b188:	46bd      	mov	sp, r7
 801b18a:	bdb0      	pop	{r4, r5, r7, pc}
 801b18c:	0802582c 	.word	0x0802582c

0801b190 <_ZN19core_utils_CallbackIvhEaSERKS0_>:
class core_utils_Callback: public Callback {
 801b190:	b5b0      	push	{r4, r5, r7, lr}
 801b192:	b082      	sub	sp, #8
 801b194:	af00      	add	r7, sp, #0
 801b196:	6078      	str	r0, [r7, #4]
 801b198:	6039      	str	r1, [r7, #0]
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	683a      	ldr	r2, [r7, #0]
 801b19e:	4611      	mov	r1, r2
 801b1a0:	4618      	mov	r0, r3
 801b1a2:	f7f8 fd1a 	bl	8013bda <_ZN8CallbackaSERKS_>
 801b1a6:	683b      	ldr	r3, [r7, #0]
 801b1a8:	791a      	ldrb	r2, [r3, #4]
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	711a      	strb	r2, [r3, #4]
 801b1ae:	687a      	ldr	r2, [r7, #4]
 801b1b0:	683b      	ldr	r3, [r7, #0]
 801b1b2:	f102 0408 	add.w	r4, r2, #8
 801b1b6:	f103 0508 	add.w	r5, r3, #8
 801b1ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b1bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b1be:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b1c2:	e884 0003 	stmia.w	r4, {r0, r1}
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	4618      	mov	r0, r3
 801b1ca:	3708      	adds	r7, #8
 801b1cc:	46bd      	mov	sp, r7
 801b1ce:	bdb0      	pop	{r4, r5, r7, pc}

0801b1d0 <_ZN27core_utils_RegisterFunctionIvhE3setEtP11RegisterMap19core_utils_CallbackIvhE>:
	void set(uint16_t address, RegisterMap *map,
 801b1d0:	b580      	push	{r7, lr}
 801b1d2:	b084      	sub	sp, #16
 801b1d4:	af00      	add	r7, sp, #0
 801b1d6:	60f8      	str	r0, [r7, #12]
 801b1d8:	607a      	str	r2, [r7, #4]
 801b1da:	603b      	str	r3, [r7, #0]
 801b1dc:	460b      	mov	r3, r1
 801b1de:	817b      	strh	r3, [r7, #10]
		this->address = address;
 801b1e0:	68fb      	ldr	r3, [r7, #12]
 801b1e2:	897a      	ldrh	r2, [r7, #10]
 801b1e4:	811a      	strh	r2, [r3, #8]
		this->function = function;
 801b1e6:	68fb      	ldr	r3, [r7, #12]
 801b1e8:	330c      	adds	r3, #12
 801b1ea:	6839      	ldr	r1, [r7, #0]
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	f7ff ffcf 	bl	801b190 <_ZN19core_utils_CallbackIvhEaSERKS0_>
		map->addEntry(this->address, this);
 801b1f2:	687b      	ldr	r3, [r7, #4]
 801b1f4:	681b      	ldr	r3, [r3, #0]
 801b1f6:	3308      	adds	r3, #8
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	68fa      	ldr	r2, [r7, #12]
 801b1fc:	8911      	ldrh	r1, [r2, #8]
 801b1fe:	68fa      	ldr	r2, [r7, #12]
 801b200:	6878      	ldr	r0, [r7, #4]
 801b202:	4798      	blx	r3
	}
 801b204:	bf00      	nop
 801b206:	3710      	adds	r7, #16
 801b208:	46bd      	mov	sp, r7
 801b20a:	bd80      	pop	{r7, pc}

0801b20c <_ZN19core_utils_CallbackIvA3_iEC1Ev>:
	core_utils_Callback() {
 801b20c:	b580      	push	{r7, lr}
 801b20e:	b082      	sub	sp, #8
 801b210:	af00      	add	r7, sp, #0
 801b212:	6078      	str	r0, [r7, #4]
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	4618      	mov	r0, r3
 801b218:	f7f8 fcba 	bl	8013b90 <_ZN8CallbackC1Ev>
 801b21c:	4a09      	ldr	r2, [pc, #36]	; (801b244 <_ZN19core_utils_CallbackIvA3_iEC1Ev+0x38>)
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	601a      	str	r2, [r3, #0]
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	2200      	movs	r2, #0
 801b226:	711a      	strb	r2, [r3, #4]
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	3308      	adds	r3, #8
 801b22c:	2100      	movs	r1, #0
 801b22e:	4618      	mov	r0, r3
 801b230:	f000 f836 	bl	801b2a0 <_ZN26core_utils_FunctionPointerIvA3_iEC1EPFvPiE>
		this->registered = 0;
 801b234:	687b      	ldr	r3, [r7, #4]
 801b236:	2200      	movs	r2, #0
 801b238:	711a      	strb	r2, [r3, #4]
	}
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	4618      	mov	r0, r3
 801b23e:	3708      	adds	r7, #8
 801b240:	46bd      	mov	sp, r7
 801b242:	bd80      	pop	{r7, pc}
 801b244:	0802589c 	.word	0x0802589c

0801b248 <_ZN19core_utils_CallbackIvhEC1Ev>:
	core_utils_Callback() {
 801b248:	b580      	push	{r7, lr}
 801b24a:	b082      	sub	sp, #8
 801b24c:	af00      	add	r7, sp, #0
 801b24e:	6078      	str	r0, [r7, #4]
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	4618      	mov	r0, r3
 801b254:	f7f8 fc9c 	bl	8013b90 <_ZN8CallbackC1Ev>
 801b258:	4a09      	ldr	r2, [pc, #36]	; (801b280 <_ZN19core_utils_CallbackIvhEC1Ev+0x38>)
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	601a      	str	r2, [r3, #0]
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	2200      	movs	r2, #0
 801b262:	711a      	strb	r2, [r3, #4]
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	3308      	adds	r3, #8
 801b268:	2100      	movs	r1, #0
 801b26a:	4618      	mov	r0, r3
 801b26c:	f000 f80a 	bl	801b284 <_ZN26core_utils_FunctionPointerIvhEC1EPFvhE>
		this->registered = 0;
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	2200      	movs	r2, #0
 801b274:	711a      	strb	r2, [r3, #4]
	}
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	4618      	mov	r0, r3
 801b27a:	3708      	adds	r7, #8
 801b27c:	46bd      	mov	sp, r7
 801b27e:	bd80      	pop	{r7, pc}
 801b280:	0802582c 	.word	0x0802582c

0801b284 <_ZN26core_utils_FunctionPointerIvhEC1EPFvhE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 801b284:	b580      	push	{r7, lr}
 801b286:	b082      	sub	sp, #8
 801b288:	af00      	add	r7, sp, #0
 801b28a:	6078      	str	r0, [r7, #4]
 801b28c:	6039      	str	r1, [r7, #0]
        attach(function);
 801b28e:	6839      	ldr	r1, [r7, #0]
 801b290:	6878      	ldr	r0, [r7, #4]
 801b292:	f000 f813 	bl	801b2bc <_ZN26core_utils_FunctionPointerIvhE6attachEPFvhE>
    }
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	4618      	mov	r0, r3
 801b29a:	3708      	adds	r7, #8
 801b29c:	46bd      	mov	sp, r7
 801b29e:	bd80      	pop	{r7, pc}

0801b2a0 <_ZN26core_utils_FunctionPointerIvA3_iEC1EPFvPiE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 801b2a0:	b580      	push	{r7, lr}
 801b2a2:	b082      	sub	sp, #8
 801b2a4:	af00      	add	r7, sp, #0
 801b2a6:	6078      	str	r0, [r7, #4]
 801b2a8:	6039      	str	r1, [r7, #0]
        attach(function);
 801b2aa:	6839      	ldr	r1, [r7, #0]
 801b2ac:	6878      	ldr	r0, [r7, #4]
 801b2ae:	f000 f816 	bl	801b2de <_ZN26core_utils_FunctionPointerIvA3_iE6attachEPFvPiE>
    }
 801b2b2:	687b      	ldr	r3, [r7, #4]
 801b2b4:	4618      	mov	r0, r3
 801b2b6:	3708      	adds	r7, #8
 801b2b8:	46bd      	mov	sp, r7
 801b2ba:	bd80      	pop	{r7, pc}

0801b2bc <_ZN26core_utils_FunctionPointerIvhE6attachEPFvhE>:
    void attach(R (*function)(A1)) {
 801b2bc:	b480      	push	{r7}
 801b2be:	b083      	sub	sp, #12
 801b2c0:	af00      	add	r7, sp, #0
 801b2c2:	6078      	str	r0, [r7, #4]
 801b2c4:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	683a      	ldr	r2, [r7, #0]
 801b2ca:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	2200      	movs	r2, #0
 801b2d0:	615a      	str	r2, [r3, #20]
    }
 801b2d2:	bf00      	nop
 801b2d4:	370c      	adds	r7, #12
 801b2d6:	46bd      	mov	sp, r7
 801b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2dc:	4770      	bx	lr

0801b2de <_ZN26core_utils_FunctionPointerIvA3_iE6attachEPFvPiE>:
    void attach(R (*function)(A1)) {
 801b2de:	b480      	push	{r7}
 801b2e0:	b083      	sub	sp, #12
 801b2e2:	af00      	add	r7, sp, #0
 801b2e4:	6078      	str	r0, [r7, #4]
 801b2e6:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	683a      	ldr	r2, [r7, #0]
 801b2ec:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801b2ee:	687b      	ldr	r3, [r7, #4]
 801b2f0:	2200      	movs	r2, #0
 801b2f2:	615a      	str	r2, [r3, #20]
    }
 801b2f4:	bf00      	nop
 801b2f6:	370c      	adds	r7, #12
 801b2f8:	46bd      	mov	sp, r7
 801b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2fe:	4770      	bx	lr

0801b300 <_Z41__static_initialization_and_destruction_0ii>:
 801b300:	b580      	push	{r7, lr}
 801b302:	b082      	sub	sp, #8
 801b304:	af00      	add	r7, sp, #0
 801b306:	6078      	str	r0, [r7, #4]
 801b308:	6039      	str	r1, [r7, #0]
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	2b01      	cmp	r3, #1
 801b30e:	d107      	bne.n	801b320 <_Z41__static_initialization_and_destruction_0ii+0x20>
 801b310:	683b      	ldr	r3, [r7, #0]
 801b312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b316:	4293      	cmp	r3, r2
 801b318:	d102      	bne.n	801b320 <_Z41__static_initialization_and_destruction_0ii+0x20>
TWIPR_Firmware twipr_firmware;
 801b31a:	4803      	ldr	r0, [pc, #12]	; (801b328 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 801b31c:	f7ff fbe3 	bl	801aae6 <_ZN14TWIPR_FirmwareC1Ev>
}
 801b320:	bf00      	nop
 801b322:	3708      	adds	r7, #8
 801b324:	46bd      	mov	sp, r7
 801b326:	bd80      	pop	{r7, pc}
 801b328:	24015438 	.word	0x24015438

0801b32c <_ZN22core_utils_RegisterMapILi60EE5writeEtPv>:
	void write(uint16_t address, void *data) {
 801b32c:	b580      	push	{r7, lr}
 801b32e:	b084      	sub	sp, #16
 801b330:	af00      	add	r7, sp, #0
 801b332:	60f8      	str	r0, [r7, #12]
 801b334:	460b      	mov	r3, r1
 801b336:	607a      	str	r2, [r7, #4]
 801b338:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 801b33a:	897b      	ldrh	r3, [r7, #10]
 801b33c:	68fa      	ldr	r2, [r7, #12]
 801b33e:	3302      	adds	r3, #2
 801b340:	009b      	lsls	r3, r3, #2
 801b342:	4413      	add	r3, r2
 801b344:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 801b346:	2b00      	cmp	r3, #0
 801b348:	d015      	beq.n	801b376 <_ZN22core_utils_RegisterMapILi60EE5writeEtPv+0x4a>
 801b34a:	897b      	ldrh	r3, [r7, #10]
 801b34c:	68fa      	ldr	r2, [r7, #12]
 801b34e:	3302      	adds	r3, #2
 801b350:	009b      	lsls	r3, r3, #2
 801b352:	4413      	add	r3, r2
 801b354:	6859      	ldr	r1, [r3, #4]
 801b356:	897b      	ldrh	r3, [r7, #10]
 801b358:	68fa      	ldr	r2, [r7, #12]
 801b35a:	3302      	adds	r3, #2
 801b35c:	009b      	lsls	r3, r3, #2
 801b35e:	4413      	add	r3, r2
 801b360:	685b      	ldr	r3, [r3, #4]
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	3320      	adds	r3, #32
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	4608      	mov	r0, r1
 801b36a:	4798      	blx	r3
 801b36c:	4603      	mov	r3, r0
 801b36e:	2b01      	cmp	r3, #1
 801b370:	d101      	bne.n	801b376 <_ZN22core_utils_RegisterMapILi60EE5writeEtPv+0x4a>
 801b372:	2301      	movs	r3, #1
 801b374:	e000      	b.n	801b378 <_ZN22core_utils_RegisterMapILi60EE5writeEtPv+0x4c>
 801b376:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d00f      	beq.n	801b39c <_ZN22core_utils_RegisterMapILi60EE5writeEtPv+0x70>
			this->entries[address]->write(data);
 801b37c:	897b      	ldrh	r3, [r7, #10]
 801b37e:	68fa      	ldr	r2, [r7, #12]
 801b380:	3302      	adds	r3, #2
 801b382:	009b      	lsls	r3, r3, #2
 801b384:	4413      	add	r3, r2
 801b386:	6858      	ldr	r0, [r3, #4]
 801b388:	897b      	ldrh	r3, [r7, #10]
 801b38a:	68fa      	ldr	r2, [r7, #12]
 801b38c:	3302      	adds	r3, #2
 801b38e:	009b      	lsls	r3, r3, #2
 801b390:	4413      	add	r3, r2
 801b392:	685b      	ldr	r3, [r3, #4]
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	681b      	ldr	r3, [r3, #0]
 801b398:	6879      	ldr	r1, [r7, #4]
 801b39a:	4798      	blx	r3
	}
 801b39c:	bf00      	nop
 801b39e:	3710      	adds	r7, #16
 801b3a0:	46bd      	mov	sp, r7
 801b3a2:	bd80      	pop	{r7, pc}

0801b3a4 <_ZN22core_utils_RegisterMapILi60EE5writeEtPh>:
	void write(uint16_t address, uint8_t *data) {
 801b3a4:	b580      	push	{r7, lr}
 801b3a6:	b084      	sub	sp, #16
 801b3a8:	af00      	add	r7, sp, #0
 801b3aa:	60f8      	str	r0, [r7, #12]
 801b3ac:	460b      	mov	r3, r1
 801b3ae:	607a      	str	r2, [r7, #4]
 801b3b0:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 801b3b2:	897b      	ldrh	r3, [r7, #10]
 801b3b4:	68fa      	ldr	r2, [r7, #12]
 801b3b6:	3302      	adds	r3, #2
 801b3b8:	009b      	lsls	r3, r3, #2
 801b3ba:	4413      	add	r3, r2
 801b3bc:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d015      	beq.n	801b3ee <_ZN22core_utils_RegisterMapILi60EE5writeEtPh+0x4a>
 801b3c2:	897b      	ldrh	r3, [r7, #10]
 801b3c4:	68fa      	ldr	r2, [r7, #12]
 801b3c6:	3302      	adds	r3, #2
 801b3c8:	009b      	lsls	r3, r3, #2
 801b3ca:	4413      	add	r3, r2
 801b3cc:	6859      	ldr	r1, [r3, #4]
 801b3ce:	897b      	ldrh	r3, [r7, #10]
 801b3d0:	68fa      	ldr	r2, [r7, #12]
 801b3d2:	3302      	adds	r3, #2
 801b3d4:	009b      	lsls	r3, r3, #2
 801b3d6:	4413      	add	r3, r2
 801b3d8:	685b      	ldr	r3, [r3, #4]
 801b3da:	681b      	ldr	r3, [r3, #0]
 801b3dc:	3320      	adds	r3, #32
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	4608      	mov	r0, r1
 801b3e2:	4798      	blx	r3
 801b3e4:	4603      	mov	r3, r0
 801b3e6:	2b01      	cmp	r3, #1
 801b3e8:	d101      	bne.n	801b3ee <_ZN22core_utils_RegisterMapILi60EE5writeEtPh+0x4a>
 801b3ea:	2301      	movs	r3, #1
 801b3ec:	e000      	b.n	801b3f0 <_ZN22core_utils_RegisterMapILi60EE5writeEtPh+0x4c>
 801b3ee:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d010      	beq.n	801b416 <_ZN22core_utils_RegisterMapILi60EE5writeEtPh+0x72>
			this->entries[address]->write(data);
 801b3f4:	897b      	ldrh	r3, [r7, #10]
 801b3f6:	68fa      	ldr	r2, [r7, #12]
 801b3f8:	3302      	adds	r3, #2
 801b3fa:	009b      	lsls	r3, r3, #2
 801b3fc:	4413      	add	r3, r2
 801b3fe:	6858      	ldr	r0, [r3, #4]
 801b400:	897b      	ldrh	r3, [r7, #10]
 801b402:	68fa      	ldr	r2, [r7, #12]
 801b404:	3302      	adds	r3, #2
 801b406:	009b      	lsls	r3, r3, #2
 801b408:	4413      	add	r3, r2
 801b40a:	685b      	ldr	r3, [r3, #4]
 801b40c:	681b      	ldr	r3, [r3, #0]
 801b40e:	3304      	adds	r3, #4
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	6879      	ldr	r1, [r7, #4]
 801b414:	4798      	blx	r3
	}
 801b416:	bf00      	nop
 801b418:	3710      	adds	r7, #16
 801b41a:	46bd      	mov	sp, r7
 801b41c:	bd80      	pop	{r7, pc}

0801b41e <_ZN22core_utils_RegisterMapILi60EE8addEntryEtP13RegisterEntry>:
	void addEntry(uint16_t address, RegisterEntry *entry) {
 801b41e:	b480      	push	{r7}
 801b420:	b085      	sub	sp, #20
 801b422:	af00      	add	r7, sp, #0
 801b424:	60f8      	str	r0, [r7, #12]
 801b426:	460b      	mov	r3, r1
 801b428:	607a      	str	r2, [r7, #4]
 801b42a:	817b      	strh	r3, [r7, #10]
		this->entries[address] = entry;
 801b42c:	897b      	ldrh	r3, [r7, #10]
 801b42e:	68fa      	ldr	r2, [r7, #12]
 801b430:	3302      	adds	r3, #2
 801b432:	009b      	lsls	r3, r3, #2
 801b434:	4413      	add	r3, r2
 801b436:	687a      	ldr	r2, [r7, #4]
 801b438:	605a      	str	r2, [r3, #4]
	}
 801b43a:	bf00      	nop
 801b43c:	3714      	adds	r7, #20
 801b43e:	46bd      	mov	sp, r7
 801b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b444:	4770      	bx	lr

0801b446 <_ZN22core_utils_RegisterMapILi60EE8hasEntryEt>:
	bool hasEntry(uint16_t address) {
 801b446:	b480      	push	{r7}
 801b448:	b083      	sub	sp, #12
 801b44a:	af00      	add	r7, sp, #0
 801b44c:	6078      	str	r0, [r7, #4]
 801b44e:	460b      	mov	r3, r1
 801b450:	807b      	strh	r3, [r7, #2]
		if (this->entries[address] != NULL) {
 801b452:	887b      	ldrh	r3, [r7, #2]
 801b454:	687a      	ldr	r2, [r7, #4]
 801b456:	3302      	adds	r3, #2
 801b458:	009b      	lsls	r3, r3, #2
 801b45a:	4413      	add	r3, r2
 801b45c:	685b      	ldr	r3, [r3, #4]
 801b45e:	2b00      	cmp	r3, #0
 801b460:	d001      	beq.n	801b466 <_ZN22core_utils_RegisterMapILi60EE8hasEntryEt+0x20>
			return true;
 801b462:	2301      	movs	r3, #1
 801b464:	e000      	b.n	801b468 <_ZN22core_utils_RegisterMapILi60EE8hasEntryEt+0x22>
			return false;
 801b466:	2300      	movs	r3, #0
	}
 801b468:	4618      	mov	r0, r3
 801b46a:	370c      	adds	r7, #12
 801b46c:	46bd      	mov	sp, r7
 801b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b472:	4770      	bx	lr

0801b474 <_ZN22core_utils_RegisterMapILi60EE4readEtPh>:
	uint8_t read(uint16_t address, uint8_t *data) {
 801b474:	b580      	push	{r7, lr}
 801b476:	b084      	sub	sp, #16
 801b478:	af00      	add	r7, sp, #0
 801b47a:	60f8      	str	r0, [r7, #12]
 801b47c:	460b      	mov	r3, r1
 801b47e:	607a      	str	r2, [r7, #4]
 801b480:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 801b482:	897b      	ldrh	r3, [r7, #10]
 801b484:	68fa      	ldr	r2, [r7, #12]
 801b486:	3302      	adds	r3, #2
 801b488:	009b      	lsls	r3, r3, #2
 801b48a:	4413      	add	r3, r2
 801b48c:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d015      	beq.n	801b4be <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x4a>
 801b492:	897b      	ldrh	r3, [r7, #10]
 801b494:	68fa      	ldr	r2, [r7, #12]
 801b496:	3302      	adds	r3, #2
 801b498:	009b      	lsls	r3, r3, #2
 801b49a:	4413      	add	r3, r2
 801b49c:	6859      	ldr	r1, [r3, #4]
 801b49e:	897b      	ldrh	r3, [r7, #10]
 801b4a0:	68fa      	ldr	r2, [r7, #12]
 801b4a2:	3302      	adds	r3, #2
 801b4a4:	009b      	lsls	r3, r3, #2
 801b4a6:	4413      	add	r3, r2
 801b4a8:	685b      	ldr	r3, [r3, #4]
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	3320      	adds	r3, #32
 801b4ae:	681b      	ldr	r3, [r3, #0]
 801b4b0:	4608      	mov	r0, r1
 801b4b2:	4798      	blx	r3
 801b4b4:	4603      	mov	r3, r0
 801b4b6:	2b01      	cmp	r3, #1
 801b4b8:	d101      	bne.n	801b4be <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x4a>
 801b4ba:	2301      	movs	r3, #1
 801b4bc:	e000      	b.n	801b4c0 <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x4c>
 801b4be:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d012      	beq.n	801b4ea <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x76>
			return this->entries[address]->readBytes(data);
 801b4c4:	897b      	ldrh	r3, [r7, #10]
 801b4c6:	68fa      	ldr	r2, [r7, #12]
 801b4c8:	3302      	adds	r3, #2
 801b4ca:	009b      	lsls	r3, r3, #2
 801b4cc:	4413      	add	r3, r2
 801b4ce:	6858      	ldr	r0, [r3, #4]
 801b4d0:	897b      	ldrh	r3, [r7, #10]
 801b4d2:	68fa      	ldr	r2, [r7, #12]
 801b4d4:	3302      	adds	r3, #2
 801b4d6:	009b      	lsls	r3, r3, #2
 801b4d8:	4413      	add	r3, r2
 801b4da:	685b      	ldr	r3, [r3, #4]
 801b4dc:	681b      	ldr	r3, [r3, #0]
 801b4de:	3308      	adds	r3, #8
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	6879      	ldr	r1, [r7, #4]
 801b4e4:	4798      	blx	r3
 801b4e6:	4603      	mov	r3, r0
 801b4e8:	e000      	b.n	801b4ec <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x78>
		return 0;
 801b4ea:	2300      	movs	r3, #0
	}
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	3710      	adds	r7, #16
 801b4f0:	46bd      	mov	sp, r7
 801b4f2:	bd80      	pop	{r7, pc}

0801b4f4 <_ZN22core_utils_RegisterMapILi60EE7getSizeEt>:
	uint8_t getSize(uint16_t address) {
 801b4f4:	b580      	push	{r7, lr}
 801b4f6:	b082      	sub	sp, #8
 801b4f8:	af00      	add	r7, sp, #0
 801b4fa:	6078      	str	r0, [r7, #4]
 801b4fc:	460b      	mov	r3, r1
 801b4fe:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getSize();
 801b500:	887b      	ldrh	r3, [r7, #2]
 801b502:	687a      	ldr	r2, [r7, #4]
 801b504:	3302      	adds	r3, #2
 801b506:	009b      	lsls	r3, r3, #2
 801b508:	4413      	add	r3, r2
 801b50a:	6859      	ldr	r1, [r3, #4]
 801b50c:	887b      	ldrh	r3, [r7, #2]
 801b50e:	687a      	ldr	r2, [r7, #4]
 801b510:	3302      	adds	r3, #2
 801b512:	009b      	lsls	r3, r3, #2
 801b514:	4413      	add	r3, r2
 801b516:	685b      	ldr	r3, [r3, #4]
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	330c      	adds	r3, #12
 801b51c:	681b      	ldr	r3, [r3, #0]
 801b51e:	4608      	mov	r0, r1
 801b520:	4798      	blx	r3
 801b522:	4603      	mov	r3, r0
	}
 801b524:	4618      	mov	r0, r3
 801b526:	3708      	adds	r7, #8
 801b528:	46bd      	mov	sp, r7
 801b52a:	bd80      	pop	{r7, pc}

0801b52c <_ZN22core_utils_RegisterMapILi60EE7getTypeEt>:
	register_entry_type getType(uint16_t address) {
 801b52c:	b580      	push	{r7, lr}
 801b52e:	b082      	sub	sp, #8
 801b530:	af00      	add	r7, sp, #0
 801b532:	6078      	str	r0, [r7, #4]
 801b534:	460b      	mov	r3, r1
 801b536:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getType();
 801b538:	887b      	ldrh	r3, [r7, #2]
 801b53a:	687a      	ldr	r2, [r7, #4]
 801b53c:	3302      	adds	r3, #2
 801b53e:	009b      	lsls	r3, r3, #2
 801b540:	4413      	add	r3, r2
 801b542:	6859      	ldr	r1, [r3, #4]
 801b544:	887b      	ldrh	r3, [r7, #2]
 801b546:	687a      	ldr	r2, [r7, #4]
 801b548:	3302      	adds	r3, #2
 801b54a:	009b      	lsls	r3, r3, #2
 801b54c:	4413      	add	r3, r2
 801b54e:	685b      	ldr	r3, [r3, #4]
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	3320      	adds	r3, #32
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	4608      	mov	r0, r1
 801b558:	4798      	blx	r3
 801b55a:	4603      	mov	r3, r0
	}
 801b55c:	4618      	mov	r0, r3
 801b55e:	3708      	adds	r7, #8
 801b560:	46bd      	mov	sp, r7
 801b562:	bd80      	pop	{r7, pc}

0801b564 <_ZN22core_utils_RegisterMapILi60EE19getReadWriteSettingEt>:
	register_entry_rw_t getReadWriteSetting(uint16_t address) {
 801b564:	b580      	push	{r7, lr}
 801b566:	b082      	sub	sp, #8
 801b568:	af00      	add	r7, sp, #0
 801b56a:	6078      	str	r0, [r7, #4]
 801b56c:	460b      	mov	r3, r1
 801b56e:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getReadWriteSetting();
 801b570:	887b      	ldrh	r3, [r7, #2]
 801b572:	687a      	ldr	r2, [r7, #4]
 801b574:	3302      	adds	r3, #2
 801b576:	009b      	lsls	r3, r3, #2
 801b578:	4413      	add	r3, r2
 801b57a:	6859      	ldr	r1, [r3, #4]
 801b57c:	887b      	ldrh	r3, [r7, #2]
 801b57e:	687a      	ldr	r2, [r7, #4]
 801b580:	3302      	adds	r3, #2
 801b582:	009b      	lsls	r3, r3, #2
 801b584:	4413      	add	r3, r2
 801b586:	685b      	ldr	r3, [r3, #4]
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	3324      	adds	r3, #36	; 0x24
 801b58c:	681b      	ldr	r3, [r3, #0]
 801b58e:	4608      	mov	r0, r1
 801b590:	4798      	blx	r3
 801b592:	4603      	mov	r3, r0
	}
 801b594:	4618      	mov	r0, r3
 801b596:	3708      	adds	r7, #8
 801b598:	46bd      	mov	sp, r7
 801b59a:	bd80      	pop	{r7, pc}

0801b59c <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_>:
	uint8_t execute(uint16_t address, uint8_t *input, uint8_t *output) {
 801b59c:	b580      	push	{r7, lr}
 801b59e:	b084      	sub	sp, #16
 801b5a0:	af00      	add	r7, sp, #0
 801b5a2:	60f8      	str	r0, [r7, #12]
 801b5a4:	607a      	str	r2, [r7, #4]
 801b5a6:	603b      	str	r3, [r7, #0]
 801b5a8:	460b      	mov	r3, r1
 801b5aa:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 801b5ac:	897b      	ldrh	r3, [r7, #10]
 801b5ae:	68fa      	ldr	r2, [r7, #12]
 801b5b0:	3302      	adds	r3, #2
 801b5b2:	009b      	lsls	r3, r3, #2
 801b5b4:	4413      	add	r3, r2
 801b5b6:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType()
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d015      	beq.n	801b5e8 <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x4c>
 801b5bc:	897b      	ldrh	r3, [r7, #10]
 801b5be:	68fa      	ldr	r2, [r7, #12]
 801b5c0:	3302      	adds	r3, #2
 801b5c2:	009b      	lsls	r3, r3, #2
 801b5c4:	4413      	add	r3, r2
 801b5c6:	6859      	ldr	r1, [r3, #4]
 801b5c8:	897b      	ldrh	r3, [r7, #10]
 801b5ca:	68fa      	ldr	r2, [r7, #12]
 801b5cc:	3302      	adds	r3, #2
 801b5ce:	009b      	lsls	r3, r3, #2
 801b5d0:	4413      	add	r3, r2
 801b5d2:	685b      	ldr	r3, [r3, #4]
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	3320      	adds	r3, #32
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	4608      	mov	r0, r1
 801b5dc:	4798      	blx	r3
 801b5de:	4603      	mov	r3, r0
 801b5e0:	2b02      	cmp	r3, #2
 801b5e2:	d101      	bne.n	801b5e8 <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x4c>
 801b5e4:	2301      	movs	r3, #1
 801b5e6:	e000      	b.n	801b5ea <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x4e>
 801b5e8:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 801b5ea:	2b00      	cmp	r3, #0
 801b5ec:	d013      	beq.n	801b616 <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x7a>
			return this->entries[address]->execute(input, output);
 801b5ee:	897b      	ldrh	r3, [r7, #10]
 801b5f0:	68fa      	ldr	r2, [r7, #12]
 801b5f2:	3302      	adds	r3, #2
 801b5f4:	009b      	lsls	r3, r3, #2
 801b5f6:	4413      	add	r3, r2
 801b5f8:	6858      	ldr	r0, [r3, #4]
 801b5fa:	897b      	ldrh	r3, [r7, #10]
 801b5fc:	68fa      	ldr	r2, [r7, #12]
 801b5fe:	3302      	adds	r3, #2
 801b600:	009b      	lsls	r3, r3, #2
 801b602:	4413      	add	r3, r2
 801b604:	685b      	ldr	r3, [r3, #4]
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	331c      	adds	r3, #28
 801b60a:	681b      	ldr	r3, [r3, #0]
 801b60c:	683a      	ldr	r2, [r7, #0]
 801b60e:	6879      	ldr	r1, [r7, #4]
 801b610:	4798      	blx	r3
 801b612:	4603      	mov	r3, r0
 801b614:	e000      	b.n	801b618 <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x7c>
		return 0;
 801b616:	2300      	movs	r3, #0
	}
 801b618:	4618      	mov	r0, r3
 801b61a:	3710      	adds	r7, #16
 801b61c:	46bd      	mov	sp, r7
 801b61e:	bd80      	pop	{r7, pc}

0801b620 <_ZN22core_utils_RegisterMapILi60EE7executeEt>:
	uint8_t execute(uint16_t address) {
 801b620:	b580      	push	{r7, lr}
 801b622:	b082      	sub	sp, #8
 801b624:	af00      	add	r7, sp, #0
 801b626:	6078      	str	r0, [r7, #4]
 801b628:	460b      	mov	r3, r1
 801b62a:	807b      	strh	r3, [r7, #2]
		if (this->entries[address] != NULL
 801b62c:	887b      	ldrh	r3, [r7, #2]
 801b62e:	687a      	ldr	r2, [r7, #4]
 801b630:	3302      	adds	r3, #2
 801b632:	009b      	lsls	r3, r3, #2
 801b634:	4413      	add	r3, r2
 801b636:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType()
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d015      	beq.n	801b668 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0x48>
 801b63c:	887b      	ldrh	r3, [r7, #2]
 801b63e:	687a      	ldr	r2, [r7, #4]
 801b640:	3302      	adds	r3, #2
 801b642:	009b      	lsls	r3, r3, #2
 801b644:	4413      	add	r3, r2
 801b646:	6859      	ldr	r1, [r3, #4]
 801b648:	887b      	ldrh	r3, [r7, #2]
 801b64a:	687a      	ldr	r2, [r7, #4]
 801b64c:	3302      	adds	r3, #2
 801b64e:	009b      	lsls	r3, r3, #2
 801b650:	4413      	add	r3, r2
 801b652:	685b      	ldr	r3, [r3, #4]
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	3320      	adds	r3, #32
 801b658:	681b      	ldr	r3, [r3, #0]
 801b65a:	4608      	mov	r0, r1
 801b65c:	4798      	blx	r3
 801b65e:	4603      	mov	r3, r0
 801b660:	2b02      	cmp	r3, #2
 801b662:	d101      	bne.n	801b668 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0x48>
 801b664:	2301      	movs	r3, #1
 801b666:	e000      	b.n	801b66a <_ZN22core_utils_RegisterMapILi60EE7executeEt+0x4a>
 801b668:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 801b66a:	2b00      	cmp	r3, #0
 801b66c:	d03d      	beq.n	801b6ea <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xca>
			if (this->entries[address]->getInputSize() == 0
 801b66e:	887b      	ldrh	r3, [r7, #2]
 801b670:	687a      	ldr	r2, [r7, #4]
 801b672:	3302      	adds	r3, #2
 801b674:	009b      	lsls	r3, r3, #2
 801b676:	4413      	add	r3, r2
 801b678:	6859      	ldr	r1, [r3, #4]
 801b67a:	887b      	ldrh	r3, [r7, #2]
 801b67c:	687a      	ldr	r2, [r7, #4]
 801b67e:	3302      	adds	r3, #2
 801b680:	009b      	lsls	r3, r3, #2
 801b682:	4413      	add	r3, r2
 801b684:	685b      	ldr	r3, [r3, #4]
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	3310      	adds	r3, #16
 801b68a:	681b      	ldr	r3, [r3, #0]
 801b68c:	4608      	mov	r0, r1
 801b68e:	4798      	blx	r3
 801b690:	4603      	mov	r3, r0
					&& this->entries[address]->getOutputSize() == 0) {
 801b692:	2b00      	cmp	r3, #0
 801b694:	d115      	bne.n	801b6c2 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xa2>
 801b696:	887b      	ldrh	r3, [r7, #2]
 801b698:	687a      	ldr	r2, [r7, #4]
 801b69a:	3302      	adds	r3, #2
 801b69c:	009b      	lsls	r3, r3, #2
 801b69e:	4413      	add	r3, r2
 801b6a0:	6859      	ldr	r1, [r3, #4]
 801b6a2:	887b      	ldrh	r3, [r7, #2]
 801b6a4:	687a      	ldr	r2, [r7, #4]
 801b6a6:	3302      	adds	r3, #2
 801b6a8:	009b      	lsls	r3, r3, #2
 801b6aa:	4413      	add	r3, r2
 801b6ac:	685b      	ldr	r3, [r3, #4]
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	3314      	adds	r3, #20
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	4608      	mov	r0, r1
 801b6b6:	4798      	blx	r3
 801b6b8:	4603      	mov	r3, r0
 801b6ba:	2b00      	cmp	r3, #0
 801b6bc:	d101      	bne.n	801b6c2 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xa2>
 801b6be:	2301      	movs	r3, #1
 801b6c0:	e000      	b.n	801b6c4 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xa4>
 801b6c2:	2300      	movs	r3, #0
			if (this->entries[address]->getInputSize() == 0
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d010      	beq.n	801b6ea <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xca>
				this->entries[address]->execute();
 801b6c8:	887b      	ldrh	r3, [r7, #2]
 801b6ca:	687a      	ldr	r2, [r7, #4]
 801b6cc:	3302      	adds	r3, #2
 801b6ce:	009b      	lsls	r3, r3, #2
 801b6d0:	4413      	add	r3, r2
 801b6d2:	6859      	ldr	r1, [r3, #4]
 801b6d4:	887b      	ldrh	r3, [r7, #2]
 801b6d6:	687a      	ldr	r2, [r7, #4]
 801b6d8:	3302      	adds	r3, #2
 801b6da:	009b      	lsls	r3, r3, #2
 801b6dc:	4413      	add	r3, r2
 801b6de:	685b      	ldr	r3, [r3, #4]
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	3318      	adds	r3, #24
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	4608      	mov	r0, r1
 801b6e8:	4798      	blx	r3
		return 0;
 801b6ea:	2300      	movs	r3, #0
	}
 801b6ec:	4618      	mov	r0, r3
 801b6ee:	3708      	adds	r7, #8
 801b6f0:	46bd      	mov	sp, r7
 801b6f2:	bd80      	pop	{r7, pc}

0801b6f4 <_ZN27core_utils_RegisterFunctionIvhE7getSizeEv>:
	uint8_t getSize() {
 801b6f4:	b480      	push	{r7}
 801b6f6:	b083      	sub	sp, #12
 801b6f8:	af00      	add	r7, sp, #0
 801b6fa:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 801b6fc:	2301      	movs	r3, #1
	}
 801b6fe:	4618      	mov	r0, r3
 801b700:	370c      	adds	r7, #12
 801b702:	46bd      	mov	sp, r7
 801b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b708:	4770      	bx	lr

0801b70a <_ZN27core_utils_RegisterFunctionIvhE12getInputSizeEv>:
	uint8_t getInputSize() {
 801b70a:	b480      	push	{r7}
 801b70c:	b083      	sub	sp, #12
 801b70e:	af00      	add	r7, sp, #0
 801b710:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 801b712:	2301      	movs	r3, #1
	}
 801b714:	4618      	mov	r0, r3
 801b716:	370c      	adds	r7, #12
 801b718:	46bd      	mov	sp, r7
 801b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b71e:	4770      	bx	lr

0801b720 <_ZN27core_utils_RegisterFunctionIvhE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 801b720:	b480      	push	{r7}
 801b722:	b083      	sub	sp, #12
 801b724:	af00      	add	r7, sp, #0
 801b726:	6078      	str	r0, [r7, #4]
		return 0;
 801b728:	2300      	movs	r3, #0
	}
 801b72a:	4618      	mov	r0, r3
 801b72c:	370c      	adds	r7, #12
 801b72e:	46bd      	mov	sp, r7
 801b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b734:	4770      	bx	lr

0801b736 <_ZN27core_utils_RegisterFunctionIvhE7executeEPhS1_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801b736:	b580      	push	{r7, lr}
 801b738:	b086      	sub	sp, #24
 801b73a:	af00      	add	r7, sp, #0
 801b73c:	60f8      	str	r0, [r7, #12]
 801b73e:	60b9      	str	r1, [r7, #8]
 801b740:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 801b742:	2300      	movs	r3, #0
 801b744:	75fb      	strb	r3, [r7, #23]
 801b746:	e00b      	b.n	801b760 <_ZN27core_utils_RegisterFunctionIvhE7executeEPhS1_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801b748:	7dfb      	ldrb	r3, [r7, #23]
 801b74a:	68ba      	ldr	r2, [r7, #8]
 801b74c:	441a      	add	r2, r3
 801b74e:	7dfb      	ldrb	r3, [r7, #23]
 801b750:	7811      	ldrb	r1, [r2, #0]
 801b752:	68fa      	ldr	r2, [r7, #12]
 801b754:	4413      	add	r3, r2
 801b756:	460a      	mov	r2, r1
 801b758:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 801b75a:	7dfb      	ldrb	r3, [r7, #23]
 801b75c:	3301      	adds	r3, #1
 801b75e:	75fb      	strb	r3, [r7, #23]
 801b760:	7dfb      	ldrb	r3, [r7, #23]
 801b762:	2b00      	cmp	r3, #0
 801b764:	d0f0      	beq.n	801b748 <_ZN27core_utils_RegisterFunctionIvhE7executeEPhS1_+0x12>
		this->execute(this->input_data_union.data);
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	799b      	ldrb	r3, [r3, #6]
 801b76a:	4619      	mov	r1, r3
 801b76c:	68f8      	ldr	r0, [r7, #12]
 801b76e:	f000 f98c 	bl	801ba8a <_ZN27core_utils_RegisterFunctionIvhE7executeEh>
		return 0;
 801b772:	2300      	movs	r3, #0
	}
 801b774:	4618      	mov	r0, r3
 801b776:	3718      	adds	r7, #24
 801b778:	46bd      	mov	sp, r7
 801b77a:	bd80      	pop	{r7, pc}

0801b77c <_ZN27core_utils_RegisterFunctionIvhE7getTypeEv>:
	register_entry_type getType() {
 801b77c:	b480      	push	{r7}
 801b77e:	b083      	sub	sp, #12
 801b780:	af00      	add	r7, sp, #0
 801b782:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 801b784:	2302      	movs	r3, #2
	}
 801b786:	4618      	mov	r0, r3
 801b788:	370c      	adds	r7, #12
 801b78a:	46bd      	mov	sp, r7
 801b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b790:	4770      	bx	lr

0801b792 <_ZN27core_utils_RegisterFunctionIvhE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 801b792:	b480      	push	{r7}
 801b794:	b083      	sub	sp, #12
 801b796:	af00      	add	r7, sp, #0
 801b798:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 801b79a:	2302      	movs	r3, #2
	}
 801b79c:	4618      	mov	r0, r3
 801b79e:	370c      	adds	r7, #12
 801b7a0:	46bd      	mov	sp, r7
 801b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7a6:	4770      	bx	lr

0801b7a8 <_ZN24core_utils_RegisterEntryImE5writeEPv>:
	void write(void *value) {
 801b7a8:	b580      	push	{r7, lr}
 801b7aa:	b084      	sub	sp, #16
 801b7ac:	af00      	add	r7, sp, #0
 801b7ae:	6078      	str	r0, [r7, #4]
 801b7b0:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	7c1b      	ldrb	r3, [r3, #16]
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d00c      	beq.n	801b7d4 <_ZN24core_utils_RegisterEntryImE5writeEPv+0x2c>
		T *value_typed = (T*) value;
 801b7ba:	683b      	ldr	r3, [r7, #0]
 801b7bc:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	695b      	ldr	r3, [r3, #20]
 801b7c2:	68fa      	ldr	r2, [r7, #12]
 801b7c4:	6812      	ldr	r2, [r2, #0]
 801b7c6:	601a      	str	r2, [r3, #0]
		this->write_function.call();
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	3318      	adds	r3, #24
 801b7cc:	4618      	mov	r0, r3
 801b7ce:	f7f8 f9ef 	bl	8013bb0 <_ZN8Callback4callEv>
 801b7d2:	e000      	b.n	801b7d6 <_ZN24core_utils_RegisterEntryImE5writeEPv+0x2e>
			return;
 801b7d4:	bf00      	nop
	}
 801b7d6:	3710      	adds	r7, #16
 801b7d8:	46bd      	mov	sp, r7
 801b7da:	bd80      	pop	{r7, pc}

0801b7dc <_ZN24core_utils_RegisterEntryImE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 801b7dc:	b580      	push	{r7, lr}
 801b7de:	b084      	sub	sp, #16
 801b7e0:	af00      	add	r7, sp, #0
 801b7e2:	6078      	str	r0, [r7, #4]
 801b7e4:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	7c1b      	ldrb	r3, [r3, #16]
 801b7ea:	2b00      	cmp	r3, #0
 801b7ec:	d018      	beq.n	801b820 <_ZN24core_utils_RegisterEntryImE5writeEPh+0x44>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801b7ee:	2300      	movs	r3, #0
 801b7f0:	73fb      	strb	r3, [r7, #15]
 801b7f2:	e00b      	b.n	801b80c <_ZN24core_utils_RegisterEntryImE5writeEPh+0x30>
			this->data_union.data_bytes[i] = data[i];
 801b7f4:	7bfb      	ldrb	r3, [r7, #15]
 801b7f6:	683a      	ldr	r2, [r7, #0]
 801b7f8:	441a      	add	r2, r3
 801b7fa:	7bfb      	ldrb	r3, [r7, #15]
 801b7fc:	7811      	ldrb	r1, [r2, #0]
 801b7fe:	687a      	ldr	r2, [r7, #4]
 801b800:	4413      	add	r3, r2
 801b802:	460a      	mov	r2, r1
 801b804:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801b806:	7bfb      	ldrb	r3, [r7, #15]
 801b808:	3301      	adds	r3, #1
 801b80a:	73fb      	strb	r3, [r7, #15]
 801b80c:	7bfb      	ldrb	r3, [r7, #15]
 801b80e:	2b03      	cmp	r3, #3
 801b810:	d9f0      	bls.n	801b7f4 <_ZN24core_utils_RegisterEntryImE5writeEPh+0x18>
		this->write(this->data_union.data);
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	689b      	ldr	r3, [r3, #8]
 801b816:	4619      	mov	r1, r3
 801b818:	6878      	ldr	r0, [r7, #4]
 801b81a:	f000 f94b 	bl	801bab4 <_ZN24core_utils_RegisterEntryImE5writeEm>
 801b81e:	e000      	b.n	801b822 <_ZN24core_utils_RegisterEntryImE5writeEPh+0x46>
			return;
 801b820:	bf00      	nop
	}
 801b822:	3710      	adds	r7, #16
 801b824:	46bd      	mov	sp, r7
 801b826:	bd80      	pop	{r7, pc}

0801b828 <_ZN24core_utils_RegisterEntryImE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 801b828:	b480      	push	{r7}
 801b82a:	b085      	sub	sp, #20
 801b82c:	af00      	add	r7, sp, #0
 801b82e:	6078      	str	r0, [r7, #4]
 801b830:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	7c1b      	ldrb	r3, [r3, #16]
 801b836:	2b01      	cmp	r3, #1
 801b838:	d101      	bne.n	801b83e <_ZN24core_utils_RegisterEntryImE9readBytesEPh+0x16>
			return 0;
 801b83a:	2300      	movs	r3, #0
 801b83c:	e016      	b.n	801b86c <_ZN24core_utils_RegisterEntryImE9readBytesEPh+0x44>
		this->data_union.data = *(this->data);
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	695b      	ldr	r3, [r3, #20]
 801b842:	681a      	ldr	r2, [r3, #0]
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	609a      	str	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801b848:	2300      	movs	r3, #0
 801b84a:	73fb      	strb	r3, [r7, #15]
 801b84c:	e00a      	b.n	801b864 <_ZN24core_utils_RegisterEntryImE9readBytesEPh+0x3c>
			data[i] = this->data_union.data_bytes[i];
 801b84e:	7bfa      	ldrb	r2, [r7, #15]
 801b850:	7bfb      	ldrb	r3, [r7, #15]
 801b852:	6839      	ldr	r1, [r7, #0]
 801b854:	440b      	add	r3, r1
 801b856:	6879      	ldr	r1, [r7, #4]
 801b858:	440a      	add	r2, r1
 801b85a:	7a12      	ldrb	r2, [r2, #8]
 801b85c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801b85e:	7bfb      	ldrb	r3, [r7, #15]
 801b860:	3301      	adds	r3, #1
 801b862:	73fb      	strb	r3, [r7, #15]
 801b864:	7bfb      	ldrb	r3, [r7, #15]
 801b866:	2b03      	cmp	r3, #3
 801b868:	d9f1      	bls.n	801b84e <_ZN24core_utils_RegisterEntryImE9readBytesEPh+0x26>
		return sizeof(T);
 801b86a:	2304      	movs	r3, #4
	}
 801b86c:	4618      	mov	r0, r3
 801b86e:	3714      	adds	r7, #20
 801b870:	46bd      	mov	sp, r7
 801b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b876:	4770      	bx	lr

0801b878 <_ZN24core_utils_RegisterEntryImE7getSizeEv>:
	uint8_t getSize() {
 801b878:	b480      	push	{r7}
 801b87a:	b083      	sub	sp, #12
 801b87c:	af00      	add	r7, sp, #0
 801b87e:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 801b880:	2304      	movs	r3, #4
	}
 801b882:	4618      	mov	r0, r3
 801b884:	370c      	adds	r7, #12
 801b886:	46bd      	mov	sp, r7
 801b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b88c:	4770      	bx	lr

0801b88e <_ZN24core_utils_RegisterEntryImE7getTypeEv>:
	register_entry_type getType() {
 801b88e:	b480      	push	{r7}
 801b890:	b083      	sub	sp, #12
 801b892:	af00      	add	r7, sp, #0
 801b894:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 801b896:	2301      	movs	r3, #1
	}
 801b898:	4618      	mov	r0, r3
 801b89a:	370c      	adds	r7, #12
 801b89c:	46bd      	mov	sp, r7
 801b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8a2:	4770      	bx	lr

0801b8a4 <_ZN24core_utils_RegisterEntryImE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 801b8a4:	b480      	push	{r7}
 801b8a6:	b083      	sub	sp, #12
 801b8a8:	af00      	add	r7, sp, #0
 801b8aa:	6078      	str	r0, [r7, #4]
		return this->rw;
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	7c1b      	ldrb	r3, [r3, #16]
	}
 801b8b0:	4618      	mov	r0, r3
 801b8b2:	370c      	adds	r7, #12
 801b8b4:	46bd      	mov	sp, r7
 801b8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8ba:	4770      	bx	lr

0801b8bc <_ZN27core_utils_RegisterFunctionIvA3_iE7getSizeEv>:
	uint8_t getSize() {
 801b8bc:	b480      	push	{r7}
 801b8be:	b083      	sub	sp, #12
 801b8c0:	af00      	add	r7, sp, #0
 801b8c2:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 801b8c4:	230c      	movs	r3, #12
	}
 801b8c6:	4618      	mov	r0, r3
 801b8c8:	370c      	adds	r7, #12
 801b8ca:	46bd      	mov	sp, r7
 801b8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8d0:	4770      	bx	lr

0801b8d2 <_ZN27core_utils_RegisterFunctionIvA3_iE12getInputSizeEv>:
	uint8_t getInputSize() {
 801b8d2:	b480      	push	{r7}
 801b8d4:	b083      	sub	sp, #12
 801b8d6:	af00      	add	r7, sp, #0
 801b8d8:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 801b8da:	230c      	movs	r3, #12
	}
 801b8dc:	4618      	mov	r0, r3
 801b8de:	370c      	adds	r7, #12
 801b8e0:	46bd      	mov	sp, r7
 801b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8e6:	4770      	bx	lr

0801b8e8 <_ZN27core_utils_RegisterFunctionIvA3_iE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 801b8e8:	b480      	push	{r7}
 801b8ea:	b083      	sub	sp, #12
 801b8ec:	af00      	add	r7, sp, #0
 801b8ee:	6078      	str	r0, [r7, #4]
		return 0;
 801b8f0:	2300      	movs	r3, #0
	}
 801b8f2:	4618      	mov	r0, r3
 801b8f4:	370c      	adds	r7, #12
 801b8f6:	46bd      	mov	sp, r7
 801b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8fc:	4770      	bx	lr

0801b8fe <_ZN27core_utils_RegisterFunctionIvA3_iE7executeEPhS2_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801b8fe:	b580      	push	{r7, lr}
 801b900:	b086      	sub	sp, #24
 801b902:	af00      	add	r7, sp, #0
 801b904:	60f8      	str	r0, [r7, #12]
 801b906:	60b9      	str	r1, [r7, #8]
 801b908:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 801b90a:	2300      	movs	r3, #0
 801b90c:	75fb      	strb	r3, [r7, #23]
 801b90e:	e00b      	b.n	801b928 <_ZN27core_utils_RegisterFunctionIvA3_iE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801b910:	7dfb      	ldrb	r3, [r7, #23]
 801b912:	68ba      	ldr	r2, [r7, #8]
 801b914:	441a      	add	r2, r3
 801b916:	7dfb      	ldrb	r3, [r7, #23]
 801b918:	7811      	ldrb	r1, [r2, #0]
 801b91a:	68fa      	ldr	r2, [r7, #12]
 801b91c:	4413      	add	r3, r2
 801b91e:	460a      	mov	r2, r1
 801b920:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 801b922:	7dfb      	ldrb	r3, [r7, #23]
 801b924:	3301      	adds	r3, #1
 801b926:	75fb      	strb	r3, [r7, #23]
 801b928:	7dfb      	ldrb	r3, [r7, #23]
 801b92a:	2b0b      	cmp	r3, #11
 801b92c:	d9f0      	bls.n	801b910 <_ZN27core_utils_RegisterFunctionIvA3_iE7executeEPhS2_+0x12>
		this->execute(this->input_data_union.data);
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	3308      	adds	r3, #8
 801b932:	4619      	mov	r1, r3
 801b934:	68f8      	ldr	r0, [r7, #12]
 801b936:	f000 f8d4 	bl	801bae2 <_ZN27core_utils_RegisterFunctionIvA3_iE7executeEPi>
		return 0;
 801b93a:	2300      	movs	r3, #0
	}
 801b93c:	4618      	mov	r0, r3
 801b93e:	3718      	adds	r7, #24
 801b940:	46bd      	mov	sp, r7
 801b942:	bd80      	pop	{r7, pc}

0801b944 <_ZN27core_utils_RegisterFunctionIvA3_iE7getTypeEv>:
	register_entry_type getType() {
 801b944:	b480      	push	{r7}
 801b946:	b083      	sub	sp, #12
 801b948:	af00      	add	r7, sp, #0
 801b94a:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 801b94c:	2302      	movs	r3, #2
	}
 801b94e:	4618      	mov	r0, r3
 801b950:	370c      	adds	r7, #12
 801b952:	46bd      	mov	sp, r7
 801b954:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b958:	4770      	bx	lr

0801b95a <_ZN27core_utils_RegisterFunctionIvA3_iE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 801b95a:	b480      	push	{r7}
 801b95c:	b083      	sub	sp, #12
 801b95e:	af00      	add	r7, sp, #0
 801b960:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 801b962:	2302      	movs	r3, #2
	}
 801b964:	4618      	mov	r0, r3
 801b966:	370c      	adds	r7, #12
 801b968:	46bd      	mov	sp, r7
 801b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b96e:	4770      	bx	lr

0801b970 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPv>:
	void write(void *value) {
 801b970:	b580      	push	{r7, lr}
 801b972:	b084      	sub	sp, #16
 801b974:	af00      	add	r7, sp, #0
 801b976:	6078      	str	r0, [r7, #4]
 801b978:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801b97a:	687b      	ldr	r3, [r7, #4]
 801b97c:	7a9b      	ldrb	r3, [r3, #10]
 801b97e:	2b00      	cmp	r3, #0
 801b980:	d00d      	beq.n	801b99e <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPv+0x2e>
		T *value_typed = (T*) value;
 801b982:	683b      	ldr	r3, [r7, #0]
 801b984:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	68db      	ldr	r3, [r3, #12]
 801b98a:	68fa      	ldr	r2, [r7, #12]
 801b98c:	f992 2000 	ldrsb.w	r2, [r2]
 801b990:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	3310      	adds	r3, #16
 801b996:	4618      	mov	r0, r3
 801b998:	f7f8 f90a 	bl	8013bb0 <_ZN8Callback4callEv>
 801b99c:	e000      	b.n	801b9a0 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPv+0x30>
			return;
 801b99e:	bf00      	nop
	}
 801b9a0:	3710      	adds	r7, #16
 801b9a2:	46bd      	mov	sp, r7
 801b9a4:	bd80      	pop	{r7, pc}

0801b9a6 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 801b9a6:	b580      	push	{r7, lr}
 801b9a8:	b084      	sub	sp, #16
 801b9aa:	af00      	add	r7, sp, #0
 801b9ac:	6078      	str	r0, [r7, #4]
 801b9ae:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	7a9b      	ldrb	r3, [r3, #10]
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d019      	beq.n	801b9ec <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh+0x46>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801b9b8:	2300      	movs	r3, #0
 801b9ba:	73fb      	strb	r3, [r7, #15]
 801b9bc:	e00b      	b.n	801b9d6 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh+0x30>
			this->data_union.data_bytes[i] = data[i];
 801b9be:	7bfb      	ldrb	r3, [r7, #15]
 801b9c0:	683a      	ldr	r2, [r7, #0]
 801b9c2:	441a      	add	r2, r3
 801b9c4:	7bfb      	ldrb	r3, [r7, #15]
 801b9c6:	7811      	ldrb	r1, [r2, #0]
 801b9c8:	687a      	ldr	r2, [r7, #4]
 801b9ca:	4413      	add	r3, r2
 801b9cc:	460a      	mov	r2, r1
 801b9ce:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801b9d0:	7bfb      	ldrb	r3, [r7, #15]
 801b9d2:	3301      	adds	r3, #1
 801b9d4:	73fb      	strb	r3, [r7, #15]
 801b9d6:	7bfb      	ldrb	r3, [r7, #15]
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d0f0      	beq.n	801b9be <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh+0x18>
		this->write(this->data_union.data);
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	f993 3006 	ldrsb.w	r3, [r3, #6]
 801b9e2:	4619      	mov	r1, r3
 801b9e4:	6878      	ldr	r0, [r7, #4]
 801b9e6:	f000 f88f 	bl	801bb08 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeES0_>
 801b9ea:	e000      	b.n	801b9ee <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh+0x48>
			return;
 801b9ec:	bf00      	nop
	}
 801b9ee:	3710      	adds	r7, #16
 801b9f0:	46bd      	mov	sp, r7
 801b9f2:	bd80      	pop	{r7, pc}

0801b9f4 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 801b9f4:	b480      	push	{r7}
 801b9f6:	b085      	sub	sp, #20
 801b9f8:	af00      	add	r7, sp, #0
 801b9fa:	6078      	str	r0, [r7, #4]
 801b9fc:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	7a9b      	ldrb	r3, [r3, #10]
 801ba02:	2b01      	cmp	r3, #1
 801ba04:	d101      	bne.n	801ba0a <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh+0x16>
			return 0;
 801ba06:	2300      	movs	r3, #0
 801ba08:	e017      	b.n	801ba3a <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh+0x46>
		this->data_union.data = *(this->data);
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	68db      	ldr	r3, [r3, #12]
 801ba0e:	f993 2000 	ldrsb.w	r2, [r3]
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801ba16:	2300      	movs	r3, #0
 801ba18:	73fb      	strb	r3, [r7, #15]
 801ba1a:	e00a      	b.n	801ba32 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh+0x3e>
			data[i] = this->data_union.data_bytes[i];
 801ba1c:	7bfa      	ldrb	r2, [r7, #15]
 801ba1e:	7bfb      	ldrb	r3, [r7, #15]
 801ba20:	6839      	ldr	r1, [r7, #0]
 801ba22:	440b      	add	r3, r1
 801ba24:	6879      	ldr	r1, [r7, #4]
 801ba26:	440a      	add	r2, r1
 801ba28:	7992      	ldrb	r2, [r2, #6]
 801ba2a:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801ba2c:	7bfb      	ldrb	r3, [r7, #15]
 801ba2e:	3301      	adds	r3, #1
 801ba30:	73fb      	strb	r3, [r7, #15]
 801ba32:	7bfb      	ldrb	r3, [r7, #15]
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	d0f1      	beq.n	801ba1c <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh+0x28>
		return sizeof(T);
 801ba38:	2301      	movs	r3, #1
	}
 801ba3a:	4618      	mov	r0, r3
 801ba3c:	3714      	adds	r7, #20
 801ba3e:	46bd      	mov	sp, r7
 801ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba44:	4770      	bx	lr

0801ba46 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE7getSizeEv>:
	uint8_t getSize() {
 801ba46:	b480      	push	{r7}
 801ba48:	b083      	sub	sp, #12
 801ba4a:	af00      	add	r7, sp, #0
 801ba4c:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 801ba4e:	2301      	movs	r3, #1
	}
 801ba50:	4618      	mov	r0, r3
 801ba52:	370c      	adds	r7, #12
 801ba54:	46bd      	mov	sp, r7
 801ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba5a:	4770      	bx	lr

0801ba5c <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE7getTypeEv>:
	register_entry_type getType() {
 801ba5c:	b480      	push	{r7}
 801ba5e:	b083      	sub	sp, #12
 801ba60:	af00      	add	r7, sp, #0
 801ba62:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 801ba64:	2301      	movs	r3, #1
	}
 801ba66:	4618      	mov	r0, r3
 801ba68:	370c      	adds	r7, #12
 801ba6a:	46bd      	mov	sp, r7
 801ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba70:	4770      	bx	lr

0801ba72 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 801ba72:	b480      	push	{r7}
 801ba74:	b083      	sub	sp, #12
 801ba76:	af00      	add	r7, sp, #0
 801ba78:	6078      	str	r0, [r7, #4]
		return this->rw;
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	7a9b      	ldrb	r3, [r3, #10]
	}
 801ba7e:	4618      	mov	r0, r3
 801ba80:	370c      	adds	r7, #12
 801ba82:	46bd      	mov	sp, r7
 801ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba88:	4770      	bx	lr

0801ba8a <_ZN27core_utils_RegisterFunctionIvhE7executeEh>:
	void execute(input_t argument) {
 801ba8a:	b580      	push	{r7, lr}
 801ba8c:	b082      	sub	sp, #8
 801ba8e:	af00      	add	r7, sp, #0
 801ba90:	6078      	str	r0, [r7, #4]
 801ba92:	460b      	mov	r3, r1
 801ba94:	70fb      	strb	r3, [r7, #3]
		if (this->function.registered) {
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	7c1b      	ldrb	r3, [r3, #16]
 801ba9a:	2b00      	cmp	r3, #0
 801ba9c:	d006      	beq.n	801baac <_ZN27core_utils_RegisterFunctionIvhE7executeEh+0x22>
			this->function.call(argument);
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	330c      	adds	r3, #12
 801baa2:	78fa      	ldrb	r2, [r7, #3]
 801baa4:	4611      	mov	r1, r2
 801baa6:	4618      	mov	r0, r3
 801baa8:	f000 f846 	bl	801bb38 <_ZN19core_utils_CallbackIvhE4callEh>
	}
 801baac:	bf00      	nop
 801baae:	3708      	adds	r7, #8
 801bab0:	46bd      	mov	sp, r7
 801bab2:	bd80      	pop	{r7, pc}

0801bab4 <_ZN24core_utils_RegisterEntryImE5writeEm>:
	void write(T value) {
 801bab4:	b580      	push	{r7, lr}
 801bab6:	b082      	sub	sp, #8
 801bab8:	af00      	add	r7, sp, #0
 801baba:	6078      	str	r0, [r7, #4]
 801babc:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	7c1b      	ldrb	r3, [r3, #16]
 801bac2:	2b00      	cmp	r3, #0
 801bac4:	d009      	beq.n	801bada <_ZN24core_utils_RegisterEntryImE5writeEm+0x26>
		*(this->data) = value;
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	695b      	ldr	r3, [r3, #20]
 801baca:	683a      	ldr	r2, [r7, #0]
 801bacc:	601a      	str	r2, [r3, #0]
		this->write_function.call();
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	3318      	adds	r3, #24
 801bad2:	4618      	mov	r0, r3
 801bad4:	f7f8 f86c 	bl	8013bb0 <_ZN8Callback4callEv>
 801bad8:	e000      	b.n	801badc <_ZN24core_utils_RegisterEntryImE5writeEm+0x28>
			return;
 801bada:	bf00      	nop
	}
 801badc:	3708      	adds	r7, #8
 801bade:	46bd      	mov	sp, r7
 801bae0:	bd80      	pop	{r7, pc}

0801bae2 <_ZN27core_utils_RegisterFunctionIvA3_iE7executeEPi>:
	void execute(input_t argument) {
 801bae2:	b580      	push	{r7, lr}
 801bae4:	b082      	sub	sp, #8
 801bae6:	af00      	add	r7, sp, #0
 801bae8:	6078      	str	r0, [r7, #4]
 801baea:	6039      	str	r1, [r7, #0]
		if (this->function.registered) {
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	7f1b      	ldrb	r3, [r3, #28]
 801baf0:	2b00      	cmp	r3, #0
 801baf2:	d005      	beq.n	801bb00 <_ZN27core_utils_RegisterFunctionIvA3_iE7executeEPi+0x1e>
			this->function.call(argument);
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	3318      	adds	r3, #24
 801baf8:	6839      	ldr	r1, [r7, #0]
 801bafa:	4618      	mov	r0, r3
 801bafc:	f000 f82d 	bl	801bb5a <_ZN19core_utils_CallbackIvA3_iE4callEPi>
	}
 801bb00:	bf00      	nop
 801bb02:	3708      	adds	r7, #8
 801bb04:	46bd      	mov	sp, r7
 801bb06:	bd80      	pop	{r7, pc}

0801bb08 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeES0_>:
	void write(T value) {
 801bb08:	b580      	push	{r7, lr}
 801bb0a:	b082      	sub	sp, #8
 801bb0c:	af00      	add	r7, sp, #0
 801bb0e:	6078      	str	r0, [r7, #4]
 801bb10:	460b      	mov	r3, r1
 801bb12:	70fb      	strb	r3, [r7, #3]
		if (this->rw == REGISTER_ENTRY_READ) {
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	7a9b      	ldrb	r3, [r3, #10]
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d009      	beq.n	801bb30 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeES0_+0x28>
		*(this->data) = value;
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	68db      	ldr	r3, [r3, #12]
 801bb20:	78fa      	ldrb	r2, [r7, #3]
 801bb22:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 801bb24:	687b      	ldr	r3, [r7, #4]
 801bb26:	3310      	adds	r3, #16
 801bb28:	4618      	mov	r0, r3
 801bb2a:	f7f8 f841 	bl	8013bb0 <_ZN8Callback4callEv>
 801bb2e:	e000      	b.n	801bb32 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeES0_+0x2a>
			return;
 801bb30:	bf00      	nop
	}
 801bb32:	3708      	adds	r7, #8
 801bb34:	46bd      	mov	sp, r7
 801bb36:	bd80      	pop	{r7, pc}

0801bb38 <_ZN19core_utils_CallbackIvhE4callEh>:
	R call(A argument){
 801bb38:	b580      	push	{r7, lr}
 801bb3a:	b082      	sub	sp, #8
 801bb3c:	af00      	add	r7, sp, #0
 801bb3e:	6078      	str	r0, [r7, #4]
 801bb40:	460b      	mov	r3, r1
 801bb42:	70fb      	strb	r3, [r7, #3]
		return this->_fp(argument);
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	3308      	adds	r3, #8
 801bb48:	78fa      	ldrb	r2, [r7, #3]
 801bb4a:	4611      	mov	r1, r2
 801bb4c:	4618      	mov	r0, r3
 801bb4e:	f000 f813 	bl	801bb78 <_ZN26core_utils_FunctionPointerIvhEclEh>
 801bb52:	bf00      	nop
	}
 801bb54:	3708      	adds	r7, #8
 801bb56:	46bd      	mov	sp, r7
 801bb58:	bd80      	pop	{r7, pc}

0801bb5a <_ZN19core_utils_CallbackIvA3_iE4callEPi>:
	R call(A argument){
 801bb5a:	b580      	push	{r7, lr}
 801bb5c:	b082      	sub	sp, #8
 801bb5e:	af00      	add	r7, sp, #0
 801bb60:	6078      	str	r0, [r7, #4]
 801bb62:	6039      	str	r1, [r7, #0]
		return this->_fp(argument);
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	3308      	adds	r3, #8
 801bb68:	6839      	ldr	r1, [r7, #0]
 801bb6a:	4618      	mov	r0, r3
 801bb6c:	f000 f813 	bl	801bb96 <_ZN26core_utils_FunctionPointerIvA3_iEclEPi>
 801bb70:	bf00      	nop
	}
 801bb72:	3708      	adds	r7, #8
 801bb74:	46bd      	mov	sp, r7
 801bb76:	bd80      	pop	{r7, pc}

0801bb78 <_ZN26core_utils_FunctionPointerIvhEclEh>:
    R operator ()(A1 a) {
 801bb78:	b580      	push	{r7, lr}
 801bb7a:	b082      	sub	sp, #8
 801bb7c:	af00      	add	r7, sp, #0
 801bb7e:	6078      	str	r0, [r7, #4]
 801bb80:	460b      	mov	r3, r1
 801bb82:	70fb      	strb	r3, [r7, #3]
        return call(a);
 801bb84:	78fb      	ldrb	r3, [r7, #3]
 801bb86:	4619      	mov	r1, r3
 801bb88:	6878      	ldr	r0, [r7, #4]
 801bb8a:	f000 f811 	bl	801bbb0 <_ZN26core_utils_FunctionPointerIvhE4callEh>
 801bb8e:	bf00      	nop
    }
 801bb90:	3708      	adds	r7, #8
 801bb92:	46bd      	mov	sp, r7
 801bb94:	bd80      	pop	{r7, pc}

0801bb96 <_ZN26core_utils_FunctionPointerIvA3_iEclEPi>:
    R operator ()(A1 a) {
 801bb96:	b580      	push	{r7, lr}
 801bb98:	b082      	sub	sp, #8
 801bb9a:	af00      	add	r7, sp, #0
 801bb9c:	6078      	str	r0, [r7, #4]
 801bb9e:	6039      	str	r1, [r7, #0]
        return call(a);
 801bba0:	6839      	ldr	r1, [r7, #0]
 801bba2:	6878      	ldr	r0, [r7, #4]
 801bba4:	f000 f82d 	bl	801bc02 <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi>
 801bba8:	bf00      	nop
    }
 801bbaa:	3708      	adds	r7, #8
 801bbac:	46bd      	mov	sp, r7
 801bbae:	bd80      	pop	{r7, pc}

0801bbb0 <_ZN26core_utils_FunctionPointerIvhE4callEh>:
    R call(A1 a) {
 801bbb0:	b580      	push	{r7, lr}
 801bbb2:	b082      	sub	sp, #8
 801bbb4:	af00      	add	r7, sp, #0
 801bbb6:	6078      	str	r0, [r7, #4]
 801bbb8:	460b      	mov	r3, r1
 801bbba:	70fb      	strb	r3, [r7, #3]
        if (_membercaller == 0 && _p.function) {
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	695b      	ldr	r3, [r3, #20]
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	d109      	bne.n	801bbd8 <_ZN26core_utils_FunctionPointerIvhE4callEh+0x28>
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	681b      	ldr	r3, [r3, #0]
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d005      	beq.n	801bbd8 <_ZN26core_utils_FunctionPointerIvhE4callEh+0x28>
           return _p.function(a);
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	78fa      	ldrb	r2, [r7, #3]
 801bbd2:	4610      	mov	r0, r2
 801bbd4:	4798      	blx	r3
 801bbd6:	e011      	b.n	801bbfc <_ZN26core_utils_FunctionPointerIvhE4callEh+0x4c>
        } else if (_membercaller && _p.object) {
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	695b      	ldr	r3, [r3, #20]
 801bbdc:	2b00      	cmp	r3, #0
 801bbde:	d00c      	beq.n	801bbfa <_ZN26core_utils_FunctionPointerIvhE4callEh+0x4a>
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	681b      	ldr	r3, [r3, #0]
 801bbe4:	2b00      	cmp	r3, #0
 801bbe6:	d008      	beq.n	801bbfa <_ZN26core_utils_FunctionPointerIvhE4callEh+0x4a>
           return _membercaller(_p.object, _member, a);
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	695b      	ldr	r3, [r3, #20]
 801bbec:	687a      	ldr	r2, [r7, #4]
 801bbee:	6810      	ldr	r0, [r2, #0]
 801bbf0:	687a      	ldr	r2, [r7, #4]
 801bbf2:	1d11      	adds	r1, r2, #4
 801bbf4:	78fa      	ldrb	r2, [r7, #3]
 801bbf6:	4798      	blx	r3
 801bbf8:	e000      	b.n	801bbfc <_ZN26core_utils_FunctionPointerIvhE4callEh+0x4c>
        return (R)0;
 801bbfa:	bf00      	nop
    }
 801bbfc:	3708      	adds	r7, #8
 801bbfe:	46bd      	mov	sp, r7
 801bc00:	bd80      	pop	{r7, pc}

0801bc02 <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi>:
    R call(A1 a) {
 801bc02:	b580      	push	{r7, lr}
 801bc04:	b082      	sub	sp, #8
 801bc06:	af00      	add	r7, sp, #0
 801bc08:	6078      	str	r0, [r7, #4]
 801bc0a:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 801bc0c:	687b      	ldr	r3, [r7, #4]
 801bc0e:	695b      	ldr	r3, [r3, #20]
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d108      	bne.n	801bc26 <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi+0x24>
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d004      	beq.n	801bc26 <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi+0x24>
           return _p.function(a);
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	6838      	ldr	r0, [r7, #0]
 801bc22:	4798      	blx	r3
 801bc24:	e011      	b.n	801bc4a <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi+0x48>
        } else if (_membercaller && _p.object) {
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	695b      	ldr	r3, [r3, #20]
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d00c      	beq.n	801bc48 <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi+0x46>
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d008      	beq.n	801bc48 <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi+0x46>
           return _membercaller(_p.object, _member, a);
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	695b      	ldr	r3, [r3, #20]
 801bc3a:	687a      	ldr	r2, [r7, #4]
 801bc3c:	6810      	ldr	r0, [r2, #0]
 801bc3e:	687a      	ldr	r2, [r7, #4]
 801bc40:	1d11      	adds	r1, r2, #4
 801bc42:	683a      	ldr	r2, [r7, #0]
 801bc44:	4798      	blx	r3
 801bc46:	e000      	b.n	801bc4a <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi+0x48>
        return (R)0;
 801bc48:	bf00      	nop
    }
 801bc4a:	3708      	adds	r7, #8
 801bc4c:	46bd      	mov	sp, r7
 801bc4e:	bd80      	pop	{r7, pc}

0801bc50 <_GLOBAL__sub_I_twipr_firmware>:
 801bc50:	b580      	push	{r7, lr}
 801bc52:	af00      	add	r7, sp, #0
 801bc54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801bc58:	2001      	movs	r0, #1
 801bc5a:	f7ff fb51 	bl	801b300 <_Z41__static_initialization_and_destruction_0ii>
 801bc5e:	bd80      	pop	{r7, pc}

0801bc60 <_ZN12TWIPR_SafetyC1Ev>:
const osThreadAttr_t safety_task_attributes = { .name = "safety",
		.stack_size = 256 * 4, .priority = (osPriority_t) osPriorityNormal, };



TWIPR_Safety::TWIPR_Safety(){
 801bc60:	b480      	push	{r7}
 801bc62:	b083      	sub	sp, #12
 801bc64:	af00      	add	r7, sp, #0
 801bc66:	6078      	str	r0, [r7, #4]

}
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	4618      	mov	r0, r3
 801bc6c:	370c      	adds	r7, #12
 801bc6e:	46bd      	mov	sp, r7
 801bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc74:	4770      	bx	lr

0801bc76 <_ZN12TWIPR_Safety4initE21TWIPR_Safety_Config_t>:


void TWIPR_Safety::init(TWIPR_Safety_Config_t config){
 801bc76:	b084      	sub	sp, #16
 801bc78:	b490      	push	{r4, r7}
 801bc7a:	b082      	sub	sp, #8
 801bc7c:	af00      	add	r7, sp, #0
 801bc7e:	6078      	str	r0, [r7, #4]
 801bc80:	f107 0014 	add.w	r0, r7, #20
 801bc84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	461c      	mov	r4, r3
 801bc8c:	f107 0314 	add.w	r3, r7, #20
 801bc90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bc92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801bc96:	bf00      	nop
 801bc98:	3708      	adds	r7, #8
 801bc9a:	46bd      	mov	sp, r7
 801bc9c:	bc90      	pop	{r4, r7}
 801bc9e:	b004      	add	sp, #16
 801bca0:	4770      	bx	lr
	...

0801bca4 <_ZN12TWIPR_Safety5startEv>:


void TWIPR_Safety::start(){
 801bca4:	b580      	push	{r7, lr}
 801bca6:	b082      	sub	sp, #8
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	6078      	str	r0, [r7, #4]
	osThreadNew(twipr_safety_task, (void*) this,
 801bcac:	4a04      	ldr	r2, [pc, #16]	; (801bcc0 <_ZN12TWIPR_Safety5startEv+0x1c>)
 801bcae:	6879      	ldr	r1, [r7, #4]
 801bcb0:	4804      	ldr	r0, [pc, #16]	; (801bcc4 <_ZN12TWIPR_Safety5startEv+0x20>)
 801bcb2:	f7f3 feb0 	bl	800fa16 <osThreadNew>
			&safety_task_attributes);
}
 801bcb6:	bf00      	nop
 801bcb8:	3708      	adds	r7, #8
 801bcba:	46bd      	mov	sp, r7
 801bcbc:	bd80      	pop	{r7, pc}
 801bcbe:	bf00      	nop
 801bcc0:	080258d4 	.word	0x080258d4
 801bcc4:	0801bd6d 	.word	0x0801bd6d

0801bcc8 <_ZN12TWIPR_Safety13task_functionEv>:


void TWIPR_Safety::task_function(){
 801bcc8:	b580      	push	{r7, lr}
 801bcca:	b084      	sub	sp, #16
 801bccc:	af00      	add	r7, sp, #0
 801bcce:	6078      	str	r0, [r7, #4]
	twipr_drive_speed_t speed;
	while (true) {
		speed = this->config.drive->getSpeed();
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	4618      	mov	r0, r3
 801bcd6:	f7fe fa27 	bl	801a128 <_ZN11TWIPR_Drive8getSpeedEv>
 801bcda:	eeb0 7a40 	vmov.f32	s14, s0
 801bcde:	eef0 7a60 	vmov.f32	s15, s1
 801bce2:	ed87 7a02 	vstr	s14, [r7, #8]
 801bce6:	edc7 7a03 	vstr	s15, [r7, #12]
		if (abs(speed.speed_left) > 50 || abs(speed.speed_right) > 50) {
 801bcea:	edd7 7a02 	vldr	s15, [r7, #8]
 801bcee:	eeb0 0a67 	vmov.f32	s0, s15
 801bcf2:	f7fd ffa6 	bl	8019c42 <_ZSt3absf>
 801bcf6:	eef0 7a40 	vmov.f32	s15, s0
 801bcfa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 801bd68 <_ZN12TWIPR_Safety13task_functionEv+0xa0>
 801bcfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd06:	dc0e      	bgt.n	801bd26 <_ZN12TWIPR_Safety13task_functionEv+0x5e>
 801bd08:	edd7 7a03 	vldr	s15, [r7, #12]
 801bd0c:	eeb0 0a67 	vmov.f32	s0, s15
 801bd10:	f7fd ff97 	bl	8019c42 <_ZSt3absf>
 801bd14:	eef0 7a40 	vmov.f32	s15, s0
 801bd18:	ed9f 7a13 	vldr	s14, [pc, #76]	; 801bd68 <_ZN12TWIPR_Safety13task_functionEv+0xa0>
 801bd1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801bd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd24:	dd01      	ble.n	801bd2a <_ZN12TWIPR_Safety13task_functionEv+0x62>
 801bd26:	2301      	movs	r3, #1
 801bd28:	e000      	b.n	801bd2c <_ZN12TWIPR_Safety13task_functionEv+0x64>
 801bd2a:	2300      	movs	r3, #0
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d004      	beq.n	801bd3a <_ZN12TWIPR_Safety13task_functionEv+0x72>
			this->config.control->stop();
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	685b      	ldr	r3, [r3, #4]
 801bd34:	4618      	mov	r0, r3
 801bd36:	f7fb fb4b 	bl	80173d0 <_ZN20TWIPR_ControlManager4stopEv>
		}

		if (this->config.off_button->check() == 0){
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	68db      	ldr	r3, [r3, #12]
 801bd3e:	4618      	mov	r0, r3
 801bd40:	f003 fb28 	bl	801f394 <_ZN20core_hardware_Button5checkEv>
 801bd44:	4603      	mov	r3, r0
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	bf0c      	ite	eq
 801bd4a:	2301      	moveq	r3, #1
 801bd4c:	2300      	movne	r3, #0
 801bd4e:	b2db      	uxtb	r3, r3
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d004      	beq.n	801bd5e <_ZN12TWIPR_Safety13task_functionEv+0x96>
			this->config.control->stop();
 801bd54:	687b      	ldr	r3, [r7, #4]
 801bd56:	685b      	ldr	r3, [r3, #4]
 801bd58:	4618      	mov	r0, r3
 801bd5a:	f7fb fb39 	bl	80173d0 <_ZN20TWIPR_ControlManager4stopEv>
		}
		osDelay(10);
 801bd5e:	200a      	movs	r0, #10
 801bd60:	f7f3 fef6 	bl	800fb50 <osDelay>
		speed = this->config.drive->getSpeed();
 801bd64:	e7b4      	b.n	801bcd0 <_ZN12TWIPR_Safety13task_functionEv+0x8>
 801bd66:	bf00      	nop
 801bd68:	42480000 	.word	0x42480000

0801bd6c <_Z17twipr_safety_taskPv>:
	}
}


void twipr_safety_task(void* args){
 801bd6c:	b580      	push	{r7, lr}
 801bd6e:	b084      	sub	sp, #16
 801bd70:	af00      	add	r7, sp, #0
 801bd72:	6078      	str	r0, [r7, #4]

	TWIPR_Safety* argument = (TWIPR_Safety*) args;
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	60fb      	str	r3, [r7, #12]
	argument->task_function();
 801bd78:	68f8      	ldr	r0, [r7, #12]
 801bd7a:	f7ff ffa5 	bl	801bcc8 <_ZN12TWIPR_Safety13task_functionEv>

}
 801bd7e:	bf00      	nop
 801bd80:	3710      	adds	r7, #16
 801bd82:	46bd      	mov	sp, r7
 801bd84:	bd80      	pop	{r7, pc}

0801bd86 <_ZN21RobotControl_ExtenderC1Ev>:
 *      Author: Dustin Lehmann
 */

#include "robot-control_extender.h"

RobotControl_Extender::RobotControl_Extender() {
 801bd86:	b480      	push	{r7}
 801bd88:	b083      	sub	sp, #12
 801bd8a:	af00      	add	r7, sp, #0
 801bd8c:	6078      	str	r0, [r7, #4]

}
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	4618      	mov	r0, r3
 801bd92:	370c      	adds	r7, #12
 801bd94:	46bd      	mov	sp, r7
 801bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd9a:	4770      	bx	lr

0801bd9c <_ZN21RobotControl_Extender4initE24extender_config_struct_t>:

void RobotControl_Extender::init(extender_config_struct_t config) {
 801bd9c:	b480      	push	{r7}
 801bd9e:	b083      	sub	sp, #12
 801bda0:	af00      	add	r7, sp, #0
 801bda2:	6078      	str	r0, [r7, #4]
 801bda4:	6039      	str	r1, [r7, #0]

	this->config = config;
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	683a      	ldr	r2, [r7, #0]
 801bdaa:	601a      	str	r2, [r3, #0]

}
 801bdac:	bf00      	nop
 801bdae:	370c      	adds	r7, #12
 801bdb0:	46bd      	mov	sp, r7
 801bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdb6:	4770      	bx	lr

0801bdb8 <_ZN21RobotControl_Extender12setStatusLEDEa>:

void RobotControl_Extender::start() {

}

void RobotControl_Extender::setStatusLED(int8_t status) {
 801bdb8:	b580      	push	{r7, lr}
 801bdba:	b088      	sub	sp, #32
 801bdbc:	af04      	add	r7, sp, #16
 801bdbe:	6078      	str	r0, [r7, #4]
 801bdc0:	460b      	mov	r3, r1
 801bdc2:	70fb      	strb	r3, [r7, #3]

	uint8_t data = (uint8_t) status;
 801bdc4:	78fb      	ldrb	r3, [r7, #3]
 801bdc6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->config.hi2c,
 801bdc8:	687b      	ldr	r3, [r7, #4]
 801bdca:	6818      	ldr	r0, [r3, #0]
 801bdcc:	2364      	movs	r3, #100	; 0x64
 801bdce:	9302      	str	r3, [sp, #8]
 801bdd0:	2301      	movs	r3, #1
 801bdd2:	9301      	str	r3, [sp, #4]
 801bdd4:	f107 030f 	add.w	r3, r7, #15
 801bdd8:	9300      	str	r3, [sp, #0]
 801bdda:	2301      	movs	r3, #1
 801bddc:	221c      	movs	r2, #28
 801bdde:	2102      	movs	r1, #2
 801bde0:	f7ea fb38 	bl	8006454 <HAL_I2C_Mem_Write>
	EXTENDER_ADDRESS, REG_ERROR_LED_CONFIG, 1, &data, 1, 100);
}
 801bde4:	bf00      	nop
 801bde6:	3710      	adds	r7, #16
 801bde8:	46bd      	mov	sp, r7
 801bdea:	bd80      	pop	{r7, pc}

0801bdec <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh>:


void RobotControl_Extender::rgbLED_intern_setState(uint8_t position,
		uint8_t state) {
 801bdec:	b580      	push	{r7, lr}
 801bdee:	b086      	sub	sp, #24
 801bdf0:	af04      	add	r7, sp, #16
 801bdf2:	6078      	str	r0, [r7, #4]
 801bdf4:	460b      	mov	r3, r1
 801bdf6:	70fb      	strb	r3, [r7, #3]
 801bdf8:	4613      	mov	r3, r2
 801bdfa:	70bb      	strb	r3, [r7, #2]

	state = (state << 7) + 0;
 801bdfc:	78bb      	ldrb	r3, [r7, #2]
 801bdfe:	01db      	lsls	r3, r3, #7
 801be00:	b2db      	uxtb	r3, r3
 801be02:	70bb      	strb	r3, [r7, #2]

	switch (position) {
 801be04:	78fb      	ldrb	r3, [r7, #3]
 801be06:	2b02      	cmp	r3, #2
 801be08:	d022      	beq.n	801be50 <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x64>
 801be0a:	2b02      	cmp	r3, #2
 801be0c:	dc2e      	bgt.n	801be6c <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x80>
 801be0e:	2b00      	cmp	r3, #0
 801be10:	d002      	beq.n	801be18 <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x2c>
 801be12:	2b01      	cmp	r3, #1
 801be14:	d00e      	beq.n	801be34 <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x48>
	case 2:
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
		REG_STATUS_RGB_LED_3_CONFIG, 1, &state, 1, 10);
		break;
	default:
		break;
 801be16:	e029      	b.n	801be6c <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x80>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	6818      	ldr	r0, [r3, #0]
 801be1c:	230a      	movs	r3, #10
 801be1e:	9302      	str	r3, [sp, #8]
 801be20:	2301      	movs	r3, #1
 801be22:	9301      	str	r3, [sp, #4]
 801be24:	1cbb      	adds	r3, r7, #2
 801be26:	9300      	str	r3, [sp, #0]
 801be28:	2301      	movs	r3, #1
 801be2a:	2220      	movs	r2, #32
 801be2c:	2102      	movs	r1, #2
 801be2e:	f7ea fb11 	bl	8006454 <HAL_I2C_Mem_Write>
		break;
 801be32:	e01c      	b.n	801be6e <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x82>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	6818      	ldr	r0, [r3, #0]
 801be38:	230a      	movs	r3, #10
 801be3a:	9302      	str	r3, [sp, #8]
 801be3c:	2301      	movs	r3, #1
 801be3e:	9301      	str	r3, [sp, #4]
 801be40:	1cbb      	adds	r3, r7, #2
 801be42:	9300      	str	r3, [sp, #0]
 801be44:	2301      	movs	r3, #1
 801be46:	2226      	movs	r2, #38	; 0x26
 801be48:	2102      	movs	r1, #2
 801be4a:	f7ea fb03 	bl	8006454 <HAL_I2C_Mem_Write>
		break;
 801be4e:	e00e      	b.n	801be6e <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x82>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	6818      	ldr	r0, [r3, #0]
 801be54:	230a      	movs	r3, #10
 801be56:	9302      	str	r3, [sp, #8]
 801be58:	2301      	movs	r3, #1
 801be5a:	9301      	str	r3, [sp, #4]
 801be5c:	1cbb      	adds	r3, r7, #2
 801be5e:	9300      	str	r3, [sp, #0]
 801be60:	2301      	movs	r3, #1
 801be62:	222c      	movs	r2, #44	; 0x2c
 801be64:	2102      	movs	r1, #2
 801be66:	f7ea faf5 	bl	8006454 <HAL_I2C_Mem_Write>
		break;
 801be6a:	e000      	b.n	801be6e <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x82>
		break;
 801be6c:	bf00      	nop
	}
}
 801be6e:	bf00      	nop
 801be70:	3708      	adds	r7, #8
 801be72:	46bd      	mov	sp, r7
 801be74:	bd80      	pop	{r7, pc}

0801be76 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh>:

void RobotControl_Extender::rgbLED_intern_setColor(uint8_t position,
		uint8_t red, uint8_t green, uint8_t blue) {
 801be76:	b580      	push	{r7, lr}
 801be78:	b086      	sub	sp, #24
 801be7a:	af04      	add	r7, sp, #16
 801be7c:	6078      	str	r0, [r7, #4]
 801be7e:	4608      	mov	r0, r1
 801be80:	4611      	mov	r1, r2
 801be82:	461a      	mov	r2, r3
 801be84:	4603      	mov	r3, r0
 801be86:	70fb      	strb	r3, [r7, #3]
 801be88:	460b      	mov	r3, r1
 801be8a:	70bb      	strb	r3, [r7, #2]
 801be8c:	4613      	mov	r3, r2
 801be8e:	707b      	strb	r3, [r7, #1]
	switch (position) {
 801be90:	78fb      	ldrb	r3, [r7, #3]
 801be92:	2b02      	cmp	r3, #2
 801be94:	d058      	beq.n	801bf48 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0xd2>
 801be96:	2b02      	cmp	r3, #2
 801be98:	dc7f      	bgt.n	801bf9a <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x124>
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d002      	beq.n	801bea4 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x2e>
 801be9e:	2b01      	cmp	r3, #1
 801bea0:	d029      	beq.n	801bef6 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x80>
		REG_STATUS_RGB_LED_3_GREEN, 1, &green, 1, 10);
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
		REG_STATUS_RGB_LED_3_BLUE, 1, &blue, 1, 10);
		break;
	default:
		break;
 801bea2:	e07a      	b.n	801bf9a <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x124>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	6818      	ldr	r0, [r3, #0]
 801bea8:	230a      	movs	r3, #10
 801beaa:	9302      	str	r3, [sp, #8]
 801beac:	2301      	movs	r3, #1
 801beae:	9301      	str	r3, [sp, #4]
 801beb0:	1cbb      	adds	r3, r7, #2
 801beb2:	9300      	str	r3, [sp, #0]
 801beb4:	2301      	movs	r3, #1
 801beb6:	2221      	movs	r2, #33	; 0x21
 801beb8:	2102      	movs	r1, #2
 801beba:	f7ea facb 	bl	8006454 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	6818      	ldr	r0, [r3, #0]
 801bec2:	230a      	movs	r3, #10
 801bec4:	9302      	str	r3, [sp, #8]
 801bec6:	2301      	movs	r3, #1
 801bec8:	9301      	str	r3, [sp, #4]
 801beca:	1c7b      	adds	r3, r7, #1
 801becc:	9300      	str	r3, [sp, #0]
 801bece:	2301      	movs	r3, #1
 801bed0:	2222      	movs	r2, #34	; 0x22
 801bed2:	2102      	movs	r1, #2
 801bed4:	f7ea fabe 	bl	8006454 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	6818      	ldr	r0, [r3, #0]
 801bedc:	230a      	movs	r3, #10
 801bede:	9302      	str	r3, [sp, #8]
 801bee0:	2301      	movs	r3, #1
 801bee2:	9301      	str	r3, [sp, #4]
 801bee4:	f107 0310 	add.w	r3, r7, #16
 801bee8:	9300      	str	r3, [sp, #0]
 801beea:	2301      	movs	r3, #1
 801beec:	2223      	movs	r2, #35	; 0x23
 801beee:	2102      	movs	r1, #2
 801bef0:	f7ea fab0 	bl	8006454 <HAL_I2C_Mem_Write>
		break;
 801bef4:	e052      	b.n	801bf9c <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x126>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	6818      	ldr	r0, [r3, #0]
 801befa:	230a      	movs	r3, #10
 801befc:	9302      	str	r3, [sp, #8]
 801befe:	2301      	movs	r3, #1
 801bf00:	9301      	str	r3, [sp, #4]
 801bf02:	1cbb      	adds	r3, r7, #2
 801bf04:	9300      	str	r3, [sp, #0]
 801bf06:	2301      	movs	r3, #1
 801bf08:	2227      	movs	r2, #39	; 0x27
 801bf0a:	2102      	movs	r1, #2
 801bf0c:	f7ea faa2 	bl	8006454 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	6818      	ldr	r0, [r3, #0]
 801bf14:	230a      	movs	r3, #10
 801bf16:	9302      	str	r3, [sp, #8]
 801bf18:	2301      	movs	r3, #1
 801bf1a:	9301      	str	r3, [sp, #4]
 801bf1c:	1c7b      	adds	r3, r7, #1
 801bf1e:	9300      	str	r3, [sp, #0]
 801bf20:	2301      	movs	r3, #1
 801bf22:	2228      	movs	r2, #40	; 0x28
 801bf24:	2102      	movs	r1, #2
 801bf26:	f7ea fa95 	bl	8006454 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	6818      	ldr	r0, [r3, #0]
 801bf2e:	230a      	movs	r3, #10
 801bf30:	9302      	str	r3, [sp, #8]
 801bf32:	2301      	movs	r3, #1
 801bf34:	9301      	str	r3, [sp, #4]
 801bf36:	f107 0310 	add.w	r3, r7, #16
 801bf3a:	9300      	str	r3, [sp, #0]
 801bf3c:	2301      	movs	r3, #1
 801bf3e:	2229      	movs	r2, #41	; 0x29
 801bf40:	2102      	movs	r1, #2
 801bf42:	f7ea fa87 	bl	8006454 <HAL_I2C_Mem_Write>
		break;
 801bf46:	e029      	b.n	801bf9c <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x126>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	6818      	ldr	r0, [r3, #0]
 801bf4c:	230a      	movs	r3, #10
 801bf4e:	9302      	str	r3, [sp, #8]
 801bf50:	2301      	movs	r3, #1
 801bf52:	9301      	str	r3, [sp, #4]
 801bf54:	1cbb      	adds	r3, r7, #2
 801bf56:	9300      	str	r3, [sp, #0]
 801bf58:	2301      	movs	r3, #1
 801bf5a:	222d      	movs	r2, #45	; 0x2d
 801bf5c:	2102      	movs	r1, #2
 801bf5e:	f7ea fa79 	bl	8006454 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	6818      	ldr	r0, [r3, #0]
 801bf66:	230a      	movs	r3, #10
 801bf68:	9302      	str	r3, [sp, #8]
 801bf6a:	2301      	movs	r3, #1
 801bf6c:	9301      	str	r3, [sp, #4]
 801bf6e:	1c7b      	adds	r3, r7, #1
 801bf70:	9300      	str	r3, [sp, #0]
 801bf72:	2301      	movs	r3, #1
 801bf74:	222e      	movs	r2, #46	; 0x2e
 801bf76:	2102      	movs	r1, #2
 801bf78:	f7ea fa6c 	bl	8006454 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	6818      	ldr	r0, [r3, #0]
 801bf80:	230a      	movs	r3, #10
 801bf82:	9302      	str	r3, [sp, #8]
 801bf84:	2301      	movs	r3, #1
 801bf86:	9301      	str	r3, [sp, #4]
 801bf88:	f107 0310 	add.w	r3, r7, #16
 801bf8c:	9300      	str	r3, [sp, #0]
 801bf8e:	2301      	movs	r3, #1
 801bf90:	222f      	movs	r2, #47	; 0x2f
 801bf92:	2102      	movs	r1, #2
 801bf94:	f7ea fa5e 	bl	8006454 <HAL_I2C_Mem_Write>
		break;
 801bf98:	e000      	b.n	801bf9c <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x126>
		break;
 801bf9a:	bf00      	nop
	}
}
 801bf9c:	bf00      	nop
 801bf9e:	3708      	adds	r7, #8
 801bfa0:	46bd      	mov	sp, r7
 801bfa2:	bd80      	pop	{r7, pc}

0801bfa4 <_ZN21RobotControl_Extender16buzzer_setConfigEfth>:
		break;
	}
}


void RobotControl_Extender::buzzer_setConfig(float frequency, uint16_t on_time, uint8_t repeats){
 801bfa4:	b580      	push	{r7, lr}
 801bfa6:	b08a      	sub	sp, #40	; 0x28
 801bfa8:	af04      	add	r7, sp, #16
 801bfaa:	60f8      	str	r0, [r7, #12]
 801bfac:	ed87 0a02 	vstr	s0, [r7, #8]
 801bfb0:	460b      	mov	r3, r1
 801bfb2:	80fb      	strh	r3, [r7, #6]
 801bfb4:	4613      	mov	r3, r2
 801bfb6:	717b      	strb	r3, [r7, #5]

	uint8_t freq = (uint8_t) (frequency / 10);
 801bfb8:	ed97 7a02 	vldr	s14, [r7, #8]
 801bfbc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 801bfc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801bfc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bfc8:	edc7 7a00 	vstr	s15, [r7]
 801bfcc:	783b      	ldrb	r3, [r7, #0]
 801bfce:	b2db      	uxtb	r3, r3
 801bfd0:	75fb      	strb	r3, [r7, #23]
	uint8_t time = (uint8_t) (on_time / 10);
 801bfd2:	88fb      	ldrh	r3, [r7, #6]
 801bfd4:	4a19      	ldr	r2, [pc, #100]	; (801c03c <_ZN21RobotControl_Extender16buzzer_setConfigEfth+0x98>)
 801bfd6:	fba2 2303 	umull	r2, r3, r2, r3
 801bfda:	08db      	lsrs	r3, r3, #3
 801bfdc:	b29b      	uxth	r3, r3
 801bfde:	b2db      	uxtb	r3, r3
 801bfe0:	75bb      	strb	r3, [r7, #22]

	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801bfe2:	68fb      	ldr	r3, [r7, #12]
 801bfe4:	6818      	ldr	r0, [r3, #0]
 801bfe6:	230a      	movs	r3, #10
 801bfe8:	9302      	str	r3, [sp, #8]
 801bfea:	2301      	movs	r3, #1
 801bfec:	9301      	str	r3, [sp, #4]
 801bfee:	f107 0317 	add.w	r3, r7, #23
 801bff2:	9300      	str	r3, [sp, #0]
 801bff4:	2301      	movs	r3, #1
 801bff6:	2235      	movs	r2, #53	; 0x35
 801bff8:	2102      	movs	r1, #2
 801bffa:	f7ea fa2b 	bl	8006454 <HAL_I2C_Mem_Write>
			REG_BUZZER_FREQ, 1, &freq, 1, 10);

	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801bffe:	68fb      	ldr	r3, [r7, #12]
 801c000:	6818      	ldr	r0, [r3, #0]
 801c002:	230a      	movs	r3, #10
 801c004:	9302      	str	r3, [sp, #8]
 801c006:	2301      	movs	r3, #1
 801c008:	9301      	str	r3, [sp, #4]
 801c00a:	f107 0316 	add.w	r3, r7, #22
 801c00e:	9300      	str	r3, [sp, #0]
 801c010:	2301      	movs	r3, #1
 801c012:	2237      	movs	r2, #55	; 0x37
 801c014:	2102      	movs	r1, #2
 801c016:	f7ea fa1d 	bl	8006454 <HAL_I2C_Mem_Write>
			REG_BUZZER_BLINK_TIME, 1, &time, 1, 10);

	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	6818      	ldr	r0, [r3, #0]
 801c01e:	230a      	movs	r3, #10
 801c020:	9302      	str	r3, [sp, #8]
 801c022:	2301      	movs	r3, #1
 801c024:	9301      	str	r3, [sp, #4]
 801c026:	1d7b      	adds	r3, r7, #5
 801c028:	9300      	str	r3, [sp, #0]
 801c02a:	2301      	movs	r3, #1
 801c02c:	2238      	movs	r2, #56	; 0x38
 801c02e:	2102      	movs	r1, #2
 801c030:	f7ea fa10 	bl	8006454 <HAL_I2C_Mem_Write>
			REG_BUZZER_BLINK_COUNTER, 1, &repeats, 1, 10);

}
 801c034:	bf00      	nop
 801c036:	3718      	adds	r7, #24
 801c038:	46bd      	mov	sp, r7
 801c03a:	bd80      	pop	{r7, pc}
 801c03c:	cccccccd 	.word	0xcccccccd

0801c040 <_ZN21RobotControl_Extender12buzzer_startEv>:
void RobotControl_Extender::buzzer_start(){
 801c040:	b580      	push	{r7, lr}
 801c042:	b088      	sub	sp, #32
 801c044:	af04      	add	r7, sp, #16
 801c046:	6078      	str	r0, [r7, #4]
	uint8_t data = 1;
 801c048:	2301      	movs	r3, #1
 801c04a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	6818      	ldr	r0, [r3, #0]
 801c050:	230a      	movs	r3, #10
 801c052:	9302      	str	r3, [sp, #8]
 801c054:	2301      	movs	r3, #1
 801c056:	9301      	str	r3, [sp, #4]
 801c058:	f107 030f 	add.w	r3, r7, #15
 801c05c:	9300      	str	r3, [sp, #0]
 801c05e:	2301      	movs	r3, #1
 801c060:	2234      	movs	r2, #52	; 0x34
 801c062:	2102      	movs	r1, #2
 801c064:	f7ea f9f6 	bl	8006454 <HAL_I2C_Mem_Write>
			REG_BUZZER_DATA, 1, &data, 1, 10);
}
 801c068:	bf00      	nop
 801c06a:	3710      	adds	r7, #16
 801c06c:	46bd      	mov	sp, r7
 801c06e:	bd80      	pop	{r7, pc}

0801c070 <_ZN19RobotControl_RGBLEDC1Eh>:

#include "robot-control_indicators.h"

extern RobotControl_Extender extender;

RobotControl_RGBLED::RobotControl_RGBLED(uint8_t position) {
 801c070:	b480      	push	{r7}
 801c072:	b083      	sub	sp, #12
 801c074:	af00      	add	r7, sp, #0
 801c076:	6078      	str	r0, [r7, #4]
 801c078:	460b      	mov	r3, r1
 801c07a:	70fb      	strb	r3, [r7, #3]
	this->position = position;
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	78fa      	ldrb	r2, [r7, #3]
 801c080:	701a      	strb	r2, [r3, #0]
}
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	4618      	mov	r0, r3
 801c086:	370c      	adds	r7, #12
 801c088:	46bd      	mov	sp, r7
 801c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c08e:	4770      	bx	lr

0801c090 <_ZN19RobotControl_RGBLED8setColorEhhh>:

void RobotControl_RGBLED::setColor(uint8_t red, uint8_t green, uint8_t blue) {
 801c090:	b580      	push	{r7, lr}
 801c092:	b084      	sub	sp, #16
 801c094:	af02      	add	r7, sp, #8
 801c096:	6078      	str	r0, [r7, #4]
 801c098:	4608      	mov	r0, r1
 801c09a:	4611      	mov	r1, r2
 801c09c:	461a      	mov	r2, r3
 801c09e:	4603      	mov	r3, r0
 801c0a0:	70fb      	strb	r3, [r7, #3]
 801c0a2:	460b      	mov	r3, r1
 801c0a4:	70bb      	strb	r3, [r7, #2]
 801c0a6:	4613      	mov	r3, r2
 801c0a8:	707b      	strb	r3, [r7, #1]
	extender.rgbLED_intern_setColor(position, red, green, blue);
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	7819      	ldrb	r1, [r3, #0]
 801c0ae:	78b8      	ldrb	r0, [r7, #2]
 801c0b0:	78fa      	ldrb	r2, [r7, #3]
 801c0b2:	787b      	ldrb	r3, [r7, #1]
 801c0b4:	9300      	str	r3, [sp, #0]
 801c0b6:	4603      	mov	r3, r0
 801c0b8:	4803      	ldr	r0, [pc, #12]	; (801c0c8 <_ZN19RobotControl_RGBLED8setColorEhhh+0x38>)
 801c0ba:	f7ff fedc 	bl	801be76 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh>

}
 801c0be:	bf00      	nop
 801c0c0:	3708      	adds	r7, #8
 801c0c2:	46bd      	mov	sp, r7
 801c0c4:	bd80      	pop	{r7, pc}
 801c0c6:	bf00      	nop
 801c0c8:	2401e0f4 	.word	0x2401e0f4

0801c0cc <_ZN19RobotControl_RGBLED5stateEh>:
void RobotControl_RGBLED::blink(uint16_t on_time) {
	extender.rgbLED_intern_blink(position, on_time);
}
void RobotControl_RGBLED::state(uint8_t state) {
 801c0cc:	b580      	push	{r7, lr}
 801c0ce:	b082      	sub	sp, #8
 801c0d0:	af00      	add	r7, sp, #0
 801c0d2:	6078      	str	r0, [r7, #4]
 801c0d4:	460b      	mov	r3, r1
 801c0d6:	70fb      	strb	r3, [r7, #3]
	extender.rgbLED_intern_setState(position, state);
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	781b      	ldrb	r3, [r3, #0]
 801c0dc:	78fa      	ldrb	r2, [r7, #3]
 801c0de:	4619      	mov	r1, r3
 801c0e0:	4803      	ldr	r0, [pc, #12]	; (801c0f0 <_ZN19RobotControl_RGBLED5stateEh+0x24>)
 801c0e2:	f7ff fe83 	bl	801bdec <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh>
}
 801c0e6:	bf00      	nop
 801c0e8:	3708      	adds	r7, #8
 801c0ea:	46bd      	mov	sp, r7
 801c0ec:	bd80      	pop	{r7, pc}
 801c0ee:	bf00      	nop
 801c0f0:	2401e0f4 	.word	0x2401e0f4

0801c0f4 <_ZN19RobotControl_BuzzerC1Ev>:

RobotControl_Buzzer::RobotControl_Buzzer() {
 801c0f4:	b480      	push	{r7}
 801c0f6:	b083      	sub	sp, #12
 801c0f8:	af00      	add	r7, sp, #0
 801c0fa:	6078      	str	r0, [r7, #4]

}
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	4618      	mov	r0, r3
 801c100:	370c      	adds	r7, #12
 801c102:	46bd      	mov	sp, r7
 801c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c108:	4770      	bx	lr
	...

0801c10c <_ZN19RobotControl_Buzzer9setConfigEfth>:

void RobotControl_Buzzer::setConfig(float freq, uint16_t on_time,
		uint8_t repeats) {
 801c10c:	b580      	push	{r7, lr}
 801c10e:	b084      	sub	sp, #16
 801c110:	af00      	add	r7, sp, #0
 801c112:	60f8      	str	r0, [r7, #12]
 801c114:	ed87 0a02 	vstr	s0, [r7, #8]
 801c118:	460b      	mov	r3, r1
 801c11a:	80fb      	strh	r3, [r7, #6]
 801c11c:	4613      	mov	r3, r2
 801c11e:	717b      	strb	r3, [r7, #5]
	extender.buzzer_setConfig(freq, on_time, repeats);
 801c120:	797a      	ldrb	r2, [r7, #5]
 801c122:	88fb      	ldrh	r3, [r7, #6]
 801c124:	4619      	mov	r1, r3
 801c126:	ed97 0a02 	vldr	s0, [r7, #8]
 801c12a:	4803      	ldr	r0, [pc, #12]	; (801c138 <_ZN19RobotControl_Buzzer9setConfigEfth+0x2c>)
 801c12c:	f7ff ff3a 	bl	801bfa4 <_ZN21RobotControl_Extender16buzzer_setConfigEfth>
}
 801c130:	bf00      	nop
 801c132:	3710      	adds	r7, #16
 801c134:	46bd      	mov	sp, r7
 801c136:	bd80      	pop	{r7, pc}
 801c138:	2401e0f4 	.word	0x2401e0f4

0801c13c <_ZN19RobotControl_Buzzer5startEv>:
void RobotControl_Buzzer::start() {
 801c13c:	b580      	push	{r7, lr}
 801c13e:	b082      	sub	sp, #8
 801c140:	af00      	add	r7, sp, #0
 801c142:	6078      	str	r0, [r7, #4]
	extender.buzzer_start();
 801c144:	4803      	ldr	r0, [pc, #12]	; (801c154 <_ZN19RobotControl_Buzzer5startEv+0x18>)
 801c146:	f7ff ff7b 	bl	801c040 <_ZN21RobotControl_Extender12buzzer_startEv>
}
 801c14a:	bf00      	nop
 801c14c:	3708      	adds	r7, #8
 801c14e:	46bd      	mov	sp, r7
 801c150:	bd80      	pop	{r7, pc}
 801c152:	bf00      	nop
 801c154:	2401e0f4 	.word	0x2401e0f4

0801c158 <_ZN22RobotControl_StatusLEDC1Ev>:

RobotControl_StatusLED::RobotControl_StatusLED() {
 801c158:	b480      	push	{r7}
 801c15a:	b083      	sub	sp, #12
 801c15c:	af00      	add	r7, sp, #0
 801c15e:	6078      	str	r0, [r7, #4]

}
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	4618      	mov	r0, r3
 801c164:	370c      	adds	r7, #12
 801c166:	46bd      	mov	sp, r7
 801c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c16c:	4770      	bx	lr
	...

0801c170 <_ZN22RobotControl_StatusLED8setStateEa>:
void RobotControl_StatusLED::setState(int8_t state) {
 801c170:	b580      	push	{r7, lr}
 801c172:	b082      	sub	sp, #8
 801c174:	af00      	add	r7, sp, #0
 801c176:	6078      	str	r0, [r7, #4]
 801c178:	460b      	mov	r3, r1
 801c17a:	70fb      	strb	r3, [r7, #3]
	extender.setStatusLED(state);
 801c17c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c180:	4619      	mov	r1, r3
 801c182:	4803      	ldr	r0, [pc, #12]	; (801c190 <_ZN22RobotControl_StatusLED8setStateEa+0x20>)
 801c184:	f7ff fe18 	bl	801bdb8 <_ZN21RobotControl_Extender12setStatusLEDEa>
}
 801c188:	bf00      	nop
 801c18a:	3708      	adds	r7, #8
 801c18c:	46bd      	mov	sp, r7
 801c18e:	bd80      	pop	{r7, pc}
 801c190:	2401e0f4 	.word	0x2401e0f4

0801c194 <_Z18robot_control_initv>:
void robot_control_task(void *argument);



// ------------------------------------------------------------------------------------------------------------
void robot_control_init(){
 801c194:	b580      	push	{r7, lr}
 801c196:	b082      	sub	sp, #8
 801c198:	af00      	add	r7, sp, #0
	extender_config_struct_t extender_config = {
 801c19a:	4b05      	ldr	r3, [pc, #20]	; (801c1b0 <_Z18robot_control_initv+0x1c>)
 801c19c:	607b      	str	r3, [r7, #4]
			.hi2c = BOARD_I2C_INTERN,
	};
	extender.init(extender_config);
 801c19e:	6879      	ldr	r1, [r7, #4]
 801c1a0:	4804      	ldr	r0, [pc, #16]	; (801c1b4 <_Z18robot_control_initv+0x20>)
 801c1a2:	f7ff fdfb 	bl	801bd9c <_ZN21RobotControl_Extender4initE24extender_config_struct_t>
//	debug_uart.init();
//	debug_uart.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX, uart_rx_fun, NULL);

}
 801c1a6:	bf00      	nop
 801c1a8:	3708      	adds	r7, #8
 801c1aa:	46bd      	mov	sp, r7
 801c1ac:	bd80      	pop	{r7, pc}
 801c1ae:	bf00      	nop
 801c1b0:	240002e4 	.word	0x240002e4
 801c1b4:	2401e0f4 	.word	0x2401e0f4

0801c1b8 <_Z19robot_control_startv>:
// ------------------------------------------------------------------------------------------------------------
void robot_control_start(){
 801c1b8:	b580      	push	{r7, lr}
 801c1ba:	af00      	add	r7, sp, #0
//	debug_uart.start();
	osThreadNew(robot_control_task, NULL, &rc_task_attributes);
 801c1bc:	4a03      	ldr	r2, [pc, #12]	; (801c1cc <_Z19robot_control_startv+0x14>)
 801c1be:	2100      	movs	r1, #0
 801c1c0:	4803      	ldr	r0, [pc, #12]	; (801c1d0 <_Z19robot_control_startv+0x18>)
 801c1c2:	f7f3 fc28 	bl	800fa16 <osThreadNew>
}
 801c1c6:	bf00      	nop
 801c1c8:	bd80      	pop	{r7, pc}
 801c1ca:	bf00      	nop
 801c1cc:	080258f8 	.word	0x080258f8
 801c1d0:	0801c1d5 	.word	0x0801c1d5

0801c1d4 <_Z18robot_control_taskPv>:

// ------------------------------------------------------------------------------------------------------------
void robot_control_task(void *argument){
 801c1d4:	b580      	push	{r7, lr}
 801c1d6:	b084      	sub	sp, #16
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	6078      	str	r0, [r7, #4]
//	debug.start();
	rc_error_led.setState(0);
 801c1dc:	2100      	movs	r1, #0
 801c1de:	4810      	ldr	r0, [pc, #64]	; (801c220 <_Z18robot_control_taskPv+0x4c>)
 801c1e0:	f7ff ffc6 	bl	801c170 <_ZN22RobotControl_StatusLED8setStateEa>

	rc_buzzer.setConfig(440, 250, 1);
 801c1e4:	2201      	movs	r2, #1
 801c1e6:	21fa      	movs	r1, #250	; 0xfa
 801c1e8:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 801c224 <_Z18robot_control_taskPv+0x50>
 801c1ec:	480e      	ldr	r0, [pc, #56]	; (801c228 <_Z18robot_control_taskPv+0x54>)
 801c1ee:	f7ff ff8d 	bl	801c10c <_ZN19RobotControl_Buzzer9setConfigEfth>
	rc_buzzer.start();
 801c1f2:	480d      	ldr	r0, [pc, #52]	; (801c228 <_Z18robot_control_taskPv+0x54>)
 801c1f4:	f7ff ffa2 	bl	801c13c <_ZN19RobotControl_Buzzer5startEv>

	rc_button_led_1.on();
 801c1f8:	480c      	ldr	r0, [pc, #48]	; (801c22c <_Z18robot_control_taskPv+0x58>)
 801c1fa:	f003 f8f0 	bl	801f3de <_ZN17core_hardware_LED2onEv>
	rc_button_led_2.on();
 801c1fe:	480c      	ldr	r0, [pc, #48]	; (801c230 <_Z18robot_control_taskPv+0x5c>)
 801c200:	f003 f8ed 	bl	801f3de <_ZN17core_hardware_LED2onEv>


	uint32_t kernel_ticks = 0;
 801c204:	2300      	movs	r3, #0
 801c206:	60fb      	str	r3, [r7, #12]
	while (true){
			kernel_ticks = osKernelGetTickCount();
 801c208:	f7f3 fbf0 	bl	800f9ec <osKernelGetTickCount>
 801c20c:	60f8      	str	r0, [r7, #12]
			rc_activity_led.toggle();
 801c20e:	4809      	ldr	r0, [pc, #36]	; (801c234 <_Z18robot_control_taskPv+0x60>)
 801c210:	f003 f905 	bl	801f41e <_ZN17core_hardware_LED6toggleEv>
			osDelayUntil(kernel_ticks + (uint32_t) 250);
 801c214:	68fb      	ldr	r3, [r7, #12]
 801c216:	33fa      	adds	r3, #250	; 0xfa
 801c218:	4618      	mov	r0, r3
 801c21a:	f7f3 fcb4 	bl	800fb86 <osDelayUntil>
			kernel_ticks = osKernelGetTickCount();
 801c21e:	e7f3      	b.n	801c208 <_Z18robot_control_taskPv+0x34>
 801c220:	2401e0f0 	.word	0x2401e0f0
 801c224:	43dc0000 	.word	0x43dc0000
 801c228:	2401e104 	.word	0x2401e104
 801c22c:	2401e0c8 	.word	0x2401e0c8
 801c230:	2401e0d0 	.word	0x2401e0d0
 801c234:	2401e0e8 	.word	0x2401e0e8

0801c238 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 801c238:	b580      	push	{r7, lr}
 801c23a:	b082      	sub	sp, #8
 801c23c:	af00      	add	r7, sp, #0
 801c23e:	6078      	str	r0, [r7, #4]
 801c240:	6039      	str	r1, [r7, #0]
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	2b01      	cmp	r3, #1
 801c246:	d13b      	bne.n	801c2c0 <_Z41__static_initialization_and_destruction_0ii+0x88>
 801c248:	683b      	ldr	r3, [r7, #0]
 801c24a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c24e:	4293      	cmp	r3, r2
 801c250:	d136      	bne.n	801c2c0 <_Z41__static_initialization_and_destruction_0ii+0x88>
core_hardware_LED rc_status_led_2(BOARD_LED_2_PORT, BOARD_LED_2_PIN);
 801c252:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801c256:	491c      	ldr	r1, [pc, #112]	; (801c2c8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 801c258:	481c      	ldr	r0, [pc, #112]	; (801c2cc <_Z41__static_initialization_and_destruction_0ii+0x94>)
 801c25a:	f003 f8ac 	bl	801f3b6 <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_LED rc_button_led_1(GPIOA, GPIO_PIN_0);
 801c25e:	2201      	movs	r2, #1
 801c260:	491b      	ldr	r1, [pc, #108]	; (801c2d0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 801c262:	481c      	ldr	r0, [pc, #112]	; (801c2d4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 801c264:	f003 f8a7 	bl	801f3b6 <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_LED rc_button_led_2(GPIOA, GPIO_PIN_1);
 801c268:	2202      	movs	r2, #2
 801c26a:	4919      	ldr	r1, [pc, #100]	; (801c2d0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 801c26c:	481a      	ldr	r0, [pc, #104]	; (801c2d8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 801c26e:	f003 f8a2 	bl	801f3b6 <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_Button side_button(GPIOC, GPIO_PIN_1);
 801c272:	2202      	movs	r2, #2
 801c274:	4919      	ldr	r1, [pc, #100]	; (801c2dc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 801c276:	481a      	ldr	r0, [pc, #104]	; (801c2e0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 801c278:	f003 f878 	bl	801f36c <_ZN20core_hardware_ButtonC1EP12GPIO_TypeDeft>
core_hardware_Button off_button(GPIOC, GPIO_PIN_0);
 801c27c:	2201      	movs	r2, #1
 801c27e:	4917      	ldr	r1, [pc, #92]	; (801c2dc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 801c280:	4818      	ldr	r0, [pc, #96]	; (801c2e4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801c282:	f003 f873 	bl	801f36c <_ZN20core_hardware_ButtonC1EP12GPIO_TypeDeft>
core_hardware_LED rc_activity_led(BOARD_LED_ACT_PORT, BOARD_LED_ACT_PIN);
 801c286:	2208      	movs	r2, #8
 801c288:	490f      	ldr	r1, [pc, #60]	; (801c2c8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 801c28a:	4817      	ldr	r0, [pc, #92]	; (801c2e8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 801c28c:	f003 f893 	bl	801f3b6 <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
RobotControl_StatusLED rc_error_led;
 801c290:	4816      	ldr	r0, [pc, #88]	; (801c2ec <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 801c292:	f7ff ff61 	bl	801c158 <_ZN22RobotControl_StatusLEDC1Ev>
RobotControl_Extender extender;
 801c296:	4816      	ldr	r0, [pc, #88]	; (801c2f0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 801c298:	f7ff fd75 	bl	801bd86 <_ZN21RobotControl_ExtenderC1Ev>
RobotControl_RGBLED rc_rgb_led_status(0);
 801c29c:	2100      	movs	r1, #0
 801c29e:	4815      	ldr	r0, [pc, #84]	; (801c2f4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 801c2a0:	f7ff fee6 	bl	801c070 <_ZN19RobotControl_RGBLEDC1Eh>
RobotControl_RGBLED rc_rgb_led_side_1(1);
 801c2a4:	2101      	movs	r1, #1
 801c2a6:	4814      	ldr	r0, [pc, #80]	; (801c2f8 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 801c2a8:	f7ff fee2 	bl	801c070 <_ZN19RobotControl_RGBLEDC1Eh>
RobotControl_RGBLED rc_rgb_led_side_2(2);
 801c2ac:	2102      	movs	r1, #2
 801c2ae:	4813      	ldr	r0, [pc, #76]	; (801c2fc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 801c2b0:	f7ff fede 	bl	801c070 <_ZN19RobotControl_RGBLEDC1Eh>
RobotControl_Buzzer rc_buzzer;
 801c2b4:	4812      	ldr	r0, [pc, #72]	; (801c300 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 801c2b6:	f7ff ff1d 	bl	801c0f4 <_ZN19RobotControl_BuzzerC1Ev>
Madgwick sensor_fusion;
 801c2ba:	4812      	ldr	r0, [pc, #72]	; (801c304 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 801c2bc:	f002 fcc8 	bl	801ec50 <_ZN8MadgwickC1Ev>
}
 801c2c0:	bf00      	nop
 801c2c2:	3708      	adds	r7, #8
 801c2c4:	46bd      	mov	sp, r7
 801c2c6:	bd80      	pop	{r7, pc}
 801c2c8:	58021000 	.word	0x58021000
 801c2cc:	2401e0c0 	.word	0x2401e0c0
 801c2d0:	58020000 	.word	0x58020000
 801c2d4:	2401e0c8 	.word	0x2401e0c8
 801c2d8:	2401e0d0 	.word	0x2401e0d0
 801c2dc:	58020800 	.word	0x58020800
 801c2e0:	2401e0d8 	.word	0x2401e0d8
 801c2e4:	2401e0e0 	.word	0x2401e0e0
 801c2e8:	2401e0e8 	.word	0x2401e0e8
 801c2ec:	2401e0f0 	.word	0x2401e0f0
 801c2f0:	2401e0f4 	.word	0x2401e0f4
 801c2f4:	2401e0f8 	.word	0x2401e0f8
 801c2f8:	2401e0fc 	.word	0x2401e0fc
 801c2fc:	2401e100 	.word	0x2401e100
 801c300:	2401e104 	.word	0x2401e104
 801c304:	2401e108 	.word	0x2401e108

0801c308 <_GLOBAL__sub_I_rc_status_led_2>:
 801c308:	b580      	push	{r7, lr}
 801c30a:	af00      	add	r7, sp, #0
 801c30c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c310:	2001      	movs	r0, #1
 801c312:	f7ff ff91 	bl	801c238 <_Z41__static_initialization_and_destruction_0ii>
 801c316:	bd80      	pop	{r7, pc}

0801c318 <_ZN12ModbusMasterC1Ev>:
void uartRxCompleteDMA_callback(UART_HandleTypeDef *huart, uint16_t size);
static void uartRxCompleteIT_callback(UART_HandleTypeDef *huart);
void uartTxCompleteDMA_callback(UART_HandleTypeDef *huart);

/* ================================================================ */
ModbusMaster::ModbusMaster() {
 801c318:	b580      	push	{r7, lr}
 801c31a:	b082      	sub	sp, #8
 801c31c:	af00      	add	r7, sp, #0
 801c31e:	6078      	str	r0, [r7, #4]
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	f503 730a 	add.w	r3, r3, #552	; 0x228
 801c326:	4618      	mov	r0, r3
 801c328:	f001 f8eb 	bl	801d502 <_ZN21core_utils_RingBufferILi128EEC1Ev>

}
 801c32c:	687b      	ldr	r3, [r7, #4]
 801c32e:	4618      	mov	r0, r3
 801c330:	3708      	adds	r7, #8
 801c332:	46bd      	mov	sp, r7
 801c334:	bd80      	pop	{r7, pc}
	...

0801c338 <_ZN12ModbusMaster4initE15modbus_config_t>:
/* ================================================================ */
void ModbusMaster::init(modbus_config_t config) {
 801c338:	b580      	push	{r7, lr}
 801c33a:	b086      	sub	sp, #24
 801c33c:	af02      	add	r7, sp, #8
 801c33e:	60f8      	str	r0, [r7, #12]
 801c340:	4638      	mov	r0, r7
 801c342:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	this->config = config;
 801c346:	68fb      	ldr	r3, [r7, #12]
 801c348:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 801c34c:	463a      	mov	r2, r7
 801c34e:	ca07      	ldmia	r2, {r0, r1, r2}
 801c350:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	if (num_handlers < MAX_MODBUS_HANDLERS) {
 801c354:	4b3a      	ldr	r3, [pc, #232]	; (801c440 <_ZN12ModbusMaster4initE15modbus_config_t+0x108>)
 801c356:	781b      	ldrb	r3, [r3, #0]
 801c358:	2b01      	cmp	r3, #1
 801c35a:	d86d      	bhi.n	801c438 <_ZN12ModbusMaster4initE15modbus_config_t+0x100>

		// Initialize the ring buffer
		this->xBufferRX.clear();
 801c35c:	68fb      	ldr	r3, [r7, #12]
 801c35e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 801c362:	4618      	mov	r0, r3
 801c364:	f001 f8d8 	bl	801d518 <_ZN21core_utils_RingBufferILi128EE5clearEv>

		// Create the master task and the queue for telegrams
		this->thread_handle = osThreadNew(modbusMasterTask, this,
 801c368:	4a36      	ldr	r2, [pc, #216]	; (801c444 <_ZN12ModbusMaster4initE15modbus_config_t+0x10c>)
 801c36a:	68f9      	ldr	r1, [r7, #12]
 801c36c:	4836      	ldr	r0, [pc, #216]	; (801c448 <_ZN12ModbusMaster4initE15modbus_config_t+0x110>)
 801c36e:	f7f3 fb52 	bl	800fa16 <osThreadNew>
 801c372:	4602      	mov	r2, r0
 801c374:	68fb      	ldr	r3, [r7, #12]
 801c376:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
				&task_attributes);

		//
		this->u16timeOut = 20;
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	2214      	movs	r2, #20
 801c37e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
		// Initialize the timeout timer
		this->xTimerTimeout = xTimerCreate("xTimerTimeout", // Just a text name, not used by the kernel.
				this->u16timeOut,     		// The timer period in ticks.
 801c382:	68fb      	ldr	r3, [r7, #12]
 801c384:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
		this->xTimerTimeout = xTimerCreate("xTimerTimeout", // Just a text name, not used by the kernel.
 801c388:	4619      	mov	r1, r3
				pdFALSE, // The timers will auto-reload themselves when they expire.
				(void*) this->xTimerTimeout, // Assign each timer a unique id equal to its array index.
 801c38a:	68fb      	ldr	r3, [r7, #12]
 801c38c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
		this->xTimerTimeout = xTimerCreate("xTimerTimeout", // Just a text name, not used by the kernel.
 801c390:	4a2e      	ldr	r2, [pc, #184]	; (801c44c <_ZN12ModbusMaster4initE15modbus_config_t+0x114>)
 801c392:	9200      	str	r2, [sp, #0]
 801c394:	2200      	movs	r2, #0
 801c396:	482e      	ldr	r0, [pc, #184]	; (801c450 <_ZN12ModbusMaster4initE15modbus_config_t+0x118>)
 801c398:	f7f6 fbfe 	bl	8012b98 <xTimerCreate>
 801c39c:	4602      	mov	r2, r0
 801c39e:	68fb      	ldr	r3, [r7, #12]
 801c3a0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
				(TimerCallbackFunction_t) vTimerCallbackTimeout // Each timer calls the same callback when it expires.
				);

		if (this->xTimerTimeout == NULL) {
 801c3a4:	68fb      	ldr	r3, [r7, #12]
 801c3a6:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d100      	bne.n	801c3b0 <_ZN12ModbusMaster4initE15modbus_config_t+0x78>
			while (1)
 801c3ae:	e7fe      	b.n	801c3ae <_ZN12ModbusMaster4initE15modbus_config_t+0x76>
				; // TODO error creating timer, check heap and stack size
		}

		modbus_query_queue = osMessageQueueNew(MAX_TELEGRAMS,
 801c3b0:	2200      	movs	r2, #0
 801c3b2:	2110      	movs	r1, #16
 801c3b4:	2014      	movs	r0, #20
 801c3b6:	f7f3 fdc5 	bl	800ff44 <osMessageQueueNew>
 801c3ba:	4603      	mov	r3, r0
 801c3bc:	4a25      	ldr	r2, [pc, #148]	; (801c454 <_ZN12ModbusMaster4initE15modbus_config_t+0x11c>)
 801c3be:	6013      	str	r3, [r2, #0]
				sizeof(modbus_query_t), NULL);

		if (modbus_query_queue == NULL) {
 801c3c0:	4b24      	ldr	r3, [pc, #144]	; (801c454 <_ZN12ModbusMaster4initE15modbus_config_t+0x11c>)
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	d100      	bne.n	801c3ca <_ZN12ModbusMaster4initE15modbus_config_t+0x92>
			while (1)
 801c3c8:	e7fe      	b.n	801c3c8 <_ZN12ModbusMaster4initE15modbus_config_t+0x90>
				; //error creating queue for telegrams, check heap and stack size
		}

		if (this->thread_handle == NULL) {
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801c3d0:	2b00      	cmp	r3, #0
 801c3d2:	d100      	bne.n	801c3d6 <_ZN12ModbusMaster4initE15modbus_config_t+0x9e>
			while (1)
 801c3d4:	e7fe      	b.n	801c3d4 <_ZN12ModbusMaster4initE15modbus_config_t+0x9c>
		}

		this->xTimerT35 = xTimerCreate("TimerT35", // Just a text name, not used by the kernel.
				T35,     // The timer period in ticks.
				pdFALSE, // The timers will auto-reload themselves when they expire.
				(void*) this->xTimerT35, // Assign each timer a unique id equal to its array index.
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
		this->xTimerT35 = xTimerCreate("TimerT35", // Just a text name, not used by the kernel.
 801c3dc:	4a1e      	ldr	r2, [pc, #120]	; (801c458 <_ZN12ModbusMaster4initE15modbus_config_t+0x120>)
 801c3de:	9200      	str	r2, [sp, #0]
 801c3e0:	2200      	movs	r2, #0
 801c3e2:	2104      	movs	r1, #4
 801c3e4:	481d      	ldr	r0, [pc, #116]	; (801c45c <_ZN12ModbusMaster4initE15modbus_config_t+0x124>)
 801c3e6:	f7f6 fbd7 	bl	8012b98 <xTimerCreate>
 801c3ea:	4602      	mov	r2, r0
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
				(TimerCallbackFunction_t) vTimerCallbackT35 // Each timer calls the same callback when it expires.
				);
		if (this->xTimerT35 == NULL) {
 801c3f2:	68fb      	ldr	r3, [r7, #12]
 801c3f4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d100      	bne.n	801c3fe <_ZN12ModbusMaster4initE15modbus_config_t+0xc6>
			while (1)
 801c3fc:	e7fe      	b.n	801c3fc <_ZN12ModbusMaster4initE15modbus_config_t+0xc4>
				; //Error creating the timer, check heap and stack size
		}
		this->ModBusSphrHandle = osSemaphoreNew(1, 1, &semaphore_attributes);
 801c3fe:	4a18      	ldr	r2, [pc, #96]	; (801c460 <_ZN12ModbusMaster4initE15modbus_config_t+0x128>)
 801c400:	2101      	movs	r1, #1
 801c402:	2001      	movs	r0, #1
 801c404:	f7f3 fc7e 	bl	800fd04 <osSemaphoreNew>
 801c408:	4602      	mov	r2, r0
 801c40a:	68fb      	ldr	r3, [r7, #12]
 801c40c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224

		if (this->ModBusSphrHandle == NULL) {
 801c410:	68fb      	ldr	r3, [r7, #12]
 801c412:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801c416:	2b00      	cmp	r3, #0
 801c418:	d100      	bne.n	801c41c <_ZN12ModbusMaster4initE15modbus_config_t+0xe4>
			while (1)
 801c41a:	e7fe      	b.n	801c41a <_ZN12ModbusMaster4initE15modbus_config_t+0xe2>
				; //Error creating the semaphore, check heap and stack size
		}

		handlers[num_handlers] = this;
 801c41c:	4b08      	ldr	r3, [pc, #32]	; (801c440 <_ZN12ModbusMaster4initE15modbus_config_t+0x108>)
 801c41e:	781b      	ldrb	r3, [r3, #0]
 801c420:	4619      	mov	r1, r3
 801c422:	4a10      	ldr	r2, [pc, #64]	; (801c464 <_ZN12ModbusMaster4initE15modbus_config_t+0x12c>)
 801c424:	68fb      	ldr	r3, [r7, #12]
 801c426:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		num_handlers++;
 801c42a:	4b05      	ldr	r3, [pc, #20]	; (801c440 <_ZN12ModbusMaster4initE15modbus_config_t+0x108>)
 801c42c:	781b      	ldrb	r3, [r3, #0]
 801c42e:	3301      	adds	r3, #1
 801c430:	b2da      	uxtb	r2, r3
 801c432:	4b03      	ldr	r3, [pc, #12]	; (801c440 <_ZN12ModbusMaster4initE15modbus_config_t+0x108>)
 801c434:	701a      	strb	r2, [r3, #0]
	// Initialize the UART

	// TODO: Add UART Initialization and checking whether it is correctly initialized
	// Should I be able to use one of my UART classes?

}
 801c436:	e000      	b.n	801c43a <_ZN12ModbusMaster4initE15modbus_config_t+0x102>
		while (1)
 801c438:	e7fe      	b.n	801c438 <_ZN12ModbusMaster4initE15modbus_config_t+0x100>
}
 801c43a:	3710      	adds	r7, #16
 801c43c:	46bd      	mov	sp, r7
 801c43e:	bd80      	pop	{r7, pc}
 801c440:	2401e138 	.word	0x2401e138
 801c444:	0802591c 	.word	0x0802591c
 801c448:	0801c721 	.word	0x0801c721
 801c44c:	0801cfd5 	.word	0x0801cfd5
 801c450:	08025144 	.word	0x08025144
 801c454:	2401e13c 	.word	0x2401e13c
 801c458:	0801cf61 	.word	0x0801cf61
 801c45c:	08025154 	.word	0x08025154
 801c460:	08025940 	.word	0x08025940
 801c464:	2401e130 	.word	0x2401e130

0801c468 <_ZN12ModbusMaster5startEv>:
/* ================================================================ */
void ModbusMaster::start() {
 801c468:	b580      	push	{r7, lr}
 801c46a:	b082      	sub	sp, #8
 801c46c:	af00      	add	r7, sp, #0
 801c46e:	6078      	str	r0, [r7, #4]

	if (this->config.EN_GPIOx != NULL) {
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801c476:	2b00      	cmp	r3, #0
 801c478:	d009      	beq.n	801c48e <_ZN12ModbusMaster5startEv+0x26>
		// Set RS485 Transmitter to transmit mode
		HAL_GPIO_WritePin(config.EN_GPIOx, config.EN_GPIO_Pin, GPIO_PIN_RESET);
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 801c486:	2200      	movs	r2, #0
 801c488:	4619      	mov	r1, r3
 801c48a:	f7e9 ff05 	bl	8006298 <HAL_GPIO_WritePin>
	}

	// Wait until UART is ready
	while (HAL_UART_GetState(this->config.huart) != HAL_UART_STATE_READY) {
 801c48e:	bf00      	nop
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c496:	4618      	mov	r0, r3
 801c498:	f7f0 fdf6 	bl	800d088 <HAL_UART_GetState>
 801c49c:	4603      	mov	r3, r0
 801c49e:	2b20      	cmp	r3, #32
 801c4a0:	bf14      	ite	ne
 801c4a2:	2301      	movne	r3, #1
 801c4a4:	2300      	moveq	r3, #0
 801c4a6:	b2db      	uxtb	r3, r3
 801c4a8:	2b00      	cmp	r3, #0
 801c4aa:	d1f1      	bne.n	801c490 <_ZN12ModbusMaster5startEv+0x28>

	}

	if (this->config.hardware == MB_UART_IT) {
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
 801c4b2:	2b01      	cmp	r3, #1
 801c4b4:	d11b      	bne.n	801c4ee <_ZN12ModbusMaster5startEv+0x86>

		// Register the callback for the UART Interrupt
		HAL_UART_RegisterCallback(this->config.huart,
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c4bc:	4a85      	ldr	r2, [pc, #532]	; (801c6d4 <_ZN12ModbusMaster5startEv+0x26c>)
 801c4be:	2103      	movs	r1, #3
 801c4c0:	4618      	mov	r0, r3
 801c4c2:	f7ef fc45 	bl	800bd50 <HAL_UART_RegisterCallback>
				HAL_UART_RX_COMPLETE_CB_ID, uartRxCompleteIT_callback);

//		HAL_UART_RegisterCallback(this->huart, HAL_UART_TX_COMPLETE_CB_ID, uartTxCompleteIT_callback);

		// Receive data from serial port for Modbus using interrupt
		if (HAL_UART_Receive_IT(this->config.huart, &this->dataRX, 1)
 801c4c6:	687b      	ldr	r3, [r7, #4]
 801c4c8:	f8d3 02ac 	ldr.w	r0, [r3, #684]	; 0x2ac
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	f203 2312 	addw	r3, r3, #530	; 0x212
 801c4d2:	2201      	movs	r2, #1
 801c4d4:	4619      	mov	r1, r3
 801c4d6:	f7ef fdc7 	bl	800c068 <HAL_UART_Receive_IT>
 801c4da:	4603      	mov	r3, r0
				!= HAL_OK) {
 801c4dc:	2b00      	cmp	r3, #0
 801c4de:	bf14      	ite	ne
 801c4e0:	2301      	movne	r3, #1
 801c4e2:	2300      	moveq	r3, #0
 801c4e4:	b2db      	uxtb	r3, r3
		if (HAL_UART_Receive_IT(this->config.huart, &this->dataRX, 1)
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	f000 80dc 	beq.w	801c6a4 <_ZN12ModbusMaster5startEv+0x23c>
			while (1) {
 801c4ec:	e7fe      	b.n	801c4ec <_ZN12ModbusMaster5startEv+0x84>
				//error in your initialization code
			}
		}
	} else if (this->config.hardware == MB_UART_DMA) {
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
 801c4f4:	2b02      	cmp	r3, #2
 801c4f6:	f040 80d5 	bne.w	801c6a4 <_ZN12ModbusMaster5startEv+0x23c>
		HAL_UART_RegisterRxEventCallback(this->config.huart,
 801c4fa:	687b      	ldr	r3, [r7, #4]
 801c4fc:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c500:	4975      	ldr	r1, [pc, #468]	; (801c6d8 <_ZN12ModbusMaster5startEv+0x270>)
 801c502:	4618      	mov	r0, r3
 801c504:	f7ef fcde 	bl	800bec4 <HAL_UART_RegisterRxEventCallback>
				uartRxCompleteDMA_callback);

		HAL_UART_RegisterCallback(this->config.huart,
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c50e:	4a73      	ldr	r2, [pc, #460]	; (801c6dc <_ZN12ModbusMaster5startEv+0x274>)
 801c510:	2101      	movs	r1, #1
 801c512:	4618      	mov	r0, r3
 801c514:	f7ef fc1c 	bl	800bd50 <HAL_UART_RegisterCallback>
				HAL_UART_TX_COMPLETE_CB_ID, uartTxCompleteDMA_callback);

		if (HAL_UARTEx_ReceiveToIdle_DMA(this->config.huart,
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	f8d3 02ac 	ldr.w	r0, [r3, #684]	; 0x2ac
				this->xBufferRX.buffer,
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	f503 730a 	add.w	r3, r3, #552	; 0x228
		if (HAL_UARTEx_ReceiveToIdle_DMA(this->config.huart,
 801c524:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c528:	4619      	mov	r1, r3
 801c52a:	f7f3 f90c 	bl	800f746 <HAL_UARTEx_ReceiveToIdle_DMA>
 801c52e:	4603      	mov	r3, r0
				MAX_BUFFER) != HAL_OK) {
 801c530:	2b00      	cmp	r3, #0
 801c532:	bf14      	ite	ne
 801c534:	2301      	movne	r3, #1
 801c536:	2300      	moveq	r3, #0
 801c538:	b2db      	uxtb	r3, r3
		if (HAL_UARTEx_ReceiveToIdle_DMA(this->config.huart,
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d000      	beq.n	801c540 <_ZN12ModbusMaster5startEv+0xd8>
			while (1) {
 801c53e:	e7fe      	b.n	801c53e <_ZN12ModbusMaster5startEv+0xd6>
				//error in your initialization code
			}
		}
		__HAL_DMA_DISABLE_IT(this->config.huart->hdmarx, DMA_IT_HT);
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c54a:	681b      	ldr	r3, [r3, #0]
 801c54c:	4a64      	ldr	r2, [pc, #400]	; (801c6e0 <_ZN12ModbusMaster5startEv+0x278>)
 801c54e:	4293      	cmp	r3, r2
 801c550:	f000 8087 	beq.w	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c55a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	4a60      	ldr	r2, [pc, #384]	; (801c6e4 <_ZN12ModbusMaster5startEv+0x27c>)
 801c562:	4293      	cmp	r3, r2
 801c564:	d07d      	beq.n	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c56c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	4a5d      	ldr	r2, [pc, #372]	; (801c6e8 <_ZN12ModbusMaster5startEv+0x280>)
 801c574:	4293      	cmp	r3, r2
 801c576:	d074      	beq.n	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c57e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c582:	681b      	ldr	r3, [r3, #0]
 801c584:	4a59      	ldr	r2, [pc, #356]	; (801c6ec <_ZN12ModbusMaster5startEv+0x284>)
 801c586:	4293      	cmp	r3, r2
 801c588:	d06b      	beq.n	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	4a56      	ldr	r2, [pc, #344]	; (801c6f0 <_ZN12ModbusMaster5startEv+0x288>)
 801c598:	4293      	cmp	r3, r2
 801c59a:	d062      	beq.n	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c5a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c5a6:	681b      	ldr	r3, [r3, #0]
 801c5a8:	4a52      	ldr	r2, [pc, #328]	; (801c6f4 <_ZN12ModbusMaster5startEv+0x28c>)
 801c5aa:	4293      	cmp	r3, r2
 801c5ac:	d059      	beq.n	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c5b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c5b8:	681b      	ldr	r3, [r3, #0]
 801c5ba:	4a4f      	ldr	r2, [pc, #316]	; (801c6f8 <_ZN12ModbusMaster5startEv+0x290>)
 801c5bc:	4293      	cmp	r3, r2
 801c5be:	d050      	beq.n	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c5c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	4a4b      	ldr	r2, [pc, #300]	; (801c6fc <_ZN12ModbusMaster5startEv+0x294>)
 801c5ce:	4293      	cmp	r3, r2
 801c5d0:	d047      	beq.n	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c5d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c5dc:	681b      	ldr	r3, [r3, #0]
 801c5de:	4a48      	ldr	r2, [pc, #288]	; (801c700 <_ZN12ModbusMaster5startEv+0x298>)
 801c5e0:	4293      	cmp	r3, r2
 801c5e2:	d03e      	beq.n	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c5ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	4a44      	ldr	r2, [pc, #272]	; (801c704 <_ZN12ModbusMaster5startEv+0x29c>)
 801c5f2:	4293      	cmp	r3, r2
 801c5f4:	d035      	beq.n	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c600:	681b      	ldr	r3, [r3, #0]
 801c602:	4a41      	ldr	r2, [pc, #260]	; (801c708 <_ZN12ModbusMaster5startEv+0x2a0>)
 801c604:	4293      	cmp	r3, r2
 801c606:	d02c      	beq.n	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c60e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c612:	681b      	ldr	r3, [r3, #0]
 801c614:	4a3d      	ldr	r2, [pc, #244]	; (801c70c <_ZN12ModbusMaster5startEv+0x2a4>)
 801c616:	4293      	cmp	r3, r2
 801c618:	d023      	beq.n	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c624:	681b      	ldr	r3, [r3, #0]
 801c626:	4a3a      	ldr	r2, [pc, #232]	; (801c710 <_ZN12ModbusMaster5startEv+0x2a8>)
 801c628:	4293      	cmp	r3, r2
 801c62a:	d01a      	beq.n	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c632:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	4a36      	ldr	r2, [pc, #216]	; (801c714 <_ZN12ModbusMaster5startEv+0x2ac>)
 801c63a:	4293      	cmp	r3, r2
 801c63c:	d011      	beq.n	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c648:	681b      	ldr	r3, [r3, #0]
 801c64a:	4a33      	ldr	r2, [pc, #204]	; (801c718 <_ZN12ModbusMaster5startEv+0x2b0>)
 801c64c:	4293      	cmp	r3, r2
 801c64e:	d008      	beq.n	801c662 <_ZN12ModbusMaster5startEv+0x1fa>
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	4a2f      	ldr	r2, [pc, #188]	; (801c71c <_ZN12ModbusMaster5startEv+0x2b4>)
 801c65e:	4293      	cmp	r3, r2
 801c660:	d110      	bne.n	801c684 <_ZN12ModbusMaster5startEv+0x21c>
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c668:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c66c:	681b      	ldr	r3, [r3, #0]
 801c66e:	681a      	ldr	r2, [r3, #0]
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c67a:	681b      	ldr	r3, [r3, #0]
 801c67c:	f022 0208 	bic.w	r2, r2, #8
 801c680:	601a      	str	r2, [r3, #0]
 801c682:	e00f      	b.n	801c6a4 <_ZN12ModbusMaster5startEv+0x23c>
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c68a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	681a      	ldr	r2, [r3, #0]
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801c698:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c69c:	681b      	ldr	r3, [r3, #0]
 801c69e:	f022 0204 	bic.w	r2, r2, #4
 801c6a2:	601a      	str	r2, [r3, #0]
	}

	// Reset all statistics
	this->u8lastRec = 0;
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	2200      	movs	r2, #0
 801c6a8:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	this->u8BufferSize = 0;
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	2200      	movs	r2, #0
 801c6b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	this->u16InCnt = 0;
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	2200      	movs	r2, #0
 801c6b8:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	this->u16OutCnt = 0;
 801c6bc:	687b      	ldr	r3, [r7, #4]
 801c6be:	2200      	movs	r2, #0
 801c6c0:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
	this->u16errCnt = 0;
 801c6c4:	687b      	ldr	r3, [r7, #4]
 801c6c6:	2200      	movs	r2, #0
 801c6c8:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
}
 801c6cc:	bf00      	nop
 801c6ce:	3708      	adds	r7, #8
 801c6d0:	46bd      	mov	sp, r7
 801c6d2:	bd80      	pop	{r7, pc}
 801c6d4:	0801cb9f 	.word	0x0801cb9f
 801c6d8:	0801cbb5 	.word	0x0801cbb5
 801c6dc:	0801cee1 	.word	0x0801cee1
 801c6e0:	40020010 	.word	0x40020010
 801c6e4:	40020028 	.word	0x40020028
 801c6e8:	40020040 	.word	0x40020040
 801c6ec:	40020058 	.word	0x40020058
 801c6f0:	40020070 	.word	0x40020070
 801c6f4:	40020088 	.word	0x40020088
 801c6f8:	400200a0 	.word	0x400200a0
 801c6fc:	400200b8 	.word	0x400200b8
 801c700:	40020410 	.word	0x40020410
 801c704:	40020428 	.word	0x40020428
 801c708:	40020440 	.word	0x40020440
 801c70c:	40020458 	.word	0x40020458
 801c710:	40020470 	.word	0x40020470
 801c714:	40020488 	.word	0x40020488
 801c718:	400204a0 	.word	0x400204a0
 801c71c:	400204b8 	.word	0x400204b8

0801c720 <_Z16modbusMasterTaskPv>:

/* ================================================================ */
void modbusMasterTask(void *argument) {
 801c720:	b580      	push	{r7, lr}
 801c722:	b08c      	sub	sp, #48	; 0x30
 801c724:	af02      	add	r7, sp, #8
 801c726:	6078      	str	r0, [r7, #4]
	ModbusMaster *master = (ModbusMaster*) argument;
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	627b      	str	r3, [r7, #36]	; 0x24

	// Get the task handle for later notifying this task
	master->task_handle = xTaskGetCurrentTaskHandle();
 801c72c:	f7f5 fd7c 	bl	8012228 <xTaskGetCurrentTaskHandle>
 801c730:	4602      	mov	r2, r0
 801c732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c734:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	uint32_t ulNotificationValue;
	modbus_query_t telegram;

	for (;;) {
		/*Wait indefinitely for a telegram to send */
		osMessageQueueGet(modbus_query_queue, &telegram, 0, portMAX_DELAY);
 801c738:	4b67      	ldr	r3, [pc, #412]	; (801c8d8 <_Z16modbusMasterTaskPv+0x1b8>)
 801c73a:	6818      	ldr	r0, [r3, #0]
 801c73c:	f107 010c 	add.w	r1, r7, #12
 801c740:	f04f 33ff 	mov.w	r3, #4294967295
 801c744:	2200      	movs	r2, #0
 801c746:	f7f3 fcd1 	bl	80100ec <osMessageQueueGet>

		// This is the case for implementations with only USART support
		master->sendQuery(telegram);
 801c74a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c74c:	69bb      	ldr	r3, [r7, #24]
 801c74e:	9300      	str	r3, [sp, #0]
 801c750:	f107 030c 	add.w	r3, r7, #12
 801c754:	cb0e      	ldmia	r3, {r1, r2, r3}
 801c756:	f000 fc6b 	bl	801d030 <_ZN12ModbusMaster9sendQueryE14modbus_query_t>
		/* Block indefinitely until a Modbus Frame arrives or query timeouts*/
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 801c75a:	f04f 31ff 	mov.w	r1, #4294967295
 801c75e:	2001      	movs	r0, #1
 801c760:	f7f5 fefc 	bl	801255c <ulTaskNotifyTake>
 801c764:	6238      	str	r0, [r7, #32]

		// notify the task the request timeout
		master->lastError = 0;
 801c766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c768:	2200      	movs	r2, #0
 801c76a:	701a      	strb	r2, [r3, #0]
		if (ulNotificationValue) {
 801c76c:	6a3b      	ldr	r3, [r7, #32]
 801c76e:	2b00      	cmp	r3, #0
 801c770:	d018      	beq.n	801c7a4 <_Z16modbusMasterTaskPv+0x84>
			master->i8state = COM_IDLE;
 801c772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c774:	2200      	movs	r2, #0
 801c776:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
			master->lastError = ERR_TIME_OUT;
 801c77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c77c:	22f8      	movs	r2, #248	; 0xf8
 801c77e:	701a      	strb	r2, [r3, #0]
			master->u16errCnt++;
 801c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c782:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801c786:	3301      	adds	r3, #1
 801c788:	b29a      	uxth	r2, r3
 801c78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c78c:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
			xTaskNotify((TaskHandle_t )telegram.u32CurrentTask,
 801c790:	69b8      	ldr	r0, [r7, #24]
 801c792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c794:	f993 3000 	ldrsb.w	r3, [r3]
 801c798:	4619      	mov	r1, r3
 801c79a:	2300      	movs	r3, #0
 801c79c:	2203      	movs	r2, #3
 801c79e:	f7f5 ff29 	bl	80125f4 <xTaskGenericNotify>
					master->lastError, eSetValueWithOverwrite);
			continue;
 801c7a2:	e097      	b.n	801c8d4 <_Z16modbusMasterTaskPv+0x1b4>
		}
		master->getRxBuffer();
 801c7a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c7a6:	f000 f9ad 	bl	801cb04 <_ZN12ModbusMaster11getRxBufferEv>

		if (master->u8BufferSize < 6) {
 801c7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7ac:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801c7b0:	2b05      	cmp	r3, #5
 801c7b2:	d818      	bhi.n	801c7e6 <_Z16modbusMasterTaskPv+0xc6>

			master->i8state = COM_IDLE;
 801c7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7b6:	2200      	movs	r2, #0
 801c7b8:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
			master->lastError = ERR_BAD_SIZE;
 801c7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7be:	22fa      	movs	r2, #250	; 0xfa
 801c7c0:	701a      	strb	r2, [r3, #0]
			master->u16errCnt++;
 801c7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7c4:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801c7c8:	3301      	adds	r3, #1
 801c7ca:	b29a      	uxth	r2, r3
 801c7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7ce:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
			xTaskNotify((TaskHandle_t )telegram.u32CurrentTask,
 801c7d2:	69b8      	ldr	r0, [r7, #24]
 801c7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7d6:	f993 3000 	ldrsb.w	r3, [r3]
 801c7da:	4619      	mov	r1, r3
 801c7dc:	2300      	movs	r3, #0
 801c7de:	2203      	movs	r2, #3
 801c7e0:	f7f5 ff08 	bl	80125f4 <xTaskGenericNotify>
					master->lastError, eSetValueWithOverwrite);
			continue;
 801c7e4:	e076      	b.n	801c8d4 <_Z16modbusMasterTaskPv+0x1b4>
		}

		xTimerStop(master->xTimerTimeout, 0); // cancel timeout timer
 801c7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c7e8:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801c7ec:	2300      	movs	r3, #0
 801c7ee:	9300      	str	r3, [sp, #0]
 801c7f0:	2300      	movs	r3, #0
 801c7f2:	2200      	movs	r2, #0
 801c7f4:	2103      	movs	r1, #3
 801c7f6:	f7f6 fa69 	bl	8012ccc <xTimerGenericCommand>

		// validate message: id, CRC, FCT, exception
		int8_t u8exception = master->validateAnswer();
 801c7fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c7fc:	f000 f910 	bl	801ca20 <_ZN12ModbusMaster14validateAnswerEv>
 801c800:	4603      	mov	r3, r0
 801c802:	77fb      	strb	r3, [r7, #31]
		if (u8exception != 0) {
 801c804:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801c808:	2b00      	cmp	r3, #0
 801c80a:	d010      	beq.n	801c82e <_Z16modbusMasterTaskPv+0x10e>
			master->i8state = COM_IDLE;
 801c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c80e:	2200      	movs	r2, #0
 801c810:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
			master->lastError = u8exception;
 801c814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c816:	7ffa      	ldrb	r2, [r7, #31]
 801c818:	701a      	strb	r2, [r3, #0]
			xTaskNotify((TaskHandle_t )telegram.u32CurrentTask,
 801c81a:	69b8      	ldr	r0, [r7, #24]
 801c81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c81e:	f993 3000 	ldrsb.w	r3, [r3]
 801c822:	4619      	mov	r1, r3
 801c824:	2300      	movs	r3, #0
 801c826:	2203      	movs	r2, #3
 801c828:	f7f5 fee4 	bl	80125f4 <xTaskGenericNotify>
					master->lastError, eSetValueWithOverwrite);
			continue;
 801c82c:	e052      	b.n	801c8d4 <_Z16modbusMasterTaskPv+0x1b4>
		}

		master->lastError = u8exception; // Should be 0
 801c82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c830:	7ffa      	ldrb	r2, [r7, #31]
 801c832:	701a      	strb	r2, [r3, #0]

		osSemaphoreAcquire(master->ModBusSphrHandle, portMAX_DELAY); //before processing the message get the semaphore
 801c834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c836:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801c83a:	f04f 31ff 	mov.w	r1, #4294967295
 801c83e:	4618      	mov	r0, r3
 801c840:	f7f3 faea 	bl	800fe18 <osSemaphoreAcquire>
		// process answer
		switch (master->u8Buffer[FUNC]) {
 801c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c846:	789b      	ldrb	r3, [r3, #2]
 801c848:	3b01      	subs	r3, #1
 801c84a:	2b0f      	cmp	r3, #15
 801c84c:	d82a      	bhi.n	801c8a4 <_Z16modbusMasterTaskPv+0x184>
 801c84e:	a201      	add	r2, pc, #4	; (adr r2, 801c854 <_Z16modbusMasterTaskPv+0x134>)
 801c850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c854:	0801c895 	.word	0x0801c895
 801c858:	0801c895 	.word	0x0801c895
 801c85c:	0801c89d 	.word	0x0801c89d
 801c860:	0801c89d 	.word	0x0801c89d
 801c864:	0801c8a5 	.word	0x0801c8a5
 801c868:	0801c8a5 	.word	0x0801c8a5
 801c86c:	0801c8a5 	.word	0x0801c8a5
 801c870:	0801c8a5 	.word	0x0801c8a5
 801c874:	0801c8a5 	.word	0x0801c8a5
 801c878:	0801c8a5 	.word	0x0801c8a5
 801c87c:	0801c8a5 	.word	0x0801c8a5
 801c880:	0801c8a5 	.word	0x0801c8a5
 801c884:	0801c8a5 	.word	0x0801c8a5
 801c888:	0801c8a5 	.word	0x0801c8a5
 801c88c:	0801c8a5 	.word	0x0801c8a5
 801c890:	0801c8a5 	.word	0x0801c8a5
		case MB_FC_READ_COILS:
		case MB_FC_READ_DISCRETE_INPUT:
			//call get_FC1 to transfer the incoming message to u16regs buffer
			master->get_FC1();
 801c894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c896:	f000 f83f 	bl	801c918 <_ZN12ModbusMaster7get_FC1Ev>
			break;
 801c89a:	e004      	b.n	801c8a6 <_Z16modbusMasterTaskPv+0x186>
		case MB_FC_READ_INPUT_REGISTER:
		case MB_FC_READ_REGISTERS:
			// call get_FC3 to transfer the incoming message to u16regs buffer
			master->get_FC3();
 801c89c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c89e:	f000 f891 	bl	801c9c4 <_ZN12ModbusMaster7get_FC3Ev>
			break;
 801c8a2:	e000      	b.n	801c8a6 <_Z16modbusMasterTaskPv+0x186>
		case MB_FC_WRITE_MULTIPLE_COILS:
		case MB_FC_WRITE_MULTIPLE_REGISTERS:
			// nothing to do
			break;
		default:
			break;
 801c8a4:	bf00      	nop
		}
		master->i8state = COM_IDLE;
 801c8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8a8:	2200      	movs	r2, #0
 801c8aa:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213

		if (master->lastError == 0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 801c8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8b0:	f993 3000 	ldrsb.w	r3, [r3]
 801c8b4:	2b00      	cmp	r3, #0
 801c8b6:	d10c      	bne.n	801c8d2 <_Z16modbusMasterTaskPv+0x1b2>
				{
			osSemaphoreRelease(master->ModBusSphrHandle);
 801c8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8ba:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801c8be:	4618      	mov	r0, r3
 801c8c0:	f7f3 fafc 	bl	800febc <osSemaphoreRelease>
			xTaskNotify((TaskHandle_t )telegram.u32CurrentTask, ERR_OK_QUERY,
 801c8c4:	69b8      	ldr	r0, [r7, #24]
 801c8c6:	2300      	movs	r3, #0
 801c8c8:	2203      	movs	r2, #3
 801c8ca:	f06f 010a 	mvn.w	r1, #10
 801c8ce:	f7f5 fe91 	bl	80125f4 <xTaskGenericNotify>
					eSetValueWithOverwrite);
		}
		continue;
 801c8d2:	bf00      	nop
	}
 801c8d4:	e730      	b.n	801c738 <_Z16modbusMasterTaskPv+0x18>
 801c8d6:	bf00      	nop
 801c8d8:	2401e13c 	.word	0x2401e13c

0801c8dc <_ZN12ModbusMaster5queryE14modbus_query_t>:
}

/* ================================================================ */
void ModbusMaster::query(modbus_query_t telegram) {
 801c8dc:	b084      	sub	sp, #16
 801c8de:	b580      	push	{r7, lr}
 801c8e0:	b082      	sub	sp, #8
 801c8e2:	af00      	add	r7, sp, #0
 801c8e4:	6078      	str	r0, [r7, #4]
 801c8e6:	f107 0014 	add.w	r0, r7, #20
 801c8ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// Add the telegram to the TX tail of the telegram queue
	telegram.u32CurrentTask = (uint32_t*) osThreadGetId();
 801c8ee:	f7f3 f924 	bl	800fb3a <osThreadGetId>
 801c8f2:	4603      	mov	r3, r0
 801c8f4:	623b      	str	r3, [r7, #32]
	osMessageQueuePut(modbus_query_queue, &telegram, 0, 0);
 801c8f6:	4b07      	ldr	r3, [pc, #28]	; (801c914 <_ZN12ModbusMaster5queryE14modbus_query_t+0x38>)
 801c8f8:	6818      	ldr	r0, [r3, #0]
 801c8fa:	f107 0114 	add.w	r1, r7, #20
 801c8fe:	2300      	movs	r3, #0
 801c900:	2200      	movs	r2, #0
 801c902:	f7f3 fb93 	bl	801002c <osMessageQueuePut>
}
 801c906:	bf00      	nop
 801c908:	3708      	adds	r7, #8
 801c90a:	46bd      	mov	sp, r7
 801c90c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c910:	b004      	add	sp, #16
 801c912:	4770      	bx	lr
 801c914:	2401e13c 	.word	0x2401e13c

0801c918 <_ZN12ModbusMaster7get_FC1Ev>:
	telegram.u32CurrentTask = threadId;
	osMessageQueuePut(modbus_query_queue, &telegram, 0, 0);
}

/* ================================================================ */
void ModbusMaster::get_FC1() {
 801c918:	b590      	push	{r4, r7, lr}
 801c91a:	b085      	sub	sp, #20
 801c91c:	af00      	add	r7, sp, #0
 801c91e:	6078      	str	r0, [r7, #4]
	uint8_t u8byte, i;
	u8byte = 3;
 801c920:	2303      	movs	r3, #3
 801c922:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < this->u8Buffer[2]; i++) {
 801c924:	2300      	movs	r3, #0
 801c926:	73fb      	strb	r3, [r7, #15]
 801c928:	e042      	b.n	801c9b0 <_ZN12ModbusMaster7get_FC1Ev+0x98>

		if (i % 2) {
 801c92a:	7bfb      	ldrb	r3, [r7, #15]
 801c92c:	f003 0301 	and.w	r3, r3, #1
 801c930:	2b00      	cmp	r3, #0
 801c932:	d01c      	beq.n	801c96e <_ZN12ModbusMaster7get_FC1Ev+0x56>
			this->u16regs[i / 2] = word(this->u8Buffer[i + u8byte],
 801c934:	7bfa      	ldrb	r2, [r7, #15]
 801c936:	7bbb      	ldrb	r3, [r7, #14]
 801c938:	4413      	add	r3, r2
 801c93a:	687a      	ldr	r2, [r7, #4]
 801c93c:	4413      	add	r3, r2
 801c93e:	7858      	ldrb	r0, [r3, #1]
					lowByte(this->u16regs[i / 2]));
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c946:	7bfb      	ldrb	r3, [r7, #15]
 801c948:	085b      	lsrs	r3, r3, #1
 801c94a:	b2db      	uxtb	r3, r3
 801c94c:	005b      	lsls	r3, r3, #1
 801c94e:	4413      	add	r3, r2
 801c950:	881b      	ldrh	r3, [r3, #0]
			this->u16regs[i / 2] = word(this->u8Buffer[i + u8byte],
 801c952:	b2d9      	uxtb	r1, r3
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c95a:	7bfb      	ldrb	r3, [r7, #15]
 801c95c:	085b      	lsrs	r3, r3, #1
 801c95e:	b2db      	uxtb	r3, r3
 801c960:	005b      	lsls	r3, r3, #1
 801c962:	18d4      	adds	r4, r2, r3
 801c964:	f000 fd74 	bl	801d450 <_Z4wordhh>
 801c968:	4603      	mov	r3, r0
 801c96a:	8023      	strh	r3, [r4, #0]
 801c96c:	e01d      	b.n	801c9aa <_ZN12ModbusMaster7get_FC1Ev+0x92>
		} else {

			this->u16regs[i / 2] = word(highByte(this->u16regs[i / 2]),
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c974:	7bfb      	ldrb	r3, [r7, #15]
 801c976:	085b      	lsrs	r3, r3, #1
 801c978:	b2db      	uxtb	r3, r3
 801c97a:	005b      	lsls	r3, r3, #1
 801c97c:	4413      	add	r3, r2
 801c97e:	881b      	ldrh	r3, [r3, #0]
 801c980:	0a1b      	lsrs	r3, r3, #8
 801c982:	b29b      	uxth	r3, r3
 801c984:	b2d8      	uxtb	r0, r3
					this->u8Buffer[i + u8byte]);
 801c986:	7bfa      	ldrb	r2, [r7, #15]
 801c988:	7bbb      	ldrb	r3, [r7, #14]
 801c98a:	4413      	add	r3, r2
			this->u16regs[i / 2] = word(highByte(this->u16regs[i / 2]),
 801c98c:	687a      	ldr	r2, [r7, #4]
 801c98e:	4413      	add	r3, r2
 801c990:	7859      	ldrb	r1, [r3, #1]
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c998:	7bfb      	ldrb	r3, [r7, #15]
 801c99a:	085b      	lsrs	r3, r3, #1
 801c99c:	b2db      	uxtb	r3, r3
 801c99e:	005b      	lsls	r3, r3, #1
 801c9a0:	18d4      	adds	r4, r2, r3
 801c9a2:	f000 fd55 	bl	801d450 <_Z4wordhh>
 801c9a6:	4603      	mov	r3, r0
 801c9a8:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < this->u8Buffer[2]; i++) {
 801c9aa:	7bfb      	ldrb	r3, [r7, #15]
 801c9ac:	3301      	adds	r3, #1
 801c9ae:	73fb      	strb	r3, [r7, #15]
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	78db      	ldrb	r3, [r3, #3]
 801c9b4:	7bfa      	ldrb	r2, [r7, #15]
 801c9b6:	429a      	cmp	r2, r3
 801c9b8:	d3b7      	bcc.n	801c92a <_ZN12ModbusMaster7get_FC1Ev+0x12>
		}

	}
}
 801c9ba:	bf00      	nop
 801c9bc:	bf00      	nop
 801c9be:	3714      	adds	r7, #20
 801c9c0:	46bd      	mov	sp, r7
 801c9c2:	bd90      	pop	{r4, r7, pc}

0801c9c4 <_ZN12ModbusMaster7get_FC3Ev>:

/* ================================================================ */
void ModbusMaster::get_FC3() {
 801c9c4:	b590      	push	{r4, r7, lr}
 801c9c6:	b085      	sub	sp, #20
 801c9c8:	af00      	add	r7, sp, #0
 801c9ca:	6078      	str	r0, [r7, #4]
	 *
	 * @ingroup register
	 */

	uint8_t u8byte, i;
	u8byte = 3;
 801c9cc:	2303      	movs	r3, #3
 801c9ce:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < this->u8Buffer[2] / 2; i++) {
 801c9d0:	2300      	movs	r3, #0
 801c9d2:	73bb      	strb	r3, [r7, #14]
 801c9d4:	e018      	b.n	801ca08 <_ZN12ModbusMaster7get_FC3Ev+0x44>
		this->u16regs[i] = word(this->u8Buffer[u8byte],
 801c9d6:	7bfb      	ldrb	r3, [r7, #15]
 801c9d8:	687a      	ldr	r2, [r7, #4]
 801c9da:	4413      	add	r3, r2
 801c9dc:	7858      	ldrb	r0, [r3, #1]
				this->u8Buffer[u8byte + 1]);
 801c9de:	7bfb      	ldrb	r3, [r7, #15]
 801c9e0:	3301      	adds	r3, #1
		this->u16regs[i] = word(this->u8Buffer[u8byte],
 801c9e2:	687a      	ldr	r2, [r7, #4]
 801c9e4:	4413      	add	r3, r2
 801c9e6:	7859      	ldrb	r1, [r3, #1]
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c9ee:	7bbb      	ldrb	r3, [r7, #14]
 801c9f0:	005b      	lsls	r3, r3, #1
 801c9f2:	18d4      	adds	r4, r2, r3
 801c9f4:	f000 fd2c 	bl	801d450 <_Z4wordhh>
 801c9f8:	4603      	mov	r3, r0
 801c9fa:	8023      	strh	r3, [r4, #0]
		u8byte += 2;
 801c9fc:	7bfb      	ldrb	r3, [r7, #15]
 801c9fe:	3302      	adds	r3, #2
 801ca00:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < this->u8Buffer[2] / 2; i++) {
 801ca02:	7bbb      	ldrb	r3, [r7, #14]
 801ca04:	3301      	adds	r3, #1
 801ca06:	73bb      	strb	r3, [r7, #14]
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	78db      	ldrb	r3, [r3, #3]
 801ca0c:	085b      	lsrs	r3, r3, #1
 801ca0e:	b2db      	uxtb	r3, r3
 801ca10:	7bba      	ldrb	r2, [r7, #14]
 801ca12:	429a      	cmp	r2, r3
 801ca14:	d3df      	bcc.n	801c9d6 <_ZN12ModbusMaster7get_FC3Ev+0x12>
//		this->u16regs[i] = this->u8Buffer[u8byte];
//		u8byte += 1;
	}

}
 801ca16:	bf00      	nop
 801ca18:	bf00      	nop
 801ca1a:	3714      	adds	r7, #20
 801ca1c:	46bd      	mov	sp, r7
 801ca1e:	bd90      	pop	{r4, r7, pc}

0801ca20 <_ZN12ModbusMaster14validateAnswerEv>:
 * This method validates master incoming messages
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t ModbusMaster::validateAnswer() {
 801ca20:	b580      	push	{r7, lr}
 801ca22:	b084      	sub	sp, #16
 801ca24:	af00      	add	r7, sp, #0
 801ca26:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

	uint16_t u16MsgCRC = ((this->u8Buffer[this->u8BufferSize - 2] << 8)
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801ca2e:	3b02      	subs	r3, #2
 801ca30:	687a      	ldr	r2, [r7, #4]
 801ca32:	4413      	add	r3, r2
 801ca34:	785b      	ldrb	r3, [r3, #1]
 801ca36:	021b      	lsls	r3, r3, #8
			| this->u8Buffer[this->u8BufferSize - 1]); // combine the crc Low & High bytes
 801ca38:	b21a      	sxth	r2, r3
 801ca3a:	687b      	ldr	r3, [r7, #4]
 801ca3c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801ca40:	3b01      	subs	r3, #1
 801ca42:	6879      	ldr	r1, [r7, #4]
 801ca44:	440b      	add	r3, r1
 801ca46:	785b      	ldrb	r3, [r3, #1]
 801ca48:	b21b      	sxth	r3, r3
 801ca4a:	4313      	orrs	r3, r2
 801ca4c:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC = ((this->u8Buffer[this->u8BufferSize - 2] << 8)
 801ca4e:	81bb      	strh	r3, [r7, #12]
	if (calcCRC(this->u8Buffer, this->u8BufferSize - 2) != u16MsgCRC) {
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	1c5a      	adds	r2, r3, #1
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801ca5a:	3b02      	subs	r3, #2
 801ca5c:	b2db      	uxtb	r3, r3
 801ca5e:	4619      	mov	r1, r3
 801ca60:	4610      	mov	r0, r2
 801ca62:	f000 fd08 	bl	801d476 <_Z7calcCRCPhh>
 801ca66:	4603      	mov	r3, r0
 801ca68:	461a      	mov	r2, r3
 801ca6a:	89bb      	ldrh	r3, [r7, #12]
 801ca6c:	4293      	cmp	r3, r2
 801ca6e:	bf14      	ite	ne
 801ca70:	2301      	movne	r3, #1
 801ca72:	2300      	moveq	r3, #0
 801ca74:	b2db      	uxtb	r3, r3
 801ca76:	2b00      	cmp	r3, #0
 801ca78:	d009      	beq.n	801ca8e <_ZN12ModbusMaster14validateAnswerEv+0x6e>
		this->u16errCnt++;
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801ca80:	3301      	adds	r3, #1
 801ca82:	b29a      	uxth	r2, r3
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
		return ERR_BAD_CRC;
 801ca8a:	23fc      	movs	r3, #252	; 0xfc
 801ca8c:	e034      	b.n	801caf8 <_ZN12ModbusMaster14validateAnswerEv+0xd8>
	}

	// check exception
	if ((this->u8Buffer[FUNC] & 0x80) != 0) {
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	789b      	ldrb	r3, [r3, #2]
 801ca92:	b25b      	sxtb	r3, r3
 801ca94:	2b00      	cmp	r3, #0
 801ca96:	da09      	bge.n	801caac <_ZN12ModbusMaster14validateAnswerEv+0x8c>
		this->u16errCnt++;
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801ca9e:	3301      	adds	r3, #1
 801caa0:	b29a      	uxth	r2, r3
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
		return ERR_EXCEPTION;
 801caa8:	23fb      	movs	r3, #251	; 0xfb
 801caaa:	e025      	b.n	801caf8 <_ZN12ModbusMaster14validateAnswerEv+0xd8>
	}

	// check fct code
	bool isSupported = false;
 801caac:	2300      	movs	r3, #0
 801caae:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(fctsupported); i++) {
 801cab0:	2300      	movs	r3, #0
 801cab2:	73bb      	strb	r3, [r7, #14]
 801cab4:	e00c      	b.n	801cad0 <_ZN12ModbusMaster14validateAnswerEv+0xb0>
		if (fctsupported[i] == this->u8Buffer[FUNC]) {
 801cab6:	7bbb      	ldrb	r3, [r7, #14]
 801cab8:	4a11      	ldr	r2, [pc, #68]	; (801cb00 <_ZN12ModbusMaster14validateAnswerEv+0xe0>)
 801caba:	5cd2      	ldrb	r2, [r2, r3]
 801cabc:	687b      	ldr	r3, [r7, #4]
 801cabe:	789b      	ldrb	r3, [r3, #2]
 801cac0:	429a      	cmp	r2, r3
 801cac2:	d102      	bne.n	801caca <_ZN12ModbusMaster14validateAnswerEv+0xaa>
			isSupported = 1;
 801cac4:	2301      	movs	r3, #1
 801cac6:	73fb      	strb	r3, [r7, #15]
			break;
 801cac8:	e005      	b.n	801cad6 <_ZN12ModbusMaster14validateAnswerEv+0xb6>
	for (uint8_t i = 0; i < sizeof(fctsupported); i++) {
 801caca:	7bbb      	ldrb	r3, [r7, #14]
 801cacc:	3301      	adds	r3, #1
 801cace:	73bb      	strb	r3, [r7, #14]
 801cad0:	7bbb      	ldrb	r3, [r7, #14]
 801cad2:	2b07      	cmp	r3, #7
 801cad4:	d9ef      	bls.n	801cab6 <_ZN12ModbusMaster14validateAnswerEv+0x96>
		}
	}
	if (!isSupported) {
 801cad6:	7bfb      	ldrb	r3, [r7, #15]
 801cad8:	f083 0301 	eor.w	r3, r3, #1
 801cadc:	b2db      	uxtb	r3, r3
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d009      	beq.n	801caf6 <_ZN12ModbusMaster14validateAnswerEv+0xd6>
		this->u16errCnt++;
 801cae2:	687b      	ldr	r3, [r7, #4]
 801cae4:	f8b3 320c 	ldrh.w	r3, [r3, #524]	; 0x20c
 801cae8:	3301      	adds	r3, #1
 801caea:	b29a      	uxth	r2, r3
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	f8a3 220c 	strh.w	r2, [r3, #524]	; 0x20c
		return EXC_FUNC_CODE;
 801caf2:	2301      	movs	r3, #1
 801caf4:	e000      	b.n	801caf8 <_ZN12ModbusMaster14validateAnswerEv+0xd8>
	}

	return 0; // OK, no exception code thrown
 801caf6:	2300      	movs	r3, #0
}
 801caf8:	4618      	mov	r0, r3
 801cafa:	3710      	adds	r7, #16
 801cafc:	46bd      	mov	sp, r7
 801cafe:	bd80      	pop	{r7, pc}
 801cb00:	08025950 	.word	0x08025950

0801cb04 <_ZN12ModbusMaster11getRxBufferEv>:

/* ================================================================ */
int16_t ModbusMaster::getRxBuffer() {
 801cb04:	b580      	push	{r7, lr}
 801cb06:	b084      	sub	sp, #16
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	6078      	str	r0, [r7, #4]

	int16_t i16result;

	if (this->config.hardware == MB_UART_IT) {
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
 801cb12:	2b01      	cmp	r3, #1
 801cb14:	d105      	bne.n	801cb22 <_ZN12ModbusMaster11getRxBufferEv+0x1e>
		HAL_UART_AbortReceive_IT(this->config.huart); // disable interrupts to avoid race conditions on serial port
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cb1c:	4618      	mov	r0, r3
 801cb1e:	f7ef fd13 	bl	800c548 <HAL_UART_AbortReceive_IT>
	}

	if (this->xBufferRX.overflow) {
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d009      	beq.n	801cb40 <_ZN12ModbusMaster11getRxBufferEv+0x3c>
		this->xBufferRX.clear();
 801cb2c:	687b      	ldr	r3, [r7, #4]
 801cb2e:	f503 730a 	add.w	r3, r3, #552	; 0x228
 801cb32:	4618      	mov	r0, r3
 801cb34:	f000 fcf0 	bl	801d518 <_ZN21core_utils_RingBufferILi128EE5clearEv>
		i16result = ERR_BUFF_OVERFLOW;
 801cb38:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801cb3c:	81fb      	strh	r3, [r7, #14]
 801cb3e:	e019      	b.n	801cb74 <_ZN12ModbusMaster11getRxBufferEv+0x70>
	} else {
		this->u8BufferSize = this->xBufferRX.get_all_bytes(this->u8Buffer);
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	f503 720a 	add.w	r2, r3, #552	; 0x228
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	3301      	adds	r3, #1
 801cb4a:	4619      	mov	r1, r3
 801cb4c:	4610      	mov	r0, r2
 801cb4e:	f000 fcfd 	bl	801d54c <_ZN21core_utils_RingBufferILi128EE13get_all_bytesEPh>
 801cb52:	4603      	mov	r3, r0
 801cb54:	461a      	mov	r2, r3
 801cb56:	687b      	ldr	r3, [r7, #4]
 801cb58:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
		this->u16InCnt++;
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 801cb62:	3301      	adds	r3, #1
 801cb64:	b29a      	uxth	r2, r3
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
		i16result = this->u8BufferSize;
 801cb6c:	687b      	ldr	r3, [r7, #4]
 801cb6e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801cb72:	81fb      	strh	r3, [r7, #14]
	}

	if (this->config.hardware == MB_UART_IT) {
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
 801cb7a:	2b01      	cmp	r3, #1
 801cb7c:	d109      	bne.n	801cb92 <_ZN12ModbusMaster11getRxBufferEv+0x8e>
		HAL_UART_Receive_IT(this->config.huart, &this->dataRX, 1);
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	f8d3 02ac 	ldr.w	r0, [r3, #684]	; 0x2ac
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	f203 2312 	addw	r3, r3, #530	; 0x212
 801cb8a:	2201      	movs	r2, #1
 801cb8c:	4619      	mov	r1, r3
 801cb8e:	f7ef fa6b 	bl	800c068 <HAL_UART_Receive_IT>
	}

	return i16result;
 801cb92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801cb96:	4618      	mov	r0, r3
 801cb98:	3710      	adds	r7, #16
 801cb9a:	46bd      	mov	sp, r7
 801cb9c:	bd80      	pop	{r7, pc}

0801cb9e <_ZL25uartRxCompleteIT_callbackP20__UART_HandleTypeDef>:

/* ================================================================ */
void uartRxCompleteIT_callback(UART_HandleTypeDef *huart) {
 801cb9e:	b580      	push	{r7, lr}
 801cba0:	b082      	sub	sp, #8
 801cba2:	af00      	add	r7, sp, #0
 801cba4:	6078      	str	r0, [r7, #4]
	nop();
 801cba6:	f7f7 fb03 	bl	80141b0 <_Z3nopv>
}
 801cbaa:	bf00      	nop
 801cbac:	3708      	adds	r7, #8
 801cbae:	46bd      	mov	sp, r7
 801cbb0:	bd80      	pop	{r7, pc}
	...

0801cbb4 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft>:

/* ================================================================ */
void uartRxCompleteDMA_callback(UART_HandleTypeDef *huart, uint16_t size) {
 801cbb4:	b580      	push	{r7, lr}
 801cbb6:	b086      	sub	sp, #24
 801cbb8:	af02      	add	r7, sp, #8
 801cbba:	6078      	str	r0, [r7, #4]
 801cbbc:	460b      	mov	r3, r1
 801cbbe:	807b      	strh	r3, [r7, #2]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801cbc0:	2300      	movs	r3, #0
 801cbc2:	60bb      	str	r3, [r7, #8]

	int i;
	for (i = 0; i < num_handlers; i++) {
 801cbc4:	2300      	movs	r3, #0
 801cbc6:	60fb      	str	r3, [r7, #12]
 801cbc8:	e14c      	b.n	801ce64 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2b0>
		if (handlers[i]->config.huart == huart) {
 801cbca:	4aaa      	ldr	r2, [pc, #680]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cbd2:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cbd6:	687a      	ldr	r2, [r7, #4]
 801cbd8:	429a      	cmp	r2, r3
 801cbda:	f040 8140 	bne.w	801ce5e <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2aa>

			if (handlers[i]->config.hardware == MB_UART_DMA) {
 801cbde:	4aa5      	ldr	r2, [pc, #660]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cbe0:	68fb      	ldr	r3, [r7, #12]
 801cbe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cbe6:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
 801cbea:	2b02      	cmp	r3, #2
 801cbec:	f040 8166 	bne.w	801cebc <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x308>
				if (size) //check if we have received any byte
 801cbf0:	887b      	ldrh	r3, [r7, #2]
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	f000 8162 	beq.w	801cebc <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x308>
				{
					handlers[i]->xBufferRX.available = size;
 801cbf8:	4a9e      	ldr	r2, [pc, #632]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cc00:	887a      	ldrh	r2, [r7, #2]
 801cc02:	b2d2      	uxtb	r2, r2
 801cc04:	f883 22aa 	strb.w	r2, [r3, #682]	; 0x2aa
					handlers[i]->xBufferRX.overflow = false;
 801cc08:	4a9a      	ldr	r2, [pc, #616]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cc0a:	68fb      	ldr	r3, [r7, #12]
 801cc0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cc10:	2200      	movs	r2, #0
 801cc12:	f883 22ab 	strb.w	r2, [r3, #683]	; 0x2ab

					while (HAL_UARTEx_ReceiveToIdle_DMA(
 801cc16:	e008      	b.n	801cc2a <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x76>
							handlers[i]->config.huart,
							handlers[i]->xBufferRX.buffer, MAX_BUFFER) != HAL_OK) {
						HAL_UART_DMAStop(handlers[i]->config.huart);
 801cc18:	4a96      	ldr	r2, [pc, #600]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cc1a:	68fb      	ldr	r3, [r7, #12]
 801cc1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cc20:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cc24:	4618      	mov	r0, r3
 801cc26:	f7ef faeb 	bl	800c200 <HAL_UART_DMAStop>
							handlers[i]->config.huart,
 801cc2a:	4a92      	ldr	r2, [pc, #584]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cc2c:	68fb      	ldr	r3, [r7, #12]
 801cc2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					while (HAL_UARTEx_ReceiveToIdle_DMA(
 801cc32:	f8d3 02ac 	ldr.w	r0, [r3, #684]	; 0x2ac
							handlers[i]->xBufferRX.buffer, MAX_BUFFER) != HAL_OK) {
 801cc36:	4a8f      	ldr	r2, [pc, #572]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cc38:	68fb      	ldr	r3, [r7, #12]
 801cc3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cc3e:	f503 730a 	add.w	r3, r3, #552	; 0x228
					while (HAL_UARTEx_ReceiveToIdle_DMA(
 801cc42:	f44f 7200 	mov.w	r2, #512	; 0x200
 801cc46:	4619      	mov	r1, r3
 801cc48:	f7f2 fd7d 	bl	800f746 <HAL_UARTEx_ReceiveToIdle_DMA>
 801cc4c:	4603      	mov	r3, r0
							handlers[i]->xBufferRX.buffer, MAX_BUFFER) != HAL_OK) {
 801cc4e:	2b00      	cmp	r3, #0
 801cc50:	bf14      	ite	ne
 801cc52:	2301      	movne	r3, #1
 801cc54:	2300      	moveq	r3, #0
 801cc56:	b2db      	uxtb	r3, r3
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d1dd      	bne.n	801cc18 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x64>

					}
					__HAL_DMA_DISABLE_IT(handlers[i]->config.huart->hdmarx,
 801cc5c:	4a85      	ldr	r2, [pc, #532]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cc5e:	68fb      	ldr	r3, [r7, #12]
 801cc60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cc64:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cc68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	4a82      	ldr	r2, [pc, #520]	; (801ce78 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c4>)
 801cc70:	4293      	cmp	r3, r2
 801cc72:	f000 80b8 	beq.w	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801cc76:	4a7f      	ldr	r2, [pc, #508]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cc78:	68fb      	ldr	r3, [r7, #12]
 801cc7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cc7e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cc82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	4a7c      	ldr	r2, [pc, #496]	; (801ce7c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c8>)
 801cc8a:	4293      	cmp	r3, r2
 801cc8c:	f000 80ab 	beq.w	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801cc90:	4a78      	ldr	r2, [pc, #480]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cc92:	68fb      	ldr	r3, [r7, #12]
 801cc94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cc98:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cc9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	4a77      	ldr	r2, [pc, #476]	; (801ce80 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2cc>)
 801cca4:	4293      	cmp	r3, r2
 801cca6:	f000 809e 	beq.w	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801ccaa:	4a72      	ldr	r2, [pc, #456]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801ccac:	68fb      	ldr	r3, [r7, #12]
 801ccae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ccb2:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801ccb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ccba:	681b      	ldr	r3, [r3, #0]
 801ccbc:	4a71      	ldr	r2, [pc, #452]	; (801ce84 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2d0>)
 801ccbe:	4293      	cmp	r3, r2
 801ccc0:	f000 8091 	beq.w	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801ccc4:	4a6b      	ldr	r2, [pc, #428]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801ccc6:	68fb      	ldr	r3, [r7, #12]
 801ccc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cccc:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801ccd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ccd4:	681b      	ldr	r3, [r3, #0]
 801ccd6:	4a6c      	ldr	r2, [pc, #432]	; (801ce88 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2d4>)
 801ccd8:	4293      	cmp	r3, r2
 801ccda:	f000 8084 	beq.w	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801ccde:	4a65      	ldr	r2, [pc, #404]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cce0:	68fb      	ldr	r3, [r7, #12]
 801cce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cce6:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801ccea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	4a66      	ldr	r2, [pc, #408]	; (801ce8c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2d8>)
 801ccf2:	4293      	cmp	r3, r2
 801ccf4:	d077      	beq.n	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801ccf6:	4a5f      	ldr	r2, [pc, #380]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801ccf8:	68fb      	ldr	r3, [r7, #12]
 801ccfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ccfe:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cd02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	4a61      	ldr	r2, [pc, #388]	; (801ce90 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2dc>)
 801cd0a:	4293      	cmp	r3, r2
 801cd0c:	d06b      	beq.n	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801cd0e:	4a59      	ldr	r2, [pc, #356]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cd10:	68fb      	ldr	r3, [r7, #12]
 801cd12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cd16:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cd1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cd1e:	681b      	ldr	r3, [r3, #0]
 801cd20:	4a5c      	ldr	r2, [pc, #368]	; (801ce94 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801cd22:	4293      	cmp	r3, r2
 801cd24:	d05f      	beq.n	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801cd26:	4a53      	ldr	r2, [pc, #332]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cd28:	68fb      	ldr	r3, [r7, #12]
 801cd2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cd2e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cd32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cd36:	681b      	ldr	r3, [r3, #0]
 801cd38:	4a57      	ldr	r2, [pc, #348]	; (801ce98 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e4>)
 801cd3a:	4293      	cmp	r3, r2
 801cd3c:	d053      	beq.n	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801cd3e:	4a4d      	ldr	r2, [pc, #308]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cd40:	68fb      	ldr	r3, [r7, #12]
 801cd42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cd46:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cd4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	4a52      	ldr	r2, [pc, #328]	; (801ce9c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e8>)
 801cd52:	4293      	cmp	r3, r2
 801cd54:	d047      	beq.n	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801cd56:	4a47      	ldr	r2, [pc, #284]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cd58:	68fb      	ldr	r3, [r7, #12]
 801cd5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cd5e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cd62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cd66:	681b      	ldr	r3, [r3, #0]
 801cd68:	4a4d      	ldr	r2, [pc, #308]	; (801cea0 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2ec>)
 801cd6a:	4293      	cmp	r3, r2
 801cd6c:	d03b      	beq.n	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801cd6e:	4a41      	ldr	r2, [pc, #260]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cd70:	68fb      	ldr	r3, [r7, #12]
 801cd72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cd76:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cd7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	4a48      	ldr	r2, [pc, #288]	; (801cea4 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2f0>)
 801cd82:	4293      	cmp	r3, r2
 801cd84:	d02f      	beq.n	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801cd86:	4a3b      	ldr	r2, [pc, #236]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cd88:	68fb      	ldr	r3, [r7, #12]
 801cd8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cd8e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cd92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	4a43      	ldr	r2, [pc, #268]	; (801cea8 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2f4>)
 801cd9a:	4293      	cmp	r3, r2
 801cd9c:	d023      	beq.n	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801cd9e:	4a35      	ldr	r2, [pc, #212]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cda0:	68fb      	ldr	r3, [r7, #12]
 801cda2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cda6:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cdaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cdae:	681b      	ldr	r3, [r3, #0]
 801cdb0:	4a3e      	ldr	r2, [pc, #248]	; (801ceac <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2f8>)
 801cdb2:	4293      	cmp	r3, r2
 801cdb4:	d017      	beq.n	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801cdb6:	4a2f      	ldr	r2, [pc, #188]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cdb8:	68fb      	ldr	r3, [r7, #12]
 801cdba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cdbe:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cdc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cdc6:	681b      	ldr	r3, [r3, #0]
 801cdc8:	4a39      	ldr	r2, [pc, #228]	; (801ceb0 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2fc>)
 801cdca:	4293      	cmp	r3, r2
 801cdcc:	d00b      	beq.n	801cde6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801cdce:	4a29      	ldr	r2, [pc, #164]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cdd0:	68fb      	ldr	r3, [r7, #12]
 801cdd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cdd6:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cdda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	4a34      	ldr	r2, [pc, #208]	; (801ceb4 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x300>)
 801cde2:	4293      	cmp	r3, r2
 801cde4:	d116      	bne.n	801ce14 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x260>
 801cde6:	4a23      	ldr	r2, [pc, #140]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cde8:	68fb      	ldr	r3, [r7, #12]
 801cdea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cdee:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cdf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	681a      	ldr	r2, [r3, #0]
 801cdfa:	491e      	ldr	r1, [pc, #120]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cdfc:	68fb      	ldr	r3, [r7, #12]
 801cdfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801ce02:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801ce06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ce0a:	681b      	ldr	r3, [r3, #0]
 801ce0c:	f022 0208 	bic.w	r2, r2, #8
 801ce10:	601a      	str	r2, [r3, #0]
 801ce12:	e015      	b.n	801ce40 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x28c>
 801ce14:	4a17      	ldr	r2, [pc, #92]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801ce16:	68fb      	ldr	r3, [r7, #12]
 801ce18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ce1c:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801ce20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ce24:	681b      	ldr	r3, [r3, #0]
 801ce26:	681a      	ldr	r2, [r3, #0]
 801ce28:	4912      	ldr	r1, [pc, #72]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801ce2a:	68fb      	ldr	r3, [r7, #12]
 801ce2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801ce30:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801ce34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ce38:	681b      	ldr	r3, [r3, #0]
 801ce3a:	f022 0204 	bic.w	r2, r2, #4
 801ce3e:	601a      	str	r2, [r3, #0]
							DMA_IT_HT); // we don't need half-transfer interrupt

					xTaskNotifyFromISR(handlers[i]->task_handle, 0,
 801ce40:	4a0c      	ldr	r2, [pc, #48]	; (801ce74 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801ce42:	68fb      	ldr	r3, [r7, #12]
 801ce44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ce48:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 801ce4c:	f107 0308 	add.w	r3, r7, #8
 801ce50:	9300      	str	r3, [sp, #0]
 801ce52:	2300      	movs	r3, #0
 801ce54:	2203      	movs	r2, #3
 801ce56:	2100      	movs	r1, #0
 801ce58:	f7f5 fc8a 	bl	8012770 <xTaskGenericNotifyFromISR>
							eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
				}
			}
			break;
 801ce5c:	e02e      	b.n	801cebc <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x308>
	for (i = 0; i < num_handlers; i++) {
 801ce5e:	68fb      	ldr	r3, [r7, #12]
 801ce60:	3301      	adds	r3, #1
 801ce62:	60fb      	str	r3, [r7, #12]
 801ce64:	4b14      	ldr	r3, [pc, #80]	; (801ceb8 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x304>)
 801ce66:	781b      	ldrb	r3, [r3, #0]
 801ce68:	461a      	mov	r2, r3
 801ce6a:	68fb      	ldr	r3, [r7, #12]
 801ce6c:	4293      	cmp	r3, r2
 801ce6e:	f6ff aeac 	blt.w	801cbca <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x16>
 801ce72:	e024      	b.n	801cebe <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x30a>
 801ce74:	2401e130 	.word	0x2401e130
 801ce78:	40020010 	.word	0x40020010
 801ce7c:	40020028 	.word	0x40020028
 801ce80:	40020040 	.word	0x40020040
 801ce84:	40020058 	.word	0x40020058
 801ce88:	40020070 	.word	0x40020070
 801ce8c:	40020088 	.word	0x40020088
 801ce90:	400200a0 	.word	0x400200a0
 801ce94:	400200b8 	.word	0x400200b8
 801ce98:	40020410 	.word	0x40020410
 801ce9c:	40020428 	.word	0x40020428
 801cea0:	40020440 	.word	0x40020440
 801cea4:	40020458 	.word	0x40020458
 801cea8:	40020470 	.word	0x40020470
 801ceac:	40020488 	.word	0x40020488
 801ceb0:	400204a0 	.word	0x400204a0
 801ceb4:	400204b8 	.word	0x400204b8
 801ceb8:	2401e138 	.word	0x2401e138
			break;
 801cebc:	bf00      	nop
		}
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801cebe:	68bb      	ldr	r3, [r7, #8]
 801cec0:	2b00      	cmp	r3, #0
 801cec2:	d007      	beq.n	801ced4 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x320>
 801cec4:	4b05      	ldr	r3, [pc, #20]	; (801cedc <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x328>)
 801cec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801ceca:	601a      	str	r2, [r3, #0]
 801cecc:	f3bf 8f4f 	dsb	sy
 801ced0:	f3bf 8f6f 	isb	sy
}
 801ced4:	bf00      	nop
 801ced6:	3710      	adds	r7, #16
 801ced8:	46bd      	mov	sp, r7
 801ceda:	bd80      	pop	{r7, pc}
 801cedc:	e000ed04 	.word	0xe000ed04

0801cee0 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef>:

/* ================================================================ */
void uartTxCompleteDMA_callback(UART_HandleTypeDef *huart) {
 801cee0:	b580      	push	{r7, lr}
 801cee2:	b086      	sub	sp, #24
 801cee4:	af02      	add	r7, sp, #8
 801cee6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801cee8:	2300      	movs	r3, #0
 801ceea:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < num_handlers; i++) {
 801ceec:	2300      	movs	r3, #0
 801ceee:	60fb      	str	r3, [r7, #12]
 801cef0:	e01a      	b.n	801cf28 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x48>
		if (handlers[i]->config.huart == huart) {
 801cef2:	4a18      	ldr	r2, [pc, #96]	; (801cf54 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x74>)
 801cef4:	68fb      	ldr	r3, [r7, #12]
 801cef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cefa:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801cefe:	687a      	ldr	r2, [r7, #4]
 801cf00:	429a      	cmp	r2, r3
 801cf02:	d10e      	bne.n	801cf22 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x42>
			// notify the end of TX
//			vTaskNotifyGiveFromISR(handlers[i]->task_handle, &xHigherPriorityTaskWoken);
			xTaskNotifyFromISR(handlers[i]->task_handle, 0, eNoAction,
 801cf04:	4a13      	ldr	r2, [pc, #76]	; (801cf54 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x74>)
 801cf06:	68fb      	ldr	r3, [r7, #12]
 801cf08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cf0c:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 801cf10:	f107 0308 	add.w	r3, r7, #8
 801cf14:	9300      	str	r3, [sp, #0]
 801cf16:	2300      	movs	r3, #0
 801cf18:	2200      	movs	r2, #0
 801cf1a:	2100      	movs	r1, #0
 801cf1c:	f7f5 fc28 	bl	8012770 <xTaskGenericNotifyFromISR>
					&xHigherPriorityTaskWoken);
			break;
 801cf20:	e008      	b.n	801cf34 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x54>
	for (i = 0; i < num_handlers; i++) {
 801cf22:	68fb      	ldr	r3, [r7, #12]
 801cf24:	3301      	adds	r3, #1
 801cf26:	60fb      	str	r3, [r7, #12]
 801cf28:	4b0b      	ldr	r3, [pc, #44]	; (801cf58 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x78>)
 801cf2a:	781b      	ldrb	r3, [r3, #0]
 801cf2c:	461a      	mov	r2, r3
 801cf2e:	68fb      	ldr	r3, [r7, #12]
 801cf30:	4293      	cmp	r3, r2
 801cf32:	dbde      	blt.n	801cef2 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x12>
		}

	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801cf34:	68bb      	ldr	r3, [r7, #8]
 801cf36:	2b00      	cmp	r3, #0
 801cf38:	d007      	beq.n	801cf4a <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x6a>
 801cf3a:	4b08      	ldr	r3, [pc, #32]	; (801cf5c <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x7c>)
 801cf3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801cf40:	601a      	str	r2, [r3, #0]
 801cf42:	f3bf 8f4f 	dsb	sy
 801cf46:	f3bf 8f6f 	isb	sy
}
 801cf4a:	bf00      	nop
 801cf4c:	3710      	adds	r7, #16
 801cf4e:	46bd      	mov	sp, r7
 801cf50:	bd80      	pop	{r7, pc}
 801cf52:	bf00      	nop
 801cf54:	2401e130 	.word	0x2401e130
 801cf58:	2401e138 	.word	0x2401e138
 801cf5c:	e000ed04 	.word	0xe000ed04

0801cf60 <_ZL17vTimerCallbackT35PP15tmrTimerControl>:

/* ================================================================ */
void vTimerCallbackT35(TimerHandle_t *pxTimer) {
 801cf60:	b580      	push	{r7, lr}
 801cf62:	b086      	sub	sp, #24
 801cf64:	af02      	add	r7, sp, #8
 801cf66:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for (i = 0; i < num_handlers; i++) {
 801cf68:	2300      	movs	r3, #0
 801cf6a:	60fb      	str	r3, [r7, #12]
 801cf6c:	e023      	b.n	801cfb6 <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x56>

		if ((TimerHandle_t*) handlers[i]->xTimerT35 == pxTimer) {
 801cf6e:	4a17      	ldr	r2, [pc, #92]	; (801cfcc <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x6c>)
 801cf70:	68fb      	ldr	r3, [r7, #12]
 801cf72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cf76:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 801cf7a:	687a      	ldr	r2, [r7, #4]
 801cf7c:	429a      	cmp	r2, r3
 801cf7e:	d117      	bne.n	801cfb0 <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x50>
			xTimerStop(handlers[i]->xTimerTimeout, 0);
 801cf80:	4a12      	ldr	r2, [pc, #72]	; (801cfcc <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x6c>)
 801cf82:	68fb      	ldr	r3, [r7, #12]
 801cf84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cf88:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 801cf8c:	2300      	movs	r3, #0
 801cf8e:	9300      	str	r3, [sp, #0]
 801cf90:	2300      	movs	r3, #0
 801cf92:	2200      	movs	r2, #0
 801cf94:	2103      	movs	r1, #3
 801cf96:	f7f5 fe99 	bl	8012ccc <xTimerGenericCommand>
			xTaskNotify(handlers[i]->task_handle, 0, eSetValueWithOverwrite); // TODO this conversion to TaskHandle_t might not work and I have to save the real TaskHandle_t
 801cf9a:	4a0c      	ldr	r2, [pc, #48]	; (801cfcc <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x6c>)
 801cf9c:	68fb      	ldr	r3, [r7, #12]
 801cf9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cfa2:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 801cfa6:	2300      	movs	r3, #0
 801cfa8:	2203      	movs	r2, #3
 801cfaa:	2100      	movs	r1, #0
 801cfac:	f7f5 fb22 	bl	80125f4 <xTaskGenericNotify>
	for (i = 0; i < num_handlers; i++) {
 801cfb0:	68fb      	ldr	r3, [r7, #12]
 801cfb2:	3301      	adds	r3, #1
 801cfb4:	60fb      	str	r3, [r7, #12]
 801cfb6:	4b06      	ldr	r3, [pc, #24]	; (801cfd0 <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x70>)
 801cfb8:	781b      	ldrb	r3, [r3, #0]
 801cfba:	461a      	mov	r2, r3
 801cfbc:	68fb      	ldr	r3, [r7, #12]
 801cfbe:	4293      	cmp	r3, r2
 801cfc0:	dbd5      	blt.n	801cf6e <_ZL17vTimerCallbackT35PP15tmrTimerControl+0xe>
		}

	}
}
 801cfc2:	bf00      	nop
 801cfc4:	bf00      	nop
 801cfc6:	3710      	adds	r7, #16
 801cfc8:	46bd      	mov	sp, r7
 801cfca:	bd80      	pop	{r7, pc}
 801cfcc:	2401e130 	.word	0x2401e130
 801cfd0:	2401e138 	.word	0x2401e138

0801cfd4 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl>:

/* ================================================================ */
void vTimerCallbackTimeout(TimerHandle_t *pxTimer) {
 801cfd4:	b580      	push	{r7, lr}
 801cfd6:	b084      	sub	sp, #16
 801cfd8:	af00      	add	r7, sp, #0
 801cfda:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for (i = 0; i < num_handlers; i++) {
 801cfdc:	2300      	movs	r3, #0
 801cfde:	60fb      	str	r3, [r7, #12]
 801cfe0:	e017      	b.n	801d012 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x3e>

		if ((TimerHandle_t*) handlers[i]->xTimerTimeout == pxTimer) {
 801cfe2:	4a11      	ldr	r2, [pc, #68]	; (801d028 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x54>)
 801cfe4:	68fb      	ldr	r3, [r7, #12]
 801cfe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cfea:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 801cfee:	687a      	ldr	r2, [r7, #4]
 801cff0:	429a      	cmp	r2, r3
 801cff2:	d10b      	bne.n	801d00c <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x38>
			xTaskNotify((TaskHandle_t ) handlers[i]->task_handle, ERR_TIME_OUT,
 801cff4:	4a0c      	ldr	r2, [pc, #48]	; (801d028 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x54>)
 801cff6:	68fb      	ldr	r3, [r7, #12]
 801cff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cffc:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 801d000:	2300      	movs	r3, #0
 801d002:	2203      	movs	r2, #3
 801d004:	f06f 0107 	mvn.w	r1, #7
 801d008:	f7f5 faf4 	bl	80125f4 <xTaskGenericNotify>
	for (i = 0; i < num_handlers; i++) {
 801d00c:	68fb      	ldr	r3, [r7, #12]
 801d00e:	3301      	adds	r3, #1
 801d010:	60fb      	str	r3, [r7, #12]
 801d012:	4b06      	ldr	r3, [pc, #24]	; (801d02c <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x58>)
 801d014:	781b      	ldrb	r3, [r3, #0]
 801d016:	461a      	mov	r2, r3
 801d018:	68fb      	ldr	r3, [r7, #12]
 801d01a:	4293      	cmp	r3, r2
 801d01c:	dbe1      	blt.n	801cfe2 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0xe>
					eSetValueWithOverwrite); // TODO this conversion to TaskHandle_t might not work and I have to save the real TaskHandle_t
		}

	}

}
 801d01e:	bf00      	nop
 801d020:	bf00      	nop
 801d022:	3710      	adds	r7, #16
 801d024:	46bd      	mov	sp, r7
 801d026:	bd80      	pop	{r7, pc}
 801d028:	2401e130 	.word	0x2401e130
 801d02c:	2401e138 	.word	0x2401e138

0801d030 <_ZN12ModbusMaster9sendQueryE14modbus_query_t>:

/* ================================================================ */
int8_t ModbusMaster::sendQuery(modbus_query_t telegram) {
 801d030:	b084      	sub	sp, #16
 801d032:	b580      	push	{r7, lr}
 801d034:	b084      	sub	sp, #16
 801d036:	af00      	add	r7, sp, #0
 801d038:	6078      	str	r0, [r7, #4]
 801d03a:	f107 001c 	add.w	r0, r7, #28
 801d03e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t u8regsno, u8bytesno;
	int8_t error = 0;
 801d042:	2300      	movs	r3, #0
 801d044:	73bb      	strb	r3, [r7, #14]
	osSemaphoreAcquire(this->ModBusSphrHandle, portMAX_DELAY);
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801d04c:	f04f 31ff 	mov.w	r1, #4294967295
 801d050:	4618      	mov	r0, r3
 801d052:	f7f2 fee1 	bl	800fe18 <osSemaphoreAcquire>

	if (this->i8state != COM_IDLE)
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	f993 3213 	ldrsb.w	r3, [r3, #531]	; 0x213
 801d05c:	2b00      	cmp	r3, #0
 801d05e:	d001      	beq.n	801d064 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x34>
		error = ERR_POLLING;
 801d060:	23fe      	movs	r3, #254	; 0xfe
 801d062:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id == 0) || (telegram.u8id > 247))
 801d064:	7f3b      	ldrb	r3, [r7, #28]
 801d066:	2b00      	cmp	r3, #0
 801d068:	d002      	beq.n	801d070 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x40>
 801d06a:	7f3b      	ldrb	r3, [r7, #28]
 801d06c:	2bf7      	cmp	r3, #247	; 0xf7
 801d06e:	d901      	bls.n	801d074 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x44>
		error = ERR_BAD_SLAVE_ID;
 801d070:	23f7      	movs	r3, #247	; 0xf7
 801d072:	73bb      	strb	r3, [r7, #14]

	if (error) {
 801d074:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d078:	2b00      	cmp	r3, #0
 801d07a:	d00b      	beq.n	801d094 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x64>
		this->lastError = error;
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	7bba      	ldrb	r2, [r7, #14]
 801d080:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(this->ModBusSphrHandle);
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801d088:	4618      	mov	r0, r3
 801d08a:	f7f2 ff17 	bl	800febc <osSemaphoreRelease>
		return error;
 801d08e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d092:	e125      	b.n	801d2e0 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x2b0>
	}

	this->u16regs = telegram.u16reg;
 801d094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	// telegram header
	this->u8Buffer[ID] = telegram.u8id;
 801d09c:	7f3a      	ldrb	r2, [r7, #28]
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	705a      	strb	r2, [r3, #1]
	this->u8Buffer[FUNC] = telegram.u8fct;
 801d0a2:	7f7a      	ldrb	r2, [r7, #29]
 801d0a4:	687b      	ldr	r3, [r7, #4]
 801d0a6:	709a      	strb	r2, [r3, #2]
	this->u8Buffer[ADD_HI] = highByte(telegram.u16RegAdd);
 801d0a8:	8bfb      	ldrh	r3, [r7, #30]
 801d0aa:	0a1b      	lsrs	r3, r3, #8
 801d0ac:	b29b      	uxth	r3, r3
 801d0ae:	b2da      	uxtb	r2, r3
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	70da      	strb	r2, [r3, #3]
	this->u8Buffer[ADD_LO] = lowByte(telegram.u16RegAdd);
 801d0b4:	8bfb      	ldrh	r3, [r7, #30]
 801d0b6:	b2da      	uxtb	r2, r3
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	711a      	strb	r2, [r3, #4]
//
	switch (telegram.u8fct) {
 801d0bc:	7f7b      	ldrb	r3, [r7, #29]
 801d0be:	3b01      	subs	r3, #1
 801d0c0:	2b0f      	cmp	r3, #15
 801d0c2:	f200 80fc 	bhi.w	801d2be <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x28e>
 801d0c6:	a201      	add	r2, pc, #4	; (adr r2, 801d0cc <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x9c>)
 801d0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d0cc:	0801d10d 	.word	0x0801d10d
 801d0d0:	0801d10d 	.word	0x0801d10d
 801d0d4:	0801d10d 	.word	0x0801d10d
 801d0d8:	0801d10d 	.word	0x0801d10d
 801d0dc:	0801d12b 	.word	0x0801d12b
 801d0e0:	0801d14d 	.word	0x0801d14d
 801d0e4:	0801d2bf 	.word	0x0801d2bf
 801d0e8:	0801d2bf 	.word	0x0801d2bf
 801d0ec:	0801d2bf 	.word	0x0801d2bf
 801d0f0:	0801d2bf 	.word	0x0801d2bf
 801d0f4:	0801d2bf 	.word	0x0801d2bf
 801d0f8:	0801d2bf 	.word	0x0801d2bf
 801d0fc:	0801d2bf 	.word	0x0801d2bf
 801d100:	0801d2bf 	.word	0x0801d2bf
 801d104:	0801d16f 	.word	0x0801d16f
 801d108:	0801d229 	.word	0x0801d229
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
		this->u8Buffer[NB_HI] = highByte(telegram.u16CoilsNo);
 801d10c:	8c3b      	ldrh	r3, [r7, #32]
 801d10e:	0a1b      	lsrs	r3, r3, #8
 801d110:	b29b      	uxth	r3, r3
 801d112:	b2da      	uxtb	r2, r3
 801d114:	687b      	ldr	r3, [r7, #4]
 801d116:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = lowByte(telegram.u16CoilsNo);
 801d118:	8c3b      	ldrh	r3, [r7, #32]
 801d11a:	b2da      	uxtb	r2, r3
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	719a      	strb	r2, [r3, #6]
		this->u8BufferSize = 6;
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	2206      	movs	r2, #6
 801d124:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
		break;
 801d128:	e0c9      	b.n	801d2be <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x28e>
	case MB_FC_WRITE_COIL:
		this->u8Buffer[NB_HI] = ((telegram.u16reg[0] > 0) ? 0xff : 0);
 801d12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d12c:	881b      	ldrh	r3, [r3, #0]
 801d12e:	2b00      	cmp	r3, #0
 801d130:	d001      	beq.n	801d136 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x106>
 801d132:	22ff      	movs	r2, #255	; 0xff
 801d134:	e000      	b.n	801d138 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x108>
 801d136:	2200      	movs	r2, #0
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = 0;
 801d13c:	687b      	ldr	r3, [r7, #4]
 801d13e:	2200      	movs	r2, #0
 801d140:	719a      	strb	r2, [r3, #6]
		this->u8BufferSize = 6;
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	2206      	movs	r2, #6
 801d146:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
		break;
 801d14a:	e0b8      	b.n	801d2be <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x28e>
	case MB_FC_WRITE_REGISTER:
		this->u8Buffer[NB_HI] = highByte(telegram.u16reg[0]);
 801d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d14e:	881b      	ldrh	r3, [r3, #0]
 801d150:	0a1b      	lsrs	r3, r3, #8
 801d152:	b29b      	uxth	r3, r3
 801d154:	b2da      	uxtb	r2, r3
 801d156:	687b      	ldr	r3, [r7, #4]
 801d158:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = lowByte(telegram.u16reg[0]);
 801d15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d15c:	881b      	ldrh	r3, [r3, #0]
 801d15e:	b2da      	uxtb	r2, r3
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	719a      	strb	r2, [r3, #6]
		this->u8BufferSize = 6;
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	2206      	movs	r2, #6
 801d168:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
		break;
 801d16c:	e0a7      	b.n	801d2be <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x28e>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
		u8regsno = telegram.u16CoilsNo / 16;
 801d16e:	8c3b      	ldrh	r3, [r7, #32]
 801d170:	091b      	lsrs	r3, r3, #4
 801d172:	b29b      	uxth	r3, r3
 801d174:	727b      	strb	r3, [r7, #9]
		u8bytesno = u8regsno * 2;
 801d176:	7a7b      	ldrb	r3, [r7, #9]
 801d178:	005b      	lsls	r3, r3, #1
 801d17a:	73fb      	strb	r3, [r7, #15]
		if ((telegram.u16CoilsNo % 16) != 0) {
 801d17c:	8c3b      	ldrh	r3, [r7, #32]
 801d17e:	f003 030f 	and.w	r3, r3, #15
 801d182:	2b00      	cmp	r3, #0
 801d184:	d005      	beq.n	801d192 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x162>
			u8bytesno++;
 801d186:	7bfb      	ldrb	r3, [r7, #15]
 801d188:	3301      	adds	r3, #1
 801d18a:	73fb      	strb	r3, [r7, #15]
			u8regsno++;
 801d18c:	7a7b      	ldrb	r3, [r7, #9]
 801d18e:	3301      	adds	r3, #1
 801d190:	727b      	strb	r3, [r7, #9]
		}

		this->u8Buffer[NB_HI] = highByte(telegram.u16CoilsNo);
 801d192:	8c3b      	ldrh	r3, [r7, #32]
 801d194:	0a1b      	lsrs	r3, r3, #8
 801d196:	b29b      	uxth	r3, r3
 801d198:	b2da      	uxtb	r2, r3
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = lowByte(telegram.u16CoilsNo);
 801d19e:	8c3b      	ldrh	r3, [r7, #32]
 801d1a0:	b2da      	uxtb	r2, r3
 801d1a2:	687b      	ldr	r3, [r7, #4]
 801d1a4:	719a      	strb	r2, [r3, #6]
		this->u8Buffer[BYTE_CNT] = u8bytesno;
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	7bfa      	ldrb	r2, [r7, #15]
 801d1aa:	71da      	strb	r2, [r3, #7]
		this->u8BufferSize = 7;
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	2207      	movs	r2, #7
 801d1b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201

		for (uint16_t i = 0; i < u8bytesno; i++) {
 801d1b4:	2300      	movs	r3, #0
 801d1b6:	81bb      	strh	r3, [r7, #12]
 801d1b8:	e030      	b.n	801d21c <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x1ec>
			if (i % 2) {
 801d1ba:	89bb      	ldrh	r3, [r7, #12]
 801d1bc:	f003 0301 	and.w	r3, r3, #1
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d00f      	beq.n	801d1e4 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x1b4>
				this->u8Buffer[this->u8BufferSize] = lowByte(
 801d1c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d1c6:	89bb      	ldrh	r3, [r7, #12]
 801d1c8:	085b      	lsrs	r3, r3, #1
 801d1ca:	b29b      	uxth	r3, r3
 801d1cc:	005b      	lsls	r3, r3, #1
 801d1ce:	4413      	add	r3, r2
 801d1d0:	881a      	ldrh	r2, [r3, #0]
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801d1d8:	4619      	mov	r1, r3
 801d1da:	b2d2      	uxtb	r2, r2
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	440b      	add	r3, r1
 801d1e0:	705a      	strb	r2, [r3, #1]
 801d1e2:	e010      	b.n	801d206 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x1d6>
						telegram.u16reg[i / 2]);
			} else {
				this->u8Buffer[this->u8BufferSize] = highByte(
 801d1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d1e6:	89bb      	ldrh	r3, [r7, #12]
 801d1e8:	085b      	lsrs	r3, r3, #1
 801d1ea:	b29b      	uxth	r3, r3
 801d1ec:	005b      	lsls	r3, r3, #1
 801d1ee:	4413      	add	r3, r2
 801d1f0:	881b      	ldrh	r3, [r3, #0]
 801d1f2:	0a1b      	lsrs	r3, r3, #8
 801d1f4:	b29a      	uxth	r2, r3
 801d1f6:	687b      	ldr	r3, [r7, #4]
 801d1f8:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801d1fc:	4619      	mov	r1, r3
 801d1fe:	b2d2      	uxtb	r2, r2
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	440b      	add	r3, r1
 801d204:	705a      	strb	r2, [r3, #1]
						telegram.u16reg[i / 2]);

			}
			this->u8BufferSize++;
 801d206:	687b      	ldr	r3, [r7, #4]
 801d208:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801d20c:	3301      	adds	r3, #1
 801d20e:	b2da      	uxtb	r2, r3
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
		for (uint16_t i = 0; i < u8bytesno; i++) {
 801d216:	89bb      	ldrh	r3, [r7, #12]
 801d218:	3301      	adds	r3, #1
 801d21a:	81bb      	strh	r3, [r7, #12]
 801d21c:	7bfb      	ldrb	r3, [r7, #15]
 801d21e:	b29b      	uxth	r3, r3
 801d220:	89ba      	ldrh	r2, [r7, #12]
 801d222:	429a      	cmp	r2, r3
 801d224:	d3c9      	bcc.n	801d1ba <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x18a>
		}
		break;
 801d226:	e04a      	b.n	801d2be <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x28e>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
		this->u8Buffer[NB_HI] = highByte(telegram.u16CoilsNo);
 801d228:	8c3b      	ldrh	r3, [r7, #32]
 801d22a:	0a1b      	lsrs	r3, r3, #8
 801d22c:	b29b      	uxth	r3, r3
 801d22e:	b2da      	uxtb	r2, r3
 801d230:	687b      	ldr	r3, [r7, #4]
 801d232:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = lowByte(telegram.u16CoilsNo);
 801d234:	8c3b      	ldrh	r3, [r7, #32]
 801d236:	b2da      	uxtb	r2, r3
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	719a      	strb	r2, [r3, #6]
		this->u8Buffer[BYTE_CNT] = (uint8_t) (telegram.u16CoilsNo * 2);
 801d23c:	8c3b      	ldrh	r3, [r7, #32]
 801d23e:	b2db      	uxtb	r3, r3
 801d240:	005b      	lsls	r3, r3, #1
 801d242:	b2da      	uxtb	r2, r3
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	71da      	strb	r2, [r3, #7]
		this->u8BufferSize = 7;
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	2207      	movs	r2, #7
 801d24c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201

		for (uint16_t i = 0; i < telegram.u16CoilsNo; i++) {
 801d250:	2300      	movs	r3, #0
 801d252:	817b      	strh	r3, [r7, #10]
 801d254:	e02e      	b.n	801d2b4 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x284>

			this->u8Buffer[this->u8BufferSize] = highByte(telegram.u16reg[i]);
 801d256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d258:	897b      	ldrh	r3, [r7, #10]
 801d25a:	005b      	lsls	r3, r3, #1
 801d25c:	4413      	add	r3, r2
 801d25e:	881b      	ldrh	r3, [r3, #0]
 801d260:	0a1b      	lsrs	r3, r3, #8
 801d262:	b29a      	uxth	r2, r3
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801d26a:	4619      	mov	r1, r3
 801d26c:	b2d2      	uxtb	r2, r2
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	440b      	add	r3, r1
 801d272:	705a      	strb	r2, [r3, #1]
			this->u8BufferSize++;
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801d27a:	3301      	adds	r3, #1
 801d27c:	b2da      	uxtb	r2, r3
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
			this->u8Buffer[this->u8BufferSize] = lowByte(telegram.u16reg[i]);
 801d284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d286:	897b      	ldrh	r3, [r7, #10]
 801d288:	005b      	lsls	r3, r3, #1
 801d28a:	4413      	add	r3, r2
 801d28c:	881a      	ldrh	r2, [r3, #0]
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801d294:	4619      	mov	r1, r3
 801d296:	b2d2      	uxtb	r2, r2
 801d298:	687b      	ldr	r3, [r7, #4]
 801d29a:	440b      	add	r3, r1
 801d29c:	705a      	strb	r2, [r3, #1]
			this->u8BufferSize++;
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801d2a4:	3301      	adds	r3, #1
 801d2a6:	b2da      	uxtb	r2, r3
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
		for (uint16_t i = 0; i < telegram.u16CoilsNo; i++) {
 801d2ae:	897b      	ldrh	r3, [r7, #10]
 801d2b0:	3301      	adds	r3, #1
 801d2b2:	817b      	strh	r3, [r7, #10]
 801d2b4:	8c3b      	ldrh	r3, [r7, #32]
 801d2b6:	897a      	ldrh	r2, [r7, #10]
 801d2b8:	429a      	cmp	r2, r3
 801d2ba:	d3cc      	bcc.n	801d256 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x226>
		}
		break;
 801d2bc:	bf00      	nop
	}

	this->sendTxBuffer();
 801d2be:	6878      	ldr	r0, [r7, #4]
 801d2c0:	f000 f816 	bl	801d2f0 <_ZN12ModbusMaster12sendTxBufferEv>

	osSemaphoreRelease(this->ModBusSphrHandle);
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 801d2ca:	4618      	mov	r0, r3
 801d2cc:	f7f2 fdf6 	bl	800febc <osSemaphoreRelease>
	this->i8state = COM_WAITING;
 801d2d0:	687b      	ldr	r3, [r7, #4]
 801d2d2:	2201      	movs	r2, #1
 801d2d4:	f883 2213 	strb.w	r2, [r3, #531]	; 0x213
	this->lastError = 0;
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	2200      	movs	r2, #0
 801d2dc:	701a      	strb	r2, [r3, #0]
	return 0;
 801d2de:	2300      	movs	r3, #0
}
 801d2e0:	4618      	mov	r0, r3
 801d2e2:	3710      	adds	r7, #16
 801d2e4:	46bd      	mov	sp, r7
 801d2e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d2ea:	b004      	add	sp, #16
 801d2ec:	4770      	bx	lr
 801d2ee:	bf00      	nop

0801d2f0 <_ZN12ModbusMaster12sendTxBufferEv>:

/* ================================================================ */
void ModbusMaster::sendTxBuffer() {
 801d2f0:	b590      	push	{r4, r7, lr}
 801d2f2:	b087      	sub	sp, #28
 801d2f4:	af02      	add	r7, sp, #8
 801d2f6:	6078      	str	r0, [r7, #4]
	uint16_t u16crc = calcCRC(this->u8Buffer, this->u8BufferSize);
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	1c5a      	adds	r2, r3, #1
 801d2fc:	687b      	ldr	r3, [r7, #4]
 801d2fe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801d302:	4619      	mov	r1, r3
 801d304:	4610      	mov	r0, r2
 801d306:	f000 f8b6 	bl	801d476 <_Z7calcCRCPhh>
 801d30a:	4603      	mov	r3, r0
 801d30c:	81fb      	strh	r3, [r7, #14]
	this->u8Buffer[this->u8BufferSize] = u16crc >> 8;
 801d30e:	89fb      	ldrh	r3, [r7, #14]
 801d310:	0a1b      	lsrs	r3, r3, #8
 801d312:	b29a      	uxth	r2, r3
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801d31a:	4619      	mov	r1, r3
 801d31c:	b2d2      	uxtb	r2, r2
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	440b      	add	r3, r1
 801d322:	705a      	strb	r2, [r3, #1]
	this->u8BufferSize++;
 801d324:	687b      	ldr	r3, [r7, #4]
 801d326:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801d32a:	3301      	adds	r3, #1
 801d32c:	b2da      	uxtb	r2, r3
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	this->u8Buffer[this->u8BufferSize] = u16crc & 0x00ff;
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801d33a:	4619      	mov	r1, r3
 801d33c:	89fb      	ldrh	r3, [r7, #14]
 801d33e:	b2da      	uxtb	r2, r3
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	440b      	add	r3, r1
 801d344:	705a      	strb	r2, [r3, #1]
	this->u8BufferSize++;
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801d34c:	3301      	adds	r3, #1
 801d34e:	b2da      	uxtb	r2, r3
 801d350:	687b      	ldr	r3, [r7, #4]
 801d352:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201

	if (this->config.EN_GPIOx != NULL) {
 801d356:	687b      	ldr	r3, [r7, #4]
 801d358:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	d00f      	beq.n	801d380 <_ZN12ModbusMaster12sendTxBufferEv+0x90>
		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
		HAL_HalfDuplex_EnableTransmitter(this->config.huart);
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801d366:	4618      	mov	r0, r3
 801d368:	f7ef fde6 	bl	800cf38 <HAL_HalfDuplex_EnableTransmitter>
		HAL_GPIO_WritePin(this->config.EN_GPIOx, this->config.EN_GPIO_Pin,
 801d36c:	687b      	ldr	r3, [r7, #4]
 801d36e:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
 801d372:	687b      	ldr	r3, [r7, #4]
 801d374:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 801d378:	2201      	movs	r2, #1
 801d37a:	4619      	mov	r1, r3
 801d37c:	f7e8 ff8c 	bl	8006298 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
	}

	if (this->config.hardware == MB_UART_IT) {
 801d380:	687b      	ldr	r3, [r7, #4]
 801d382:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
 801d386:	2b01      	cmp	r3, #1
 801d388:	d10c      	bne.n	801d3a4 <_ZN12ModbusMaster12sendTxBufferEv+0xb4>
		HAL_UART_Transmit_IT(this->config.huart, this->u8Buffer,
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	f8d3 02ac 	ldr.w	r0, [r3, #684]	; 0x2ac
 801d390:	687b      	ldr	r3, [r7, #4]
 801d392:	1c59      	adds	r1, r3, #1
				this->u8BufferSize);
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
		HAL_UART_Transmit_IT(this->config.huart, this->u8Buffer,
 801d39a:	b29b      	uxth	r3, r3
 801d39c:	461a      	mov	r2, r3
 801d39e:	f7ee fdcf 	bl	800bf40 <HAL_UART_Transmit_IT>
 801d3a2:	e010      	b.n	801d3c6 <_ZN12ModbusMaster12sendTxBufferEv+0xd6>
	} else if (this->config.hardware == MB_UART_DMA) {
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
 801d3aa:	2b02      	cmp	r3, #2
 801d3ac:	d10b      	bne.n	801d3c6 <_ZN12ModbusMaster12sendTxBufferEv+0xd6>
		HAL_UART_Transmit_DMA(this->config.huart, this->u8Buffer,
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	f8d3 02ac 	ldr.w	r0, [r3, #684]	; 0x2ac
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	1c59      	adds	r1, r3, #1
				this->u8BufferSize);
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
		HAL_UART_Transmit_DMA(this->config.huart, this->u8Buffer,
 801d3be:	b29b      	uxth	r3, r3
 801d3c0:	461a      	mov	r2, r3
 801d3c2:	f7ee fe9d 	bl	800c100 <HAL_UART_Transmit_DMA>
	}

	ulTaskNotifyTake(pdTRUE, 20); //wait notification from TXE interrupt
 801d3c6:	2114      	movs	r1, #20
 801d3c8:	2001      	movs	r0, #1
 801d3ca:	f7f5 f8c7 	bl	801255c <ulTaskNotifyTake>
	 * If you are porting the library to a different MCU check the
	 * USART datasheet and add the corresponding family in the following
	 * preprocessor conditions
	 */
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)
	while ((this->config.huart->Instance->ISR & USART_ISR_TC) == 0) {
 801d3ce:	bf00      	nop
 801d3d0:	687b      	ldr	r3, [r7, #4]
 801d3d2:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	69db      	ldr	r3, [r3, #28]
 801d3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3de:	2b00      	cmp	r3, #0
 801d3e0:	bf0c      	ite	eq
 801d3e2:	2301      	moveq	r3, #1
 801d3e4:	2300      	movne	r3, #0
 801d3e6:	b2db      	uxtb	r3, r3
 801d3e8:	2b00      	cmp	r3, #0
 801d3ea:	d1f1      	bne.n	801d3d0 <_ZN12ModbusMaster12sendTxBufferEv+0xe0>
  while((this->config.huart->Instance->SR & USART_SR_TC) ==0 ) {

  }
#endif

	if (this->config.EN_GPIOx != NULL) {
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d00f      	beq.n	801d416 <_ZN12ModbusMaster12sendTxBufferEv+0x126>

		//return RS485 transceiver to receive mode
		HAL_GPIO_WritePin(this->config.EN_GPIOx, this->config.EN_GPIO_Pin,
 801d3f6:	687b      	ldr	r3, [r7, #4]
 801d3f8:	f8d3 02b0 	ldr.w	r0, [r3, #688]	; 0x2b0
 801d3fc:	687b      	ldr	r3, [r7, #4]
 801d3fe:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 801d402:	2200      	movs	r2, #0
 801d404:	4619      	mov	r1, r3
 801d406:	f7e8 ff47 	bl	8006298 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		//enable receiver, disable transmitter
		HAL_HalfDuplex_EnableReceiver(this->config.huart);
 801d40a:	687b      	ldr	r3, [r7, #4]
 801d40c:	f8d3 32ac 	ldr.w	r3, [r3, #684]	; 0x2ac
 801d410:	4618      	mov	r0, r3
 801d412:	f7ef fde5 	bl	800cfe0 <HAL_HalfDuplex_EnableReceiver>

	}

	// set timeout for master query

	xTimerReset(this->xTimerTimeout, 0);
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	f8d3 4220 	ldr.w	r4, [r3, #544]	; 0x220
 801d41c:	f7f4 fbb2 	bl	8011b84 <xTaskGetTickCount>
 801d420:	4602      	mov	r2, r0
 801d422:	2300      	movs	r3, #0
 801d424:	9300      	str	r3, [sp, #0]
 801d426:	2300      	movs	r3, #0
 801d428:	2102      	movs	r1, #2
 801d42a:	4620      	mov	r0, r4
 801d42c:	f7f5 fc4e 	bl	8012ccc <xTimerGenericCommand>

	this->u8BufferSize = 0;
 801d430:	687b      	ldr	r3, [r7, #4]
 801d432:	2200      	movs	r2, #0
 801d434:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	// increase message counter
	this->u16OutCnt++;
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	f8b3 320a 	ldrh.w	r3, [r3, #522]	; 0x20a
 801d43e:	3301      	adds	r3, #1
 801d440:	b29a      	uxth	r2, r3
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	f8a3 220a 	strh.w	r2, [r3, #522]	; 0x20a
}
 801d448:	bf00      	nop
 801d44a:	3714      	adds	r7, #20
 801d44c:	46bd      	mov	sp, r7
 801d44e:	bd90      	pop	{r4, r7, pc}

0801d450 <_Z4wordhh>:
 *
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L) {
 801d450:	b480      	push	{r7}
 801d452:	b085      	sub	sp, #20
 801d454:	af00      	add	r7, sp, #0
 801d456:	4603      	mov	r3, r0
 801d458:	460a      	mov	r2, r1
 801d45a:	71fb      	strb	r3, [r7, #7]
 801d45c:	4613      	mov	r3, r2
 801d45e:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 801d460:	79bb      	ldrb	r3, [r7, #6]
 801d462:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 801d464:	79fb      	ldrb	r3, [r7, #7]
 801d466:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 801d468:	89bb      	ldrh	r3, [r7, #12]
}
 801d46a:	4618      	mov	r0, r3
 801d46c:	3714      	adds	r7, #20
 801d46e:	46bd      	mov	sp, r7
 801d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d474:	4770      	bx	lr

0801d476 <_Z7calcCRCPhh>:
 *
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length) {
 801d476:	b480      	push	{r7}
 801d478:	b087      	sub	sp, #28
 801d47a:	af00      	add	r7, sp, #0
 801d47c:	6078      	str	r0, [r7, #4]
 801d47e:	460b      	mov	r3, r1
 801d480:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 801d482:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d486:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 801d488:	2300      	movs	r3, #0
 801d48a:	74fb      	strb	r3, [r7, #19]
 801d48c:	e022      	b.n	801d4d4 <_Z7calcCRCPhh+0x5e>
		temp = temp ^ Buffer[i];
 801d48e:	7cfb      	ldrb	r3, [r7, #19]
 801d490:	687a      	ldr	r2, [r7, #4]
 801d492:	4413      	add	r3, r2
 801d494:	781b      	ldrb	r3, [r3, #0]
 801d496:	461a      	mov	r2, r3
 801d498:	697b      	ldr	r3, [r7, #20]
 801d49a:	4053      	eors	r3, r2
 801d49c:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 801d49e:	2301      	movs	r3, #1
 801d4a0:	74bb      	strb	r3, [r7, #18]
 801d4a2:	e011      	b.n	801d4c8 <_Z7calcCRCPhh+0x52>
			flag = temp & 0x0001;
 801d4a4:	697b      	ldr	r3, [r7, #20]
 801d4a6:	f003 0301 	and.w	r3, r3, #1
 801d4aa:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 801d4ac:	697b      	ldr	r3, [r7, #20]
 801d4ae:	085b      	lsrs	r3, r3, #1
 801d4b0:	617b      	str	r3, [r7, #20]
			if (flag)
 801d4b2:	68bb      	ldr	r3, [r7, #8]
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	d004      	beq.n	801d4c2 <_Z7calcCRCPhh+0x4c>
				temp ^= 0xA001;
 801d4b8:	697a      	ldr	r2, [r7, #20]
 801d4ba:	f24a 0301 	movw	r3, #40961	; 0xa001
 801d4be:	4053      	eors	r3, r2
 801d4c0:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 801d4c2:	7cbb      	ldrb	r3, [r7, #18]
 801d4c4:	3301      	adds	r3, #1
 801d4c6:	74bb      	strb	r3, [r7, #18]
 801d4c8:	7cbb      	ldrb	r3, [r7, #18]
 801d4ca:	2b08      	cmp	r3, #8
 801d4cc:	d9ea      	bls.n	801d4a4 <_Z7calcCRCPhh+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 801d4ce:	7cfb      	ldrb	r3, [r7, #19]
 801d4d0:	3301      	adds	r3, #1
 801d4d2:	74fb      	strb	r3, [r7, #19]
 801d4d4:	7cfa      	ldrb	r2, [r7, #19]
 801d4d6:	78fb      	ldrb	r3, [r7, #3]
 801d4d8:	429a      	cmp	r2, r3
 801d4da:	d3d8      	bcc.n	801d48e <_Z7calcCRCPhh+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 801d4dc:	697b      	ldr	r3, [r7, #20]
 801d4de:	0a1b      	lsrs	r3, r3, #8
 801d4e0:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 801d4e2:	697b      	ldr	r3, [r7, #20]
 801d4e4:	021b      	lsls	r3, r3, #8
 801d4e6:	68fa      	ldr	r2, [r7, #12]
 801d4e8:	4313      	orrs	r3, r2
 801d4ea:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 801d4ec:	697b      	ldr	r3, [r7, #20]
 801d4ee:	b29b      	uxth	r3, r3
 801d4f0:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 801d4f2:	697b      	ldr	r3, [r7, #20]
 801d4f4:	b29b      	uxth	r3, r3

}
 801d4f6:	4618      	mov	r0, r3
 801d4f8:	371c      	adds	r7, #28
 801d4fa:	46bd      	mov	sp, r7
 801d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d500:	4770      	bx	lr

0801d502 <_ZN21core_utils_RingBufferILi128EEC1Ev>:

template<int size>
class core_utils_RingBuffer {
public:

	core_utils_RingBuffer() {
 801d502:	b480      	push	{r7}
 801d504:	b083      	sub	sp, #12
 801d506:	af00      	add	r7, sp, #0
 801d508:	6078      	str	r0, [r7, #4]

	}
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	4618      	mov	r0, r3
 801d50e:	370c      	adds	r7, #12
 801d510:	46bd      	mov	sp, r7
 801d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d516:	4770      	bx	lr

0801d518 <_ZN21core_utils_RingBufferILi128EE5clearEv>:

	void clear() {
 801d518:	b480      	push	{r7}
 801d51a:	b083      	sub	sp, #12
 801d51c:	af00      	add	r7, sp, #0
 801d51e:	6078      	str	r0, [r7, #4]
		this->start = 0;
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	2200      	movs	r2, #0
 801d524:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		this->end = 0;
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	2200      	movs	r2, #0
 801d52c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		this->available = 0;
 801d530:	687b      	ldr	r3, [r7, #4]
 801d532:	2200      	movs	r2, #0
 801d534:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		this->overflow = false;
 801d538:	687b      	ldr	r3, [r7, #4]
 801d53a:	2200      	movs	r2, #0
 801d53c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	}
 801d540:	bf00      	nop
 801d542:	370c      	adds	r7, #12
 801d544:	46bd      	mov	sp, r7
 801d546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d54a:	4770      	bx	lr

0801d54c <_ZN21core_utils_RingBufferILi128EE13get_all_bytesEPh>:
		this->clear();

		return uCounter;
	}

	uint8_t get_all_bytes(uint8_t *buffer) {
 801d54c:	b580      	push	{r7, lr}
 801d54e:	b082      	sub	sp, #8
 801d550:	af00      	add	r7, sp, #0
 801d552:	6078      	str	r0, [r7, #4]
 801d554:	6039      	str	r1, [r7, #0]
		return this->get_n_bytes(buffer, this->available);
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 801d55c:	461a      	mov	r2, r3
 801d55e:	6839      	ldr	r1, [r7, #0]
 801d560:	6878      	ldr	r0, [r7, #4]
 801d562:	f000 f805 	bl	801d570 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh>
 801d566:	4603      	mov	r3, r0
	}
 801d568:	4618      	mov	r0, r3
 801d56a:	3708      	adds	r7, #8
 801d56c:	46bd      	mov	sp, r7
 801d56e:	bd80      	pop	{r7, pc}

0801d570 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh>:
	uint8_t get_n_bytes(uint8_t *buffer, uint8_t number) {
 801d570:	b580      	push	{r7, lr}
 801d572:	b086      	sub	sp, #24
 801d574:	af00      	add	r7, sp, #0
 801d576:	60f8      	str	r0, [r7, #12]
 801d578:	60b9      	str	r1, [r7, #8]
 801d57a:	4613      	mov	r3, r2
 801d57c:	71fb      	strb	r3, [r7, #7]
		if (this->available == 0 || number == 0)
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 801d584:	2b00      	cmp	r3, #0
 801d586:	d002      	beq.n	801d58e <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x1e>
 801d588:	79fb      	ldrb	r3, [r7, #7]
 801d58a:	2b00      	cmp	r3, #0
 801d58c:	d101      	bne.n	801d592 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x22>
			return 0;
 801d58e:	2300      	movs	r3, #0
 801d590:	e03e      	b.n	801d610 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0xa0>
		if (number > size)
 801d592:	79fb      	ldrb	r3, [r7, #7]
 801d594:	2b80      	cmp	r3, #128	; 0x80
 801d596:	d901      	bls.n	801d59c <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x2c>
			return 0;
 801d598:	2300      	movs	r3, #0
 801d59a:	e039      	b.n	801d610 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0xa0>
		for (uCounter = 0; uCounter < number && uCounter < this->available;
 801d59c:	2300      	movs	r3, #0
 801d59e:	75fb      	strb	r3, [r7, #23]
 801d5a0:	e01b      	b.n	801d5da <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x6a>
			buffer[uCounter] = this->buffer[this->start];
 801d5a2:	68fb      	ldr	r3, [r7, #12]
 801d5a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801d5a8:	4619      	mov	r1, r3
 801d5aa:	7dfb      	ldrb	r3, [r7, #23]
 801d5ac:	68ba      	ldr	r2, [r7, #8]
 801d5ae:	4413      	add	r3, r2
 801d5b0:	68fa      	ldr	r2, [r7, #12]
 801d5b2:	5c52      	ldrb	r2, [r2, r1]
 801d5b4:	701a      	strb	r2, [r3, #0]
			this->start = (this->start + 1) % size;
 801d5b6:	68fb      	ldr	r3, [r7, #12]
 801d5b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801d5bc:	3301      	adds	r3, #1
 801d5be:	425a      	negs	r2, r3
 801d5c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d5c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801d5c8:	bf58      	it	pl
 801d5ca:	4253      	negpl	r3, r2
 801d5cc:	b2da      	uxtb	r2, r3
 801d5ce:	68fb      	ldr	r3, [r7, #12]
 801d5d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
		for (uCounter = 0; uCounter < number && uCounter < this->available;
 801d5d4:	7dfb      	ldrb	r3, [r7, #23]
 801d5d6:	3301      	adds	r3, #1
 801d5d8:	75fb      	strb	r3, [r7, #23]
 801d5da:	7dfa      	ldrb	r2, [r7, #23]
 801d5dc:	79fb      	ldrb	r3, [r7, #7]
 801d5de:	429a      	cmp	r2, r3
 801d5e0:	d205      	bcs.n	801d5ee <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x7e>
 801d5e2:	68fb      	ldr	r3, [r7, #12]
 801d5e4:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 801d5e8:	7dfa      	ldrb	r2, [r7, #23]
 801d5ea:	429a      	cmp	r2, r3
 801d5ec:	d3d9      	bcc.n	801d5a2 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x32>
		this->available = this->available - uCounter;
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 801d5f4:	7dfb      	ldrb	r3, [r7, #23]
 801d5f6:	1ad3      	subs	r3, r2, r3
 801d5f8:	b2da      	uxtb	r2, r3
 801d5fa:	68fb      	ldr	r3, [r7, #12]
 801d5fc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		this->overflow = false;
 801d600:	68fb      	ldr	r3, [r7, #12]
 801d602:	2200      	movs	r2, #0
 801d604:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
		this->clear();
 801d608:	68f8      	ldr	r0, [r7, #12]
 801d60a:	f7ff ff85 	bl	801d518 <_ZN21core_utils_RingBufferILi128EE5clearEv>
		return uCounter;
 801d60e:	7dfb      	ldrb	r3, [r7, #23]
	}
 801d610:	4618      	mov	r0, r3
 801d612:	3718      	adds	r7, #24
 801d614:	46bd      	mov	sp, r7
 801d616:	bd80      	pop	{r7, pc}

0801d618 <_ZN23core_comm_SerialMessage6copyToEPS_>:
 *      Author: Dustin Lehmann
 */

#include "core_comm_SerialProtocol.h"

void core_comm_SerialMessage::copyTo(core_comm_SerialMessage *msg) {
 801d618:	b480      	push	{r7}
 801d61a:	b085      	sub	sp, #20
 801d61c:	af00      	add	r7, sp, #0
 801d61e:	6078      	str	r0, [r7, #4]
 801d620:	6039      	str	r1, [r7, #0]
	msg->address_1 = this->address_1;
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	785a      	ldrb	r2, [r3, #1]
 801d626:	683b      	ldr	r3, [r7, #0]
 801d628:	705a      	strb	r2, [r3, #1]
	msg->address_2 = this->address_2;
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	789a      	ldrb	r2, [r3, #2]
 801d62e:	683b      	ldr	r3, [r7, #0]
 801d630:	709a      	strb	r2, [r3, #2]
	msg->address_3 = this->address_3;
 801d632:	687b      	ldr	r3, [r7, #4]
 801d634:	78da      	ldrb	r2, [r3, #3]
 801d636:	683b      	ldr	r3, [r7, #0]
 801d638:	70da      	strb	r2, [r3, #3]
	msg->cmd = this->cmd;
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	781a      	ldrb	r2, [r3, #0]
 801d63e:	683b      	ldr	r3, [r7, #0]
 801d640:	701a      	strb	r2, [r3, #0]
	msg->len = this->len;
 801d642:	687b      	ldr	r3, [r7, #4]
 801d644:	899a      	ldrh	r2, [r3, #12]
 801d646:	683b      	ldr	r3, [r7, #0]
 801d648:	819a      	strh	r2, [r3, #12]

	for (int i = 0; i < len; i++) {
 801d64a:	2300      	movs	r3, #0
 801d64c:	60fb      	str	r3, [r7, #12]
 801d64e:	e00c      	b.n	801d66a <_ZN23core_comm_SerialMessage6copyToEPS_+0x52>
		msg->data_ptr[i] = this->data_ptr[i];
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	689a      	ldr	r2, [r3, #8]
 801d654:	68fb      	ldr	r3, [r7, #12]
 801d656:	441a      	add	r2, r3
 801d658:	683b      	ldr	r3, [r7, #0]
 801d65a:	6899      	ldr	r1, [r3, #8]
 801d65c:	68fb      	ldr	r3, [r7, #12]
 801d65e:	440b      	add	r3, r1
 801d660:	7812      	ldrb	r2, [r2, #0]
 801d662:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 801d664:	68fb      	ldr	r3, [r7, #12]
 801d666:	3301      	adds	r3, #1
 801d668:	60fb      	str	r3, [r7, #12]
 801d66a:	687b      	ldr	r3, [r7, #4]
 801d66c:	899b      	ldrh	r3, [r3, #12]
 801d66e:	461a      	mov	r2, r3
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	4293      	cmp	r3, r2
 801d674:	dbec      	blt.n	801d650 <_ZN23core_comm_SerialMessage6copyToEPS_+0x38>
	}
}
 801d676:	bf00      	nop
 801d678:	bf00      	nop
 801d67a:	3714      	adds	r7, #20
 801d67c:	46bd      	mov	sp, r7
 801d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d682:	4770      	bx	lr

0801d684 <_ZN23core_comm_SerialMessage6encodeEPh>:

uint8_t core_comm_SerialMessage::encode(uint8_t *buffer) {
 801d684:	b480      	push	{r7}
 801d686:	b085      	sub	sp, #20
 801d688:	af00      	add	r7, sp, #0
 801d68a:	6078      	str	r0, [r7, #4]
 801d68c:	6039      	str	r1, [r7, #0]
	buffer[0] = CORE_SERIAL_MESSAGE_HEADER;
 801d68e:	683b      	ldr	r3, [r7, #0]
 801d690:	2255      	movs	r2, #85	; 0x55
 801d692:	701a      	strb	r2, [r3, #0]
	buffer[1] = this->cmd;
 801d694:	683b      	ldr	r3, [r7, #0]
 801d696:	3301      	adds	r3, #1
 801d698:	687a      	ldr	r2, [r7, #4]
 801d69a:	7812      	ldrb	r2, [r2, #0]
 801d69c:	701a      	strb	r2, [r3, #0]
	buffer[2] = this->address_1;
 801d69e:	683b      	ldr	r3, [r7, #0]
 801d6a0:	3302      	adds	r3, #2
 801d6a2:	687a      	ldr	r2, [r7, #4]
 801d6a4:	7852      	ldrb	r2, [r2, #1]
 801d6a6:	701a      	strb	r2, [r3, #0]
	buffer[3] = this->address_2;
 801d6a8:	683b      	ldr	r3, [r7, #0]
 801d6aa:	3303      	adds	r3, #3
 801d6ac:	687a      	ldr	r2, [r7, #4]
 801d6ae:	7892      	ldrb	r2, [r2, #2]
 801d6b0:	701a      	strb	r2, [r3, #0]
	buffer[4] = this->address_3;
 801d6b2:	683b      	ldr	r3, [r7, #0]
 801d6b4:	3304      	adds	r3, #4
 801d6b6:	687a      	ldr	r2, [r7, #4]
 801d6b8:	78d2      	ldrb	r2, [r2, #3]
 801d6ba:	701a      	strb	r2, [r3, #0]
	buffer[5] = this->flag;
 801d6bc:	683b      	ldr	r3, [r7, #0]
 801d6be:	3305      	adds	r3, #5
 801d6c0:	687a      	ldr	r2, [r7, #4]
 801d6c2:	7912      	ldrb	r2, [r2, #4]
 801d6c4:	701a      	strb	r2, [r3, #0]
	buffer[6] = this->len >> 8;
 801d6c6:	687b      	ldr	r3, [r7, #4]
 801d6c8:	899b      	ldrh	r3, [r3, #12]
 801d6ca:	0a1b      	lsrs	r3, r3, #8
 801d6cc:	b29a      	uxth	r2, r3
 801d6ce:	683b      	ldr	r3, [r7, #0]
 801d6d0:	3306      	adds	r3, #6
 801d6d2:	b2d2      	uxtb	r2, r2
 801d6d4:	701a      	strb	r2, [r3, #0]
	buffer[7] = this->len & 0xFF;
 801d6d6:	687b      	ldr	r3, [r7, #4]
 801d6d8:	899a      	ldrh	r2, [r3, #12]
 801d6da:	683b      	ldr	r3, [r7, #0]
 801d6dc:	3307      	adds	r3, #7
 801d6de:	b2d2      	uxtb	r2, r2
 801d6e0:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < this->len; i++) {
 801d6e2:	2300      	movs	r3, #0
 801d6e4:	73fb      	strb	r3, [r7, #15]
 801d6e6:	e00d      	b.n	801d704 <_ZN23core_comm_SerialMessage6encodeEPh+0x80>
		buffer[8 + i] = this->data_ptr[i];
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	689a      	ldr	r2, [r3, #8]
 801d6ec:	7bfb      	ldrb	r3, [r7, #15]
 801d6ee:	441a      	add	r2, r3
 801d6f0:	7bfb      	ldrb	r3, [r7, #15]
 801d6f2:	3308      	adds	r3, #8
 801d6f4:	4619      	mov	r1, r3
 801d6f6:	683b      	ldr	r3, [r7, #0]
 801d6f8:	440b      	add	r3, r1
 801d6fa:	7812      	ldrb	r2, [r2, #0]
 801d6fc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < this->len; i++) {
 801d6fe:	7bfb      	ldrb	r3, [r7, #15]
 801d700:	3301      	adds	r3, #1
 801d702:	73fb      	strb	r3, [r7, #15]
 801d704:	7bfb      	ldrb	r3, [r7, #15]
 801d706:	687a      	ldr	r2, [r7, #4]
 801d708:	8992      	ldrh	r2, [r2, #12]
 801d70a:	4293      	cmp	r3, r2
 801d70c:	dbec      	blt.n	801d6e8 <_ZN23core_comm_SerialMessage6encodeEPh+0x64>
	}
	buffer[8 + this->len] = 0; // CRC8
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	899b      	ldrh	r3, [r3, #12]
 801d712:	3308      	adds	r3, #8
 801d714:	461a      	mov	r2, r3
 801d716:	683b      	ldr	r3, [r7, #0]
 801d718:	4413      	add	r3, r2
 801d71a:	2200      	movs	r2, #0
 801d71c:	701a      	strb	r2, [r3, #0]
	return CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD + this->len;
 801d71e:	687b      	ldr	r3, [r7, #4]
 801d720:	899b      	ldrh	r3, [r3, #12]
 801d722:	b2db      	uxtb	r3, r3
 801d724:	3309      	adds	r3, #9
 801d726:	b2db      	uxtb	r3, r3
//	CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD + this->len;
}
 801d728:	4618      	mov	r0, r3
 801d72a:	3714      	adds	r7, #20
 801d72c:	46bd      	mov	sp, r7
 801d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d732:	4770      	bx	lr

0801d734 <_ZN23core_comm_SerialMessage5checkEPht>:
	}
	buffer->data_ptr[8 + this->len] = 0; // CRC8
	buffer->len = this->len;
}

uint8_t core_comm_SerialMessage::check(uint8_t *buffer, uint16_t len) {
 801d734:	b580      	push	{r7, lr}
 801d736:	b086      	sub	sp, #24
 801d738:	af00      	add	r7, sp, #0
 801d73a:	60f8      	str	r0, [r7, #12]
 801d73c:	60b9      	str	r1, [r7, #8]
 801d73e:	4613      	mov	r3, r2
 801d740:	80fb      	strh	r3, [r7, #6]

	if (len < CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD) {
 801d742:	88fb      	ldrh	r3, [r7, #6]
 801d744:	2b08      	cmp	r3, #8
 801d746:	d801      	bhi.n	801d74c <_ZN23core_comm_SerialMessage5checkEPht+0x18>
		return CORE_ERROR;
 801d748:	2300      	movs	r3, #0
 801d74a:	e019      	b.n	801d780 <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
	}

	/* Check for the header */
	if (!(buffer[0] == CORE_SERIAL_MESSAGE_HEADER)) {
 801d74c:	68bb      	ldr	r3, [r7, #8]
 801d74e:	781b      	ldrb	r3, [r3, #0]
 801d750:	2b55      	cmp	r3, #85	; 0x55
 801d752:	d001      	beq.n	801d758 <_ZN23core_comm_SerialMessage5checkEPht+0x24>
		return CORE_ERROR;
 801d754:	2300      	movs	r3, #0
 801d756:	e013      	b.n	801d780 <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
//		return CORE_ERROR;
//	}

	/* Extract the data length */
	// Check if the data length matches with the length of the message
	uint16_t data_len = uint8_to_uint16(buffer[6], buffer[7]);
 801d758:	68bb      	ldr	r3, [r7, #8]
 801d75a:	3306      	adds	r3, #6
 801d75c:	781a      	ldrb	r2, [r3, #0]
 801d75e:	68bb      	ldr	r3, [r7, #8]
 801d760:	3307      	adds	r3, #7
 801d762:	781b      	ldrb	r3, [r3, #0]
 801d764:	4619      	mov	r1, r3
 801d766:	4610      	mov	r0, r2
 801d768:	f003 fa54 	bl	8020c14 <_Z15uint8_to_uint16hh>
 801d76c:	4603      	mov	r3, r0
 801d76e:	82fb      	strh	r3, [r7, #22]
	if ((len - data_len) == CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD) {
 801d770:	88fa      	ldrh	r2, [r7, #6]
 801d772:	8afb      	ldrh	r3, [r7, #22]
 801d774:	1ad3      	subs	r3, r2, r3
 801d776:	2b09      	cmp	r3, #9
 801d778:	d001      	beq.n	801d77e <_ZN23core_comm_SerialMessage5checkEPht+0x4a>
	} else {
		return CORE_ERROR;
 801d77a:	2300      	movs	r3, #0
 801d77c:	e000      	b.n	801d780 <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
	}

	return CORE_OK;
 801d77e:	2301      	movs	r3, #1

}
 801d780:	4618      	mov	r0, r3
 801d782:	3718      	adds	r7, #24
 801d784:	46bd      	mov	sp, r7
 801d786:	bd80      	pop	{r7, pc}

0801d788 <_ZN23core_comm_SerialMessage6decodeEPht>:
uint8_t core_comm_SerialMessage::check(Buffer *buffer) {
	return this->check(buffer->data_ptr, buffer->len);
}

uint8_t core_comm_SerialMessage::decode(uint8_t *buffer, uint16_t len) {
 801d788:	b580      	push	{r7, lr}
 801d78a:	b086      	sub	sp, #24
 801d78c:	af00      	add	r7, sp, #0
 801d78e:	60f8      	str	r0, [r7, #12]
 801d790:	60b9      	str	r1, [r7, #8]
 801d792:	4613      	mov	r3, r2
 801d794:	80fb      	strh	r3, [r7, #6]
	if (this->check(buffer, len) == CORE_ERROR) {
 801d796:	88fb      	ldrh	r3, [r7, #6]
 801d798:	461a      	mov	r2, r3
 801d79a:	68b9      	ldr	r1, [r7, #8]
 801d79c:	68f8      	ldr	r0, [r7, #12]
 801d79e:	f7ff ffc9 	bl	801d734 <_ZN23core_comm_SerialMessage5checkEPht>
 801d7a2:	4603      	mov	r3, r0
 801d7a4:	2b00      	cmp	r3, #0
 801d7a6:	bf0c      	ite	eq
 801d7a8:	2301      	moveq	r3, #1
 801d7aa:	2300      	movne	r3, #0
 801d7ac:	b2db      	uxtb	r3, r3
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	d001      	beq.n	801d7b6 <_ZN23core_comm_SerialMessage6decodeEPht+0x2e>
		return CORE_ERROR;
 801d7b2:	2300      	movs	r3, #0
 801d7b4:	e037      	b.n	801d826 <_ZN23core_comm_SerialMessage6decodeEPht+0x9e>
	}

	/* Extract the command */
	this->cmd = buffer[1];
 801d7b6:	68bb      	ldr	r3, [r7, #8]
 801d7b8:	785a      	ldrb	r2, [r3, #1]
 801d7ba:	68fb      	ldr	r3, [r7, #12]
 801d7bc:	701a      	strb	r2, [r3, #0]

	/* Extract the address */
	this->address_1 = buffer[2];
 801d7be:	68bb      	ldr	r3, [r7, #8]
 801d7c0:	789a      	ldrb	r2, [r3, #2]
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	705a      	strb	r2, [r3, #1]
	this->address_2 = buffer[3];
 801d7c6:	68bb      	ldr	r3, [r7, #8]
 801d7c8:	78da      	ldrb	r2, [r3, #3]
 801d7ca:	68fb      	ldr	r3, [r7, #12]
 801d7cc:	709a      	strb	r2, [r3, #2]
	this->address_3 = buffer[4];
 801d7ce:	68bb      	ldr	r3, [r7, #8]
 801d7d0:	791a      	ldrb	r2, [r3, #4]
 801d7d2:	68fb      	ldr	r3, [r7, #12]
 801d7d4:	70da      	strb	r2, [r3, #3]

	/* Flag */
	this->flag = buffer[5];
 801d7d6:	68bb      	ldr	r3, [r7, #8]
 801d7d8:	795a      	ldrb	r2, [r3, #5]
 801d7da:	68fb      	ldr	r3, [r7, #12]
 801d7dc:	711a      	strb	r2, [r3, #4]

	/* Extract the data length */
	this->len = uint8_to_uint16(buffer[6], buffer[7]);
 801d7de:	68bb      	ldr	r3, [r7, #8]
 801d7e0:	3306      	adds	r3, #6
 801d7e2:	781a      	ldrb	r2, [r3, #0]
 801d7e4:	68bb      	ldr	r3, [r7, #8]
 801d7e6:	3307      	adds	r3, #7
 801d7e8:	781b      	ldrb	r3, [r3, #0]
 801d7ea:	4619      	mov	r1, r3
 801d7ec:	4610      	mov	r0, r2
 801d7ee:	f003 fa11 	bl	8020c14 <_Z15uint8_to_uint16hh>
 801d7f2:	4603      	mov	r3, r0
 801d7f4:	461a      	mov	r2, r3
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	819a      	strh	r2, [r3, #12]

	/* Extract the data */
	for (uint8_t i = 0; i < this->len; i++) {
 801d7fa:	2300      	movs	r3, #0
 801d7fc:	75fb      	strb	r3, [r7, #23]
 801d7fe:	e00c      	b.n	801d81a <_ZN23core_comm_SerialMessage6decodeEPht+0x92>
		this->data_ptr[i] = buffer[i + 8];
 801d800:	7dfb      	ldrb	r3, [r7, #23]
 801d802:	3308      	adds	r3, #8
 801d804:	68ba      	ldr	r2, [r7, #8]
 801d806:	441a      	add	r2, r3
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	6899      	ldr	r1, [r3, #8]
 801d80c:	7dfb      	ldrb	r3, [r7, #23]
 801d80e:	440b      	add	r3, r1
 801d810:	7812      	ldrb	r2, [r2, #0]
 801d812:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < this->len; i++) {
 801d814:	7dfb      	ldrb	r3, [r7, #23]
 801d816:	3301      	adds	r3, #1
 801d818:	75fb      	strb	r3, [r7, #23]
 801d81a:	7dfb      	ldrb	r3, [r7, #23]
 801d81c:	68fa      	ldr	r2, [r7, #12]
 801d81e:	8992      	ldrh	r2, [r2, #12]
 801d820:	4293      	cmp	r3, r2
 801d822:	dbed      	blt.n	801d800 <_ZN23core_comm_SerialMessage6decodeEPht+0x78>
	}

	return CORE_OK;
 801d824:	2301      	movs	r3, #1
}
 801d826:	4618      	mov	r0, r3
 801d828:	3718      	adds	r7, #24
 801d82a:	46bd      	mov	sp, r7
 801d82c:	bd80      	pop	{r7, pc}

0801d82e <_ZN23core_comm_SerialMessage6decodeEP6Buffer>:

uint8_t core_comm_SerialMessage::decode(Buffer *buffer) {
 801d82e:	b580      	push	{r7, lr}
 801d830:	b082      	sub	sp, #8
 801d832:	af00      	add	r7, sp, #0
 801d834:	6078      	str	r0, [r7, #4]
 801d836:	6039      	str	r1, [r7, #0]
	return this->decode(buffer->data_ptr, buffer->len);
 801d838:	683b      	ldr	r3, [r7, #0]
 801d83a:	6819      	ldr	r1, [r3, #0]
 801d83c:	683b      	ldr	r3, [r7, #0]
 801d83e:	889b      	ldrh	r3, [r3, #4]
 801d840:	461a      	mov	r2, r3
 801d842:	6878      	ldr	r0, [r7, #4]
 801d844:	f7ff ffa0 	bl	801d788 <_ZN23core_comm_SerialMessage6decodeEPht>
 801d848:	4603      	mov	r3, r0
}
 801d84a:	4618      	mov	r0, r3
 801d84c:	3708      	adds	r7, #8
 801d84e:	46bd      	mov	sp, r7
 801d850:	bd80      	pop	{r7, pc}

0801d852 <_Z32core_comm_SerialSocket_RTOS_TaskPv>:

core_comm_UartInterface_config_t std_uart_config = { .uart =
		std_hardware_uart_config, .use_protocol = 1, .use_queue = 1 };

/* ============================================================================= */
void core_comm_SerialSocket_RTOS_Task(void *SerialSocket) {
 801d852:	b5b0      	push	{r4, r5, r7, lr}
 801d854:	b084      	sub	sp, #16
 801d856:	af00      	add	r7, sp, #0
 801d858:	6078      	str	r0, [r7, #4]
	UartInterface *socket = (UartInterface*) SerialSocket;
 801d85a:	687b      	ldr	r3, [r7, #4]
 801d85c:	60fb      	str	r3, [r7, #12]

// Get the task handle and save it in the RTOS structure for later notifying this task
	socket->setTaskID(xTaskGetCurrentTaskHandle());
 801d85e:	68fd      	ldr	r5, [r7, #12]
 801d860:	68fb      	ldr	r3, [r7, #12]
 801d862:	681b      	ldr	r3, [r3, #0]
 801d864:	3304      	adds	r3, #4
 801d866:	681c      	ldr	r4, [r3, #0]
 801d868:	f7f4 fcde 	bl	8012228 <xTaskGetCurrentTaskHandle>
 801d86c:	4603      	mov	r3, r0
 801d86e:	4619      	mov	r1, r3
 801d870:	4628      	mov	r0, r5
 801d872:	47a0      	blx	r4

	while (!socket->exit) {
 801d874:	e00d      	b.n	801d892 <_Z32core_comm_SerialSocket_RTOS_TaskPv+0x40>

		// TODO: this is now waiting only for receiving a notification, but maybe we want to do other things
		uint32_t ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 801d876:	f04f 31ff 	mov.w	r1, #4294967295
 801d87a:	2001      	movs	r0, #1
 801d87c:	f7f4 fe6e 	bl	801255c <ulTaskNotifyTake>
 801d880:	60b8      	str	r0, [r7, #8]
		if (ulNotificationValue) {
 801d882:	68bb      	ldr	r3, [r7, #8]
 801d884:	2b00      	cmp	r3, #0
 801d886:	d004      	beq.n	801d892 <_Z32core_comm_SerialSocket_RTOS_TaskPv+0x40>
			socket->rx_function();
 801d888:	68fb      	ldr	r3, [r7, #12]
 801d88a:	681b      	ldr	r3, [r3, #0]
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	68f8      	ldr	r0, [r7, #12]
 801d890:	4798      	blx	r3
	while (!socket->exit) {
 801d892:	68fb      	ldr	r3, [r7, #12]
 801d894:	791b      	ldrb	r3, [r3, #4]
 801d896:	2b00      	cmp	r3, #0
 801d898:	d0ed      	beq.n	801d876 <_Z32core_comm_SerialSocket_RTOS_TaskPv+0x24>
		}

	}
	vTaskDelete(socket->getTaskID());
 801d89a:	68fb      	ldr	r3, [r7, #12]
 801d89c:	681b      	ldr	r3, [r3, #0]
 801d89e:	3308      	adds	r3, #8
 801d8a0:	681b      	ldr	r3, [r3, #0]
 801d8a2:	68f8      	ldr	r0, [r7, #12]
 801d8a4:	4798      	blx	r3
 801d8a6:	4603      	mov	r3, r0
 801d8a8:	4618      	mov	r0, r3
 801d8aa:	f7f3 ff2b 	bl	8011704 <vTaskDelete>
}
 801d8ae:	bf00      	nop
 801d8b0:	3710      	adds	r7, #16
 801d8b2:	46bd      	mov	sp, r7
 801d8b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801d8b8 <_Z41__static_initialization_and_destruction_0ii>:
 801d8b8:	b480      	push	{r7}
 801d8ba:	b083      	sub	sp, #12
 801d8bc:	af00      	add	r7, sp, #0
 801d8be:	6078      	str	r0, [r7, #4]
 801d8c0:	6039      	str	r1, [r7, #0]
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	2b01      	cmp	r3, #1
 801d8c6:	d108      	bne.n	801d8da <_Z41__static_initialization_and_destruction_0ii+0x22>
 801d8c8:	683b      	ldr	r3, [r7, #0]
 801d8ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d8ce:	4293      	cmp	r3, r2
 801d8d0:	d103      	bne.n	801d8da <_Z41__static_initialization_and_destruction_0ii+0x22>
		std_hardware_uart_config, .use_protocol = 1, .use_queue = 1 };
 801d8d2:	4a05      	ldr	r2, [pc, #20]	; (801d8e8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801d8d4:	4b05      	ldr	r3, [pc, #20]	; (801d8ec <_Z41__static_initialization_and_destruction_0ii+0x34>)
 801d8d6:	681b      	ldr	r3, [r3, #0]
 801d8d8:	6013      	str	r3, [r2, #0]
}
 801d8da:	bf00      	nop
 801d8dc:	370c      	adds	r7, #12
 801d8de:	46bd      	mov	sp, r7
 801d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8e4:	4770      	bx	lr
 801d8e6:	bf00      	nop
 801d8e8:	24000054 	.word	0x24000054
 801d8ec:	24000050 	.word	0x24000050

0801d8f0 <_GLOBAL__sub_I_std_hardware_uart_config>:
 801d8f0:	b580      	push	{r7, lr}
 801d8f2:	af00      	add	r7, sp, #0
 801d8f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d8f8:	2001      	movs	r0, #1
 801d8fa:	f7ff ffdd 	bl	801d8b8 <_Z41__static_initialization_and_destruction_0ii>
 801d8fe:	bd80      	pop	{r7, pc}

0801d900 <_ZNSt14numeric_limitsIdE7epsilonEv>:
      static _GLIBCXX_USE_CONSTEXPR bool is_integer = false;
      static _GLIBCXX_USE_CONSTEXPR bool is_exact = false;
      static _GLIBCXX_USE_CONSTEXPR int radix = __FLT_RADIX__;

      static _GLIBCXX_CONSTEXPR double
      epsilon() _GLIBCXX_USE_NOEXCEPT { return __DBL_EPSILON__; }
 801d900:	b480      	push	{r7}
 801d902:	af00      	add	r7, sp, #0
 801d904:	f04f 0200 	mov.w	r2, #0
 801d908:	4b04      	ldr	r3, [pc, #16]	; (801d91c <_ZNSt14numeric_limitsIdE7epsilonEv+0x1c>)
 801d90a:	ec43 2b17 	vmov	d7, r2, r3
 801d90e:	eeb0 0b47 	vmov.f64	d0, d7
 801d912:	46bd      	mov	sp, r7
 801d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d918:	4770      	bx	lr
 801d91a:	bf00      	nop
 801d91c:	3cb00000 	.word	0x3cb00000

0801d920 <_ZNSt14numeric_limitsIdE9quiet_NaNEv>:

      static _GLIBCXX_CONSTEXPR double
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_val(); }

      static _GLIBCXX_CONSTEXPR double
      quiet_NaN() _GLIBCXX_USE_NOEXCEPT { return __builtin_nan(""); }
 801d920:	b480      	push	{r7}
 801d922:	af00      	add	r7, sp, #0
 801d924:	f04f 0200 	mov.w	r2, #0
 801d928:	4b04      	ldr	r3, [pc, #16]	; (801d93c <_ZNSt14numeric_limitsIdE9quiet_NaNEv+0x1c>)
 801d92a:	ec43 2b17 	vmov	d7, r2, r3
 801d92e:	eeb0 0b47 	vmov.f64	d0, d7
 801d932:	46bd      	mov	sp, r7
 801d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d938:	4770      	bx	lr
 801d93a:	bf00      	nop
 801d93c:	7ff80000 	.word	0x7ff80000

0801d940 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 801d940:	b480      	push	{r7}
 801d942:	b083      	sub	sp, #12
 801d944:	af00      	add	r7, sp, #0
 801d946:	ed87 0b00 	vstr	d0, [r7]
 801d94a:	ed97 6b00 	vldr	d6, [r7]
 801d94e:	ed97 7b00 	vldr	d7, [r7]
 801d952:	eeb4 6b47 	vcmp.f64	d6, d7
 801d956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d95a:	bf6c      	ite	vs
 801d95c:	2301      	movvs	r3, #1
 801d95e:	2300      	movvc	r3, #0
 801d960:	b2db      	uxtb	r3, r3
 801d962:	2b00      	cmp	r3, #0
 801d964:	bf14      	ite	ne
 801d966:	2301      	movne	r3, #1
 801d968:	2300      	moveq	r3, #0
 801d96a:	b2db      	uxtb	r3, r3
 801d96c:	4618      	mov	r0, r3
 801d96e:	370c      	adds	r7, #12
 801d970:	46bd      	mov	sp, r7
 801d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d976:	4770      	bx	lr

0801d978 <_ZN14BasicVQFParamsC1Ev>:
#define EPS std::numeric_limits<vqf_real_t>::epsilon()
#define NaN std::numeric_limits<vqf_real_t>::quiet_NaN()

inline vqf_real_t square(vqf_real_t x) { return x*x; }

BasicVQFParams::BasicVQFParams()
 801d978:	b480      	push	{r7}
 801d97a:	b083      	sub	sp, #12
 801d97c:	af00      	add	r7, sp, #0
 801d97e:	6078      	str	r0, [r7, #4]
    : tauAcc(3.0)
 801d980:	6879      	ldr	r1, [r7, #4]
 801d982:	f04f 0200 	mov.w	r2, #0
 801d986:	4b08      	ldr	r3, [pc, #32]	; (801d9a8 <_ZN14BasicVQFParamsC1Ev+0x30>)
 801d988:	e9c1 2300 	strd	r2, r3, [r1]
    , tauMag(9.0)
 801d98c:	6879      	ldr	r1, [r7, #4]
 801d98e:	f04f 0200 	mov.w	r2, #0
 801d992:	4b06      	ldr	r3, [pc, #24]	; (801d9ac <_ZN14BasicVQFParamsC1Ev+0x34>)
 801d994:	e9c1 2302 	strd	r2, r3, [r1, #8]
{

}
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	4618      	mov	r0, r3
 801d99c:	370c      	adds	r7, #12
 801d99e:	46bd      	mov	sp, r7
 801d9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9a4:	4770      	bx	lr
 801d9a6:	bf00      	nop
 801d9a8:	40080000 	.word	0x40080000
 801d9ac:	40220000 	.word	0x40220000

0801d9b0 <_ZN8BasicVQFC1Eddd>:

BasicVQF::BasicVQF(vqf_real_t gyrTs, vqf_real_t accTs, vqf_real_t magTs)
 801d9b0:	b580      	push	{r7, lr}
 801d9b2:	b088      	sub	sp, #32
 801d9b4:	af00      	add	r7, sp, #0
 801d9b6:	61f8      	str	r0, [r7, #28]
 801d9b8:	ed87 0b04 	vstr	d0, [r7, #16]
 801d9bc:	ed87 1b02 	vstr	d1, [r7, #8]
 801d9c0:	ed87 2b00 	vstr	d2, [r7]
 801d9c4:	69fb      	ldr	r3, [r7, #28]
 801d9c6:	4618      	mov	r0, r3
 801d9c8:	f7ff ffd6 	bl	801d978 <_ZN14BasicVQFParamsC1Ev>
{
    coeffs.gyrTs = gyrTs;
 801d9cc:	69f9      	ldr	r1, [r7, #28]
 801d9ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801d9d2:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
    coeffs.accTs = accTs > 0 ? accTs : gyrTs;
 801d9d6:	ed97 7b02 	vldr	d7, [r7, #8]
 801d9da:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801d9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d9e2:	dd02      	ble.n	801d9ea <_ZN8BasicVQFC1Eddd+0x3a>
 801d9e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801d9e8:	e001      	b.n	801d9ee <_ZN8BasicVQFC1Eddd+0x3e>
 801d9ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801d9ee:	69f9      	ldr	r1, [r7, #28]
 801d9f0:	e9c1 232c 	strd	r2, r3, [r1, #176]	; 0xb0
    coeffs.magTs = magTs > 0 ? magTs : gyrTs;
 801d9f4:	ed97 7b00 	vldr	d7, [r7]
 801d9f8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801d9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da00:	dd02      	ble.n	801da08 <_ZN8BasicVQFC1Eddd+0x58>
 801da02:	e9d7 2300 	ldrd	r2, r3, [r7]
 801da06:	e001      	b.n	801da0c <_ZN8BasicVQFC1Eddd+0x5c>
 801da08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801da0c:	69f9      	ldr	r1, [r7, #28]
 801da0e:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8

    setup();
 801da12:	69f8      	ldr	r0, [r7, #28]
 801da14:	f000 ffa0 	bl	801e958 <_ZN8BasicVQF5setupEv>
}
 801da18:	69fb      	ldr	r3, [r7, #28]
 801da1a:	4618      	mov	r0, r3
 801da1c:	3720      	adds	r7, #32
 801da1e:	46bd      	mov	sp, r7
 801da20:	bd80      	pop	{r7, pc}

0801da22 <_ZN8BasicVQF9updateGyrEPKd>:

    setup();
}

void BasicVQF::updateGyr(const vqf_real_t gyr[3])
{
 801da22:	b580      	push	{r7, lr}
 801da24:	b092      	sub	sp, #72	; 0x48
 801da26:	af00      	add	r7, sp, #0
 801da28:	6078      	str	r0, [r7, #4]
 801da2a:	6039      	str	r1, [r7, #0]
    // gyroscope prediction step
    vqf_real_t gyrNorm = norm(gyr, 3);
 801da2c:	2103      	movs	r1, #3
 801da2e:	6838      	ldr	r0, [r7, #0]
 801da30:	f000 fc48 	bl	801e2c4 <_ZN8BasicVQF4normEPKdj>
 801da34:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    vqf_real_t angle = gyrNorm * coeffs.gyrTs;
 801da38:	687b      	ldr	r3, [r7, #4]
 801da3a:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 801da3e:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 801da42:	ee26 7b07 	vmul.f64	d7, d6, d7
 801da46:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    if (gyrNorm > EPS) {
 801da4a:	f7ff ff59 	bl	801d900 <_ZNSt14numeric_limitsIdE7epsilonEv>
 801da4e:	eeb0 6b40 	vmov.f64	d6, d0
 801da52:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 801da56:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801da5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da5e:	bfcc      	ite	gt
 801da60:	2301      	movgt	r3, #1
 801da62:	2300      	movle	r3, #0
 801da64:	b2db      	uxtb	r3, r3
 801da66:	2b00      	cmp	r3, #0
 801da68:	d04f      	beq.n	801db0a <_ZN8BasicVQF9updateGyrEPKd+0xe8>
        vqf_real_t c = cos(angle/2);
 801da6a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 801da6e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801da72:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801da76:	eeb0 0b46 	vmov.f64	d0, d6
 801da7a:	f003 fc15 	bl	80212a8 <cos>
 801da7e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
        vqf_real_t s = sin(angle/2)/gyrNorm;
 801da82:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 801da86:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801da8a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801da8e:	eeb0 0b46 	vmov.f64	d0, d6
 801da92:	f003 fc61 	bl	8021358 <sin>
 801da96:	eeb0 5b40 	vmov.f64	d5, d0
 801da9a:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 801da9e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801daa2:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
        vqf_real_t gyrStepQuat[4] = {c, s*gyr[0], s*gyr[1], s*gyr[2]};
 801daa6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801daaa:	e9c7 2302 	strd	r2, r3, [r7, #8]
 801daae:	683b      	ldr	r3, [r7, #0]
 801dab0:	ed93 6b00 	vldr	d6, [r3]
 801dab4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 801dab8:	ee26 7b07 	vmul.f64	d7, d6, d7
 801dabc:	ed87 7b04 	vstr	d7, [r7, #16]
 801dac0:	683b      	ldr	r3, [r7, #0]
 801dac2:	3308      	adds	r3, #8
 801dac4:	ed93 6b00 	vldr	d6, [r3]
 801dac8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 801dacc:	ee26 7b07 	vmul.f64	d7, d6, d7
 801dad0:	ed87 7b06 	vstr	d7, [r7, #24]
 801dad4:	683b      	ldr	r3, [r7, #0]
 801dad6:	3310      	adds	r3, #16
 801dad8:	ed93 6b00 	vldr	d6, [r3]
 801dadc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 801dae0:	ee26 7b07 	vmul.f64	d7, d6, d7
 801dae4:	ed87 7b08 	vstr	d7, [r7, #32]
        quatMultiply(state.gyrQuat, gyrStepQuat, state.gyrQuat);
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	f103 0010 	add.w	r0, r3, #16
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	f103 0210 	add.w	r2, r3, #16
 801daf4:	f107 0308 	add.w	r3, r7, #8
 801daf8:	4619      	mov	r1, r3
 801dafa:	f000 f98f 	bl	801de1c <_ZN8BasicVQF12quatMultiplyEPKdS1_Pd>
        normalize(state.gyrQuat, 4);
 801dafe:	687b      	ldr	r3, [r7, #4]
 801db00:	3310      	adds	r3, #16
 801db02:	2104      	movs	r1, #4
 801db04:	4618      	mov	r0, r3
 801db06:	f000 fc11 	bl	801e32c <_ZN8BasicVQF9normalizeEPdj>
    }
}
 801db0a:	bf00      	nop
 801db0c:	3748      	adds	r7, #72	; 0x48
 801db0e:	46bd      	mov	sp, r7
 801db10:	bd80      	pop	{r7, pc}
 801db12:	0000      	movs	r0, r0
 801db14:	0000      	movs	r0, r0
	...

0801db18 <_ZN8BasicVQF9updateAccEPKd>:

void BasicVQF::updateAcc(const vqf_real_t acc[3])
{
 801db18:	b590      	push	{r4, r7, lr}
 801db1a:	b095      	sub	sp, #84	; 0x54
 801db1c:	af02      	add	r7, sp, #8
 801db1e:	6078      	str	r0, [r7, #4]
 801db20:	6039      	str	r1, [r7, #0]
    // ignore [0 0 0] samples
    if (acc[0] == vqf_real_t(0.0) && acc[1] == vqf_real_t(0.0) && acc[2] == vqf_real_t(0.0)) {
 801db22:	683b      	ldr	r3, [r7, #0]
 801db24:	ed93 7b00 	vldr	d7, [r3]
 801db28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801db2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db30:	d112      	bne.n	801db58 <_ZN8BasicVQF9updateAccEPKd+0x40>
 801db32:	683b      	ldr	r3, [r7, #0]
 801db34:	3308      	adds	r3, #8
 801db36:	ed93 7b00 	vldr	d7, [r3]
 801db3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801db3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db42:	d109      	bne.n	801db58 <_ZN8BasicVQF9updateAccEPKd+0x40>
 801db44:	683b      	ldr	r3, [r7, #0]
 801db46:	3310      	adds	r3, #16
 801db48:	ed93 7b00 	vldr	d7, [r3]
 801db4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801db50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801db54:	f000 809a 	beq.w	801dc8c <_ZN8BasicVQF9updateAccEPKd+0x174>
    }

    vqf_real_t accEarth[3];

    // filter acc in inertial frame
    quatRotate(state.gyrQuat, acc, accEarth);
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	3310      	adds	r3, #16
 801db5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801db60:	6839      	ldr	r1, [r7, #0]
 801db62:	4618      	mov	r0, r3
 801db64:	f000 fa66 	bl	801e034 <_ZN8BasicVQF10quatRotateEPKdS1_Pd>
    filterVec(accEarth, 3, params.tauAcc, coeffs.accTs, coeffs.accLpB, coeffs.accLpA, state.accLpState, state.lastAccLp);
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	ed93 7b00 	vldr	d7, [r3]
 801db6e:	687b      	ldr	r3, [r7, #4]
 801db70:	ed93 6b2c 	vldr	d6, [r3, #176]	; 0xb0
 801db74:	687b      	ldr	r3, [r7, #4]
 801db76:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 801db7a:	687b      	ldr	r3, [r7, #4]
 801db7c:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	3370      	adds	r3, #112	; 0x70
 801db84:	687a      	ldr	r2, [r7, #4]
 801db86:	3258      	adds	r2, #88	; 0x58
 801db88:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801db8c:	9201      	str	r2, [sp, #4]
 801db8e:	9300      	str	r3, [sp, #0]
 801db90:	4623      	mov	r3, r4
 801db92:	460a      	mov	r2, r1
 801db94:	eeb0 1b46 	vmov.f64	d1, d6
 801db98:	eeb0 0b47 	vmov.f64	d0, d7
 801db9c:	2103      	movs	r1, #3
 801db9e:	f000 fdfd 	bl	801e79c <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_>

    // transform to 6D earth frame and normalize
    quatRotate(state.accQuat, state.lastAccLp, accEarth);
 801dba2:	687b      	ldr	r3, [r7, #4]
 801dba4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	3358      	adds	r3, #88	; 0x58
 801dbac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801dbb0:	4619      	mov	r1, r3
 801dbb2:	f000 fa3f 	bl	801e034 <_ZN8BasicVQF10quatRotateEPKdS1_Pd>
    normalize(accEarth, 3);
 801dbb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dbba:	2103      	movs	r1, #3
 801dbbc:	4618      	mov	r0, r3
 801dbbe:	f000 fbb5 	bl	801e32c <_ZN8BasicVQF9normalizeEPdj>

    // inclination correction
    vqf_real_t accCorrQuat[4];
    vqf_real_t q_w = sqrt((accEarth[2]+1)/2);
 801dbc2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 801dbc6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801dbca:	ee37 7b06 	vadd.f64	d7, d7, d6
 801dbce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801dbd2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801dbd6:	eeb0 0b46 	vmov.f64	d0, d6
 801dbda:	f003 fb45 	bl	8021268 <sqrt>
 801dbde:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
    if (q_w > 1e-6) {
 801dbe2:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 801dbe6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 801dc98 <_ZN8BasicVQF9updateAccEPKd+0x180>
 801dbea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801dbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dbf2:	dd22      	ble.n	801dc3a <_ZN8BasicVQF9updateAccEPKd+0x122>
        accCorrQuat[0] = q_w;
 801dbf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801dbf8:	e9c7 2302 	strd	r2, r3, [r7, #8]
        accCorrQuat[1] = 0.5*accEarth[1]/q_w;
 801dbfc:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 801dc00:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801dc04:	ee27 5b06 	vmul.f64	d5, d7, d6
 801dc08:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 801dc0c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801dc10:	ed87 7b04 	vstr	d7, [r7, #16]
        accCorrQuat[2] = -0.5*accEarth[0]/q_w;
 801dc14:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 801dc18:	eebe 6b00 	vmov.f64	d6, #224	; 0xbf000000 -0.5
 801dc1c:	ee27 5b06 	vmul.f64	d5, d7, d6
 801dc20:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 801dc24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801dc28:	ed87 7b06 	vstr	d7, [r7, #24]
        accCorrQuat[3] = 0;
 801dc2c:	f04f 0200 	mov.w	r2, #0
 801dc30:	f04f 0300 	mov.w	r3, #0
 801dc34:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801dc38:	e016      	b.n	801dc68 <_ZN8BasicVQF9updateAccEPKd+0x150>
    } else {
        // to avoid numeric issues when acc is close to [0 0 -1], i.e. the correction step is close (<= 0.00011°) to 180°:
        accCorrQuat[0] = 0;
 801dc3a:	f04f 0200 	mov.w	r2, #0
 801dc3e:	f04f 0300 	mov.w	r3, #0
 801dc42:	e9c7 2302 	strd	r2, r3, [r7, #8]
        accCorrQuat[1] = 1;
 801dc46:	f04f 0200 	mov.w	r2, #0
 801dc4a:	4b15      	ldr	r3, [pc, #84]	; (801dca0 <_ZN8BasicVQF9updateAccEPKd+0x188>)
 801dc4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
        accCorrQuat[2] = 0;
 801dc50:	f04f 0200 	mov.w	r2, #0
 801dc54:	f04f 0300 	mov.w	r3, #0
 801dc58:	e9c7 2306 	strd	r2, r3, [r7, #24]
        accCorrQuat[3] = 0;
 801dc5c:	f04f 0200 	mov.w	r2, #0
 801dc60:	f04f 0300 	mov.w	r3, #0
 801dc64:	e9c7 2308 	strd	r2, r3, [r7, #32]
    }
    quatMultiply(accCorrQuat, state.accQuat, state.accQuat);
 801dc68:	687b      	ldr	r3, [r7, #4]
 801dc6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801dc74:	f107 0308 	add.w	r3, r7, #8
 801dc78:	4618      	mov	r0, r3
 801dc7a:	f000 f8cf 	bl	801de1c <_ZN8BasicVQF12quatMultiplyEPKdS1_Pd>
    normalize(state.accQuat, 4);
 801dc7e:	687b      	ldr	r3, [r7, #4]
 801dc80:	3330      	adds	r3, #48	; 0x30
 801dc82:	2104      	movs	r1, #4
 801dc84:	4618      	mov	r0, r3
 801dc86:	f000 fb51 	bl	801e32c <_ZN8BasicVQF9normalizeEPdj>
 801dc8a:	e000      	b.n	801dc8e <_ZN8BasicVQF9updateAccEPKd+0x176>
        return;
 801dc8c:	bf00      	nop
}
 801dc8e:	374c      	adds	r7, #76	; 0x4c
 801dc90:	46bd      	mov	sp, r7
 801dc92:	bd90      	pop	{r4, r7, pc}
 801dc94:	f3af 8000 	nop.w
 801dc98:	a0b5ed8d 	.word	0xa0b5ed8d
 801dc9c:	3eb0c6f7 	.word	0x3eb0c6f7
 801dca0:	3ff00000 	.word	0x3ff00000

0801dca4 <_ZN8BasicVQF6updateEPKdS1_>:
        state.delta += vqf_real_t(2*M_PI);
    }
}

void BasicVQF::update(const vqf_real_t gyr[3], const vqf_real_t acc[3])
{
 801dca4:	b580      	push	{r7, lr}
 801dca6:	b084      	sub	sp, #16
 801dca8:	af00      	add	r7, sp, #0
 801dcaa:	60f8      	str	r0, [r7, #12]
 801dcac:	60b9      	str	r1, [r7, #8]
 801dcae:	607a      	str	r2, [r7, #4]
    updateGyr(gyr);
 801dcb0:	68b9      	ldr	r1, [r7, #8]
 801dcb2:	68f8      	ldr	r0, [r7, #12]
 801dcb4:	f7ff feb5 	bl	801da22 <_ZN8BasicVQF9updateGyrEPKd>
    updateAcc(acc);
 801dcb8:	6879      	ldr	r1, [r7, #4]
 801dcba:	68f8      	ldr	r0, [r7, #12]
 801dcbc:	f7ff ff2c 	bl	801db18 <_ZN8BasicVQF9updateAccEPKd>
}
 801dcc0:	bf00      	nop
 801dcc2:	3710      	adds	r7, #16
 801dcc4:	46bd      	mov	sp, r7
 801dcc6:	bd80      	pop	{r7, pc}

0801dcc8 <_ZNK8BasicVQF9getQuat6DEPd>:
{
    std::copy(state.gyrQuat, state.gyrQuat+4, out);
}

void BasicVQF::getQuat6D(vqf_real_t out[4]) const
{
 801dcc8:	b580      	push	{r7, lr}
 801dcca:	b082      	sub	sp, #8
 801dccc:	af00      	add	r7, sp, #0
 801dcce:	6078      	str	r0, [r7, #4]
 801dcd0:	6039      	str	r1, [r7, #0]
    quatMultiply(state.accQuat, state.gyrQuat, out);
 801dcd2:	687b      	ldr	r3, [r7, #4]
 801dcd4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	3310      	adds	r3, #16
 801dcdc:	683a      	ldr	r2, [r7, #0]
 801dcde:	4619      	mov	r1, r3
 801dce0:	f000 f89c 	bl	801de1c <_ZN8BasicVQF12quatMultiplyEPKdS1_Pd>
}
 801dce4:	bf00      	nop
 801dce6:	3708      	adds	r7, #8
 801dce8:	46bd      	mov	sp, r7
 801dcea:	bd80      	pop	{r7, pc}

0801dcec <_ZN8BasicVQF9setTauAccEd>:
{
    return state.delta;
}

void BasicVQF::setTauAcc(vqf_real_t tauAcc)
{
 801dcec:	b580      	push	{r7, lr}
 801dcee:	b094      	sub	sp, #80	; 0x50
 801dcf0:	af04      	add	r7, sp, #16
 801dcf2:	60f8      	str	r0, [r7, #12]
 801dcf4:	ed87 0b00 	vstr	d0, [r7]
    if (params.tauAcc == tauAcc) {
 801dcf8:	68fb      	ldr	r3, [r7, #12]
 801dcfa:	ed93 7b00 	vldr	d7, [r3]
 801dcfe:	ed97 6b00 	vldr	d6, [r7]
 801dd02:	eeb4 6b47 	vcmp.f64	d6, d7
 801dd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dd0a:	d041      	beq.n	801dd90 <_ZN8BasicVQF9setTauAccEd+0xa4>
        return;
    }
    params.tauAcc = tauAcc;
 801dd0c:	68f9      	ldr	r1, [r7, #12]
 801dd0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801dd12:	e9c1 2300 	strd	r2, r3, [r1]
    double newB[3];
    double newA[3];

    filterCoeffs(params.tauAcc, coeffs.accTs, newB, newA);
 801dd16:	68fb      	ldr	r3, [r7, #12]
 801dd18:	ed93 7b00 	vldr	d7, [r3]
 801dd1c:	68fb      	ldr	r3, [r7, #12]
 801dd1e:	ed93 6b2c 	vldr	d6, [r3, #176]	; 0xb0
 801dd22:	f107 0210 	add.w	r2, r7, #16
 801dd26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dd2a:	4611      	mov	r1, r2
 801dd2c:	4618      	mov	r0, r3
 801dd2e:	eeb0 1b46 	vmov.f64	d1, d6
 801dd32:	eeb0 0b47 	vmov.f64	d0, d7
 801dd36:	f000 fb93 	bl	801e460 <_ZN8BasicVQF12filterCoeffsEddPdS0_>
    filterAdaptStateForCoeffChange(state.lastAccLp, 3, coeffs.accLpB, coeffs.accLpA, newB, newA, state.accLpState);
 801dd3a:	68fb      	ldr	r3, [r7, #12]
 801dd3c:	f103 0058 	add.w	r0, r3, #88	; 0x58
 801dd40:	68fb      	ldr	r3, [r7, #12]
 801dd42:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 801dd46:	68fb      	ldr	r3, [r7, #12]
 801dd48:	f103 01d8 	add.w	r1, r3, #216	; 0xd8
 801dd4c:	68fb      	ldr	r3, [r7, #12]
 801dd4e:	3370      	adds	r3, #112	; 0x70
 801dd50:	9302      	str	r3, [sp, #8]
 801dd52:	f107 0310 	add.w	r3, r7, #16
 801dd56:	9301      	str	r3, [sp, #4]
 801dd58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dd5c:	9300      	str	r3, [sp, #0]
 801dd5e:	460b      	mov	r3, r1
 801dd60:	2103      	movs	r1, #3
 801dd62:	f000 fc5f 	bl	801e624 <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_>

    std::copy(newB, newB+3, coeffs.accLpB);
 801dd66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801dd6a:	3318      	adds	r3, #24
 801dd6c:	68fa      	ldr	r2, [r7, #12]
 801dd6e:	32c0      	adds	r2, #192	; 0xc0
 801dd70:	f107 0028 	add.w	r0, r7, #40	; 0x28
 801dd74:	4619      	mov	r1, r3
 801dd76:	f000 fe55 	bl	801ea24 <_ZSt4copyIPdS0_ET0_T_S2_S1_>
    std::copy(newA, newA+2, coeffs.accLpA);
 801dd7a:	f107 0310 	add.w	r3, r7, #16
 801dd7e:	3310      	adds	r3, #16
 801dd80:	68fa      	ldr	r2, [r7, #12]
 801dd82:	32d8      	adds	r2, #216	; 0xd8
 801dd84:	f107 0010 	add.w	r0, r7, #16
 801dd88:	4619      	mov	r1, r3
 801dd8a:	f000 fe4b 	bl	801ea24 <_ZSt4copyIPdS0_ET0_T_S2_S1_>
 801dd8e:	e000      	b.n	801dd92 <_ZN8BasicVQF9setTauAccEd+0xa6>
        return;
 801dd90:	bf00      	nop
}
 801dd92:	3740      	adds	r7, #64	; 0x40
 801dd94:	46bd      	mov	sp, r7
 801dd96:	bd80      	pop	{r7, pc}

0801dd98 <_ZN8BasicVQF10resetStateEv>:
{
    this->state = state;
}

void BasicVQF::resetState()
{
 801dd98:	b5b0      	push	{r4, r5, r7, lr}
 801dd9a:	b086      	sub	sp, #24
 801dd9c:	af00      	add	r7, sp, #0
 801dd9e:	6078      	str	r0, [r7, #4]
    quatSetToIdentity(state.gyrQuat);
 801dda0:	687b      	ldr	r3, [r7, #4]
 801dda2:	3310      	adds	r3, #16
 801dda4:	4618      	mov	r0, r3
 801dda6:	f000 f917 	bl	801dfd8 <_ZN8BasicVQF17quatSetToIdentityEPd>
    quatSetToIdentity(state.accQuat);
 801ddaa:	687b      	ldr	r3, [r7, #4]
 801ddac:	3330      	adds	r3, #48	; 0x30
 801ddae:	4618      	mov	r0, r3
 801ddb0:	f000 f912 	bl	801dfd8 <_ZN8BasicVQF17quatSetToIdentityEPd>
    state.delta = 0.0;
 801ddb4:	6879      	ldr	r1, [r7, #4]
 801ddb6:	f04f 0200 	mov.w	r2, #0
 801ddba:	f04f 0300 	mov.w	r3, #0
 801ddbe:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

    std::fill(state.lastAccLp, state.lastAccLp+3, 0);
 801ddc2:	687b      	ldr	r3, [r7, #4]
 801ddc4:	f103 0058 	add.w	r0, r3, #88	; 0x58
 801ddc8:	687b      	ldr	r3, [r7, #4]
 801ddca:	3358      	adds	r3, #88	; 0x58
 801ddcc:	3318      	adds	r3, #24
 801ddce:	2200      	movs	r2, #0
 801ddd0:	60fa      	str	r2, [r7, #12]
 801ddd2:	f107 020c 	add.w	r2, r7, #12
 801ddd6:	4619      	mov	r1, r3
 801ddd8:	f000 fe3c 	bl	801ea54 <_ZSt4fillIPdiEvT_S1_RKT0_>
    std::fill(state.accLpState, state.accLpState + 3*2, NaN);
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	3370      	adds	r3, #112	; 0x70
 801dde6:	f103 0530 	add.w	r5, r3, #48	; 0x30
 801ddea:	f7ff fd99 	bl	801d920 <_ZNSt14numeric_limitsIdE9quiet_NaNEv>
 801ddee:	eeb0 7b40 	vmov.f64	d7, d0
 801ddf2:	ed87 7b04 	vstr	d7, [r7, #16]
 801ddf6:	f107 0310 	add.w	r3, r7, #16
 801ddfa:	461a      	mov	r2, r3
 801ddfc:	4629      	mov	r1, r5
 801ddfe:	4620      	mov	r0, r4
 801de00:	f000 fe37 	bl	801ea72 <_ZSt4fillIPddEvT_S1_RKT0_>

    state.kMagInit = 1.0;
 801de04:	6879      	ldr	r1, [r7, #4]
 801de06:	f04f 0200 	mov.w	r2, #0
 801de0a:	4b03      	ldr	r3, [pc, #12]	; (801de18 <_ZN8BasicVQF10resetStateEv+0x80>)
 801de0c:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
}
 801de10:	bf00      	nop
 801de12:	3718      	adds	r7, #24
 801de14:	46bd      	mov	sp, r7
 801de16:	bdb0      	pop	{r4, r5, r7, pc}
 801de18:	3ff00000 	.word	0x3ff00000

0801de1c <_ZN8BasicVQF12quatMultiplyEPKdS1_Pd>:

void BasicVQF::quatMultiply(const vqf_real_t q1[4], const vqf_real_t q2[4], vqf_real_t out[4])
{
 801de1c:	b480      	push	{r7}
 801de1e:	b08d      	sub	sp, #52	; 0x34
 801de20:	af00      	add	r7, sp, #0
 801de22:	60f8      	str	r0, [r7, #12]
 801de24:	60b9      	str	r1, [r7, #8]
 801de26:	607a      	str	r2, [r7, #4]
    vqf_real_t w = q1[0] * q2[0] - q1[1] * q2[1] - q1[2] * q2[2] - q1[3] * q2[3];
 801de28:	68fb      	ldr	r3, [r7, #12]
 801de2a:	ed93 6b00 	vldr	d6, [r3]
 801de2e:	68bb      	ldr	r3, [r7, #8]
 801de30:	ed93 7b00 	vldr	d7, [r3]
 801de34:	ee26 6b07 	vmul.f64	d6, d6, d7
 801de38:	68fb      	ldr	r3, [r7, #12]
 801de3a:	3308      	adds	r3, #8
 801de3c:	ed93 5b00 	vldr	d5, [r3]
 801de40:	68bb      	ldr	r3, [r7, #8]
 801de42:	3308      	adds	r3, #8
 801de44:	ed93 7b00 	vldr	d7, [r3]
 801de48:	ee25 7b07 	vmul.f64	d7, d5, d7
 801de4c:	ee36 6b47 	vsub.f64	d6, d6, d7
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	3310      	adds	r3, #16
 801de54:	ed93 5b00 	vldr	d5, [r3]
 801de58:	68bb      	ldr	r3, [r7, #8]
 801de5a:	3310      	adds	r3, #16
 801de5c:	ed93 7b00 	vldr	d7, [r3]
 801de60:	ee25 7b07 	vmul.f64	d7, d5, d7
 801de64:	ee36 6b47 	vsub.f64	d6, d6, d7
 801de68:	68fb      	ldr	r3, [r7, #12]
 801de6a:	3318      	adds	r3, #24
 801de6c:	ed93 5b00 	vldr	d5, [r3]
 801de70:	68bb      	ldr	r3, [r7, #8]
 801de72:	3318      	adds	r3, #24
 801de74:	ed93 7b00 	vldr	d7, [r3]
 801de78:	ee25 7b07 	vmul.f64	d7, d5, d7
 801de7c:	ee36 7b47 	vsub.f64	d7, d6, d7
 801de80:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    vqf_real_t x = q1[0] * q2[1] + q1[1] * q2[0] + q1[2] * q2[3] - q1[3] * q2[2];
 801de84:	68fb      	ldr	r3, [r7, #12]
 801de86:	ed93 6b00 	vldr	d6, [r3]
 801de8a:	68bb      	ldr	r3, [r7, #8]
 801de8c:	3308      	adds	r3, #8
 801de8e:	ed93 7b00 	vldr	d7, [r3]
 801de92:	ee26 6b07 	vmul.f64	d6, d6, d7
 801de96:	68fb      	ldr	r3, [r7, #12]
 801de98:	3308      	adds	r3, #8
 801de9a:	ed93 5b00 	vldr	d5, [r3]
 801de9e:	68bb      	ldr	r3, [r7, #8]
 801dea0:	ed93 7b00 	vldr	d7, [r3]
 801dea4:	ee25 7b07 	vmul.f64	d7, d5, d7
 801dea8:	ee36 6b07 	vadd.f64	d6, d6, d7
 801deac:	68fb      	ldr	r3, [r7, #12]
 801deae:	3310      	adds	r3, #16
 801deb0:	ed93 5b00 	vldr	d5, [r3]
 801deb4:	68bb      	ldr	r3, [r7, #8]
 801deb6:	3318      	adds	r3, #24
 801deb8:	ed93 7b00 	vldr	d7, [r3]
 801debc:	ee25 7b07 	vmul.f64	d7, d5, d7
 801dec0:	ee36 6b07 	vadd.f64	d6, d6, d7
 801dec4:	68fb      	ldr	r3, [r7, #12]
 801dec6:	3318      	adds	r3, #24
 801dec8:	ed93 5b00 	vldr	d5, [r3]
 801decc:	68bb      	ldr	r3, [r7, #8]
 801dece:	3310      	adds	r3, #16
 801ded0:	ed93 7b00 	vldr	d7, [r3]
 801ded4:	ee25 7b07 	vmul.f64	d7, d5, d7
 801ded8:	ee36 7b47 	vsub.f64	d7, d6, d7
 801dedc:	ed87 7b08 	vstr	d7, [r7, #32]
    vqf_real_t y = q1[0] * q2[2] - q1[1] * q2[3] + q1[2] * q2[0] + q1[3] * q2[1];
 801dee0:	68fb      	ldr	r3, [r7, #12]
 801dee2:	ed93 6b00 	vldr	d6, [r3]
 801dee6:	68bb      	ldr	r3, [r7, #8]
 801dee8:	3310      	adds	r3, #16
 801deea:	ed93 7b00 	vldr	d7, [r3]
 801deee:	ee26 6b07 	vmul.f64	d6, d6, d7
 801def2:	68fb      	ldr	r3, [r7, #12]
 801def4:	3308      	adds	r3, #8
 801def6:	ed93 5b00 	vldr	d5, [r3]
 801defa:	68bb      	ldr	r3, [r7, #8]
 801defc:	3318      	adds	r3, #24
 801defe:	ed93 7b00 	vldr	d7, [r3]
 801df02:	ee25 7b07 	vmul.f64	d7, d5, d7
 801df06:	ee36 6b47 	vsub.f64	d6, d6, d7
 801df0a:	68fb      	ldr	r3, [r7, #12]
 801df0c:	3310      	adds	r3, #16
 801df0e:	ed93 5b00 	vldr	d5, [r3]
 801df12:	68bb      	ldr	r3, [r7, #8]
 801df14:	ed93 7b00 	vldr	d7, [r3]
 801df18:	ee25 7b07 	vmul.f64	d7, d5, d7
 801df1c:	ee36 6b07 	vadd.f64	d6, d6, d7
 801df20:	68fb      	ldr	r3, [r7, #12]
 801df22:	3318      	adds	r3, #24
 801df24:	ed93 5b00 	vldr	d5, [r3]
 801df28:	68bb      	ldr	r3, [r7, #8]
 801df2a:	3308      	adds	r3, #8
 801df2c:	ed93 7b00 	vldr	d7, [r3]
 801df30:	ee25 7b07 	vmul.f64	d7, d5, d7
 801df34:	ee36 7b07 	vadd.f64	d7, d6, d7
 801df38:	ed87 7b06 	vstr	d7, [r7, #24]
    vqf_real_t z = q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1] + q1[3] * q2[0];
 801df3c:	68fb      	ldr	r3, [r7, #12]
 801df3e:	ed93 6b00 	vldr	d6, [r3]
 801df42:	68bb      	ldr	r3, [r7, #8]
 801df44:	3318      	adds	r3, #24
 801df46:	ed93 7b00 	vldr	d7, [r3]
 801df4a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801df4e:	68fb      	ldr	r3, [r7, #12]
 801df50:	3308      	adds	r3, #8
 801df52:	ed93 5b00 	vldr	d5, [r3]
 801df56:	68bb      	ldr	r3, [r7, #8]
 801df58:	3310      	adds	r3, #16
 801df5a:	ed93 7b00 	vldr	d7, [r3]
 801df5e:	ee25 7b07 	vmul.f64	d7, d5, d7
 801df62:	ee36 6b07 	vadd.f64	d6, d6, d7
 801df66:	68fb      	ldr	r3, [r7, #12]
 801df68:	3310      	adds	r3, #16
 801df6a:	ed93 5b00 	vldr	d5, [r3]
 801df6e:	68bb      	ldr	r3, [r7, #8]
 801df70:	3308      	adds	r3, #8
 801df72:	ed93 7b00 	vldr	d7, [r3]
 801df76:	ee25 7b07 	vmul.f64	d7, d5, d7
 801df7a:	ee36 6b47 	vsub.f64	d6, d6, d7
 801df7e:	68fb      	ldr	r3, [r7, #12]
 801df80:	3318      	adds	r3, #24
 801df82:	ed93 5b00 	vldr	d5, [r3]
 801df86:	68bb      	ldr	r3, [r7, #8]
 801df88:	ed93 7b00 	vldr	d7, [r3]
 801df8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 801df90:	ee36 7b07 	vadd.f64	d7, d6, d7
 801df94:	ed87 7b04 	vstr	d7, [r7, #16]
    out[0] = w; out[1] = x; out[2] = y; out[3] = z;
 801df98:	6879      	ldr	r1, [r7, #4]
 801df9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801df9e:	e9c1 2300 	strd	r2, r3, [r1]
 801dfa2:	687b      	ldr	r3, [r7, #4]
 801dfa4:	f103 0108 	add.w	r1, r3, #8
 801dfa8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801dfac:	e9c1 2300 	strd	r2, r3, [r1]
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	f103 0110 	add.w	r1, r3, #16
 801dfb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801dfba:	e9c1 2300 	strd	r2, r3, [r1]
 801dfbe:	687b      	ldr	r3, [r7, #4]
 801dfc0:	f103 0118 	add.w	r1, r3, #24
 801dfc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801dfc8:	e9c1 2300 	strd	r2, r3, [r1]
}
 801dfcc:	bf00      	nop
 801dfce:	3734      	adds	r7, #52	; 0x34
 801dfd0:	46bd      	mov	sp, r7
 801dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfd6:	4770      	bx	lr

0801dfd8 <_ZN8BasicVQF17quatSetToIdentityEPd>:
    out[0] = w; out[1] = x; out[2] = y; out[3] = z;
}


void BasicVQF::quatSetToIdentity(vqf_real_t out[4])
{
 801dfd8:	b480      	push	{r7}
 801dfda:	b083      	sub	sp, #12
 801dfdc:	af00      	add	r7, sp, #0
 801dfde:	6078      	str	r0, [r7, #4]
    out[0] = 1;
 801dfe0:	6879      	ldr	r1, [r7, #4]
 801dfe2:	f04f 0200 	mov.w	r2, #0
 801dfe6:	4b12      	ldr	r3, [pc, #72]	; (801e030 <_ZN8BasicVQF17quatSetToIdentityEPd+0x58>)
 801dfe8:	e9c1 2300 	strd	r2, r3, [r1]
    out[1] = 0;
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	f103 0108 	add.w	r1, r3, #8
 801dff2:	f04f 0200 	mov.w	r2, #0
 801dff6:	f04f 0300 	mov.w	r3, #0
 801dffa:	e9c1 2300 	strd	r2, r3, [r1]
    out[2] = 0;
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	f103 0110 	add.w	r1, r3, #16
 801e004:	f04f 0200 	mov.w	r2, #0
 801e008:	f04f 0300 	mov.w	r3, #0
 801e00c:	e9c1 2300 	strd	r2, r3, [r1]
    out[3] = 0;
 801e010:	687b      	ldr	r3, [r7, #4]
 801e012:	f103 0118 	add.w	r1, r3, #24
 801e016:	f04f 0200 	mov.w	r2, #0
 801e01a:	f04f 0300 	mov.w	r3, #0
 801e01e:	e9c1 2300 	strd	r2, r3, [r1]
}
 801e022:	bf00      	nop
 801e024:	370c      	adds	r7, #12
 801e026:	46bd      	mov	sp, r7
 801e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e02c:	4770      	bx	lr
 801e02e:	bf00      	nop
 801e030:	3ff00000 	.word	0x3ff00000

0801e034 <_ZN8BasicVQF10quatRotateEPKdS1_Pd>:
    vqf_real_t z = c * q[3] + s * q[0];
    out[0] = w; out[1] = x; out[2] = y; out[3] = z;
}

void BasicVQF::quatRotate(const vqf_real_t q[4], const vqf_real_t v[3], vqf_real_t out[3])
{
 801e034:	b480      	push	{r7}
 801e036:	b08b      	sub	sp, #44	; 0x2c
 801e038:	af00      	add	r7, sp, #0
 801e03a:	60f8      	str	r0, [r7, #12]
 801e03c:	60b9      	str	r1, [r7, #8]
 801e03e:	607a      	str	r2, [r7, #4]
    vqf_real_t x = (1 - 2*q[2]*q[2] - 2*q[3]*q[3])*v[0] + 2*v[1]*(q[2]*q[1] - q[0]*q[3]) + 2*v[2]*(q[0]*q[2] + q[3]*q[1]);
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	3310      	adds	r3, #16
 801e044:	ed93 7b00 	vldr	d7, [r3]
 801e048:	ee37 6b07 	vadd.f64	d6, d7, d7
 801e04c:	68fb      	ldr	r3, [r7, #12]
 801e04e:	3310      	adds	r3, #16
 801e050:	ed93 7b00 	vldr	d7, [r3]
 801e054:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e058:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e05c:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e060:	68fb      	ldr	r3, [r7, #12]
 801e062:	3318      	adds	r3, #24
 801e064:	ed93 7b00 	vldr	d7, [r3]
 801e068:	ee37 5b07 	vadd.f64	d5, d7, d7
 801e06c:	68fb      	ldr	r3, [r7, #12]
 801e06e:	3318      	adds	r3, #24
 801e070:	ed93 7b00 	vldr	d7, [r3]
 801e074:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e078:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e07c:	68bb      	ldr	r3, [r7, #8]
 801e07e:	ed93 7b00 	vldr	d7, [r3]
 801e082:	ee26 6b07 	vmul.f64	d6, d6, d7
 801e086:	68bb      	ldr	r3, [r7, #8]
 801e088:	3308      	adds	r3, #8
 801e08a:	ed93 7b00 	vldr	d7, [r3]
 801e08e:	ee37 5b07 	vadd.f64	d5, d7, d7
 801e092:	68fb      	ldr	r3, [r7, #12]
 801e094:	3310      	adds	r3, #16
 801e096:	ed93 4b00 	vldr	d4, [r3]
 801e09a:	68fb      	ldr	r3, [r7, #12]
 801e09c:	3308      	adds	r3, #8
 801e09e:	ed93 7b00 	vldr	d7, [r3]
 801e0a2:	ee24 4b07 	vmul.f64	d4, d4, d7
 801e0a6:	68fb      	ldr	r3, [r7, #12]
 801e0a8:	ed93 3b00 	vldr	d3, [r3]
 801e0ac:	68fb      	ldr	r3, [r7, #12]
 801e0ae:	3318      	adds	r3, #24
 801e0b0:	ed93 7b00 	vldr	d7, [r3]
 801e0b4:	ee23 7b07 	vmul.f64	d7, d3, d7
 801e0b8:	ee34 7b47 	vsub.f64	d7, d4, d7
 801e0bc:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e0c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e0c4:	68bb      	ldr	r3, [r7, #8]
 801e0c6:	3310      	adds	r3, #16
 801e0c8:	ed93 7b00 	vldr	d7, [r3]
 801e0cc:	ee37 5b07 	vadd.f64	d5, d7, d7
 801e0d0:	68fb      	ldr	r3, [r7, #12]
 801e0d2:	ed93 4b00 	vldr	d4, [r3]
 801e0d6:	68fb      	ldr	r3, [r7, #12]
 801e0d8:	3310      	adds	r3, #16
 801e0da:	ed93 7b00 	vldr	d7, [r3]
 801e0de:	ee24 4b07 	vmul.f64	d4, d4, d7
 801e0e2:	68fb      	ldr	r3, [r7, #12]
 801e0e4:	3318      	adds	r3, #24
 801e0e6:	ed93 3b00 	vldr	d3, [r3]
 801e0ea:	68fb      	ldr	r3, [r7, #12]
 801e0ec:	3308      	adds	r3, #8
 801e0ee:	ed93 7b00 	vldr	d7, [r3]
 801e0f2:	ee23 7b07 	vmul.f64	d7, d3, d7
 801e0f6:	ee34 7b07 	vadd.f64	d7, d4, d7
 801e0fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e0fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e102:	ed87 7b08 	vstr	d7, [r7, #32]
    vqf_real_t y = 2*v[0]*(q[0]*q[3] + q[2]*q[1]) + v[1]*(1 - 2*q[1]*q[1] - 2*q[3]*q[3]) + 2*v[2]*(q[2]*q[3] - q[1]*q[0]);
 801e106:	68bb      	ldr	r3, [r7, #8]
 801e108:	ed93 7b00 	vldr	d7, [r3]
 801e10c:	ee37 6b07 	vadd.f64	d6, d7, d7
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	ed93 5b00 	vldr	d5, [r3]
 801e116:	68fb      	ldr	r3, [r7, #12]
 801e118:	3318      	adds	r3, #24
 801e11a:	ed93 7b00 	vldr	d7, [r3]
 801e11e:	ee25 5b07 	vmul.f64	d5, d5, d7
 801e122:	68fb      	ldr	r3, [r7, #12]
 801e124:	3310      	adds	r3, #16
 801e126:	ed93 4b00 	vldr	d4, [r3]
 801e12a:	68fb      	ldr	r3, [r7, #12]
 801e12c:	3308      	adds	r3, #8
 801e12e:	ed93 7b00 	vldr	d7, [r3]
 801e132:	ee24 7b07 	vmul.f64	d7, d4, d7
 801e136:	ee35 7b07 	vadd.f64	d7, d5, d7
 801e13a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801e13e:	68bb      	ldr	r3, [r7, #8]
 801e140:	3308      	adds	r3, #8
 801e142:	ed93 5b00 	vldr	d5, [r3]
 801e146:	68fb      	ldr	r3, [r7, #12]
 801e148:	3308      	adds	r3, #8
 801e14a:	ed93 7b00 	vldr	d7, [r3]
 801e14e:	ee37 4b07 	vadd.f64	d4, d7, d7
 801e152:	68fb      	ldr	r3, [r7, #12]
 801e154:	3308      	adds	r3, #8
 801e156:	ed93 7b00 	vldr	d7, [r3]
 801e15a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801e15e:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801e162:	ee34 4b47 	vsub.f64	d4, d4, d7
 801e166:	68fb      	ldr	r3, [r7, #12]
 801e168:	3318      	adds	r3, #24
 801e16a:	ed93 7b00 	vldr	d7, [r3]
 801e16e:	ee37 3b07 	vadd.f64	d3, d7, d7
 801e172:	68fb      	ldr	r3, [r7, #12]
 801e174:	3318      	adds	r3, #24
 801e176:	ed93 7b00 	vldr	d7, [r3]
 801e17a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801e17e:	ee34 7b47 	vsub.f64	d7, d4, d7
 801e182:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e186:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e18a:	68bb      	ldr	r3, [r7, #8]
 801e18c:	3310      	adds	r3, #16
 801e18e:	ed93 7b00 	vldr	d7, [r3]
 801e192:	ee37 5b07 	vadd.f64	d5, d7, d7
 801e196:	68fb      	ldr	r3, [r7, #12]
 801e198:	3310      	adds	r3, #16
 801e19a:	ed93 4b00 	vldr	d4, [r3]
 801e19e:	68fb      	ldr	r3, [r7, #12]
 801e1a0:	3318      	adds	r3, #24
 801e1a2:	ed93 7b00 	vldr	d7, [r3]
 801e1a6:	ee24 4b07 	vmul.f64	d4, d4, d7
 801e1aa:	68fb      	ldr	r3, [r7, #12]
 801e1ac:	3308      	adds	r3, #8
 801e1ae:	ed93 3b00 	vldr	d3, [r3]
 801e1b2:	68fb      	ldr	r3, [r7, #12]
 801e1b4:	ed93 7b00 	vldr	d7, [r3]
 801e1b8:	ee23 7b07 	vmul.f64	d7, d3, d7
 801e1bc:	ee34 7b47 	vsub.f64	d7, d4, d7
 801e1c0:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e1c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e1c8:	ed87 7b06 	vstr	d7, [r7, #24]
    vqf_real_t z = 2*v[0]*(q[3]*q[1] - q[0]*q[2]) + 2*v[1]*(q[0]*q[1] + q[3]*q[2]) + v[2]*(1 - 2*q[1]*q[1] - 2*q[2]*q[2]);
 801e1cc:	68bb      	ldr	r3, [r7, #8]
 801e1ce:	ed93 7b00 	vldr	d7, [r3]
 801e1d2:	ee37 6b07 	vadd.f64	d6, d7, d7
 801e1d6:	68fb      	ldr	r3, [r7, #12]
 801e1d8:	3318      	adds	r3, #24
 801e1da:	ed93 5b00 	vldr	d5, [r3]
 801e1de:	68fb      	ldr	r3, [r7, #12]
 801e1e0:	3308      	adds	r3, #8
 801e1e2:	ed93 7b00 	vldr	d7, [r3]
 801e1e6:	ee25 5b07 	vmul.f64	d5, d5, d7
 801e1ea:	68fb      	ldr	r3, [r7, #12]
 801e1ec:	ed93 4b00 	vldr	d4, [r3]
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	3310      	adds	r3, #16
 801e1f4:	ed93 7b00 	vldr	d7, [r3]
 801e1f8:	ee24 7b07 	vmul.f64	d7, d4, d7
 801e1fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 801e200:	ee26 6b07 	vmul.f64	d6, d6, d7
 801e204:	68bb      	ldr	r3, [r7, #8]
 801e206:	3308      	adds	r3, #8
 801e208:	ed93 7b00 	vldr	d7, [r3]
 801e20c:	ee37 5b07 	vadd.f64	d5, d7, d7
 801e210:	68fb      	ldr	r3, [r7, #12]
 801e212:	ed93 4b00 	vldr	d4, [r3]
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	3308      	adds	r3, #8
 801e21a:	ed93 7b00 	vldr	d7, [r3]
 801e21e:	ee24 4b07 	vmul.f64	d4, d4, d7
 801e222:	68fb      	ldr	r3, [r7, #12]
 801e224:	3318      	adds	r3, #24
 801e226:	ed93 3b00 	vldr	d3, [r3]
 801e22a:	68fb      	ldr	r3, [r7, #12]
 801e22c:	3310      	adds	r3, #16
 801e22e:	ed93 7b00 	vldr	d7, [r3]
 801e232:	ee23 7b07 	vmul.f64	d7, d3, d7
 801e236:	ee34 7b07 	vadd.f64	d7, d4, d7
 801e23a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e23e:	ee36 6b07 	vadd.f64	d6, d6, d7
 801e242:	68bb      	ldr	r3, [r7, #8]
 801e244:	3310      	adds	r3, #16
 801e246:	ed93 5b00 	vldr	d5, [r3]
 801e24a:	68fb      	ldr	r3, [r7, #12]
 801e24c:	3308      	adds	r3, #8
 801e24e:	ed93 7b00 	vldr	d7, [r3]
 801e252:	ee37 4b07 	vadd.f64	d4, d7, d7
 801e256:	68fb      	ldr	r3, [r7, #12]
 801e258:	3308      	adds	r3, #8
 801e25a:	ed93 7b00 	vldr	d7, [r3]
 801e25e:	ee24 7b07 	vmul.f64	d7, d4, d7
 801e262:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801e266:	ee34 4b47 	vsub.f64	d4, d4, d7
 801e26a:	68fb      	ldr	r3, [r7, #12]
 801e26c:	3310      	adds	r3, #16
 801e26e:	ed93 7b00 	vldr	d7, [r3]
 801e272:	ee37 3b07 	vadd.f64	d3, d7, d7
 801e276:	68fb      	ldr	r3, [r7, #12]
 801e278:	3310      	adds	r3, #16
 801e27a:	ed93 7b00 	vldr	d7, [r3]
 801e27e:	ee23 7b07 	vmul.f64	d7, d3, d7
 801e282:	ee34 7b47 	vsub.f64	d7, d4, d7
 801e286:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e28a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e28e:	ed87 7b04 	vstr	d7, [r7, #16]
    out[0] = x; out[1] = y; out[2] = z;
 801e292:	6879      	ldr	r1, [r7, #4]
 801e294:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801e298:	e9c1 2300 	strd	r2, r3, [r1]
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	f103 0108 	add.w	r1, r3, #8
 801e2a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e2a6:	e9c1 2300 	strd	r2, r3, [r1]
 801e2aa:	687b      	ldr	r3, [r7, #4]
 801e2ac:	f103 0110 	add.w	r1, r3, #16
 801e2b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801e2b4:	e9c1 2300 	strd	r2, r3, [r1]
}
 801e2b8:	bf00      	nop
 801e2ba:	372c      	adds	r7, #44	; 0x2c
 801e2bc:	46bd      	mov	sp, r7
 801e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2c2:	4770      	bx	lr

0801e2c4 <_ZN8BasicVQF4normEPKdj>:

vqf_real_t BasicVQF::norm(const vqf_real_t vec[], size_t N)
{
 801e2c4:	b580      	push	{r7, lr}
 801e2c6:	b086      	sub	sp, #24
 801e2c8:	af00      	add	r7, sp, #0
 801e2ca:	6078      	str	r0, [r7, #4]
 801e2cc:	6039      	str	r1, [r7, #0]
    vqf_real_t s = 0;
 801e2ce:	f04f 0200 	mov.w	r2, #0
 801e2d2:	f04f 0300 	mov.w	r3, #0
 801e2d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for(size_t i = 0; i < N; i++) {
 801e2da:	2300      	movs	r3, #0
 801e2dc:	60fb      	str	r3, [r7, #12]
 801e2de:	e016      	b.n	801e30e <_ZN8BasicVQF4normEPKdj+0x4a>
        s += vec[i]*vec[i];
 801e2e0:	68fb      	ldr	r3, [r7, #12]
 801e2e2:	00db      	lsls	r3, r3, #3
 801e2e4:	687a      	ldr	r2, [r7, #4]
 801e2e6:	4413      	add	r3, r2
 801e2e8:	ed93 6b00 	vldr	d6, [r3]
 801e2ec:	68fb      	ldr	r3, [r7, #12]
 801e2ee:	00db      	lsls	r3, r3, #3
 801e2f0:	687a      	ldr	r2, [r7, #4]
 801e2f2:	4413      	add	r3, r2
 801e2f4:	ed93 7b00 	vldr	d7, [r3]
 801e2f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e2fc:	ed97 6b04 	vldr	d6, [r7, #16]
 801e300:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e304:	ed87 7b04 	vstr	d7, [r7, #16]
    for(size_t i = 0; i < N; i++) {
 801e308:	68fb      	ldr	r3, [r7, #12]
 801e30a:	3301      	adds	r3, #1
 801e30c:	60fb      	str	r3, [r7, #12]
 801e30e:	68fa      	ldr	r2, [r7, #12]
 801e310:	683b      	ldr	r3, [r7, #0]
 801e312:	429a      	cmp	r2, r3
 801e314:	d3e4      	bcc.n	801e2e0 <_ZN8BasicVQF4normEPKdj+0x1c>
    }
    return sqrt(s);
 801e316:	ed97 0b04 	vldr	d0, [r7, #16]
 801e31a:	f002 ffa5 	bl	8021268 <sqrt>
 801e31e:	eeb0 7b40 	vmov.f64	d7, d0
}
 801e322:	eeb0 0b47 	vmov.f64	d0, d7
 801e326:	3718      	adds	r7, #24
 801e328:	46bd      	mov	sp, r7
 801e32a:	bd80      	pop	{r7, pc}

0801e32c <_ZN8BasicVQF9normalizeEPdj>:

void BasicVQF::normalize(vqf_real_t vec[], size_t N)
{
 801e32c:	b580      	push	{r7, lr}
 801e32e:	b086      	sub	sp, #24
 801e330:	af00      	add	r7, sp, #0
 801e332:	6078      	str	r0, [r7, #4]
 801e334:	6039      	str	r1, [r7, #0]
    vqf_real_t n = norm(vec, N);
 801e336:	6839      	ldr	r1, [r7, #0]
 801e338:	6878      	ldr	r0, [r7, #4]
 801e33a:	f7ff ffc3 	bl	801e2c4 <_ZN8BasicVQF4normEPKdj>
 801e33e:	ed87 0b02 	vstr	d0, [r7, #8]
    if (n < EPS) {
 801e342:	f7ff fadd 	bl	801d900 <_ZNSt14numeric_limitsIdE7epsilonEv>
 801e346:	eeb0 6b40 	vmov.f64	d6, d0
 801e34a:	ed97 7b02 	vldr	d7, [r7, #8]
 801e34e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801e352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e356:	bf4c      	ite	mi
 801e358:	2301      	movmi	r3, #1
 801e35a:	2300      	movpl	r3, #0
 801e35c:	b2db      	uxtb	r3, r3
 801e35e:	2b00      	cmp	r3, #0
 801e360:	d11a      	bne.n	801e398 <_ZN8BasicVQF9normalizeEPdj+0x6c>
        return;
    }
    for(size_t i = 0; i < N; i++) {
 801e362:	2300      	movs	r3, #0
 801e364:	617b      	str	r3, [r7, #20]
 801e366:	e012      	b.n	801e38e <_ZN8BasicVQF9normalizeEPdj+0x62>
        vec[i] /= n;
 801e368:	697b      	ldr	r3, [r7, #20]
 801e36a:	00db      	lsls	r3, r3, #3
 801e36c:	687a      	ldr	r2, [r7, #4]
 801e36e:	4413      	add	r3, r2
 801e370:	ed93 5b00 	vldr	d5, [r3]
 801e374:	697b      	ldr	r3, [r7, #20]
 801e376:	00db      	lsls	r3, r3, #3
 801e378:	687a      	ldr	r2, [r7, #4]
 801e37a:	4413      	add	r3, r2
 801e37c:	ed97 6b02 	vldr	d6, [r7, #8]
 801e380:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e384:	ed83 7b00 	vstr	d7, [r3]
    for(size_t i = 0; i < N; i++) {
 801e388:	697b      	ldr	r3, [r7, #20]
 801e38a:	3301      	adds	r3, #1
 801e38c:	617b      	str	r3, [r7, #20]
 801e38e:	697a      	ldr	r2, [r7, #20]
 801e390:	683b      	ldr	r3, [r7, #0]
 801e392:	429a      	cmp	r2, r3
 801e394:	d3e8      	bcc.n	801e368 <_ZN8BasicVQF9normalizeEPdj+0x3c>
 801e396:	e000      	b.n	801e39a <_ZN8BasicVQF9normalizeEPdj+0x6e>
        return;
 801e398:	bf00      	nop
    }
}
 801e39a:	3718      	adds	r7, #24
 801e39c:	46bd      	mov	sp, r7
 801e39e:	bd80      	pop	{r7, pc}

0801e3a0 <_ZN8BasicVQF11gainFromTauEdd>:
        }
    }
}

vqf_real_t BasicVQF::gainFromTau(vqf_real_t tau, vqf_real_t Ts)
{
 801e3a0:	b580      	push	{r7, lr}
 801e3a2:	b084      	sub	sp, #16
 801e3a4:	af00      	add	r7, sp, #0
 801e3a6:	ed87 0b02 	vstr	d0, [r7, #8]
 801e3aa:	ed87 1b00 	vstr	d1, [r7]
    assert(Ts > 0);
 801e3ae:	ed97 7b00 	vldr	d7, [r7]
 801e3b2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3ba:	dc06      	bgt.n	801e3ca <_ZN8BasicVQF11gainFromTauEdd+0x2a>
 801e3bc:	4b1a      	ldr	r3, [pc, #104]	; (801e428 <_ZN8BasicVQF11gainFromTauEdd+0x88>)
 801e3be:	4a1b      	ldr	r2, [pc, #108]	; (801e42c <_ZN8BasicVQF11gainFromTauEdd+0x8c>)
 801e3c0:	f240 1151 	movw	r1, #337	; 0x151
 801e3c4:	481a      	ldr	r0, [pc, #104]	; (801e430 <_ZN8BasicVQF11gainFromTauEdd+0x90>)
 801e3c6:	f004 f99b 	bl	8022700 <__assert_func>
    if (tau < vqf_real_t(0.0)) {
 801e3ca:	ed97 7b02 	vldr	d7, [r7, #8]
 801e3ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3d6:	d502      	bpl.n	801e3de <_ZN8BasicVQF11gainFromTauEdd+0x3e>
        return 0; // k=0 for negative tau (disable update)
 801e3d8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 801e420 <_ZN8BasicVQF11gainFromTauEdd+0x80>
 801e3dc:	e01b      	b.n	801e416 <_ZN8BasicVQF11gainFromTauEdd+0x76>
    } else if (tau == vqf_real_t(0.0)) {
 801e3de:	ed97 7b02 	vldr	d7, [r7, #8]
 801e3e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3ea:	d102      	bne.n	801e3f2 <_ZN8BasicVQF11gainFromTauEdd+0x52>
        return 1; // k=1 for tau=0
 801e3ec:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801e3f0:	e011      	b.n	801e416 <_ZN8BasicVQF11gainFromTauEdd+0x76>
    } else {
        return 1 - exp(-Ts/tau);  // fc = 1/(2*pi*tau)
 801e3f2:	ed97 7b00 	vldr	d7, [r7]
 801e3f6:	eeb1 6b47 	vneg.f64	d6, d7
 801e3fa:	ed97 7b02 	vldr	d7, [r7, #8]
 801e3fe:	ee86 5b07 	vdiv.f64	d5, d6, d7
 801e402:	eeb0 0b45 	vmov.f64	d0, d5
 801e406:	f003 f833 	bl	8021470 <exp>
 801e40a:	eeb0 7b40 	vmov.f64	d7, d0
 801e40e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e412:	ee36 7b47 	vsub.f64	d7, d6, d7
    }
}
 801e416:	eeb0 0b47 	vmov.f64	d0, d7
 801e41a:	3710      	adds	r7, #16
 801e41c:	46bd      	mov	sp, r7
 801e41e:	bd80      	pop	{r7, pc}
	...
 801e428:	08025160 	.word	0x08025160
 801e42c:	08025168 	.word	0x08025168
 801e430:	080251a8 	.word	0x080251a8

0801e434 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    sqrt(_Tp __x)
 801e434:	b580      	push	{r7, lr}
 801e436:	b082      	sub	sp, #8
 801e438:	af00      	add	r7, sp, #0
 801e43a:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	ee07 3a90 	vmov	s15, r3
 801e442:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e446:	eeb0 0b47 	vmov.f64	d0, d7
 801e44a:	f002 ff0d 	bl	8021268 <sqrt>
 801e44e:	eeb0 7b40 	vmov.f64	d7, d0
 801e452:	eeb0 0b47 	vmov.f64	d0, d7
 801e456:	3708      	adds	r7, #8
 801e458:	46bd      	mov	sp, r7
 801e45a:	bd80      	pop	{r7, pc}
 801e45c:	0000      	movs	r0, r0
	...

0801e460 <_ZN8BasicVQF12filterCoeffsEddPdS0_>:

void BasicVQF::filterCoeffs(vqf_real_t tau, vqf_real_t Ts, double outB[], double outA[])
{
 801e460:	b580      	push	{r7, lr}
 801e462:	ed2d 8b02 	vpush	{d8}
 801e466:	b08e      	sub	sp, #56	; 0x38
 801e468:	af00      	add	r7, sp, #0
 801e46a:	ed87 0b04 	vstr	d0, [r7, #16]
 801e46e:	ed87 1b02 	vstr	d1, [r7, #8]
 801e472:	6078      	str	r0, [r7, #4]
 801e474:	6039      	str	r1, [r7, #0]
    assert(tau > 0);
 801e476:	ed97 7b04 	vldr	d7, [r7, #16]
 801e47a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e482:	dc06      	bgt.n	801e492 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x32>
 801e484:	4b4c      	ldr	r3, [pc, #304]	; (801e5b8 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x158>)
 801e486:	4a4d      	ldr	r2, [pc, #308]	; (801e5bc <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x15c>)
 801e488:	f240 115d 	movw	r1, #349	; 0x15d
 801e48c:	484c      	ldr	r0, [pc, #304]	; (801e5c0 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x160>)
 801e48e:	f004 f937 	bl	8022700 <__assert_func>
    assert(Ts > 0);
 801e492:	ed97 7b02 	vldr	d7, [r7, #8]
 801e496:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e49e:	dc06      	bgt.n	801e4ae <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x4e>
 801e4a0:	4b48      	ldr	r3, [pc, #288]	; (801e5c4 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x164>)
 801e4a2:	4a46      	ldr	r2, [pc, #280]	; (801e5bc <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x15c>)
 801e4a4:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801e4a8:	4845      	ldr	r0, [pc, #276]	; (801e5c0 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x160>)
 801e4aa:	f004 f929 	bl	8022700 <__assert_func>
    // second order Butterworth filter based on https://stackoverflow.com/a/52764064
    double fc = (M_SQRT2 / (2.0*M_PI))/double(tau); // time constant of dampened, non-oscillating part of step response
 801e4ae:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 801e5a8 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x148>
 801e4b2:	ed97 6b04 	vldr	d6, [r7, #16]
 801e4b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e4ba:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    double C = tan(M_PI*fc*double(Ts));
 801e4be:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 801e4c2:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 801e5b0 <_ZN8BasicVQF12filterCoeffsEddPdS0_+0x150>
 801e4c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 801e4ca:	ed97 7b02 	vldr	d7, [r7, #8]
 801e4ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e4d2:	eeb0 0b47 	vmov.f64	d0, d7
 801e4d6:	f002 ff8b 	bl	80213f0 <tan>
 801e4da:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
    double D = C*C + sqrt(2)*C + 1;
 801e4de:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 801e4e2:	ee27 8b07 	vmul.f64	d8, d7, d7
 801e4e6:	2002      	movs	r0, #2
 801e4e8:	f7ff ffa4 	bl	801e434 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 801e4ec:	eeb0 6b40 	vmov.f64	d6, d0
 801e4f0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 801e4f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e4f8:	ee38 7b07 	vadd.f64	d7, d8, d7
 801e4fc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e500:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e504:	ed87 7b08 	vstr	d7, [r7, #32]
    double b0 = C*C/D;
 801e508:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 801e50c:	ee27 5b07 	vmul.f64	d5, d7, d7
 801e510:	ed97 6b08 	vldr	d6, [r7, #32]
 801e514:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e518:	ed87 7b06 	vstr	d7, [r7, #24]
    outB[0] = b0;
 801e51c:	6879      	ldr	r1, [r7, #4]
 801e51e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e522:	e9c1 2300 	strd	r2, r3, [r1]
    outB[1] = 2*b0;
 801e526:	687b      	ldr	r3, [r7, #4]
 801e528:	3308      	adds	r3, #8
 801e52a:	ed97 7b06 	vldr	d7, [r7, #24]
 801e52e:	ee37 7b07 	vadd.f64	d7, d7, d7
 801e532:	ed83 7b00 	vstr	d7, [r3]
    outB[2] = b0;
 801e536:	687b      	ldr	r3, [r7, #4]
 801e538:	f103 0110 	add.w	r1, r3, #16
 801e53c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e540:	e9c1 2300 	strd	r2, r3, [r1]
    // a0 = 1.0
    outA[0] = 2*(C*C-1)/D; // a1
 801e544:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 801e548:	ee27 7b07 	vmul.f64	d7, d7, d7
 801e54c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e550:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e554:	ee37 5b07 	vadd.f64	d5, d7, d7
 801e558:	ed97 6b08 	vldr	d6, [r7, #32]
 801e55c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e560:	683b      	ldr	r3, [r7, #0]
 801e562:	ed83 7b00 	vstr	d7, [r3]
    outA[1] = (1-sqrt(2)*C+C*C)/D; // a2
 801e566:	2002      	movs	r0, #2
 801e568:	f7ff ff64 	bl	801e434 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 801e56c:	eeb0 6b40 	vmov.f64	d6, d0
 801e570:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 801e574:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e578:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e57c:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e580:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 801e584:	ee27 7b07 	vmul.f64	d7, d7, d7
 801e588:	ee36 5b07 	vadd.f64	d5, d6, d7
 801e58c:	683b      	ldr	r3, [r7, #0]
 801e58e:	3308      	adds	r3, #8
 801e590:	ed97 6b08 	vldr	d6, [r7, #32]
 801e594:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e598:	ed83 7b00 	vstr	d7, [r3]
}
 801e59c:	bf00      	nop
 801e59e:	3738      	adds	r7, #56	; 0x38
 801e5a0:	46bd      	mov	sp, r7
 801e5a2:	ecbd 8b02 	vpop	{d8}
 801e5a6:	bd80      	pop	{r7, pc}
 801e5a8:	29be6622 	.word	0x29be6622
 801e5ac:	3fcccf64 	.word	0x3fcccf64
 801e5b0:	54442d18 	.word	0x54442d18
 801e5b4:	400921fb 	.word	0x400921fb
 801e5b8:	08025228 	.word	0x08025228
 801e5bc:	08025230 	.word	0x08025230
 801e5c0:	080251a8 	.word	0x080251a8
 801e5c4:	08025160 	.word	0x08025160

0801e5c8 <_ZN8BasicVQF18filterInitialStateEdPKdS1_Pd>:

void BasicVQF::filterInitialState(vqf_real_t x0, const double b[3], const double a[2], double out[])
{
 801e5c8:	b480      	push	{r7}
 801e5ca:	b087      	sub	sp, #28
 801e5cc:	af00      	add	r7, sp, #0
 801e5ce:	ed87 0b04 	vstr	d0, [r7, #16]
 801e5d2:	60f8      	str	r0, [r7, #12]
 801e5d4:	60b9      	str	r1, [r7, #8]
 801e5d6:	607a      	str	r2, [r7, #4]
    // initial state for steady state (equivalent to scipy.signal.lfilter_zi, obtained by setting y=x=x0 in the filter
    // update equation)
    out[0] = x0*(1 - b[0]);
 801e5d8:	68fb      	ldr	r3, [r7, #12]
 801e5da:	ed93 7b00 	vldr	d7, [r3]
 801e5de:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e5e2:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e5e6:	ed97 7b04 	vldr	d7, [r7, #16]
 801e5ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e5ee:	687b      	ldr	r3, [r7, #4]
 801e5f0:	ed83 7b00 	vstr	d7, [r3]
    out[1] = x0*(b[2] - a[1]);
 801e5f4:	68fb      	ldr	r3, [r7, #12]
 801e5f6:	3310      	adds	r3, #16
 801e5f8:	ed93 6b00 	vldr	d6, [r3]
 801e5fc:	68bb      	ldr	r3, [r7, #8]
 801e5fe:	3308      	adds	r3, #8
 801e600:	ed93 7b00 	vldr	d7, [r3]
 801e604:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e608:	687b      	ldr	r3, [r7, #4]
 801e60a:	3308      	adds	r3, #8
 801e60c:	ed97 7b04 	vldr	d7, [r7, #16]
 801e610:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e614:	ed83 7b00 	vstr	d7, [r3]
}
 801e618:	bf00      	nop
 801e61a:	371c      	adds	r7, #28
 801e61c:	46bd      	mov	sp, r7
 801e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e622:	4770      	bx	lr

0801e624 <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_>:

void BasicVQF::filterAdaptStateForCoeffChange(vqf_real_t last_y[], size_t N, const double b_old[],
                                              const double a_old[], const double b_new[],
                                              const double a_new[], double state[])
{
 801e624:	b580      	push	{r7, lr}
 801e626:	b086      	sub	sp, #24
 801e628:	af00      	add	r7, sp, #0
 801e62a:	60f8      	str	r0, [r7, #12]
 801e62c:	60b9      	str	r1, [r7, #8]
 801e62e:	607a      	str	r2, [r7, #4]
 801e630:	603b      	str	r3, [r7, #0]
    if (isnan(state[0])) {
 801e632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e634:	ed93 7b00 	vldr	d7, [r3]
 801e638:	eeb0 0b47 	vmov.f64	d0, d7
 801e63c:	f7ff f980 	bl	801d940 <_ZSt5isnand>
 801e640:	4603      	mov	r3, r0
 801e642:	2b00      	cmp	r3, #0
 801e644:	d154      	bne.n	801e6f0 <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_+0xcc>
        return;
    }
    for (size_t i = 0; i < N; i++) {
 801e646:	2300      	movs	r3, #0
 801e648:	617b      	str	r3, [r7, #20]
 801e64a:	e04c      	b.n	801e6e6 <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_+0xc2>
        state[0+2*i] = state[0+2*i] + (b_old[0] - b_new[0])*last_y[i];
 801e64c:	697b      	ldr	r3, [r7, #20]
 801e64e:	011b      	lsls	r3, r3, #4
 801e650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e652:	4413      	add	r3, r2
 801e654:	ed93 6b00 	vldr	d6, [r3]
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	ed93 5b00 	vldr	d5, [r3]
 801e65e:	6a3b      	ldr	r3, [r7, #32]
 801e660:	ed93 7b00 	vldr	d7, [r3]
 801e664:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e668:	697b      	ldr	r3, [r7, #20]
 801e66a:	00db      	lsls	r3, r3, #3
 801e66c:	68fa      	ldr	r2, [r7, #12]
 801e66e:	4413      	add	r3, r2
 801e670:	ed93 7b00 	vldr	d7, [r3]
 801e674:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e678:	697b      	ldr	r3, [r7, #20]
 801e67a:	011b      	lsls	r3, r3, #4
 801e67c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e67e:	4413      	add	r3, r2
 801e680:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e684:	ed83 7b00 	vstr	d7, [r3]
        state[1+2*i] = state[1+2*i] + (b_old[1] - b_new[1] - a_old[0] + a_new[0])*last_y[i];
 801e688:	697b      	ldr	r3, [r7, #20]
 801e68a:	011b      	lsls	r3, r3, #4
 801e68c:	3308      	adds	r3, #8
 801e68e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e690:	4413      	add	r3, r2
 801e692:	ed93 6b00 	vldr	d6, [r3]
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	3308      	adds	r3, #8
 801e69a:	ed93 5b00 	vldr	d5, [r3]
 801e69e:	6a3b      	ldr	r3, [r7, #32]
 801e6a0:	3308      	adds	r3, #8
 801e6a2:	ed93 7b00 	vldr	d7, [r3]
 801e6a6:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e6aa:	683b      	ldr	r3, [r7, #0]
 801e6ac:	ed93 7b00 	vldr	d7, [r3]
 801e6b0:	ee35 5b47 	vsub.f64	d5, d5, d7
 801e6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6b6:	ed93 7b00 	vldr	d7, [r3]
 801e6ba:	ee35 5b07 	vadd.f64	d5, d5, d7
 801e6be:	697b      	ldr	r3, [r7, #20]
 801e6c0:	00db      	lsls	r3, r3, #3
 801e6c2:	68fa      	ldr	r2, [r7, #12]
 801e6c4:	4413      	add	r3, r2
 801e6c6:	ed93 7b00 	vldr	d7, [r3]
 801e6ca:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e6ce:	697b      	ldr	r3, [r7, #20]
 801e6d0:	011b      	lsls	r3, r3, #4
 801e6d2:	3308      	adds	r3, #8
 801e6d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e6d6:	4413      	add	r3, r2
 801e6d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e6dc:	ed83 7b00 	vstr	d7, [r3]
    for (size_t i = 0; i < N; i++) {
 801e6e0:	697b      	ldr	r3, [r7, #20]
 801e6e2:	3301      	adds	r3, #1
 801e6e4:	617b      	str	r3, [r7, #20]
 801e6e6:	697a      	ldr	r2, [r7, #20]
 801e6e8:	68bb      	ldr	r3, [r7, #8]
 801e6ea:	429a      	cmp	r2, r3
 801e6ec:	d3ae      	bcc.n	801e64c <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_+0x28>
 801e6ee:	e000      	b.n	801e6f2 <_ZN8BasicVQF30filterAdaptStateForCoeffChangeEPdjPKdS2_S2_S2_S0_+0xce>
        return;
 801e6f0:	bf00      	nop
    }
}
 801e6f2:	3718      	adds	r7, #24
 801e6f4:	46bd      	mov	sp, r7
 801e6f6:	bd80      	pop	{r7, pc}

0801e6f8 <_ZN8BasicVQF10filterStepEdPKdS1_Pd>:

vqf_real_t BasicVQF::filterStep(vqf_real_t x, const double b[3], const double a[2], double state[2])
{
 801e6f8:	b480      	push	{r7}
 801e6fa:	b089      	sub	sp, #36	; 0x24
 801e6fc:	af00      	add	r7, sp, #0
 801e6fe:	ed87 0b04 	vstr	d0, [r7, #16]
 801e702:	60f8      	str	r0, [r7, #12]
 801e704:	60b9      	str	r1, [r7, #8]
 801e706:	607a      	str	r2, [r7, #4]
    // difference equations based on scipy.signal.lfilter documentation
    // assumes that a0 == 1.0
    double y = b[0]*x + state[0];
 801e708:	68fb      	ldr	r3, [r7, #12]
 801e70a:	ed93 6b00 	vldr	d6, [r3]
 801e70e:	ed97 7b04 	vldr	d7, [r7, #16]
 801e712:	ee26 6b07 	vmul.f64	d6, d6, d7
 801e716:	687b      	ldr	r3, [r7, #4]
 801e718:	ed93 7b00 	vldr	d7, [r3]
 801e71c:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e720:	ed87 7b06 	vstr	d7, [r7, #24]
    state[0] = b[1]*x - a[0]*y + state[1];
 801e724:	68fb      	ldr	r3, [r7, #12]
 801e726:	3308      	adds	r3, #8
 801e728:	ed93 6b00 	vldr	d6, [r3]
 801e72c:	ed97 7b04 	vldr	d7, [r7, #16]
 801e730:	ee26 6b07 	vmul.f64	d6, d6, d7
 801e734:	68bb      	ldr	r3, [r7, #8]
 801e736:	ed93 5b00 	vldr	d5, [r3]
 801e73a:	ed97 7b06 	vldr	d7, [r7, #24]
 801e73e:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e742:	ee36 6b47 	vsub.f64	d6, d6, d7
 801e746:	687b      	ldr	r3, [r7, #4]
 801e748:	3308      	adds	r3, #8
 801e74a:	ed93 7b00 	vldr	d7, [r3]
 801e74e:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e752:	687b      	ldr	r3, [r7, #4]
 801e754:	ed83 7b00 	vstr	d7, [r3]
    state[1] = b[2]*x - a[1]*y;
 801e758:	68fb      	ldr	r3, [r7, #12]
 801e75a:	3310      	adds	r3, #16
 801e75c:	ed93 6b00 	vldr	d6, [r3]
 801e760:	ed97 7b04 	vldr	d7, [r7, #16]
 801e764:	ee26 6b07 	vmul.f64	d6, d6, d7
 801e768:	68bb      	ldr	r3, [r7, #8]
 801e76a:	3308      	adds	r3, #8
 801e76c:	ed93 5b00 	vldr	d5, [r3]
 801e770:	ed97 7b06 	vldr	d7, [r7, #24]
 801e774:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e778:	687b      	ldr	r3, [r7, #4]
 801e77a:	3308      	adds	r3, #8
 801e77c:	ee36 7b47 	vsub.f64	d7, d6, d7
 801e780:	ed83 7b00 	vstr	d7, [r3]
    return y;
 801e784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801e788:	ec43 2b17 	vmov	d7, r2, r3
}
 801e78c:	eeb0 0b47 	vmov.f64	d0, d7
 801e790:	3724      	adds	r7, #36	; 0x24
 801e792:	46bd      	mov	sp, r7
 801e794:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e798:	4770      	bx	lr
	...

0801e79c <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_>:

void BasicVQF::filterVec(const vqf_real_t x[], size_t N, vqf_real_t tau, vqf_real_t Ts, const double b[3],
                         const double a[2], double state[], vqf_real_t out[])
{
 801e79c:	b590      	push	{r4, r7, lr}
 801e79e:	b08d      	sub	sp, #52	; 0x34
 801e7a0:	af00      	add	r7, sp, #0
 801e7a2:	61f8      	str	r0, [r7, #28]
 801e7a4:	61b9      	str	r1, [r7, #24]
 801e7a6:	ed87 0b04 	vstr	d0, [r7, #16]
 801e7aa:	ed87 1b02 	vstr	d1, [r7, #8]
 801e7ae:	607a      	str	r2, [r7, #4]
 801e7b0:	603b      	str	r3, [r7, #0]
    assert(N>=2);
 801e7b2:	69bb      	ldr	r3, [r7, #24]
 801e7b4:	2b01      	cmp	r3, #1
 801e7b6:	d806      	bhi.n	801e7c6 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x2a>
 801e7b8:	4b64      	ldr	r3, [pc, #400]	; (801e94c <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1b0>)
 801e7ba:	4a65      	ldr	r2, [pc, #404]	; (801e950 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1b4>)
 801e7bc:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 801e7c0:	4864      	ldr	r0, [pc, #400]	; (801e954 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1b8>)
 801e7c2:	f003 ff9d 	bl	8022700 <__assert_func>

    // to avoid depending on a single sample, average the first samples (for duration tau)
    // and then use this average to calculate the filter initial state
    if (isnan(state[0])) { // initialization phase
 801e7c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e7c8:	ed93 7b00 	vldr	d7, [r3]
 801e7cc:	eeb0 0b47 	vmov.f64	d0, d7
 801e7d0:	f7ff f8b6 	bl	801d940 <_ZSt5isnand>
 801e7d4:	4603      	mov	r3, r0
 801e7d6:	2b00      	cmp	r3, #0
 801e7d8:	f000 8092 	beq.w	801e900 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x164>
        if (isnan(state[1])) { // first sample
 801e7dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e7de:	3308      	adds	r3, #8
 801e7e0:	ed93 7b00 	vldr	d7, [r3]
 801e7e4:	eeb0 0b47 	vmov.f64	d0, d7
 801e7e8:	f7ff f8aa 	bl	801d940 <_ZSt5isnand>
 801e7ec:	4603      	mov	r3, r0
 801e7ee:	2b00      	cmp	r3, #0
 801e7f0:	d01d      	beq.n	801e82e <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x92>
            state[1] = 0; // state[1] is used to store the sample count
 801e7f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e7f4:	f103 0108 	add.w	r1, r3, #8
 801e7f8:	f04f 0200 	mov.w	r2, #0
 801e7fc:	f04f 0300 	mov.w	r3, #0
 801e800:	e9c1 2300 	strd	r2, r3, [r1]
            for(size_t i = 0; i < N; i++) {
 801e804:	2300      	movs	r3, #0
 801e806:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e808:	e00d      	b.n	801e826 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x8a>
                state[2+i] = 0; // state[2+i] is used to store the sum
 801e80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e80c:	3302      	adds	r3, #2
 801e80e:	00db      	lsls	r3, r3, #3
 801e810:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e812:	18d1      	adds	r1, r2, r3
 801e814:	f04f 0200 	mov.w	r2, #0
 801e818:	f04f 0300 	mov.w	r3, #0
 801e81c:	e9c1 2300 	strd	r2, r3, [r1]
            for(size_t i = 0; i < N; i++) {
 801e820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e822:	3301      	adds	r3, #1
 801e824:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e826:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e828:	69bb      	ldr	r3, [r7, #24]
 801e82a:	429a      	cmp	r2, r3
 801e82c:	d3ed      	bcc.n	801e80a <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x6e>
            }
        }
        state[1]++;
 801e82e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e830:	3308      	adds	r3, #8
 801e832:	ed93 7b00 	vldr	d7, [r3]
 801e836:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801e83a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e83e:	ed83 7b00 	vstr	d7, [r3]
        for (size_t i = 0; i < N; i++) {
 801e842:	2300      	movs	r3, #0
 801e844:	62bb      	str	r3, [r7, #40]	; 0x28
 801e846:	e02b      	b.n	801e8a0 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x104>
            state[2+i] += x[i];
 801e848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e84a:	3302      	adds	r3, #2
 801e84c:	00db      	lsls	r3, r3, #3
 801e84e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e850:	4413      	add	r3, r2
 801e852:	ed93 6b00 	vldr	d6, [r3]
 801e856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e858:	00db      	lsls	r3, r3, #3
 801e85a:	69fa      	ldr	r2, [r7, #28]
 801e85c:	4413      	add	r3, r2
 801e85e:	ed93 7b00 	vldr	d7, [r3]
 801e862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e864:	3302      	adds	r3, #2
 801e866:	00db      	lsls	r3, r3, #3
 801e868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e86a:	4413      	add	r3, r2
 801e86c:	ee36 7b07 	vadd.f64	d7, d6, d7
 801e870:	ed83 7b00 	vstr	d7, [r3]
            out[i] = state[2+i]/state[1];
 801e874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e876:	3302      	adds	r3, #2
 801e878:	00db      	lsls	r3, r3, #3
 801e87a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e87c:	4413      	add	r3, r2
 801e87e:	ed93 5b00 	vldr	d5, [r3]
 801e882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e884:	3308      	adds	r3, #8
 801e886:	ed93 6b00 	vldr	d6, [r3]
 801e88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e88c:	00db      	lsls	r3, r3, #3
 801e88e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e890:	4413      	add	r3, r2
 801e892:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801e896:	ed83 7b00 	vstr	d7, [r3]
        for (size_t i = 0; i < N; i++) {
 801e89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e89c:	3301      	adds	r3, #1
 801e89e:	62bb      	str	r3, [r7, #40]	; 0x28
 801e8a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e8a2:	69bb      	ldr	r3, [r7, #24]
 801e8a4:	429a      	cmp	r2, r3
 801e8a6:	d3cf      	bcc.n	801e848 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0xac>
        }
        if (state[1]*Ts >= tau) {
 801e8a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e8aa:	3308      	adds	r3, #8
 801e8ac:	ed93 6b00 	vldr	d6, [r3]
 801e8b0:	ed97 7b02 	vldr	d7, [r7, #8]
 801e8b4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801e8b8:	ed97 6b04 	vldr	d6, [r7, #16]
 801e8bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801e8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e8c4:	d900      	bls.n	801e8c8 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x12c>
            for(size_t i = 0; i < N; i++) {
               filterInitialState(out[i], b, a, state+2*i);
            }
        }
        return;
 801e8c6:	e03e      	b.n	801e946 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1aa>
            for(size_t i = 0; i < N; i++) {
 801e8c8:	2300      	movs	r3, #0
 801e8ca:	627b      	str	r3, [r7, #36]	; 0x24
 801e8cc:	e013      	b.n	801e8f6 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x15a>
               filterInitialState(out[i], b, a, state+2*i);
 801e8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8d0:	00db      	lsls	r3, r3, #3
 801e8d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e8d4:	4413      	add	r3, r2
 801e8d6:	ed93 7b00 	vldr	d7, [r3]
 801e8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8dc:	011b      	lsls	r3, r3, #4
 801e8de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e8e0:	4413      	add	r3, r2
 801e8e2:	461a      	mov	r2, r3
 801e8e4:	6839      	ldr	r1, [r7, #0]
 801e8e6:	6878      	ldr	r0, [r7, #4]
 801e8e8:	eeb0 0b47 	vmov.f64	d0, d7
 801e8ec:	f7ff fe6c 	bl	801e5c8 <_ZN8BasicVQF18filterInitialStateEdPKdS1_Pd>
            for(size_t i = 0; i < N; i++) {
 801e8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8f2:	3301      	adds	r3, #1
 801e8f4:	627b      	str	r3, [r7, #36]	; 0x24
 801e8f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e8f8:	69bb      	ldr	r3, [r7, #24]
 801e8fa:	429a      	cmp	r2, r3
 801e8fc:	d3e7      	bcc.n	801e8ce <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x132>
        return;
 801e8fe:	e022      	b.n	801e946 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1aa>
    }

    for (size_t i = 0; i < N; i++) {
 801e900:	2300      	movs	r3, #0
 801e902:	623b      	str	r3, [r7, #32]
 801e904:	e01b      	b.n	801e93e <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x1a2>
        out[i] = filterStep(x[i], b, a, state+2*i);
 801e906:	6a3b      	ldr	r3, [r7, #32]
 801e908:	00db      	lsls	r3, r3, #3
 801e90a:	69fa      	ldr	r2, [r7, #28]
 801e90c:	4413      	add	r3, r2
 801e90e:	ed93 7b00 	vldr	d7, [r3]
 801e912:	6a3b      	ldr	r3, [r7, #32]
 801e914:	011b      	lsls	r3, r3, #4
 801e916:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e918:	18d1      	adds	r1, r2, r3
 801e91a:	6a3b      	ldr	r3, [r7, #32]
 801e91c:	00db      	lsls	r3, r3, #3
 801e91e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e920:	18d4      	adds	r4, r2, r3
 801e922:	460a      	mov	r2, r1
 801e924:	6839      	ldr	r1, [r7, #0]
 801e926:	6878      	ldr	r0, [r7, #4]
 801e928:	eeb0 0b47 	vmov.f64	d0, d7
 801e92c:	f7ff fee4 	bl	801e6f8 <_ZN8BasicVQF10filterStepEdPKdS1_Pd>
 801e930:	eeb0 7b40 	vmov.f64	d7, d0
 801e934:	ed84 7b00 	vstr	d7, [r4]
    for (size_t i = 0; i < N; i++) {
 801e938:	6a3b      	ldr	r3, [r7, #32]
 801e93a:	3301      	adds	r3, #1
 801e93c:	623b      	str	r3, [r7, #32]
 801e93e:	6a3a      	ldr	r2, [r7, #32]
 801e940:	69bb      	ldr	r3, [r7, #24]
 801e942:	429a      	cmp	r2, r3
 801e944:	d3df      	bcc.n	801e906 <_ZN8BasicVQF9filterVecEPKdjddS1_S1_PdS2_+0x16a>
    }
}
 801e946:	3734      	adds	r7, #52	; 0x34
 801e948:	46bd      	mov	sp, r7
 801e94a:	bd90      	pop	{r4, r7, pc}
 801e94c:	08025280 	.word	0x08025280
 801e950:	08025288 	.word	0x08025288
 801e954:	080251a8 	.word	0x080251a8

0801e958 <_ZN8BasicVQF5setupEv>:

void BasicVQF::setup()
{
 801e958:	b580      	push	{r7, lr}
 801e95a:	b082      	sub	sp, #8
 801e95c:	af00      	add	r7, sp, #0
 801e95e:	6078      	str	r0, [r7, #4]
    assert(coeffs.gyrTs > 0);
 801e960:	687b      	ldr	r3, [r7, #4]
 801e962:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 801e966:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e96e:	dc06      	bgt.n	801e97e <_ZN8BasicVQF5setupEv+0x26>
 801e970:	4b27      	ldr	r3, [pc, #156]	; (801ea10 <_ZN8BasicVQF5setupEv+0xb8>)
 801e972:	4a28      	ldr	r2, [pc, #160]	; (801ea14 <_ZN8BasicVQF5setupEv+0xbc>)
 801e974:	f240 11ad 	movw	r1, #429	; 0x1ad
 801e978:	4827      	ldr	r0, [pc, #156]	; (801ea18 <_ZN8BasicVQF5setupEv+0xc0>)
 801e97a:	f003 fec1 	bl	8022700 <__assert_func>
    assert(coeffs.accTs > 0);
 801e97e:	687b      	ldr	r3, [r7, #4]
 801e980:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 801e984:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e98c:	dc06      	bgt.n	801e99c <_ZN8BasicVQF5setupEv+0x44>
 801e98e:	4b23      	ldr	r3, [pc, #140]	; (801ea1c <_ZN8BasicVQF5setupEv+0xc4>)
 801e990:	4a20      	ldr	r2, [pc, #128]	; (801ea14 <_ZN8BasicVQF5setupEv+0xbc>)
 801e992:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801e996:	4820      	ldr	r0, [pc, #128]	; (801ea18 <_ZN8BasicVQF5setupEv+0xc0>)
 801e998:	f003 feb2 	bl	8022700 <__assert_func>
    assert(coeffs.magTs > 0);
 801e99c:	687b      	ldr	r3, [r7, #4]
 801e99e:	ed93 7b2e 	vldr	d7, [r3, #184]	; 0xb8
 801e9a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801e9a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9aa:	dc06      	bgt.n	801e9ba <_ZN8BasicVQF5setupEv+0x62>
 801e9ac:	4b1c      	ldr	r3, [pc, #112]	; (801ea20 <_ZN8BasicVQF5setupEv+0xc8>)
 801e9ae:	4a19      	ldr	r2, [pc, #100]	; (801ea14 <_ZN8BasicVQF5setupEv+0xbc>)
 801e9b0:	f240 11af 	movw	r1, #431	; 0x1af
 801e9b4:	4818      	ldr	r0, [pc, #96]	; (801ea18 <_ZN8BasicVQF5setupEv+0xc0>)
 801e9b6:	f003 fea3 	bl	8022700 <__assert_func>

    filterCoeffs(params.tauAcc, coeffs.accTs, coeffs.accLpB, coeffs.accLpA);
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	ed93 7b00 	vldr	d7, [r3]
 801e9c0:	687b      	ldr	r3, [r7, #4]
 801e9c2:	ed93 6b2c 	vldr	d6, [r3, #176]	; 0xb0
 801e9c6:	687b      	ldr	r3, [r7, #4]
 801e9c8:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 801e9cc:	687b      	ldr	r3, [r7, #4]
 801e9ce:	33d8      	adds	r3, #216	; 0xd8
 801e9d0:	4619      	mov	r1, r3
 801e9d2:	4610      	mov	r0, r2
 801e9d4:	eeb0 1b46 	vmov.f64	d1, d6
 801e9d8:	eeb0 0b47 	vmov.f64	d0, d7
 801e9dc:	f7ff fd40 	bl	801e460 <_ZN8BasicVQF12filterCoeffsEddPdS0_>

    coeffs.kMag = gainFromTau(params.tauMag, coeffs.magTs);
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	ed93 7b02 	vldr	d7, [r3, #8]
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	ed93 6b2e 	vldr	d6, [r3, #184]	; 0xb8
 801e9ec:	eeb0 1b46 	vmov.f64	d1, d6
 801e9f0:	eeb0 0b47 	vmov.f64	d0, d7
 801e9f4:	f7ff fcd4 	bl	801e3a0 <_ZN8BasicVQF11gainFromTauEdd>
 801e9f8:	eeb0 7b40 	vmov.f64	d7, d0
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8

    resetState();
 801ea02:	6878      	ldr	r0, [r7, #4]
 801ea04:	f7ff f9c8 	bl	801dd98 <_ZN8BasicVQF10resetStateEv>
}
 801ea08:	bf00      	nop
 801ea0a:	3708      	adds	r7, #8
 801ea0c:	46bd      	mov	sp, r7
 801ea0e:	bd80      	pop	{r7, pc}
 801ea10:	08025310 	.word	0x08025310
 801ea14:	08025324 	.word	0x08025324
 801ea18:	080251a8 	.word	0x080251a8
 801ea1c:	0802533c 	.word	0x0802533c
 801ea20:	08025350 	.word	0x08025350

0801ea24 <_ZSt4copyIPdS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 801ea24:	b590      	push	{r4, r7, lr}
 801ea26:	b085      	sub	sp, #20
 801ea28:	af00      	add	r7, sp, #0
 801ea2a:	60f8      	str	r0, [r7, #12]
 801ea2c:	60b9      	str	r1, [r7, #8]
 801ea2e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 801ea30:	68f8      	ldr	r0, [r7, #12]
 801ea32:	f000 f82d 	bl	801ea90 <_ZSt12__miter_baseIPdET_S1_>
 801ea36:	4604      	mov	r4, r0
 801ea38:	68b8      	ldr	r0, [r7, #8]
 801ea3a:	f000 f829 	bl	801ea90 <_ZSt12__miter_baseIPdET_S1_>
 801ea3e:	4603      	mov	r3, r0
 801ea40:	687a      	ldr	r2, [r7, #4]
 801ea42:	4619      	mov	r1, r3
 801ea44:	4620      	mov	r0, r4
 801ea46:	f000 f82e 	bl	801eaa6 <_ZSt13__copy_move_aILb0EPdS0_ET1_T0_S2_S1_>
 801ea4a:	4603      	mov	r3, r0
    }
 801ea4c:	4618      	mov	r0, r3
 801ea4e:	3714      	adds	r7, #20
 801ea50:	46bd      	mov	sp, r7
 801ea52:	bd90      	pop	{r4, r7, pc}

0801ea54 <_ZSt4fillIPdiEvT_S1_RKT0_>:
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 801ea54:	b580      	push	{r7, lr}
 801ea56:	b084      	sub	sp, #16
 801ea58:	af00      	add	r7, sp, #0
 801ea5a:	60f8      	str	r0, [r7, #12]
 801ea5c:	60b9      	str	r1, [r7, #8]
 801ea5e:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(__first, __last, __value);
 801ea60:	687a      	ldr	r2, [r7, #4]
 801ea62:	68b9      	ldr	r1, [r7, #8]
 801ea64:	68f8      	ldr	r0, [r7, #12]
 801ea66:	f000 f841 	bl	801eaec <_ZSt8__fill_aIPdiEvT_S1_RKT0_>
    }
 801ea6a:	bf00      	nop
 801ea6c:	3710      	adds	r7, #16
 801ea6e:	46bd      	mov	sp, r7
 801ea70:	bd80      	pop	{r7, pc}

0801ea72 <_ZSt4fillIPddEvT_S1_RKT0_>:
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 801ea72:	b580      	push	{r7, lr}
 801ea74:	b084      	sub	sp, #16
 801ea76:	af00      	add	r7, sp, #0
 801ea78:	60f8      	str	r0, [r7, #12]
 801ea7a:	60b9      	str	r1, [r7, #8]
 801ea7c:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __last, __value);
 801ea7e:	687a      	ldr	r2, [r7, #4]
 801ea80:	68b9      	ldr	r1, [r7, #8]
 801ea82:	68f8      	ldr	r0, [r7, #12]
 801ea84:	f000 f841 	bl	801eb0a <_ZSt8__fill_aIPddEvT_S1_RKT0_>
    }
 801ea88:	bf00      	nop
 801ea8a:	3710      	adds	r7, #16
 801ea8c:	46bd      	mov	sp, r7
 801ea8e:	bd80      	pop	{r7, pc}

0801ea90 <_ZSt12__miter_baseIPdET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 801ea90:	b480      	push	{r7}
 801ea92:	b083      	sub	sp, #12
 801ea94:	af00      	add	r7, sp, #0
 801ea96:	6078      	str	r0, [r7, #4]
    { return __it; }
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	4618      	mov	r0, r3
 801ea9c:	370c      	adds	r7, #12
 801ea9e:	46bd      	mov	sp, r7
 801eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eaa4:	4770      	bx	lr

0801eaa6 <_ZSt13__copy_move_aILb0EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 801eaa6:	b5b0      	push	{r4, r5, r7, lr}
 801eaa8:	b084      	sub	sp, #16
 801eaaa:	af00      	add	r7, sp, #0
 801eaac:	60f8      	str	r0, [r7, #12]
 801eaae:	60b9      	str	r1, [r7, #8]
 801eab0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 801eab2:	68f8      	ldr	r0, [r7, #12]
 801eab4:	f000 f838 	bl	801eb28 <_ZSt12__niter_baseIPdET_S1_>
 801eab8:	4604      	mov	r4, r0
 801eaba:	68b8      	ldr	r0, [r7, #8]
 801eabc:	f000 f834 	bl	801eb28 <_ZSt12__niter_baseIPdET_S1_>
 801eac0:	4605      	mov	r5, r0
 801eac2:	687b      	ldr	r3, [r7, #4]
 801eac4:	4618      	mov	r0, r3
 801eac6:	f000 f82f 	bl	801eb28 <_ZSt12__niter_baseIPdET_S1_>
 801eaca:	4603      	mov	r3, r0
 801eacc:	461a      	mov	r2, r3
 801eace:	4629      	mov	r1, r5
 801ead0:	4620      	mov	r0, r4
 801ead2:	f000 f840 	bl	801eb56 <_ZSt14__copy_move_a1ILb0EPdS0_ET1_T0_S2_S1_>
 801ead6:	4602      	mov	r2, r0
 801ead8:	1d3b      	adds	r3, r7, #4
 801eada:	4611      	mov	r1, r2
 801eadc:	4618      	mov	r0, r3
 801eade:	f000 f82e 	bl	801eb3e <_ZSt12__niter_wrapIPdET_RKS1_S1_>
 801eae2:	4603      	mov	r3, r0
    }
 801eae4:	4618      	mov	r0, r3
 801eae6:	3710      	adds	r7, #16
 801eae8:	46bd      	mov	sp, r7
 801eaea:	bdb0      	pop	{r4, r5, r7, pc}

0801eaec <_ZSt8__fill_aIPdiEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 801eaec:	b580      	push	{r7, lr}
 801eaee:	b084      	sub	sp, #16
 801eaf0:	af00      	add	r7, sp, #0
 801eaf2:	60f8      	str	r0, [r7, #12]
 801eaf4:	60b9      	str	r1, [r7, #8]
 801eaf6:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 801eaf8:	687a      	ldr	r2, [r7, #4]
 801eafa:	68b9      	ldr	r1, [r7, #8]
 801eafc:	68f8      	ldr	r0, [r7, #12]
 801eafe:	f000 f83a 	bl	801eb76 <_ZSt9__fill_a1IPdiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 801eb02:	bf00      	nop
 801eb04:	3710      	adds	r7, #16
 801eb06:	46bd      	mov	sp, r7
 801eb08:	bd80      	pop	{r7, pc}

0801eb0a <_ZSt8__fill_aIPddEvT_S1_RKT0_>:
    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 801eb0a:	b580      	push	{r7, lr}
 801eb0c:	b084      	sub	sp, #16
 801eb0e:	af00      	add	r7, sp, #0
 801eb10:	60f8      	str	r0, [r7, #12]
 801eb12:	60b9      	str	r1, [r7, #8]
 801eb14:	607a      	str	r2, [r7, #4]
    { std::__fill_a1(__first, __last, __value); }
 801eb16:	687a      	ldr	r2, [r7, #4]
 801eb18:	68b9      	ldr	r1, [r7, #8]
 801eb1a:	68f8      	ldr	r0, [r7, #12]
 801eb1c:	f000 f84b 	bl	801ebb6 <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>
 801eb20:	bf00      	nop
 801eb22:	3710      	adds	r7, #16
 801eb24:	46bd      	mov	sp, r7
 801eb26:	bd80      	pop	{r7, pc}

0801eb28 <_ZSt12__niter_baseIPdET_S1_>:
    __niter_base(_Iterator __it)
 801eb28:	b480      	push	{r7}
 801eb2a:	b083      	sub	sp, #12
 801eb2c:	af00      	add	r7, sp, #0
 801eb2e:	6078      	str	r0, [r7, #4]
    { return __it; }
 801eb30:	687b      	ldr	r3, [r7, #4]
 801eb32:	4618      	mov	r0, r3
 801eb34:	370c      	adds	r7, #12
 801eb36:	46bd      	mov	sp, r7
 801eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb3c:	4770      	bx	lr

0801eb3e <_ZSt12__niter_wrapIPdET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 801eb3e:	b480      	push	{r7}
 801eb40:	b083      	sub	sp, #12
 801eb42:	af00      	add	r7, sp, #0
 801eb44:	6078      	str	r0, [r7, #4]
 801eb46:	6039      	str	r1, [r7, #0]
    { return __res; }
 801eb48:	683b      	ldr	r3, [r7, #0]
 801eb4a:	4618      	mov	r0, r3
 801eb4c:	370c      	adds	r7, #12
 801eb4e:	46bd      	mov	sp, r7
 801eb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb54:	4770      	bx	lr

0801eb56 <_ZSt14__copy_move_a1ILb0EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 801eb56:	b580      	push	{r7, lr}
 801eb58:	b084      	sub	sp, #16
 801eb5a:	af00      	add	r7, sp, #0
 801eb5c:	60f8      	str	r0, [r7, #12]
 801eb5e:	60b9      	str	r1, [r7, #8]
 801eb60:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 801eb62:	687a      	ldr	r2, [r7, #4]
 801eb64:	68b9      	ldr	r1, [r7, #8]
 801eb66:	68f8      	ldr	r0, [r7, #12]
 801eb68:	f000 f844 	bl	801ebf4 <_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_>
 801eb6c:	4603      	mov	r3, r0
 801eb6e:	4618      	mov	r0, r3
 801eb70:	3710      	adds	r7, #16
 801eb72:	46bd      	mov	sp, r7
 801eb74:	bd80      	pop	{r7, pc}

0801eb76 <_ZSt9__fill_a1IPdiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 801eb76:	b480      	push	{r7}
 801eb78:	b087      	sub	sp, #28
 801eb7a:	af00      	add	r7, sp, #0
 801eb7c:	60f8      	str	r0, [r7, #12]
 801eb7e:	60b9      	str	r1, [r7, #8]
 801eb80:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 801eb82:	687b      	ldr	r3, [r7, #4]
 801eb84:	681b      	ldr	r3, [r3, #0]
 801eb86:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first)
 801eb88:	e00a      	b.n	801eba0 <_ZSt9__fill_a1IPdiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x2a>
	*__first = __tmp;
 801eb8a:	697b      	ldr	r3, [r7, #20]
 801eb8c:	ee07 3a90 	vmov	s15, r3
 801eb90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801eb94:	68fb      	ldr	r3, [r7, #12]
 801eb96:	ed83 7b00 	vstr	d7, [r3]
      for (; __first != __last; ++__first)
 801eb9a:	68fb      	ldr	r3, [r7, #12]
 801eb9c:	3308      	adds	r3, #8
 801eb9e:	60fb      	str	r3, [r7, #12]
 801eba0:	68fa      	ldr	r2, [r7, #12]
 801eba2:	68bb      	ldr	r3, [r7, #8]
 801eba4:	429a      	cmp	r2, r3
 801eba6:	d1f0      	bne.n	801eb8a <_ZSt9__fill_a1IPdiEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x14>
    }
 801eba8:	bf00      	nop
 801ebaa:	bf00      	nop
 801ebac:	371c      	adds	r7, #28
 801ebae:	46bd      	mov	sp, r7
 801ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebb4:	4770      	bx	lr

0801ebb6 <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_>:
    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 801ebb6:	b480      	push	{r7}
 801ebb8:	b087      	sub	sp, #28
 801ebba:	af00      	add	r7, sp, #0
 801ebbc:	60f8      	str	r0, [r7, #12]
 801ebbe:	60b9      	str	r1, [r7, #8]
 801ebc0:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __value;
 801ebc2:	687b      	ldr	r3, [r7, #4]
 801ebc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (; __first != __last; ++__first)
 801ebcc:	e007      	b.n	801ebde <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x28>
	*__first = __tmp;
 801ebce:	68f9      	ldr	r1, [r7, #12]
 801ebd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801ebd4:	e9c1 2300 	strd	r2, r3, [r1]
      for (; __first != __last; ++__first)
 801ebd8:	68fb      	ldr	r3, [r7, #12]
 801ebda:	3308      	adds	r3, #8
 801ebdc:	60fb      	str	r3, [r7, #12]
 801ebde:	68fa      	ldr	r2, [r7, #12]
 801ebe0:	68bb      	ldr	r3, [r7, #8]
 801ebe2:	429a      	cmp	r2, r3
 801ebe4:	d1f3      	bne.n	801ebce <_ZSt9__fill_a1IPddEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT0_E7__valueEvE6__typeET_S8_RKS4_+0x18>
    }
 801ebe6:	bf00      	nop
 801ebe8:	bf00      	nop
 801ebea:	371c      	adds	r7, #28
 801ebec:	46bd      	mov	sp, r7
 801ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebf2:	4770      	bx	lr

0801ebf4 <_ZSt14__copy_move_a2ILb0EPdS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 801ebf4:	b580      	push	{r7, lr}
 801ebf6:	b084      	sub	sp, #16
 801ebf8:	af00      	add	r7, sp, #0
 801ebfa:	60f8      	str	r0, [r7, #12]
 801ebfc:	60b9      	str	r1, [r7, #8]
 801ebfe:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 801ec00:	687a      	ldr	r2, [r7, #4]
 801ec02:	68b9      	ldr	r1, [r7, #8]
 801ec04:	68f8      	ldr	r0, [r7, #12]
 801ec06:	f000 f805 	bl	801ec14 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>
 801ec0a:	4603      	mov	r3, r0
    }
 801ec0c:	4618      	mov	r0, r3
 801ec0e:	3710      	adds	r7, #16
 801ec10:	46bd      	mov	sp, r7
 801ec12:	bd80      	pop	{r7, pc}

0801ec14 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 801ec14:	b580      	push	{r7, lr}
 801ec16:	b086      	sub	sp, #24
 801ec18:	af00      	add	r7, sp, #0
 801ec1a:	60f8      	str	r0, [r7, #12]
 801ec1c:	60b9      	str	r1, [r7, #8]
 801ec1e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 801ec20:	68ba      	ldr	r2, [r7, #8]
 801ec22:	68fb      	ldr	r3, [r7, #12]
 801ec24:	1ad3      	subs	r3, r2, r3
 801ec26:	10db      	asrs	r3, r3, #3
 801ec28:	617b      	str	r3, [r7, #20]
	  if (_Num)
 801ec2a:	697b      	ldr	r3, [r7, #20]
 801ec2c:	2b00      	cmp	r3, #0
 801ec2e:	d006      	beq.n	801ec3e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIdEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 801ec30:	697b      	ldr	r3, [r7, #20]
 801ec32:	00db      	lsls	r3, r3, #3
 801ec34:	461a      	mov	r2, r3
 801ec36:	68f9      	ldr	r1, [r7, #12]
 801ec38:	6878      	ldr	r0, [r7, #4]
 801ec3a:	f004 fad2 	bl	80231e2 <memmove>
	  return __result + _Num;
 801ec3e:	697b      	ldr	r3, [r7, #20]
 801ec40:	00db      	lsls	r3, r3, #3
 801ec42:	687a      	ldr	r2, [r7, #4]
 801ec44:	4413      	add	r3, r2
	}
 801ec46:	4618      	mov	r0, r3
 801ec48:	3718      	adds	r7, #24
 801ec4a:	46bd      	mov	sp, r7
 801ec4c:	bd80      	pop	{r7, pc}
	...

0801ec50 <_ZN8MadgwickC1Ev>:
// Functions

//-------------------------------------------------------------------------------------------
// AHRS algorithm update

Madgwick::Madgwick() {
 801ec50:	b480      	push	{r7}
 801ec52:	b083      	sub	sp, #12
 801ec54:	af00      	add	r7, sp, #0
 801ec56:	6078      	str	r0, [r7, #4]
	beta = betaDef;
 801ec58:	687b      	ldr	r3, [r7, #4]
 801ec5a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 801ec5e:	601a      	str	r2, [r3, #0]
	q0 = 1.0f;
 801ec60:	687b      	ldr	r3, [r7, #4]
 801ec62:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801ec66:	619a      	str	r2, [r3, #24]
	q1 = 0.0f;
 801ec68:	687b      	ldr	r3, [r7, #4]
 801ec6a:	f04f 0200 	mov.w	r2, #0
 801ec6e:	61da      	str	r2, [r3, #28]
	q2 = 0.0f;
 801ec70:	687b      	ldr	r3, [r7, #4]
 801ec72:	f04f 0200 	mov.w	r2, #0
 801ec76:	621a      	str	r2, [r3, #32]
	q3 = 0.0f;
 801ec78:	687b      	ldr	r3, [r7, #4]
 801ec7a:	f04f 0200 	mov.w	r2, #0
 801ec7e:	625a      	str	r2, [r3, #36]	; 0x24
	invSampleFreq = 1.0f / sampleFreqDef;
 801ec80:	687b      	ldr	r3, [r7, #4]
 801ec82:	4a06      	ldr	r2, [pc, #24]	; (801ec9c <_ZN8MadgwickC1Ev+0x4c>)
 801ec84:	611a      	str	r2, [r3, #16]
	anglesComputed = 0;
 801ec86:	687b      	ldr	r3, [r7, #4]
 801ec88:	2200      	movs	r2, #0
 801ec8a:	751a      	strb	r2, [r3, #20]
}
 801ec8c:	687b      	ldr	r3, [r7, #4]
 801ec8e:	4618      	mov	r0, r3
 801ec90:	370c      	adds	r7, #12
 801ec92:	46bd      	mov	sp, r7
 801ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec98:	4770      	bx	lr
 801ec9a:	bf00      	nop
 801ec9c:	3c23d70a 	.word	0x3c23d70a

0801eca0 <_ZN8Madgwick9updateIMUEffffff>:
}

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void Madgwick::updateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 801eca0:	b580      	push	{r7, lr}
 801eca2:	b09e      	sub	sp, #120	; 0x78
 801eca4:	af00      	add	r7, sp, #0
 801eca6:	61f8      	str	r0, [r7, #28]
 801eca8:	ed87 0a06 	vstr	s0, [r7, #24]
 801ecac:	edc7 0a05 	vstr	s1, [r7, #20]
 801ecb0:	ed87 1a04 	vstr	s2, [r7, #16]
 801ecb4:	edc7 1a03 	vstr	s3, [r7, #12]
 801ecb8:	ed87 2a02 	vstr	s4, [r7, #8]
 801ecbc:	edc7 2a01 	vstr	s5, [r7, #4]
//	gx *= 0.0174533f;
//	gy *= 0.0174533f;
//	gz *= 0.0174533f;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 801ecc0:	69fb      	ldr	r3, [r7, #28]
 801ecc2:	edd3 7a07 	vldr	s15, [r3, #28]
 801ecc6:	eeb1 7a67 	vneg.f32	s14, s15
 801ecca:	edd7 7a06 	vldr	s15, [r7, #24]
 801ecce:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ecd2:	69fb      	ldr	r3, [r7, #28]
 801ecd4:	edd3 6a08 	vldr	s13, [r3, #32]
 801ecd8:	edd7 7a05 	vldr	s15, [r7, #20]
 801ecdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ece0:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ece4:	69fb      	ldr	r3, [r7, #28]
 801ece6:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 801ecea:	edd7 7a04 	vldr	s15, [r7, #16]
 801ecee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ecf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ecf6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ecfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ecfe:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 801ed02:	69fb      	ldr	r3, [r7, #28]
 801ed04:	ed93 7a06 	vldr	s14, [r3, #24]
 801ed08:	edd7 7a06 	vldr	s15, [r7, #24]
 801ed0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ed10:	69fb      	ldr	r3, [r7, #28]
 801ed12:	edd3 6a08 	vldr	s13, [r3, #32]
 801ed16:	edd7 7a04 	vldr	s15, [r7, #16]
 801ed1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ed1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ed22:	69fb      	ldr	r3, [r7, #28]
 801ed24:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 801ed28:	edd7 7a05 	vldr	s15, [r7, #20]
 801ed2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ed30:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ed34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ed38:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ed3c:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 801ed40:	69fb      	ldr	r3, [r7, #28]
 801ed42:	ed93 7a06 	vldr	s14, [r3, #24]
 801ed46:	edd7 7a05 	vldr	s15, [r7, #20]
 801ed4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ed4e:	69fb      	ldr	r3, [r7, #28]
 801ed50:	edd3 6a07 	vldr	s13, [r3, #28]
 801ed54:	edd7 7a04 	vldr	s15, [r7, #16]
 801ed58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ed5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ed60:	69fb      	ldr	r3, [r7, #28]
 801ed62:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 801ed66:	edd7 7a06 	vldr	s15, [r7, #24]
 801ed6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ed6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ed72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801ed76:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ed7a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 801ed7e:	69fb      	ldr	r3, [r7, #28]
 801ed80:	ed93 7a06 	vldr	s14, [r3, #24]
 801ed84:	edd7 7a04 	vldr	s15, [r7, #16]
 801ed88:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ed8c:	69fb      	ldr	r3, [r7, #28]
 801ed8e:	edd3 6a07 	vldr	s13, [r3, #28]
 801ed92:	edd7 7a05 	vldr	s15, [r7, #20]
 801ed96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ed9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ed9e:	69fb      	ldr	r3, [r7, #28]
 801eda0:	edd3 6a08 	vldr	s13, [r3, #32]
 801eda4:	edd7 7a06 	vldr	s15, [r7, #24]
 801eda8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801edac:	ee77 7a67 	vsub.f32	s15, s14, s15
 801edb0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801edb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801edb8:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 801edbc:	edd7 7a03 	vldr	s15, [r7, #12]
 801edc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 801edc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edc8:	d10e      	bne.n	801ede8 <_ZN8Madgwick9updateIMUEffffff+0x148>
 801edca:	edd7 7a02 	vldr	s15, [r7, #8]
 801edce:	eef5 7a40 	vcmp.f32	s15, #0.0
 801edd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801edd6:	d107      	bne.n	801ede8 <_ZN8Madgwick9updateIMUEffffff+0x148>
 801edd8:	edd7 7a01 	vldr	s15, [r7, #4]
 801eddc:	eef5 7a40 	vcmp.f32	s15, #0.0
 801ede0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ede4:	f000 81db 	beq.w	801f19e <_ZN8Madgwick9updateIMUEffffff+0x4fe>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 801ede8:	edd7 7a03 	vldr	s15, [r7, #12]
 801edec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801edf0:	edd7 7a02 	vldr	s15, [r7, #8]
 801edf4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801edf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801edfc:	edd7 7a01 	vldr	s15, [r7, #4]
 801ee00:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ee04:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ee08:	eeb0 0a67 	vmov.f32	s0, s15
 801ee0c:	f000 fa5e 	bl	801f2cc <_ZN8Madgwick7invSqrtEf>
 801ee10:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		ax *= recipNorm;
 801ee14:	ed97 7a03 	vldr	s14, [r7, #12]
 801ee18:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801ee1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee20:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 801ee24:	ed97 7a02 	vldr	s14, [r7, #8]
 801ee28:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801ee2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee30:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 801ee34:	ed97 7a01 	vldr	s14, [r7, #4]
 801ee38:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801ee3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee40:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 801ee44:	69fb      	ldr	r3, [r7, #28]
 801ee46:	edd3 7a06 	vldr	s15, [r3, #24]
 801ee4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ee4e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		_2q1 = 2.0f * q1;
 801ee52:	69fb      	ldr	r3, [r7, #28]
 801ee54:	edd3 7a07 	vldr	s15, [r3, #28]
 801ee58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ee5c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		_2q2 = 2.0f * q2;
 801ee60:	69fb      	ldr	r3, [r7, #28]
 801ee62:	edd3 7a08 	vldr	s15, [r3, #32]
 801ee66:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ee6a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
		_2q3 = 2.0f * q3;
 801ee6e:	69fb      	ldr	r3, [r7, #28]
 801ee70:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801ee74:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ee78:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
		_4q0 = 4.0f * q0;
 801ee7c:	69fb      	ldr	r3, [r7, #28]
 801ee7e:	edd3 7a06 	vldr	s15, [r3, #24]
 801ee82:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801ee86:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ee8a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
		_4q1 = 4.0f * q1;
 801ee8e:	69fb      	ldr	r3, [r7, #28]
 801ee90:	edd3 7a07 	vldr	s15, [r3, #28]
 801ee94:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801ee98:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ee9c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		_4q2 = 4.0f * q2;
 801eea0:	69fb      	ldr	r3, [r7, #28]
 801eea2:	edd3 7a08 	vldr	s15, [r3, #32]
 801eea6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801eeaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 801eeae:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		_8q1 = 8.0f * q1;
 801eeb2:	69fb      	ldr	r3, [r7, #28]
 801eeb4:	edd3 7a07 	vldr	s15, [r3, #28]
 801eeb8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801eebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 801eec0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		_8q2 = 8.0f * q2;
 801eec4:	69fb      	ldr	r3, [r7, #28]
 801eec6:	edd3 7a08 	vldr	s15, [r3, #32]
 801eeca:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 801eece:	ee67 7a87 	vmul.f32	s15, s15, s14
 801eed2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		q0q0 = q0 * q0;
 801eed6:	69fb      	ldr	r3, [r7, #28]
 801eed8:	ed93 7a06 	vldr	s14, [r3, #24]
 801eedc:	69fb      	ldr	r3, [r7, #28]
 801eede:	edd3 7a06 	vldr	s15, [r3, #24]
 801eee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eee6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		q1q1 = q1 * q1;
 801eeea:	69fb      	ldr	r3, [r7, #28]
 801eeec:	ed93 7a07 	vldr	s14, [r3, #28]
 801eef0:	69fb      	ldr	r3, [r7, #28]
 801eef2:	edd3 7a07 	vldr	s15, [r3, #28]
 801eef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eefa:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		q2q2 = q2 * q2;
 801eefe:	69fb      	ldr	r3, [r7, #28]
 801ef00:	ed93 7a08 	vldr	s14, [r3, #32]
 801ef04:	69fb      	ldr	r3, [r7, #28]
 801ef06:	edd3 7a08 	vldr	s15, [r3, #32]
 801ef0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef0e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		q3q3 = q3 * q3;
 801ef12:	69fb      	ldr	r3, [r7, #28]
 801ef14:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801ef18:	69fb      	ldr	r3, [r7, #28]
 801ef1a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801ef1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef22:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 801ef26:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 801ef2a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801ef2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ef32:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801ef36:	edd7 7a03 	vldr	s15, [r7, #12]
 801ef3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ef3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ef42:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 801ef46:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801ef4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ef4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ef52:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801ef56:	edd7 7a02 	vldr	s15, [r7, #8]
 801ef5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ef5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801ef62:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 801ef66:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 801ef6a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801ef6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ef72:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 801ef76:	edd7 7a03 	vldr	s15, [r7, #12]
 801ef7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ef7e:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ef82:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801ef86:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 801ef8a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801ef8e:	69fb      	ldr	r3, [r7, #28]
 801ef90:	edd3 7a07 	vldr	s15, [r3, #28]
 801ef94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ef98:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ef9c:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801efa0:	edd7 7a02 	vldr	s15, [r7, #8]
 801efa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801efa8:	ee37 7a67 	vsub.f32	s14, s14, s15
 801efac:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 801efb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 801efb4:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801efb8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801efbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801efc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801efc4:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 801efc8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801efcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801efd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 801efd4:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 801efd8:	edd7 7a01 	vldr	s15, [r7, #4]
 801efdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801efe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801efe4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 801efe8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801efec:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801eff0:	ee27 7a87 	vmul.f32	s14, s15, s14
 801eff4:	69fb      	ldr	r3, [r7, #28]
 801eff6:	edd3 7a08 	vldr	s15, [r3, #32]
 801effa:	ee27 7a27 	vmul.f32	s14, s14, s15
 801effe:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 801f002:	edd7 7a03 	vldr	s15, [r7, #12]
 801f006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f00a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f00e:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 801f012:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 801f016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f01a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f01e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 801f022:	edd7 7a02 	vldr	s15, [r7, #8]
 801f026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f02a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f02e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 801f032:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f036:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801f03a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801f03e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f042:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f046:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 801f04a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801f04e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f052:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f056:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 801f05a:	edd7 7a01 	vldr	s15, [r7, #4]
 801f05e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f062:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f066:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 801f06a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801f06e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801f072:	ee27 7a87 	vmul.f32	s14, s15, s14
 801f076:	69fb      	ldr	r3, [r7, #28]
 801f078:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801f07c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f080:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 801f084:	edd7 7a03 	vldr	s15, [r7, #12]
 801f088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f08c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f090:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 801f094:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 801f098:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801f09c:	69fb      	ldr	r3, [r7, #28]
 801f09e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801f0a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f0a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f0aa:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 801f0ae:	edd7 7a02 	vldr	s15, [r7, #8]
 801f0b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f0b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f0ba:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 801f0be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801f0c2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801f0c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801f0ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f0ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f0d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801f0d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f0da:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f0de:	edd7 7a08 	vldr	s15, [r7, #32]
 801f0e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801f0e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f0ea:	eeb0 0a67 	vmov.f32	s0, s15
 801f0ee:	f000 f8ed 	bl	801f2cc <_ZN8Madgwick7invSqrtEf>
 801f0f2:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		s0 *= recipNorm;
 801f0f6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 801f0fa:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801f0fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f102:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		s1 *= recipNorm;
 801f106:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 801f10a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801f10e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f112:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		s2 *= recipNorm;
 801f116:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 801f11a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801f11e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f122:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		s3 *= recipNorm;
 801f126:	ed97 7a08 	vldr	s14, [r7, #32]
 801f12a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801f12e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f132:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 801f136:	69fb      	ldr	r3, [r7, #28]
 801f138:	ed93 7a00 	vldr	s14, [r3]
 801f13c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801f140:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f144:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 801f148:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f14c:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		qDot2 -= beta * s1;
 801f150:	69fb      	ldr	r3, [r7, #28]
 801f152:	ed93 7a00 	vldr	s14, [r3]
 801f156:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 801f15a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f15e:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 801f162:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f166:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		qDot3 -= beta * s2;
 801f16a:	69fb      	ldr	r3, [r7, #28]
 801f16c:	ed93 7a00 	vldr	s14, [r3]
 801f170:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 801f174:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f178:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 801f17c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f180:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		qDot4 -= beta * s3;
 801f184:	69fb      	ldr	r3, [r7, #28]
 801f186:	ed93 7a00 	vldr	s14, [r3]
 801f18a:	edd7 7a08 	vldr	s15, [r7, #32]
 801f18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f192:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 801f196:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f19a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * invSampleFreq;
 801f19e:	69fb      	ldr	r3, [r7, #28]
 801f1a0:	ed93 7a06 	vldr	s14, [r3, #24]
 801f1a4:	69fb      	ldr	r3, [r7, #28]
 801f1a6:	edd3 6a04 	vldr	s13, [r3, #16]
 801f1aa:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 801f1ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f1b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f1b6:	69fb      	ldr	r3, [r7, #28]
 801f1b8:	edc3 7a06 	vstr	s15, [r3, #24]
	q1 += qDot2 * invSampleFreq;
 801f1bc:	69fb      	ldr	r3, [r7, #28]
 801f1be:	ed93 7a07 	vldr	s14, [r3, #28]
 801f1c2:	69fb      	ldr	r3, [r7, #28]
 801f1c4:	edd3 6a04 	vldr	s13, [r3, #16]
 801f1c8:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 801f1cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f1d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f1d4:	69fb      	ldr	r3, [r7, #28]
 801f1d6:	edc3 7a07 	vstr	s15, [r3, #28]
	q2 += qDot3 * invSampleFreq;
 801f1da:	69fb      	ldr	r3, [r7, #28]
 801f1dc:	ed93 7a08 	vldr	s14, [r3, #32]
 801f1e0:	69fb      	ldr	r3, [r7, #28]
 801f1e2:	edd3 6a04 	vldr	s13, [r3, #16]
 801f1e6:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 801f1ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f1ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f1f2:	69fb      	ldr	r3, [r7, #28]
 801f1f4:	edc3 7a08 	vstr	s15, [r3, #32]
	q3 += qDot4 * invSampleFreq;
 801f1f8:	69fb      	ldr	r3, [r7, #28]
 801f1fa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801f1fe:	69fb      	ldr	r3, [r7, #28]
 801f200:	edd3 6a04 	vldr	s13, [r3, #16]
 801f204:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 801f208:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f20c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f210:	69fb      	ldr	r3, [r7, #28]
 801f212:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 801f216:	69fb      	ldr	r3, [r7, #28]
 801f218:	ed93 7a06 	vldr	s14, [r3, #24]
 801f21c:	69fb      	ldr	r3, [r7, #28]
 801f21e:	edd3 7a06 	vldr	s15, [r3, #24]
 801f222:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f226:	69fb      	ldr	r3, [r7, #28]
 801f228:	edd3 6a07 	vldr	s13, [r3, #28]
 801f22c:	69fb      	ldr	r3, [r7, #28]
 801f22e:	edd3 7a07 	vldr	s15, [r3, #28]
 801f232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f236:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f23a:	69fb      	ldr	r3, [r7, #28]
 801f23c:	edd3 6a08 	vldr	s13, [r3, #32]
 801f240:	69fb      	ldr	r3, [r7, #28]
 801f242:	edd3 7a08 	vldr	s15, [r3, #32]
 801f246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f24a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f24e:	69fb      	ldr	r3, [r7, #28]
 801f250:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 801f254:	69fb      	ldr	r3, [r7, #28]
 801f256:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801f25a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801f25e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801f262:	eeb0 0a67 	vmov.f32	s0, s15
 801f266:	f000 f831 	bl	801f2cc <_ZN8Madgwick7invSqrtEf>
 801f26a:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	q0 *= recipNorm;
 801f26e:	69fb      	ldr	r3, [r7, #28]
 801f270:	ed93 7a06 	vldr	s14, [r3, #24]
 801f274:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801f278:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f27c:	69fb      	ldr	r3, [r7, #28]
 801f27e:	edc3 7a06 	vstr	s15, [r3, #24]
	q1 *= recipNorm;
 801f282:	69fb      	ldr	r3, [r7, #28]
 801f284:	ed93 7a07 	vldr	s14, [r3, #28]
 801f288:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801f28c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f290:	69fb      	ldr	r3, [r7, #28]
 801f292:	edc3 7a07 	vstr	s15, [r3, #28]
	q2 *= recipNorm;
 801f296:	69fb      	ldr	r3, [r7, #28]
 801f298:	ed93 7a08 	vldr	s14, [r3, #32]
 801f29c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801f2a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f2a4:	69fb      	ldr	r3, [r7, #28]
 801f2a6:	edc3 7a08 	vstr	s15, [r3, #32]
	q3 *= recipNorm;
 801f2aa:	69fb      	ldr	r3, [r7, #28]
 801f2ac:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 801f2b0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 801f2b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f2b8:	69fb      	ldr	r3, [r7, #28]
 801f2ba:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	anglesComputed = 0;
 801f2be:	69fb      	ldr	r3, [r7, #28]
 801f2c0:	2200      	movs	r2, #0
 801f2c2:	751a      	strb	r2, [r3, #20]
}
 801f2c4:	bf00      	nop
 801f2c6:	3778      	adds	r7, #120	; 0x78
 801f2c8:	46bd      	mov	sp, r7
 801f2ca:	bd80      	pop	{r7, pc}

0801f2cc <_ZN8Madgwick7invSqrtEf>:

//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float Madgwick::invSqrt(float x) {
 801f2cc:	b480      	push	{r7}
 801f2ce:	b087      	sub	sp, #28
 801f2d0:	af00      	add	r7, sp, #0
 801f2d2:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 801f2d6:	edd7 7a01 	vldr	s15, [r7, #4]
 801f2da:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801f2de:	ee67 7a87 	vmul.f32	s15, s15, s14
 801f2e2:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 801f2e6:	687b      	ldr	r3, [r7, #4]
 801f2e8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 801f2ea:	f107 0310 	add.w	r3, r7, #16
 801f2ee:	681b      	ldr	r3, [r3, #0]
 801f2f0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 801f2f2:	68fb      	ldr	r3, [r7, #12]
 801f2f4:	105a      	asrs	r2, r3, #1
 801f2f6:	4b1c      	ldr	r3, [pc, #112]	; (801f368 <_ZN8Madgwick7invSqrtEf+0x9c>)
 801f2f8:	1a9b      	subs	r3, r3, r2
 801f2fa:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 801f2fc:	f107 030c 	add.w	r3, r7, #12
 801f300:	681b      	ldr	r3, [r3, #0]
 801f302:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 801f304:	ed97 7a04 	vldr	s14, [r7, #16]
 801f308:	edd7 7a05 	vldr	s15, [r7, #20]
 801f30c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f310:	edd7 7a04 	vldr	s15, [r7, #16]
 801f314:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f318:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801f31c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f320:	edd7 7a04 	vldr	s15, [r7, #16]
 801f324:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f328:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 801f32c:	ed97 7a04 	vldr	s14, [r7, #16]
 801f330:	edd7 7a05 	vldr	s15, [r7, #20]
 801f334:	ee27 7a27 	vmul.f32	s14, s14, s15
 801f338:	edd7 7a04 	vldr	s15, [r7, #16]
 801f33c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f340:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801f344:	ee37 7a67 	vsub.f32	s14, s14, s15
 801f348:	edd7 7a04 	vldr	s15, [r7, #16]
 801f34c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f350:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 801f354:	693b      	ldr	r3, [r7, #16]
 801f356:	ee07 3a90 	vmov	s15, r3
}
 801f35a:	eeb0 0a67 	vmov.f32	s0, s15
 801f35e:	371c      	adds	r7, #28
 801f360:	46bd      	mov	sp, r7
 801f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f366:	4770      	bx	lr
 801f368:	5f3759df 	.word	0x5f3759df

0801f36c <_ZN20core_hardware_ButtonC1EP12GPIO_TypeDeft>:

#include "core_hardware_button.h"



core_hardware_Button::core_hardware_Button(GPIO_TypeDef* port, uint16_t pin) {
 801f36c:	b480      	push	{r7}
 801f36e:	b085      	sub	sp, #20
 801f370:	af00      	add	r7, sp, #0
 801f372:	60f8      	str	r0, [r7, #12]
 801f374:	60b9      	str	r1, [r7, #8]
 801f376:	4613      	mov	r3, r2
 801f378:	80fb      	strh	r3, [r7, #6]
	this->port = port;
 801f37a:	68fb      	ldr	r3, [r7, #12]
 801f37c:	68ba      	ldr	r2, [r7, #8]
 801f37e:	601a      	str	r2, [r3, #0]
	this->pin = pin;
 801f380:	68fb      	ldr	r3, [r7, #12]
 801f382:	88fa      	ldrh	r2, [r7, #6]
 801f384:	809a      	strh	r2, [r3, #4]
}
 801f386:	68fb      	ldr	r3, [r7, #12]
 801f388:	4618      	mov	r0, r3
 801f38a:	3714      	adds	r7, #20
 801f38c:	46bd      	mov	sp, r7
 801f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f392:	4770      	bx	lr

0801f394 <_ZN20core_hardware_Button5checkEv>:


uint8_t core_hardware_Button::check() {
 801f394:	b580      	push	{r7, lr}
 801f396:	b082      	sub	sp, #8
 801f398:	af00      	add	r7, sp, #0
 801f39a:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(this->port, this->pin);
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	681a      	ldr	r2, [r3, #0]
 801f3a0:	687b      	ldr	r3, [r7, #4]
 801f3a2:	889b      	ldrh	r3, [r3, #4]
 801f3a4:	4619      	mov	r1, r3
 801f3a6:	4610      	mov	r0, r2
 801f3a8:	f7e6 ff5e 	bl	8006268 <HAL_GPIO_ReadPin>
 801f3ac:	4603      	mov	r3, r0
}
 801f3ae:	4618      	mov	r0, r3
 801f3b0:	3708      	adds	r7, #8
 801f3b2:	46bd      	mov	sp, r7
 801f3b4:	bd80      	pop	{r7, pc}

0801f3b6 <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>:
 */


#include "core_hardware_led.h"

core_hardware_LED::core_hardware_LED(GPIO_TypeDef* GPIOx, uint16_t PINx) {
 801f3b6:	b480      	push	{r7}
 801f3b8:	b085      	sub	sp, #20
 801f3ba:	af00      	add	r7, sp, #0
 801f3bc:	60f8      	str	r0, [r7, #12]
 801f3be:	60b9      	str	r1, [r7, #8]
 801f3c0:	4613      	mov	r3, r2
 801f3c2:	80fb      	strh	r3, [r7, #6]
	this->GPIOx = GPIOx;
 801f3c4:	68fb      	ldr	r3, [r7, #12]
 801f3c6:	68ba      	ldr	r2, [r7, #8]
 801f3c8:	601a      	str	r2, [r3, #0]
	this->PINx = PINx;
 801f3ca:	68fb      	ldr	r3, [r7, #12]
 801f3cc:	88fa      	ldrh	r2, [r7, #6]
 801f3ce:	809a      	strh	r2, [r3, #4]
}
 801f3d0:	68fb      	ldr	r3, [r7, #12]
 801f3d2:	4618      	mov	r0, r3
 801f3d4:	3714      	adds	r7, #20
 801f3d6:	46bd      	mov	sp, r7
 801f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3dc:	4770      	bx	lr

0801f3de <_ZN17core_hardware_LED2onEv>:

void core_hardware_LED::on() {
 801f3de:	b580      	push	{r7, lr}
 801f3e0:	b082      	sub	sp, #8
 801f3e2:	af00      	add	r7, sp, #0
 801f3e4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_SET);
 801f3e6:	687b      	ldr	r3, [r7, #4]
 801f3e8:	6818      	ldr	r0, [r3, #0]
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	889b      	ldrh	r3, [r3, #4]
 801f3ee:	2201      	movs	r2, #1
 801f3f0:	4619      	mov	r1, r3
 801f3f2:	f7e6 ff51 	bl	8006298 <HAL_GPIO_WritePin>
}
 801f3f6:	bf00      	nop
 801f3f8:	3708      	adds	r7, #8
 801f3fa:	46bd      	mov	sp, r7
 801f3fc:	bd80      	pop	{r7, pc}

0801f3fe <_ZN17core_hardware_LED3offEv>:


void core_hardware_LED::off() {
 801f3fe:	b580      	push	{r7, lr}
 801f400:	b082      	sub	sp, #8
 801f402:	af00      	add	r7, sp, #0
 801f404:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_RESET);
 801f406:	687b      	ldr	r3, [r7, #4]
 801f408:	6818      	ldr	r0, [r3, #0]
 801f40a:	687b      	ldr	r3, [r7, #4]
 801f40c:	889b      	ldrh	r3, [r3, #4]
 801f40e:	2200      	movs	r2, #0
 801f410:	4619      	mov	r1, r3
 801f412:	f7e6 ff41 	bl	8006298 <HAL_GPIO_WritePin>
}
 801f416:	bf00      	nop
 801f418:	3708      	adds	r7, #8
 801f41a:	46bd      	mov	sp, r7
 801f41c:	bd80      	pop	{r7, pc}

0801f41e <_ZN17core_hardware_LED6toggleEv>:

void core_hardware_LED::toggle() {
 801f41e:	b580      	push	{r7, lr}
 801f420:	b082      	sub	sp, #8
 801f422:	af00      	add	r7, sp, #0
 801f424:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(this->GPIOx, this->PINx);
 801f426:	687b      	ldr	r3, [r7, #4]
 801f428:	681a      	ldr	r2, [r3, #0]
 801f42a:	687b      	ldr	r3, [r7, #4]
 801f42c:	889b      	ldrh	r3, [r3, #4]
 801f42e:	4619      	mov	r1, r3
 801f430:	4610      	mov	r0, r2
 801f432:	f7e6 ff4a 	bl	80062ca <HAL_GPIO_TogglePin>
}
 801f436:	bf00      	nop
 801f438:	3708      	adds	r7, #8
 801f43a:	46bd      	mov	sp, r7
 801f43c:	bd80      	pop	{r7, pc}
	...

0801f440 <_Z15spi_callback_rxP19__SPI_HandleTypeDef>:
#include "core_hardware_spi.h"

core_hardware_SPI_slave *active_spi_slave = NULL;

/* ====================================================== */
void spi_callback_rx(SPI_HandleTypeDef *hspi) {
 801f440:	b580      	push	{r7, lr}
 801f442:	b082      	sub	sp, #8
 801f444:	af00      	add	r7, sp, #0
 801f446:	6078      	str	r0, [r7, #4]

	if (active_spi_slave != NULL) {
 801f448:	4b06      	ldr	r3, [pc, #24]	; (801f464 <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x24>)
 801f44a:	681b      	ldr	r3, [r3, #0]
 801f44c:	2b00      	cmp	r3, #0
 801f44e:	d004      	beq.n	801f45a <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->rx_cmplt_function();
 801f450:	4b04      	ldr	r3, [pc, #16]	; (801f464 <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x24>)
 801f452:	681b      	ldr	r3, [r3, #0]
 801f454:	4618      	mov	r0, r3
 801f456:	f000 f8d9 	bl	801f60c <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv>
	}
}
 801f45a:	bf00      	nop
 801f45c:	3708      	adds	r7, #8
 801f45e:	46bd      	mov	sp, r7
 801f460:	bd80      	pop	{r7, pc}
 801f462:	bf00      	nop
 801f464:	2401e140 	.word	0x2401e140

0801f468 <_Z15spi_callback_txP19__SPI_HandleTypeDef>:

/* ====================================================== */
void spi_callback_tx(SPI_HandleTypeDef *hspi) {
 801f468:	b580      	push	{r7, lr}
 801f46a:	b082      	sub	sp, #8
 801f46c:	af00      	add	r7, sp, #0
 801f46e:	6078      	str	r0, [r7, #4]
	if (active_spi_slave != NULL) {
 801f470:	4b06      	ldr	r3, [pc, #24]	; (801f48c <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x24>)
 801f472:	681b      	ldr	r3, [r3, #0]
 801f474:	2b00      	cmp	r3, #0
 801f476:	d004      	beq.n	801f482 <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->tx_cmplt_function();
 801f478:	4b04      	ldr	r3, [pc, #16]	; (801f48c <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x24>)
 801f47a:	681b      	ldr	r3, [r3, #0]
 801f47c:	4618      	mov	r0, r3
 801f47e:	f000 f8d6 	bl	801f62e <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv>
	}
}
 801f482:	bf00      	nop
 801f484:	3708      	adds	r7, #8
 801f486:	46bd      	mov	sp, r7
 801f488:	bd80      	pop	{r7, pc}
 801f48a:	bf00      	nop
 801f48c:	2401e140 	.word	0x2401e140

0801f490 <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef>:

/* ====================================================== */
void spi_callback_rxtx(SPI_HandleTypeDef *hspi) {
 801f490:	b580      	push	{r7, lr}
 801f492:	b082      	sub	sp, #8
 801f494:	af00      	add	r7, sp, #0
 801f496:	6078      	str	r0, [r7, #4]
	if (active_spi_slave != NULL) {
 801f498:	4b06      	ldr	r3, [pc, #24]	; (801f4b4 <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x24>)
 801f49a:	681b      	ldr	r3, [r3, #0]
 801f49c:	2b00      	cmp	r3, #0
 801f49e:	d004      	beq.n	801f4aa <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->rxtx_cmplt_function();
 801f4a0:	4b04      	ldr	r3, [pc, #16]	; (801f4b4 <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x24>)
 801f4a2:	681b      	ldr	r3, [r3, #0]
 801f4a4:	4618      	mov	r0, r3
 801f4a6:	f000 f8d4 	bl	801f652 <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv>
	}
}
 801f4aa:	bf00      	nop
 801f4ac:	3708      	adds	r7, #8
 801f4ae:	46bd      	mov	sp, r7
 801f4b0:	bd80      	pop	{r7, pc}
 801f4b2:	bf00      	nop
 801f4b4:	2401e140 	.word	0x2401e140

0801f4b8 <_ZN29core_hardware_spi_callbacks_tC1Ev>:
	SPI_HandleTypeDef *hspi;
	uint8_t *rx_buffer;
	uint8_t *tx_buffer;
} core_hardware_spi_config_t;

typedef struct core_hardware_spi_callbacks_t {
 801f4b8:	b580      	push	{r7, lr}
 801f4ba:	b082      	sub	sp, #8
 801f4bc:	af00      	add	r7, sp, #0
 801f4be:	6078      	str	r0, [r7, #4]
 801f4c0:	687b      	ldr	r3, [r7, #4]
 801f4c2:	4618      	mov	r0, r3
 801f4c4:	f7f5 f88c 	bl	80145e0 <_ZN19core_utils_CallbackIvvEC1Ev>
 801f4c8:	687b      	ldr	r3, [r7, #4]
 801f4ca:	3320      	adds	r3, #32
 801f4cc:	4618      	mov	r0, r3
 801f4ce:	f7f5 f887 	bl	80145e0 <_ZN19core_utils_CallbackIvvEC1Ev>
 801f4d2:	687b      	ldr	r3, [r7, #4]
 801f4d4:	3340      	adds	r3, #64	; 0x40
 801f4d6:	4618      	mov	r0, r3
 801f4d8:	f7f5 f882 	bl	80145e0 <_ZN19core_utils_CallbackIvvEC1Ev>
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	4618      	mov	r0, r3
 801f4e0:	3708      	adds	r7, #8
 801f4e2:	46bd      	mov	sp, r7
 801f4e4:	bd80      	pop	{r7, pc}

0801f4e6 <_ZN23core_hardware_SPI_slaveC1Ev>:

/* ====================================================== */
core_hardware_SPI_slave::core_hardware_SPI_slave() {
 801f4e6:	b580      	push	{r7, lr}
 801f4e8:	b082      	sub	sp, #8
 801f4ea:	af00      	add	r7, sp, #0
 801f4ec:	6078      	str	r0, [r7, #4]
 801f4ee:	687b      	ldr	r3, [r7, #4]
 801f4f0:	330c      	adds	r3, #12
 801f4f2:	4618      	mov	r0, r3
 801f4f4:	f7ff ffe0 	bl	801f4b8 <_ZN29core_hardware_spi_callbacks_tC1Ev>

}
 801f4f8:	687b      	ldr	r3, [r7, #4]
 801f4fa:	4618      	mov	r0, r3
 801f4fc:	3708      	adds	r7, #8
 801f4fe:	46bd      	mov	sp, r7
 801f500:	bd80      	pop	{r7, pc}
	...

0801f504 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t>:

/* ====================================================== */
void core_hardware_SPI_slave::init(core_hardware_spi_config_t config) {
 801f504:	b590      	push	{r4, r7, lr}
 801f506:	b085      	sub	sp, #20
 801f508:	af00      	add	r7, sp, #0
 801f50a:	60f8      	str	r0, [r7, #12]
 801f50c:	4638      	mov	r0, r7
 801f50e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801f512:	68fb      	ldr	r3, [r7, #12]
 801f514:	461c      	mov	r4, r3
 801f516:	463b      	mov	r3, r7
 801f518:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801f51c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	active_spi_slave = this;
 801f520:	4a13      	ldr	r2, [pc, #76]	; (801f570 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x6c>)
 801f522:	68fb      	ldr	r3, [r7, #12]
 801f524:	6013      	str	r3, [r2, #0]

	this->callbacks.rx_callback.registered = 0;
 801f526:	68fb      	ldr	r3, [r7, #12]
 801f528:	2200      	movs	r2, #0
 801f52a:	741a      	strb	r2, [r3, #16]
	this->callbacks.tx_callback.registered = 0;
 801f52c:	68fb      	ldr	r3, [r7, #12]
 801f52e:	2200      	movs	r2, #0
 801f530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	this->callbacks.rxtx_callback.registered = 0;
 801f534:	68fb      	ldr	r3, [r7, #12]
 801f536:	2200      	movs	r2, #0
 801f538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_RX_COMPLETE_CB_ID,
 801f53c:	68fb      	ldr	r3, [r7, #12]
 801f53e:	681b      	ldr	r3, [r3, #0]
 801f540:	4a0c      	ldr	r2, [pc, #48]	; (801f574 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x70>)
 801f542:	2101      	movs	r1, #1
 801f544:	4618      	mov	r0, r3
 801f546:	f7ea fb89 	bl	8009c5c <HAL_SPI_RegisterCallback>
			spi_callback_rx);
	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_TX_COMPLETE_CB_ID,
 801f54a:	68fb      	ldr	r3, [r7, #12]
 801f54c:	681b      	ldr	r3, [r3, #0]
 801f54e:	4a0a      	ldr	r2, [pc, #40]	; (801f578 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x74>)
 801f550:	2100      	movs	r1, #0
 801f552:	4618      	mov	r0, r3
 801f554:	f7ea fb82 	bl	8009c5c <HAL_SPI_RegisterCallback>
			spi_callback_tx);
	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_TX_RX_COMPLETE_CB_ID,
 801f558:	68fb      	ldr	r3, [r7, #12]
 801f55a:	681b      	ldr	r3, [r3, #0]
 801f55c:	4a07      	ldr	r2, [pc, #28]	; (801f57c <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x78>)
 801f55e:	2102      	movs	r1, #2
 801f560:	4618      	mov	r0, r3
 801f562:	f7ea fb7b 	bl	8009c5c <HAL_SPI_RegisterCallback>
			spi_callback_rxtx);
}
 801f566:	bf00      	nop
 801f568:	3714      	adds	r7, #20
 801f56a:	46bd      	mov	sp, r7
 801f56c:	bd90      	pop	{r4, r7, pc}
 801f56e:	bf00      	nop
 801f570:	2401e140 	.word	0x2401e140
 801f574:	0801f441 	.word	0x0801f441
 801f578:	0801f469 	.word	0x0801f469
 801f57c:	0801f491 	.word	0x0801f491

0801f580 <_ZN23core_hardware_SPI_slave5startEv>:
/* ====================================================== */
void core_hardware_SPI_slave::start() {
 801f580:	b480      	push	{r7}
 801f582:	b083      	sub	sp, #12
 801f584:	af00      	add	r7, sp, #0
 801f586:	6078      	str	r0, [r7, #4]

}
 801f588:	bf00      	nop
 801f58a:	370c      	adds	r7, #12
 801f58c:	46bd      	mov	sp, r7
 801f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f592:	4770      	bx	lr

0801f594 <_ZN23core_hardware_SPI_slave11provideDataEPht>:
/* ====================================================== */
void core_hardware_SPI_slave::provideData(uint16_t len) {
	HAL_SPI_Transmit_DMA(this->config.hspi, this->config.tx_buffer, len);
}
/* ====================================================== */
void core_hardware_SPI_slave::provideData(uint8_t *data, uint16_t len) {
 801f594:	b580      	push	{r7, lr}
 801f596:	b084      	sub	sp, #16
 801f598:	af00      	add	r7, sp, #0
 801f59a:	60f8      	str	r0, [r7, #12]
 801f59c:	60b9      	str	r1, [r7, #8]
 801f59e:	4613      	mov	r3, r2
 801f5a0:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit_DMA(this->config.hspi, data, len);
 801f5a2:	68fb      	ldr	r3, [r7, #12]
 801f5a4:	681b      	ldr	r3, [r3, #0]
 801f5a6:	88fa      	ldrh	r2, [r7, #6]
 801f5a8:	68b9      	ldr	r1, [r7, #8]
 801f5aa:	4618      	mov	r0, r3
 801f5ac:	f7ea ff9e 	bl	800a4ec <HAL_SPI_Transmit_DMA>
}
 801f5b0:	bf00      	nop
 801f5b2:	3710      	adds	r7, #16
 801f5b4:	46bd      	mov	sp, r7
 801f5b6:	bd80      	pop	{r7, pc}

0801f5b8 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>:
	HAL_SPI_TransmitReceive_DMA(this->config.hspi, tx_buf, rx_buf, len);
}
/* ====================================================== */
void core_hardware_SPI_slave::registerCallback(
		core_hardware_spi_callback_id_t callback_id,
		core_utils_Callback<void, void> callback) {
 801f5b8:	b580      	push	{r7, lr}
 801f5ba:	b084      	sub	sp, #16
 801f5bc:	af00      	add	r7, sp, #0
 801f5be:	60f8      	str	r0, [r7, #12]
 801f5c0:	460b      	mov	r3, r1
 801f5c2:	607a      	str	r2, [r7, #4]
 801f5c4:	72fb      	strb	r3, [r7, #11]

	switch (callback_id) {
 801f5c6:	7afb      	ldrb	r3, [r7, #11]
 801f5c8:	2b02      	cmp	r3, #2
 801f5ca:	d014      	beq.n	801f5f6 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x3e>
 801f5cc:	2b02      	cmp	r3, #2
 801f5ce:	dc19      	bgt.n	801f604 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	d002      	beq.n	801f5da <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x22>
 801f5d4:	2b01      	cmp	r3, #1
 801f5d6:	d007      	beq.n	801f5e8 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x30>
	case CORE_HARDWARE_SPI_CALLBACK_RXTX: {
		this->callbacks.rxtx_callback = callback;
		break;
	}
	}
}
 801f5d8:	e014      	b.n	801f604 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.rx_callback = callback;
 801f5da:	68fb      	ldr	r3, [r7, #12]
 801f5dc:	330c      	adds	r3, #12
 801f5de:	6879      	ldr	r1, [r7, #4]
 801f5e0:	4618      	mov	r0, r3
 801f5e2:	f7f4 fdc5 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801f5e6:	e00d      	b.n	801f604 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.tx_callback = callback;
 801f5e8:	68fb      	ldr	r3, [r7, #12]
 801f5ea:	332c      	adds	r3, #44	; 0x2c
 801f5ec:	6879      	ldr	r1, [r7, #4]
 801f5ee:	4618      	mov	r0, r3
 801f5f0:	f7f4 fdbe 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801f5f4:	e006      	b.n	801f604 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.rxtx_callback = callback;
 801f5f6:	68fb      	ldr	r3, [r7, #12]
 801f5f8:	334c      	adds	r3, #76	; 0x4c
 801f5fa:	6879      	ldr	r1, [r7, #4]
 801f5fc:	4618      	mov	r0, r3
 801f5fe:	f7f4 fdb7 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801f602:	bf00      	nop
}
 801f604:	bf00      	nop
 801f606:	3710      	adds	r7, #16
 801f608:	46bd      	mov	sp, r7
 801f60a:	bd80      	pop	{r7, pc}

0801f60c <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv>:

/* ====================================================== */
void core_hardware_SPI_slave::rx_cmplt_function() {
 801f60c:	b580      	push	{r7, lr}
 801f60e:	b082      	sub	sp, #8
 801f610:	af00      	add	r7, sp, #0
 801f612:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.rx_callback.registered) {
 801f614:	687b      	ldr	r3, [r7, #4]
 801f616:	7c1b      	ldrb	r3, [r3, #16]
 801f618:	2b00      	cmp	r3, #0
 801f61a:	d004      	beq.n	801f626 <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv+0x1a>
		this->callbacks.rx_callback.call();
 801f61c:	687b      	ldr	r3, [r7, #4]
 801f61e:	330c      	adds	r3, #12
 801f620:	4618      	mov	r0, r3
 801f622:	f7f4 fc26 	bl	8013e72 <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 801f626:	bf00      	nop
 801f628:	3708      	adds	r7, #8
 801f62a:	46bd      	mov	sp, r7
 801f62c:	bd80      	pop	{r7, pc}

0801f62e <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv>:
/* ====================================================== */
void core_hardware_SPI_slave::tx_cmplt_function() {
 801f62e:	b580      	push	{r7, lr}
 801f630:	b082      	sub	sp, #8
 801f632:	af00      	add	r7, sp, #0
 801f634:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.tx_callback.registered) {
 801f636:	687b      	ldr	r3, [r7, #4]
 801f638:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f63c:	2b00      	cmp	r3, #0
 801f63e:	d004      	beq.n	801f64a <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv+0x1c>
		this->callbacks.tx_callback.call();
 801f640:	687b      	ldr	r3, [r7, #4]
 801f642:	332c      	adds	r3, #44	; 0x2c
 801f644:	4618      	mov	r0, r3
 801f646:	f7f4 fc14 	bl	8013e72 <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 801f64a:	bf00      	nop
 801f64c:	3708      	adds	r7, #8
 801f64e:	46bd      	mov	sp, r7
 801f650:	bd80      	pop	{r7, pc}

0801f652 <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv>:
/* ====================================================== */
void core_hardware_SPI_slave::rxtx_cmplt_function() {
 801f652:	b580      	push	{r7, lr}
 801f654:	b082      	sub	sp, #8
 801f656:	af00      	add	r7, sp, #0
 801f658:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.rxtx_callback.registered) {
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801f660:	2b00      	cmp	r3, #0
 801f662:	d004      	beq.n	801f66e <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv+0x1c>
		this->callbacks.rxtx_callback.call();
 801f664:	687b      	ldr	r3, [r7, #4]
 801f666:	334c      	adds	r3, #76	; 0x4c
 801f668:	4618      	mov	r0, r3
 801f66a:	f7f4 fc02 	bl	8013e72 <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 801f66e:	bf00      	nop
 801f670:	3708      	adds	r7, #8
 801f672:	46bd      	mov	sp, r7
 801f674:	bd80      	pop	{r7, pc}
	...

0801f678 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft>:
		CORE_HARDWARE_UART_MODE_DMA, .cobs_encode_rx = 1, .cobs_encode_tx = 1,
		.queues = 1, };


/* ============================================================================= */
void uartRxCmpltDMA_callback(UART_HandleTypeDef *huart, uint16_t size) {
 801f678:	b580      	push	{r7, lr}
 801f67a:	b084      	sub	sp, #16
 801f67c:	af00      	add	r7, sp, #0
 801f67e:	6078      	str	r0, [r7, #4]
 801f680:	460b      	mov	r3, r1
 801f682:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < num_uarts; i++) {
 801f684:	2300      	movs	r3, #0
 801f686:	60fb      	str	r3, [r7, #12]
 801f688:	e02b      	b.n	801f6e2 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x6a>
		if (!(uarts[i] == NULL) && (uarts[i]->get_huart() == huart)) {
 801f68a:	4a1b      	ldr	r2, [pc, #108]	; (801f6f8 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801f68c:	68fb      	ldr	r3, [r7, #12]
 801f68e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f692:	2b00      	cmp	r3, #0
 801f694:	d012      	beq.n	801f6bc <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x44>
 801f696:	4a18      	ldr	r2, [pc, #96]	; (801f6f8 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801f698:	68fb      	ldr	r3, [r7, #12]
 801f69a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801f69e:	4916      	ldr	r1, [pc, #88]	; (801f6f8 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801f6a0:	68fb      	ldr	r3, [r7, #12]
 801f6a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801f6a6:	681b      	ldr	r3, [r3, #0]
 801f6a8:	3304      	adds	r3, #4
 801f6aa:	681b      	ldr	r3, [r3, #0]
 801f6ac:	4610      	mov	r0, r2
 801f6ae:	4798      	blx	r3
 801f6b0:	4602      	mov	r2, r0
 801f6b2:	687b      	ldr	r3, [r7, #4]
 801f6b4:	4293      	cmp	r3, r2
 801f6b6:	d101      	bne.n	801f6bc <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x44>
 801f6b8:	2301      	movs	r3, #1
 801f6ba:	e000      	b.n	801f6be <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x46>
 801f6bc:	2300      	movs	r3, #0
 801f6be:	2b00      	cmp	r3, #0
 801f6c0:	d00c      	beq.n	801f6dc <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x64>
			uarts[i]->rxFunction(size);
 801f6c2:	4a0d      	ldr	r2, [pc, #52]	; (801f6f8 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801f6c4:	68fb      	ldr	r3, [r7, #12]
 801f6c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801f6ca:	490b      	ldr	r1, [pc, #44]	; (801f6f8 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801f6cc:	68fb      	ldr	r3, [r7, #12]
 801f6ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801f6d2:	681b      	ldr	r3, [r3, #0]
 801f6d4:	681b      	ldr	r3, [r3, #0]
 801f6d6:	8879      	ldrh	r1, [r7, #2]
 801f6d8:	4610      	mov	r0, r2
 801f6da:	4798      	blx	r3
	for (int i = 0; i < num_uarts; i++) {
 801f6dc:	68fb      	ldr	r3, [r7, #12]
 801f6de:	3301      	adds	r3, #1
 801f6e0:	60fb      	str	r3, [r7, #12]
 801f6e2:	4b06      	ldr	r3, [pc, #24]	; (801f6fc <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x84>)
 801f6e4:	781b      	ldrb	r3, [r3, #0]
 801f6e6:	461a      	mov	r2, r3
 801f6e8:	68fb      	ldr	r3, [r7, #12]
 801f6ea:	4293      	cmp	r3, r2
 801f6ec:	dbcd      	blt.n	801f68a <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x12>
		}
	}
}
 801f6ee:	bf00      	nop
 801f6f0:	bf00      	nop
 801f6f2:	3710      	adds	r7, #16
 801f6f4:	46bd      	mov	sp, r7
 801f6f6:	bd80      	pop	{r7, pc}
 801f6f8:	2401e144 	.word	0x2401e144
 801f6fc:	2401e158 	.word	0x2401e158

0801f700 <_ZN23simplexmotion_callbacksC1Ev>:

typedef enum simplexmotion_callback_id {
	SIMPLEXMOTION_CB_ERROR = 0,
} simplexmotion_callback_id;

typedef struct simplexmotion_callbacks {
 801f700:	b580      	push	{r7, lr}
 801f702:	b082      	sub	sp, #8
 801f704:	af00      	add	r7, sp, #0
 801f706:	6078      	str	r0, [r7, #4]
 801f708:	687b      	ldr	r3, [r7, #4]
 801f70a:	4618      	mov	r0, r3
 801f70c:	f7f4 ff68 	bl	80145e0 <_ZN19core_utils_CallbackIvvEC1Ev>
 801f710:	687b      	ldr	r3, [r7, #4]
 801f712:	4618      	mov	r0, r3
 801f714:	3708      	adds	r7, #8
 801f716:	46bd      	mov	sp, r7
 801f718:	bd80      	pop	{r7, pc}

0801f71a <_ZN18SimplexMotionMotorC1Ev>:
 *      Author: lehmann_workstation
 */

#include "simplexmotion.hpp"

SimplexMotionMotor::SimplexMotionMotor() {
 801f71a:	b580      	push	{r7, lr}
 801f71c:	b082      	sub	sp, #8
 801f71e:	af00      	add	r7, sp, #0
 801f720:	6078      	str	r0, [r7, #4]
 801f722:	687b      	ldr	r3, [r7, #4]
 801f724:	3304      	adds	r3, #4
 801f726:	4618      	mov	r0, r3
 801f728:	f7ff ffea 	bl	801f700 <_ZN23simplexmotion_callbacksC1Ev>
 801f72c:	687b      	ldr	r3, [r7, #4]
 801f72e:	f04f 0200 	mov.w	r2, #0
 801f732:	649a      	str	r2, [r3, #72]	; 0x48
 801f734:	687b      	ldr	r3, [r7, #4]
 801f736:	2200      	movs	r2, #0
 801f738:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 801f73c:	687b      	ldr	r3, [r7, #4]
 801f73e:	2200      	movs	r2, #0
 801f740:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 801f744:	687b      	ldr	r3, [r7, #4]
 801f746:	2200      	movs	r2, #0
 801f748:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

}
 801f74c:	687b      	ldr	r3, [r7, #4]
 801f74e:	4618      	mov	r0, r3
 801f750:	3708      	adds	r7, #8
 801f752:	46bd      	mov	sp, r7
 801f754:	bd80      	pop	{r7, pc}

0801f756 <_ZN18SimplexMotionMotor14writeRegistersEttPt>:

// ==============================================================
uint8_t SimplexMotionMotor::writeRegisters(uint16_t address,
		uint16_t num_registers, uint16_t *data) {
 801f756:	b580      	push	{r7, lr}
 801f758:	b08c      	sub	sp, #48	; 0x30
 801f75a:	af02      	add	r7, sp, #8
 801f75c:	60f8      	str	r0, [r7, #12]
 801f75e:	607b      	str	r3, [r7, #4]
 801f760:	460b      	mov	r3, r1
 801f762:	817b      	strh	r3, [r7, #10]
 801f764:	4613      	mov	r3, r2
 801f766:	813b      	strh	r3, [r7, #8]

	int32_t u32NotificationValue;
	modbus_query_t telegram;

	telegram.u8id = this->_config.id;
 801f768:	68fb      	ldr	r3, [r7, #12]
 801f76a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801f76e:	753b      	strb	r3, [r7, #20]

	if (num_registers > 1) {
 801f770:	893b      	ldrh	r3, [r7, #8]
 801f772:	2b01      	cmp	r3, #1
 801f774:	d902      	bls.n	801f77c <_ZN18SimplexMotionMotor14writeRegistersEttPt+0x26>
		telegram.u8fct = MB_FC_WRITE_MULTIPLE_REGISTERS;
 801f776:	2310      	movs	r3, #16
 801f778:	757b      	strb	r3, [r7, #21]
 801f77a:	e001      	b.n	801f780 <_ZN18SimplexMotionMotor14writeRegistersEttPt+0x2a>
	} else {
		telegram.u8fct = MB_FC_WRITE_REGISTER;
 801f77c:	2306      	movs	r3, #6
 801f77e:	757b      	strb	r3, [r7, #21]
	}
	telegram.u16RegAdd = address; //read temp of motor = 101
 801f780:	897b      	ldrh	r3, [r7, #10]
 801f782:	82fb      	strh	r3, [r7, #22]
	telegram.u16CoilsNo = num_registers;
 801f784:	893b      	ldrh	r3, [r7, #8]
 801f786:	833b      	strh	r3, [r7, #24]
	telegram.u16reg = data;
 801f788:	687b      	ldr	r3, [r7, #4]
 801f78a:	61fb      	str	r3, [r7, #28]

	this->_config.modbus->query(telegram);
 801f78c:	68fb      	ldr	r3, [r7, #12]
 801f78e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801f790:	6a3b      	ldr	r3, [r7, #32]
 801f792:	9300      	str	r3, [sp, #0]
 801f794:	f107 0314 	add.w	r3, r7, #20
 801f798:	cb0e      	ldmia	r3, {r1, r2, r3}
 801f79a:	f7fd f89f 	bl	801c8dc <_ZN12ModbusMaster5queryE14modbus_query_t>
//	u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finished
//	uint32_t ticks1 = osKernelGetTickCount();
	u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finished
 801f79e:	f04f 31ff 	mov.w	r1, #4294967295
 801f7a2:	2001      	movs	r0, #1
 801f7a4:	f7f2 feda 	bl	801255c <ulTaskNotifyTake>
 801f7a8:	4603      	mov	r3, r0
 801f7aa:	627b      	str	r3, [r7, #36]	; 0x24
//	uint32_t ticks2 = osKernelGetTickCount();

	if (u32NotificationValue != ERR_OK_QUERY) {
 801f7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7ae:	f113 0f0b 	cmn.w	r3, #11
 801f7b2:	d00c      	beq.n	801f7ce <_ZN18SimplexMotionMotor14writeRegistersEttPt+0x78>
		if (u32NotificationValue == ERR_TIME_OUT){
 801f7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7b6:	f113 0f08 	cmn.w	r3, #8
 801f7ba:	d101      	bne.n	801f7c0 <_ZN18SimplexMotionMotor14writeRegistersEttPt+0x6a>
			nop();
 801f7bc:	f7f4 fcf8 	bl	80141b0 <_Z3nopv>
		}
		this->error_handler(SIMPLEXMOTION_ERROR_EXTERNAL_CONNECTION);
 801f7c0:	f248 0101 	movw	r1, #32769	; 0x8001
 801f7c4:	68f8      	ldr	r0, [r7, #12]
 801f7c6:	f000 fb52 	bl	801fe6e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>
		return 0;
 801f7ca:	2300      	movs	r3, #0
 801f7cc:	e000      	b.n	801f7d0 <_ZN18SimplexMotionMotor14writeRegistersEttPt+0x7a>
	} else {
		return 1;
 801f7ce:	2301      	movs	r3, #1
	}
}
 801f7d0:	4618      	mov	r0, r3
 801f7d2:	3728      	adds	r7, #40	; 0x28
 801f7d4:	46bd      	mov	sp, r7
 801f7d6:	bd80      	pop	{r7, pc}

0801f7d8 <_ZN18SimplexMotionMotor13readRegistersEttPt>:

// ==============================================================
uint8_t SimplexMotionMotor::readRegisters(uint16_t address,
		uint16_t num_registers, uint16_t *data) {
 801f7d8:	b580      	push	{r7, lr}
 801f7da:	b08c      	sub	sp, #48	; 0x30
 801f7dc:	af02      	add	r7, sp, #8
 801f7de:	60f8      	str	r0, [r7, #12]
 801f7e0:	607b      	str	r3, [r7, #4]
 801f7e2:	460b      	mov	r3, r1
 801f7e4:	817b      	strh	r3, [r7, #10]
 801f7e6:	4613      	mov	r3, r2
 801f7e8:	813b      	strh	r3, [r7, #8]
	int32_t u32NotificationValue;
	modbus_query_t telegram;

	telegram.u8id = this->_config.id;
 801f7ea:	68fb      	ldr	r3, [r7, #12]
 801f7ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801f7f0:	753b      	strb	r3, [r7, #20]
	telegram.u8fct = MB_FC_READ_REGISTERS;
 801f7f2:	2303      	movs	r3, #3
 801f7f4:	757b      	strb	r3, [r7, #21]
	telegram.u16RegAdd = address; //read temp of motor = 101
 801f7f6:	897b      	ldrh	r3, [r7, #10]
 801f7f8:	82fb      	strh	r3, [r7, #22]
	telegram.u16CoilsNo = num_registers;
 801f7fa:	893b      	ldrh	r3, [r7, #8]
 801f7fc:	833b      	strh	r3, [r7, #24]
	telegram.u16reg = data;
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	61fb      	str	r3, [r7, #28]

	this->_config.modbus->query(telegram);
 801f802:	68fb      	ldr	r3, [r7, #12]
 801f804:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801f806:	6a3b      	ldr	r3, [r7, #32]
 801f808:	9300      	str	r3, [sp, #0]
 801f80a:	f107 0314 	add.w	r3, r7, #20
 801f80e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801f810:	f7fd f864 	bl	801c8dc <_ZN12ModbusMaster5queryE14modbus_query_t>
	u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finished
 801f814:	f04f 31ff 	mov.w	r1, #4294967295
 801f818:	2001      	movs	r0, #1
 801f81a:	f7f2 fe9f 	bl	801255c <ulTaskNotifyTake>
 801f81e:	4603      	mov	r3, r0
 801f820:	627b      	str	r3, [r7, #36]	; 0x24
	if (u32NotificationValue != ERR_OK_QUERY) {
 801f822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f824:	f113 0f0b 	cmn.w	r3, #11
 801f828:	d00c      	beq.n	801f844 <_ZN18SimplexMotionMotor13readRegistersEttPt+0x6c>
		if (u32NotificationValue == ERR_TIME_OUT){
 801f82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f82c:	f113 0f08 	cmn.w	r3, #8
 801f830:	d101      	bne.n	801f836 <_ZN18SimplexMotionMotor13readRegistersEttPt+0x5e>
			nop();
 801f832:	f7f4 fcbd 	bl	80141b0 <_Z3nopv>
		}
		this->error_handler(SIMPLEXMOTION_ERROR_EXTERNAL_CONNECTION);
 801f836:	f248 0101 	movw	r1, #32769	; 0x8001
 801f83a:	68f8      	ldr	r0, [r7, #12]
 801f83c:	f000 fb17 	bl	801fe6e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>
		return 0;
 801f840:	2300      	movs	r3, #0
 801f842:	e000      	b.n	801f846 <_ZN18SimplexMotionMotor13readRegistersEttPt+0x6e>
	} else {
		return 1;
 801f844:	2301      	movs	r3, #1
	}
}
 801f846:	4618      	mov	r0, r3
 801f848:	3728      	adds	r7, #40	; 0x28
 801f84a:	46bd      	mov	sp, r7
 801f84c:	bd80      	pop	{r7, pc}

0801f84e <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t>:

// ==============================================================
uint8_t SimplexMotionMotor::init(simplexmotion_config_t config) {
 801f84e:	b580      	push	{r7, lr}
 801f850:	b088      	sub	sp, #32
 801f852:	af00      	add	r7, sp, #0
 801f854:	60f8      	str	r0, [r7, #12]
 801f856:	1d3b      	adds	r3, r7, #4
 801f858:	e883 0006 	stmia.w	r3, {r1, r2}

	this->_config = config;
 801f85c:	68fb      	ldr	r3, [r7, #12]
 801f85e:	3350      	adds	r3, #80	; 0x50
 801f860:	1d3a      	adds	r2, r7, #4
 801f862:	e892 0003 	ldmia.w	r2, {r0, r1}
 801f866:	e883 0003 	stmia.w	r3, {r0, r1}

	this->_checked = 0;
 801f86a:	68fb      	ldr	r3, [r7, #12]
 801f86c:	2200      	movs	r2, #0
 801f86e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	this->_init = 0;
 801f872:	68fb      	ldr	r3, [r7, #12]
 801f874:	2200      	movs	r2, #0
 801f876:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	uint8_t ret = 0;
 801f87a:	2300      	movs	r3, #0
 801f87c:	77fb      	strb	r3, [r7, #31]

	// Reset the motor
	ret = this->setMode(SIMPLEXMOTION_MODE_RESET);
 801f87e:	2101      	movs	r1, #1
 801f880:	68f8      	ldr	r0, [r7, #12]
 801f882:	f000 f8b7 	bl	801f9f4 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>
 801f886:	4603      	mov	r3, r0
 801f888:	77fb      	strb	r3, [r7, #31]

	// Read the motor status
	simplexmotion_status_t status;
	ret = this->getStatus(&status);
 801f88a:	f107 0314 	add.w	r3, r7, #20
 801f88e:	4619      	mov	r1, r3
 801f890:	68f8      	ldr	r0, [r7, #12]
 801f892:	f000 fa90 	bl	801fdb6 <_ZN18SimplexMotionMotor9getStatusEP22simplexmotion_status_t>
 801f896:	4603      	mov	r3, r0
 801f898:	77fb      	strb	r3, [r7, #31]

	if (not (ret)) {
 801f89a:	7ffb      	ldrb	r3, [r7, #31]
 801f89c:	2b00      	cmp	r3, #0
 801f89e:	d101      	bne.n	801f8a4 <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t+0x56>
		return 0;
 801f8a0:	2300      	movs	r3, #0
 801f8a2:	e008      	b.n	801f8b6 <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t+0x68>
	// Read the torque limit
//	float torque_limit = this->getTorqueLimit();

	// Read the ...

	this->_init = 1;
 801f8a4:	68fb      	ldr	r3, [r7, #12]
 801f8a6:	2201      	movs	r2, #1
 801f8a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	this->_checked = 0;
 801f8ac:	68fb      	ldr	r3, [r7, #12]
 801f8ae:	2200      	movs	r2, #0
 801f8b0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	return 1;
 801f8b4:	2301      	movs	r3, #1
}
 801f8b6:	4618      	mov	r0, r3
 801f8b8:	3720      	adds	r7, #32
 801f8ba:	46bd      	mov	sp, r7
 801f8bc:	bd80      	pop	{r7, pc}

0801f8be <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t>:

// ==============================================================
void SimplexMotionMotor::start(simplexmotion_mode_t mode) {
 801f8be:	b580      	push	{r7, lr}
 801f8c0:	b084      	sub	sp, #16
 801f8c2:	af00      	add	r7, sp, #0
 801f8c4:	6078      	str	r0, [r7, #4]
 801f8c6:	460b      	mov	r3, r1
 801f8c8:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 801f8ca:	2300      	movs	r3, #0
 801f8cc:	73fb      	strb	r3, [r7, #15]
	if (!this->_init) {
 801f8ce:	687b      	ldr	r3, [r7, #4]
 801f8d0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	d100      	bne.n	801f8da <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t+0x1c>
		while (1) {
 801f8d8:	e7fe      	b.n	801f8d8 <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t+0x1a>
//
//		}
	}

	// Set the target to 0
	ret = this->setTarget(0);
 801f8da:	2100      	movs	r1, #0
 801f8dc:	6878      	ldr	r0, [r7, #4]
 801f8de:	f000 fa4b 	bl	801fd78 <_ZN18SimplexMotionMotor9setTargetEl>
 801f8e2:	4603      	mov	r3, r0
 801f8e4:	73fb      	strb	r3, [r7, #15]
	if (not (ret)) {
 801f8e6:	7bfb      	ldrb	r3, [r7, #15]
 801f8e8:	2b00      	cmp	r3, #0
 801f8ea:	d104      	bne.n	801f8f6 <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t+0x38>
		this->error_handler(SIMPLEXMOTION_ERROR_EXTERNAL_CONNECTION);
 801f8ec:	f248 0101 	movw	r1, #32769	; 0x8001
 801f8f0:	6878      	ldr	r0, [r7, #4]
 801f8f2:	f000 fabc 	bl	801fe6e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>
	}

	// Set the corresponding mode
	ret = this->setMode(mode);
 801f8f6:	78fb      	ldrb	r3, [r7, #3]
 801f8f8:	4619      	mov	r1, r3
 801f8fa:	6878      	ldr	r0, [r7, #4]
 801f8fc:	f000 f87a 	bl	801f9f4 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>
 801f900:	4603      	mov	r3, r0
 801f902:	73fb      	strb	r3, [r7, #15]
	if (not (ret)) {
 801f904:	7bfb      	ldrb	r3, [r7, #15]
 801f906:	2b00      	cmp	r3, #0
 801f908:	d104      	bne.n	801f914 <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t+0x56>
		this->error_handler(SIMPLEXMOTION_ERROR_EXTERNAL_CONNECTION);
 801f90a:	f248 0101 	movw	r1, #32769	; 0x8001
 801f90e:	6878      	ldr	r0, [r7, #4]
 801f910:	f000 faad 	bl	801fe6e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>
	}
}
 801f914:	bf00      	nop
 801f916:	3710      	adds	r7, #16
 801f918:	46bd      	mov	sp, r7
 801f91a:	bd80      	pop	{r7, pc}

0801f91c <_ZN18SimplexMotionMotor13startup_checkEv>:

// ==============================================================

uint8_t SimplexMotionMotor::startup_check() {
 801f91c:	b580      	push	{r7, lr}
 801f91e:	b086      	sub	sp, #24
 801f920:	af00      	add	r7, sp, #0
 801f922:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 801f924:	2300      	movs	r3, #0
 801f926:	75fb      	strb	r3, [r7, #23]

	// Beep the motor once
	ret = this->beep(200);
 801f928:	21c8      	movs	r1, #200	; 0xc8
 801f92a:	6878      	ldr	r0, [r7, #4]
 801f92c:	f000 f8b1 	bl	801fa92 <_ZN18SimplexMotionMotor4beepEt>
 801f930:	4603      	mov	r3, r0
 801f932:	75fb      	strb	r3, [r7, #23]
	if (not (ret)) {
 801f934:	7dfb      	ldrb	r3, [r7, #23]
 801f936:	2b00      	cmp	r3, #0
 801f938:	d101      	bne.n	801f93e <_ZN18SimplexMotionMotor13startup_checkEv+0x22>
		return 0;
 801f93a:	2300      	movs	r3, #0
 801f93c:	e052      	b.n	801f9e4 <_ZN18SimplexMotionMotor13startup_checkEv+0xc8>
	}

	osDelay(250);
 801f93e:	20fa      	movs	r0, #250	; 0xfa
 801f940:	f7f0 f906 	bl	800fb50 <osDelay>

	ret = this->stop();
 801f944:	6878      	ldr	r0, [r7, #4]
 801f946:	f000 f88d 	bl	801fa64 <_ZN18SimplexMotionMotor4stopEv>
 801f94a:	4603      	mov	r3, r0
 801f94c:	75fb      	strb	r3, [r7, #23]
	if (not (ret)) {
 801f94e:	7dfb      	ldrb	r3, [r7, #23]
 801f950:	2b00      	cmp	r3, #0
 801f952:	d101      	bne.n	801f958 <_ZN18SimplexMotionMotor13startup_checkEv+0x3c>
		return 0;
 801f954:	2300      	movs	r3, #0
 801f956:	e045      	b.n	801f9e4 <_ZN18SimplexMotionMotor13startup_checkEv+0xc8>
	}
	// Set the motor into torque mode
	ret = this->setMode(SIMPLEXMOTION_MODE_TORQUE);
 801f958:	2128      	movs	r1, #40	; 0x28
 801f95a:	6878      	ldr	r0, [r7, #4]
 801f95c:	f000 f84a 	bl	801f9f4 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>
 801f960:	4603      	mov	r3, r0
 801f962:	75fb      	strb	r3, [r7, #23]

	if (not (ret)) {
 801f964:	7dfb      	ldrb	r3, [r7, #23]
 801f966:	2b00      	cmp	r3, #0
 801f968:	d101      	bne.n	801f96e <_ZN18SimplexMotionMotor13startup_checkEv+0x52>
		return 0;
 801f96a:	2300      	movs	r3, #0
 801f96c:	e03a      	b.n	801f9e4 <_ZN18SimplexMotionMotor13startup_checkEv+0xc8>
	}

	// Read the current position of the motor
	int32_t position_before = this->getPositionRaw();
 801f96e:	6878      	ldr	r0, [r7, #4]
 801f970:	f000 f8a9 	bl	801fac6 <_ZN18SimplexMotionMotor14getPositionRawEv>
 801f974:	6138      	str	r0, [r7, #16]

	// Apply a small torque for a short amount of time
	this->setTorque(0.03);
 801f976:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801f9ec <_ZN18SimplexMotionMotor13startup_checkEv+0xd0>
 801f97a:	6878      	ldr	r0, [r7, #4]
 801f97c:	f000 f9c0 	bl	801fd00 <_ZN18SimplexMotionMotor9setTorqueEf>
	osDelay(250);
 801f980:	20fa      	movs	r0, #250	; 0xfa
 801f982:	f7f0 f8e5 	bl	800fb50 <osDelay>
	this->setTorque(0.0);
 801f986:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 801f9f0 <_ZN18SimplexMotionMotor13startup_checkEv+0xd4>
 801f98a:	6878      	ldr	r0, [r7, #4]
 801f98c:	f000 f9b8 	bl	801fd00 <_ZN18SimplexMotionMotor9setTorqueEf>
	osDelay(250);
 801f990:	20fa      	movs	r0, #250	; 0xfa
 801f992:	f7f0 f8dd 	bl	800fb50 <osDelay>
	// Turn the motor off
//	this->stop();

	// Read the current position of the motor
	int32_t position_after = this->getPositionRaw();
 801f996:	6878      	ldr	r0, [r7, #4]
 801f998:	f000 f895 	bl	801fac6 <_ZN18SimplexMotionMotor14getPositionRawEv>
 801f99c:	60f8      	str	r0, [r7, #12]

	// Check if the position has changed
	if (position_before == position_after) {
 801f99e:	693a      	ldr	r2, [r7, #16]
 801f9a0:	68fb      	ldr	r3, [r7, #12]
 801f9a2:	429a      	cmp	r2, r3
 801f9a4:	d101      	bne.n	801f9aa <_ZN18SimplexMotionMotor13startup_checkEv+0x8e>
		return 0;
 801f9a6:	2300      	movs	r3, #0
 801f9a8:	e01c      	b.n	801f9e4 <_ZN18SimplexMotionMotor13startup_checkEv+0xc8>
	}

	this->beep(200);
 801f9aa:	21c8      	movs	r1, #200	; 0xc8
 801f9ac:	6878      	ldr	r0, [r7, #4]
 801f9ae:	f000 f870 	bl	801fa92 <_ZN18SimplexMotionMotor4beepEt>
	osDelay(150);
 801f9b2:	2096      	movs	r0, #150	; 0x96
 801f9b4:	f7f0 f8cc 	bl	800fb50 <osDelay>
	this->stop();
 801f9b8:	6878      	ldr	r0, [r7, #4]
 801f9ba:	f000 f853 	bl	801fa64 <_ZN18SimplexMotionMotor4stopEv>
	osDelay(150);
 801f9be:	2096      	movs	r0, #150	; 0x96
 801f9c0:	f7f0 f8c6 	bl	800fb50 <osDelay>
	this->beep(200);
 801f9c4:	21c8      	movs	r1, #200	; 0xc8
 801f9c6:	6878      	ldr	r0, [r7, #4]
 801f9c8:	f000 f863 	bl	801fa92 <_ZN18SimplexMotionMotor4beepEt>
	osDelay(300);
 801f9cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801f9d0:	f7f0 f8be 	bl	800fb50 <osDelay>
	this->stop();
 801f9d4:	6878      	ldr	r0, [r7, #4]
 801f9d6:	f000 f845 	bl	801fa64 <_ZN18SimplexMotionMotor4stopEv>

	this->_checked = 1;
 801f9da:	687b      	ldr	r3, [r7, #4]
 801f9dc:	2201      	movs	r2, #1
 801f9de:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	return 1;
 801f9e2:	2301      	movs	r3, #1
}
 801f9e4:	4618      	mov	r0, r3
 801f9e6:	3718      	adds	r7, #24
 801f9e8:	46bd      	mov	sp, r7
 801f9ea:	bd80      	pop	{r7, pc}
 801f9ec:	3cf5c28f 	.word	0x3cf5c28f
 801f9f0:	00000000 	.word	0x00000000

0801f9f4 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>:
uint8_t SimplexMotionMotor::check() {

	return 1;
}
// ==============================================================
uint8_t SimplexMotionMotor::setMode(simplexmotion_mode_t mode) {
 801f9f4:	b580      	push	{r7, lr}
 801f9f6:	b084      	sub	sp, #16
 801f9f8:	af00      	add	r7, sp, #0
 801f9fa:	6078      	str	r0, [r7, #4]
 801f9fc:	460b      	mov	r3, r1
 801f9fe:	70fb      	strb	r3, [r7, #3]
	uint16_t data = (uint16_t) mode;
 801fa00:	78fb      	ldrb	r3, [r7, #3]
 801fa02:	b29b      	uxth	r3, r3
 801fa04:	81bb      	strh	r3, [r7, #12]

	// Set the mode
	uint8_t write_success = this->writeRegisters(SIMPLEXMOTION_REG_MODE, 1,
 801fa06:	f107 030c 	add.w	r3, r7, #12
 801fa0a:	2201      	movs	r2, #1
 801fa0c:	f240 118f 	movw	r1, #399	; 0x18f
 801fa10:	6878      	ldr	r0, [r7, #4]
 801fa12:	f7ff fea0 	bl	801f756 <_ZN18SimplexMotionMotor14writeRegistersEttPt>
 801fa16:	4603      	mov	r3, r0
 801fa18:	73fb      	strb	r3, [r7, #15]
			&data);
	if (not write_success) {
 801fa1a:	7bfb      	ldrb	r3, [r7, #15]
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	d101      	bne.n	801fa24 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x30>
		return 0;
 801fa20:	2300      	movs	r3, #0
 801fa22:	e01b      	b.n	801fa5c <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x68>
	}

	// Read back the mode
	uint16_t rx_data = 0;
 801fa24:	2300      	movs	r3, #0
 801fa26:	817b      	strh	r3, [r7, #10]
	uint8_t read_success = this->readRegisters(SIMPLEXMOTION_REG_MODE, 1,
 801fa28:	f107 030a 	add.w	r3, r7, #10
 801fa2c:	2201      	movs	r2, #1
 801fa2e:	f240 118f 	movw	r1, #399	; 0x18f
 801fa32:	6878      	ldr	r0, [r7, #4]
 801fa34:	f7ff fed0 	bl	801f7d8 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801fa38:	4603      	mov	r3, r0
 801fa3a:	73bb      	strb	r3, [r7, #14]
			&rx_data);

	if (not read_success) {
 801fa3c:	7bbb      	ldrb	r3, [r7, #14]
 801fa3e:	2b00      	cmp	r3, #0
 801fa40:	d101      	bne.n	801fa46 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x52>
		return 0;
 801fa42:	2300      	movs	r3, #0
 801fa44:	e00a      	b.n	801fa5c <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x68>
	}

	this->mode = rx_data;
 801fa46:	897a      	ldrh	r2, [r7, #10]
 801fa48:	687b      	ldr	r3, [r7, #4]
 801fa4a:	801a      	strh	r2, [r3, #0]

	if (rx_data != mode) {
 801fa4c:	78fb      	ldrb	r3, [r7, #3]
 801fa4e:	b29a      	uxth	r2, r3
 801fa50:	897b      	ldrh	r3, [r7, #10]
 801fa52:	429a      	cmp	r2, r3
 801fa54:	d001      	beq.n	801fa5a <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x66>
		return 0;
 801fa56:	2300      	movs	r3, #0
 801fa58:	e000      	b.n	801fa5c <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x68>
	}
	return 1;
 801fa5a:	2301      	movs	r3, #1
}
 801fa5c:	4618      	mov	r0, r3
 801fa5e:	3710      	adds	r7, #16
 801fa60:	46bd      	mov	sp, r7
 801fa62:	bd80      	pop	{r7, pc}

0801fa64 <_ZN18SimplexMotionMotor4stopEv>:

// ==============================================================
uint8_t SimplexMotionMotor::stop() {
 801fa64:	b580      	push	{r7, lr}
 801fa66:	b084      	sub	sp, #16
 801fa68:	af00      	add	r7, sp, #0
 801fa6a:	6078      	str	r0, [r7, #4]
//	uint16_t data = SIMPLEXMOTION_MODE_QUICKSTOP;
	uint16_t data = SIMPLEXMOTION_MODE_OFF;
 801fa6c:	2300      	movs	r3, #0
 801fa6e:	81fb      	strh	r3, [r7, #14]
	this->setTarget(0);
 801fa70:	2100      	movs	r1, #0
 801fa72:	6878      	ldr	r0, [r7, #4]
 801fa74:	f000 f980 	bl	801fd78 <_ZN18SimplexMotionMotor9setTargetEl>
	return this->writeRegisters(SIMPLEXMOTION_REG_MODE, 1, &data);
 801fa78:	f107 030e 	add.w	r3, r7, #14
 801fa7c:	2201      	movs	r2, #1
 801fa7e:	f240 118f 	movw	r1, #399	; 0x18f
 801fa82:	6878      	ldr	r0, [r7, #4]
 801fa84:	f7ff fe67 	bl	801f756 <_ZN18SimplexMotionMotor14writeRegistersEttPt>
 801fa88:	4603      	mov	r3, r0
}
 801fa8a:	4618      	mov	r0, r3
 801fa8c:	3710      	adds	r7, #16
 801fa8e:	46bd      	mov	sp, r7
 801fa90:	bd80      	pop	{r7, pc}

0801fa92 <_ZN18SimplexMotionMotor4beepEt>:

// ==============================================================
uint8_t SimplexMotionMotor::beep(uint16_t amplitude) {
 801fa92:	b580      	push	{r7, lr}
 801fa94:	b084      	sub	sp, #16
 801fa96:	af00      	add	r7, sp, #0
 801fa98:	6078      	str	r0, [r7, #4]
 801fa9a:	460b      	mov	r3, r1
 801fa9c:	807b      	strh	r3, [r7, #2]
	uint8_t ret = 0;
 801fa9e:	2300      	movs	r3, #0
 801faa0:	73fb      	strb	r3, [r7, #15]
	ret = this->setMode(SIMPLEXMOTION_MODE_BEEP);
 801faa2:	213c      	movs	r1, #60	; 0x3c
 801faa4:	6878      	ldr	r0, [r7, #4]
 801faa6:	f7ff ffa5 	bl	801f9f4 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>
 801faaa:	4603      	mov	r3, r0
 801faac:	73fb      	strb	r3, [r7, #15]



	// Set the amplitude
	ret = this->setTarget((int32_t) amplitude);
 801faae:	887b      	ldrh	r3, [r7, #2]
 801fab0:	4619      	mov	r1, r3
 801fab2:	6878      	ldr	r0, [r7, #4]
 801fab4:	f000 f960 	bl	801fd78 <_ZN18SimplexMotionMotor9setTargetEl>
 801fab8:	4603      	mov	r3, r0
 801faba:	73fb      	strb	r3, [r7, #15]

	return ret;
 801fabc:	7bfb      	ldrb	r3, [r7, #15]
}
 801fabe:	4618      	mov	r0, r3
 801fac0:	3710      	adds	r7, #16
 801fac2:	46bd      	mov	sp, r7
 801fac4:	bd80      	pop	{r7, pc}

0801fac6 <_ZN18SimplexMotionMotor14getPositionRawEv>:
	position = data[0] << 16 | data[1];
	return position / 4096.0 * this->_config.direction;
}

// ==============================================================
int32_t SimplexMotionMotor::getPositionRaw() {
 801fac6:	b580      	push	{r7, lr}
 801fac8:	b086      	sub	sp, #24
 801faca:	af00      	add	r7, sp, #0
 801facc:	6078      	str	r0, [r7, #4]
	int32_t position = 0;
 801face:	2300      	movs	r3, #0
 801fad0:	617b      	str	r3, [r7, #20]
	uint16_t data[2] = { 0 };
 801fad2:	2300      	movs	r3, #0
 801fad4:	60fb      	str	r3, [r7, #12]

	uint8_t success = this->readRegisters(SIMPLEXMOTION_REG_POSITION, 2, data);
 801fad6:	f107 030c 	add.w	r3, r7, #12
 801fada:	2202      	movs	r2, #2
 801fadc:	21c7      	movs	r1, #199	; 0xc7
 801fade:	6878      	ldr	r0, [r7, #4]
 801fae0:	f7ff fe7a 	bl	801f7d8 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801fae4:	4603      	mov	r3, r0
 801fae6:	74fb      	strb	r3, [r7, #19]

	if (!success) {
 801fae8:	7cfb      	ldrb	r3, [r7, #19]
 801faea:	2b00      	cmp	r3, #0
 801faec:	d101      	bne.n	801faf2 <_ZN18SimplexMotionMotor14getPositionRawEv+0x2c>
		return 0;
 801faee:	2300      	movs	r3, #0
 801faf0:	e005      	b.n	801fafe <_ZN18SimplexMotionMotor14getPositionRawEv+0x38>
	}
	position = data[0] << 16 | data[1];
 801faf2:	89bb      	ldrh	r3, [r7, #12]
 801faf4:	041b      	lsls	r3, r3, #16
 801faf6:	89fa      	ldrh	r2, [r7, #14]
 801faf8:	4313      	orrs	r3, r2
 801fafa:	617b      	str	r3, [r7, #20]

	return position;
 801fafc:	697b      	ldr	r3, [r7, #20]
}
 801fafe:	4618      	mov	r0, r3
 801fb00:	3718      	adds	r7, #24
 801fb02:	46bd      	mov	sp, r7
 801fb04:	bd80      	pop	{r7, pc}
	...

0801fb08 <_ZN18SimplexMotionMotor10getVoltageEv>:

// ==============================================================
float SimplexMotionMotor::getVoltage(){
 801fb08:	b580      	push	{r7, lr}
 801fb0a:	b084      	sub	sp, #16
 801fb0c:	af00      	add	r7, sp, #0
 801fb0e:	6078      	str	r0, [r7, #4]
	float voltage = 0;
 801fb10:	f04f 0300 	mov.w	r3, #0
 801fb14:	60fb      	str	r3, [r7, #12]
	uint16_t voltage_int = 0;
 801fb16:	2300      	movs	r3, #0
 801fb18:	813b      	strh	r3, [r7, #8]
	uint8_t success = this->readRegisters(SIMPLEXMOTION_REG_VOLTAGE, 1, &voltage_int);
 801fb1a:	f107 0308 	add.w	r3, r7, #8
 801fb1e:	2201      	movs	r2, #1
 801fb20:	2163      	movs	r1, #99	; 0x63
 801fb22:	6878      	ldr	r0, [r7, #4]
 801fb24:	f7ff fe58 	bl	801f7d8 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801fb28:	4603      	mov	r3, r0
 801fb2a:	72fb      	strb	r3, [r7, #11]

	if (!success) {
 801fb2c:	7afb      	ldrb	r3, [r7, #11]
 801fb2e:	2b00      	cmp	r3, #0
 801fb30:	d102      	bne.n	801fb38 <_ZN18SimplexMotionMotor10getVoltageEv+0x30>
		return 0;
 801fb32:	f04f 0300 	mov.w	r3, #0
 801fb36:	e00d      	b.n	801fb54 <_ZN18SimplexMotionMotor10getVoltageEv+0x4c>
	}
	voltage = voltage_int * 0.01;
 801fb38:	893b      	ldrh	r3, [r7, #8]
 801fb3a:	ee07 3a90 	vmov	s15, r3
 801fb3e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801fb42:	ed9f 6b09 	vldr	d6, [pc, #36]	; 801fb68 <_ZN18SimplexMotionMotor10getVoltageEv+0x60>
 801fb46:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fb4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fb4e:	edc7 7a03 	vstr	s15, [r7, #12]

	return voltage;
 801fb52:	68fb      	ldr	r3, [r7, #12]
}
 801fb54:	ee07 3a90 	vmov	s15, r3
 801fb58:	eeb0 0a67 	vmov.f32	s0, s15
 801fb5c:	3710      	adds	r7, #16
 801fb5e:	46bd      	mov	sp, r7
 801fb60:	bd80      	pop	{r7, pc}
 801fb62:	bf00      	nop
 801fb64:	f3af 8000 	nop.w
 801fb68:	47ae147b 	.word	0x47ae147b
 801fb6c:	3f847ae1 	.word	0x3f847ae1

0801fb70 <_ZN18SimplexMotionMotor8getSpeedEv>:


// ==============================================================
float SimplexMotionMotor::getSpeed() {
 801fb70:	b580      	push	{r7, lr}
 801fb72:	b086      	sub	sp, #24
 801fb74:	af00      	add	r7, sp, #0
 801fb76:	6078      	str	r0, [r7, #4]
	uint16_t speed_raw = 0;
 801fb78:	2300      	movs	r3, #0
 801fb7a:	81fb      	strh	r3, [r7, #14]
	uint8_t success = this->readRegisters(SIMPLEXMOTION_REG_SPEED, 1,
 801fb7c:	f107 030e 	add.w	r3, r7, #14
 801fb80:	2201      	movs	r2, #1
 801fb82:	21c9      	movs	r1, #201	; 0xc9
 801fb84:	6878      	ldr	r0, [r7, #4]
 801fb86:	f7ff fe27 	bl	801f7d8 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801fb8a:	4603      	mov	r3, r0
 801fb8c:	75fb      	strb	r3, [r7, #23]
			&speed_raw);

	int16_t speed_signed = (int16_t) speed_raw;
 801fb8e:	89fb      	ldrh	r3, [r7, #14]
 801fb90:	82bb      	strh	r3, [r7, #20]

	if (!success) {
 801fb92:	7dfb      	ldrb	r3, [r7, #23]
 801fb94:	2b00      	cmp	r3, #0
 801fb96:	d102      	bne.n	801fb9e <_ZN18SimplexMotionMotor8getSpeedEv+0x2e>
		return 0;
 801fb98:	f04f 0300 	mov.w	r3, #0
 801fb9c:	e01a      	b.n	801fbd4 <_ZN18SimplexMotionMotor8getSpeedEv+0x64>
	}
	float speed = this->_config.direction * 2 * pi * speed_signed / 256;
 801fb9e:	687b      	ldr	r3, [r7, #4]
 801fba0:	f993 3051 	ldrsb.w	r3, [r3, #81]	; 0x51
 801fba4:	005b      	lsls	r3, r3, #1
 801fba6:	ee07 3a90 	vmov	s15, r3
 801fbaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fbae:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801fbe4 <_ZN18SimplexMotionMotor8getSpeedEv+0x74>
 801fbb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 801fbb6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801fbba:	ee07 3a90 	vmov	s15, r3
 801fbbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801fbc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 801fbc6:	eddf 6a08 	vldr	s13, [pc, #32]	; 801fbe8 <_ZN18SimplexMotionMotor8getSpeedEv+0x78>
 801fbca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801fbce:	edc7 7a04 	vstr	s15, [r7, #16]

	return speed;
 801fbd2:	693b      	ldr	r3, [r7, #16]
}
 801fbd4:	ee07 3a90 	vmov	s15, r3
 801fbd8:	eeb0 0a67 	vmov.f32	s0, s15
 801fbdc:	3718      	adds	r7, #24
 801fbde:	46bd      	mov	sp, r7
 801fbe0:	bd80      	pop	{r7, pc}
 801fbe2:	bf00      	nop
 801fbe4:	40490fdb 	.word	0x40490fdb
 801fbe8:	43800000 	.word	0x43800000
 801fbec:	00000000 	.word	0x00000000

0801fbf0 <_ZN18SimplexMotionMotor14setTorqueLimitEf>:

// ==============================================================
uint8_t SimplexMotionMotor::setTorqueLimit(float maxTorque) {
 801fbf0:	b580      	push	{r7, lr}
 801fbf2:	b084      	sub	sp, #16
 801fbf4:	af00      	add	r7, sp, #0
 801fbf6:	6078      	str	r0, [r7, #4]
 801fbf8:	ed87 0a00 	vstr	s0, [r7]
	uint16_t torque_limit_int = (uint16_t) (maxTorque * 1000);
 801fbfc:	edd7 7a00 	vldr	s15, [r7]
 801fc00:	ed9f 7a23 	vldr	s14, [pc, #140]	; 801fc90 <_ZN18SimplexMotionMotor14setTorqueLimitEf+0xa0>
 801fc04:	ee67 7a87 	vmul.f32	s15, s15, s14
 801fc08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801fc0c:	ee17 3a90 	vmov	r3, s15
 801fc10:	b29b      	uxth	r3, r3
 801fc12:	81bb      	strh	r3, [r7, #12]

	uint8_t ret = 0;
 801fc14:	2300      	movs	r3, #0
 801fc16:	73fb      	strb	r3, [r7, #15]

	ret = this->writeRegisters(SIMPLEXMOTION_REG_TORQUE_LIMIT, 1,
 801fc18:	f107 030c 	add.w	r3, r7, #12
 801fc1c:	2201      	movs	r2, #1
 801fc1e:	21cb      	movs	r1, #203	; 0xcb
 801fc20:	6878      	ldr	r0, [r7, #4]
 801fc22:	f7ff fd98 	bl	801f756 <_ZN18SimplexMotionMotor14writeRegistersEttPt>
 801fc26:	4603      	mov	r3, r0
 801fc28:	73fb      	strb	r3, [r7, #15]
			&torque_limit_int);

	if (not (ret)) {
 801fc2a:	7bfb      	ldrb	r3, [r7, #15]
 801fc2c:	2b00      	cmp	r3, #0
 801fc2e:	d101      	bne.n	801fc34 <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x44>
		return 0;
 801fc30:	2300      	movs	r3, #0
 801fc32:	e024      	b.n	801fc7e <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x8e>
	}

	uint16_t torque_limit_int_check = 0;
 801fc34:	2300      	movs	r3, #0
 801fc36:	817b      	strh	r3, [r7, #10]
	ret = this->readRegisters(SIMPLEXMOTION_REG_TORQUE_LIMIT, 1,
 801fc38:	f107 030a 	add.w	r3, r7, #10
 801fc3c:	2201      	movs	r2, #1
 801fc3e:	21cb      	movs	r1, #203	; 0xcb
 801fc40:	6878      	ldr	r0, [r7, #4]
 801fc42:	f7ff fdc9 	bl	801f7d8 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801fc46:	4603      	mov	r3, r0
 801fc48:	73fb      	strb	r3, [r7, #15]
			&torque_limit_int_check);

	if (not (ret)) {
 801fc4a:	7bfb      	ldrb	r3, [r7, #15]
 801fc4c:	2b00      	cmp	r3, #0
 801fc4e:	d101      	bne.n	801fc54 <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x64>
		return 0;
 801fc50:	2300      	movs	r3, #0
 801fc52:	e014      	b.n	801fc7e <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x8e>
	}

	this->torque_limit = torque_limit_int_check * 0.001;
 801fc54:	897b      	ldrh	r3, [r7, #10]
 801fc56:	ee07 3a90 	vmov	s15, r3
 801fc5a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801fc5e:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 801fc88 <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x98>
 801fc62:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fc66:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fc6a:	687b      	ldr	r3, [r7, #4]
 801fc6c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	if (!(torque_limit_int == torque_limit_int_check)) {
 801fc70:	89ba      	ldrh	r2, [r7, #12]
 801fc72:	897b      	ldrh	r3, [r7, #10]
 801fc74:	429a      	cmp	r2, r3
 801fc76:	d001      	beq.n	801fc7c <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x8c>
		return 0;
 801fc78:	2300      	movs	r3, #0
 801fc7a:	e000      	b.n	801fc7e <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x8e>
	}

	return 1;
 801fc7c:	2301      	movs	r3, #1
}
 801fc7e:	4618      	mov	r0, r3
 801fc80:	3710      	adds	r7, #16
 801fc82:	46bd      	mov	sp, r7
 801fc84:	bd80      	pop	{r7, pc}
 801fc86:	bf00      	nop
 801fc88:	d2f1a9fc 	.word	0xd2f1a9fc
 801fc8c:	3f50624d 	.word	0x3f50624d
 801fc90:	447a0000 	.word	0x447a0000
 801fc94:	00000000 	.word	0x00000000

0801fc98 <_ZN18SimplexMotionMotor14getTorqueLimitEv>:

// ==============================================================
float SimplexMotionMotor::getTorqueLimit() {
 801fc98:	b580      	push	{r7, lr}
 801fc9a:	b086      	sub	sp, #24
 801fc9c:	af00      	add	r7, sp, #0
 801fc9e:	6078      	str	r0, [r7, #4]

	uint16_t torque_limit_int = 0;
 801fca0:	2300      	movs	r3, #0
 801fca2:	81fb      	strh	r3, [r7, #14]
	uint8_t ret = this->readRegisters(SIMPLEXMOTION_REG_TORQUE_LIMIT, 1,
 801fca4:	f107 030e 	add.w	r3, r7, #14
 801fca8:	2201      	movs	r2, #1
 801fcaa:	21cb      	movs	r1, #203	; 0xcb
 801fcac:	6878      	ldr	r0, [r7, #4]
 801fcae:	f7ff fd93 	bl	801f7d8 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801fcb2:	4603      	mov	r3, r0
 801fcb4:	75fb      	strb	r3, [r7, #23]
			&torque_limit_int);

	if (not ret) {
 801fcb6:	7dfb      	ldrb	r3, [r7, #23]
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	d101      	bne.n	801fcc0 <_ZN18SimplexMotionMotor14getTorqueLimitEv+0x28>
		return -1;
 801fcbc:	4b0e      	ldr	r3, [pc, #56]	; (801fcf8 <_ZN18SimplexMotionMotor14getTorqueLimitEv+0x60>)
 801fcbe:	e010      	b.n	801fce2 <_ZN18SimplexMotionMotor14getTorqueLimitEv+0x4a>
	}

	float torque_limit = torque_limit_int * 0.001;
 801fcc0:	89fb      	ldrh	r3, [r7, #14]
 801fcc2:	ee07 3a90 	vmov	s15, r3
 801fcc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801fcca:	ed9f 6b09 	vldr	d6, [pc, #36]	; 801fcf0 <_ZN18SimplexMotionMotor14getTorqueLimitEv+0x58>
 801fcce:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fcd2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fcd6:	edc7 7a04 	vstr	s15, [r7, #16]

	this->torque_limit = torque_limit;
 801fcda:	687b      	ldr	r3, [r7, #4]
 801fcdc:	693a      	ldr	r2, [r7, #16]
 801fcde:	649a      	str	r2, [r3, #72]	; 0x48
	return torque_limit;
 801fce0:	693b      	ldr	r3, [r7, #16]
}
 801fce2:	ee07 3a90 	vmov	s15, r3
 801fce6:	eeb0 0a67 	vmov.f32	s0, s15
 801fcea:	3718      	adds	r7, #24
 801fcec:	46bd      	mov	sp, r7
 801fcee:	bd80      	pop	{r7, pc}
 801fcf0:	d2f1a9fc 	.word	0xd2f1a9fc
 801fcf4:	3f50624d 	.word	0x3f50624d
 801fcf8:	bf800000 	.word	0xbf800000
 801fcfc:	00000000 	.word	0x00000000

0801fd00 <_ZN18SimplexMotionMotor9setTorqueEf>:

	return 0.0;
}

// ==============================================================
uint8_t SimplexMotionMotor::setTorque(float torque) {
 801fd00:	b580      	push	{r7, lr}
 801fd02:	b086      	sub	sp, #24
 801fd04:	af00      	add	r7, sp, #0
 801fd06:	6078      	str	r0, [r7, #4]
 801fd08:	ed87 0a00 	vstr	s0, [r7]
	// First check if torque mode has been set
	if (!(this->mode == SIMPLEXMOTION_MODE_TORQUE)) {
 801fd0c:	687b      	ldr	r3, [r7, #4]
 801fd0e:	881b      	ldrh	r3, [r3, #0]
 801fd10:	2b28      	cmp	r3, #40	; 0x28
 801fd12:	d001      	beq.n	801fd18 <_ZN18SimplexMotionMotor9setTorqueEf+0x18>
		return 0;
 801fd14:	2300      	movs	r3, #0
 801fd16:	e024      	b.n	801fd62 <_ZN18SimplexMotionMotor9setTorqueEf+0x62>
	}

	// Calculate the corresponding torque value
	int16_t torque_value_int = (int16_t) (this->_config.direction * torque
 801fd18:	687b      	ldr	r3, [r7, #4]
 801fd1a:	f993 3051 	ldrsb.w	r3, [r3, #81]	; 0x51
 801fd1e:	ee07 3a90 	vmov	s15, r3
 801fd22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801fd26:	edd7 7a00 	vldr	s15, [r7]
 801fd2a:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ this->torque_limit * 32767.0);
 801fd2e:	687b      	ldr	r3, [r7, #4]
 801fd30:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 801fd34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801fd38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801fd3c:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 801fd70 <_ZN18SimplexMotionMotor9setTorqueEf+0x70>
 801fd40:	ee27 7b06 	vmul.f64	d7, d7, d6
	int16_t torque_value_int = (int16_t) (this->_config.direction * torque
 801fd44:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801fd48:	ee17 3a90 	vmov	r3, s15
 801fd4c:	82fb      	strh	r3, [r7, #22]
	int32_t target_input = (int32_t) torque_value_int;
 801fd4e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801fd52:	613b      	str	r3, [r7, #16]

	uint8_t ret = this->setTarget(target_input);
 801fd54:	6939      	ldr	r1, [r7, #16]
 801fd56:	6878      	ldr	r0, [r7, #4]
 801fd58:	f000 f80e 	bl	801fd78 <_ZN18SimplexMotionMotor9setTargetEl>
 801fd5c:	4603      	mov	r3, r0
 801fd5e:	73fb      	strb	r3, [r7, #15]
	return ret;
 801fd60:	7bfb      	ldrb	r3, [r7, #15]
}
 801fd62:	4618      	mov	r0, r3
 801fd64:	3718      	adds	r7, #24
 801fd66:	46bd      	mov	sp, r7
 801fd68:	bd80      	pop	{r7, pc}
 801fd6a:	bf00      	nop
 801fd6c:	f3af 8000 	nop.w
 801fd70:	00000000 	.word	0x00000000
 801fd74:	40dfffc0 	.word	0x40dfffc0

0801fd78 <_ZN18SimplexMotionMotor9setTargetEl>:

// ==============================================================
uint8_t SimplexMotionMotor::setTarget(int32_t target) {
 801fd78:	b580      	push	{r7, lr}
 801fd7a:	b084      	sub	sp, #16
 801fd7c:	af00      	add	r7, sp, #0
 801fd7e:	6078      	str	r0, [r7, #4]
 801fd80:	6039      	str	r1, [r7, #0]
	uint8_t ret = 0;
 801fd82:	2300      	movs	r3, #0
 801fd84:	73fb      	strb	r3, [r7, #15]
	uint16_t tx_data[2] = { 0 };
 801fd86:	2300      	movs	r3, #0
 801fd88:	60bb      	str	r3, [r7, #8]

	tx_data[0] = target >> 16;
 801fd8a:	683b      	ldr	r3, [r7, #0]
 801fd8c:	141b      	asrs	r3, r3, #16
 801fd8e:	b29b      	uxth	r3, r3
 801fd90:	813b      	strh	r3, [r7, #8]
	tx_data[1] = target & 0xFFFF;
 801fd92:	683b      	ldr	r3, [r7, #0]
 801fd94:	b29b      	uxth	r3, r3
 801fd96:	817b      	strh	r3, [r7, #10]

	ret = this->writeRegisters(SIMPLEXMOTION_REG_TARGET_INPUT, 2, tx_data);
 801fd98:	f107 0308 	add.w	r3, r7, #8
 801fd9c:	2202      	movs	r2, #2
 801fd9e:	f240 11c1 	movw	r1, #449	; 0x1c1
 801fda2:	6878      	ldr	r0, [r7, #4]
 801fda4:	f7ff fcd7 	bl	801f756 <_ZN18SimplexMotionMotor14writeRegistersEttPt>
 801fda8:	4603      	mov	r3, r0
 801fdaa:	73fb      	strb	r3, [r7, #15]
	return ret;
 801fdac:	7bfb      	ldrb	r3, [r7, #15]
}
 801fdae:	4618      	mov	r0, r3
 801fdb0:	3710      	adds	r7, #16
 801fdb2:	46bd      	mov	sp, r7
 801fdb4:	bd80      	pop	{r7, pc}

0801fdb6 <_ZN18SimplexMotionMotor9getStatusEP22simplexmotion_status_t>:

// ==============================================================
uint8_t SimplexMotionMotor::getStatus(simplexmotion_status_t *status) {
 801fdb6:	b580      	push	{r7, lr}
 801fdb8:	b084      	sub	sp, #16
 801fdba:	af00      	add	r7, sp, #0
 801fdbc:	6078      	str	r0, [r7, #4]
 801fdbe:	6039      	str	r1, [r7, #0]
	uint16_t status_map = 0;
 801fdc0:	2300      	movs	r3, #0
 801fdc2:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = this->readRegisters(SIMPLEXMOTION_REG_STATUS, 1, &status_map);
 801fdc4:	f107 030c 	add.w	r3, r7, #12
 801fdc8:	2201      	movs	r2, #1
 801fdca:	f240 1199 	movw	r1, #409	; 0x199
 801fdce:	6878      	ldr	r0, [r7, #4]
 801fdd0:	f7ff fd02 	bl	801f7d8 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801fdd4:	4603      	mov	r3, r0
 801fdd6:	73fb      	strb	r3, [r7, #15]

	if (not (ret)) {
 801fdd8:	7bfb      	ldrb	r3, [r7, #15]
 801fdda:	2b00      	cmp	r3, #0
 801fddc:	d101      	bne.n	801fde2 <_ZN18SimplexMotionMotor9getStatusEP22simplexmotion_status_t+0x2c>
		return 0;
 801fdde:	2300      	movs	r3, #0
 801fde0:	e041      	b.n	801fe66 <_ZN18SimplexMotionMotor9getStatusEP22simplexmotion_status_t+0xb0>
	}

	status->fail = status_map & 1 << 0;
 801fde2:	89bb      	ldrh	r3, [r7, #12]
 801fde4:	b2db      	uxtb	r3, r3
 801fde6:	f003 0301 	and.w	r3, r3, #1
 801fdea:	b2da      	uxtb	r2, r3
 801fdec:	683b      	ldr	r3, [r7, #0]
 801fdee:	701a      	strb	r2, [r3, #0]
	status->communication_error = status_map & 1 << 1;
 801fdf0:	89bb      	ldrh	r3, [r7, #12]
 801fdf2:	b2db      	uxtb	r3, r3
 801fdf4:	f003 0302 	and.w	r3, r3, #2
 801fdf8:	b2da      	uxtb	r2, r3
 801fdfa:	683b      	ldr	r3, [r7, #0]
 801fdfc:	705a      	strb	r2, [r3, #1]
	status->current_error = status_map & 1 << 2;
 801fdfe:	89bb      	ldrh	r3, [r7, #12]
 801fe00:	b2db      	uxtb	r3, r3
 801fe02:	f003 0304 	and.w	r3, r3, #4
 801fe06:	b2da      	uxtb	r2, r3
 801fe08:	683b      	ldr	r3, [r7, #0]
 801fe0a:	709a      	strb	r2, [r3, #2]
	status->voltage_error = status_map & 1 << 3;
 801fe0c:	89bb      	ldrh	r3, [r7, #12]
 801fe0e:	b2db      	uxtb	r3, r3
 801fe10:	f003 0308 	and.w	r3, r3, #8
 801fe14:	b2da      	uxtb	r2, r3
 801fe16:	683b      	ldr	r3, [r7, #0]
 801fe18:	70da      	strb	r2, [r3, #3]
	status->temperature_error = status_map & 1 << 4;
 801fe1a:	89bb      	ldrh	r3, [r7, #12]
 801fe1c:	b2db      	uxtb	r3, r3
 801fe1e:	f003 0310 	and.w	r3, r3, #16
 801fe22:	b2da      	uxtb	r2, r3
 801fe24:	683b      	ldr	r3, [r7, #0]
 801fe26:	711a      	strb	r2, [r3, #4]
	status->torque_limit = status_map & 1 << 5;
 801fe28:	89bb      	ldrh	r3, [r7, #12]
 801fe2a:	b2db      	uxtb	r3, r3
 801fe2c:	f003 0320 	and.w	r3, r3, #32
 801fe30:	b2da      	uxtb	r2, r3
 801fe32:	683b      	ldr	r3, [r7, #0]
 801fe34:	715a      	strb	r2, [r3, #5]
	status->locked = status_map & 1 << 6;
 801fe36:	89bb      	ldrh	r3, [r7, #12]
 801fe38:	b2db      	uxtb	r3, r3
 801fe3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fe3e:	b2da      	uxtb	r2, r3
 801fe40:	683b      	ldr	r3, [r7, #0]
 801fe42:	721a      	strb	r2, [r3, #8]
	status->regulator_error = status_map & 1 << 7;
 801fe44:	89bb      	ldrh	r3, [r7, #12]
 801fe46:	b2db      	uxtb	r3, r3
 801fe48:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801fe4c:	b2da      	uxtb	r2, r3
 801fe4e:	683b      	ldr	r3, [r7, #0]
 801fe50:	719a      	strb	r2, [r3, #6]
	status->moving = status_map & 1 << 8;
 801fe52:	683b      	ldr	r3, [r7, #0]
 801fe54:	2200      	movs	r2, #0
 801fe56:	71da      	strb	r2, [r3, #7]
	status->reverse = status_map & 1 << 9;
 801fe58:	683b      	ldr	r3, [r7, #0]
 801fe5a:	2200      	movs	r2, #0
 801fe5c:	725a      	strb	r2, [r3, #9]
	status->target = status_map & 1 << 10;
 801fe5e:	683b      	ldr	r3, [r7, #0]
 801fe60:	2200      	movs	r2, #0
 801fe62:	729a      	strb	r2, [r3, #10]

	return 1;
 801fe64:	2301      	movs	r3, #1
}
 801fe66:	4618      	mov	r0, r3
 801fe68:	3710      	adds	r7, #16
 801fe6a:	46bd      	mov	sp, r7
 801fe6c:	bd80      	pop	{r7, pc}

0801fe6e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>:
		this->callbacks.error = callback;
	}
}

// ==============================================================
void SimplexMotionMotor::error_handler(simplexmotion_error error) {
 801fe6e:	b580      	push	{r7, lr}
 801fe70:	b082      	sub	sp, #8
 801fe72:	af00      	add	r7, sp, #0
 801fe74:	6078      	str	r0, [r7, #4]
 801fe76:	460b      	mov	r3, r1
 801fe78:	807b      	strh	r3, [r7, #2]
	nop();
 801fe7a:	f7f4 f999 	bl	80141b0 <_Z3nopv>
}
 801fe7e:	bf00      	nop
 801fe80:	3708      	adds	r7, #8
 801fe82:	46bd      	mov	sp, r7
 801fe84:	bd80      	pop	{r7, pc}

0801fe86 <_ZN18bmi160_gyr_calib_tC1Ev>:
	float x;
	float y;
	float z;
} bmi160_acc;

typedef struct bmi160_gyr_calib_t {
 801fe86:	b480      	push	{r7}
 801fe88:	b083      	sub	sp, #12
 801fe8a:	af00      	add	r7, sp, #0
 801fe8c:	6078      	str	r0, [r7, #4]
 801fe8e:	687b      	ldr	r3, [r7, #4]
 801fe90:	f04f 0200 	mov.w	r2, #0
 801fe94:	601a      	str	r2, [r3, #0]
 801fe96:	687b      	ldr	r3, [r7, #4]
 801fe98:	f04f 0200 	mov.w	r2, #0
 801fe9c:	605a      	str	r2, [r3, #4]
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	f04f 0200 	mov.w	r2, #0
 801fea4:	609a      	str	r2, [r3, #8]
 801fea6:	687b      	ldr	r3, [r7, #4]
 801fea8:	4618      	mov	r0, r3
 801feaa:	370c      	adds	r7, #12
 801feac:	46bd      	mov	sp, r7
 801feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801feb2:	4770      	bx	lr

0801feb4 <_ZN19bmi160_gyr_config_tC1Ev>:
	uint8_t bw = BMI160_ACCEL_BW_NORMAL_AVG4;
	uint8_t range = BMI160_ACCEL_RANGE_8G;
	uint8_t foc_enable = 0;
} bmi160_acc_config_t;

typedef struct bmi160_gyr_config_t {
 801feb4:	b480      	push	{r7}
 801feb6:	b083      	sub	sp, #12
 801feb8:	af00      	add	r7, sp, #0
 801feba:	6078      	str	r0, [r7, #4]
 801febc:	687b      	ldr	r3, [r7, #4]
 801febe:	220b      	movs	r2, #11
 801fec0:	701a      	strb	r2, [r3, #0]
 801fec2:	687b      	ldr	r3, [r7, #4]
 801fec4:	2220      	movs	r2, #32
 801fec6:	705a      	strb	r2, [r3, #1]
 801fec8:	687b      	ldr	r3, [r7, #4]
 801feca:	2200      	movs	r2, #0
 801fecc:	709a      	strb	r2, [r3, #2]
 801fece:	687b      	ldr	r3, [r7, #4]
 801fed0:	2201      	movs	r2, #1
 801fed2:	70da      	strb	r2, [r3, #3]
 801fed4:	687b      	ldr	r3, [r7, #4]
 801fed6:	4618      	mov	r0, r3
 801fed8:	370c      	adds	r7, #12
 801feda:	46bd      	mov	sp, r7
 801fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fee0:	4770      	bx	lr

0801fee2 <_ZN19bmi160_acc_config_tC1Ev>:
typedef struct bmi160_acc_config_t {
 801fee2:	b480      	push	{r7}
 801fee4:	b083      	sub	sp, #12
 801fee6:	af00      	add	r7, sp, #0
 801fee8:	6078      	str	r0, [r7, #4]
 801feea:	687b      	ldr	r3, [r7, #4]
 801feec:	220a      	movs	r2, #10
 801feee:	701a      	strb	r2, [r3, #0]
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	2220      	movs	r2, #32
 801fef4:	705a      	strb	r2, [r3, #1]
 801fef6:	687b      	ldr	r3, [r7, #4]
 801fef8:	2208      	movs	r2, #8
 801fefa:	709a      	strb	r2, [r3, #2]
 801fefc:	687b      	ldr	r3, [r7, #4]
 801fefe:	2200      	movs	r2, #0
 801ff00:	70da      	strb	r2, [r3, #3]
 801ff02:	687b      	ldr	r3, [r7, #4]
 801ff04:	4618      	mov	r0, r3
 801ff06:	370c      	adds	r7, #12
 801ff08:	46bd      	mov	sp, r7
 801ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff0e:	4770      	bx	lr

0801ff10 <_ZN15bmi160_config_tC1Ev>:
	uint8_t bw = BMI160_GYRO_BW_NORMAL_MODE;
	uint8_t range = BMI160_GYRO_RANGE_2000_DPS;
	uint8_t foc_enable = 1;
} bmi160_gyr_config_t;

typedef struct bmi160_config_t {
 801ff10:	b580      	push	{r7, lr}
 801ff12:	b082      	sub	sp, #8
 801ff14:	af00      	add	r7, sp, #0
 801ff16:	6078      	str	r0, [r7, #4]
 801ff18:	687b      	ldr	r3, [r7, #4]
 801ff1a:	330a      	adds	r3, #10
 801ff1c:	4618      	mov	r0, r3
 801ff1e:	f7ff ffc9 	bl	801feb4 <_ZN19bmi160_gyr_config_tC1Ev>
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	330e      	adds	r3, #14
 801ff26:	4618      	mov	r0, r3
 801ff28:	f7ff ffdb 	bl	801fee2 <_ZN19bmi160_acc_config_tC1Ev>
 801ff2c:	687b      	ldr	r3, [r7, #4]
 801ff2e:	4618      	mov	r0, r3
 801ff30:	3708      	adds	r7, #8
 801ff32:	46bd      	mov	sp, r7
 801ff34:	bd80      	pop	{r7, pc}

0801ff36 <_ZN6BMI160C1Ev>:

#include "bmi160.h"

#if CORE_CONFIG_USE_SPI

BMI160::BMI160(){
 801ff36:	b580      	push	{r7, lr}
 801ff38:	b082      	sub	sp, #8
 801ff3a:	af00      	add	r7, sp, #0
 801ff3c:	6078      	str	r0, [r7, #4]
 801ff3e:	687b      	ldr	r3, [r7, #4]
 801ff40:	332c      	adds	r3, #44	; 0x2c
 801ff42:	4618      	mov	r0, r3
 801ff44:	f7ff ff9f 	bl	801fe86 <_ZN18bmi160_gyr_calib_tC1Ev>
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	3338      	adds	r3, #56	; 0x38
 801ff4c:	4618      	mov	r0, r3
 801ff4e:	f7ff ffdf 	bl	801ff10 <_ZN15bmi160_config_tC1Ev>

}
 801ff52:	687b      	ldr	r3, [r7, #4]
 801ff54:	4618      	mov	r0, r3
 801ff56:	3708      	adds	r7, #8
 801ff58:	46bd      	mov	sp, r7
 801ff5a:	bd80      	pop	{r7, pc}

0801ff5c <_ZN6BMI16013writeRegisterEhh>:

/* ============================================================================= */
uint8_t BMI160::writeRegister(uint8_t reg, uint8_t data) {
 801ff5c:	b580      	push	{r7, lr}
 801ff5e:	b082      	sub	sp, #8
 801ff60:	af00      	add	r7, sp, #0
 801ff62:	6078      	str	r0, [r7, #4]
 801ff64:	460b      	mov	r3, r1
 801ff66:	70fb      	strb	r3, [r7, #3]
 801ff68:	4613      	mov	r3, r2
 801ff6a:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 801ff6c:	687b      	ldr	r3, [r7, #4]
 801ff6e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801ff70:	687b      	ldr	r3, [r7, #4]
 801ff72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801ff76:	2200      	movs	r2, #0
 801ff78:	4619      	mov	r1, r3
 801ff7a:	f7e6 f98d 	bl	8006298 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 1);
 801ff7e:	687b      	ldr	r3, [r7, #4]
 801ff80:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801ff82:	1cf9      	adds	r1, r7, #3
 801ff84:	2301      	movs	r3, #1
 801ff86:	2201      	movs	r2, #1
 801ff88:	f7e9 ff24 	bl	8009dd4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(this->_config.hspi, &data, 1, 1);
 801ff8c:	687b      	ldr	r3, [r7, #4]
 801ff8e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801ff90:	1cb9      	adds	r1, r7, #2
 801ff92:	2301      	movs	r3, #1
 801ff94:	2201      	movs	r2, #1
 801ff96:	f7e9 ff1d 	bl	8009dd4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 801ff9a:	687b      	ldr	r3, [r7, #4]
 801ff9c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801ff9e:	687b      	ldr	r3, [r7, #4]
 801ffa0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801ffa4:	2201      	movs	r2, #1
 801ffa6:	4619      	mov	r1, r3
 801ffa8:	f7e6 f976 	bl	8006298 <HAL_GPIO_WritePin>

	return CORE_OK;
 801ffac:	2301      	movs	r3, #1
}
 801ffae:	4618      	mov	r0, r3
 801ffb0:	3708      	adds	r7, #8
 801ffb2:	46bd      	mov	sp, r7
 801ffb4:	bd80      	pop	{r7, pc}

0801ffb6 <_ZN6BMI1604initE15bmi160_config_t>:

/* ============================================================================= */
uint8_t BMI160::init(bmi160_config_t config) {
 801ffb6:	b084      	sub	sp, #16
 801ffb8:	b5b0      	push	{r4, r5, r7, lr}
 801ffba:	b084      	sub	sp, #16
 801ffbc:	af00      	add	r7, sp, #0
 801ffbe:	6078      	str	r0, [r7, #4]
 801ffc0:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801ffc4:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	this->_config = config;
 801ffc8:	687b      	ldr	r3, [r7, #4]
 801ffca:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801ffce:	f107 0524 	add.w	r5, r7, #36	; 0x24
 801ffd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ffd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ffd6:	682b      	ldr	r3, [r5, #0]
 801ffd8:	6023      	str	r3, [r4, #0]
	// Make a dummy read to turn on SPI mode
//	this->readRegister(0x7F);
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801ffde:	687b      	ldr	r3, [r7, #4]
 801ffe0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801ffe4:	2201      	movs	r2, #1
 801ffe6:	4619      	mov	r1, r3
 801ffe8:	f7e6 f956 	bl	8006298 <HAL_GPIO_WritePin>
	delay(250);
 801ffec:	20fa      	movs	r0, #250	; 0xfa
 801ffee:	f7fa f90a 	bl	801a206 <_Z5delaym>

	// Check if the IMU can be addressed
	if (not (this->check())) {
 801fff2:	6878      	ldr	r0, [r7, #4]
 801fff4:	f000 f8ed 	bl	80201d2 <_ZN6BMI1605checkEv>
 801fff8:	4603      	mov	r3, r0
 801fffa:	2b00      	cmp	r3, #0
 801fffc:	bf0c      	ite	eq
 801fffe:	2301      	moveq	r3, #1
 8020000:	2300      	movne	r3, #0
 8020002:	b2db      	uxtb	r3, r3
 8020004:	2b00      	cmp	r3, #0
 8020006:	d001      	beq.n	802000c <_ZN6BMI1604initE15bmi160_config_t+0x56>
		return 0;
 8020008:	2300      	movs	r3, #0
 802000a:	e072      	b.n	80200f2 <_ZN6BMI1604initE15bmi160_config_t+0x13c>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
	}

	// Reset the IMU to delete all previously loaded registers
	this->reset();
 802000c:	6878      	ldr	r0, [r7, #4]
 802000e:	f000 fd34 	bl	8020a7a <_ZN6BMI1605resetEv>

	// Wait until the reset is finished
	delay(250);
 8020012:	20fa      	movs	r0, #250	; 0xfa
 8020014:	f7fa f8f7 	bl	801a206 <_Z5delaym>

	// Make a dummy read again to turn on SPI
	this->readRegister(0x7F);
 8020018:	217f      	movs	r1, #127	; 0x7f
 802001a:	6878      	ldr	r0, [r7, #4]
 802001c:	f000 f870 	bl	8020100 <_ZN6BMI16012readRegisterEh>

	// Set the power mode to normal in order for all registers to be writable
	this->setPowerMode(BMI160_Power_Normal);
 8020020:	2100      	movs	r1, #0
 8020022:	6878      	ldr	r0, [r7, #4]
 8020024:	f000 fcf4 	bl	8020a10 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>

	// Set the accelerometer setting
	this->setAccConfig(this->_config.acc.odr | this->_config.acc.bw,
 8020028:	687b      	ldr	r3, [r7, #4]
 802002a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 802002e:	687b      	ldr	r3, [r7, #4]
 8020030:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8020034:	4313      	orrs	r3, r2
 8020036:	b2d9      	uxtb	r1, r3
 8020038:	687b      	ldr	r3, [r7, #4]
 802003a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802003e:	461a      	mov	r2, r3
 8020040:	6878      	ldr	r0, [r7, #4]
 8020042:	f000 fccc 	bl	80209de <_ZN6BMI16012setAccConfigEhh>
			this->_config.acc.range);

	// Set the gyroscope setting
	this->setGyroConfig(this->_config.gyr.odr | this->_config.gyr.bw,
 8020046:	687b      	ldr	r3, [r7, #4]
 8020048:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 802004c:	687b      	ldr	r3, [r7, #4]
 802004e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8020052:	4313      	orrs	r3, r2
 8020054:	b2d9      	uxtb	r1, r3
 8020056:	687b      	ldr	r3, [r7, #4]
 8020058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802005c:	461a      	mov	r2, r3
 802005e:	6878      	ldr	r0, [r7, #4]
 8020060:	f000 fca4 	bl	80209ac <_ZN6BMI16013setGyroConfigEhh>
			this->_config.gyr.range);

	// Check if the settings have been set correctly

	uint8_t acc_config_reg = this->readRegister(BMI160_REG_ACCEL_CONFIG);
 8020064:	2140      	movs	r1, #64	; 0x40
 8020066:	6878      	ldr	r0, [r7, #4]
 8020068:	f000 f84a 	bl	8020100 <_ZN6BMI16012readRegisterEh>
 802006c:	4603      	mov	r3, r0
 802006e:	73fb      	strb	r3, [r7, #15]
	uint8_t acc_range_reg = this->readRegister(BMI160_REG_ACCEL_RANGE);
 8020070:	2141      	movs	r1, #65	; 0x41
 8020072:	6878      	ldr	r0, [r7, #4]
 8020074:	f000 f844 	bl	8020100 <_ZN6BMI16012readRegisterEh>
 8020078:	4603      	mov	r3, r0
 802007a:	73bb      	strb	r3, [r7, #14]
	uint8_t gyr_config_reg = this->readRegister(BMI160_REG_GYRO_CONFIG);
 802007c:	2142      	movs	r1, #66	; 0x42
 802007e:	6878      	ldr	r0, [r7, #4]
 8020080:	f000 f83e 	bl	8020100 <_ZN6BMI16012readRegisterEh>
 8020084:	4603      	mov	r3, r0
 8020086:	737b      	strb	r3, [r7, #13]
	uint8_t gyr_range_reg = this->readRegister(BMI160_REG_GYRO_RANGE);
 8020088:	2143      	movs	r1, #67	; 0x43
 802008a:	6878      	ldr	r0, [r7, #4]
 802008c:	f000 f838 	bl	8020100 <_ZN6BMI16012readRegisterEh>
 8020090:	4603      	mov	r3, r0
 8020092:	733b      	strb	r3, [r7, #12]

	if (acc_config_reg != (this->_config.acc.odr | this->_config.acc.bw)) {
 8020094:	687b      	ldr	r3, [r7, #4]
 8020096:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 802009a:	687b      	ldr	r3, [r7, #4]
 802009c:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80200a0:	4313      	orrs	r3, r2
 80200a2:	b2db      	uxtb	r3, r3
 80200a4:	7bfa      	ldrb	r2, [r7, #15]
 80200a6:	429a      	cmp	r2, r3
 80200a8:	d002      	beq.n	80200b0 <_ZN6BMI1604initE15bmi160_config_t+0xfa>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 80200aa:	2008      	movs	r0, #8
 80200ac:	f000 fddf 	bl	8020c6e <_Z17core_ErrorHandleri>
	}
	if (acc_range_reg != this->_config.acc.range) {
 80200b0:	687b      	ldr	r3, [r7, #4]
 80200b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80200b6:	7bba      	ldrb	r2, [r7, #14]
 80200b8:	429a      	cmp	r2, r3
 80200ba:	d002      	beq.n	80200c2 <_ZN6BMI1604initE15bmi160_config_t+0x10c>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 80200bc:	2008      	movs	r0, #8
 80200be:	f000 fdd6 	bl	8020c6e <_Z17core_ErrorHandleri>
	}
	if (gyr_config_reg != (this->_config.gyr.odr | this->_config.gyr.bw)) {
 80200c2:	687b      	ldr	r3, [r7, #4]
 80200c4:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80200c8:	687b      	ldr	r3, [r7, #4]
 80200ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80200ce:	4313      	orrs	r3, r2
 80200d0:	b2db      	uxtb	r3, r3
 80200d2:	7b7a      	ldrb	r2, [r7, #13]
 80200d4:	429a      	cmp	r2, r3
 80200d6:	d002      	beq.n	80200de <_ZN6BMI1604initE15bmi160_config_t+0x128>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 80200d8:	2008      	movs	r0, #8
 80200da:	f000 fdc8 	bl	8020c6e <_Z17core_ErrorHandleri>
	}
	if (gyr_range_reg != this->_config.gyr.range) {
 80200de:	687b      	ldr	r3, [r7, #4]
 80200e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80200e4:	7b3a      	ldrb	r2, [r7, #12]
 80200e6:	429a      	cmp	r2, r3
 80200e8:	d002      	beq.n	80200f0 <_ZN6BMI1604initE15bmi160_config_t+0x13a>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 80200ea:	2008      	movs	r0, #8
 80200ec:	f000 fdbf 	bl	8020c6e <_Z17core_ErrorHandleri>
	}

	return CORE_OK;
 80200f0:	2301      	movs	r3, #1
}
 80200f2:	4618      	mov	r0, r3
 80200f4:	3710      	adds	r7, #16
 80200f6:	46bd      	mov	sp, r7
 80200f8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80200fc:	b004      	add	sp, #16
 80200fe:	4770      	bx	lr

08020100 <_ZN6BMI16012readRegisterEh>:

/* ============================================================================= */
uint8_t BMI160::readRegister(uint8_t reg) {
 8020100:	b580      	push	{r7, lr}
 8020102:	b084      	sub	sp, #16
 8020104:	af00      	add	r7, sp, #0
 8020106:	6078      	str	r0, [r7, #4]
 8020108:	460b      	mov	r3, r1
 802010a:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 802010c:	2300      	movs	r3, #0
 802010e:	73fb      	strb	r3, [r7, #15]
	reg |= 0x80;
 8020110:	78fb      	ldrb	r3, [r7, #3]
 8020112:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8020116:	b2db      	uxtb	r3, r3
 8020118:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 802011a:	687b      	ldr	r3, [r7, #4]
 802011c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 802011e:	687b      	ldr	r3, [r7, #4]
 8020120:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8020124:	2200      	movs	r2, #0
 8020126:	4619      	mov	r1, r3
 8020128:	f7e6 f8b6 	bl	8006298 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 10);
 802012c:	687b      	ldr	r3, [r7, #4]
 802012e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8020130:	1cf9      	adds	r1, r7, #3
 8020132:	230a      	movs	r3, #10
 8020134:	2201      	movs	r2, #1
 8020136:	f7e9 fe4d 	bl	8009dd4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_config.hspi, &ret, 1, 10);
 802013a:	687b      	ldr	r3, [r7, #4]
 802013c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 802013e:	f107 010f 	add.w	r1, r7, #15
 8020142:	230a      	movs	r3, #10
 8020144:	2201      	movs	r2, #1
 8020146:	f7ea f841 	bl	800a1cc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 802014e:	687b      	ldr	r3, [r7, #4]
 8020150:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8020154:	2201      	movs	r2, #1
 8020156:	4619      	mov	r1, r3
 8020158:	f7e6 f89e 	bl	8006298 <HAL_GPIO_WritePin>

	return ret;
 802015c:	7bfb      	ldrb	r3, [r7, #15]
}
 802015e:	4618      	mov	r0, r3
 8020160:	3710      	adds	r7, #16
 8020162:	46bd      	mov	sp, r7
 8020164:	bd80      	pop	{r7, pc}

08020166 <_ZN6BMI16020readMultipleRegisterEhPhh>:

/* ============================================================================= */
uint8_t BMI160::readMultipleRegister(uint8_t reg, uint8_t *data, uint8_t len) {
 8020166:	b580      	push	{r7, lr}
 8020168:	b084      	sub	sp, #16
 802016a:	af00      	add	r7, sp, #0
 802016c:	60f8      	str	r0, [r7, #12]
 802016e:	607a      	str	r2, [r7, #4]
 8020170:	461a      	mov	r2, r3
 8020172:	460b      	mov	r3, r1
 8020174:	72fb      	strb	r3, [r7, #11]
 8020176:	4613      	mov	r3, r2
 8020178:	72bb      	strb	r3, [r7, #10]
//	reg += 0x80;
	reg |= 0x80;
 802017a:	7afb      	ldrb	r3, [r7, #11]
 802017c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8020180:	b2db      	uxtb	r3, r3
 8020182:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 8020184:	68fb      	ldr	r3, [r7, #12]
 8020186:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8020188:	68fb      	ldr	r3, [r7, #12]
 802018a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 802018e:	2200      	movs	r2, #0
 8020190:	4619      	mov	r1, r3
 8020192:	f7e6 f881 	bl	8006298 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 10);
 8020196:	68fb      	ldr	r3, [r7, #12]
 8020198:	6b98      	ldr	r0, [r3, #56]	; 0x38
 802019a:	f107 010b 	add.w	r1, r7, #11
 802019e:	230a      	movs	r3, #10
 80201a0:	2201      	movs	r2, #1
 80201a2:	f7e9 fe17 	bl	8009dd4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_config.hspi, data, len, 10);
 80201a6:	68fb      	ldr	r3, [r7, #12]
 80201a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80201aa:	7abb      	ldrb	r3, [r7, #10]
 80201ac:	b29a      	uxth	r2, r3
 80201ae:	230a      	movs	r3, #10
 80201b0:	6879      	ldr	r1, [r7, #4]
 80201b2:	f7ea f80b 	bl	800a1cc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 80201b6:	68fb      	ldr	r3, [r7, #12]
 80201b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80201ba:	68fb      	ldr	r3, [r7, #12]
 80201bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80201c0:	2201      	movs	r2, #1
 80201c2:	4619      	mov	r1, r3
 80201c4:	f7e6 f868 	bl	8006298 <HAL_GPIO_WritePin>

	return CORE_OK;
 80201c8:	2301      	movs	r3, #1
}
 80201ca:	4618      	mov	r0, r3
 80201cc:	3710      	adds	r7, #16
 80201ce:	46bd      	mov	sp, r7
 80201d0:	bd80      	pop	{r7, pc}

080201d2 <_ZN6BMI1605checkEv>:

/* ============================================================================= */
uint8_t BMI160::check() {
 80201d2:	b580      	push	{r7, lr}
 80201d4:	b084      	sub	sp, #16
 80201d6:	af00      	add	r7, sp, #0
 80201d8:	6078      	str	r0, [r7, #4]
	uint8_t id = this->readID();
 80201da:	6878      	ldr	r0, [r7, #4]
 80201dc:	f000 f80c 	bl	80201f8 <_ZN6BMI1606readIDEv>
 80201e0:	4603      	mov	r3, r0
 80201e2:	73fb      	strb	r3, [r7, #15]
	if (id != 209) {
 80201e4:	7bfb      	ldrb	r3, [r7, #15]
 80201e6:	2bd1      	cmp	r3, #209	; 0xd1
 80201e8:	d001      	beq.n	80201ee <_ZN6BMI1605checkEv+0x1c>
		return 0;
 80201ea:	2300      	movs	r3, #0
 80201ec:	e000      	b.n	80201f0 <_ZN6BMI1605checkEv+0x1e>
	}

	return CORE_OK;
 80201ee:	2301      	movs	r3, #1
}
 80201f0:	4618      	mov	r0, r3
 80201f2:	3710      	adds	r7, #16
 80201f4:	46bd      	mov	sp, r7
 80201f6:	bd80      	pop	{r7, pc}

080201f8 <_ZN6BMI1606readIDEv>:

/* ============================================================================= */
uint8_t BMI160::readID() {
 80201f8:	b580      	push	{r7, lr}
 80201fa:	b082      	sub	sp, #8
 80201fc:	af00      	add	r7, sp, #0
 80201fe:	6078      	str	r0, [r7, #4]
	return this->readRegister(BMI160_REG_CHIP_ID);
 8020200:	2100      	movs	r1, #0
 8020202:	6878      	ldr	r0, [r7, #4]
 8020204:	f7ff ff7c 	bl	8020100 <_ZN6BMI16012readRegisterEh>
 8020208:	4603      	mov	r3, r0
}
 802020a:	4618      	mov	r0, r3
 802020c:	3708      	adds	r7, #8
 802020e:	46bd      	mov	sp, r7
 8020210:	bd80      	pop	{r7, pc}

08020212 <_ZN6BMI1606updateEv>:

/* ============================================================================= */
void BMI160::update() {
 8020212:	b580      	push	{r7, lr}
 8020214:	b082      	sub	sp, #8
 8020216:	af00      	add	r7, sp, #0
 8020218:	6078      	str	r0, [r7, #4]
	this->fetchData();
 802021a:	6878      	ldr	r0, [r7, #4]
 802021c:	f000 f807 	bl	802022e <_ZN6BMI1609fetchDataEv>
	this->processData();
 8020220:	6878      	ldr	r0, [r7, #4]
 8020222:	f000 f815 	bl	8020250 <_ZN6BMI16011processDataEv>
}
 8020226:	bf00      	nop
 8020228:	3708      	adds	r7, #8
 802022a:	46bd      	mov	sp, r7
 802022c:	bd80      	pop	{r7, pc}

0802022e <_ZN6BMI1609fetchDataEv>:

/* ============================================================================= */
uint8_t BMI160::fetchData() {
 802022e:	b580      	push	{r7, lr}
 8020230:	b082      	sub	sp, #8
 8020232:	af00      	add	r7, sp, #0
 8020234:	6078      	str	r0, [r7, #4]
//	this->readSensorTime();
	this->readGyr();
 8020236:	6878      	ldr	r0, [r7, #4]
 8020238:	f000 fb56 	bl	80208e8 <_ZN6BMI1607readGyrEv>
	this->readAcc();
 802023c:	6878      	ldr	r0, [r7, #4]
 802023e:	f000 fb84 	bl	802094a <_ZN6BMI1607readAccEv>

	return 1;
 8020242:	2301      	movs	r3, #1
}
 8020244:	4618      	mov	r0, r3
 8020246:	3708      	adds	r7, #8
 8020248:	46bd      	mov	sp, r7
 802024a:	bd80      	pop	{r7, pc}
 802024c:	0000      	movs	r0, r0
	...

08020250 <_ZN6BMI16011processDataEv>:

/* ============================================================================= */
uint8_t BMI160::processData() {
 8020250:	b580      	push	{r7, lr}
 8020252:	b082      	sub	sp, #8
 8020254:	af00      	add	r7, sp, #0
 8020256:	6078      	str	r0, [r7, #4]

	// Gyroscope
	switch (this->_config.gyr.range) {
 8020258:	687b      	ldr	r3, [r7, #4]
 802025a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 802025e:	2b04      	cmp	r3, #4
 8020260:	f200 8200 	bhi.w	8020664 <_ZN6BMI16011processDataEv+0x414>
 8020264:	a201      	add	r2, pc, #4	; (adr r2, 802026c <_ZN6BMI16011processDataEv+0x1c>)
 8020266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802026a:	bf00      	nop
 802026c:	080205a9 	.word	0x080205a9
 8020270:	080204b5 	.word	0x080204b5
 8020274:	080203f9 	.word	0x080203f9
 8020278:	0802033d 	.word	0x0802033d
 802027c:	08020281 	.word	0x08020281
	case BMI160_GYRO_RANGE_125_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020286:	ee07 3a90 	vmov	s15, r3
 802028a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 802028e:	ed9f 5bc2 	vldr	d5, [pc, #776]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 8020292:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8020296:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8020570 <_ZN6BMI16011processDataEv+0x320>
 802029a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802029e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80202a2:	eeb0 0a67 	vmov.f32	s0, s15
 80202a6:	f7fa fbc3 	bl	801aa30 <_Z7deg2radf>
 80202aa:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 80202ae:	687b      	ldr	r3, [r7, #4]
 80202b0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80202b4:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 80202be:	687b      	ldr	r3, [r7, #4]
 80202c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80202c4:	ee07 3a90 	vmov	s15, r3
 80202c8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80202cc:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 80202d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80202d4:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 8020570 <_ZN6BMI16011processDataEv+0x320>
 80202d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80202dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80202e0:	eeb0 0a67 	vmov.f32	s0, s15
 80202e4:	f7fa fba4 	bl	801aa30 <_Z7deg2radf>
 80202e8:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 80202ec:	687b      	ldr	r3, [r7, #4]
 80202ee:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80202f2:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 80202f6:	687b      	ldr	r3, [r7, #4]
 80202f8:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 80202fc:	687b      	ldr	r3, [r7, #4]
 80202fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020302:	ee07 3a90 	vmov	s15, r3
 8020306:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 802030a:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 802030e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8020312:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8020570 <_ZN6BMI16011processDataEv+0x320>
 8020316:	ee27 7b06 	vmul.f64	d7, d7, d6
 802031a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 802031e:	eeb0 0a67 	vmov.f32	s0, s15
 8020322:	f7fa fb85 	bl	801aa30 <_Z7deg2radf>
 8020326:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 802032a:	687b      	ldr	r3, [r7, #4]
 802032c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8020330:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 8020334:	687b      	ldr	r3, [r7, #4]
 8020336:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 802033a:	e193      	b.n	8020664 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_250_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 802033c:	687b      	ldr	r3, [r7, #4]
 802033e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020342:	ee07 3a90 	vmov	s15, r3
 8020346:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 802034a:	ed9f 5b93 	vldr	d5, [pc, #588]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 802034e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8020352:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8020578 <_ZN6BMI16011processDataEv+0x328>
 8020356:	ee27 7b06 	vmul.f64	d7, d7, d6
 802035a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 802035e:	eeb0 0a67 	vmov.f32	s0, s15
 8020362:	f7fa fb65 	bl	801aa30 <_Z7deg2radf>
 8020366:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 802036a:	687b      	ldr	r3, [r7, #4]
 802036c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8020370:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 8020374:	687b      	ldr	r3, [r7, #4]
 8020376:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 802037a:	687b      	ldr	r3, [r7, #4]
 802037c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8020380:	ee07 3a90 	vmov	s15, r3
 8020384:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020388:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 802038c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8020390:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8020578 <_ZN6BMI16011processDataEv+0x328>
 8020394:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020398:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 802039c:	eeb0 0a67 	vmov.f32	s0, s15
 80203a0:	f7fa fb46 	bl	801aa30 <_Z7deg2radf>
 80203a4:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 80203a8:	687b      	ldr	r3, [r7, #4]
 80203aa:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80203ae:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 80203b2:	687b      	ldr	r3, [r7, #4]
 80203b4:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 80203b8:	687b      	ldr	r3, [r7, #4]
 80203ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80203be:	ee07 3a90 	vmov	s15, r3
 80203c2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80203c6:	ed9f 5b74 	vldr	d5, [pc, #464]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 80203ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80203ce:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8020578 <_ZN6BMI16011processDataEv+0x328>
 80203d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80203d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80203da:	eeb0 0a67 	vmov.f32	s0, s15
 80203de:	f7fa fb27 	bl	801aa30 <_Z7deg2radf>
 80203e2:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 80203e6:	687b      	ldr	r3, [r7, #4]
 80203e8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80203ec:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 80203f0:	687b      	ldr	r3, [r7, #4]
 80203f2:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 80203f6:	e135      	b.n	8020664 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_500_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 80203f8:	687b      	ldr	r3, [r7, #4]
 80203fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80203fe:	ee07 3a90 	vmov	s15, r3
 8020402:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020406:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 802040a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802040e:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8020580 <_ZN6BMI16011processDataEv+0x330>
 8020412:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020416:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 802041a:	eeb0 0a67 	vmov.f32	s0, s15
 802041e:	f7fa fb07 	bl	801aa30 <_Z7deg2radf>
 8020422:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 8020426:	687b      	ldr	r3, [r7, #4]
 8020428:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 802042c:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 8020430:	687b      	ldr	r3, [r7, #4]
 8020432:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 8020436:	687b      	ldr	r3, [r7, #4]
 8020438:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 802043c:	ee07 3a90 	vmov	s15, r3
 8020440:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020444:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 8020448:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802044c:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8020580 <_ZN6BMI16011processDataEv+0x330>
 8020450:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020454:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020458:	eeb0 0a67 	vmov.f32	s0, s15
 802045c:	f7fa fae8 	bl	801aa30 <_Z7deg2radf>
 8020460:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8020464:	687b      	ldr	r3, [r7, #4]
 8020466:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 802046a:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 802046e:	687b      	ldr	r3, [r7, #4]
 8020470:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 8020474:	687b      	ldr	r3, [r7, #4]
 8020476:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802047a:	ee07 3a90 	vmov	s15, r3
 802047e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020482:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 8020486:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802048a:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8020580 <_ZN6BMI16011processDataEv+0x330>
 802048e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020492:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020496:	eeb0 0a67 	vmov.f32	s0, s15
 802049a:	f7fa fac9 	bl	801aa30 <_Z7deg2radf>
 802049e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 80204a2:	687b      	ldr	r3, [r7, #4]
 80204a4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80204a8:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 80204ac:	687b      	ldr	r3, [r7, #4]
 80204ae:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 80204b2:	e0d7      	b.n	8020664 <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_1000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 80204b4:	687b      	ldr	r3, [r7, #4]
 80204b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80204ba:	ee07 3a90 	vmov	s15, r3
 80204be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80204c2:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 80204c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80204ca:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 8020588 <_ZN6BMI16011processDataEv+0x338>
 80204ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80204d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80204d6:	eeb0 0a67 	vmov.f32	s0, s15
 80204da:	f7fa faa9 	bl	801aa30 <_Z7deg2radf>
 80204de:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 80204e2:	687b      	ldr	r3, [r7, #4]
 80204e4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80204e8:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 80204f2:	687b      	ldr	r3, [r7, #4]
 80204f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80204f8:	ee07 3a90 	vmov	s15, r3
 80204fc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020500:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 8020504:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8020508:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8020588 <_ZN6BMI16011processDataEv+0x338>
 802050c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020510:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020514:	eeb0 0a67 	vmov.f32	s0, s15
 8020518:	f7fa fa8a 	bl	801aa30 <_Z7deg2radf>
 802051c:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8020520:	687b      	ldr	r3, [r7, #4]
 8020522:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8020526:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 802052a:	687b      	ldr	r3, [r7, #4]
 802052c:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 8020530:	687b      	ldr	r3, [r7, #4]
 8020532:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8020536:	ee07 3a90 	vmov	s15, r3
 802053a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 802053e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 8020542:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8020546:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8020588 <_ZN6BMI16011processDataEv+0x338>
 802054a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802054e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020552:	eeb0 0a67 	vmov.f32	s0, s15
 8020556:	f7fa fa6b 	bl	801aa30 <_Z7deg2radf>
 802055a:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 802055e:	687b      	ldr	r3, [r7, #4]
 8020560:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8020564:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 8020568:	687b      	ldr	r3, [r7, #4]
 802056a:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 802056e:	e079      	b.n	8020664 <_ZN6BMI16011processDataEv+0x414>
 8020570:	00000000 	.word	0x00000000
 8020574:	405f4000 	.word	0x405f4000
 8020578:	00000000 	.word	0x00000000
 802057c:	406f4000 	.word	0x406f4000
 8020580:	00000000 	.word	0x00000000
 8020584:	407f4000 	.word	0x407f4000
 8020588:	00000000 	.word	0x00000000
 802058c:	408f4000 	.word	0x408f4000
 8020590:	00000000 	.word	0x00000000
 8020594:	409f4000 	.word	0x409f4000
 8020598:	00000000 	.word	0x00000000
 802059c:	40e00000 	.word	0x40e00000
 80205a0:	51eb851f 	.word	0x51eb851f
 80205a4:	40239eb8 	.word	0x40239eb8
	}
	case BMI160_GYRO_RANGE_2000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 80205a8:	687b      	ldr	r3, [r7, #4]
 80205aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80205ae:	ee07 3a90 	vmov	s15, r3
 80205b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80205b6:	ed1f 5b08 	vldr	d5, [pc, #-32]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 80205ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80205be:	ed1f 6b0c 	vldr	d6, [pc, #-48]	; 8020590 <_ZN6BMI16011processDataEv+0x340>
 80205c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80205c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80205ca:	eeb0 0a67 	vmov.f32	s0, s15
 80205ce:	f7fa fa2f 	bl	801aa30 <_Z7deg2radf>
 80205d2:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 80205d6:	687b      	ldr	r3, [r7, #4]
 80205d8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80205dc:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 80205e0:	687b      	ldr	r3, [r7, #4]
 80205e2:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 80205e6:	687b      	ldr	r3, [r7, #4]
 80205e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80205ec:	ee07 3a90 	vmov	s15, r3
 80205f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80205f4:	ed1f 5b18 	vldr	d5, [pc, #-96]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 80205f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80205fc:	ed1f 6b1c 	vldr	d6, [pc, #-112]	; 8020590 <_ZN6BMI16011processDataEv+0x340>
 8020600:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020604:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020608:	eeb0 0a67 	vmov.f32	s0, s15
 802060c:	f7fa fa10 	bl	801aa30 <_Z7deg2radf>
 8020610:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 8020614:	687b      	ldr	r3, [r7, #4]
 8020616:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 802061a:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 802061e:	687b      	ldr	r3, [r7, #4]
 8020620:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 8020624:	687b      	ldr	r3, [r7, #4]
 8020626:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 802062a:	ee07 3a90 	vmov	s15, r3
 802062e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020632:	ed1f 5b27 	vldr	d5, [pc, #-156]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 8020636:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802063a:	ed1f 6b2b 	vldr	d6, [pc, #-172]	; 8020590 <_ZN6BMI16011processDataEv+0x340>
 802063e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020642:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020646:	eeb0 0a67 	vmov.f32	s0, s15
 802064a:	f7fa f9f1 	bl	801aa30 <_Z7deg2radf>
 802064e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 8020652:	687b      	ldr	r3, [r7, #4]
 8020654:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8020658:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 802065c:	687b      	ldr	r3, [r7, #4]
 802065e:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 8020662:	bf00      	nop
	}
	}

	// Accelerometer
	switch (this->_config.acc.range) {
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 802066a:	3b03      	subs	r3, #3
 802066c:	2b09      	cmp	r3, #9
 802066e:	f200 8135 	bhi.w	80208dc <_ZN6BMI16011processDataEv+0x68c>
 8020672:	a201      	add	r2, pc, #4	; (adr r2, 8020678 <_ZN6BMI16011processDataEv+0x428>)
 8020674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020678:	080206a1 	.word	0x080206a1
 802067c:	080208dd 	.word	0x080208dd
 8020680:	08020727 	.word	0x08020727
 8020684:	080208dd 	.word	0x080208dd
 8020688:	080208dd 	.word	0x080208dd
 802068c:	080207b9 	.word	0x080207b9
 8020690:	080208dd 	.word	0x080208dd
 8020694:	080208dd 	.word	0x080208dd
 8020698:	080208dd 	.word	0x080208dd
 802069c:	0802084b 	.word	0x0802084b
	case BMI160_ACCEL_RANGE_2G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 2.0 * 9.81;
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80206a6:	ee07 3a90 	vmov	s15, r3
 80206aa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80206ae:	ed1f 5b46 	vldr	d5, [pc, #-280]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 80206b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80206b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80206ba:	ed1f 6b47 	vldr	d6, [pc, #-284]	; 80205a0 <_ZN6BMI16011processDataEv+0x350>
 80206be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80206c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80206c6:	687b      	ldr	r3, [r7, #4]
 80206c8:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 2.0 * 9.81;
 80206cc:	687b      	ldr	r3, [r7, #4]
 80206ce:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80206d2:	ee07 3a90 	vmov	s15, r3
 80206d6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80206da:	ed1f 5b51 	vldr	d5, [pc, #-324]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 80206de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80206e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80206e6:	ed1f 6b52 	vldr	d6, [pc, #-328]	; 80205a0 <_ZN6BMI16011processDataEv+0x350>
 80206ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80206ee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 2.0 * 9.81;
 80206f8:	687b      	ldr	r3, [r7, #4]
 80206fa:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80206fe:	ee07 3a90 	vmov	s15, r3
 8020702:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020706:	ed1f 5b5c 	vldr	d5, [pc, #-368]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 802070a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802070e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8020712:	ed1f 6b5d 	vldr	d6, [pc, #-372]	; 80205a0 <_ZN6BMI16011processDataEv+0x350>
 8020716:	ee27 7b06 	vmul.f64	d7, d7, d6
 802071a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 802071e:	687b      	ldr	r3, [r7, #4]
 8020720:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		break;
 8020724:	e0da      	b.n	80208dc <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_4G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 4.0 * 9.81;
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 802072c:	ee07 3a90 	vmov	s15, r3
 8020730:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020734:	ed1f 5b68 	vldr	d5, [pc, #-416]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 8020738:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802073c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8020740:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020744:	ed1f 6b6a 	vldr	d6, [pc, #-424]	; 80205a0 <_ZN6BMI16011processDataEv+0x350>
 8020748:	ee27 7b06 	vmul.f64	d7, d7, d6
 802074c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020750:	687b      	ldr	r3, [r7, #4]
 8020752:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 4.0 * 9.81;
 8020756:	687b      	ldr	r3, [r7, #4]
 8020758:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 802075c:	ee07 3a90 	vmov	s15, r3
 8020760:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020764:	ed1f 5b74 	vldr	d5, [pc, #-464]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 8020768:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802076c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8020770:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020774:	ed1f 6b76 	vldr	d6, [pc, #-472]	; 80205a0 <_ZN6BMI16011processDataEv+0x350>
 8020778:	ee27 7b06 	vmul.f64	d7, d7, d6
 802077c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020780:	687b      	ldr	r3, [r7, #4]
 8020782:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 4.0 * 9.81;
 8020786:	687b      	ldr	r3, [r7, #4]
 8020788:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 802078c:	ee07 3a90 	vmov	s15, r3
 8020790:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020794:	ed1f 5b80 	vldr	d5, [pc, #-512]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 8020798:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802079c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80207a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80207a4:	ed1f 6b82 	vldr	d6, [pc, #-520]	; 80205a0 <_ZN6BMI16011processDataEv+0x350>
 80207a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80207ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80207b0:	687b      	ldr	r3, [r7, #4]
 80207b2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		break;
 80207b6:	e091      	b.n	80208dc <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_8G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 8.0 * 9.81;
 80207b8:	687b      	ldr	r3, [r7, #4]
 80207ba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80207be:	ee07 3a90 	vmov	s15, r3
 80207c2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80207c6:	ed1f 5b8c 	vldr	d5, [pc, #-560]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 80207ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80207ce:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 80207d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80207d6:	ed1f 6b8e 	vldr	d6, [pc, #-568]	; 80205a0 <_ZN6BMI16011processDataEv+0x350>
 80207da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80207de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80207e2:	687b      	ldr	r3, [r7, #4]
 80207e4:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 8.0 * 9.81;
 80207e8:	687b      	ldr	r3, [r7, #4]
 80207ea:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80207ee:	ee07 3a90 	vmov	s15, r3
 80207f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80207f6:	ed1f 5b98 	vldr	d5, [pc, #-608]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 80207fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80207fe:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8020802:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020806:	ed1f 6b9a 	vldr	d6, [pc, #-616]	; 80205a0 <_ZN6BMI16011processDataEv+0x350>
 802080a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802080e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020812:	687b      	ldr	r3, [r7, #4]
 8020814:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 8.0 * 9.81;
 8020818:	687b      	ldr	r3, [r7, #4]
 802081a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 802081e:	ee07 3a90 	vmov	s15, r3
 8020822:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020826:	ed1f 5ba4 	vldr	d5, [pc, #-656]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 802082a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 802082e:	eeb2 6b00 	vmov.f64	d6, #32	; 0x41000000  8.0
 8020832:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020836:	ed1f 6ba6 	vldr	d6, [pc, #-664]	; 80205a0 <_ZN6BMI16011processDataEv+0x350>
 802083a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802083e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020842:	687b      	ldr	r3, [r7, #4]
 8020844:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		break;
 8020848:	e048      	b.n	80208dc <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_16G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 16.0 * 9.81;
 802084a:	687b      	ldr	r3, [r7, #4]
 802084c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8020850:	ee07 3a90 	vmov	s15, r3
 8020854:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020858:	ed1f 5bb1 	vldr	d5, [pc, #-708]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 802085c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8020860:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8020864:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020868:	ed1f 6bb3 	vldr	d6, [pc, #-716]	; 80205a0 <_ZN6BMI16011processDataEv+0x350>
 802086c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020870:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8020874:	687b      	ldr	r3, [r7, #4]
 8020876:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 16.0 * 9.81;
 802087a:	687b      	ldr	r3, [r7, #4]
 802087c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8020880:	ee07 3a90 	vmov	s15, r3
 8020884:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8020888:	ed1f 5bbd 	vldr	d5, [pc, #-756]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 802088c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8020890:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 8020894:	ee27 7b06 	vmul.f64	d7, d7, d6
 8020898:	ed1f 6bbf 	vldr	d6, [pc, #-764]	; 80205a0 <_ZN6BMI16011processDataEv+0x350>
 802089c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80208a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80208a4:	687b      	ldr	r3, [r7, #4]
 80208a6:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 16.0 * 9.81;
 80208aa:	687b      	ldr	r3, [r7, #4]
 80208ac:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80208b0:	ee07 3a90 	vmov	s15, r3
 80208b4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80208b8:	ed1f 5bc9 	vldr	d5, [pc, #-804]	; 8020598 <_ZN6BMI16011processDataEv+0x348>
 80208bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80208c0:	eeb3 6b00 	vmov.f64	d6, #48	; 0x41800000  16.0
 80208c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80208c8:	ed1f 6bcb 	vldr	d6, [pc, #-812]	; 80205a0 <_ZN6BMI16011processDataEv+0x350>
 80208cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80208d0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80208d4:	687b      	ldr	r3, [r7, #4]
 80208d6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		break;
 80208da:	bf00      	nop
	}
	}

	return 1;
 80208dc:	2301      	movs	r3, #1
}
 80208de:	4618      	mov	r0, r3
 80208e0:	3708      	adds	r7, #8
 80208e2:	46bd      	mov	sp, r7
 80208e4:	bd80      	pop	{r7, pc}
 80208e6:	bf00      	nop

080208e8 <_ZN6BMI1607readGyrEv>:
	this->gyr_calib.y = gyr_y;
	this->gyr_calib.z = gyr_z;
}

/* ============================================================================= */
uint8_t BMI160::readGyr() {
 80208e8:	b580      	push	{r7, lr}
 80208ea:	b084      	sub	sp, #16
 80208ec:	af00      	add	r7, sp, #0
 80208ee:	6078      	str	r0, [r7, #4]
	uint8_t gyr_data[6] = { 0 };
 80208f0:	2300      	movs	r3, #0
 80208f2:	60bb      	str	r3, [r7, #8]
 80208f4:	2300      	movs	r3, #0
 80208f6:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_GYR_X_LOW, gyr_data, 6);
 80208f8:	f107 0208 	add.w	r2, r7, #8
 80208fc:	2306      	movs	r3, #6
 80208fe:	210c      	movs	r1, #12
 8020900:	6878      	ldr	r0, [r7, #4]
 8020902:	f7ff fc30 	bl	8020166 <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->gyr_raw.x = bytearray_to_int16(&gyr_data[0]);
 8020906:	f107 0308 	add.w	r3, r7, #8
 802090a:	4618      	mov	r0, r3
 802090c:	f000 f999 	bl	8020c42 <_Z18bytearray_to_int16Ph>
 8020910:	4603      	mov	r3, r0
 8020912:	461a      	mov	r2, r3
 8020914:	687b      	ldr	r3, [r7, #4]
 8020916:	801a      	strh	r2, [r3, #0]
	this->gyr_raw.y = bytearray_to_int16(&gyr_data[2]);
 8020918:	f107 0308 	add.w	r3, r7, #8
 802091c:	3302      	adds	r3, #2
 802091e:	4618      	mov	r0, r3
 8020920:	f000 f98f 	bl	8020c42 <_Z18bytearray_to_int16Ph>
 8020924:	4603      	mov	r3, r0
 8020926:	461a      	mov	r2, r3
 8020928:	687b      	ldr	r3, [r7, #4]
 802092a:	805a      	strh	r2, [r3, #2]
	this->gyr_raw.z = bytearray_to_int16(&gyr_data[4]);
 802092c:	f107 0308 	add.w	r3, r7, #8
 8020930:	3304      	adds	r3, #4
 8020932:	4618      	mov	r0, r3
 8020934:	f000 f985 	bl	8020c42 <_Z18bytearray_to_int16Ph>
 8020938:	4603      	mov	r3, r0
 802093a:	461a      	mov	r2, r3
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	809a      	strh	r2, [r3, #4]

	return 1;
 8020940:	2301      	movs	r3, #1
}
 8020942:	4618      	mov	r0, r3
 8020944:	3710      	adds	r7, #16
 8020946:	46bd      	mov	sp, r7
 8020948:	bd80      	pop	{r7, pc}

0802094a <_ZN6BMI1607readAccEv>:

/* ============================================================================= */
uint8_t BMI160::readAcc() {
 802094a:	b580      	push	{r7, lr}
 802094c:	b084      	sub	sp, #16
 802094e:	af00      	add	r7, sp, #0
 8020950:	6078      	str	r0, [r7, #4]
	uint8_t acc_data[6] = { 0 };
 8020952:	2300      	movs	r3, #0
 8020954:	60bb      	str	r3, [r7, #8]
 8020956:	2300      	movs	r3, #0
 8020958:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_ACC_X_LOW, acc_data, 6);
 802095a:	f107 0208 	add.w	r2, r7, #8
 802095e:	2306      	movs	r3, #6
 8020960:	2112      	movs	r1, #18
 8020962:	6878      	ldr	r0, [r7, #4]
 8020964:	f7ff fbff 	bl	8020166 <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->acc_raw.x = bytearray_to_int16(&acc_data[0]);
 8020968:	f107 0308 	add.w	r3, r7, #8
 802096c:	4618      	mov	r0, r3
 802096e:	f000 f968 	bl	8020c42 <_Z18bytearray_to_int16Ph>
 8020972:	4603      	mov	r3, r0
 8020974:	461a      	mov	r2, r3
 8020976:	687b      	ldr	r3, [r7, #4]
 8020978:	829a      	strh	r2, [r3, #20]
	this->acc_raw.y = bytearray_to_int16(&acc_data[2]);
 802097a:	f107 0308 	add.w	r3, r7, #8
 802097e:	3302      	adds	r3, #2
 8020980:	4618      	mov	r0, r3
 8020982:	f000 f95e 	bl	8020c42 <_Z18bytearray_to_int16Ph>
 8020986:	4603      	mov	r3, r0
 8020988:	461a      	mov	r2, r3
 802098a:	687b      	ldr	r3, [r7, #4]
 802098c:	82da      	strh	r2, [r3, #22]
	this->acc_raw.z = bytearray_to_int16(&acc_data[4]);
 802098e:	f107 0308 	add.w	r3, r7, #8
 8020992:	3304      	adds	r3, #4
 8020994:	4618      	mov	r0, r3
 8020996:	f000 f954 	bl	8020c42 <_Z18bytearray_to_int16Ph>
 802099a:	4603      	mov	r3, r0
 802099c:	461a      	mov	r2, r3
 802099e:	687b      	ldr	r3, [r7, #4]
 80209a0:	831a      	strh	r2, [r3, #24]

	return 1;
 80209a2:	2301      	movs	r3, #1
}
 80209a4:	4618      	mov	r0, r3
 80209a6:	3710      	adds	r7, #16
 80209a8:	46bd      	mov	sp, r7
 80209aa:	bd80      	pop	{r7, pc}

080209ac <_ZN6BMI16013setGyroConfigEhh>:
	this->sensortime = bytearray_to_uint32(sensortime_data);
	return CORE_OK;
}

/* ============================================================================= */
uint8_t BMI160::setGyroConfig(uint8_t config, uint8_t range) {
 80209ac:	b580      	push	{r7, lr}
 80209ae:	b082      	sub	sp, #8
 80209b0:	af00      	add	r7, sp, #0
 80209b2:	6078      	str	r0, [r7, #4]
 80209b4:	460b      	mov	r3, r1
 80209b6:	70fb      	strb	r3, [r7, #3]
 80209b8:	4613      	mov	r3, r2
 80209ba:	70bb      	strb	r3, [r7, #2]

	this->writeRegister(BMI160_REG_GYRO_RANGE, range);
 80209bc:	78bb      	ldrb	r3, [r7, #2]
 80209be:	461a      	mov	r2, r3
 80209c0:	2143      	movs	r1, #67	; 0x43
 80209c2:	6878      	ldr	r0, [r7, #4]
 80209c4:	f7ff faca 	bl	801ff5c <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_GYRO_CONFIG, config);
 80209c8:	78fb      	ldrb	r3, [r7, #3]
 80209ca:	461a      	mov	r2, r3
 80209cc:	2142      	movs	r1, #66	; 0x42
 80209ce:	6878      	ldr	r0, [r7, #4]
 80209d0:	f7ff fac4 	bl	801ff5c <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 80209d4:	2301      	movs	r3, #1
}
 80209d6:	4618      	mov	r0, r3
 80209d8:	3708      	adds	r7, #8
 80209da:	46bd      	mov	sp, r7
 80209dc:	bd80      	pop	{r7, pc}

080209de <_ZN6BMI16012setAccConfigEhh>:

/* ============================================================================= */
uint8_t BMI160::setAccConfig(uint8_t config, uint8_t range) {
 80209de:	b580      	push	{r7, lr}
 80209e0:	b082      	sub	sp, #8
 80209e2:	af00      	add	r7, sp, #0
 80209e4:	6078      	str	r0, [r7, #4]
 80209e6:	460b      	mov	r3, r1
 80209e8:	70fb      	strb	r3, [r7, #3]
 80209ea:	4613      	mov	r3, r2
 80209ec:	70bb      	strb	r3, [r7, #2]
	this->writeRegister(BMI160_REG_ACCEL_CONFIG, config);
 80209ee:	78fb      	ldrb	r3, [r7, #3]
 80209f0:	461a      	mov	r2, r3
 80209f2:	2140      	movs	r1, #64	; 0x40
 80209f4:	6878      	ldr	r0, [r7, #4]
 80209f6:	f7ff fab1 	bl	801ff5c <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_ACCEL_RANGE, range);
 80209fa:	78bb      	ldrb	r3, [r7, #2]
 80209fc:	461a      	mov	r2, r3
 80209fe:	2141      	movs	r1, #65	; 0x41
 8020a00:	6878      	ldr	r0, [r7, #4]
 8020a02:	f7ff faab 	bl	801ff5c <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 8020a06:	2301      	movs	r3, #1
}
 8020a08:	4618      	mov	r0, r3
 8020a0a:	3708      	adds	r7, #8
 8020a0c:	46bd      	mov	sp, r7
 8020a0e:	bd80      	pop	{r7, pc}

08020a10 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>:

/* ============================================================================= */
uint8_t BMI160::setPowerMode(BMI160_PowerMode mode) {
 8020a10:	b580      	push	{r7, lr}
 8020a12:	b082      	sub	sp, #8
 8020a14:	af00      	add	r7, sp, #0
 8020a16:	6078      	str	r0, [r7, #4]
 8020a18:	460b      	mov	r3, r1
 8020a1a:	70fb      	strb	r3, [r7, #3]
	if (mode == BMI160_Power_Normal) {
 8020a1c:	78fb      	ldrb	r3, [r7, #3]
 8020a1e:	2b00      	cmp	r3, #0
 8020a20:	d113      	bne.n	8020a4a <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x3a>
		delay(100);
 8020a22:	2064      	movs	r0, #100	; 0x64
 8020a24:	f7f9 fbef 	bl	801a206 <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_NORMAL_MODE);
 8020a28:	2215      	movs	r2, #21
 8020a2a:	217e      	movs	r1, #126	; 0x7e
 8020a2c:	6878      	ldr	r0, [r7, #4]
 8020a2e:	f7ff fa95 	bl	801ff5c <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 8020a32:	20fa      	movs	r0, #250	; 0xfa
 8020a34:	f7f9 fbe7 	bl	801a206 <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_NORMAL_MODE);
 8020a38:	2211      	movs	r2, #17
 8020a3a:	217e      	movs	r1, #126	; 0x7e
 8020a3c:	6878      	ldr	r0, [r7, #4]
 8020a3e:	f7ff fa8d 	bl	801ff5c <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 8020a42:	20fa      	movs	r0, #250	; 0xfa
 8020a44:	f7f9 fbdf 	bl	801a206 <_Z5delaym>
 8020a48:	e012      	b.n	8020a70 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
	} else if (mode == BMI160_Power_Suspend) {
 8020a4a:	78fb      	ldrb	r3, [r7, #3]
 8020a4c:	2b01      	cmp	r3, #1
 8020a4e:	d10f      	bne.n	8020a70 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_SUSPEND_MODE);
 8020a50:	2210      	movs	r2, #16
 8020a52:	217e      	movs	r1, #126	; 0x7e
 8020a54:	6878      	ldr	r0, [r7, #4]
 8020a56:	f7ff fa81 	bl	801ff5c <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 8020a5a:	2064      	movs	r0, #100	; 0x64
 8020a5c:	f7f9 fbd3 	bl	801a206 <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_SUSPEND_MODE);
 8020a60:	2214      	movs	r2, #20
 8020a62:	217e      	movs	r1, #126	; 0x7e
 8020a64:	6878      	ldr	r0, [r7, #4]
 8020a66:	f7ff fa79 	bl	801ff5c <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 8020a6a:	2064      	movs	r0, #100	; 0x64
 8020a6c:	f7f9 fbcb 	bl	801a206 <_Z5delaym>
	}
	return CORE_OK;
 8020a70:	2301      	movs	r3, #1
}
 8020a72:	4618      	mov	r0, r3
 8020a74:	3708      	adds	r7, #8
 8020a76:	46bd      	mov	sp, r7
 8020a78:	bd80      	pop	{r7, pc}

08020a7a <_ZN6BMI1605resetEv>:
	this->writeRegister(0x77, offset_register);

}

/* ============================================================================= */
void BMI160::reset() {
 8020a7a:	b580      	push	{r7, lr}
 8020a7c:	b082      	sub	sp, #8
 8020a7e:	af00      	add	r7, sp, #0
 8020a80:	6078      	str	r0, [r7, #4]
	this->writeRegister(BMI160_REG_COMMAND, 0xB6);
 8020a82:	22b6      	movs	r2, #182	; 0xb6
 8020a84:	217e      	movs	r1, #126	; 0x7e
 8020a86:	6878      	ldr	r0, [r7, #4]
 8020a88:	f7ff fa68 	bl	801ff5c <_ZN6BMI16013writeRegisterEhh>
	delay(10);
 8020a8c:	200a      	movs	r0, #10
 8020a8e:	f7f9 fbba 	bl	801a206 <_Z5delaym>
}
 8020a92:	bf00      	nop
 8020a94:	3708      	adds	r7, #8
 8020a96:	46bd      	mov	sp, r7
 8020a98:	bd80      	pop	{r7, pc}

08020a9a <_Z10cobsEncodePhhS_>:
	@param buffer Pointer to encoded output buffer
	@return Encoded buffer length in bytes
	@note Does not output delimiter byte
*/
uint8_t cobsEncode(uint8_t *data_in, uint8_t length, uint8_t *data_out)
{
 8020a9a:	b480      	push	{r7}
 8020a9c:	b089      	sub	sp, #36	; 0x24
 8020a9e:	af00      	add	r7, sp, #0
 8020aa0:	60f8      	str	r0, [r7, #12]
 8020aa2:	460b      	mov	r3, r1
 8020aa4:	607a      	str	r2, [r7, #4]
 8020aa6:	72fb      	strb	r3, [r7, #11]

	uint8_t *encode = data_out; // Encoded byte pointer
 8020aa8:	687b      	ldr	r3, [r7, #4]
 8020aaa:	61fb      	str	r3, [r7, #28]
	uint8_t *codep = encode++; // Output code pointer
 8020aac:	69fb      	ldr	r3, [r7, #28]
 8020aae:	1c5a      	adds	r2, r3, #1
 8020ab0:	61fa      	str	r2, [r7, #28]
 8020ab2:	61bb      	str	r3, [r7, #24]
	uint8_t code = 1; // Code value
 8020ab4:	2301      	movs	r3, #1
 8020ab6:	75fb      	strb	r3, [r7, #23]

	for (const uint8_t *byte = (const uint8_t *)data_in; length--; ++byte)
 8020ab8:	68fb      	ldr	r3, [r7, #12]
 8020aba:	613b      	str	r3, [r7, #16]
 8020abc:	e027      	b.n	8020b0e <_Z10cobsEncodePhhS_+0x74>
	{
		if (*byte) // Byte not zero, write it
 8020abe:	693b      	ldr	r3, [r7, #16]
 8020ac0:	781b      	ldrb	r3, [r3, #0]
 8020ac2:	2b00      	cmp	r3, #0
 8020ac4:	d008      	beq.n	8020ad8 <_Z10cobsEncodePhhS_+0x3e>
			*encode++ = *byte, ++code;
 8020ac6:	69fb      	ldr	r3, [r7, #28]
 8020ac8:	1c5a      	adds	r2, r3, #1
 8020aca:	61fa      	str	r2, [r7, #28]
 8020acc:	693a      	ldr	r2, [r7, #16]
 8020ace:	7812      	ldrb	r2, [r2, #0]
 8020ad0:	701a      	strb	r2, [r3, #0]
 8020ad2:	7dfb      	ldrb	r3, [r7, #23]
 8020ad4:	3301      	adds	r3, #1
 8020ad6:	75fb      	strb	r3, [r7, #23]

		if (!*byte || code == 0xff) // Input is zero or block completed, restart
 8020ad8:	693b      	ldr	r3, [r7, #16]
 8020ada:	781b      	ldrb	r3, [r3, #0]
 8020adc:	2b00      	cmp	r3, #0
 8020ade:	d002      	beq.n	8020ae6 <_Z10cobsEncodePhhS_+0x4c>
 8020ae0:	7dfb      	ldrb	r3, [r7, #23]
 8020ae2:	2bff      	cmp	r3, #255	; 0xff
 8020ae4:	d110      	bne.n	8020b08 <_Z10cobsEncodePhhS_+0x6e>
		{
			*codep = code, code = 1, codep = encode;
 8020ae6:	69bb      	ldr	r3, [r7, #24]
 8020ae8:	7dfa      	ldrb	r2, [r7, #23]
 8020aea:	701a      	strb	r2, [r3, #0]
 8020aec:	2301      	movs	r3, #1
 8020aee:	75fb      	strb	r3, [r7, #23]
 8020af0:	69fb      	ldr	r3, [r7, #28]
 8020af2:	61bb      	str	r3, [r7, #24]
			if (!*byte || length)
 8020af4:	693b      	ldr	r3, [r7, #16]
 8020af6:	781b      	ldrb	r3, [r3, #0]
 8020af8:	2b00      	cmp	r3, #0
 8020afa:	d002      	beq.n	8020b02 <_Z10cobsEncodePhhS_+0x68>
 8020afc:	7afb      	ldrb	r3, [r7, #11]
 8020afe:	2b00      	cmp	r3, #0
 8020b00:	d002      	beq.n	8020b08 <_Z10cobsEncodePhhS_+0x6e>
				++encode;
 8020b02:	69fb      	ldr	r3, [r7, #28]
 8020b04:	3301      	adds	r3, #1
 8020b06:	61fb      	str	r3, [r7, #28]
	for (const uint8_t *byte = (const uint8_t *)data_in; length--; ++byte)
 8020b08:	693b      	ldr	r3, [r7, #16]
 8020b0a:	3301      	adds	r3, #1
 8020b0c:	613b      	str	r3, [r7, #16]
 8020b0e:	7afb      	ldrb	r3, [r7, #11]
 8020b10:	1e5a      	subs	r2, r3, #1
 8020b12:	72fa      	strb	r2, [r7, #11]
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	bf14      	ite	ne
 8020b18:	2301      	movne	r3, #1
 8020b1a:	2300      	moveq	r3, #0
 8020b1c:	b2db      	uxtb	r3, r3
 8020b1e:	2b00      	cmp	r3, #0
 8020b20:	d1cd      	bne.n	8020abe <_Z10cobsEncodePhhS_+0x24>
		}
	}
	*codep = code; // Write final code value
 8020b22:	69bb      	ldr	r3, [r7, #24]
 8020b24:	7dfa      	ldrb	r2, [r7, #23]
 8020b26:	701a      	strb	r2, [r3, #0]

	return (uint8_t)(encode - data_out);
 8020b28:	69fa      	ldr	r2, [r7, #28]
 8020b2a:	687b      	ldr	r3, [r7, #4]
 8020b2c:	1ad3      	subs	r3, r2, r3
 8020b2e:	b2db      	uxtb	r3, r3
}
 8020b30:	4618      	mov	r0, r3
 8020b32:	3724      	adds	r7, #36	; 0x24
 8020b34:	46bd      	mov	sp, r7
 8020b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b3a:	4770      	bx	lr

08020b3c <_Z10cobsDecodePhhS_>:
	@param data Pointer to decoded output data
	@return Number of bytes successfully decoded
	@note Stops decoding if delimiter byte is found
*/
uint8_t cobsDecode(uint8_t *buffer, uint8_t length, uint8_t *data)
{
 8020b3c:	b480      	push	{r7}
 8020b3e:	b089      	sub	sp, #36	; 0x24
 8020b40:	af00      	add	r7, sp, #0
 8020b42:	60f8      	str	r0, [r7, #12]
 8020b44:	460b      	mov	r3, r1
 8020b46:	607a      	str	r2, [r7, #4]
 8020b48:	72fb      	strb	r3, [r7, #11]

	const uint8_t *byte = buffer; // Encoded input byte pointer
 8020b4a:	68fb      	ldr	r3, [r7, #12]
 8020b4c:	61fb      	str	r3, [r7, #28]
	uint8_t *decode = (uint8_t *)data; // Decoded output byte pointer
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	61bb      	str	r3, [r7, #24]

	for (uint8_t code = 0xff, block = 0; byte < buffer + length; --block)
 8020b52:	23ff      	movs	r3, #255	; 0xff
 8020b54:	75fb      	strb	r3, [r7, #23]
 8020b56:	2300      	movs	r3, #0
 8020b58:	75bb      	strb	r3, [r7, #22]
 8020b5a:	e020      	b.n	8020b9e <_Z10cobsDecodePhhS_+0x62>
	{
		if (block) // Decode block byte
 8020b5c:	7dbb      	ldrb	r3, [r7, #22]
 8020b5e:	2b00      	cmp	r3, #0
 8020b60:	d008      	beq.n	8020b74 <_Z10cobsDecodePhhS_+0x38>
			*decode++ = *byte++;
 8020b62:	69fa      	ldr	r2, [r7, #28]
 8020b64:	1c53      	adds	r3, r2, #1
 8020b66:	61fb      	str	r3, [r7, #28]
 8020b68:	69bb      	ldr	r3, [r7, #24]
 8020b6a:	1c59      	adds	r1, r3, #1
 8020b6c:	61b9      	str	r1, [r7, #24]
 8020b6e:	7812      	ldrb	r2, [r2, #0]
 8020b70:	701a      	strb	r2, [r3, #0]
 8020b72:	e011      	b.n	8020b98 <_Z10cobsDecodePhhS_+0x5c>
		else
		{
			if (code != 0xff) // Encoded zero, write it
 8020b74:	7dfb      	ldrb	r3, [r7, #23]
 8020b76:	2bff      	cmp	r3, #255	; 0xff
 8020b78:	d004      	beq.n	8020b84 <_Z10cobsDecodePhhS_+0x48>
				*decode++ = 0;
 8020b7a:	69bb      	ldr	r3, [r7, #24]
 8020b7c:	1c5a      	adds	r2, r3, #1
 8020b7e:	61ba      	str	r2, [r7, #24]
 8020b80:	2200      	movs	r2, #0
 8020b82:	701a      	strb	r2, [r3, #0]
			block = code = *byte++; // Next block length
 8020b84:	69fb      	ldr	r3, [r7, #28]
 8020b86:	1c5a      	adds	r2, r3, #1
 8020b88:	61fa      	str	r2, [r7, #28]
 8020b8a:	781b      	ldrb	r3, [r3, #0]
 8020b8c:	75fb      	strb	r3, [r7, #23]
 8020b8e:	7dfb      	ldrb	r3, [r7, #23]
 8020b90:	75bb      	strb	r3, [r7, #22]
			if (!code) // Delimiter code found
 8020b92:	7dfb      	ldrb	r3, [r7, #23]
 8020b94:	2b00      	cmp	r3, #0
 8020b96:	d009      	beq.n	8020bac <_Z10cobsDecodePhhS_+0x70>
	for (uint8_t code = 0xff, block = 0; byte < buffer + length; --block)
 8020b98:	7dbb      	ldrb	r3, [r7, #22]
 8020b9a:	3b01      	subs	r3, #1
 8020b9c:	75bb      	strb	r3, [r7, #22]
 8020b9e:	7afb      	ldrb	r3, [r7, #11]
 8020ba0:	68fa      	ldr	r2, [r7, #12]
 8020ba2:	4413      	add	r3, r2
 8020ba4:	69fa      	ldr	r2, [r7, #28]
 8020ba6:	429a      	cmp	r2, r3
 8020ba8:	d3d8      	bcc.n	8020b5c <_Z10cobsDecodePhhS_+0x20>
 8020baa:	e000      	b.n	8020bae <_Z10cobsDecodePhhS_+0x72>
				break;
 8020bac:	bf00      	nop
		}
	}

	return (uint8_t)(decode - (uint8_t *)data);
 8020bae:	69ba      	ldr	r2, [r7, #24]
 8020bb0:	687b      	ldr	r3, [r7, #4]
 8020bb2:	1ad3      	subs	r3, r2, r3
 8020bb4:	b2db      	uxtb	r3, r3
}
 8020bb6:	4618      	mov	r0, r3
 8020bb8:	3724      	adds	r7, #36	; 0x24
 8020bba:	46bd      	mov	sp, r7
 8020bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bc0:	4770      	bx	lr
	...

08020bc4 <_Z17cobsDecodeInPlacePhh>:



uint8_t cobsDecodeInPlace(uint8_t *buffer, uint8_t length)
{
 8020bc4:	b580      	push	{r7, lr}
 8020bc6:	b084      	sub	sp, #16
 8020bc8:	af00      	add	r7, sp, #0
 8020bca:	6078      	str	r0, [r7, #4]
 8020bcc:	460b      	mov	r3, r1
 8020bce:	70fb      	strb	r3, [r7, #3]
	uint8_t decode_len = cobsDecode(buffer, length, cobsDecodeBuffer);
 8020bd0:	78fb      	ldrb	r3, [r7, #3]
 8020bd2:	4a0f      	ldr	r2, [pc, #60]	; (8020c10 <_Z17cobsDecodeInPlacePhh+0x4c>)
 8020bd4:	4619      	mov	r1, r3
 8020bd6:	6878      	ldr	r0, [r7, #4]
 8020bd8:	f7ff ffb0 	bl	8020b3c <_Z10cobsDecodePhhS_>
 8020bdc:	4603      	mov	r3, r0
 8020bde:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i<decode_len; i++){
 8020be0:	2300      	movs	r3, #0
 8020be2:	60fb      	str	r3, [r7, #12]
 8020be4:	e00a      	b.n	8020bfc <_Z17cobsDecodeInPlacePhh+0x38>
		buffer[i] = cobsDecodeBuffer[i];
 8020be6:	68fb      	ldr	r3, [r7, #12]
 8020be8:	687a      	ldr	r2, [r7, #4]
 8020bea:	4413      	add	r3, r2
 8020bec:	4908      	ldr	r1, [pc, #32]	; (8020c10 <_Z17cobsDecodeInPlacePhh+0x4c>)
 8020bee:	68fa      	ldr	r2, [r7, #12]
 8020bf0:	440a      	add	r2, r1
 8020bf2:	7812      	ldrb	r2, [r2, #0]
 8020bf4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<decode_len; i++){
 8020bf6:	68fb      	ldr	r3, [r7, #12]
 8020bf8:	3301      	adds	r3, #1
 8020bfa:	60fb      	str	r3, [r7, #12]
 8020bfc:	7afb      	ldrb	r3, [r7, #11]
 8020bfe:	68fa      	ldr	r2, [r7, #12]
 8020c00:	429a      	cmp	r2, r3
 8020c02:	dbf0      	blt.n	8020be6 <_Z17cobsDecodeInPlacePhh+0x22>
	}

	return decode_len;
 8020c04:	7afb      	ldrb	r3, [r7, #11]
}
 8020c06:	4618      	mov	r0, r3
 8020c08:	3710      	adds	r7, #16
 8020c0a:	46bd      	mov	sp, r7
 8020c0c:	bd80      	pop	{r7, pc}
 8020c0e:	bf00      	nop
 8020c10:	2401e15c 	.word	0x2401e15c

08020c14 <_Z15uint8_to_uint16hh>:
	temp = ((bytearray[3] << 24) | (bytearray[2] << 16) | (bytearray[1] << 8)
			| bytearray[0]);
	return *((float*) &temp);
}

uint16_t uint8_to_uint16(uint8_t byte1, uint8_t byte2) {
 8020c14:	b480      	push	{r7}
 8020c16:	b085      	sub	sp, #20
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	4603      	mov	r3, r0
 8020c1c:	460a      	mov	r2, r1
 8020c1e:	71fb      	strb	r3, [r7, #7]
 8020c20:	4613      	mov	r3, r2
 8020c22:	71bb      	strb	r3, [r7, #6]
	uint16_t out = byte1 << 8 | byte2;
 8020c24:	79fb      	ldrb	r3, [r7, #7]
 8020c26:	021b      	lsls	r3, r3, #8
 8020c28:	b21a      	sxth	r2, r3
 8020c2a:	79bb      	ldrb	r3, [r7, #6]
 8020c2c:	b21b      	sxth	r3, r3
 8020c2e:	4313      	orrs	r3, r2
 8020c30:	b21b      	sxth	r3, r3
 8020c32:	81fb      	strh	r3, [r7, #14]
	return out;
 8020c34:	89fb      	ldrh	r3, [r7, #14]
}
 8020c36:	4618      	mov	r0, r3
 8020c38:	3714      	adds	r7, #20
 8020c3a:	46bd      	mov	sp, r7
 8020c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c40:	4770      	bx	lr

08020c42 <_Z18bytearray_to_int16Ph>:
uint16_t bytearray_to_uint16(uint8_t *bytearray) {
	uint16_t out = bytearray[1] << 8 | bytearray[0];
	return out;
}

int16_t bytearray_to_int16(uint8_t *bytearray) {
 8020c42:	b480      	push	{r7}
 8020c44:	b085      	sub	sp, #20
 8020c46:	af00      	add	r7, sp, #0
 8020c48:	6078      	str	r0, [r7, #4]
	int16_t out = bytearray[1] << 8 | bytearray[0];
 8020c4a:	687b      	ldr	r3, [r7, #4]
 8020c4c:	3301      	adds	r3, #1
 8020c4e:	781b      	ldrb	r3, [r3, #0]
 8020c50:	021b      	lsls	r3, r3, #8
 8020c52:	b21a      	sxth	r2, r3
 8020c54:	687b      	ldr	r3, [r7, #4]
 8020c56:	781b      	ldrb	r3, [r3, #0]
 8020c58:	b21b      	sxth	r3, r3
 8020c5a:	4313      	orrs	r3, r2
 8020c5c:	81fb      	strh	r3, [r7, #14]
	return out;
 8020c5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8020c62:	4618      	mov	r0, r3
 8020c64:	3714      	adds	r7, #20
 8020c66:	46bd      	mov	sp, r7
 8020c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c6c:	4770      	bx	lr

08020c6e <_Z17core_ErrorHandleri>:
 */


#include "core_errors.h"

void core_ErrorHandler(int error_id) {
 8020c6e:	b480      	push	{r7}
 8020c70:	b083      	sub	sp, #12
 8020c72:	af00      	add	r7, sp, #0
 8020c74:	6078      	str	r0, [r7, #4]
	while(1);
 8020c76:	e7fe      	b.n	8020c76 <_Z17core_ErrorHandleri+0x8>

08020c78 <_Z5limitfff>:

	return sum / len;
}


float limit(float data, float min_value, float max_value){
 8020c78:	b480      	push	{r7}
 8020c7a:	b085      	sub	sp, #20
 8020c7c:	af00      	add	r7, sp, #0
 8020c7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8020c82:	edc7 0a02 	vstr	s1, [r7, #8]
 8020c86:	ed87 1a01 	vstr	s2, [r7, #4]
	if (data > max_value){
 8020c8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8020c8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8020c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c9a:	dd01      	ble.n	8020ca0 <_Z5limitfff+0x28>
		data = max_value;
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	60fb      	str	r3, [r7, #12]
	}
	if (data < min_value){
 8020ca0:	ed97 7a03 	vldr	s14, [r7, #12]
 8020ca4:	edd7 7a02 	vldr	s15, [r7, #8]
 8020ca8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020cb0:	d501      	bpl.n	8020cb6 <_Z5limitfff+0x3e>
		data = min_value;
 8020cb2:	68bb      	ldr	r3, [r7, #8]
 8020cb4:	60fb      	str	r3, [r7, #12]
	}
	return data;
 8020cb6:	68fb      	ldr	r3, [r7, #12]
 8020cb8:	ee07 3a90 	vmov	s15, r3
}
 8020cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8020cc0:	3714      	adds	r7, #20
 8020cc2:	46bd      	mov	sp, r7
 8020cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020cc8:	4770      	bx	lr

08020cca <_Z5limitff>:


float limit(float data, float max_value){
 8020cca:	b580      	push	{r7, lr}
 8020ccc:	b082      	sub	sp, #8
 8020cce:	af00      	add	r7, sp, #0
 8020cd0:	ed87 0a01 	vstr	s0, [r7, #4]
 8020cd4:	edc7 0a00 	vstr	s1, [r7]
	return limit(data, -max_value, max_value);
 8020cd8:	edd7 7a00 	vldr	s15, [r7]
 8020cdc:	eef1 7a67 	vneg.f32	s15, s15
 8020ce0:	ed97 1a00 	vldr	s2, [r7]
 8020ce4:	eef0 0a67 	vmov.f32	s1, s15
 8020ce8:	ed97 0a01 	vldr	s0, [r7, #4]
 8020cec:	f7ff ffc4 	bl	8020c78 <_Z5limitfff>
 8020cf0:	eef0 7a40 	vmov.f32	s15, s0
}
 8020cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8020cf8:	3708      	adds	r7, #8
 8020cfa:	46bd      	mov	sp, r7
 8020cfc:	bd80      	pop	{r7, pc}

08020cfe <_ZN15core_utils_GPIOC1EP12GPIO_TypeDeft>:
#include "core_utils_gpio.h"

static core_utils_Callback<void, void> callbacks[16];
static void execute_gpio_callback(uint16_t gpio_pin);

core_utils_GPIO::core_utils_GPIO(GPIO_TypeDef *GPIOx, uint16_t pin) {
 8020cfe:	b480      	push	{r7}
 8020d00:	b085      	sub	sp, #20
 8020d02:	af00      	add	r7, sp, #0
 8020d04:	60f8      	str	r0, [r7, #12]
 8020d06:	60b9      	str	r1, [r7, #8]
 8020d08:	4613      	mov	r3, r2
 8020d0a:	80fb      	strh	r3, [r7, #6]
	this->GPIOx = GPIOx;
 8020d0c:	68fb      	ldr	r3, [r7, #12]
 8020d0e:	68ba      	ldr	r2, [r7, #8]
 8020d10:	601a      	str	r2, [r3, #0]
	this->pin = pin;
 8020d12:	68fb      	ldr	r3, [r7, #12]
 8020d14:	88fa      	ldrh	r2, [r7, #6]
 8020d16:	809a      	strh	r2, [r3, #4]
}
 8020d18:	68fb      	ldr	r3, [r7, #12]
 8020d1a:	4618      	mov	r0, r3
 8020d1c:	3714      	adds	r7, #20
 8020d1e:	46bd      	mov	sp, r7
 8020d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d24:	4770      	bx	lr

08020d26 <_ZN15core_utils_GPIO5writeEh>:

/* -------------------------------------------------------------------------------- */
void core_utils_GPIO::write(uint8_t value) {
 8020d26:	b580      	push	{r7, lr}
 8020d28:	b082      	sub	sp, #8
 8020d2a:	af00      	add	r7, sp, #0
 8020d2c:	6078      	str	r0, [r7, #4]
 8020d2e:	460b      	mov	r3, r1
 8020d30:	70fb      	strb	r3, [r7, #3]
	if (value) {
 8020d32:	78fb      	ldrb	r3, [r7, #3]
 8020d34:	2b00      	cmp	r3, #0
 8020d36:	d008      	beq.n	8020d4a <_ZN15core_utils_GPIO5writeEh+0x24>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 8020d38:	687b      	ldr	r3, [r7, #4]
 8020d3a:	6818      	ldr	r0, [r3, #0]
 8020d3c:	687b      	ldr	r3, [r7, #4]
 8020d3e:	889b      	ldrh	r3, [r3, #4]
 8020d40:	2201      	movs	r2, #1
 8020d42:	4619      	mov	r1, r3
 8020d44:	f7e5 faa8 	bl	8006298 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
	}
}
 8020d48:	e007      	b.n	8020d5a <_ZN15core_utils_GPIO5writeEh+0x34>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8020d4a:	687b      	ldr	r3, [r7, #4]
 8020d4c:	6818      	ldr	r0, [r3, #0]
 8020d4e:	687b      	ldr	r3, [r7, #4]
 8020d50:	889b      	ldrh	r3, [r3, #4]
 8020d52:	2200      	movs	r2, #0
 8020d54:	4619      	mov	r1, r3
 8020d56:	f7e5 fa9f 	bl	8006298 <HAL_GPIO_WritePin>
}
 8020d5a:	bf00      	nop
 8020d5c:	3708      	adds	r7, #8
 8020d5e:	46bd      	mov	sp, r7
 8020d60:	bd80      	pop	{r7, pc}

08020d62 <_ZN15core_utils_GPIO6toggleEv>:

/* -------------------------------------------------------------------------------- */
void core_utils_GPIO::toggle() {
 8020d62:	b580      	push	{r7, lr}
 8020d64:	b082      	sub	sp, #8
 8020d66:	af00      	add	r7, sp, #0
 8020d68:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, pin);
 8020d6a:	687b      	ldr	r3, [r7, #4]
 8020d6c:	681a      	ldr	r2, [r3, #0]
 8020d6e:	687b      	ldr	r3, [r7, #4]
 8020d70:	889b      	ldrh	r3, [r3, #4]
 8020d72:	4619      	mov	r1, r3
 8020d74:	4610      	mov	r0, r2
 8020d76:	f7e5 faa8 	bl	80062ca <HAL_GPIO_TogglePin>
}
 8020d7a:	bf00      	nop
 8020d7c:	3708      	adds	r7, #8
 8020d7e:	46bd      	mov	sp, r7
 8020d80:	bd80      	pop	{r7, pc}
	...

08020d84 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE>:
	core_utils_gpio_registerExtiCallback(line,
			core_utils_Callback<void, void>(function));
}
/* -------------------------------------------------------------------------------- */
void core_utils_gpio_registerExtiCallback(uint16_t line,
		core_utils_Callback<void, void> callback) {
 8020d84:	b580      	push	{r7, lr}
 8020d86:	b082      	sub	sp, #8
 8020d88:	af00      	add	r7, sp, #0
 8020d8a:	4603      	mov	r3, r0
 8020d8c:	6039      	str	r1, [r7, #0]
 8020d8e:	80fb      	strh	r3, [r7, #6]
	switch (line) {
 8020d90:	88fb      	ldrh	r3, [r7, #6]
 8020d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8020d96:	f000 80db 	beq.w	8020f50 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1cc>
 8020d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8020d9e:	f300 80dc 	bgt.w	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8020da6:	f000 80ce 	beq.w	8020f46 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1c2>
 8020daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8020dae:	f300 80d4 	bgt.w	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020db6:	f000 80c1 	beq.w	8020f3c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1b8>
 8020dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020dbe:	f300 80cc 	bgt.w	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020dc6:	f000 80b4 	beq.w	8020f32 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1ae>
 8020dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8020dce:	f300 80c4 	bgt.w	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020dd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8020dd6:	f000 80a7 	beq.w	8020f28 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1a4>
 8020dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8020dde:	f300 80bc 	bgt.w	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020de6:	f000 809a 	beq.w	8020f1e <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x19a>
 8020dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020dee:	f300 80b4 	bgt.w	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020df2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020df6:	f000 808d 	beq.w	8020f14 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x190>
 8020dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020dfe:	f300 80ac 	bgt.w	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020e06:	f000 8080 	beq.w	8020f0a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x186>
 8020e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020e0e:	f300 80a4 	bgt.w	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020e12:	2b80      	cmp	r3, #128	; 0x80
 8020e14:	d074      	beq.n	8020f00 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x17c>
 8020e16:	2b80      	cmp	r3, #128	; 0x80
 8020e18:	f300 809f 	bgt.w	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020e1c:	2b20      	cmp	r3, #32
 8020e1e:	dc49      	bgt.n	8020eb4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x130>
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	f340 809a 	ble.w	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020e26:	3b01      	subs	r3, #1
 8020e28:	2b1f      	cmp	r3, #31
 8020e2a:	f200 8096 	bhi.w	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 8020e2e:	a201      	add	r2, pc, #4	; (adr r2, 8020e34 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0xb0>)
 8020e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020e34:	08020ebb 	.word	0x08020ebb
 8020e38:	08020ec5 	.word	0x08020ec5
 8020e3c:	08020f5b 	.word	0x08020f5b
 8020e40:	08020ecf 	.word	0x08020ecf
 8020e44:	08020f5b 	.word	0x08020f5b
 8020e48:	08020f5b 	.word	0x08020f5b
 8020e4c:	08020f5b 	.word	0x08020f5b
 8020e50:	08020ed9 	.word	0x08020ed9
 8020e54:	08020f5b 	.word	0x08020f5b
 8020e58:	08020f5b 	.word	0x08020f5b
 8020e5c:	08020f5b 	.word	0x08020f5b
 8020e60:	08020f5b 	.word	0x08020f5b
 8020e64:	08020f5b 	.word	0x08020f5b
 8020e68:	08020f5b 	.word	0x08020f5b
 8020e6c:	08020f5b 	.word	0x08020f5b
 8020e70:	08020ee3 	.word	0x08020ee3
 8020e74:	08020f5b 	.word	0x08020f5b
 8020e78:	08020f5b 	.word	0x08020f5b
 8020e7c:	08020f5b 	.word	0x08020f5b
 8020e80:	08020f5b 	.word	0x08020f5b
 8020e84:	08020f5b 	.word	0x08020f5b
 8020e88:	08020f5b 	.word	0x08020f5b
 8020e8c:	08020f5b 	.word	0x08020f5b
 8020e90:	08020f5b 	.word	0x08020f5b
 8020e94:	08020f5b 	.word	0x08020f5b
 8020e98:	08020f5b 	.word	0x08020f5b
 8020e9c:	08020f5b 	.word	0x08020f5b
 8020ea0:	08020f5b 	.word	0x08020f5b
 8020ea4:	08020f5b 	.word	0x08020f5b
 8020ea8:	08020f5b 	.word	0x08020f5b
 8020eac:	08020f5b 	.word	0x08020f5b
 8020eb0:	08020eed 	.word	0x08020eed
 8020eb4:	2b40      	cmp	r3, #64	; 0x40
 8020eb6:	d01e      	beq.n	8020ef6 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x172>
	case GPIO_PIN_15: {
		callbacks[15] = callback;
		break;
	}
	}
}
 8020eb8:	e04f      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[0] = callback;
 8020eba:	6839      	ldr	r1, [r7, #0]
 8020ebc:	4829      	ldr	r0, [pc, #164]	; (8020f64 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e0>)
 8020ebe:	f7f3 f957 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020ec2:	e04a      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[1] = callback;
 8020ec4:	6839      	ldr	r1, [r7, #0]
 8020ec6:	4828      	ldr	r0, [pc, #160]	; (8020f68 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e4>)
 8020ec8:	f7f3 f952 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020ecc:	e045      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[2] = callback;
 8020ece:	6839      	ldr	r1, [r7, #0]
 8020ed0:	4826      	ldr	r0, [pc, #152]	; (8020f6c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e8>)
 8020ed2:	f7f3 f94d 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020ed6:	e040      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[3] = callback;
 8020ed8:	6839      	ldr	r1, [r7, #0]
 8020eda:	4825      	ldr	r0, [pc, #148]	; (8020f70 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1ec>)
 8020edc:	f7f3 f948 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020ee0:	e03b      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[4] = callback;
 8020ee2:	6839      	ldr	r1, [r7, #0]
 8020ee4:	4823      	ldr	r0, [pc, #140]	; (8020f74 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f0>)
 8020ee6:	f7f3 f943 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020eea:	e036      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[5] = callback;
 8020eec:	6839      	ldr	r1, [r7, #0]
 8020eee:	4822      	ldr	r0, [pc, #136]	; (8020f78 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f4>)
 8020ef0:	f7f3 f93e 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020ef4:	e031      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[6] = callback;
 8020ef6:	6839      	ldr	r1, [r7, #0]
 8020ef8:	4820      	ldr	r0, [pc, #128]	; (8020f7c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f8>)
 8020efa:	f7f3 f939 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020efe:	e02c      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[7] = callback;
 8020f00:	6839      	ldr	r1, [r7, #0]
 8020f02:	481f      	ldr	r0, [pc, #124]	; (8020f80 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1fc>)
 8020f04:	f7f3 f934 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020f08:	e027      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[8] = callback;
 8020f0a:	6839      	ldr	r1, [r7, #0]
 8020f0c:	481d      	ldr	r0, [pc, #116]	; (8020f84 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x200>)
 8020f0e:	f7f3 f92f 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020f12:	e022      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[9] = callback;
 8020f14:	6839      	ldr	r1, [r7, #0]
 8020f16:	481c      	ldr	r0, [pc, #112]	; (8020f88 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x204>)
 8020f18:	f7f3 f92a 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020f1c:	e01d      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[10] = callback;
 8020f1e:	6839      	ldr	r1, [r7, #0]
 8020f20:	481a      	ldr	r0, [pc, #104]	; (8020f8c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x208>)
 8020f22:	f7f3 f925 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020f26:	e018      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[11] = callback;
 8020f28:	6839      	ldr	r1, [r7, #0]
 8020f2a:	4819      	ldr	r0, [pc, #100]	; (8020f90 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x20c>)
 8020f2c:	f7f3 f920 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020f30:	e013      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[12] = callback;
 8020f32:	6839      	ldr	r1, [r7, #0]
 8020f34:	4817      	ldr	r0, [pc, #92]	; (8020f94 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x210>)
 8020f36:	f7f3 f91b 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020f3a:	e00e      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[13] = callback;
 8020f3c:	6839      	ldr	r1, [r7, #0]
 8020f3e:	4816      	ldr	r0, [pc, #88]	; (8020f98 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x214>)
 8020f40:	f7f3 f916 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020f44:	e009      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[14] = callback;
 8020f46:	6839      	ldr	r1, [r7, #0]
 8020f48:	4814      	ldr	r0, [pc, #80]	; (8020f9c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x218>)
 8020f4a:	f7f3 f911 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020f4e:	e004      	b.n	8020f5a <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[15] = callback;
 8020f50:	6839      	ldr	r1, [r7, #0]
 8020f52:	4813      	ldr	r0, [pc, #76]	; (8020fa0 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x21c>)
 8020f54:	f7f3 f90c 	bl	8014170 <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020f58:	bf00      	nop
}
 8020f5a:	bf00      	nop
 8020f5c:	3708      	adds	r7, #8
 8020f5e:	46bd      	mov	sp, r7
 8020f60:	bd80      	pop	{r7, pc}
 8020f62:	bf00      	nop
 8020f64:	2401e25c 	.word	0x2401e25c
 8020f68:	2401e27c 	.word	0x2401e27c
 8020f6c:	2401e29c 	.word	0x2401e29c
 8020f70:	2401e2bc 	.word	0x2401e2bc
 8020f74:	2401e2dc 	.word	0x2401e2dc
 8020f78:	2401e2fc 	.word	0x2401e2fc
 8020f7c:	2401e31c 	.word	0x2401e31c
 8020f80:	2401e33c 	.word	0x2401e33c
 8020f84:	2401e35c 	.word	0x2401e35c
 8020f88:	2401e37c 	.word	0x2401e37c
 8020f8c:	2401e39c 	.word	0x2401e39c
 8020f90:	2401e3bc 	.word	0x2401e3bc
 8020f94:	2401e3dc 	.word	0x2401e3dc
 8020f98:	2401e3fc 	.word	0x2401e3fc
 8020f9c:	2401e41c 	.word	0x2401e41c
 8020fa0:	2401e43c 	.word	0x2401e43c

08020fa4 <HAL_GPIO_EXTI_Callback>:

/* -------------------------------------------------------------------------------- */
extern "C" {
void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin) {
 8020fa4:	b580      	push	{r7, lr}
 8020fa6:	b082      	sub	sp, #8
 8020fa8:	af00      	add	r7, sp, #0
 8020faa:	4603      	mov	r3, r0
 8020fac:	80fb      	strh	r3, [r7, #6]
	execute_gpio_callback(gpio_pin);
 8020fae:	88fb      	ldrh	r3, [r7, #6]
 8020fb0:	4618      	mov	r0, r3
 8020fb2:	f000 f805 	bl	8020fc0 <_ZL21execute_gpio_callbackt>
}
 8020fb6:	bf00      	nop
 8020fb8:	3708      	adds	r7, #8
 8020fba:	46bd      	mov	sp, r7
 8020fbc:	bd80      	pop	{r7, pc}
	...

08020fc0 <_ZL21execute_gpio_callbackt>:
}

static void execute_gpio_callback(uint16_t gpio_pin) {
 8020fc0:	b580      	push	{r7, lr}
 8020fc2:	b082      	sub	sp, #8
 8020fc4:	af00      	add	r7, sp, #0
 8020fc6:	4603      	mov	r3, r0
 8020fc8:	80fb      	strh	r3, [r7, #6]
	switch (gpio_pin) {
 8020fca:	88fb      	ldrh	r3, [r7, #6]
 8020fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8020fd0:	f000 80f6 	beq.w	80211c0 <_ZL21execute_gpio_callbackt+0x200>
 8020fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8020fd8:	f300 80f9 	bgt.w	80211ce <_ZL21execute_gpio_callbackt+0x20e>
 8020fdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8020fe0:	f000 80e7 	beq.w	80211b2 <_ZL21execute_gpio_callbackt+0x1f2>
 8020fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8020fe8:	f300 80f1 	bgt.w	80211ce <_ZL21execute_gpio_callbackt+0x20e>
 8020fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020ff0:	f000 80d8 	beq.w	80211a4 <_ZL21execute_gpio_callbackt+0x1e4>
 8020ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8020ff8:	f300 80e9 	bgt.w	80211ce <_ZL21execute_gpio_callbackt+0x20e>
 8020ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021000:	f000 80c9 	beq.w	8021196 <_ZL21execute_gpio_callbackt+0x1d6>
 8021004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8021008:	f300 80e1 	bgt.w	80211ce <_ZL21execute_gpio_callbackt+0x20e>
 802100c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8021010:	f000 80ba 	beq.w	8021188 <_ZL21execute_gpio_callbackt+0x1c8>
 8021014:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8021018:	f300 80d9 	bgt.w	80211ce <_ZL21execute_gpio_callbackt+0x20e>
 802101c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021020:	f000 80ab 	beq.w	802117a <_ZL21execute_gpio_callbackt+0x1ba>
 8021024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8021028:	f300 80d1 	bgt.w	80211ce <_ZL21execute_gpio_callbackt+0x20e>
 802102c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021030:	f000 809c 	beq.w	802116c <_ZL21execute_gpio_callbackt+0x1ac>
 8021034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021038:	f300 80c9 	bgt.w	80211ce <_ZL21execute_gpio_callbackt+0x20e>
 802103c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021040:	f000 808d 	beq.w	802115e <_ZL21execute_gpio_callbackt+0x19e>
 8021044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021048:	f300 80c1 	bgt.w	80211ce <_ZL21execute_gpio_callbackt+0x20e>
 802104c:	2b80      	cmp	r3, #128	; 0x80
 802104e:	d07f      	beq.n	8021150 <_ZL21execute_gpio_callbackt+0x190>
 8021050:	2b80      	cmp	r3, #128	; 0x80
 8021052:	f300 80bc 	bgt.w	80211ce <_ZL21execute_gpio_callbackt+0x20e>
 8021056:	2b20      	cmp	r3, #32
 8021058:	dc4a      	bgt.n	80210f0 <_ZL21execute_gpio_callbackt+0x130>
 802105a:	2b00      	cmp	r3, #0
 802105c:	f340 80b7 	ble.w	80211ce <_ZL21execute_gpio_callbackt+0x20e>
 8021060:	3b01      	subs	r3, #1
 8021062:	2b1f      	cmp	r3, #31
 8021064:	f200 80b3 	bhi.w	80211ce <_ZL21execute_gpio_callbackt+0x20e>
 8021068:	a201      	add	r2, pc, #4	; (adr r2, 8021070 <_ZL21execute_gpio_callbackt+0xb0>)
 802106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802106e:	bf00      	nop
 8021070:	080210f7 	.word	0x080210f7
 8021074:	08021103 	.word	0x08021103
 8021078:	080211cf 	.word	0x080211cf
 802107c:	0802110f 	.word	0x0802110f
 8021080:	080211cf 	.word	0x080211cf
 8021084:	080211cf 	.word	0x080211cf
 8021088:	080211cf 	.word	0x080211cf
 802108c:	0802111b 	.word	0x0802111b
 8021090:	080211cf 	.word	0x080211cf
 8021094:	080211cf 	.word	0x080211cf
 8021098:	080211cf 	.word	0x080211cf
 802109c:	080211cf 	.word	0x080211cf
 80210a0:	080211cf 	.word	0x080211cf
 80210a4:	080211cf 	.word	0x080211cf
 80210a8:	080211cf 	.word	0x080211cf
 80210ac:	08021127 	.word	0x08021127
 80210b0:	080211cf 	.word	0x080211cf
 80210b4:	080211cf 	.word	0x080211cf
 80210b8:	080211cf 	.word	0x080211cf
 80210bc:	080211cf 	.word	0x080211cf
 80210c0:	080211cf 	.word	0x080211cf
 80210c4:	080211cf 	.word	0x080211cf
 80210c8:	080211cf 	.word	0x080211cf
 80210cc:	080211cf 	.word	0x080211cf
 80210d0:	080211cf 	.word	0x080211cf
 80210d4:	080211cf 	.word	0x080211cf
 80210d8:	080211cf 	.word	0x080211cf
 80210dc:	080211cf 	.word	0x080211cf
 80210e0:	080211cf 	.word	0x080211cf
 80210e4:	080211cf 	.word	0x080211cf
 80210e8:	080211cf 	.word	0x080211cf
 80210ec:	08021135 	.word	0x08021135
 80210f0:	2b40      	cmp	r3, #64	; 0x40
 80210f2:	d026      	beq.n	8021142 <_ZL21execute_gpio_callbackt+0x182>
	case GPIO_PIN_15: {
		callbacks[15].call();
		break;
	}
	}
}
 80210f4:	e06b      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[0].call();
 80210f6:	4b38      	ldr	r3, [pc, #224]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 80210f8:	681b      	ldr	r3, [r3, #0]
 80210fa:	681b      	ldr	r3, [r3, #0]
 80210fc:	4836      	ldr	r0, [pc, #216]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 80210fe:	4798      	blx	r3
		break;
 8021100:	e065      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[1].call();
 8021102:	4b35      	ldr	r3, [pc, #212]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 8021104:	6a1b      	ldr	r3, [r3, #32]
 8021106:	681b      	ldr	r3, [r3, #0]
 8021108:	4834      	ldr	r0, [pc, #208]	; (80211dc <_ZL21execute_gpio_callbackt+0x21c>)
 802110a:	4798      	blx	r3
		break;
 802110c:	e05f      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[2].call();
 802110e:	4b32      	ldr	r3, [pc, #200]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 8021110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021112:	681b      	ldr	r3, [r3, #0]
 8021114:	4832      	ldr	r0, [pc, #200]	; (80211e0 <_ZL21execute_gpio_callbackt+0x220>)
 8021116:	4798      	blx	r3
		break;
 8021118:	e059      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[3].call();
 802111a:	4b2f      	ldr	r3, [pc, #188]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 802111c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802111e:	681b      	ldr	r3, [r3, #0]
 8021120:	4830      	ldr	r0, [pc, #192]	; (80211e4 <_ZL21execute_gpio_callbackt+0x224>)
 8021122:	4798      	blx	r3
		break;
 8021124:	e053      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[4].call();
 8021126:	4b2c      	ldr	r3, [pc, #176]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 8021128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802112c:	681b      	ldr	r3, [r3, #0]
 802112e:	482e      	ldr	r0, [pc, #184]	; (80211e8 <_ZL21execute_gpio_callbackt+0x228>)
 8021130:	4798      	blx	r3
		break;
 8021132:	e04c      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[5].call();
 8021134:	4b28      	ldr	r3, [pc, #160]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 8021136:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 802113a:	681b      	ldr	r3, [r3, #0]
 802113c:	482b      	ldr	r0, [pc, #172]	; (80211ec <_ZL21execute_gpio_callbackt+0x22c>)
 802113e:	4798      	blx	r3
		break;
 8021140:	e045      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[6].call();
 8021142:	4b25      	ldr	r3, [pc, #148]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 8021144:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8021148:	681b      	ldr	r3, [r3, #0]
 802114a:	4829      	ldr	r0, [pc, #164]	; (80211f0 <_ZL21execute_gpio_callbackt+0x230>)
 802114c:	4798      	blx	r3
		break;
 802114e:	e03e      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[7].call();
 8021150:	4b21      	ldr	r3, [pc, #132]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 8021152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8021156:	681b      	ldr	r3, [r3, #0]
 8021158:	4826      	ldr	r0, [pc, #152]	; (80211f4 <_ZL21execute_gpio_callbackt+0x234>)
 802115a:	4798      	blx	r3
		break;
 802115c:	e037      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[8].call();
 802115e:	4b1e      	ldr	r3, [pc, #120]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 8021160:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8021164:	681b      	ldr	r3, [r3, #0]
 8021166:	4824      	ldr	r0, [pc, #144]	; (80211f8 <_ZL21execute_gpio_callbackt+0x238>)
 8021168:	4798      	blx	r3
		break;
 802116a:	e030      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[9].call();
 802116c:	4b1a      	ldr	r3, [pc, #104]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 802116e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8021172:	681b      	ldr	r3, [r3, #0]
 8021174:	4821      	ldr	r0, [pc, #132]	; (80211fc <_ZL21execute_gpio_callbackt+0x23c>)
 8021176:	4798      	blx	r3
		break;
 8021178:	e029      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[10].call();
 802117a:	4b17      	ldr	r3, [pc, #92]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 802117c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8021180:	681b      	ldr	r3, [r3, #0]
 8021182:	481f      	ldr	r0, [pc, #124]	; (8021200 <_ZL21execute_gpio_callbackt+0x240>)
 8021184:	4798      	blx	r3
		break;
 8021186:	e022      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[11].call();
 8021188:	4b13      	ldr	r3, [pc, #76]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 802118a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 802118e:	681b      	ldr	r3, [r3, #0]
 8021190:	481c      	ldr	r0, [pc, #112]	; (8021204 <_ZL21execute_gpio_callbackt+0x244>)
 8021192:	4798      	blx	r3
		break;
 8021194:	e01b      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[12].call();
 8021196:	4b10      	ldr	r3, [pc, #64]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 8021198:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	481a      	ldr	r0, [pc, #104]	; (8021208 <_ZL21execute_gpio_callbackt+0x248>)
 80211a0:	4798      	blx	r3
		break;
 80211a2:	e014      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[13].call();
 80211a4:	4b0c      	ldr	r3, [pc, #48]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 80211a6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80211aa:	681b      	ldr	r3, [r3, #0]
 80211ac:	4817      	ldr	r0, [pc, #92]	; (802120c <_ZL21execute_gpio_callbackt+0x24c>)
 80211ae:	4798      	blx	r3
		break;
 80211b0:	e00d      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[14].call();
 80211b2:	4b09      	ldr	r3, [pc, #36]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 80211b4:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80211b8:	681b      	ldr	r3, [r3, #0]
 80211ba:	4815      	ldr	r0, [pc, #84]	; (8021210 <_ZL21execute_gpio_callbackt+0x250>)
 80211bc:	4798      	blx	r3
		break;
 80211be:	e006      	b.n	80211ce <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[15].call();
 80211c0:	4b05      	ldr	r3, [pc, #20]	; (80211d8 <_ZL21execute_gpio_callbackt+0x218>)
 80211c2:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 80211c6:	681b      	ldr	r3, [r3, #0]
 80211c8:	4812      	ldr	r0, [pc, #72]	; (8021214 <_ZL21execute_gpio_callbackt+0x254>)
 80211ca:	4798      	blx	r3
		break;
 80211cc:	bf00      	nop
}
 80211ce:	bf00      	nop
 80211d0:	3708      	adds	r7, #8
 80211d2:	46bd      	mov	sp, r7
 80211d4:	bd80      	pop	{r7, pc}
 80211d6:	bf00      	nop
 80211d8:	2401e25c 	.word	0x2401e25c
 80211dc:	2401e27c 	.word	0x2401e27c
 80211e0:	2401e29c 	.word	0x2401e29c
 80211e4:	2401e2bc 	.word	0x2401e2bc
 80211e8:	2401e2dc 	.word	0x2401e2dc
 80211ec:	2401e2fc 	.word	0x2401e2fc
 80211f0:	2401e31c 	.word	0x2401e31c
 80211f4:	2401e33c 	.word	0x2401e33c
 80211f8:	2401e35c 	.word	0x2401e35c
 80211fc:	2401e37c 	.word	0x2401e37c
 8021200:	2401e39c 	.word	0x2401e39c
 8021204:	2401e3bc 	.word	0x2401e3bc
 8021208:	2401e3dc 	.word	0x2401e3dc
 802120c:	2401e3fc 	.word	0x2401e3fc
 8021210:	2401e41c 	.word	0x2401e41c
 8021214:	2401e43c 	.word	0x2401e43c

08021218 <_Z41__static_initialization_and_destruction_0ii>:
 8021218:	b5b0      	push	{r4, r5, r7, lr}
 802121a:	b082      	sub	sp, #8
 802121c:	af00      	add	r7, sp, #0
 802121e:	6078      	str	r0, [r7, #4]
 8021220:	6039      	str	r1, [r7, #0]
 8021222:	687b      	ldr	r3, [r7, #4]
 8021224:	2b01      	cmp	r3, #1
 8021226:	d10f      	bne.n	8021248 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8021228:	683b      	ldr	r3, [r7, #0]
 802122a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802122e:	4293      	cmp	r3, r2
 8021230:	d10a      	bne.n	8021248 <_Z41__static_initialization_and_destruction_0ii+0x30>
static core_utils_Callback<void, void> callbacks[16];
 8021232:	4b07      	ldr	r3, [pc, #28]	; (8021250 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8021234:	240f      	movs	r4, #15
 8021236:	461d      	mov	r5, r3
 8021238:	e004      	b.n	8021244 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 802123a:	4628      	mov	r0, r5
 802123c:	f7f3 f9d0 	bl	80145e0 <_ZN19core_utils_CallbackIvvEC1Ev>
 8021240:	3520      	adds	r5, #32
 8021242:	3c01      	subs	r4, #1
 8021244:	2c00      	cmp	r4, #0
 8021246:	daf8      	bge.n	802123a <_Z41__static_initialization_and_destruction_0ii+0x22>
}
 8021248:	bf00      	nop
 802124a:	3708      	adds	r7, #8
 802124c:	46bd      	mov	sp, r7
 802124e:	bdb0      	pop	{r4, r5, r7, pc}
 8021250:	2401e25c 	.word	0x2401e25c

08021254 <_GLOBAL__sub_I__ZN15core_utils_GPIOC2EP12GPIO_TypeDeft>:
 8021254:	b580      	push	{r7, lr}
 8021256:	af00      	add	r7, sp, #0
 8021258:	f64f 71ff 	movw	r1, #65535	; 0xffff
 802125c:	2001      	movs	r0, #1
 802125e:	f7ff ffdb 	bl	8021218 <_Z41__static_initialization_and_destruction_0ii>
 8021262:	bd80      	pop	{r7, pc}
 8021264:	0000      	movs	r0, r0
	...

08021268 <sqrt>:
 8021268:	b508      	push	{r3, lr}
 802126a:	ed2d 8b04 	vpush	{d8-d9}
 802126e:	eeb0 8b40 	vmov.f64	d8, d0
 8021272:	f000 fa1d 	bl	80216b0 <__ieee754_sqrt>
 8021276:	eeb4 8b48 	vcmp.f64	d8, d8
 802127a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802127e:	d60c      	bvs.n	802129a <sqrt+0x32>
 8021280:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80212a0 <sqrt+0x38>
 8021284:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8021288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802128c:	d505      	bpl.n	802129a <sqrt+0x32>
 802128e:	f002 f86b 	bl	8023368 <__errno>
 8021292:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8021296:	2321      	movs	r3, #33	; 0x21
 8021298:	6003      	str	r3, [r0, #0]
 802129a:	ecbd 8b04 	vpop	{d8-d9}
 802129e:	bd08      	pop	{r3, pc}
	...

080212a8 <cos>:
 80212a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80212aa:	eeb0 7b40 	vmov.f64	d7, d0
 80212ae:	ee17 3a90 	vmov	r3, s15
 80212b2:	4a21      	ldr	r2, [pc, #132]	; (8021338 <cos+0x90>)
 80212b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80212b8:	4293      	cmp	r3, r2
 80212ba:	dc06      	bgt.n	80212ca <cos+0x22>
 80212bc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8021330 <cos+0x88>
 80212c0:	b005      	add	sp, #20
 80212c2:	f85d eb04 	ldr.w	lr, [sp], #4
 80212c6:	f000 b9f7 	b.w	80216b8 <__kernel_cos>
 80212ca:	4a1c      	ldr	r2, [pc, #112]	; (802133c <cos+0x94>)
 80212cc:	4293      	cmp	r3, r2
 80212ce:	dd04      	ble.n	80212da <cos+0x32>
 80212d0:	ee30 0b40 	vsub.f64	d0, d0, d0
 80212d4:	b005      	add	sp, #20
 80212d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80212da:	4668      	mov	r0, sp
 80212dc:	f000 fbcc 	bl	8021a78 <__ieee754_rem_pio2>
 80212e0:	f000 0003 	and.w	r0, r0, #3
 80212e4:	2801      	cmp	r0, #1
 80212e6:	d009      	beq.n	80212fc <cos+0x54>
 80212e8:	2802      	cmp	r0, #2
 80212ea:	d010      	beq.n	802130e <cos+0x66>
 80212ec:	b9b0      	cbnz	r0, 802131c <cos+0x74>
 80212ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80212f2:	ed9d 0b00 	vldr	d0, [sp]
 80212f6:	f000 f9df 	bl	80216b8 <__kernel_cos>
 80212fa:	e7eb      	b.n	80212d4 <cos+0x2c>
 80212fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021300:	ed9d 0b00 	vldr	d0, [sp]
 8021304:	f000 fa44 	bl	8021790 <__kernel_sin>
 8021308:	eeb1 0b40 	vneg.f64	d0, d0
 802130c:	e7e2      	b.n	80212d4 <cos+0x2c>
 802130e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021312:	ed9d 0b00 	vldr	d0, [sp]
 8021316:	f000 f9cf 	bl	80216b8 <__kernel_cos>
 802131a:	e7f5      	b.n	8021308 <cos+0x60>
 802131c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021320:	ed9d 0b00 	vldr	d0, [sp]
 8021324:	2001      	movs	r0, #1
 8021326:	f000 fa33 	bl	8021790 <__kernel_sin>
 802132a:	e7d3      	b.n	80212d4 <cos+0x2c>
 802132c:	f3af 8000 	nop.w
	...
 8021338:	3fe921fb 	.word	0x3fe921fb
 802133c:	7fefffff 	.word	0x7fefffff

08021340 <fabs>:
 8021340:	ec51 0b10 	vmov	r0, r1, d0
 8021344:	ee10 2a10 	vmov	r2, s0
 8021348:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802134c:	ec43 2b10 	vmov	d0, r2, r3
 8021350:	4770      	bx	lr
 8021352:	0000      	movs	r0, r0
 8021354:	0000      	movs	r0, r0
	...

08021358 <sin>:
 8021358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802135a:	eeb0 7b40 	vmov.f64	d7, d0
 802135e:	ee17 3a90 	vmov	r3, s15
 8021362:	4a21      	ldr	r2, [pc, #132]	; (80213e8 <sin+0x90>)
 8021364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021368:	4293      	cmp	r3, r2
 802136a:	dc07      	bgt.n	802137c <sin+0x24>
 802136c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80213e0 <sin+0x88>
 8021370:	2000      	movs	r0, #0
 8021372:	b005      	add	sp, #20
 8021374:	f85d eb04 	ldr.w	lr, [sp], #4
 8021378:	f000 ba0a 	b.w	8021790 <__kernel_sin>
 802137c:	4a1b      	ldr	r2, [pc, #108]	; (80213ec <sin+0x94>)
 802137e:	4293      	cmp	r3, r2
 8021380:	dd04      	ble.n	802138c <sin+0x34>
 8021382:	ee30 0b40 	vsub.f64	d0, d0, d0
 8021386:	b005      	add	sp, #20
 8021388:	f85d fb04 	ldr.w	pc, [sp], #4
 802138c:	4668      	mov	r0, sp
 802138e:	f000 fb73 	bl	8021a78 <__ieee754_rem_pio2>
 8021392:	f000 0003 	and.w	r0, r0, #3
 8021396:	2801      	cmp	r0, #1
 8021398:	d00a      	beq.n	80213b0 <sin+0x58>
 802139a:	2802      	cmp	r0, #2
 802139c:	d00f      	beq.n	80213be <sin+0x66>
 802139e:	b9c0      	cbnz	r0, 80213d2 <sin+0x7a>
 80213a0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80213a4:	ed9d 0b00 	vldr	d0, [sp]
 80213a8:	2001      	movs	r0, #1
 80213aa:	f000 f9f1 	bl	8021790 <__kernel_sin>
 80213ae:	e7ea      	b.n	8021386 <sin+0x2e>
 80213b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80213b4:	ed9d 0b00 	vldr	d0, [sp]
 80213b8:	f000 f97e 	bl	80216b8 <__kernel_cos>
 80213bc:	e7e3      	b.n	8021386 <sin+0x2e>
 80213be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80213c2:	ed9d 0b00 	vldr	d0, [sp]
 80213c6:	2001      	movs	r0, #1
 80213c8:	f000 f9e2 	bl	8021790 <__kernel_sin>
 80213cc:	eeb1 0b40 	vneg.f64	d0, d0
 80213d0:	e7d9      	b.n	8021386 <sin+0x2e>
 80213d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80213d6:	ed9d 0b00 	vldr	d0, [sp]
 80213da:	f000 f96d 	bl	80216b8 <__kernel_cos>
 80213de:	e7f5      	b.n	80213cc <sin+0x74>
	...
 80213e8:	3fe921fb 	.word	0x3fe921fb
 80213ec:	7fefffff 	.word	0x7fefffff

080213f0 <tan>:
 80213f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80213f2:	eeb0 7b40 	vmov.f64	d7, d0
 80213f6:	ee17 3a90 	vmov	r3, s15
 80213fa:	4a15      	ldr	r2, [pc, #84]	; (8021450 <tan+0x60>)
 80213fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021400:	4293      	cmp	r3, r2
 8021402:	dc07      	bgt.n	8021414 <tan+0x24>
 8021404:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8021448 <tan+0x58>
 8021408:	2001      	movs	r0, #1
 802140a:	b005      	add	sp, #20
 802140c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021410:	f000 ba16 	b.w	8021840 <__kernel_tan>
 8021414:	4a0f      	ldr	r2, [pc, #60]	; (8021454 <tan+0x64>)
 8021416:	4293      	cmp	r3, r2
 8021418:	dd04      	ble.n	8021424 <tan+0x34>
 802141a:	ee30 0b40 	vsub.f64	d0, d0, d0
 802141e:	b005      	add	sp, #20
 8021420:	f85d fb04 	ldr.w	pc, [sp], #4
 8021424:	4668      	mov	r0, sp
 8021426:	f000 fb27 	bl	8021a78 <__ieee754_rem_pio2>
 802142a:	0040      	lsls	r0, r0, #1
 802142c:	f000 0002 	and.w	r0, r0, #2
 8021430:	ed9d 1b02 	vldr	d1, [sp, #8]
 8021434:	ed9d 0b00 	vldr	d0, [sp]
 8021438:	f1c0 0001 	rsb	r0, r0, #1
 802143c:	f000 fa00 	bl	8021840 <__kernel_tan>
 8021440:	e7ed      	b.n	802141e <tan+0x2e>
 8021442:	bf00      	nop
 8021444:	f3af 8000 	nop.w
	...
 8021450:	3fe921fb 	.word	0x3fe921fb
 8021454:	7fefffff 	.word	0x7fefffff

08021458 <atan2f>:
 8021458:	f000 bc52 	b.w	8021d00 <__ieee754_atan2f>

0802145c <fabsf>:
 802145c:	ee10 3a10 	vmov	r3, s0
 8021460:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021464:	ee00 3a10 	vmov	s0, r3
 8021468:	4770      	bx	lr
 802146a:	0000      	movs	r0, r0
 802146c:	0000      	movs	r0, r0
	...

08021470 <exp>:
 8021470:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8021472:	ee10 3a90 	vmov	r3, s1
 8021476:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 802147a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 802147e:	18a2      	adds	r2, r4, r2
 8021480:	2a3e      	cmp	r2, #62	; 0x3e
 8021482:	ee10 1a10 	vmov	r1, s0
 8021486:	d922      	bls.n	80214ce <exp+0x5e>
 8021488:	2a00      	cmp	r2, #0
 802148a:	da06      	bge.n	802149a <exp+0x2a>
 802148c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8021490:	ee30 0b07 	vadd.f64	d0, d0, d7
 8021494:	b004      	add	sp, #16
 8021496:	bcf0      	pop	{r4, r5, r6, r7}
 8021498:	4770      	bx	lr
 802149a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 802149e:	f04f 0000 	mov.w	r0, #0
 80214a2:	d913      	bls.n	80214cc <exp+0x5c>
 80214a4:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 80214a8:	bf08      	it	eq
 80214aa:	4281      	cmpeq	r1, r0
 80214ac:	f000 80a0 	beq.w	80215f0 <exp+0x180>
 80214b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80214b4:	4294      	cmp	r4, r2
 80214b6:	d0e9      	beq.n	802148c <exp+0x1c>
 80214b8:	4283      	cmp	r3, r0
 80214ba:	da03      	bge.n	80214c4 <exp+0x54>
 80214bc:	b004      	add	sp, #16
 80214be:	bcf0      	pop	{r4, r5, r6, r7}
 80214c0:	f000 b8c6 	b.w	8021650 <__math_uflow>
 80214c4:	b004      	add	sp, #16
 80214c6:	bcf0      	pop	{r4, r5, r6, r7}
 80214c8:	f000 b8ca 	b.w	8021660 <__math_oflow>
 80214cc:	4604      	mov	r4, r0
 80214ce:	4950      	ldr	r1, [pc, #320]	; (8021610 <exp+0x1a0>)
 80214d0:	ed91 6b02 	vldr	d6, [r1, #8]
 80214d4:	ed91 5b00 	vldr	d5, [r1]
 80214d8:	eeb0 7b46 	vmov.f64	d7, d6
 80214dc:	eea5 7b00 	vfma.f64	d7, d5, d0
 80214e0:	ee17 5a10 	vmov	r5, s14
 80214e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80214e8:	ed91 6b04 	vldr	d6, [r1, #16]
 80214ec:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 80214f0:	eea6 0b07 	vfma.f64	d0, d6, d7
 80214f4:	ed91 6b06 	vldr	d6, [r1, #24]
 80214f8:	18d8      	adds	r0, r3, r3
 80214fa:	f100 030f 	add.w	r3, r0, #15
 80214fe:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8021502:	eea6 0b07 	vfma.f64	d0, d6, d7
 8021506:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 802150a:	ee20 7b00 	vmul.f64	d7, d0, d0
 802150e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 8021512:	ed91 4b08 	vldr	d4, [r1, #32]
 8021516:	ee30 6b06 	vadd.f64	d6, d0, d6
 802151a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 802151e:	eea3 4b00 	vfma.f64	d4, d3, d0
 8021522:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8021526:	eea4 6b07 	vfma.f64	d6, d4, d7
 802152a:	ee27 7b07 	vmul.f64	d7, d7, d7
 802152e:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8021532:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8021536:	f8d2 c004 	ldr.w	ip, [r2, #4]
 802153a:	eea3 4b00 	vfma.f64	d4, d3, d0
 802153e:	2600      	movs	r6, #0
 8021540:	19f2      	adds	r2, r6, r7
 8021542:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 8021546:	eea7 6b04 	vfma.f64	d6, d7, d4
 802154a:	2c00      	cmp	r4, #0
 802154c:	d14b      	bne.n	80215e6 <exp+0x176>
 802154e:	42b5      	cmp	r5, r6
 8021550:	db10      	blt.n	8021574 <exp+0x104>
 8021552:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8021556:	ed9f 7b28 	vldr	d7, [pc, #160]	; 80215f8 <exp+0x188>
 802155a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 802155e:	4610      	mov	r0, r2
 8021560:	ec41 0b10 	vmov	d0, r0, r1
 8021564:	eea6 0b00 	vfma.f64	d0, d6, d0
 8021568:	ee20 0b07 	vmul.f64	d0, d0, d7
 802156c:	b004      	add	sp, #16
 802156e:	bcf0      	pop	{r4, r5, r6, r7}
 8021570:	f000 b88a 	b.w	8021688 <__math_check_oflow>
 8021574:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8021578:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 802157c:	4610      	mov	r0, r2
 802157e:	ec41 0b17 	vmov	d7, r0, r1
 8021582:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8021586:	ee26 6b07 	vmul.f64	d6, d6, d7
 802158a:	ee37 5b06 	vadd.f64	d5, d7, d6
 802158e:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8021592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021596:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8021600 <exp+0x190>
 802159a:	d51e      	bpl.n	80215da <exp+0x16a>
 802159c:	ee35 3b04 	vadd.f64	d3, d5, d4
 80215a0:	ee37 7b45 	vsub.f64	d7, d7, d5
 80215a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80215a8:	ee34 6b43 	vsub.f64	d6, d4, d3
 80215ac:	ee36 6b05 	vadd.f64	d6, d6, d5
 80215b0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80215b4:	ee36 6b03 	vadd.f64	d6, d6, d3
 80215b8:	ee36 5b44 	vsub.f64	d5, d6, d4
 80215bc:	eeb5 5b40 	vcmp.f64	d5, #0.0
 80215c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215c4:	d101      	bne.n	80215ca <exp+0x15a>
 80215c6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8021608 <exp+0x198>
 80215ca:	ed8d 0b00 	vstr	d0, [sp]
 80215ce:	ed9d 7b00 	vldr	d7, [sp]
 80215d2:	ee27 7b00 	vmul.f64	d7, d7, d0
 80215d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80215da:	ee25 0b00 	vmul.f64	d0, d5, d0
 80215de:	b004      	add	sp, #16
 80215e0:	bcf0      	pop	{r4, r5, r6, r7}
 80215e2:	f000 b845 	b.w	8021670 <__math_check_uflow>
 80215e6:	ec43 2b10 	vmov	d0, r2, r3
 80215ea:	eea6 0b00 	vfma.f64	d0, d6, d0
 80215ee:	e751      	b.n	8021494 <exp+0x24>
 80215f0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8021608 <exp+0x198>
 80215f4:	e74e      	b.n	8021494 <exp+0x24>
 80215f6:	bf00      	nop
 80215f8:	00000000 	.word	0x00000000
 80215fc:	7f000000 	.word	0x7f000000
 8021600:	00000000 	.word	0x00000000
 8021604:	00100000 	.word	0x00100000
	...
 8021610:	08025958 	.word	0x08025958

08021614 <with_errno>:
 8021614:	b513      	push	{r0, r1, r4, lr}
 8021616:	4604      	mov	r4, r0
 8021618:	ed8d 0b00 	vstr	d0, [sp]
 802161c:	f001 fea4 	bl	8023368 <__errno>
 8021620:	ed9d 0b00 	vldr	d0, [sp]
 8021624:	6004      	str	r4, [r0, #0]
 8021626:	b002      	add	sp, #8
 8021628:	bd10      	pop	{r4, pc}

0802162a <xflow>:
 802162a:	b082      	sub	sp, #8
 802162c:	b158      	cbz	r0, 8021646 <xflow+0x1c>
 802162e:	eeb1 7b40 	vneg.f64	d7, d0
 8021632:	ed8d 7b00 	vstr	d7, [sp]
 8021636:	ed9d 7b00 	vldr	d7, [sp]
 802163a:	2022      	movs	r0, #34	; 0x22
 802163c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8021640:	b002      	add	sp, #8
 8021642:	f7ff bfe7 	b.w	8021614 <with_errno>
 8021646:	eeb0 7b40 	vmov.f64	d7, d0
 802164a:	e7f2      	b.n	8021632 <xflow+0x8>
 802164c:	0000      	movs	r0, r0
	...

08021650 <__math_uflow>:
 8021650:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8021658 <__math_uflow+0x8>
 8021654:	f7ff bfe9 	b.w	802162a <xflow>
 8021658:	00000000 	.word	0x00000000
 802165c:	10000000 	.word	0x10000000

08021660 <__math_oflow>:
 8021660:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8021668 <__math_oflow+0x8>
 8021664:	f7ff bfe1 	b.w	802162a <xflow>
 8021668:	00000000 	.word	0x00000000
 802166c:	70000000 	.word	0x70000000

08021670 <__math_check_uflow>:
 8021670:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8021674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021678:	d102      	bne.n	8021680 <__math_check_uflow+0x10>
 802167a:	2022      	movs	r0, #34	; 0x22
 802167c:	f7ff bfca 	b.w	8021614 <with_errno>
 8021680:	4770      	bx	lr
 8021682:	0000      	movs	r0, r0
 8021684:	0000      	movs	r0, r0
	...

08021688 <__math_check_oflow>:
 8021688:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80216a8 <__math_check_oflow+0x20>
 802168c:	eeb0 7bc0 	vabs.f64	d7, d0
 8021690:	eeb4 7b46 	vcmp.f64	d7, d6
 8021694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021698:	dd02      	ble.n	80216a0 <__math_check_oflow+0x18>
 802169a:	2022      	movs	r0, #34	; 0x22
 802169c:	f7ff bfba 	b.w	8021614 <with_errno>
 80216a0:	4770      	bx	lr
 80216a2:	bf00      	nop
 80216a4:	f3af 8000 	nop.w
 80216a8:	ffffffff 	.word	0xffffffff
 80216ac:	7fefffff 	.word	0x7fefffff

080216b0 <__ieee754_sqrt>:
 80216b0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80216b4:	4770      	bx	lr
	...

080216b8 <__kernel_cos>:
 80216b8:	ee10 1a90 	vmov	r1, s1
 80216bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80216c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80216c4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80216c8:	da05      	bge.n	80216d6 <__kernel_cos+0x1e>
 80216ca:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80216ce:	ee17 3a90 	vmov	r3, s15
 80216d2:	2b00      	cmp	r3, #0
 80216d4:	d03d      	beq.n	8021752 <__kernel_cos+0x9a>
 80216d6:	ee20 5b00 	vmul.f64	d5, d0, d0
 80216da:	ee21 1b40 	vnmul.f64	d1, d1, d0
 80216de:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 8021758 <__kernel_cos+0xa0>
 80216e2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8021760 <__kernel_cos+0xa8>
 80216e6:	eea5 4b07 	vfma.f64	d4, d5, d7
 80216ea:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8021768 <__kernel_cos+0xb0>
 80216ee:	eea4 7b05 	vfma.f64	d7, d4, d5
 80216f2:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 8021770 <__kernel_cos+0xb8>
 80216f6:	eea7 4b05 	vfma.f64	d4, d7, d5
 80216fa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8021778 <__kernel_cos+0xc0>
 80216fe:	4b22      	ldr	r3, [pc, #136]	; (8021788 <__kernel_cos+0xd0>)
 8021700:	eea4 7b05 	vfma.f64	d7, d4, d5
 8021704:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8021780 <__kernel_cos+0xc8>
 8021708:	4299      	cmp	r1, r3
 802170a:	eea7 4b05 	vfma.f64	d4, d7, d5
 802170e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8021712:	ee24 4b05 	vmul.f64	d4, d4, d5
 8021716:	ee25 7b07 	vmul.f64	d7, d5, d7
 802171a:	eea5 1b04 	vfma.f64	d1, d5, d4
 802171e:	dc04      	bgt.n	802172a <__kernel_cos+0x72>
 8021720:	ee37 7b41 	vsub.f64	d7, d7, d1
 8021724:	ee36 0b47 	vsub.f64	d0, d6, d7
 8021728:	4770      	bx	lr
 802172a:	4b18      	ldr	r3, [pc, #96]	; (802178c <__kernel_cos+0xd4>)
 802172c:	4299      	cmp	r1, r3
 802172e:	dc0d      	bgt.n	802174c <__kernel_cos+0x94>
 8021730:	2200      	movs	r2, #0
 8021732:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8021736:	ec43 2b15 	vmov	d5, r2, r3
 802173a:	ee36 0b45 	vsub.f64	d0, d6, d5
 802173e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8021742:	ee37 7b41 	vsub.f64	d7, d7, d1
 8021746:	ee30 0b47 	vsub.f64	d0, d0, d7
 802174a:	4770      	bx	lr
 802174c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8021750:	e7f3      	b.n	802173a <__kernel_cos+0x82>
 8021752:	eeb0 0b46 	vmov.f64	d0, d6
 8021756:	4770      	bx	lr
 8021758:	be8838d4 	.word	0xbe8838d4
 802175c:	bda8fae9 	.word	0xbda8fae9
 8021760:	bdb4b1c4 	.word	0xbdb4b1c4
 8021764:	3e21ee9e 	.word	0x3e21ee9e
 8021768:	809c52ad 	.word	0x809c52ad
 802176c:	be927e4f 	.word	0xbe927e4f
 8021770:	19cb1590 	.word	0x19cb1590
 8021774:	3efa01a0 	.word	0x3efa01a0
 8021778:	16c15177 	.word	0x16c15177
 802177c:	bf56c16c 	.word	0xbf56c16c
 8021780:	5555554c 	.word	0x5555554c
 8021784:	3fa55555 	.word	0x3fa55555
 8021788:	3fd33332 	.word	0x3fd33332
 802178c:	3fe90000 	.word	0x3fe90000

08021790 <__kernel_sin>:
 8021790:	ee10 3a90 	vmov	r3, s1
 8021794:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021798:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 802179c:	da04      	bge.n	80217a8 <__kernel_sin+0x18>
 802179e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80217a2:	ee17 3a90 	vmov	r3, s15
 80217a6:	b35b      	cbz	r3, 8021800 <__kernel_sin+0x70>
 80217a8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80217ac:	ee20 5b06 	vmul.f64	d5, d0, d6
 80217b0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8021808 <__kernel_sin+0x78>
 80217b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8021810 <__kernel_sin+0x80>
 80217b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80217bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8021818 <__kernel_sin+0x88>
 80217c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80217c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8021820 <__kernel_sin+0x90>
 80217c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80217cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8021828 <__kernel_sin+0x98>
 80217d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80217d4:	b930      	cbnz	r0, 80217e4 <__kernel_sin+0x54>
 80217d6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8021830 <__kernel_sin+0xa0>
 80217da:	eea6 4b07 	vfma.f64	d4, d6, d7
 80217de:	eea4 0b05 	vfma.f64	d0, d4, d5
 80217e2:	4770      	bx	lr
 80217e4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80217e8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80217ec:	eea1 7b04 	vfma.f64	d7, d1, d4
 80217f0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80217f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8021838 <__kernel_sin+0xa8>
 80217f8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80217fc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8021800:	4770      	bx	lr
 8021802:	bf00      	nop
 8021804:	f3af 8000 	nop.w
 8021808:	5acfd57c 	.word	0x5acfd57c
 802180c:	3de5d93a 	.word	0x3de5d93a
 8021810:	8a2b9ceb 	.word	0x8a2b9ceb
 8021814:	be5ae5e6 	.word	0xbe5ae5e6
 8021818:	57b1fe7d 	.word	0x57b1fe7d
 802181c:	3ec71de3 	.word	0x3ec71de3
 8021820:	19c161d5 	.word	0x19c161d5
 8021824:	bf2a01a0 	.word	0xbf2a01a0
 8021828:	1110f8a6 	.word	0x1110f8a6
 802182c:	3f811111 	.word	0x3f811111
 8021830:	55555549 	.word	0x55555549
 8021834:	bfc55555 	.word	0xbfc55555
 8021838:	55555549 	.word	0x55555549
 802183c:	3fc55555 	.word	0x3fc55555

08021840 <__kernel_tan>:
 8021840:	eeb0 7b40 	vmov.f64	d7, d0
 8021844:	ee17 3a90 	vmov	r3, s15
 8021848:	4989      	ldr	r1, [pc, #548]	; (8021a70 <__kernel_tan+0x230>)
 802184a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 802184e:	428a      	cmp	r2, r1
 8021850:	b510      	push	{r4, lr}
 8021852:	dc33      	bgt.n	80218bc <__kernel_tan+0x7c>
 8021854:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8021858:	ee16 1a90 	vmov	r1, s13
 802185c:	2900      	cmp	r1, #0
 802185e:	d143      	bne.n	80218e8 <__kernel_tan+0xa8>
 8021860:	ee10 4a10 	vmov	r4, s0
 8021864:	1c43      	adds	r3, r0, #1
 8021866:	4323      	orrs	r3, r4
 8021868:	4313      	orrs	r3, r2
 802186a:	d108      	bne.n	802187e <__kernel_tan+0x3e>
 802186c:	f7ff fd68 	bl	8021340 <fabs>
 8021870:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8021874:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8021878:	eeb0 0b47 	vmov.f64	d0, d7
 802187c:	bd10      	pop	{r4, pc}
 802187e:	2801      	cmp	r0, #1
 8021880:	d0fa      	beq.n	8021878 <__kernel_tan+0x38>
 8021882:	ee30 6b01 	vadd.f64	d6, d0, d1
 8021886:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 802188a:	ec53 2b16 	vmov	r2, r3, d6
 802188e:	ee87 3b06 	vdiv.f64	d3, d7, d6
 8021892:	460a      	mov	r2, r1
 8021894:	ec43 2b15 	vmov	d5, r2, r3
 8021898:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 802189c:	ec53 2b13 	vmov	r2, r3, d3
 80218a0:	ee35 4b40 	vsub.f64	d4, d5, d0
 80218a4:	460a      	mov	r2, r1
 80218a6:	ec43 2b17 	vmov	d7, r2, r3
 80218aa:	ee31 4b44 	vsub.f64	d4, d1, d4
 80218ae:	eea5 6b07 	vfma.f64	d6, d5, d7
 80218b2:	eea4 6b07 	vfma.f64	d6, d4, d7
 80218b6:	eea6 7b03 	vfma.f64	d7, d6, d3
 80218ba:	e7dd      	b.n	8021878 <__kernel_tan+0x38>
 80218bc:	496d      	ldr	r1, [pc, #436]	; (8021a74 <__kernel_tan+0x234>)
 80218be:	428a      	cmp	r2, r1
 80218c0:	dd12      	ble.n	80218e8 <__kernel_tan+0xa8>
 80218c2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 80219f0 <__kernel_tan+0x1b0>
 80218c6:	2b00      	cmp	r3, #0
 80218c8:	bfb8      	it	lt
 80218ca:	eeb1 7b40 	vneglt.f64	d7, d0
 80218ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80218d2:	ed9f 7b49 	vldr	d7, [pc, #292]	; 80219f8 <__kernel_tan+0x1b8>
 80218d6:	bfb8      	it	lt
 80218d8:	eeb1 1b41 	vneglt.f64	d1, d1
 80218dc:	ee37 7b41 	vsub.f64	d7, d7, d1
 80218e0:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8021a00 <__kernel_tan+0x1c0>
 80218e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80218e8:	ee27 5b07 	vmul.f64	d5, d7, d7
 80218ec:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8021a08 <__kernel_tan+0x1c8>
 80218f0:	ee25 6b05 	vmul.f64	d6, d5, d5
 80218f4:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8021a10 <__kernel_tan+0x1d0>
 80218f8:	eea6 4b03 	vfma.f64	d4, d6, d3
 80218fc:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8021a18 <__kernel_tan+0x1d8>
 8021900:	eea4 3b06 	vfma.f64	d3, d4, d6
 8021904:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8021a20 <__kernel_tan+0x1e0>
 8021908:	eea3 4b06 	vfma.f64	d4, d3, d6
 802190c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8021a28 <__kernel_tan+0x1e8>
 8021910:	eea4 3b06 	vfma.f64	d3, d4, d6
 8021914:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8021a30 <__kernel_tan+0x1f0>
 8021918:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8021a38 <__kernel_tan+0x1f8>
 802191c:	eea3 4b06 	vfma.f64	d4, d3, d6
 8021920:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8021a40 <__kernel_tan+0x200>
 8021924:	eea6 3b02 	vfma.f64	d3, d6, d2
 8021928:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8021a48 <__kernel_tan+0x208>
 802192c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8021930:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8021a50 <__kernel_tan+0x210>
 8021934:	eea2 3b06 	vfma.f64	d3, d2, d6
 8021938:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8021a58 <__kernel_tan+0x218>
 802193c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8021940:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8021a60 <__kernel_tan+0x220>
 8021944:	494b      	ldr	r1, [pc, #300]	; (8021a74 <__kernel_tan+0x234>)
 8021946:	eea2 3b06 	vfma.f64	d3, d2, d6
 802194a:	ee27 2b05 	vmul.f64	d2, d7, d5
 802194e:	eeb0 6b44 	vmov.f64	d6, d4
 8021952:	eeb0 4b41 	vmov.f64	d4, d1
 8021956:	eea3 6b05 	vfma.f64	d6, d3, d5
 802195a:	eea6 4b02 	vfma.f64	d4, d6, d2
 802195e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8021a68 <__kernel_tan+0x228>
 8021962:	eea4 1b05 	vfma.f64	d1, d4, d5
 8021966:	428a      	cmp	r2, r1
 8021968:	eea2 1b06 	vfma.f64	d1, d2, d6
 802196c:	ee37 5b01 	vadd.f64	d5, d7, d1
 8021970:	dd1d      	ble.n	80219ae <__kernel_tan+0x16e>
 8021972:	ee25 3b05 	vmul.f64	d3, d5, d5
 8021976:	179b      	asrs	r3, r3, #30
 8021978:	ee06 0a90 	vmov	s13, r0
 802197c:	f003 0302 	and.w	r3, r3, #2
 8021980:	f1c3 0301 	rsb	r3, r3, #1
 8021984:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8021988:	ee35 5b06 	vadd.f64	d5, d5, d6
 802198c:	ee83 4b05 	vdiv.f64	d4, d3, d5
 8021990:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8021994:	ee34 4b41 	vsub.f64	d4, d4, d1
 8021998:	ee37 7b44 	vsub.f64	d7, d7, d4
 802199c:	eea7 6b45 	vfms.f64	d6, d7, d5
 80219a0:	ee07 3a90 	vmov	s15, r3
 80219a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80219a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80219ac:	e764      	b.n	8021878 <__kernel_tan+0x38>
 80219ae:	2801      	cmp	r0, #1
 80219b0:	d01a      	beq.n	80219e8 <__kernel_tan+0x1a8>
 80219b2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80219b6:	ec51 0b15 	vmov	r0, r1, d5
 80219ba:	2000      	movs	r0, #0
 80219bc:	ec41 0b13 	vmov	d3, r0, r1
 80219c0:	ee33 7b47 	vsub.f64	d7, d3, d7
 80219c4:	ee31 1b47 	vsub.f64	d1, d1, d7
 80219c8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80219cc:	ee87 4b05 	vdiv.f64	d4, d7, d5
 80219d0:	ec53 2b14 	vmov	r2, r3, d4
 80219d4:	4602      	mov	r2, r0
 80219d6:	ec43 2b17 	vmov	d7, r2, r3
 80219da:	eea3 6b07 	vfma.f64	d6, d3, d7
 80219de:	eea1 6b07 	vfma.f64	d6, d1, d7
 80219e2:	eea6 7b04 	vfma.f64	d7, d6, d4
 80219e6:	e747      	b.n	8021878 <__kernel_tan+0x38>
 80219e8:	eeb0 7b45 	vmov.f64	d7, d5
 80219ec:	e744      	b.n	8021878 <__kernel_tan+0x38>
 80219ee:	bf00      	nop
 80219f0:	54442d18 	.word	0x54442d18
 80219f4:	3fe921fb 	.word	0x3fe921fb
 80219f8:	33145c07 	.word	0x33145c07
 80219fc:	3c81a626 	.word	0x3c81a626
	...
 8021a08:	db605373 	.word	0xdb605373
 8021a0c:	bef375cb 	.word	0xbef375cb
 8021a10:	a03792a6 	.word	0xa03792a6
 8021a14:	3f147e88 	.word	0x3f147e88
 8021a18:	f2f26501 	.word	0xf2f26501
 8021a1c:	3f4344d8 	.word	0x3f4344d8
 8021a20:	c9560328 	.word	0xc9560328
 8021a24:	3f6d6d22 	.word	0x3f6d6d22
 8021a28:	8406d637 	.word	0x8406d637
 8021a2c:	3f9664f4 	.word	0x3f9664f4
 8021a30:	1110fe7a 	.word	0x1110fe7a
 8021a34:	3fc11111 	.word	0x3fc11111
 8021a38:	74bf7ad4 	.word	0x74bf7ad4
 8021a3c:	3efb2a70 	.word	0x3efb2a70
 8021a40:	32f0a7e9 	.word	0x32f0a7e9
 8021a44:	3f12b80f 	.word	0x3f12b80f
 8021a48:	1a8d1068 	.word	0x1a8d1068
 8021a4c:	3f3026f7 	.word	0x3f3026f7
 8021a50:	fee08315 	.word	0xfee08315
 8021a54:	3f57dbc8 	.word	0x3f57dbc8
 8021a58:	e96e8493 	.word	0xe96e8493
 8021a5c:	3f8226e3 	.word	0x3f8226e3
 8021a60:	1bb341fe 	.word	0x1bb341fe
 8021a64:	3faba1ba 	.word	0x3faba1ba
 8021a68:	55555563 	.word	0x55555563
 8021a6c:	3fd55555 	.word	0x3fd55555
 8021a70:	3e2fffff 	.word	0x3e2fffff
 8021a74:	3fe59427 	.word	0x3fe59427

08021a78 <__ieee754_rem_pio2>:
 8021a78:	b570      	push	{r4, r5, r6, lr}
 8021a7a:	eeb0 7b40 	vmov.f64	d7, d0
 8021a7e:	ee17 5a90 	vmov	r5, s15
 8021a82:	4b99      	ldr	r3, [pc, #612]	; (8021ce8 <__ieee754_rem_pio2+0x270>)
 8021a84:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8021a88:	429e      	cmp	r6, r3
 8021a8a:	b088      	sub	sp, #32
 8021a8c:	4604      	mov	r4, r0
 8021a8e:	dc07      	bgt.n	8021aa0 <__ieee754_rem_pio2+0x28>
 8021a90:	2200      	movs	r2, #0
 8021a92:	2300      	movs	r3, #0
 8021a94:	ed84 0b00 	vstr	d0, [r4]
 8021a98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8021a9c:	2000      	movs	r0, #0
 8021a9e:	e01b      	b.n	8021ad8 <__ieee754_rem_pio2+0x60>
 8021aa0:	4b92      	ldr	r3, [pc, #584]	; (8021cec <__ieee754_rem_pio2+0x274>)
 8021aa2:	429e      	cmp	r6, r3
 8021aa4:	dc3b      	bgt.n	8021b1e <__ieee754_rem_pio2+0xa6>
 8021aa6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8021aaa:	2d00      	cmp	r5, #0
 8021aac:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8021ca8 <__ieee754_rem_pio2+0x230>
 8021ab0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8021ab4:	dd19      	ble.n	8021aea <__ieee754_rem_pio2+0x72>
 8021ab6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8021aba:	429e      	cmp	r6, r3
 8021abc:	d00e      	beq.n	8021adc <__ieee754_rem_pio2+0x64>
 8021abe:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8021cb0 <__ieee754_rem_pio2+0x238>
 8021ac2:	ee37 5b46 	vsub.f64	d5, d7, d6
 8021ac6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8021aca:	ed84 5b00 	vstr	d5, [r4]
 8021ace:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021ad2:	ed84 7b02 	vstr	d7, [r4, #8]
 8021ad6:	2001      	movs	r0, #1
 8021ad8:	b008      	add	sp, #32
 8021ada:	bd70      	pop	{r4, r5, r6, pc}
 8021adc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8021cb8 <__ieee754_rem_pio2+0x240>
 8021ae0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021ae4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8021cc0 <__ieee754_rem_pio2+0x248>
 8021ae8:	e7eb      	b.n	8021ac2 <__ieee754_rem_pio2+0x4a>
 8021aea:	429e      	cmp	r6, r3
 8021aec:	ee30 7b06 	vadd.f64	d7, d0, d6
 8021af0:	d00e      	beq.n	8021b10 <__ieee754_rem_pio2+0x98>
 8021af2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8021cb0 <__ieee754_rem_pio2+0x238>
 8021af6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8021afa:	ee37 7b45 	vsub.f64	d7, d7, d5
 8021afe:	ed84 5b00 	vstr	d5, [r4]
 8021b02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8021b06:	f04f 30ff 	mov.w	r0, #4294967295
 8021b0a:	ed84 7b02 	vstr	d7, [r4, #8]
 8021b0e:	e7e3      	b.n	8021ad8 <__ieee754_rem_pio2+0x60>
 8021b10:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8021cb8 <__ieee754_rem_pio2+0x240>
 8021b14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8021b18:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8021cc0 <__ieee754_rem_pio2+0x248>
 8021b1c:	e7eb      	b.n	8021af6 <__ieee754_rem_pio2+0x7e>
 8021b1e:	4b74      	ldr	r3, [pc, #464]	; (8021cf0 <__ieee754_rem_pio2+0x278>)
 8021b20:	429e      	cmp	r6, r3
 8021b22:	dc70      	bgt.n	8021c06 <__ieee754_rem_pio2+0x18e>
 8021b24:	f7ff fc0c 	bl	8021340 <fabs>
 8021b28:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8021b2c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8021cc8 <__ieee754_rem_pio2+0x250>
 8021b30:	eea0 7b06 	vfma.f64	d7, d0, d6
 8021b34:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8021b38:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8021b3c:	ee17 0a90 	vmov	r0, s15
 8021b40:	eeb1 4b45 	vneg.f64	d4, d5
 8021b44:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8021ca8 <__ieee754_rem_pio2+0x230>
 8021b48:	eea5 0b47 	vfms.f64	d0, d5, d7
 8021b4c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8021cb0 <__ieee754_rem_pio2+0x238>
 8021b50:	281f      	cmp	r0, #31
 8021b52:	ee25 7b07 	vmul.f64	d7, d5, d7
 8021b56:	ee30 6b47 	vsub.f64	d6, d0, d7
 8021b5a:	dc08      	bgt.n	8021b6e <__ieee754_rem_pio2+0xf6>
 8021b5c:	4b65      	ldr	r3, [pc, #404]	; (8021cf4 <__ieee754_rem_pio2+0x27c>)
 8021b5e:	1e42      	subs	r2, r0, #1
 8021b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8021b64:	42b3      	cmp	r3, r6
 8021b66:	d002      	beq.n	8021b6e <__ieee754_rem_pio2+0xf6>
 8021b68:	ed84 6b00 	vstr	d6, [r4]
 8021b6c:	e024      	b.n	8021bb8 <__ieee754_rem_pio2+0x140>
 8021b6e:	ee16 3a90 	vmov	r3, s13
 8021b72:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8021b76:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8021b7a:	2b10      	cmp	r3, #16
 8021b7c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8021b80:	ddf2      	ble.n	8021b68 <__ieee754_rem_pio2+0xf0>
 8021b82:	eeb0 6b40 	vmov.f64	d6, d0
 8021b86:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8021cb8 <__ieee754_rem_pio2+0x240>
 8021b8a:	eea4 6b03 	vfma.f64	d6, d4, d3
 8021b8e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8021b92:	eea4 7b03 	vfma.f64	d7, d4, d3
 8021b96:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8021cc0 <__ieee754_rem_pio2+0x248>
 8021b9a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8021b9e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8021ba2:	ee13 3a90 	vmov	r3, s7
 8021ba6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8021baa:	1ad3      	subs	r3, r2, r3
 8021bac:	2b31      	cmp	r3, #49	; 0x31
 8021bae:	dc17      	bgt.n	8021be0 <__ieee754_rem_pio2+0x168>
 8021bb0:	eeb0 0b46 	vmov.f64	d0, d6
 8021bb4:	ed84 3b00 	vstr	d3, [r4]
 8021bb8:	ed94 6b00 	vldr	d6, [r4]
 8021bbc:	2d00      	cmp	r5, #0
 8021bbe:	ee30 0b46 	vsub.f64	d0, d0, d6
 8021bc2:	ee30 0b47 	vsub.f64	d0, d0, d7
 8021bc6:	ed84 0b02 	vstr	d0, [r4, #8]
 8021bca:	da85      	bge.n	8021ad8 <__ieee754_rem_pio2+0x60>
 8021bcc:	eeb1 6b46 	vneg.f64	d6, d6
 8021bd0:	eeb1 0b40 	vneg.f64	d0, d0
 8021bd4:	ed84 6b00 	vstr	d6, [r4]
 8021bd8:	ed84 0b02 	vstr	d0, [r4, #8]
 8021bdc:	4240      	negs	r0, r0
 8021bde:	e77b      	b.n	8021ad8 <__ieee754_rem_pio2+0x60>
 8021be0:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8021cd0 <__ieee754_rem_pio2+0x258>
 8021be4:	eeb0 0b46 	vmov.f64	d0, d6
 8021be8:	eea4 0b07 	vfma.f64	d0, d4, d7
 8021bec:	ee36 6b40 	vsub.f64	d6, d6, d0
 8021bf0:	eea4 6b07 	vfma.f64	d6, d4, d7
 8021bf4:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8021cd8 <__ieee754_rem_pio2+0x260>
 8021bf8:	eeb0 7b46 	vmov.f64	d7, d6
 8021bfc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8021c00:	ee30 6b47 	vsub.f64	d6, d0, d7
 8021c04:	e7b0      	b.n	8021b68 <__ieee754_rem_pio2+0xf0>
 8021c06:	4b3c      	ldr	r3, [pc, #240]	; (8021cf8 <__ieee754_rem_pio2+0x280>)
 8021c08:	429e      	cmp	r6, r3
 8021c0a:	dd06      	ble.n	8021c1a <__ieee754_rem_pio2+0x1a2>
 8021c0c:	ee30 7b40 	vsub.f64	d7, d0, d0
 8021c10:	ed80 7b02 	vstr	d7, [r0, #8]
 8021c14:	ed80 7b00 	vstr	d7, [r0]
 8021c18:	e740      	b.n	8021a9c <__ieee754_rem_pio2+0x24>
 8021c1a:	1532      	asrs	r2, r6, #20
 8021c1c:	ee10 0a10 	vmov	r0, s0
 8021c20:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8021c24:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8021c28:	ec41 0b17 	vmov	d7, r0, r1
 8021c2c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8021c30:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8021ce0 <__ieee754_rem_pio2+0x268>
 8021c34:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8021c38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021c3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8021c40:	ee27 7b05 	vmul.f64	d7, d7, d5
 8021c44:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8021c48:	a808      	add	r0, sp, #32
 8021c4a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8021c4e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8021c52:	ed8d 6b04 	vstr	d6, [sp, #16]
 8021c56:	ee27 7b05 	vmul.f64	d7, d7, d5
 8021c5a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021c5e:	2103      	movs	r1, #3
 8021c60:	ed30 7b02 	vldmdb	r0!, {d7}
 8021c64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021c6c:	460b      	mov	r3, r1
 8021c6e:	f101 31ff 	add.w	r1, r1, #4294967295
 8021c72:	d0f5      	beq.n	8021c60 <__ieee754_rem_pio2+0x1e8>
 8021c74:	4921      	ldr	r1, [pc, #132]	; (8021cfc <__ieee754_rem_pio2+0x284>)
 8021c76:	9101      	str	r1, [sp, #4]
 8021c78:	2102      	movs	r1, #2
 8021c7a:	9100      	str	r1, [sp, #0]
 8021c7c:	a802      	add	r0, sp, #8
 8021c7e:	4621      	mov	r1, r4
 8021c80:	f000 f9b2 	bl	8021fe8 <__kernel_rem_pio2>
 8021c84:	2d00      	cmp	r5, #0
 8021c86:	f6bf af27 	bge.w	8021ad8 <__ieee754_rem_pio2+0x60>
 8021c8a:	ed94 7b00 	vldr	d7, [r4]
 8021c8e:	eeb1 7b47 	vneg.f64	d7, d7
 8021c92:	ed84 7b00 	vstr	d7, [r4]
 8021c96:	ed94 7b02 	vldr	d7, [r4, #8]
 8021c9a:	eeb1 7b47 	vneg.f64	d7, d7
 8021c9e:	ed84 7b02 	vstr	d7, [r4, #8]
 8021ca2:	e79b      	b.n	8021bdc <__ieee754_rem_pio2+0x164>
 8021ca4:	f3af 8000 	nop.w
 8021ca8:	54400000 	.word	0x54400000
 8021cac:	3ff921fb 	.word	0x3ff921fb
 8021cb0:	1a626331 	.word	0x1a626331
 8021cb4:	3dd0b461 	.word	0x3dd0b461
 8021cb8:	1a600000 	.word	0x1a600000
 8021cbc:	3dd0b461 	.word	0x3dd0b461
 8021cc0:	2e037073 	.word	0x2e037073
 8021cc4:	3ba3198a 	.word	0x3ba3198a
 8021cc8:	6dc9c883 	.word	0x6dc9c883
 8021ccc:	3fe45f30 	.word	0x3fe45f30
 8021cd0:	2e000000 	.word	0x2e000000
 8021cd4:	3ba3198a 	.word	0x3ba3198a
 8021cd8:	252049c1 	.word	0x252049c1
 8021cdc:	397b839a 	.word	0x397b839a
 8021ce0:	00000000 	.word	0x00000000
 8021ce4:	41700000 	.word	0x41700000
 8021ce8:	3fe921fb 	.word	0x3fe921fb
 8021cec:	4002d97b 	.word	0x4002d97b
 8021cf0:	413921fb 	.word	0x413921fb
 8021cf4:	080261c8 	.word	0x080261c8
 8021cf8:	7fefffff 	.word	0x7fefffff
 8021cfc:	08026248 	.word	0x08026248

08021d00 <__ieee754_atan2f>:
 8021d00:	ee10 2a90 	vmov	r2, s1
 8021d04:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8021d08:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8021d0c:	b510      	push	{r4, lr}
 8021d0e:	eef0 7a40 	vmov.f32	s15, s0
 8021d12:	dc06      	bgt.n	8021d22 <__ieee754_atan2f+0x22>
 8021d14:	ee10 0a10 	vmov	r0, s0
 8021d18:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8021d1c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8021d20:	dd04      	ble.n	8021d2c <__ieee754_atan2f+0x2c>
 8021d22:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8021d26:	eeb0 0a67 	vmov.f32	s0, s15
 8021d2a:	bd10      	pop	{r4, pc}
 8021d2c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8021d30:	d103      	bne.n	8021d3a <__ieee754_atan2f+0x3a>
 8021d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021d36:	f000 b881 	b.w	8021e3c <atanf>
 8021d3a:	1794      	asrs	r4, r2, #30
 8021d3c:	f004 0402 	and.w	r4, r4, #2
 8021d40:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8021d44:	b93b      	cbnz	r3, 8021d56 <__ieee754_atan2f+0x56>
 8021d46:	2c02      	cmp	r4, #2
 8021d48:	d05c      	beq.n	8021e04 <__ieee754_atan2f+0x104>
 8021d4a:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8021e18 <__ieee754_atan2f+0x118>
 8021d4e:	2c03      	cmp	r4, #3
 8021d50:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8021d54:	e7e7      	b.n	8021d26 <__ieee754_atan2f+0x26>
 8021d56:	b939      	cbnz	r1, 8021d68 <__ieee754_atan2f+0x68>
 8021d58:	eddf 7a30 	vldr	s15, [pc, #192]	; 8021e1c <__ieee754_atan2f+0x11c>
 8021d5c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8021e20 <__ieee754_atan2f+0x120>
 8021d60:	2800      	cmp	r0, #0
 8021d62:	fe67 7a87 	vselge.f32	s15, s15, s14
 8021d66:	e7de      	b.n	8021d26 <__ieee754_atan2f+0x26>
 8021d68:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8021d6c:	d110      	bne.n	8021d90 <__ieee754_atan2f+0x90>
 8021d6e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8021d72:	f104 34ff 	add.w	r4, r4, #4294967295
 8021d76:	d107      	bne.n	8021d88 <__ieee754_atan2f+0x88>
 8021d78:	2c02      	cmp	r4, #2
 8021d7a:	d846      	bhi.n	8021e0a <__ieee754_atan2f+0x10a>
 8021d7c:	4b29      	ldr	r3, [pc, #164]	; (8021e24 <__ieee754_atan2f+0x124>)
 8021d7e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8021d82:	edd3 7a00 	vldr	s15, [r3]
 8021d86:	e7ce      	b.n	8021d26 <__ieee754_atan2f+0x26>
 8021d88:	2c02      	cmp	r4, #2
 8021d8a:	d841      	bhi.n	8021e10 <__ieee754_atan2f+0x110>
 8021d8c:	4b26      	ldr	r3, [pc, #152]	; (8021e28 <__ieee754_atan2f+0x128>)
 8021d8e:	e7f6      	b.n	8021d7e <__ieee754_atan2f+0x7e>
 8021d90:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8021d94:	d0e0      	beq.n	8021d58 <__ieee754_atan2f+0x58>
 8021d96:	1a5b      	subs	r3, r3, r1
 8021d98:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8021d9c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8021da0:	da1a      	bge.n	8021dd8 <__ieee754_atan2f+0xd8>
 8021da2:	2a00      	cmp	r2, #0
 8021da4:	da01      	bge.n	8021daa <__ieee754_atan2f+0xaa>
 8021da6:	313c      	adds	r1, #60	; 0x3c
 8021da8:	db19      	blt.n	8021dde <__ieee754_atan2f+0xde>
 8021daa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8021dae:	f7ff fb55 	bl	802145c <fabsf>
 8021db2:	f000 f843 	bl	8021e3c <atanf>
 8021db6:	eef0 7a40 	vmov.f32	s15, s0
 8021dba:	2c01      	cmp	r4, #1
 8021dbc:	d012      	beq.n	8021de4 <__ieee754_atan2f+0xe4>
 8021dbe:	2c02      	cmp	r4, #2
 8021dc0:	d017      	beq.n	8021df2 <__ieee754_atan2f+0xf2>
 8021dc2:	2c00      	cmp	r4, #0
 8021dc4:	d0af      	beq.n	8021d26 <__ieee754_atan2f+0x26>
 8021dc6:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8021e2c <__ieee754_atan2f+0x12c>
 8021dca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021dce:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8021e30 <__ieee754_atan2f+0x130>
 8021dd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021dd6:	e7a6      	b.n	8021d26 <__ieee754_atan2f+0x26>
 8021dd8:	eddf 7a10 	vldr	s15, [pc, #64]	; 8021e1c <__ieee754_atan2f+0x11c>
 8021ddc:	e7ed      	b.n	8021dba <__ieee754_atan2f+0xba>
 8021dde:	eddf 7a15 	vldr	s15, [pc, #84]	; 8021e34 <__ieee754_atan2f+0x134>
 8021de2:	e7ea      	b.n	8021dba <__ieee754_atan2f+0xba>
 8021de4:	ee17 3a90 	vmov	r3, s15
 8021de8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8021dec:	ee07 3a90 	vmov	s15, r3
 8021df0:	e799      	b.n	8021d26 <__ieee754_atan2f+0x26>
 8021df2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8021e2c <__ieee754_atan2f+0x12c>
 8021df6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021dfa:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8021e30 <__ieee754_atan2f+0x130>
 8021dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021e02:	e790      	b.n	8021d26 <__ieee754_atan2f+0x26>
 8021e04:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8021e30 <__ieee754_atan2f+0x130>
 8021e08:	e78d      	b.n	8021d26 <__ieee754_atan2f+0x26>
 8021e0a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8021e38 <__ieee754_atan2f+0x138>
 8021e0e:	e78a      	b.n	8021d26 <__ieee754_atan2f+0x26>
 8021e10:	eddf 7a08 	vldr	s15, [pc, #32]	; 8021e34 <__ieee754_atan2f+0x134>
 8021e14:	e787      	b.n	8021d26 <__ieee754_atan2f+0x26>
 8021e16:	bf00      	nop
 8021e18:	c0490fdb 	.word	0xc0490fdb
 8021e1c:	3fc90fdb 	.word	0x3fc90fdb
 8021e20:	bfc90fdb 	.word	0xbfc90fdb
 8021e24:	08026350 	.word	0x08026350
 8021e28:	0802635c 	.word	0x0802635c
 8021e2c:	33bbbd2e 	.word	0x33bbbd2e
 8021e30:	40490fdb 	.word	0x40490fdb
 8021e34:	00000000 	.word	0x00000000
 8021e38:	3f490fdb 	.word	0x3f490fdb

08021e3c <atanf>:
 8021e3c:	b538      	push	{r3, r4, r5, lr}
 8021e3e:	ee10 5a10 	vmov	r5, s0
 8021e42:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8021e46:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8021e4a:	eef0 7a40 	vmov.f32	s15, s0
 8021e4e:	db0f      	blt.n	8021e70 <atanf+0x34>
 8021e50:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8021e54:	dd04      	ble.n	8021e60 <atanf+0x24>
 8021e56:	ee70 7a00 	vadd.f32	s15, s0, s0
 8021e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8021e5e:	bd38      	pop	{r3, r4, r5, pc}
 8021e60:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8021f98 <atanf+0x15c>
 8021e64:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8021f9c <atanf+0x160>
 8021e68:	2d00      	cmp	r5, #0
 8021e6a:	fe77 7a87 	vselgt.f32	s15, s15, s14
 8021e6e:	e7f4      	b.n	8021e5a <atanf+0x1e>
 8021e70:	4b4b      	ldr	r3, [pc, #300]	; (8021fa0 <atanf+0x164>)
 8021e72:	429c      	cmp	r4, r3
 8021e74:	dc10      	bgt.n	8021e98 <atanf+0x5c>
 8021e76:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8021e7a:	da0a      	bge.n	8021e92 <atanf+0x56>
 8021e7c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8021fa4 <atanf+0x168>
 8021e80:	ee30 7a07 	vadd.f32	s14, s0, s14
 8021e84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021e88:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8021e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021e90:	dce3      	bgt.n	8021e5a <atanf+0x1e>
 8021e92:	f04f 33ff 	mov.w	r3, #4294967295
 8021e96:	e013      	b.n	8021ec0 <atanf+0x84>
 8021e98:	f7ff fae0 	bl	802145c <fabsf>
 8021e9c:	4b42      	ldr	r3, [pc, #264]	; (8021fa8 <atanf+0x16c>)
 8021e9e:	429c      	cmp	r4, r3
 8021ea0:	dc4f      	bgt.n	8021f42 <atanf+0x106>
 8021ea2:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8021ea6:	429c      	cmp	r4, r3
 8021ea8:	dc41      	bgt.n	8021f2e <atanf+0xf2>
 8021eaa:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8021eae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8021eb2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8021eb6:	2300      	movs	r3, #0
 8021eb8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021ebc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021ec0:	1c5a      	adds	r2, r3, #1
 8021ec2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8021ec6:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8021fac <atanf+0x170>
 8021eca:	eddf 5a39 	vldr	s11, [pc, #228]	; 8021fb0 <atanf+0x174>
 8021ece:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8021fb4 <atanf+0x178>
 8021ed2:	ee66 6a06 	vmul.f32	s13, s12, s12
 8021ed6:	eee6 5a87 	vfma.f32	s11, s13, s14
 8021eda:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8021fb8 <atanf+0x17c>
 8021ede:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8021ee2:	eddf 5a36 	vldr	s11, [pc, #216]	; 8021fbc <atanf+0x180>
 8021ee6:	eee7 5a26 	vfma.f32	s11, s14, s13
 8021eea:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8021fc0 <atanf+0x184>
 8021eee:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8021ef2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8021fc4 <atanf+0x188>
 8021ef6:	eee7 5a26 	vfma.f32	s11, s14, s13
 8021efa:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8021fc8 <atanf+0x18c>
 8021efe:	eea6 5a87 	vfma.f32	s10, s13, s14
 8021f02:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8021fcc <atanf+0x190>
 8021f06:	eea5 7a26 	vfma.f32	s14, s10, s13
 8021f0a:	ed9f 5a31 	vldr	s10, [pc, #196]	; 8021fd0 <atanf+0x194>
 8021f0e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8021f12:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8021fd4 <atanf+0x198>
 8021f16:	eea5 7a26 	vfma.f32	s14, s10, s13
 8021f1a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8021f1e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8021f22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8021f26:	d121      	bne.n	8021f6c <atanf+0x130>
 8021f28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021f2c:	e795      	b.n	8021e5a <atanf+0x1e>
 8021f2e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021f32:	ee30 7a67 	vsub.f32	s14, s0, s15
 8021f36:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021f3a:	2301      	movs	r3, #1
 8021f3c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021f40:	e7be      	b.n	8021ec0 <atanf+0x84>
 8021f42:	4b25      	ldr	r3, [pc, #148]	; (8021fd8 <atanf+0x19c>)
 8021f44:	429c      	cmp	r4, r3
 8021f46:	dc0b      	bgt.n	8021f60 <atanf+0x124>
 8021f48:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8021f4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021f50:	eea0 7a27 	vfma.f32	s14, s0, s15
 8021f54:	2302      	movs	r3, #2
 8021f56:	ee70 6a67 	vsub.f32	s13, s0, s15
 8021f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021f5e:	e7af      	b.n	8021ec0 <atanf+0x84>
 8021f60:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8021f64:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021f68:	2303      	movs	r3, #3
 8021f6a:	e7a9      	b.n	8021ec0 <atanf+0x84>
 8021f6c:	4a1b      	ldr	r2, [pc, #108]	; (8021fdc <atanf+0x1a0>)
 8021f6e:	491c      	ldr	r1, [pc, #112]	; (8021fe0 <atanf+0x1a4>)
 8021f70:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8021f74:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021f78:	edd3 6a00 	vldr	s13, [r3]
 8021f7c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8021f80:	2d00      	cmp	r5, #0
 8021f82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8021f86:	edd2 7a00 	vldr	s15, [r2]
 8021f8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021f8e:	bfb8      	it	lt
 8021f90:	eef1 7a67 	vneglt.f32	s15, s15
 8021f94:	e761      	b.n	8021e5a <atanf+0x1e>
 8021f96:	bf00      	nop
 8021f98:	3fc90fdb 	.word	0x3fc90fdb
 8021f9c:	bfc90fdb 	.word	0xbfc90fdb
 8021fa0:	3edfffff 	.word	0x3edfffff
 8021fa4:	7149f2ca 	.word	0x7149f2ca
 8021fa8:	3f97ffff 	.word	0x3f97ffff
 8021fac:	3c8569d7 	.word	0x3c8569d7
 8021fb0:	3d4bda59 	.word	0x3d4bda59
 8021fb4:	bd6ef16b 	.word	0xbd6ef16b
 8021fb8:	3d886b35 	.word	0x3d886b35
 8021fbc:	3dba2e6e 	.word	0x3dba2e6e
 8021fc0:	3e124925 	.word	0x3e124925
 8021fc4:	3eaaaaab 	.word	0x3eaaaaab
 8021fc8:	bd15a221 	.word	0xbd15a221
 8021fcc:	bd9d8795 	.word	0xbd9d8795
 8021fd0:	bde38e38 	.word	0xbde38e38
 8021fd4:	be4ccccd 	.word	0xbe4ccccd
 8021fd8:	401bffff 	.word	0x401bffff
 8021fdc:	08026368 	.word	0x08026368
 8021fe0:	08026378 	.word	0x08026378
 8021fe4:	00000000 	.word	0x00000000

08021fe8 <__kernel_rem_pio2>:
 8021fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fec:	ed2d 8b06 	vpush	{d8-d10}
 8021ff0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8021ff4:	460f      	mov	r7, r1
 8021ff6:	9002      	str	r0, [sp, #8]
 8021ff8:	49c3      	ldr	r1, [pc, #780]	; (8022308 <__kernel_rem_pio2+0x320>)
 8021ffa:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8021ffc:	9301      	str	r3, [sp, #4]
 8021ffe:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8022002:	9901      	ldr	r1, [sp, #4]
 8022004:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8022006:	f112 0f14 	cmn.w	r2, #20
 802200a:	bfa8      	it	ge
 802200c:	1ed0      	subge	r0, r2, #3
 802200e:	f101 3aff 	add.w	sl, r1, #4294967295
 8022012:	bfaa      	itet	ge
 8022014:	2418      	movge	r4, #24
 8022016:	2000      	movlt	r0, #0
 8022018:	fb90 f0f4 	sdivge	r0, r0, r4
 802201c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 80222f0 <__kernel_rem_pio2+0x308>
 8022020:	f06f 0417 	mvn.w	r4, #23
 8022024:	fb00 4404 	mla	r4, r0, r4, r4
 8022028:	eba0 060a 	sub.w	r6, r0, sl
 802202c:	4414      	add	r4, r2
 802202e:	eb09 0c0a 	add.w	ip, r9, sl
 8022032:	ad1a      	add	r5, sp, #104	; 0x68
 8022034:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8022038:	2200      	movs	r2, #0
 802203a:	4562      	cmp	r2, ip
 802203c:	dd10      	ble.n	8022060 <__kernel_rem_pio2+0x78>
 802203e:	9a01      	ldr	r2, [sp, #4]
 8022040:	a91a      	add	r1, sp, #104	; 0x68
 8022042:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8022046:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 802204a:	f04f 0c00 	mov.w	ip, #0
 802204e:	45cc      	cmp	ip, r9
 8022050:	dc26      	bgt.n	80220a0 <__kernel_rem_pio2+0xb8>
 8022052:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 80222f0 <__kernel_rem_pio2+0x308>
 8022056:	f8dd e008 	ldr.w	lr, [sp, #8]
 802205a:	4616      	mov	r6, r2
 802205c:	2500      	movs	r5, #0
 802205e:	e015      	b.n	802208c <__kernel_rem_pio2+0xa4>
 8022060:	42d6      	cmn	r6, r2
 8022062:	d409      	bmi.n	8022078 <__kernel_rem_pio2+0x90>
 8022064:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8022068:	ee07 1a90 	vmov	s15, r1
 802206c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8022070:	eca5 7b02 	vstmia	r5!, {d7}
 8022074:	3201      	adds	r2, #1
 8022076:	e7e0      	b.n	802203a <__kernel_rem_pio2+0x52>
 8022078:	eeb0 7b46 	vmov.f64	d7, d6
 802207c:	e7f8      	b.n	8022070 <__kernel_rem_pio2+0x88>
 802207e:	ecbe 5b02 	vldmia	lr!, {d5}
 8022082:	ed96 6b00 	vldr	d6, [r6]
 8022086:	3501      	adds	r5, #1
 8022088:	eea5 7b06 	vfma.f64	d7, d5, d6
 802208c:	4555      	cmp	r5, sl
 802208e:	f1a6 0608 	sub.w	r6, r6, #8
 8022092:	ddf4      	ble.n	802207e <__kernel_rem_pio2+0x96>
 8022094:	eca8 7b02 	vstmia	r8!, {d7}
 8022098:	f10c 0c01 	add.w	ip, ip, #1
 802209c:	3208      	adds	r2, #8
 802209e:	e7d6      	b.n	802204e <__kernel_rem_pio2+0x66>
 80220a0:	aa06      	add	r2, sp, #24
 80220a2:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80222f8 <__kernel_rem_pio2+0x310>
 80220a6:	ed9f ab96 	vldr	d10, [pc, #600]	; 8022300 <__kernel_rem_pio2+0x318>
 80220aa:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 80220ae:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80220b2:	9204      	str	r2, [sp, #16]
 80220b4:	9303      	str	r3, [sp, #12]
 80220b6:	464d      	mov	r5, r9
 80220b8:	00eb      	lsls	r3, r5, #3
 80220ba:	9305      	str	r3, [sp, #20]
 80220bc:	ab92      	add	r3, sp, #584	; 0x248
 80220be:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80220c2:	f10d 0b18 	add.w	fp, sp, #24
 80220c6:	ab6a      	add	r3, sp, #424	; 0x1a8
 80220c8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 80220cc:	465e      	mov	r6, fp
 80220ce:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 80220d2:	4628      	mov	r0, r5
 80220d4:	2800      	cmp	r0, #0
 80220d6:	f1a2 0208 	sub.w	r2, r2, #8
 80220da:	dc48      	bgt.n	802216e <__kernel_rem_pio2+0x186>
 80220dc:	4620      	mov	r0, r4
 80220de:	f000 fa17 	bl	8022510 <scalbn>
 80220e2:	eeb0 8b40 	vmov.f64	d8, d0
 80220e6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 80220ea:	ee28 0b00 	vmul.f64	d0, d8, d0
 80220ee:	f000 fa8f 	bl	8022610 <floor>
 80220f2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 80220f6:	eea0 8b47 	vfms.f64	d8, d0, d7
 80220fa:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 80220fe:	2c00      	cmp	r4, #0
 8022100:	ee17 8a90 	vmov	r8, s15
 8022104:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8022108:	ee38 8b47 	vsub.f64	d8, d8, d7
 802210c:	dd41      	ble.n	8022192 <__kernel_rem_pio2+0x1aa>
 802210e:	1e68      	subs	r0, r5, #1
 8022110:	ab06      	add	r3, sp, #24
 8022112:	f1c4 0c18 	rsb	ip, r4, #24
 8022116:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 802211a:	fa46 f20c 	asr.w	r2, r6, ip
 802211e:	4490      	add	r8, r2
 8022120:	fa02 f20c 	lsl.w	r2, r2, ip
 8022124:	1ab6      	subs	r6, r6, r2
 8022126:	f1c4 0217 	rsb	r2, r4, #23
 802212a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 802212e:	4116      	asrs	r6, r2
 8022130:	2e00      	cmp	r6, #0
 8022132:	dd3d      	ble.n	80221b0 <__kernel_rem_pio2+0x1c8>
 8022134:	f04f 0c00 	mov.w	ip, #0
 8022138:	f108 0801 	add.w	r8, r8, #1
 802213c:	4660      	mov	r0, ip
 802213e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8022142:	4565      	cmp	r5, ip
 8022144:	dc6a      	bgt.n	802221c <__kernel_rem_pio2+0x234>
 8022146:	2c00      	cmp	r4, #0
 8022148:	dd04      	ble.n	8022154 <__kernel_rem_pio2+0x16c>
 802214a:	2c01      	cmp	r4, #1
 802214c:	d07b      	beq.n	8022246 <__kernel_rem_pio2+0x25e>
 802214e:	2c02      	cmp	r4, #2
 8022150:	f000 8083 	beq.w	802225a <__kernel_rem_pio2+0x272>
 8022154:	2e02      	cmp	r6, #2
 8022156:	d12b      	bne.n	80221b0 <__kernel_rem_pio2+0x1c8>
 8022158:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 802215c:	ee30 8b48 	vsub.f64	d8, d0, d8
 8022160:	b330      	cbz	r0, 80221b0 <__kernel_rem_pio2+0x1c8>
 8022162:	4620      	mov	r0, r4
 8022164:	f000 f9d4 	bl	8022510 <scalbn>
 8022168:	ee38 8b40 	vsub.f64	d8, d8, d0
 802216c:	e020      	b.n	80221b0 <__kernel_rem_pio2+0x1c8>
 802216e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8022172:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8022176:	3801      	subs	r0, #1
 8022178:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 802217c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8022180:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8022184:	eca6 0a01 	vstmia	r6!, {s0}
 8022188:	ed92 0b00 	vldr	d0, [r2]
 802218c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8022190:	e7a0      	b.n	80220d4 <__kernel_rem_pio2+0xec>
 8022192:	d105      	bne.n	80221a0 <__kernel_rem_pio2+0x1b8>
 8022194:	1e6a      	subs	r2, r5, #1
 8022196:	ab06      	add	r3, sp, #24
 8022198:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 802219c:	15f6      	asrs	r6, r6, #23
 802219e:	e7c7      	b.n	8022130 <__kernel_rem_pio2+0x148>
 80221a0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80221a4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80221a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221ac:	da34      	bge.n	8022218 <__kernel_rem_pio2+0x230>
 80221ae:	2600      	movs	r6, #0
 80221b0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80221b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80221b8:	f040 80aa 	bne.w	8022310 <__kernel_rem_pio2+0x328>
 80221bc:	f105 3bff 	add.w	fp, r5, #4294967295
 80221c0:	4658      	mov	r0, fp
 80221c2:	2200      	movs	r2, #0
 80221c4:	4548      	cmp	r0, r9
 80221c6:	da50      	bge.n	802226a <__kernel_rem_pio2+0x282>
 80221c8:	2a00      	cmp	r2, #0
 80221ca:	d06b      	beq.n	80222a4 <__kernel_rem_pio2+0x2bc>
 80221cc:	ab06      	add	r3, sp, #24
 80221ce:	3c18      	subs	r4, #24
 80221d0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80221d4:	2b00      	cmp	r3, #0
 80221d6:	f000 8087 	beq.w	80222e8 <__kernel_rem_pio2+0x300>
 80221da:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80221de:	4620      	mov	r0, r4
 80221e0:	f000 f996 	bl	8022510 <scalbn>
 80221e4:	ed9f 6b44 	vldr	d6, [pc, #272]	; 80222f8 <__kernel_rem_pio2+0x310>
 80221e8:	f10b 0201 	add.w	r2, fp, #1
 80221ec:	a96a      	add	r1, sp, #424	; 0x1a8
 80221ee:	00d3      	lsls	r3, r2, #3
 80221f0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80221f4:	465a      	mov	r2, fp
 80221f6:	2a00      	cmp	r2, #0
 80221f8:	f280 80b8 	bge.w	802236c <__kernel_rem_pio2+0x384>
 80221fc:	465a      	mov	r2, fp
 80221fe:	2a00      	cmp	r2, #0
 8022200:	f2c0 80d6 	blt.w	80223b0 <__kernel_rem_pio2+0x3c8>
 8022204:	a96a      	add	r1, sp, #424	; 0x1a8
 8022206:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 802220a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 80222f0 <__kernel_rem_pio2+0x308>
 802220e:	4d3f      	ldr	r5, [pc, #252]	; (802230c <__kernel_rem_pio2+0x324>)
 8022210:	2000      	movs	r0, #0
 8022212:	ebab 0102 	sub.w	r1, fp, r2
 8022216:	e0c0      	b.n	802239a <__kernel_rem_pio2+0x3b2>
 8022218:	2602      	movs	r6, #2
 802221a:	e78b      	b.n	8022134 <__kernel_rem_pio2+0x14c>
 802221c:	f8db 2000 	ldr.w	r2, [fp]
 8022220:	b958      	cbnz	r0, 802223a <__kernel_rem_pio2+0x252>
 8022222:	b122      	cbz	r2, 802222e <__kernel_rem_pio2+0x246>
 8022224:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8022228:	f8cb 2000 	str.w	r2, [fp]
 802222c:	2201      	movs	r2, #1
 802222e:	f10c 0c01 	add.w	ip, ip, #1
 8022232:	f10b 0b04 	add.w	fp, fp, #4
 8022236:	4610      	mov	r0, r2
 8022238:	e783      	b.n	8022142 <__kernel_rem_pio2+0x15a>
 802223a:	ebae 0202 	sub.w	r2, lr, r2
 802223e:	f8cb 2000 	str.w	r2, [fp]
 8022242:	4602      	mov	r2, r0
 8022244:	e7f3      	b.n	802222e <__kernel_rem_pio2+0x246>
 8022246:	f105 3cff 	add.w	ip, r5, #4294967295
 802224a:	ab06      	add	r3, sp, #24
 802224c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8022250:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8022254:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8022258:	e77c      	b.n	8022154 <__kernel_rem_pio2+0x16c>
 802225a:	f105 3cff 	add.w	ip, r5, #4294967295
 802225e:	ab06      	add	r3, sp, #24
 8022260:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8022264:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8022268:	e7f4      	b.n	8022254 <__kernel_rem_pio2+0x26c>
 802226a:	ab06      	add	r3, sp, #24
 802226c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8022270:	3801      	subs	r0, #1
 8022272:	431a      	orrs	r2, r3
 8022274:	e7a6      	b.n	80221c4 <__kernel_rem_pio2+0x1dc>
 8022276:	3201      	adds	r2, #1
 8022278:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 802227c:	2e00      	cmp	r6, #0
 802227e:	d0fa      	beq.n	8022276 <__kernel_rem_pio2+0x28e>
 8022280:	9b05      	ldr	r3, [sp, #20]
 8022282:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8022286:	eb0d 0003 	add.w	r0, sp, r3
 802228a:	9b01      	ldr	r3, [sp, #4]
 802228c:	18ee      	adds	r6, r5, r3
 802228e:	ab1a      	add	r3, sp, #104	; 0x68
 8022290:	f105 0c01 	add.w	ip, r5, #1
 8022294:	3898      	subs	r0, #152	; 0x98
 8022296:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 802229a:	442a      	add	r2, r5
 802229c:	4562      	cmp	r2, ip
 802229e:	da04      	bge.n	80222aa <__kernel_rem_pio2+0x2c2>
 80222a0:	4615      	mov	r5, r2
 80222a2:	e709      	b.n	80220b8 <__kernel_rem_pio2+0xd0>
 80222a4:	9804      	ldr	r0, [sp, #16]
 80222a6:	2201      	movs	r2, #1
 80222a8:	e7e6      	b.n	8022278 <__kernel_rem_pio2+0x290>
 80222aa:	9b03      	ldr	r3, [sp, #12]
 80222ac:	f8dd e008 	ldr.w	lr, [sp, #8]
 80222b0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80222b4:	9305      	str	r3, [sp, #20]
 80222b6:	ee07 3a90 	vmov	s15, r3
 80222ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80222be:	2500      	movs	r5, #0
 80222c0:	eca6 7b02 	vstmia	r6!, {d7}
 80222c4:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80222f0 <__kernel_rem_pio2+0x308>
 80222c8:	46b0      	mov	r8, r6
 80222ca:	4555      	cmp	r5, sl
 80222cc:	dd04      	ble.n	80222d8 <__kernel_rem_pio2+0x2f0>
 80222ce:	eca0 7b02 	vstmia	r0!, {d7}
 80222d2:	f10c 0c01 	add.w	ip, ip, #1
 80222d6:	e7e1      	b.n	802229c <__kernel_rem_pio2+0x2b4>
 80222d8:	ecbe 5b02 	vldmia	lr!, {d5}
 80222dc:	ed38 6b02 	vldmdb	r8!, {d6}
 80222e0:	3501      	adds	r5, #1
 80222e2:	eea5 7b06 	vfma.f64	d7, d5, d6
 80222e6:	e7f0      	b.n	80222ca <__kernel_rem_pio2+0x2e2>
 80222e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80222ec:	e76e      	b.n	80221cc <__kernel_rem_pio2+0x1e4>
 80222ee:	bf00      	nop
	...
 80222fc:	3e700000 	.word	0x3e700000
 8022300:	00000000 	.word	0x00000000
 8022304:	41700000 	.word	0x41700000
 8022308:	080263c8 	.word	0x080263c8
 802230c:	08026388 	.word	0x08026388
 8022310:	4260      	negs	r0, r4
 8022312:	eeb0 0b48 	vmov.f64	d0, d8
 8022316:	f000 f8fb 	bl	8022510 <scalbn>
 802231a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80224f8 <__kernel_rem_pio2+0x510>
 802231e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8022322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022326:	db18      	blt.n	802235a <__kernel_rem_pio2+0x372>
 8022328:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8022500 <__kernel_rem_pio2+0x518>
 802232c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8022330:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8022334:	aa06      	add	r2, sp, #24
 8022336:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 802233a:	eea5 0b46 	vfms.f64	d0, d5, d6
 802233e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8022342:	f105 0b01 	add.w	fp, r5, #1
 8022346:	ee10 3a10 	vmov	r3, s0
 802234a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802234e:	ee17 3a10 	vmov	r3, s14
 8022352:	3418      	adds	r4, #24
 8022354:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8022358:	e73f      	b.n	80221da <__kernel_rem_pio2+0x1f2>
 802235a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 802235e:	aa06      	add	r2, sp, #24
 8022360:	ee10 3a10 	vmov	r3, s0
 8022364:	46ab      	mov	fp, r5
 8022366:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 802236a:	e736      	b.n	80221da <__kernel_rem_pio2+0x1f2>
 802236c:	a806      	add	r0, sp, #24
 802236e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8022372:	9001      	str	r0, [sp, #4]
 8022374:	ee07 0a90 	vmov	s15, r0
 8022378:	3a01      	subs	r2, #1
 802237a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802237e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8022382:	ee20 0b06 	vmul.f64	d0, d0, d6
 8022386:	ed21 7b02 	vstmdb	r1!, {d7}
 802238a:	e734      	b.n	80221f6 <__kernel_rem_pio2+0x20e>
 802238c:	ecb5 5b02 	vldmia	r5!, {d5}
 8022390:	ecb4 6b02 	vldmia	r4!, {d6}
 8022394:	3001      	adds	r0, #1
 8022396:	eea5 7b06 	vfma.f64	d7, d5, d6
 802239a:	4548      	cmp	r0, r9
 802239c:	dc01      	bgt.n	80223a2 <__kernel_rem_pio2+0x3ba>
 802239e:	4288      	cmp	r0, r1
 80223a0:	ddf4      	ble.n	802238c <__kernel_rem_pio2+0x3a4>
 80223a2:	a842      	add	r0, sp, #264	; 0x108
 80223a4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80223a8:	ed81 7b00 	vstr	d7, [r1]
 80223ac:	3a01      	subs	r2, #1
 80223ae:	e726      	b.n	80221fe <__kernel_rem_pio2+0x216>
 80223b0:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80223b2:	2a02      	cmp	r2, #2
 80223b4:	dc0a      	bgt.n	80223cc <__kernel_rem_pio2+0x3e4>
 80223b6:	2a00      	cmp	r2, #0
 80223b8:	dc2e      	bgt.n	8022418 <__kernel_rem_pio2+0x430>
 80223ba:	d047      	beq.n	802244c <__kernel_rem_pio2+0x464>
 80223bc:	f008 0007 	and.w	r0, r8, #7
 80223c0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80223c4:	ecbd 8b06 	vpop	{d8-d10}
 80223c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80223cc:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80223ce:	2a03      	cmp	r2, #3
 80223d0:	d1f4      	bne.n	80223bc <__kernel_rem_pio2+0x3d4>
 80223d2:	a942      	add	r1, sp, #264	; 0x108
 80223d4:	f1a3 0208 	sub.w	r2, r3, #8
 80223d8:	440a      	add	r2, r1
 80223da:	4611      	mov	r1, r2
 80223dc:	4658      	mov	r0, fp
 80223de:	2800      	cmp	r0, #0
 80223e0:	f1a1 0108 	sub.w	r1, r1, #8
 80223e4:	dc55      	bgt.n	8022492 <__kernel_rem_pio2+0x4aa>
 80223e6:	4659      	mov	r1, fp
 80223e8:	2901      	cmp	r1, #1
 80223ea:	f1a2 0208 	sub.w	r2, r2, #8
 80223ee:	dc60      	bgt.n	80224b2 <__kernel_rem_pio2+0x4ca>
 80223f0:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8022508 <__kernel_rem_pio2+0x520>
 80223f4:	aa42      	add	r2, sp, #264	; 0x108
 80223f6:	4413      	add	r3, r2
 80223f8:	f1bb 0f01 	cmp.w	fp, #1
 80223fc:	dc69      	bgt.n	80224d2 <__kernel_rem_pio2+0x4ea>
 80223fe:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8022402:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8022406:	2e00      	cmp	r6, #0
 8022408:	d16a      	bne.n	80224e0 <__kernel_rem_pio2+0x4f8>
 802240a:	ed87 5b00 	vstr	d5, [r7]
 802240e:	ed87 6b02 	vstr	d6, [r7, #8]
 8022412:	ed87 7b04 	vstr	d7, [r7, #16]
 8022416:	e7d1      	b.n	80223bc <__kernel_rem_pio2+0x3d4>
 8022418:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8022508 <__kernel_rem_pio2+0x520>
 802241c:	aa42      	add	r2, sp, #264	; 0x108
 802241e:	4413      	add	r3, r2
 8022420:	465a      	mov	r2, fp
 8022422:	2a00      	cmp	r2, #0
 8022424:	da26      	bge.n	8022474 <__kernel_rem_pio2+0x48c>
 8022426:	b35e      	cbz	r6, 8022480 <__kernel_rem_pio2+0x498>
 8022428:	eeb1 7b46 	vneg.f64	d7, d6
 802242c:	ed87 7b00 	vstr	d7, [r7]
 8022430:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8022434:	aa44      	add	r2, sp, #272	; 0x110
 8022436:	2301      	movs	r3, #1
 8022438:	ee37 7b46 	vsub.f64	d7, d7, d6
 802243c:	459b      	cmp	fp, r3
 802243e:	da22      	bge.n	8022486 <__kernel_rem_pio2+0x49e>
 8022440:	b10e      	cbz	r6, 8022446 <__kernel_rem_pio2+0x45e>
 8022442:	eeb1 7b47 	vneg.f64	d7, d7
 8022446:	ed87 7b02 	vstr	d7, [r7, #8]
 802244a:	e7b7      	b.n	80223bc <__kernel_rem_pio2+0x3d4>
 802244c:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8022508 <__kernel_rem_pio2+0x520>
 8022450:	aa42      	add	r2, sp, #264	; 0x108
 8022452:	4413      	add	r3, r2
 8022454:	f1bb 0f00 	cmp.w	fp, #0
 8022458:	da05      	bge.n	8022466 <__kernel_rem_pio2+0x47e>
 802245a:	b10e      	cbz	r6, 8022460 <__kernel_rem_pio2+0x478>
 802245c:	eeb1 7b47 	vneg.f64	d7, d7
 8022460:	ed87 7b00 	vstr	d7, [r7]
 8022464:	e7aa      	b.n	80223bc <__kernel_rem_pio2+0x3d4>
 8022466:	ed33 6b02 	vldmdb	r3!, {d6}
 802246a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802246e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8022472:	e7ef      	b.n	8022454 <__kernel_rem_pio2+0x46c>
 8022474:	ed33 7b02 	vldmdb	r3!, {d7}
 8022478:	3a01      	subs	r2, #1
 802247a:	ee36 6b07 	vadd.f64	d6, d6, d7
 802247e:	e7d0      	b.n	8022422 <__kernel_rem_pio2+0x43a>
 8022480:	eeb0 7b46 	vmov.f64	d7, d6
 8022484:	e7d2      	b.n	802242c <__kernel_rem_pio2+0x444>
 8022486:	ecb2 6b02 	vldmia	r2!, {d6}
 802248a:	3301      	adds	r3, #1
 802248c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8022490:	e7d4      	b.n	802243c <__kernel_rem_pio2+0x454>
 8022492:	ed91 7b00 	vldr	d7, [r1]
 8022496:	ed91 5b02 	vldr	d5, [r1, #8]
 802249a:	3801      	subs	r0, #1
 802249c:	ee37 6b05 	vadd.f64	d6, d7, d5
 80224a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80224a4:	ed81 6b00 	vstr	d6, [r1]
 80224a8:	ee37 7b05 	vadd.f64	d7, d7, d5
 80224ac:	ed81 7b02 	vstr	d7, [r1, #8]
 80224b0:	e795      	b.n	80223de <__kernel_rem_pio2+0x3f6>
 80224b2:	ed92 7b00 	vldr	d7, [r2]
 80224b6:	ed92 5b02 	vldr	d5, [r2, #8]
 80224ba:	3901      	subs	r1, #1
 80224bc:	ee37 6b05 	vadd.f64	d6, d7, d5
 80224c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80224c4:	ed82 6b00 	vstr	d6, [r2]
 80224c8:	ee37 7b05 	vadd.f64	d7, d7, d5
 80224cc:	ed82 7b02 	vstr	d7, [r2, #8]
 80224d0:	e78a      	b.n	80223e8 <__kernel_rem_pio2+0x400>
 80224d2:	ed33 6b02 	vldmdb	r3!, {d6}
 80224d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80224da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80224de:	e78b      	b.n	80223f8 <__kernel_rem_pio2+0x410>
 80224e0:	eeb1 5b45 	vneg.f64	d5, d5
 80224e4:	eeb1 6b46 	vneg.f64	d6, d6
 80224e8:	ed87 5b00 	vstr	d5, [r7]
 80224ec:	eeb1 7b47 	vneg.f64	d7, d7
 80224f0:	ed87 6b02 	vstr	d6, [r7, #8]
 80224f4:	e78d      	b.n	8022412 <__kernel_rem_pio2+0x42a>
 80224f6:	bf00      	nop
 80224f8:	00000000 	.word	0x00000000
 80224fc:	41700000 	.word	0x41700000
 8022500:	00000000 	.word	0x00000000
 8022504:	3e700000 	.word	0x3e700000
	...

08022510 <scalbn>:
 8022510:	ee10 1a90 	vmov	r1, s1
 8022514:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8022518:	b98b      	cbnz	r3, 802253e <scalbn+0x2e>
 802251a:	ee10 3a10 	vmov	r3, s0
 802251e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8022522:	4319      	orrs	r1, r3
 8022524:	d00a      	beq.n	802253c <scalbn+0x2c>
 8022526:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80225d8 <scalbn+0xc8>
 802252a:	4b37      	ldr	r3, [pc, #220]	; (8022608 <scalbn+0xf8>)
 802252c:	ee20 0b07 	vmul.f64	d0, d0, d7
 8022530:	4298      	cmp	r0, r3
 8022532:	da0b      	bge.n	802254c <scalbn+0x3c>
 8022534:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 80225e0 <scalbn+0xd0>
 8022538:	ee20 0b07 	vmul.f64	d0, d0, d7
 802253c:	4770      	bx	lr
 802253e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8022542:	4293      	cmp	r3, r2
 8022544:	d107      	bne.n	8022556 <scalbn+0x46>
 8022546:	ee30 0b00 	vadd.f64	d0, d0, d0
 802254a:	4770      	bx	lr
 802254c:	ee10 1a90 	vmov	r1, s1
 8022550:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8022554:	3b36      	subs	r3, #54	; 0x36
 8022556:	f24c 3250 	movw	r2, #50000	; 0xc350
 802255a:	4290      	cmp	r0, r2
 802255c:	dd0d      	ble.n	802257a <scalbn+0x6a>
 802255e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80225e8 <scalbn+0xd8>
 8022562:	ee10 3a90 	vmov	r3, s1
 8022566:	eeb0 6b47 	vmov.f64	d6, d7
 802256a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80225f0 <scalbn+0xe0>
 802256e:	2b00      	cmp	r3, #0
 8022570:	fe27 7b05 	vselge.f64	d7, d7, d5
 8022574:	ee27 0b06 	vmul.f64	d0, d7, d6
 8022578:	4770      	bx	lr
 802257a:	4418      	add	r0, r3
 802257c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8022580:	4298      	cmp	r0, r3
 8022582:	dcec      	bgt.n	802255e <scalbn+0x4e>
 8022584:	2800      	cmp	r0, #0
 8022586:	dd0a      	ble.n	802259e <scalbn+0x8e>
 8022588:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 802258c:	ec53 2b10 	vmov	r2, r3, d0
 8022590:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8022594:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8022598:	ec43 2b10 	vmov	d0, r2, r3
 802259c:	4770      	bx	lr
 802259e:	f110 0f35 	cmn.w	r0, #53	; 0x35
 80225a2:	da09      	bge.n	80225b8 <scalbn+0xa8>
 80225a4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80225e0 <scalbn+0xd0>
 80225a8:	ee10 3a90 	vmov	r3, s1
 80225ac:	eeb0 6b47 	vmov.f64	d6, d7
 80225b0:	ed9f 5b11 	vldr	d5, [pc, #68]	; 80225f8 <scalbn+0xe8>
 80225b4:	2b00      	cmp	r3, #0
 80225b6:	e7db      	b.n	8022570 <scalbn+0x60>
 80225b8:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80225bc:	ec53 2b10 	vmov	r2, r3, d0
 80225c0:	3036      	adds	r0, #54	; 0x36
 80225c2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80225c6:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80225ca:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8022600 <scalbn+0xf0>
 80225ce:	ec43 2b10 	vmov	d0, r2, r3
 80225d2:	e7b1      	b.n	8022538 <scalbn+0x28>
 80225d4:	f3af 8000 	nop.w
 80225d8:	00000000 	.word	0x00000000
 80225dc:	43500000 	.word	0x43500000
 80225e0:	c2f8f359 	.word	0xc2f8f359
 80225e4:	01a56e1f 	.word	0x01a56e1f
 80225e8:	8800759c 	.word	0x8800759c
 80225ec:	7e37e43c 	.word	0x7e37e43c
 80225f0:	8800759c 	.word	0x8800759c
 80225f4:	fe37e43c 	.word	0xfe37e43c
 80225f8:	c2f8f359 	.word	0xc2f8f359
 80225fc:	81a56e1f 	.word	0x81a56e1f
 8022600:	00000000 	.word	0x00000000
 8022604:	3c900000 	.word	0x3c900000
 8022608:	ffff3cb0 	.word	0xffff3cb0
 802260c:	00000000 	.word	0x00000000

08022610 <floor>:
 8022610:	ee10 1a90 	vmov	r1, s1
 8022614:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8022618:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 802261c:	2b13      	cmp	r3, #19
 802261e:	b530      	push	{r4, r5, lr}
 8022620:	ee10 0a10 	vmov	r0, s0
 8022624:	ee10 5a10 	vmov	r5, s0
 8022628:	dc31      	bgt.n	802268e <floor+0x7e>
 802262a:	2b00      	cmp	r3, #0
 802262c:	da15      	bge.n	802265a <floor+0x4a>
 802262e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 80226f0 <floor+0xe0>
 8022632:	ee30 0b07 	vadd.f64	d0, d0, d7
 8022636:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 802263a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802263e:	dd07      	ble.n	8022650 <floor+0x40>
 8022640:	2900      	cmp	r1, #0
 8022642:	da4e      	bge.n	80226e2 <floor+0xd2>
 8022644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8022648:	4308      	orrs	r0, r1
 802264a:	d04d      	beq.n	80226e8 <floor+0xd8>
 802264c:	492a      	ldr	r1, [pc, #168]	; (80226f8 <floor+0xe8>)
 802264e:	2000      	movs	r0, #0
 8022650:	460b      	mov	r3, r1
 8022652:	4602      	mov	r2, r0
 8022654:	ec43 2b10 	vmov	d0, r2, r3
 8022658:	e020      	b.n	802269c <floor+0x8c>
 802265a:	4a28      	ldr	r2, [pc, #160]	; (80226fc <floor+0xec>)
 802265c:	411a      	asrs	r2, r3
 802265e:	ea01 0402 	and.w	r4, r1, r2
 8022662:	4304      	orrs	r4, r0
 8022664:	d01a      	beq.n	802269c <floor+0x8c>
 8022666:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80226f0 <floor+0xe0>
 802266a:	ee30 0b07 	vadd.f64	d0, d0, d7
 802266e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8022672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022676:	ddeb      	ble.n	8022650 <floor+0x40>
 8022678:	2900      	cmp	r1, #0
 802267a:	bfbe      	ittt	lt
 802267c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8022680:	fa40 f303 	asrlt.w	r3, r0, r3
 8022684:	18c9      	addlt	r1, r1, r3
 8022686:	ea21 0102 	bic.w	r1, r1, r2
 802268a:	2000      	movs	r0, #0
 802268c:	e7e0      	b.n	8022650 <floor+0x40>
 802268e:	2b33      	cmp	r3, #51	; 0x33
 8022690:	dd05      	ble.n	802269e <floor+0x8e>
 8022692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8022696:	d101      	bne.n	802269c <floor+0x8c>
 8022698:	ee30 0b00 	vadd.f64	d0, d0, d0
 802269c:	bd30      	pop	{r4, r5, pc}
 802269e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80226a2:	f04f 32ff 	mov.w	r2, #4294967295
 80226a6:	40e2      	lsrs	r2, r4
 80226a8:	4210      	tst	r0, r2
 80226aa:	d0f7      	beq.n	802269c <floor+0x8c>
 80226ac:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80226f0 <floor+0xe0>
 80226b0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80226b4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80226b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80226bc:	ddc8      	ble.n	8022650 <floor+0x40>
 80226be:	2900      	cmp	r1, #0
 80226c0:	da02      	bge.n	80226c8 <floor+0xb8>
 80226c2:	2b14      	cmp	r3, #20
 80226c4:	d103      	bne.n	80226ce <floor+0xbe>
 80226c6:	3101      	adds	r1, #1
 80226c8:	ea20 0002 	bic.w	r0, r0, r2
 80226cc:	e7c0      	b.n	8022650 <floor+0x40>
 80226ce:	2401      	movs	r4, #1
 80226d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80226d4:	fa04 f303 	lsl.w	r3, r4, r3
 80226d8:	4418      	add	r0, r3
 80226da:	4285      	cmp	r5, r0
 80226dc:	bf88      	it	hi
 80226de:	1909      	addhi	r1, r1, r4
 80226e0:	e7f2      	b.n	80226c8 <floor+0xb8>
 80226e2:	2000      	movs	r0, #0
 80226e4:	4601      	mov	r1, r0
 80226e6:	e7b3      	b.n	8022650 <floor+0x40>
 80226e8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80226ec:	e7b0      	b.n	8022650 <floor+0x40>
 80226ee:	bf00      	nop
 80226f0:	8800759c 	.word	0x8800759c
 80226f4:	7e37e43c 	.word	0x7e37e43c
 80226f8:	bff00000 	.word	0xbff00000
 80226fc:	000fffff 	.word	0x000fffff

08022700 <__assert_func>:
 8022700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022702:	4614      	mov	r4, r2
 8022704:	461a      	mov	r2, r3
 8022706:	4b09      	ldr	r3, [pc, #36]	; (802272c <__assert_func+0x2c>)
 8022708:	681b      	ldr	r3, [r3, #0]
 802270a:	4605      	mov	r5, r0
 802270c:	68d8      	ldr	r0, [r3, #12]
 802270e:	b14c      	cbz	r4, 8022724 <__assert_func+0x24>
 8022710:	4b07      	ldr	r3, [pc, #28]	; (8022730 <__assert_func+0x30>)
 8022712:	9100      	str	r1, [sp, #0]
 8022714:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022718:	4906      	ldr	r1, [pc, #24]	; (8022734 <__assert_func+0x34>)
 802271a:	462b      	mov	r3, r5
 802271c:	f000 fcee 	bl	80230fc <fiprintf>
 8022720:	f000 fe5d 	bl	80233de <abort>
 8022724:	4b04      	ldr	r3, [pc, #16]	; (8022738 <__assert_func+0x38>)
 8022726:	461c      	mov	r4, r3
 8022728:	e7f3      	b.n	8022712 <__assert_func+0x12>
 802272a:	bf00      	nop
 802272c:	240000b4 	.word	0x240000b4
 8022730:	080263d8 	.word	0x080263d8
 8022734:	080263e5 	.word	0x080263e5
 8022738:	08026413 	.word	0x08026413

0802273c <__cvt>:
 802273c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802273e:	ed2d 8b02 	vpush	{d8}
 8022742:	eeb0 8b40 	vmov.f64	d8, d0
 8022746:	b085      	sub	sp, #20
 8022748:	4617      	mov	r7, r2
 802274a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802274c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 802274e:	ee18 2a90 	vmov	r2, s17
 8022752:	f025 0520 	bic.w	r5, r5, #32
 8022756:	2a00      	cmp	r2, #0
 8022758:	bfb6      	itet	lt
 802275a:	222d      	movlt	r2, #45	; 0x2d
 802275c:	2200      	movge	r2, #0
 802275e:	eeb1 8b40 	vneglt.f64	d8, d0
 8022762:	2d46      	cmp	r5, #70	; 0x46
 8022764:	460c      	mov	r4, r1
 8022766:	701a      	strb	r2, [r3, #0]
 8022768:	d004      	beq.n	8022774 <__cvt+0x38>
 802276a:	2d45      	cmp	r5, #69	; 0x45
 802276c:	d100      	bne.n	8022770 <__cvt+0x34>
 802276e:	3401      	adds	r4, #1
 8022770:	2102      	movs	r1, #2
 8022772:	e000      	b.n	8022776 <__cvt+0x3a>
 8022774:	2103      	movs	r1, #3
 8022776:	ab03      	add	r3, sp, #12
 8022778:	9301      	str	r3, [sp, #4]
 802277a:	ab02      	add	r3, sp, #8
 802277c:	9300      	str	r3, [sp, #0]
 802277e:	4622      	mov	r2, r4
 8022780:	4633      	mov	r3, r6
 8022782:	eeb0 0b48 	vmov.f64	d0, d8
 8022786:	f000 febb 	bl	8023500 <_dtoa_r>
 802278a:	2d47      	cmp	r5, #71	; 0x47
 802278c:	d101      	bne.n	8022792 <__cvt+0x56>
 802278e:	07fb      	lsls	r3, r7, #31
 8022790:	d51a      	bpl.n	80227c8 <__cvt+0x8c>
 8022792:	2d46      	cmp	r5, #70	; 0x46
 8022794:	eb00 0204 	add.w	r2, r0, r4
 8022798:	d10c      	bne.n	80227b4 <__cvt+0x78>
 802279a:	7803      	ldrb	r3, [r0, #0]
 802279c:	2b30      	cmp	r3, #48	; 0x30
 802279e:	d107      	bne.n	80227b0 <__cvt+0x74>
 80227a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80227a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227a8:	bf1c      	itt	ne
 80227aa:	f1c4 0401 	rsbne	r4, r4, #1
 80227ae:	6034      	strne	r4, [r6, #0]
 80227b0:	6833      	ldr	r3, [r6, #0]
 80227b2:	441a      	add	r2, r3
 80227b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80227b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80227bc:	bf08      	it	eq
 80227be:	9203      	streq	r2, [sp, #12]
 80227c0:	2130      	movs	r1, #48	; 0x30
 80227c2:	9b03      	ldr	r3, [sp, #12]
 80227c4:	4293      	cmp	r3, r2
 80227c6:	d307      	bcc.n	80227d8 <__cvt+0x9c>
 80227c8:	9b03      	ldr	r3, [sp, #12]
 80227ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80227cc:	1a1b      	subs	r3, r3, r0
 80227ce:	6013      	str	r3, [r2, #0]
 80227d0:	b005      	add	sp, #20
 80227d2:	ecbd 8b02 	vpop	{d8}
 80227d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80227d8:	1c5c      	adds	r4, r3, #1
 80227da:	9403      	str	r4, [sp, #12]
 80227dc:	7019      	strb	r1, [r3, #0]
 80227de:	e7f0      	b.n	80227c2 <__cvt+0x86>

080227e0 <__exponent>:
 80227e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80227e2:	4603      	mov	r3, r0
 80227e4:	2900      	cmp	r1, #0
 80227e6:	bfb8      	it	lt
 80227e8:	4249      	neglt	r1, r1
 80227ea:	f803 2b02 	strb.w	r2, [r3], #2
 80227ee:	bfb4      	ite	lt
 80227f0:	222d      	movlt	r2, #45	; 0x2d
 80227f2:	222b      	movge	r2, #43	; 0x2b
 80227f4:	2909      	cmp	r1, #9
 80227f6:	7042      	strb	r2, [r0, #1]
 80227f8:	dd2a      	ble.n	8022850 <__exponent+0x70>
 80227fa:	f10d 0207 	add.w	r2, sp, #7
 80227fe:	4617      	mov	r7, r2
 8022800:	260a      	movs	r6, #10
 8022802:	4694      	mov	ip, r2
 8022804:	fb91 f5f6 	sdiv	r5, r1, r6
 8022808:	fb06 1415 	mls	r4, r6, r5, r1
 802280c:	3430      	adds	r4, #48	; 0x30
 802280e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8022812:	460c      	mov	r4, r1
 8022814:	2c63      	cmp	r4, #99	; 0x63
 8022816:	f102 32ff 	add.w	r2, r2, #4294967295
 802281a:	4629      	mov	r1, r5
 802281c:	dcf1      	bgt.n	8022802 <__exponent+0x22>
 802281e:	3130      	adds	r1, #48	; 0x30
 8022820:	f1ac 0402 	sub.w	r4, ip, #2
 8022824:	f802 1c01 	strb.w	r1, [r2, #-1]
 8022828:	1c41      	adds	r1, r0, #1
 802282a:	4622      	mov	r2, r4
 802282c:	42ba      	cmp	r2, r7
 802282e:	d30a      	bcc.n	8022846 <__exponent+0x66>
 8022830:	f10d 0209 	add.w	r2, sp, #9
 8022834:	eba2 020c 	sub.w	r2, r2, ip
 8022838:	42bc      	cmp	r4, r7
 802283a:	bf88      	it	hi
 802283c:	2200      	movhi	r2, #0
 802283e:	4413      	add	r3, r2
 8022840:	1a18      	subs	r0, r3, r0
 8022842:	b003      	add	sp, #12
 8022844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022846:	f812 5b01 	ldrb.w	r5, [r2], #1
 802284a:	f801 5f01 	strb.w	r5, [r1, #1]!
 802284e:	e7ed      	b.n	802282c <__exponent+0x4c>
 8022850:	2330      	movs	r3, #48	; 0x30
 8022852:	3130      	adds	r1, #48	; 0x30
 8022854:	7083      	strb	r3, [r0, #2]
 8022856:	70c1      	strb	r1, [r0, #3]
 8022858:	1d03      	adds	r3, r0, #4
 802285a:	e7f1      	b.n	8022840 <__exponent+0x60>
 802285c:	0000      	movs	r0, r0
	...

08022860 <_printf_float>:
 8022860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022864:	b08b      	sub	sp, #44	; 0x2c
 8022866:	460c      	mov	r4, r1
 8022868:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802286c:	4616      	mov	r6, r2
 802286e:	461f      	mov	r7, r3
 8022870:	4605      	mov	r5, r0
 8022872:	f000 fcd9 	bl	8023228 <_localeconv_r>
 8022876:	f8d0 b000 	ldr.w	fp, [r0]
 802287a:	4658      	mov	r0, fp
 802287c:	f7dd fd80 	bl	8000380 <strlen>
 8022880:	2300      	movs	r3, #0
 8022882:	9308      	str	r3, [sp, #32]
 8022884:	f8d8 3000 	ldr.w	r3, [r8]
 8022888:	f894 9018 	ldrb.w	r9, [r4, #24]
 802288c:	6822      	ldr	r2, [r4, #0]
 802288e:	3307      	adds	r3, #7
 8022890:	f023 0307 	bic.w	r3, r3, #7
 8022894:	f103 0108 	add.w	r1, r3, #8
 8022898:	f8c8 1000 	str.w	r1, [r8]
 802289c:	ed93 0b00 	vldr	d0, [r3]
 80228a0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8022b00 <_printf_float+0x2a0>
 80228a4:	eeb0 7bc0 	vabs.f64	d7, d0
 80228a8:	eeb4 7b46 	vcmp.f64	d7, d6
 80228ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228b0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80228b4:	4682      	mov	sl, r0
 80228b6:	dd24      	ble.n	8022902 <_printf_float+0xa2>
 80228b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80228bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228c0:	d502      	bpl.n	80228c8 <_printf_float+0x68>
 80228c2:	232d      	movs	r3, #45	; 0x2d
 80228c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80228c8:	498f      	ldr	r1, [pc, #572]	; (8022b08 <_printf_float+0x2a8>)
 80228ca:	4b90      	ldr	r3, [pc, #576]	; (8022b0c <_printf_float+0x2ac>)
 80228cc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80228d0:	bf94      	ite	ls
 80228d2:	4688      	movls	r8, r1
 80228d4:	4698      	movhi	r8, r3
 80228d6:	2303      	movs	r3, #3
 80228d8:	6123      	str	r3, [r4, #16]
 80228da:	f022 0204 	bic.w	r2, r2, #4
 80228de:	2300      	movs	r3, #0
 80228e0:	6022      	str	r2, [r4, #0]
 80228e2:	9304      	str	r3, [sp, #16]
 80228e4:	9700      	str	r7, [sp, #0]
 80228e6:	4633      	mov	r3, r6
 80228e8:	aa09      	add	r2, sp, #36	; 0x24
 80228ea:	4621      	mov	r1, r4
 80228ec:	4628      	mov	r0, r5
 80228ee:	f000 f9d1 	bl	8022c94 <_printf_common>
 80228f2:	3001      	adds	r0, #1
 80228f4:	f040 808a 	bne.w	8022a0c <_printf_float+0x1ac>
 80228f8:	f04f 30ff 	mov.w	r0, #4294967295
 80228fc:	b00b      	add	sp, #44	; 0x2c
 80228fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022902:	eeb4 0b40 	vcmp.f64	d0, d0
 8022906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802290a:	d709      	bvc.n	8022920 <_printf_float+0xc0>
 802290c:	ee10 3a90 	vmov	r3, s1
 8022910:	2b00      	cmp	r3, #0
 8022912:	bfbc      	itt	lt
 8022914:	232d      	movlt	r3, #45	; 0x2d
 8022916:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802291a:	497d      	ldr	r1, [pc, #500]	; (8022b10 <_printf_float+0x2b0>)
 802291c:	4b7d      	ldr	r3, [pc, #500]	; (8022b14 <_printf_float+0x2b4>)
 802291e:	e7d5      	b.n	80228cc <_printf_float+0x6c>
 8022920:	6863      	ldr	r3, [r4, #4]
 8022922:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8022926:	9104      	str	r1, [sp, #16]
 8022928:	1c59      	adds	r1, r3, #1
 802292a:	d13c      	bne.n	80229a6 <_printf_float+0x146>
 802292c:	2306      	movs	r3, #6
 802292e:	6063      	str	r3, [r4, #4]
 8022930:	2300      	movs	r3, #0
 8022932:	9303      	str	r3, [sp, #12]
 8022934:	ab08      	add	r3, sp, #32
 8022936:	e9cd 9301 	strd	r9, r3, [sp, #4]
 802293a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 802293e:	ab07      	add	r3, sp, #28
 8022940:	6861      	ldr	r1, [r4, #4]
 8022942:	9300      	str	r3, [sp, #0]
 8022944:	6022      	str	r2, [r4, #0]
 8022946:	f10d 031b 	add.w	r3, sp, #27
 802294a:	4628      	mov	r0, r5
 802294c:	f7ff fef6 	bl	802273c <__cvt>
 8022950:	9b04      	ldr	r3, [sp, #16]
 8022952:	9907      	ldr	r1, [sp, #28]
 8022954:	2b47      	cmp	r3, #71	; 0x47
 8022956:	4680      	mov	r8, r0
 8022958:	d108      	bne.n	802296c <_printf_float+0x10c>
 802295a:	1cc8      	adds	r0, r1, #3
 802295c:	db02      	blt.n	8022964 <_printf_float+0x104>
 802295e:	6863      	ldr	r3, [r4, #4]
 8022960:	4299      	cmp	r1, r3
 8022962:	dd41      	ble.n	80229e8 <_printf_float+0x188>
 8022964:	f1a9 0902 	sub.w	r9, r9, #2
 8022968:	fa5f f989 	uxtb.w	r9, r9
 802296c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8022970:	d820      	bhi.n	80229b4 <_printf_float+0x154>
 8022972:	3901      	subs	r1, #1
 8022974:	464a      	mov	r2, r9
 8022976:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802297a:	9107      	str	r1, [sp, #28]
 802297c:	f7ff ff30 	bl	80227e0 <__exponent>
 8022980:	9a08      	ldr	r2, [sp, #32]
 8022982:	9004      	str	r0, [sp, #16]
 8022984:	1813      	adds	r3, r2, r0
 8022986:	2a01      	cmp	r2, #1
 8022988:	6123      	str	r3, [r4, #16]
 802298a:	dc02      	bgt.n	8022992 <_printf_float+0x132>
 802298c:	6822      	ldr	r2, [r4, #0]
 802298e:	07d2      	lsls	r2, r2, #31
 8022990:	d501      	bpl.n	8022996 <_printf_float+0x136>
 8022992:	3301      	adds	r3, #1
 8022994:	6123      	str	r3, [r4, #16]
 8022996:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802299a:	2b00      	cmp	r3, #0
 802299c:	d0a2      	beq.n	80228e4 <_printf_float+0x84>
 802299e:	232d      	movs	r3, #45	; 0x2d
 80229a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80229a4:	e79e      	b.n	80228e4 <_printf_float+0x84>
 80229a6:	9904      	ldr	r1, [sp, #16]
 80229a8:	2947      	cmp	r1, #71	; 0x47
 80229aa:	d1c1      	bne.n	8022930 <_printf_float+0xd0>
 80229ac:	2b00      	cmp	r3, #0
 80229ae:	d1bf      	bne.n	8022930 <_printf_float+0xd0>
 80229b0:	2301      	movs	r3, #1
 80229b2:	e7bc      	b.n	802292e <_printf_float+0xce>
 80229b4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80229b8:	d118      	bne.n	80229ec <_printf_float+0x18c>
 80229ba:	2900      	cmp	r1, #0
 80229bc:	6863      	ldr	r3, [r4, #4]
 80229be:	dd0b      	ble.n	80229d8 <_printf_float+0x178>
 80229c0:	6121      	str	r1, [r4, #16]
 80229c2:	b913      	cbnz	r3, 80229ca <_printf_float+0x16a>
 80229c4:	6822      	ldr	r2, [r4, #0]
 80229c6:	07d0      	lsls	r0, r2, #31
 80229c8:	d502      	bpl.n	80229d0 <_printf_float+0x170>
 80229ca:	3301      	adds	r3, #1
 80229cc:	440b      	add	r3, r1
 80229ce:	6123      	str	r3, [r4, #16]
 80229d0:	2300      	movs	r3, #0
 80229d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80229d4:	9304      	str	r3, [sp, #16]
 80229d6:	e7de      	b.n	8022996 <_printf_float+0x136>
 80229d8:	b913      	cbnz	r3, 80229e0 <_printf_float+0x180>
 80229da:	6822      	ldr	r2, [r4, #0]
 80229dc:	07d2      	lsls	r2, r2, #31
 80229de:	d501      	bpl.n	80229e4 <_printf_float+0x184>
 80229e0:	3302      	adds	r3, #2
 80229e2:	e7f4      	b.n	80229ce <_printf_float+0x16e>
 80229e4:	2301      	movs	r3, #1
 80229e6:	e7f2      	b.n	80229ce <_printf_float+0x16e>
 80229e8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80229ec:	9b08      	ldr	r3, [sp, #32]
 80229ee:	4299      	cmp	r1, r3
 80229f0:	db05      	blt.n	80229fe <_printf_float+0x19e>
 80229f2:	6823      	ldr	r3, [r4, #0]
 80229f4:	6121      	str	r1, [r4, #16]
 80229f6:	07d8      	lsls	r0, r3, #31
 80229f8:	d5ea      	bpl.n	80229d0 <_printf_float+0x170>
 80229fa:	1c4b      	adds	r3, r1, #1
 80229fc:	e7e7      	b.n	80229ce <_printf_float+0x16e>
 80229fe:	2900      	cmp	r1, #0
 8022a00:	bfd4      	ite	le
 8022a02:	f1c1 0202 	rsble	r2, r1, #2
 8022a06:	2201      	movgt	r2, #1
 8022a08:	4413      	add	r3, r2
 8022a0a:	e7e0      	b.n	80229ce <_printf_float+0x16e>
 8022a0c:	6823      	ldr	r3, [r4, #0]
 8022a0e:	055a      	lsls	r2, r3, #21
 8022a10:	d407      	bmi.n	8022a22 <_printf_float+0x1c2>
 8022a12:	6923      	ldr	r3, [r4, #16]
 8022a14:	4642      	mov	r2, r8
 8022a16:	4631      	mov	r1, r6
 8022a18:	4628      	mov	r0, r5
 8022a1a:	47b8      	blx	r7
 8022a1c:	3001      	adds	r0, #1
 8022a1e:	d12a      	bne.n	8022a76 <_printf_float+0x216>
 8022a20:	e76a      	b.n	80228f8 <_printf_float+0x98>
 8022a22:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8022a26:	f240 80e0 	bls.w	8022bea <_printf_float+0x38a>
 8022a2a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8022a2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a36:	d133      	bne.n	8022aa0 <_printf_float+0x240>
 8022a38:	4a37      	ldr	r2, [pc, #220]	; (8022b18 <_printf_float+0x2b8>)
 8022a3a:	2301      	movs	r3, #1
 8022a3c:	4631      	mov	r1, r6
 8022a3e:	4628      	mov	r0, r5
 8022a40:	47b8      	blx	r7
 8022a42:	3001      	adds	r0, #1
 8022a44:	f43f af58 	beq.w	80228f8 <_printf_float+0x98>
 8022a48:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022a4c:	429a      	cmp	r2, r3
 8022a4e:	db02      	blt.n	8022a56 <_printf_float+0x1f6>
 8022a50:	6823      	ldr	r3, [r4, #0]
 8022a52:	07d8      	lsls	r0, r3, #31
 8022a54:	d50f      	bpl.n	8022a76 <_printf_float+0x216>
 8022a56:	4653      	mov	r3, sl
 8022a58:	465a      	mov	r2, fp
 8022a5a:	4631      	mov	r1, r6
 8022a5c:	4628      	mov	r0, r5
 8022a5e:	47b8      	blx	r7
 8022a60:	3001      	adds	r0, #1
 8022a62:	f43f af49 	beq.w	80228f8 <_printf_float+0x98>
 8022a66:	f04f 0800 	mov.w	r8, #0
 8022a6a:	f104 091a 	add.w	r9, r4, #26
 8022a6e:	9b08      	ldr	r3, [sp, #32]
 8022a70:	3b01      	subs	r3, #1
 8022a72:	4543      	cmp	r3, r8
 8022a74:	dc09      	bgt.n	8022a8a <_printf_float+0x22a>
 8022a76:	6823      	ldr	r3, [r4, #0]
 8022a78:	079b      	lsls	r3, r3, #30
 8022a7a:	f100 8106 	bmi.w	8022c8a <_printf_float+0x42a>
 8022a7e:	68e0      	ldr	r0, [r4, #12]
 8022a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a82:	4298      	cmp	r0, r3
 8022a84:	bfb8      	it	lt
 8022a86:	4618      	movlt	r0, r3
 8022a88:	e738      	b.n	80228fc <_printf_float+0x9c>
 8022a8a:	2301      	movs	r3, #1
 8022a8c:	464a      	mov	r2, r9
 8022a8e:	4631      	mov	r1, r6
 8022a90:	4628      	mov	r0, r5
 8022a92:	47b8      	blx	r7
 8022a94:	3001      	adds	r0, #1
 8022a96:	f43f af2f 	beq.w	80228f8 <_printf_float+0x98>
 8022a9a:	f108 0801 	add.w	r8, r8, #1
 8022a9e:	e7e6      	b.n	8022a6e <_printf_float+0x20e>
 8022aa0:	9b07      	ldr	r3, [sp, #28]
 8022aa2:	2b00      	cmp	r3, #0
 8022aa4:	dc3a      	bgt.n	8022b1c <_printf_float+0x2bc>
 8022aa6:	4a1c      	ldr	r2, [pc, #112]	; (8022b18 <_printf_float+0x2b8>)
 8022aa8:	2301      	movs	r3, #1
 8022aaa:	4631      	mov	r1, r6
 8022aac:	4628      	mov	r0, r5
 8022aae:	47b8      	blx	r7
 8022ab0:	3001      	adds	r0, #1
 8022ab2:	f43f af21 	beq.w	80228f8 <_printf_float+0x98>
 8022ab6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8022aba:	4313      	orrs	r3, r2
 8022abc:	d102      	bne.n	8022ac4 <_printf_float+0x264>
 8022abe:	6823      	ldr	r3, [r4, #0]
 8022ac0:	07d9      	lsls	r1, r3, #31
 8022ac2:	d5d8      	bpl.n	8022a76 <_printf_float+0x216>
 8022ac4:	4653      	mov	r3, sl
 8022ac6:	465a      	mov	r2, fp
 8022ac8:	4631      	mov	r1, r6
 8022aca:	4628      	mov	r0, r5
 8022acc:	47b8      	blx	r7
 8022ace:	3001      	adds	r0, #1
 8022ad0:	f43f af12 	beq.w	80228f8 <_printf_float+0x98>
 8022ad4:	f04f 0900 	mov.w	r9, #0
 8022ad8:	f104 0a1a 	add.w	sl, r4, #26
 8022adc:	9b07      	ldr	r3, [sp, #28]
 8022ade:	425b      	negs	r3, r3
 8022ae0:	454b      	cmp	r3, r9
 8022ae2:	dc01      	bgt.n	8022ae8 <_printf_float+0x288>
 8022ae4:	9b08      	ldr	r3, [sp, #32]
 8022ae6:	e795      	b.n	8022a14 <_printf_float+0x1b4>
 8022ae8:	2301      	movs	r3, #1
 8022aea:	4652      	mov	r2, sl
 8022aec:	4631      	mov	r1, r6
 8022aee:	4628      	mov	r0, r5
 8022af0:	47b8      	blx	r7
 8022af2:	3001      	adds	r0, #1
 8022af4:	f43f af00 	beq.w	80228f8 <_printf_float+0x98>
 8022af8:	f109 0901 	add.w	r9, r9, #1
 8022afc:	e7ee      	b.n	8022adc <_printf_float+0x27c>
 8022afe:	bf00      	nop
 8022b00:	ffffffff 	.word	0xffffffff
 8022b04:	7fefffff 	.word	0x7fefffff
 8022b08:	08026414 	.word	0x08026414
 8022b0c:	08026418 	.word	0x08026418
 8022b10:	0802641c 	.word	0x0802641c
 8022b14:	08026420 	.word	0x08026420
 8022b18:	08026424 	.word	0x08026424
 8022b1c:	9a08      	ldr	r2, [sp, #32]
 8022b1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022b20:	429a      	cmp	r2, r3
 8022b22:	bfa8      	it	ge
 8022b24:	461a      	movge	r2, r3
 8022b26:	2a00      	cmp	r2, #0
 8022b28:	4691      	mov	r9, r2
 8022b2a:	dc38      	bgt.n	8022b9e <_printf_float+0x33e>
 8022b2c:	2300      	movs	r3, #0
 8022b2e:	9305      	str	r3, [sp, #20]
 8022b30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022b34:	f104 021a 	add.w	r2, r4, #26
 8022b38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022b3a:	9905      	ldr	r1, [sp, #20]
 8022b3c:	9304      	str	r3, [sp, #16]
 8022b3e:	eba3 0309 	sub.w	r3, r3, r9
 8022b42:	428b      	cmp	r3, r1
 8022b44:	dc33      	bgt.n	8022bae <_printf_float+0x34e>
 8022b46:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022b4a:	429a      	cmp	r2, r3
 8022b4c:	db3c      	blt.n	8022bc8 <_printf_float+0x368>
 8022b4e:	6823      	ldr	r3, [r4, #0]
 8022b50:	07da      	lsls	r2, r3, #31
 8022b52:	d439      	bmi.n	8022bc8 <_printf_float+0x368>
 8022b54:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8022b58:	eba2 0903 	sub.w	r9, r2, r3
 8022b5c:	9b04      	ldr	r3, [sp, #16]
 8022b5e:	1ad2      	subs	r2, r2, r3
 8022b60:	4591      	cmp	r9, r2
 8022b62:	bfa8      	it	ge
 8022b64:	4691      	movge	r9, r2
 8022b66:	f1b9 0f00 	cmp.w	r9, #0
 8022b6a:	dc35      	bgt.n	8022bd8 <_printf_float+0x378>
 8022b6c:	f04f 0800 	mov.w	r8, #0
 8022b70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022b74:	f104 0a1a 	add.w	sl, r4, #26
 8022b78:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022b7c:	1a9b      	subs	r3, r3, r2
 8022b7e:	eba3 0309 	sub.w	r3, r3, r9
 8022b82:	4543      	cmp	r3, r8
 8022b84:	f77f af77 	ble.w	8022a76 <_printf_float+0x216>
 8022b88:	2301      	movs	r3, #1
 8022b8a:	4652      	mov	r2, sl
 8022b8c:	4631      	mov	r1, r6
 8022b8e:	4628      	mov	r0, r5
 8022b90:	47b8      	blx	r7
 8022b92:	3001      	adds	r0, #1
 8022b94:	f43f aeb0 	beq.w	80228f8 <_printf_float+0x98>
 8022b98:	f108 0801 	add.w	r8, r8, #1
 8022b9c:	e7ec      	b.n	8022b78 <_printf_float+0x318>
 8022b9e:	4613      	mov	r3, r2
 8022ba0:	4631      	mov	r1, r6
 8022ba2:	4642      	mov	r2, r8
 8022ba4:	4628      	mov	r0, r5
 8022ba6:	47b8      	blx	r7
 8022ba8:	3001      	adds	r0, #1
 8022baa:	d1bf      	bne.n	8022b2c <_printf_float+0x2cc>
 8022bac:	e6a4      	b.n	80228f8 <_printf_float+0x98>
 8022bae:	2301      	movs	r3, #1
 8022bb0:	4631      	mov	r1, r6
 8022bb2:	4628      	mov	r0, r5
 8022bb4:	9204      	str	r2, [sp, #16]
 8022bb6:	47b8      	blx	r7
 8022bb8:	3001      	adds	r0, #1
 8022bba:	f43f ae9d 	beq.w	80228f8 <_printf_float+0x98>
 8022bbe:	9b05      	ldr	r3, [sp, #20]
 8022bc0:	9a04      	ldr	r2, [sp, #16]
 8022bc2:	3301      	adds	r3, #1
 8022bc4:	9305      	str	r3, [sp, #20]
 8022bc6:	e7b7      	b.n	8022b38 <_printf_float+0x2d8>
 8022bc8:	4653      	mov	r3, sl
 8022bca:	465a      	mov	r2, fp
 8022bcc:	4631      	mov	r1, r6
 8022bce:	4628      	mov	r0, r5
 8022bd0:	47b8      	blx	r7
 8022bd2:	3001      	adds	r0, #1
 8022bd4:	d1be      	bne.n	8022b54 <_printf_float+0x2f4>
 8022bd6:	e68f      	b.n	80228f8 <_printf_float+0x98>
 8022bd8:	9a04      	ldr	r2, [sp, #16]
 8022bda:	464b      	mov	r3, r9
 8022bdc:	4442      	add	r2, r8
 8022bde:	4631      	mov	r1, r6
 8022be0:	4628      	mov	r0, r5
 8022be2:	47b8      	blx	r7
 8022be4:	3001      	adds	r0, #1
 8022be6:	d1c1      	bne.n	8022b6c <_printf_float+0x30c>
 8022be8:	e686      	b.n	80228f8 <_printf_float+0x98>
 8022bea:	9a08      	ldr	r2, [sp, #32]
 8022bec:	2a01      	cmp	r2, #1
 8022bee:	dc01      	bgt.n	8022bf4 <_printf_float+0x394>
 8022bf0:	07db      	lsls	r3, r3, #31
 8022bf2:	d537      	bpl.n	8022c64 <_printf_float+0x404>
 8022bf4:	2301      	movs	r3, #1
 8022bf6:	4642      	mov	r2, r8
 8022bf8:	4631      	mov	r1, r6
 8022bfa:	4628      	mov	r0, r5
 8022bfc:	47b8      	blx	r7
 8022bfe:	3001      	adds	r0, #1
 8022c00:	f43f ae7a 	beq.w	80228f8 <_printf_float+0x98>
 8022c04:	4653      	mov	r3, sl
 8022c06:	465a      	mov	r2, fp
 8022c08:	4631      	mov	r1, r6
 8022c0a:	4628      	mov	r0, r5
 8022c0c:	47b8      	blx	r7
 8022c0e:	3001      	adds	r0, #1
 8022c10:	f43f ae72 	beq.w	80228f8 <_printf_float+0x98>
 8022c14:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8022c18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022c20:	9b08      	ldr	r3, [sp, #32]
 8022c22:	d01a      	beq.n	8022c5a <_printf_float+0x3fa>
 8022c24:	3b01      	subs	r3, #1
 8022c26:	f108 0201 	add.w	r2, r8, #1
 8022c2a:	4631      	mov	r1, r6
 8022c2c:	4628      	mov	r0, r5
 8022c2e:	47b8      	blx	r7
 8022c30:	3001      	adds	r0, #1
 8022c32:	d10e      	bne.n	8022c52 <_printf_float+0x3f2>
 8022c34:	e660      	b.n	80228f8 <_printf_float+0x98>
 8022c36:	2301      	movs	r3, #1
 8022c38:	464a      	mov	r2, r9
 8022c3a:	4631      	mov	r1, r6
 8022c3c:	4628      	mov	r0, r5
 8022c3e:	47b8      	blx	r7
 8022c40:	3001      	adds	r0, #1
 8022c42:	f43f ae59 	beq.w	80228f8 <_printf_float+0x98>
 8022c46:	f108 0801 	add.w	r8, r8, #1
 8022c4a:	9b08      	ldr	r3, [sp, #32]
 8022c4c:	3b01      	subs	r3, #1
 8022c4e:	4543      	cmp	r3, r8
 8022c50:	dcf1      	bgt.n	8022c36 <_printf_float+0x3d6>
 8022c52:	9b04      	ldr	r3, [sp, #16]
 8022c54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8022c58:	e6dd      	b.n	8022a16 <_printf_float+0x1b6>
 8022c5a:	f04f 0800 	mov.w	r8, #0
 8022c5e:	f104 091a 	add.w	r9, r4, #26
 8022c62:	e7f2      	b.n	8022c4a <_printf_float+0x3ea>
 8022c64:	2301      	movs	r3, #1
 8022c66:	4642      	mov	r2, r8
 8022c68:	e7df      	b.n	8022c2a <_printf_float+0x3ca>
 8022c6a:	2301      	movs	r3, #1
 8022c6c:	464a      	mov	r2, r9
 8022c6e:	4631      	mov	r1, r6
 8022c70:	4628      	mov	r0, r5
 8022c72:	47b8      	blx	r7
 8022c74:	3001      	adds	r0, #1
 8022c76:	f43f ae3f 	beq.w	80228f8 <_printf_float+0x98>
 8022c7a:	f108 0801 	add.w	r8, r8, #1
 8022c7e:	68e3      	ldr	r3, [r4, #12]
 8022c80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022c82:	1a5b      	subs	r3, r3, r1
 8022c84:	4543      	cmp	r3, r8
 8022c86:	dcf0      	bgt.n	8022c6a <_printf_float+0x40a>
 8022c88:	e6f9      	b.n	8022a7e <_printf_float+0x21e>
 8022c8a:	f04f 0800 	mov.w	r8, #0
 8022c8e:	f104 0919 	add.w	r9, r4, #25
 8022c92:	e7f4      	b.n	8022c7e <_printf_float+0x41e>

08022c94 <_printf_common>:
 8022c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022c98:	4616      	mov	r6, r2
 8022c9a:	4699      	mov	r9, r3
 8022c9c:	688a      	ldr	r2, [r1, #8]
 8022c9e:	690b      	ldr	r3, [r1, #16]
 8022ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022ca4:	4293      	cmp	r3, r2
 8022ca6:	bfb8      	it	lt
 8022ca8:	4613      	movlt	r3, r2
 8022caa:	6033      	str	r3, [r6, #0]
 8022cac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022cb0:	4607      	mov	r7, r0
 8022cb2:	460c      	mov	r4, r1
 8022cb4:	b10a      	cbz	r2, 8022cba <_printf_common+0x26>
 8022cb6:	3301      	adds	r3, #1
 8022cb8:	6033      	str	r3, [r6, #0]
 8022cba:	6823      	ldr	r3, [r4, #0]
 8022cbc:	0699      	lsls	r1, r3, #26
 8022cbe:	bf42      	ittt	mi
 8022cc0:	6833      	ldrmi	r3, [r6, #0]
 8022cc2:	3302      	addmi	r3, #2
 8022cc4:	6033      	strmi	r3, [r6, #0]
 8022cc6:	6825      	ldr	r5, [r4, #0]
 8022cc8:	f015 0506 	ands.w	r5, r5, #6
 8022ccc:	d106      	bne.n	8022cdc <_printf_common+0x48>
 8022cce:	f104 0a19 	add.w	sl, r4, #25
 8022cd2:	68e3      	ldr	r3, [r4, #12]
 8022cd4:	6832      	ldr	r2, [r6, #0]
 8022cd6:	1a9b      	subs	r3, r3, r2
 8022cd8:	42ab      	cmp	r3, r5
 8022cda:	dc26      	bgt.n	8022d2a <_printf_common+0x96>
 8022cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022ce0:	1e13      	subs	r3, r2, #0
 8022ce2:	6822      	ldr	r2, [r4, #0]
 8022ce4:	bf18      	it	ne
 8022ce6:	2301      	movne	r3, #1
 8022ce8:	0692      	lsls	r2, r2, #26
 8022cea:	d42b      	bmi.n	8022d44 <_printf_common+0xb0>
 8022cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022cf0:	4649      	mov	r1, r9
 8022cf2:	4638      	mov	r0, r7
 8022cf4:	47c0      	blx	r8
 8022cf6:	3001      	adds	r0, #1
 8022cf8:	d01e      	beq.n	8022d38 <_printf_common+0xa4>
 8022cfa:	6823      	ldr	r3, [r4, #0]
 8022cfc:	6922      	ldr	r2, [r4, #16]
 8022cfe:	f003 0306 	and.w	r3, r3, #6
 8022d02:	2b04      	cmp	r3, #4
 8022d04:	bf02      	ittt	eq
 8022d06:	68e5      	ldreq	r5, [r4, #12]
 8022d08:	6833      	ldreq	r3, [r6, #0]
 8022d0a:	1aed      	subeq	r5, r5, r3
 8022d0c:	68a3      	ldr	r3, [r4, #8]
 8022d0e:	bf0c      	ite	eq
 8022d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022d14:	2500      	movne	r5, #0
 8022d16:	4293      	cmp	r3, r2
 8022d18:	bfc4      	itt	gt
 8022d1a:	1a9b      	subgt	r3, r3, r2
 8022d1c:	18ed      	addgt	r5, r5, r3
 8022d1e:	2600      	movs	r6, #0
 8022d20:	341a      	adds	r4, #26
 8022d22:	42b5      	cmp	r5, r6
 8022d24:	d11a      	bne.n	8022d5c <_printf_common+0xc8>
 8022d26:	2000      	movs	r0, #0
 8022d28:	e008      	b.n	8022d3c <_printf_common+0xa8>
 8022d2a:	2301      	movs	r3, #1
 8022d2c:	4652      	mov	r2, sl
 8022d2e:	4649      	mov	r1, r9
 8022d30:	4638      	mov	r0, r7
 8022d32:	47c0      	blx	r8
 8022d34:	3001      	adds	r0, #1
 8022d36:	d103      	bne.n	8022d40 <_printf_common+0xac>
 8022d38:	f04f 30ff 	mov.w	r0, #4294967295
 8022d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d40:	3501      	adds	r5, #1
 8022d42:	e7c6      	b.n	8022cd2 <_printf_common+0x3e>
 8022d44:	18e1      	adds	r1, r4, r3
 8022d46:	1c5a      	adds	r2, r3, #1
 8022d48:	2030      	movs	r0, #48	; 0x30
 8022d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022d4e:	4422      	add	r2, r4
 8022d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022d58:	3302      	adds	r3, #2
 8022d5a:	e7c7      	b.n	8022cec <_printf_common+0x58>
 8022d5c:	2301      	movs	r3, #1
 8022d5e:	4622      	mov	r2, r4
 8022d60:	4649      	mov	r1, r9
 8022d62:	4638      	mov	r0, r7
 8022d64:	47c0      	blx	r8
 8022d66:	3001      	adds	r0, #1
 8022d68:	d0e6      	beq.n	8022d38 <_printf_common+0xa4>
 8022d6a:	3601      	adds	r6, #1
 8022d6c:	e7d9      	b.n	8022d22 <_printf_common+0x8e>
	...

08022d70 <_printf_i>:
 8022d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022d74:	7e0f      	ldrb	r7, [r1, #24]
 8022d76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022d78:	2f78      	cmp	r7, #120	; 0x78
 8022d7a:	4691      	mov	r9, r2
 8022d7c:	4680      	mov	r8, r0
 8022d7e:	460c      	mov	r4, r1
 8022d80:	469a      	mov	sl, r3
 8022d82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8022d86:	d807      	bhi.n	8022d98 <_printf_i+0x28>
 8022d88:	2f62      	cmp	r7, #98	; 0x62
 8022d8a:	d80a      	bhi.n	8022da2 <_printf_i+0x32>
 8022d8c:	2f00      	cmp	r7, #0
 8022d8e:	f000 80d4 	beq.w	8022f3a <_printf_i+0x1ca>
 8022d92:	2f58      	cmp	r7, #88	; 0x58
 8022d94:	f000 80c0 	beq.w	8022f18 <_printf_i+0x1a8>
 8022d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022da0:	e03a      	b.n	8022e18 <_printf_i+0xa8>
 8022da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022da6:	2b15      	cmp	r3, #21
 8022da8:	d8f6      	bhi.n	8022d98 <_printf_i+0x28>
 8022daa:	a101      	add	r1, pc, #4	; (adr r1, 8022db0 <_printf_i+0x40>)
 8022dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022db0:	08022e09 	.word	0x08022e09
 8022db4:	08022e1d 	.word	0x08022e1d
 8022db8:	08022d99 	.word	0x08022d99
 8022dbc:	08022d99 	.word	0x08022d99
 8022dc0:	08022d99 	.word	0x08022d99
 8022dc4:	08022d99 	.word	0x08022d99
 8022dc8:	08022e1d 	.word	0x08022e1d
 8022dcc:	08022d99 	.word	0x08022d99
 8022dd0:	08022d99 	.word	0x08022d99
 8022dd4:	08022d99 	.word	0x08022d99
 8022dd8:	08022d99 	.word	0x08022d99
 8022ddc:	08022f21 	.word	0x08022f21
 8022de0:	08022e49 	.word	0x08022e49
 8022de4:	08022edb 	.word	0x08022edb
 8022de8:	08022d99 	.word	0x08022d99
 8022dec:	08022d99 	.word	0x08022d99
 8022df0:	08022f43 	.word	0x08022f43
 8022df4:	08022d99 	.word	0x08022d99
 8022df8:	08022e49 	.word	0x08022e49
 8022dfc:	08022d99 	.word	0x08022d99
 8022e00:	08022d99 	.word	0x08022d99
 8022e04:	08022ee3 	.word	0x08022ee3
 8022e08:	682b      	ldr	r3, [r5, #0]
 8022e0a:	1d1a      	adds	r2, r3, #4
 8022e0c:	681b      	ldr	r3, [r3, #0]
 8022e0e:	602a      	str	r2, [r5, #0]
 8022e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022e18:	2301      	movs	r3, #1
 8022e1a:	e09f      	b.n	8022f5c <_printf_i+0x1ec>
 8022e1c:	6820      	ldr	r0, [r4, #0]
 8022e1e:	682b      	ldr	r3, [r5, #0]
 8022e20:	0607      	lsls	r7, r0, #24
 8022e22:	f103 0104 	add.w	r1, r3, #4
 8022e26:	6029      	str	r1, [r5, #0]
 8022e28:	d501      	bpl.n	8022e2e <_printf_i+0xbe>
 8022e2a:	681e      	ldr	r6, [r3, #0]
 8022e2c:	e003      	b.n	8022e36 <_printf_i+0xc6>
 8022e2e:	0646      	lsls	r6, r0, #25
 8022e30:	d5fb      	bpl.n	8022e2a <_printf_i+0xba>
 8022e32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8022e36:	2e00      	cmp	r6, #0
 8022e38:	da03      	bge.n	8022e42 <_printf_i+0xd2>
 8022e3a:	232d      	movs	r3, #45	; 0x2d
 8022e3c:	4276      	negs	r6, r6
 8022e3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022e42:	485a      	ldr	r0, [pc, #360]	; (8022fac <_printf_i+0x23c>)
 8022e44:	230a      	movs	r3, #10
 8022e46:	e012      	b.n	8022e6e <_printf_i+0xfe>
 8022e48:	682b      	ldr	r3, [r5, #0]
 8022e4a:	6820      	ldr	r0, [r4, #0]
 8022e4c:	1d19      	adds	r1, r3, #4
 8022e4e:	6029      	str	r1, [r5, #0]
 8022e50:	0605      	lsls	r5, r0, #24
 8022e52:	d501      	bpl.n	8022e58 <_printf_i+0xe8>
 8022e54:	681e      	ldr	r6, [r3, #0]
 8022e56:	e002      	b.n	8022e5e <_printf_i+0xee>
 8022e58:	0641      	lsls	r1, r0, #25
 8022e5a:	d5fb      	bpl.n	8022e54 <_printf_i+0xe4>
 8022e5c:	881e      	ldrh	r6, [r3, #0]
 8022e5e:	4853      	ldr	r0, [pc, #332]	; (8022fac <_printf_i+0x23c>)
 8022e60:	2f6f      	cmp	r7, #111	; 0x6f
 8022e62:	bf0c      	ite	eq
 8022e64:	2308      	moveq	r3, #8
 8022e66:	230a      	movne	r3, #10
 8022e68:	2100      	movs	r1, #0
 8022e6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022e6e:	6865      	ldr	r5, [r4, #4]
 8022e70:	60a5      	str	r5, [r4, #8]
 8022e72:	2d00      	cmp	r5, #0
 8022e74:	bfa2      	ittt	ge
 8022e76:	6821      	ldrge	r1, [r4, #0]
 8022e78:	f021 0104 	bicge.w	r1, r1, #4
 8022e7c:	6021      	strge	r1, [r4, #0]
 8022e7e:	b90e      	cbnz	r6, 8022e84 <_printf_i+0x114>
 8022e80:	2d00      	cmp	r5, #0
 8022e82:	d04b      	beq.n	8022f1c <_printf_i+0x1ac>
 8022e84:	4615      	mov	r5, r2
 8022e86:	fbb6 f1f3 	udiv	r1, r6, r3
 8022e8a:	fb03 6711 	mls	r7, r3, r1, r6
 8022e8e:	5dc7      	ldrb	r7, [r0, r7]
 8022e90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8022e94:	4637      	mov	r7, r6
 8022e96:	42bb      	cmp	r3, r7
 8022e98:	460e      	mov	r6, r1
 8022e9a:	d9f4      	bls.n	8022e86 <_printf_i+0x116>
 8022e9c:	2b08      	cmp	r3, #8
 8022e9e:	d10b      	bne.n	8022eb8 <_printf_i+0x148>
 8022ea0:	6823      	ldr	r3, [r4, #0]
 8022ea2:	07de      	lsls	r6, r3, #31
 8022ea4:	d508      	bpl.n	8022eb8 <_printf_i+0x148>
 8022ea6:	6923      	ldr	r3, [r4, #16]
 8022ea8:	6861      	ldr	r1, [r4, #4]
 8022eaa:	4299      	cmp	r1, r3
 8022eac:	bfde      	ittt	le
 8022eae:	2330      	movle	r3, #48	; 0x30
 8022eb0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022eb4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8022eb8:	1b52      	subs	r2, r2, r5
 8022eba:	6122      	str	r2, [r4, #16]
 8022ebc:	f8cd a000 	str.w	sl, [sp]
 8022ec0:	464b      	mov	r3, r9
 8022ec2:	aa03      	add	r2, sp, #12
 8022ec4:	4621      	mov	r1, r4
 8022ec6:	4640      	mov	r0, r8
 8022ec8:	f7ff fee4 	bl	8022c94 <_printf_common>
 8022ecc:	3001      	adds	r0, #1
 8022ece:	d14a      	bne.n	8022f66 <_printf_i+0x1f6>
 8022ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8022ed4:	b004      	add	sp, #16
 8022ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022eda:	6823      	ldr	r3, [r4, #0]
 8022edc:	f043 0320 	orr.w	r3, r3, #32
 8022ee0:	6023      	str	r3, [r4, #0]
 8022ee2:	4833      	ldr	r0, [pc, #204]	; (8022fb0 <_printf_i+0x240>)
 8022ee4:	2778      	movs	r7, #120	; 0x78
 8022ee6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022eea:	6823      	ldr	r3, [r4, #0]
 8022eec:	6829      	ldr	r1, [r5, #0]
 8022eee:	061f      	lsls	r7, r3, #24
 8022ef0:	f851 6b04 	ldr.w	r6, [r1], #4
 8022ef4:	d402      	bmi.n	8022efc <_printf_i+0x18c>
 8022ef6:	065f      	lsls	r7, r3, #25
 8022ef8:	bf48      	it	mi
 8022efa:	b2b6      	uxthmi	r6, r6
 8022efc:	07df      	lsls	r7, r3, #31
 8022efe:	bf48      	it	mi
 8022f00:	f043 0320 	orrmi.w	r3, r3, #32
 8022f04:	6029      	str	r1, [r5, #0]
 8022f06:	bf48      	it	mi
 8022f08:	6023      	strmi	r3, [r4, #0]
 8022f0a:	b91e      	cbnz	r6, 8022f14 <_printf_i+0x1a4>
 8022f0c:	6823      	ldr	r3, [r4, #0]
 8022f0e:	f023 0320 	bic.w	r3, r3, #32
 8022f12:	6023      	str	r3, [r4, #0]
 8022f14:	2310      	movs	r3, #16
 8022f16:	e7a7      	b.n	8022e68 <_printf_i+0xf8>
 8022f18:	4824      	ldr	r0, [pc, #144]	; (8022fac <_printf_i+0x23c>)
 8022f1a:	e7e4      	b.n	8022ee6 <_printf_i+0x176>
 8022f1c:	4615      	mov	r5, r2
 8022f1e:	e7bd      	b.n	8022e9c <_printf_i+0x12c>
 8022f20:	682b      	ldr	r3, [r5, #0]
 8022f22:	6826      	ldr	r6, [r4, #0]
 8022f24:	6961      	ldr	r1, [r4, #20]
 8022f26:	1d18      	adds	r0, r3, #4
 8022f28:	6028      	str	r0, [r5, #0]
 8022f2a:	0635      	lsls	r5, r6, #24
 8022f2c:	681b      	ldr	r3, [r3, #0]
 8022f2e:	d501      	bpl.n	8022f34 <_printf_i+0x1c4>
 8022f30:	6019      	str	r1, [r3, #0]
 8022f32:	e002      	b.n	8022f3a <_printf_i+0x1ca>
 8022f34:	0670      	lsls	r0, r6, #25
 8022f36:	d5fb      	bpl.n	8022f30 <_printf_i+0x1c0>
 8022f38:	8019      	strh	r1, [r3, #0]
 8022f3a:	2300      	movs	r3, #0
 8022f3c:	6123      	str	r3, [r4, #16]
 8022f3e:	4615      	mov	r5, r2
 8022f40:	e7bc      	b.n	8022ebc <_printf_i+0x14c>
 8022f42:	682b      	ldr	r3, [r5, #0]
 8022f44:	1d1a      	adds	r2, r3, #4
 8022f46:	602a      	str	r2, [r5, #0]
 8022f48:	681d      	ldr	r5, [r3, #0]
 8022f4a:	6862      	ldr	r2, [r4, #4]
 8022f4c:	2100      	movs	r1, #0
 8022f4e:	4628      	mov	r0, r5
 8022f50:	f7dd f9c6 	bl	80002e0 <memchr>
 8022f54:	b108      	cbz	r0, 8022f5a <_printf_i+0x1ea>
 8022f56:	1b40      	subs	r0, r0, r5
 8022f58:	6060      	str	r0, [r4, #4]
 8022f5a:	6863      	ldr	r3, [r4, #4]
 8022f5c:	6123      	str	r3, [r4, #16]
 8022f5e:	2300      	movs	r3, #0
 8022f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022f64:	e7aa      	b.n	8022ebc <_printf_i+0x14c>
 8022f66:	6923      	ldr	r3, [r4, #16]
 8022f68:	462a      	mov	r2, r5
 8022f6a:	4649      	mov	r1, r9
 8022f6c:	4640      	mov	r0, r8
 8022f6e:	47d0      	blx	sl
 8022f70:	3001      	adds	r0, #1
 8022f72:	d0ad      	beq.n	8022ed0 <_printf_i+0x160>
 8022f74:	6823      	ldr	r3, [r4, #0]
 8022f76:	079b      	lsls	r3, r3, #30
 8022f78:	d413      	bmi.n	8022fa2 <_printf_i+0x232>
 8022f7a:	68e0      	ldr	r0, [r4, #12]
 8022f7c:	9b03      	ldr	r3, [sp, #12]
 8022f7e:	4298      	cmp	r0, r3
 8022f80:	bfb8      	it	lt
 8022f82:	4618      	movlt	r0, r3
 8022f84:	e7a6      	b.n	8022ed4 <_printf_i+0x164>
 8022f86:	2301      	movs	r3, #1
 8022f88:	4632      	mov	r2, r6
 8022f8a:	4649      	mov	r1, r9
 8022f8c:	4640      	mov	r0, r8
 8022f8e:	47d0      	blx	sl
 8022f90:	3001      	adds	r0, #1
 8022f92:	d09d      	beq.n	8022ed0 <_printf_i+0x160>
 8022f94:	3501      	adds	r5, #1
 8022f96:	68e3      	ldr	r3, [r4, #12]
 8022f98:	9903      	ldr	r1, [sp, #12]
 8022f9a:	1a5b      	subs	r3, r3, r1
 8022f9c:	42ab      	cmp	r3, r5
 8022f9e:	dcf2      	bgt.n	8022f86 <_printf_i+0x216>
 8022fa0:	e7eb      	b.n	8022f7a <_printf_i+0x20a>
 8022fa2:	2500      	movs	r5, #0
 8022fa4:	f104 0619 	add.w	r6, r4, #25
 8022fa8:	e7f5      	b.n	8022f96 <_printf_i+0x226>
 8022faa:	bf00      	nop
 8022fac:	08026426 	.word	0x08026426
 8022fb0:	08026437 	.word	0x08026437

08022fb4 <std>:
 8022fb4:	2300      	movs	r3, #0
 8022fb6:	b510      	push	{r4, lr}
 8022fb8:	4604      	mov	r4, r0
 8022fba:	e9c0 3300 	strd	r3, r3, [r0]
 8022fbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022fc2:	6083      	str	r3, [r0, #8]
 8022fc4:	8181      	strh	r1, [r0, #12]
 8022fc6:	6643      	str	r3, [r0, #100]	; 0x64
 8022fc8:	81c2      	strh	r2, [r0, #14]
 8022fca:	6183      	str	r3, [r0, #24]
 8022fcc:	4619      	mov	r1, r3
 8022fce:	2208      	movs	r2, #8
 8022fd0:	305c      	adds	r0, #92	; 0x5c
 8022fd2:	f000 f920 	bl	8023216 <memset>
 8022fd6:	4b0d      	ldr	r3, [pc, #52]	; (802300c <std+0x58>)
 8022fd8:	6263      	str	r3, [r4, #36]	; 0x24
 8022fda:	4b0d      	ldr	r3, [pc, #52]	; (8023010 <std+0x5c>)
 8022fdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8022fde:	4b0d      	ldr	r3, [pc, #52]	; (8023014 <std+0x60>)
 8022fe0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022fe2:	4b0d      	ldr	r3, [pc, #52]	; (8023018 <std+0x64>)
 8022fe4:	6323      	str	r3, [r4, #48]	; 0x30
 8022fe6:	4b0d      	ldr	r3, [pc, #52]	; (802301c <std+0x68>)
 8022fe8:	6224      	str	r4, [r4, #32]
 8022fea:	429c      	cmp	r4, r3
 8022fec:	d006      	beq.n	8022ffc <std+0x48>
 8022fee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8022ff2:	4294      	cmp	r4, r2
 8022ff4:	d002      	beq.n	8022ffc <std+0x48>
 8022ff6:	33d0      	adds	r3, #208	; 0xd0
 8022ff8:	429c      	cmp	r4, r3
 8022ffa:	d105      	bne.n	8023008 <std+0x54>
 8022ffc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023004:	f000 b9da 	b.w	80233bc <__retarget_lock_init_recursive>
 8023008:	bd10      	pop	{r4, pc}
 802300a:	bf00      	nop
 802300c:	0802315d 	.word	0x0802315d
 8023010:	0802317f 	.word	0x0802317f
 8023014:	080231b7 	.word	0x080231b7
 8023018:	080231db 	.word	0x080231db
 802301c:	2401e45c 	.word	0x2401e45c

08023020 <stdio_exit_handler>:
 8023020:	4a02      	ldr	r2, [pc, #8]	; (802302c <stdio_exit_handler+0xc>)
 8023022:	4903      	ldr	r1, [pc, #12]	; (8023030 <stdio_exit_handler+0x10>)
 8023024:	4803      	ldr	r0, [pc, #12]	; (8023034 <stdio_exit_handler+0x14>)
 8023026:	f000 b87b 	b.w	8023120 <_fwalk_sglue>
 802302a:	bf00      	nop
 802302c:	2400005c 	.word	0x2400005c
 8023030:	08024c65 	.word	0x08024c65
 8023034:	24000068 	.word	0x24000068

08023038 <cleanup_stdio>:
 8023038:	6841      	ldr	r1, [r0, #4]
 802303a:	4b0c      	ldr	r3, [pc, #48]	; (802306c <cleanup_stdio+0x34>)
 802303c:	4299      	cmp	r1, r3
 802303e:	b510      	push	{r4, lr}
 8023040:	4604      	mov	r4, r0
 8023042:	d001      	beq.n	8023048 <cleanup_stdio+0x10>
 8023044:	f001 fe0e 	bl	8024c64 <_fflush_r>
 8023048:	68a1      	ldr	r1, [r4, #8]
 802304a:	4b09      	ldr	r3, [pc, #36]	; (8023070 <cleanup_stdio+0x38>)
 802304c:	4299      	cmp	r1, r3
 802304e:	d002      	beq.n	8023056 <cleanup_stdio+0x1e>
 8023050:	4620      	mov	r0, r4
 8023052:	f001 fe07 	bl	8024c64 <_fflush_r>
 8023056:	68e1      	ldr	r1, [r4, #12]
 8023058:	4b06      	ldr	r3, [pc, #24]	; (8023074 <cleanup_stdio+0x3c>)
 802305a:	4299      	cmp	r1, r3
 802305c:	d004      	beq.n	8023068 <cleanup_stdio+0x30>
 802305e:	4620      	mov	r0, r4
 8023060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023064:	f001 bdfe 	b.w	8024c64 <_fflush_r>
 8023068:	bd10      	pop	{r4, pc}
 802306a:	bf00      	nop
 802306c:	2401e45c 	.word	0x2401e45c
 8023070:	2401e4c4 	.word	0x2401e4c4
 8023074:	2401e52c 	.word	0x2401e52c

08023078 <global_stdio_init.part.0>:
 8023078:	b510      	push	{r4, lr}
 802307a:	4b0b      	ldr	r3, [pc, #44]	; (80230a8 <global_stdio_init.part.0+0x30>)
 802307c:	4c0b      	ldr	r4, [pc, #44]	; (80230ac <global_stdio_init.part.0+0x34>)
 802307e:	4a0c      	ldr	r2, [pc, #48]	; (80230b0 <global_stdio_init.part.0+0x38>)
 8023080:	601a      	str	r2, [r3, #0]
 8023082:	4620      	mov	r0, r4
 8023084:	2200      	movs	r2, #0
 8023086:	2104      	movs	r1, #4
 8023088:	f7ff ff94 	bl	8022fb4 <std>
 802308c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8023090:	2201      	movs	r2, #1
 8023092:	2109      	movs	r1, #9
 8023094:	f7ff ff8e 	bl	8022fb4 <std>
 8023098:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 802309c:	2202      	movs	r2, #2
 802309e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80230a2:	2112      	movs	r1, #18
 80230a4:	f7ff bf86 	b.w	8022fb4 <std>
 80230a8:	2401e594 	.word	0x2401e594
 80230ac:	2401e45c 	.word	0x2401e45c
 80230b0:	08023021 	.word	0x08023021

080230b4 <__sfp_lock_acquire>:
 80230b4:	4801      	ldr	r0, [pc, #4]	; (80230bc <__sfp_lock_acquire+0x8>)
 80230b6:	f000 b982 	b.w	80233be <__retarget_lock_acquire_recursive>
 80230ba:	bf00      	nop
 80230bc:	2401e59d 	.word	0x2401e59d

080230c0 <__sfp_lock_release>:
 80230c0:	4801      	ldr	r0, [pc, #4]	; (80230c8 <__sfp_lock_release+0x8>)
 80230c2:	f000 b97d 	b.w	80233c0 <__retarget_lock_release_recursive>
 80230c6:	bf00      	nop
 80230c8:	2401e59d 	.word	0x2401e59d

080230cc <__sinit>:
 80230cc:	b510      	push	{r4, lr}
 80230ce:	4604      	mov	r4, r0
 80230d0:	f7ff fff0 	bl	80230b4 <__sfp_lock_acquire>
 80230d4:	6a23      	ldr	r3, [r4, #32]
 80230d6:	b11b      	cbz	r3, 80230e0 <__sinit+0x14>
 80230d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80230dc:	f7ff bff0 	b.w	80230c0 <__sfp_lock_release>
 80230e0:	4b04      	ldr	r3, [pc, #16]	; (80230f4 <__sinit+0x28>)
 80230e2:	6223      	str	r3, [r4, #32]
 80230e4:	4b04      	ldr	r3, [pc, #16]	; (80230f8 <__sinit+0x2c>)
 80230e6:	681b      	ldr	r3, [r3, #0]
 80230e8:	2b00      	cmp	r3, #0
 80230ea:	d1f5      	bne.n	80230d8 <__sinit+0xc>
 80230ec:	f7ff ffc4 	bl	8023078 <global_stdio_init.part.0>
 80230f0:	e7f2      	b.n	80230d8 <__sinit+0xc>
 80230f2:	bf00      	nop
 80230f4:	08023039 	.word	0x08023039
 80230f8:	2401e594 	.word	0x2401e594

080230fc <fiprintf>:
 80230fc:	b40e      	push	{r1, r2, r3}
 80230fe:	b503      	push	{r0, r1, lr}
 8023100:	4601      	mov	r1, r0
 8023102:	ab03      	add	r3, sp, #12
 8023104:	4805      	ldr	r0, [pc, #20]	; (802311c <fiprintf+0x20>)
 8023106:	f853 2b04 	ldr.w	r2, [r3], #4
 802310a:	6800      	ldr	r0, [r0, #0]
 802310c:	9301      	str	r3, [sp, #4]
 802310e:	f001 fc09 	bl	8024924 <_vfiprintf_r>
 8023112:	b002      	add	sp, #8
 8023114:	f85d eb04 	ldr.w	lr, [sp], #4
 8023118:	b003      	add	sp, #12
 802311a:	4770      	bx	lr
 802311c:	240000b4 	.word	0x240000b4

08023120 <_fwalk_sglue>:
 8023120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023124:	4607      	mov	r7, r0
 8023126:	4688      	mov	r8, r1
 8023128:	4614      	mov	r4, r2
 802312a:	2600      	movs	r6, #0
 802312c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023130:	f1b9 0901 	subs.w	r9, r9, #1
 8023134:	d505      	bpl.n	8023142 <_fwalk_sglue+0x22>
 8023136:	6824      	ldr	r4, [r4, #0]
 8023138:	2c00      	cmp	r4, #0
 802313a:	d1f7      	bne.n	802312c <_fwalk_sglue+0xc>
 802313c:	4630      	mov	r0, r6
 802313e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023142:	89ab      	ldrh	r3, [r5, #12]
 8023144:	2b01      	cmp	r3, #1
 8023146:	d907      	bls.n	8023158 <_fwalk_sglue+0x38>
 8023148:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802314c:	3301      	adds	r3, #1
 802314e:	d003      	beq.n	8023158 <_fwalk_sglue+0x38>
 8023150:	4629      	mov	r1, r5
 8023152:	4638      	mov	r0, r7
 8023154:	47c0      	blx	r8
 8023156:	4306      	orrs	r6, r0
 8023158:	3568      	adds	r5, #104	; 0x68
 802315a:	e7e9      	b.n	8023130 <_fwalk_sglue+0x10>

0802315c <__sread>:
 802315c:	b510      	push	{r4, lr}
 802315e:	460c      	mov	r4, r1
 8023160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023164:	f000 f8dc 	bl	8023320 <_read_r>
 8023168:	2800      	cmp	r0, #0
 802316a:	bfab      	itete	ge
 802316c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802316e:	89a3      	ldrhlt	r3, [r4, #12]
 8023170:	181b      	addge	r3, r3, r0
 8023172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023176:	bfac      	ite	ge
 8023178:	6563      	strge	r3, [r4, #84]	; 0x54
 802317a:	81a3      	strhlt	r3, [r4, #12]
 802317c:	bd10      	pop	{r4, pc}

0802317e <__swrite>:
 802317e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023182:	461f      	mov	r7, r3
 8023184:	898b      	ldrh	r3, [r1, #12]
 8023186:	05db      	lsls	r3, r3, #23
 8023188:	4605      	mov	r5, r0
 802318a:	460c      	mov	r4, r1
 802318c:	4616      	mov	r6, r2
 802318e:	d505      	bpl.n	802319c <__swrite+0x1e>
 8023190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023194:	2302      	movs	r3, #2
 8023196:	2200      	movs	r2, #0
 8023198:	f000 f8b0 	bl	80232fc <_lseek_r>
 802319c:	89a3      	ldrh	r3, [r4, #12]
 802319e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80231a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80231a6:	81a3      	strh	r3, [r4, #12]
 80231a8:	4632      	mov	r2, r6
 80231aa:	463b      	mov	r3, r7
 80231ac:	4628      	mov	r0, r5
 80231ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80231b2:	f000 b8c7 	b.w	8023344 <_write_r>

080231b6 <__sseek>:
 80231b6:	b510      	push	{r4, lr}
 80231b8:	460c      	mov	r4, r1
 80231ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80231be:	f000 f89d 	bl	80232fc <_lseek_r>
 80231c2:	1c43      	adds	r3, r0, #1
 80231c4:	89a3      	ldrh	r3, [r4, #12]
 80231c6:	bf15      	itete	ne
 80231c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80231ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80231ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80231d2:	81a3      	strheq	r3, [r4, #12]
 80231d4:	bf18      	it	ne
 80231d6:	81a3      	strhne	r3, [r4, #12]
 80231d8:	bd10      	pop	{r4, pc}

080231da <__sclose>:
 80231da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80231de:	f000 b827 	b.w	8023230 <_close_r>

080231e2 <memmove>:
 80231e2:	4288      	cmp	r0, r1
 80231e4:	b510      	push	{r4, lr}
 80231e6:	eb01 0402 	add.w	r4, r1, r2
 80231ea:	d902      	bls.n	80231f2 <memmove+0x10>
 80231ec:	4284      	cmp	r4, r0
 80231ee:	4623      	mov	r3, r4
 80231f0:	d807      	bhi.n	8023202 <memmove+0x20>
 80231f2:	1e43      	subs	r3, r0, #1
 80231f4:	42a1      	cmp	r1, r4
 80231f6:	d008      	beq.n	802320a <memmove+0x28>
 80231f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80231fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023200:	e7f8      	b.n	80231f4 <memmove+0x12>
 8023202:	4402      	add	r2, r0
 8023204:	4601      	mov	r1, r0
 8023206:	428a      	cmp	r2, r1
 8023208:	d100      	bne.n	802320c <memmove+0x2a>
 802320a:	bd10      	pop	{r4, pc}
 802320c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023210:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023214:	e7f7      	b.n	8023206 <memmove+0x24>

08023216 <memset>:
 8023216:	4402      	add	r2, r0
 8023218:	4603      	mov	r3, r0
 802321a:	4293      	cmp	r3, r2
 802321c:	d100      	bne.n	8023220 <memset+0xa>
 802321e:	4770      	bx	lr
 8023220:	f803 1b01 	strb.w	r1, [r3], #1
 8023224:	e7f9      	b.n	802321a <memset+0x4>
	...

08023228 <_localeconv_r>:
 8023228:	4800      	ldr	r0, [pc, #0]	; (802322c <_localeconv_r+0x4>)
 802322a:	4770      	bx	lr
 802322c:	240001a8 	.word	0x240001a8

08023230 <_close_r>:
 8023230:	b538      	push	{r3, r4, r5, lr}
 8023232:	4d06      	ldr	r5, [pc, #24]	; (802324c <_close_r+0x1c>)
 8023234:	2300      	movs	r3, #0
 8023236:	4604      	mov	r4, r0
 8023238:	4608      	mov	r0, r1
 802323a:	602b      	str	r3, [r5, #0]
 802323c:	f7de fed3 	bl	8001fe6 <_close>
 8023240:	1c43      	adds	r3, r0, #1
 8023242:	d102      	bne.n	802324a <_close_r+0x1a>
 8023244:	682b      	ldr	r3, [r5, #0]
 8023246:	b103      	cbz	r3, 802324a <_close_r+0x1a>
 8023248:	6023      	str	r3, [r4, #0]
 802324a:	bd38      	pop	{r3, r4, r5, pc}
 802324c:	2401e598 	.word	0x2401e598

08023250 <_reclaim_reent>:
 8023250:	4b29      	ldr	r3, [pc, #164]	; (80232f8 <_reclaim_reent+0xa8>)
 8023252:	681b      	ldr	r3, [r3, #0]
 8023254:	4283      	cmp	r3, r0
 8023256:	b570      	push	{r4, r5, r6, lr}
 8023258:	4604      	mov	r4, r0
 802325a:	d04b      	beq.n	80232f4 <_reclaim_reent+0xa4>
 802325c:	69c3      	ldr	r3, [r0, #28]
 802325e:	b143      	cbz	r3, 8023272 <_reclaim_reent+0x22>
 8023260:	68db      	ldr	r3, [r3, #12]
 8023262:	2b00      	cmp	r3, #0
 8023264:	d144      	bne.n	80232f0 <_reclaim_reent+0xa0>
 8023266:	69e3      	ldr	r3, [r4, #28]
 8023268:	6819      	ldr	r1, [r3, #0]
 802326a:	b111      	cbz	r1, 8023272 <_reclaim_reent+0x22>
 802326c:	4620      	mov	r0, r4
 802326e:	f000 feb3 	bl	8023fd8 <_free_r>
 8023272:	6961      	ldr	r1, [r4, #20]
 8023274:	b111      	cbz	r1, 802327c <_reclaim_reent+0x2c>
 8023276:	4620      	mov	r0, r4
 8023278:	f000 feae 	bl	8023fd8 <_free_r>
 802327c:	69e1      	ldr	r1, [r4, #28]
 802327e:	b111      	cbz	r1, 8023286 <_reclaim_reent+0x36>
 8023280:	4620      	mov	r0, r4
 8023282:	f000 fea9 	bl	8023fd8 <_free_r>
 8023286:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8023288:	b111      	cbz	r1, 8023290 <_reclaim_reent+0x40>
 802328a:	4620      	mov	r0, r4
 802328c:	f000 fea4 	bl	8023fd8 <_free_r>
 8023290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023292:	b111      	cbz	r1, 802329a <_reclaim_reent+0x4a>
 8023294:	4620      	mov	r0, r4
 8023296:	f000 fe9f 	bl	8023fd8 <_free_r>
 802329a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802329c:	b111      	cbz	r1, 80232a4 <_reclaim_reent+0x54>
 802329e:	4620      	mov	r0, r4
 80232a0:	f000 fe9a 	bl	8023fd8 <_free_r>
 80232a4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80232a6:	b111      	cbz	r1, 80232ae <_reclaim_reent+0x5e>
 80232a8:	4620      	mov	r0, r4
 80232aa:	f000 fe95 	bl	8023fd8 <_free_r>
 80232ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80232b0:	b111      	cbz	r1, 80232b8 <_reclaim_reent+0x68>
 80232b2:	4620      	mov	r0, r4
 80232b4:	f000 fe90 	bl	8023fd8 <_free_r>
 80232b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80232ba:	b111      	cbz	r1, 80232c2 <_reclaim_reent+0x72>
 80232bc:	4620      	mov	r0, r4
 80232be:	f000 fe8b 	bl	8023fd8 <_free_r>
 80232c2:	6a23      	ldr	r3, [r4, #32]
 80232c4:	b1b3      	cbz	r3, 80232f4 <_reclaim_reent+0xa4>
 80232c6:	4620      	mov	r0, r4
 80232c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80232cc:	4718      	bx	r3
 80232ce:	5949      	ldr	r1, [r1, r5]
 80232d0:	b941      	cbnz	r1, 80232e4 <_reclaim_reent+0x94>
 80232d2:	3504      	adds	r5, #4
 80232d4:	69e3      	ldr	r3, [r4, #28]
 80232d6:	2d80      	cmp	r5, #128	; 0x80
 80232d8:	68d9      	ldr	r1, [r3, #12]
 80232da:	d1f8      	bne.n	80232ce <_reclaim_reent+0x7e>
 80232dc:	4620      	mov	r0, r4
 80232de:	f000 fe7b 	bl	8023fd8 <_free_r>
 80232e2:	e7c0      	b.n	8023266 <_reclaim_reent+0x16>
 80232e4:	680e      	ldr	r6, [r1, #0]
 80232e6:	4620      	mov	r0, r4
 80232e8:	f000 fe76 	bl	8023fd8 <_free_r>
 80232ec:	4631      	mov	r1, r6
 80232ee:	e7ef      	b.n	80232d0 <_reclaim_reent+0x80>
 80232f0:	2500      	movs	r5, #0
 80232f2:	e7ef      	b.n	80232d4 <_reclaim_reent+0x84>
 80232f4:	bd70      	pop	{r4, r5, r6, pc}
 80232f6:	bf00      	nop
 80232f8:	240000b4 	.word	0x240000b4

080232fc <_lseek_r>:
 80232fc:	b538      	push	{r3, r4, r5, lr}
 80232fe:	4d07      	ldr	r5, [pc, #28]	; (802331c <_lseek_r+0x20>)
 8023300:	4604      	mov	r4, r0
 8023302:	4608      	mov	r0, r1
 8023304:	4611      	mov	r1, r2
 8023306:	2200      	movs	r2, #0
 8023308:	602a      	str	r2, [r5, #0]
 802330a:	461a      	mov	r2, r3
 802330c:	f7de fe92 	bl	8002034 <_lseek>
 8023310:	1c43      	adds	r3, r0, #1
 8023312:	d102      	bne.n	802331a <_lseek_r+0x1e>
 8023314:	682b      	ldr	r3, [r5, #0]
 8023316:	b103      	cbz	r3, 802331a <_lseek_r+0x1e>
 8023318:	6023      	str	r3, [r4, #0]
 802331a:	bd38      	pop	{r3, r4, r5, pc}
 802331c:	2401e598 	.word	0x2401e598

08023320 <_read_r>:
 8023320:	b538      	push	{r3, r4, r5, lr}
 8023322:	4d07      	ldr	r5, [pc, #28]	; (8023340 <_read_r+0x20>)
 8023324:	4604      	mov	r4, r0
 8023326:	4608      	mov	r0, r1
 8023328:	4611      	mov	r1, r2
 802332a:	2200      	movs	r2, #0
 802332c:	602a      	str	r2, [r5, #0]
 802332e:	461a      	mov	r2, r3
 8023330:	f7de fe20 	bl	8001f74 <_read>
 8023334:	1c43      	adds	r3, r0, #1
 8023336:	d102      	bne.n	802333e <_read_r+0x1e>
 8023338:	682b      	ldr	r3, [r5, #0]
 802333a:	b103      	cbz	r3, 802333e <_read_r+0x1e>
 802333c:	6023      	str	r3, [r4, #0]
 802333e:	bd38      	pop	{r3, r4, r5, pc}
 8023340:	2401e598 	.word	0x2401e598

08023344 <_write_r>:
 8023344:	b538      	push	{r3, r4, r5, lr}
 8023346:	4d07      	ldr	r5, [pc, #28]	; (8023364 <_write_r+0x20>)
 8023348:	4604      	mov	r4, r0
 802334a:	4608      	mov	r0, r1
 802334c:	4611      	mov	r1, r2
 802334e:	2200      	movs	r2, #0
 8023350:	602a      	str	r2, [r5, #0]
 8023352:	461a      	mov	r2, r3
 8023354:	f7de fe2b 	bl	8001fae <_write>
 8023358:	1c43      	adds	r3, r0, #1
 802335a:	d102      	bne.n	8023362 <_write_r+0x1e>
 802335c:	682b      	ldr	r3, [r5, #0]
 802335e:	b103      	cbz	r3, 8023362 <_write_r+0x1e>
 8023360:	6023      	str	r3, [r4, #0]
 8023362:	bd38      	pop	{r3, r4, r5, pc}
 8023364:	2401e598 	.word	0x2401e598

08023368 <__errno>:
 8023368:	4b01      	ldr	r3, [pc, #4]	; (8023370 <__errno+0x8>)
 802336a:	6818      	ldr	r0, [r3, #0]
 802336c:	4770      	bx	lr
 802336e:	bf00      	nop
 8023370:	240000b4 	.word	0x240000b4

08023374 <__libc_init_array>:
 8023374:	b570      	push	{r4, r5, r6, lr}
 8023376:	4d0d      	ldr	r5, [pc, #52]	; (80233ac <__libc_init_array+0x38>)
 8023378:	4c0d      	ldr	r4, [pc, #52]	; (80233b0 <__libc_init_array+0x3c>)
 802337a:	1b64      	subs	r4, r4, r5
 802337c:	10a4      	asrs	r4, r4, #2
 802337e:	2600      	movs	r6, #0
 8023380:	42a6      	cmp	r6, r4
 8023382:	d109      	bne.n	8023398 <__libc_init_array+0x24>
 8023384:	4d0b      	ldr	r5, [pc, #44]	; (80233b4 <__libc_init_array+0x40>)
 8023386:	4c0c      	ldr	r4, [pc, #48]	; (80233b8 <__libc_init_array+0x44>)
 8023388:	f001 fe38 	bl	8024ffc <_init>
 802338c:	1b64      	subs	r4, r4, r5
 802338e:	10a4      	asrs	r4, r4, #2
 8023390:	2600      	movs	r6, #0
 8023392:	42a6      	cmp	r6, r4
 8023394:	d105      	bne.n	80233a2 <__libc_init_array+0x2e>
 8023396:	bd70      	pop	{r4, r5, r6, pc}
 8023398:	f855 3b04 	ldr.w	r3, [r5], #4
 802339c:	4798      	blx	r3
 802339e:	3601      	adds	r6, #1
 80233a0:	e7ee      	b.n	8023380 <__libc_init_array+0xc>
 80233a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80233a6:	4798      	blx	r3
 80233a8:	3601      	adds	r6, #1
 80233aa:	e7f2      	b.n	8023392 <__libc_init_array+0x1e>
 80233ac:	08026750 	.word	0x08026750
 80233b0:	08026750 	.word	0x08026750
 80233b4:	08026750 	.word	0x08026750
 80233b8:	08026768 	.word	0x08026768

080233bc <__retarget_lock_init_recursive>:
 80233bc:	4770      	bx	lr

080233be <__retarget_lock_acquire_recursive>:
 80233be:	4770      	bx	lr

080233c0 <__retarget_lock_release_recursive>:
 80233c0:	4770      	bx	lr

080233c2 <memcpy>:
 80233c2:	440a      	add	r2, r1
 80233c4:	4291      	cmp	r1, r2
 80233c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80233ca:	d100      	bne.n	80233ce <memcpy+0xc>
 80233cc:	4770      	bx	lr
 80233ce:	b510      	push	{r4, lr}
 80233d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80233d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80233d8:	4291      	cmp	r1, r2
 80233da:	d1f9      	bne.n	80233d0 <memcpy+0xe>
 80233dc:	bd10      	pop	{r4, pc}

080233de <abort>:
 80233de:	b508      	push	{r3, lr}
 80233e0:	2006      	movs	r0, #6
 80233e2:	f001 fd25 	bl	8024e30 <raise>
 80233e6:	2001      	movs	r0, #1
 80233e8:	f7de fdba 	bl	8001f60 <_exit>

080233ec <quorem>:
 80233ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233f0:	6903      	ldr	r3, [r0, #16]
 80233f2:	690c      	ldr	r4, [r1, #16]
 80233f4:	42a3      	cmp	r3, r4
 80233f6:	4607      	mov	r7, r0
 80233f8:	db7e      	blt.n	80234f8 <quorem+0x10c>
 80233fa:	3c01      	subs	r4, #1
 80233fc:	f101 0814 	add.w	r8, r1, #20
 8023400:	f100 0514 	add.w	r5, r0, #20
 8023404:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8023408:	9301      	str	r3, [sp, #4]
 802340a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802340e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8023412:	3301      	adds	r3, #1
 8023414:	429a      	cmp	r2, r3
 8023416:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802341a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 802341e:	fbb2 f6f3 	udiv	r6, r2, r3
 8023422:	d331      	bcc.n	8023488 <quorem+0x9c>
 8023424:	f04f 0e00 	mov.w	lr, #0
 8023428:	4640      	mov	r0, r8
 802342a:	46ac      	mov	ip, r5
 802342c:	46f2      	mov	sl, lr
 802342e:	f850 2b04 	ldr.w	r2, [r0], #4
 8023432:	b293      	uxth	r3, r2
 8023434:	fb06 e303 	mla	r3, r6, r3, lr
 8023438:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802343c:	0c1a      	lsrs	r2, r3, #16
 802343e:	b29b      	uxth	r3, r3
 8023440:	ebaa 0303 	sub.w	r3, sl, r3
 8023444:	f8dc a000 	ldr.w	sl, [ip]
 8023448:	fa13 f38a 	uxtah	r3, r3, sl
 802344c:	fb06 220e 	mla	r2, r6, lr, r2
 8023450:	9300      	str	r3, [sp, #0]
 8023452:	9b00      	ldr	r3, [sp, #0]
 8023454:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8023458:	b292      	uxth	r2, r2
 802345a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 802345e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8023462:	f8bd 3000 	ldrh.w	r3, [sp]
 8023466:	4581      	cmp	r9, r0
 8023468:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802346c:	f84c 3b04 	str.w	r3, [ip], #4
 8023470:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8023474:	d2db      	bcs.n	802342e <quorem+0x42>
 8023476:	f855 300b 	ldr.w	r3, [r5, fp]
 802347a:	b92b      	cbnz	r3, 8023488 <quorem+0x9c>
 802347c:	9b01      	ldr	r3, [sp, #4]
 802347e:	3b04      	subs	r3, #4
 8023480:	429d      	cmp	r5, r3
 8023482:	461a      	mov	r2, r3
 8023484:	d32c      	bcc.n	80234e0 <quorem+0xf4>
 8023486:	613c      	str	r4, [r7, #16]
 8023488:	4638      	mov	r0, r7
 802348a:	f001 f921 	bl	80246d0 <__mcmp>
 802348e:	2800      	cmp	r0, #0
 8023490:	db22      	blt.n	80234d8 <quorem+0xec>
 8023492:	3601      	adds	r6, #1
 8023494:	4629      	mov	r1, r5
 8023496:	2000      	movs	r0, #0
 8023498:	f858 2b04 	ldr.w	r2, [r8], #4
 802349c:	f8d1 c000 	ldr.w	ip, [r1]
 80234a0:	b293      	uxth	r3, r2
 80234a2:	1ac3      	subs	r3, r0, r3
 80234a4:	0c12      	lsrs	r2, r2, #16
 80234a6:	fa13 f38c 	uxtah	r3, r3, ip
 80234aa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80234ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80234b2:	b29b      	uxth	r3, r3
 80234b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80234b8:	45c1      	cmp	r9, r8
 80234ba:	f841 3b04 	str.w	r3, [r1], #4
 80234be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80234c2:	d2e9      	bcs.n	8023498 <quorem+0xac>
 80234c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80234c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80234cc:	b922      	cbnz	r2, 80234d8 <quorem+0xec>
 80234ce:	3b04      	subs	r3, #4
 80234d0:	429d      	cmp	r5, r3
 80234d2:	461a      	mov	r2, r3
 80234d4:	d30a      	bcc.n	80234ec <quorem+0x100>
 80234d6:	613c      	str	r4, [r7, #16]
 80234d8:	4630      	mov	r0, r6
 80234da:	b003      	add	sp, #12
 80234dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234e0:	6812      	ldr	r2, [r2, #0]
 80234e2:	3b04      	subs	r3, #4
 80234e4:	2a00      	cmp	r2, #0
 80234e6:	d1ce      	bne.n	8023486 <quorem+0x9a>
 80234e8:	3c01      	subs	r4, #1
 80234ea:	e7c9      	b.n	8023480 <quorem+0x94>
 80234ec:	6812      	ldr	r2, [r2, #0]
 80234ee:	3b04      	subs	r3, #4
 80234f0:	2a00      	cmp	r2, #0
 80234f2:	d1f0      	bne.n	80234d6 <quorem+0xea>
 80234f4:	3c01      	subs	r4, #1
 80234f6:	e7eb      	b.n	80234d0 <quorem+0xe4>
 80234f8:	2000      	movs	r0, #0
 80234fa:	e7ee      	b.n	80234da <quorem+0xee>
 80234fc:	0000      	movs	r0, r0
	...

08023500 <_dtoa_r>:
 8023500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023504:	ed2d 8b02 	vpush	{d8}
 8023508:	69c5      	ldr	r5, [r0, #28]
 802350a:	b091      	sub	sp, #68	; 0x44
 802350c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8023510:	ec59 8b10 	vmov	r8, r9, d0
 8023514:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8023516:	9106      	str	r1, [sp, #24]
 8023518:	4606      	mov	r6, r0
 802351a:	9208      	str	r2, [sp, #32]
 802351c:	930c      	str	r3, [sp, #48]	; 0x30
 802351e:	b975      	cbnz	r5, 802353e <_dtoa_r+0x3e>
 8023520:	2010      	movs	r0, #16
 8023522:	f000 fda5 	bl	8024070 <malloc>
 8023526:	4602      	mov	r2, r0
 8023528:	61f0      	str	r0, [r6, #28]
 802352a:	b920      	cbnz	r0, 8023536 <_dtoa_r+0x36>
 802352c:	4ba6      	ldr	r3, [pc, #664]	; (80237c8 <_dtoa_r+0x2c8>)
 802352e:	21ef      	movs	r1, #239	; 0xef
 8023530:	48a6      	ldr	r0, [pc, #664]	; (80237cc <_dtoa_r+0x2cc>)
 8023532:	f7ff f8e5 	bl	8022700 <__assert_func>
 8023536:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802353a:	6005      	str	r5, [r0, #0]
 802353c:	60c5      	str	r5, [r0, #12]
 802353e:	69f3      	ldr	r3, [r6, #28]
 8023540:	6819      	ldr	r1, [r3, #0]
 8023542:	b151      	cbz	r1, 802355a <_dtoa_r+0x5a>
 8023544:	685a      	ldr	r2, [r3, #4]
 8023546:	604a      	str	r2, [r1, #4]
 8023548:	2301      	movs	r3, #1
 802354a:	4093      	lsls	r3, r2
 802354c:	608b      	str	r3, [r1, #8]
 802354e:	4630      	mov	r0, r6
 8023550:	f000 fe82 	bl	8024258 <_Bfree>
 8023554:	69f3      	ldr	r3, [r6, #28]
 8023556:	2200      	movs	r2, #0
 8023558:	601a      	str	r2, [r3, #0]
 802355a:	f1b9 0300 	subs.w	r3, r9, #0
 802355e:	bfbb      	ittet	lt
 8023560:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8023564:	9303      	strlt	r3, [sp, #12]
 8023566:	2300      	movge	r3, #0
 8023568:	2201      	movlt	r2, #1
 802356a:	bfac      	ite	ge
 802356c:	6023      	strge	r3, [r4, #0]
 802356e:	6022      	strlt	r2, [r4, #0]
 8023570:	4b97      	ldr	r3, [pc, #604]	; (80237d0 <_dtoa_r+0x2d0>)
 8023572:	9c03      	ldr	r4, [sp, #12]
 8023574:	43a3      	bics	r3, r4
 8023576:	d11c      	bne.n	80235b2 <_dtoa_r+0xb2>
 8023578:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802357a:	f242 730f 	movw	r3, #9999	; 0x270f
 802357e:	6013      	str	r3, [r2, #0]
 8023580:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8023584:	ea53 0308 	orrs.w	r3, r3, r8
 8023588:	f000 84fb 	beq.w	8023f82 <_dtoa_r+0xa82>
 802358c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802358e:	b963      	cbnz	r3, 80235aa <_dtoa_r+0xaa>
 8023590:	4b90      	ldr	r3, [pc, #576]	; (80237d4 <_dtoa_r+0x2d4>)
 8023592:	e020      	b.n	80235d6 <_dtoa_r+0xd6>
 8023594:	4b90      	ldr	r3, [pc, #576]	; (80237d8 <_dtoa_r+0x2d8>)
 8023596:	9301      	str	r3, [sp, #4]
 8023598:	3308      	adds	r3, #8
 802359a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802359c:	6013      	str	r3, [r2, #0]
 802359e:	9801      	ldr	r0, [sp, #4]
 80235a0:	b011      	add	sp, #68	; 0x44
 80235a2:	ecbd 8b02 	vpop	{d8}
 80235a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235aa:	4b8a      	ldr	r3, [pc, #552]	; (80237d4 <_dtoa_r+0x2d4>)
 80235ac:	9301      	str	r3, [sp, #4]
 80235ae:	3303      	adds	r3, #3
 80235b0:	e7f3      	b.n	802359a <_dtoa_r+0x9a>
 80235b2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80235b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80235ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80235be:	d10c      	bne.n	80235da <_dtoa_r+0xda>
 80235c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80235c2:	2301      	movs	r3, #1
 80235c4:	6013      	str	r3, [r2, #0]
 80235c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80235c8:	2b00      	cmp	r3, #0
 80235ca:	f000 84d7 	beq.w	8023f7c <_dtoa_r+0xa7c>
 80235ce:	4b83      	ldr	r3, [pc, #524]	; (80237dc <_dtoa_r+0x2dc>)
 80235d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80235d2:	6013      	str	r3, [r2, #0]
 80235d4:	3b01      	subs	r3, #1
 80235d6:	9301      	str	r3, [sp, #4]
 80235d8:	e7e1      	b.n	802359e <_dtoa_r+0x9e>
 80235da:	aa0e      	add	r2, sp, #56	; 0x38
 80235dc:	a90f      	add	r1, sp, #60	; 0x3c
 80235de:	4630      	mov	r0, r6
 80235e0:	eeb0 0b48 	vmov.f64	d0, d8
 80235e4:	f001 f91a 	bl	802481c <__d2b>
 80235e8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80235ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80235ee:	4605      	mov	r5, r0
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	d046      	beq.n	8023682 <_dtoa_r+0x182>
 80235f4:	eeb0 7b48 	vmov.f64	d7, d8
 80235f8:	ee18 1a90 	vmov	r1, s17
 80235fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8023600:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8023604:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8023608:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802360c:	2000      	movs	r0, #0
 802360e:	ee07 1a90 	vmov	s15, r1
 8023612:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8023616:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80237b0 <_dtoa_r+0x2b0>
 802361a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802361e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80237b8 <_dtoa_r+0x2b8>
 8023622:	eea7 6b05 	vfma.f64	d6, d7, d5
 8023626:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80237c0 <_dtoa_r+0x2c0>
 802362a:	ee07 3a90 	vmov	s15, r3
 802362e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8023632:	eeb0 7b46 	vmov.f64	d7, d6
 8023636:	eea4 7b05 	vfma.f64	d7, d4, d5
 802363a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802363e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8023642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023646:	ee16 ba90 	vmov	fp, s13
 802364a:	9009      	str	r0, [sp, #36]	; 0x24
 802364c:	d508      	bpl.n	8023660 <_dtoa_r+0x160>
 802364e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8023652:	eeb4 6b47 	vcmp.f64	d6, d7
 8023656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802365a:	bf18      	it	ne
 802365c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8023660:	f1bb 0f16 	cmp.w	fp, #22
 8023664:	d82b      	bhi.n	80236be <_dtoa_r+0x1be>
 8023666:	495e      	ldr	r1, [pc, #376]	; (80237e0 <_dtoa_r+0x2e0>)
 8023668:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 802366c:	ed91 7b00 	vldr	d7, [r1]
 8023670:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8023674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023678:	d501      	bpl.n	802367e <_dtoa_r+0x17e>
 802367a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802367e:	2100      	movs	r1, #0
 8023680:	e01e      	b.n	80236c0 <_dtoa_r+0x1c0>
 8023682:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8023684:	4413      	add	r3, r2
 8023686:	f203 4132 	addw	r1, r3, #1074	; 0x432
 802368a:	2920      	cmp	r1, #32
 802368c:	bfc1      	itttt	gt
 802368e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8023692:	408c      	lslgt	r4, r1
 8023694:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8023698:	fa28 f101 	lsrgt.w	r1, r8, r1
 802369c:	bfd6      	itet	le
 802369e:	f1c1 0120 	rsble	r1, r1, #32
 80236a2:	4321      	orrgt	r1, r4
 80236a4:	fa08 f101 	lslle.w	r1, r8, r1
 80236a8:	ee07 1a90 	vmov	s15, r1
 80236ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80236b0:	3b01      	subs	r3, #1
 80236b2:	ee17 1a90 	vmov	r1, s15
 80236b6:	2001      	movs	r0, #1
 80236b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80236bc:	e7a7      	b.n	802360e <_dtoa_r+0x10e>
 80236be:	2101      	movs	r1, #1
 80236c0:	1ad2      	subs	r2, r2, r3
 80236c2:	1e53      	subs	r3, r2, #1
 80236c4:	9305      	str	r3, [sp, #20]
 80236c6:	bf45      	ittet	mi
 80236c8:	f1c2 0301 	rsbmi	r3, r2, #1
 80236cc:	9304      	strmi	r3, [sp, #16]
 80236ce:	2300      	movpl	r3, #0
 80236d0:	2300      	movmi	r3, #0
 80236d2:	bf4c      	ite	mi
 80236d4:	9305      	strmi	r3, [sp, #20]
 80236d6:	9304      	strpl	r3, [sp, #16]
 80236d8:	f1bb 0f00 	cmp.w	fp, #0
 80236dc:	910b      	str	r1, [sp, #44]	; 0x2c
 80236de:	db18      	blt.n	8023712 <_dtoa_r+0x212>
 80236e0:	9b05      	ldr	r3, [sp, #20]
 80236e2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80236e6:	445b      	add	r3, fp
 80236e8:	9305      	str	r3, [sp, #20]
 80236ea:	2300      	movs	r3, #0
 80236ec:	9a06      	ldr	r2, [sp, #24]
 80236ee:	2a09      	cmp	r2, #9
 80236f0:	d848      	bhi.n	8023784 <_dtoa_r+0x284>
 80236f2:	2a05      	cmp	r2, #5
 80236f4:	bfc4      	itt	gt
 80236f6:	3a04      	subgt	r2, #4
 80236f8:	9206      	strgt	r2, [sp, #24]
 80236fa:	9a06      	ldr	r2, [sp, #24]
 80236fc:	f1a2 0202 	sub.w	r2, r2, #2
 8023700:	bfcc      	ite	gt
 8023702:	2400      	movgt	r4, #0
 8023704:	2401      	movle	r4, #1
 8023706:	2a03      	cmp	r2, #3
 8023708:	d847      	bhi.n	802379a <_dtoa_r+0x29a>
 802370a:	e8df f002 	tbb	[pc, r2]
 802370e:	2d0b      	.short	0x2d0b
 8023710:	392b      	.short	0x392b
 8023712:	9b04      	ldr	r3, [sp, #16]
 8023714:	2200      	movs	r2, #0
 8023716:	eba3 030b 	sub.w	r3, r3, fp
 802371a:	9304      	str	r3, [sp, #16]
 802371c:	920a      	str	r2, [sp, #40]	; 0x28
 802371e:	f1cb 0300 	rsb	r3, fp, #0
 8023722:	e7e3      	b.n	80236ec <_dtoa_r+0x1ec>
 8023724:	2200      	movs	r2, #0
 8023726:	9207      	str	r2, [sp, #28]
 8023728:	9a08      	ldr	r2, [sp, #32]
 802372a:	2a00      	cmp	r2, #0
 802372c:	dc38      	bgt.n	80237a0 <_dtoa_r+0x2a0>
 802372e:	f04f 0a01 	mov.w	sl, #1
 8023732:	46d1      	mov	r9, sl
 8023734:	4652      	mov	r2, sl
 8023736:	f8cd a020 	str.w	sl, [sp, #32]
 802373a:	69f7      	ldr	r7, [r6, #28]
 802373c:	2100      	movs	r1, #0
 802373e:	2004      	movs	r0, #4
 8023740:	f100 0c14 	add.w	ip, r0, #20
 8023744:	4594      	cmp	ip, r2
 8023746:	d930      	bls.n	80237aa <_dtoa_r+0x2aa>
 8023748:	6079      	str	r1, [r7, #4]
 802374a:	4630      	mov	r0, r6
 802374c:	930d      	str	r3, [sp, #52]	; 0x34
 802374e:	f000 fd43 	bl	80241d8 <_Balloc>
 8023752:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023754:	9001      	str	r0, [sp, #4]
 8023756:	4602      	mov	r2, r0
 8023758:	2800      	cmp	r0, #0
 802375a:	d145      	bne.n	80237e8 <_dtoa_r+0x2e8>
 802375c:	4b21      	ldr	r3, [pc, #132]	; (80237e4 <_dtoa_r+0x2e4>)
 802375e:	f240 11af 	movw	r1, #431	; 0x1af
 8023762:	e6e5      	b.n	8023530 <_dtoa_r+0x30>
 8023764:	2201      	movs	r2, #1
 8023766:	e7de      	b.n	8023726 <_dtoa_r+0x226>
 8023768:	2200      	movs	r2, #0
 802376a:	9207      	str	r2, [sp, #28]
 802376c:	9a08      	ldr	r2, [sp, #32]
 802376e:	eb0b 0a02 	add.w	sl, fp, r2
 8023772:	f10a 0901 	add.w	r9, sl, #1
 8023776:	464a      	mov	r2, r9
 8023778:	2a01      	cmp	r2, #1
 802377a:	bfb8      	it	lt
 802377c:	2201      	movlt	r2, #1
 802377e:	e7dc      	b.n	802373a <_dtoa_r+0x23a>
 8023780:	2201      	movs	r2, #1
 8023782:	e7f2      	b.n	802376a <_dtoa_r+0x26a>
 8023784:	2401      	movs	r4, #1
 8023786:	2200      	movs	r2, #0
 8023788:	e9cd 2406 	strd	r2, r4, [sp, #24]
 802378c:	f04f 3aff 	mov.w	sl, #4294967295
 8023790:	2100      	movs	r1, #0
 8023792:	46d1      	mov	r9, sl
 8023794:	2212      	movs	r2, #18
 8023796:	9108      	str	r1, [sp, #32]
 8023798:	e7cf      	b.n	802373a <_dtoa_r+0x23a>
 802379a:	2201      	movs	r2, #1
 802379c:	9207      	str	r2, [sp, #28]
 802379e:	e7f5      	b.n	802378c <_dtoa_r+0x28c>
 80237a0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80237a4:	46d1      	mov	r9, sl
 80237a6:	4652      	mov	r2, sl
 80237a8:	e7c7      	b.n	802373a <_dtoa_r+0x23a>
 80237aa:	3101      	adds	r1, #1
 80237ac:	0040      	lsls	r0, r0, #1
 80237ae:	e7c7      	b.n	8023740 <_dtoa_r+0x240>
 80237b0:	636f4361 	.word	0x636f4361
 80237b4:	3fd287a7 	.word	0x3fd287a7
 80237b8:	8b60c8b3 	.word	0x8b60c8b3
 80237bc:	3fc68a28 	.word	0x3fc68a28
 80237c0:	509f79fb 	.word	0x509f79fb
 80237c4:	3fd34413 	.word	0x3fd34413
 80237c8:	08026455 	.word	0x08026455
 80237cc:	0802646c 	.word	0x0802646c
 80237d0:	7ff00000 	.word	0x7ff00000
 80237d4:	08026451 	.word	0x08026451
 80237d8:	08026448 	.word	0x08026448
 80237dc:	08026425 	.word	0x08026425
 80237e0:	08026558 	.word	0x08026558
 80237e4:	080264c4 	.word	0x080264c4
 80237e8:	69f2      	ldr	r2, [r6, #28]
 80237ea:	9901      	ldr	r1, [sp, #4]
 80237ec:	6011      	str	r1, [r2, #0]
 80237ee:	f1b9 0f0e 	cmp.w	r9, #14
 80237f2:	d86c      	bhi.n	80238ce <_dtoa_r+0x3ce>
 80237f4:	2c00      	cmp	r4, #0
 80237f6:	d06a      	beq.n	80238ce <_dtoa_r+0x3ce>
 80237f8:	f1bb 0f00 	cmp.w	fp, #0
 80237fc:	f340 80a0 	ble.w	8023940 <_dtoa_r+0x440>
 8023800:	4ac1      	ldr	r2, [pc, #772]	; (8023b08 <_dtoa_r+0x608>)
 8023802:	f00b 010f 	and.w	r1, fp, #15
 8023806:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802380a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 802380e:	ed92 7b00 	vldr	d7, [r2]
 8023812:	ea4f 122b 	mov.w	r2, fp, asr #4
 8023816:	f000 8087 	beq.w	8023928 <_dtoa_r+0x428>
 802381a:	49bc      	ldr	r1, [pc, #752]	; (8023b0c <_dtoa_r+0x60c>)
 802381c:	ed91 6b08 	vldr	d6, [r1, #32]
 8023820:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8023824:	ed8d 6b02 	vstr	d6, [sp, #8]
 8023828:	f002 020f 	and.w	r2, r2, #15
 802382c:	2103      	movs	r1, #3
 802382e:	48b7      	ldr	r0, [pc, #732]	; (8023b0c <_dtoa_r+0x60c>)
 8023830:	2a00      	cmp	r2, #0
 8023832:	d17b      	bne.n	802392c <_dtoa_r+0x42c>
 8023834:	ed9d 6b02 	vldr	d6, [sp, #8]
 8023838:	ee86 7b07 	vdiv.f64	d7, d6, d7
 802383c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023842:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023846:	2a00      	cmp	r2, #0
 8023848:	f000 80a0 	beq.w	802398c <_dtoa_r+0x48c>
 802384c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8023850:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8023854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023858:	f140 8098 	bpl.w	802398c <_dtoa_r+0x48c>
 802385c:	f1b9 0f00 	cmp.w	r9, #0
 8023860:	f000 8094 	beq.w	802398c <_dtoa_r+0x48c>
 8023864:	f1ba 0f00 	cmp.w	sl, #0
 8023868:	dd2f      	ble.n	80238ca <_dtoa_r+0x3ca>
 802386a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 802386e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023872:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023876:	f10b 32ff 	add.w	r2, fp, #4294967295
 802387a:	3101      	adds	r1, #1
 802387c:	4654      	mov	r4, sl
 802387e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8023882:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8023886:	ee07 1a90 	vmov	s15, r1
 802388a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 802388e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8023892:	ee15 7a90 	vmov	r7, s11
 8023896:	ec51 0b15 	vmov	r0, r1, d5
 802389a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 802389e:	2c00      	cmp	r4, #0
 80238a0:	d177      	bne.n	8023992 <_dtoa_r+0x492>
 80238a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80238a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80238aa:	ec41 0b17 	vmov	d7, r0, r1
 80238ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80238b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80238b6:	f300 826a 	bgt.w	8023d8e <_dtoa_r+0x88e>
 80238ba:	eeb1 7b47 	vneg.f64	d7, d7
 80238be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80238c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80238c6:	f100 8260 	bmi.w	8023d8a <_dtoa_r+0x88a>
 80238ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80238ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80238d0:	2a00      	cmp	r2, #0
 80238d2:	f2c0 811d 	blt.w	8023b10 <_dtoa_r+0x610>
 80238d6:	f1bb 0f0e 	cmp.w	fp, #14
 80238da:	f300 8119 	bgt.w	8023b10 <_dtoa_r+0x610>
 80238de:	4b8a      	ldr	r3, [pc, #552]	; (8023b08 <_dtoa_r+0x608>)
 80238e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80238e4:	ed93 6b00 	vldr	d6, [r3]
 80238e8:	9b08      	ldr	r3, [sp, #32]
 80238ea:	2b00      	cmp	r3, #0
 80238ec:	f280 80b7 	bge.w	8023a5e <_dtoa_r+0x55e>
 80238f0:	f1b9 0f00 	cmp.w	r9, #0
 80238f4:	f300 80b3 	bgt.w	8023a5e <_dtoa_r+0x55e>
 80238f8:	f040 8246 	bne.w	8023d88 <_dtoa_r+0x888>
 80238fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8023900:	ee26 6b07 	vmul.f64	d6, d6, d7
 8023904:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023908:	eeb4 6bc7 	vcmpe.f64	d6, d7
 802390c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023910:	464c      	mov	r4, r9
 8023912:	464f      	mov	r7, r9
 8023914:	f280 821c 	bge.w	8023d50 <_dtoa_r+0x850>
 8023918:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802391c:	2331      	movs	r3, #49	; 0x31
 802391e:	f808 3b01 	strb.w	r3, [r8], #1
 8023922:	f10b 0b01 	add.w	fp, fp, #1
 8023926:	e218      	b.n	8023d5a <_dtoa_r+0x85a>
 8023928:	2102      	movs	r1, #2
 802392a:	e780      	b.n	802382e <_dtoa_r+0x32e>
 802392c:	07d4      	lsls	r4, r2, #31
 802392e:	d504      	bpl.n	802393a <_dtoa_r+0x43a>
 8023930:	ed90 6b00 	vldr	d6, [r0]
 8023934:	3101      	adds	r1, #1
 8023936:	ee27 7b06 	vmul.f64	d7, d7, d6
 802393a:	1052      	asrs	r2, r2, #1
 802393c:	3008      	adds	r0, #8
 802393e:	e777      	b.n	8023830 <_dtoa_r+0x330>
 8023940:	d022      	beq.n	8023988 <_dtoa_r+0x488>
 8023942:	f1cb 0200 	rsb	r2, fp, #0
 8023946:	4970      	ldr	r1, [pc, #448]	; (8023b08 <_dtoa_r+0x608>)
 8023948:	f002 000f 	and.w	r0, r2, #15
 802394c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8023950:	ed91 7b00 	vldr	d7, [r1]
 8023954:	ee28 7b07 	vmul.f64	d7, d8, d7
 8023958:	ed8d 7b02 	vstr	d7, [sp, #8]
 802395c:	486b      	ldr	r0, [pc, #428]	; (8023b0c <_dtoa_r+0x60c>)
 802395e:	1112      	asrs	r2, r2, #4
 8023960:	2400      	movs	r4, #0
 8023962:	2102      	movs	r1, #2
 8023964:	b92a      	cbnz	r2, 8023972 <_dtoa_r+0x472>
 8023966:	2c00      	cmp	r4, #0
 8023968:	f43f af6a 	beq.w	8023840 <_dtoa_r+0x340>
 802396c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8023970:	e766      	b.n	8023840 <_dtoa_r+0x340>
 8023972:	07d7      	lsls	r7, r2, #31
 8023974:	d505      	bpl.n	8023982 <_dtoa_r+0x482>
 8023976:	ed90 6b00 	vldr	d6, [r0]
 802397a:	3101      	adds	r1, #1
 802397c:	2401      	movs	r4, #1
 802397e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8023982:	1052      	asrs	r2, r2, #1
 8023984:	3008      	adds	r0, #8
 8023986:	e7ed      	b.n	8023964 <_dtoa_r+0x464>
 8023988:	2102      	movs	r1, #2
 802398a:	e759      	b.n	8023840 <_dtoa_r+0x340>
 802398c:	465a      	mov	r2, fp
 802398e:	464c      	mov	r4, r9
 8023990:	e775      	b.n	802387e <_dtoa_r+0x37e>
 8023992:	ec41 0b17 	vmov	d7, r0, r1
 8023996:	495c      	ldr	r1, [pc, #368]	; (8023b08 <_dtoa_r+0x608>)
 8023998:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 802399c:	ed11 4b02 	vldr	d4, [r1, #-8]
 80239a0:	9901      	ldr	r1, [sp, #4]
 80239a2:	440c      	add	r4, r1
 80239a4:	9907      	ldr	r1, [sp, #28]
 80239a6:	b351      	cbz	r1, 80239fe <_dtoa_r+0x4fe>
 80239a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80239ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80239b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80239b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80239b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80239bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80239c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80239c4:	ee14 1a90 	vmov	r1, s9
 80239c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80239cc:	3130      	adds	r1, #48	; 0x30
 80239ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 80239d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80239d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80239da:	f808 1b01 	strb.w	r1, [r8], #1
 80239de:	d439      	bmi.n	8023a54 <_dtoa_r+0x554>
 80239e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80239e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80239e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80239ec:	d472      	bmi.n	8023ad4 <_dtoa_r+0x5d4>
 80239ee:	45a0      	cmp	r8, r4
 80239f0:	f43f af6b 	beq.w	80238ca <_dtoa_r+0x3ca>
 80239f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80239f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80239fc:	e7e0      	b.n	80239c0 <_dtoa_r+0x4c0>
 80239fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8023a02:	ee27 7b04 	vmul.f64	d7, d7, d4
 8023a06:	4620      	mov	r0, r4
 8023a08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8023a0c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8023a10:	ee14 1a90 	vmov	r1, s9
 8023a14:	3130      	adds	r1, #48	; 0x30
 8023a16:	f808 1b01 	strb.w	r1, [r8], #1
 8023a1a:	45a0      	cmp	r8, r4
 8023a1c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8023a20:	ee36 6b45 	vsub.f64	d6, d6, d5
 8023a24:	d118      	bne.n	8023a58 <_dtoa_r+0x558>
 8023a26:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8023a2a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8023a2e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8023a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a36:	dc4d      	bgt.n	8023ad4 <_dtoa_r+0x5d4>
 8023a38:	ee35 5b47 	vsub.f64	d5, d5, d7
 8023a3c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8023a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a44:	f57f af41 	bpl.w	80238ca <_dtoa_r+0x3ca>
 8023a48:	4680      	mov	r8, r0
 8023a4a:	3801      	subs	r0, #1
 8023a4c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8023a50:	2b30      	cmp	r3, #48	; 0x30
 8023a52:	d0f9      	beq.n	8023a48 <_dtoa_r+0x548>
 8023a54:	4693      	mov	fp, r2
 8023a56:	e02a      	b.n	8023aae <_dtoa_r+0x5ae>
 8023a58:	ee26 6b03 	vmul.f64	d6, d6, d3
 8023a5c:	e7d6      	b.n	8023a0c <_dtoa_r+0x50c>
 8023a5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023a62:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8023a66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8023a6a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8023a6e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8023a72:	ee15 3a10 	vmov	r3, s10
 8023a76:	3330      	adds	r3, #48	; 0x30
 8023a78:	f808 3b01 	strb.w	r3, [r8], #1
 8023a7c:	9b01      	ldr	r3, [sp, #4]
 8023a7e:	eba8 0303 	sub.w	r3, r8, r3
 8023a82:	4599      	cmp	r9, r3
 8023a84:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8023a88:	eea3 7b46 	vfms.f64	d7, d3, d6
 8023a8c:	d133      	bne.n	8023af6 <_dtoa_r+0x5f6>
 8023a8e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8023a92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8023a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023a9a:	dc1a      	bgt.n	8023ad2 <_dtoa_r+0x5d2>
 8023a9c:	eeb4 7b46 	vcmp.f64	d7, d6
 8023aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023aa4:	d103      	bne.n	8023aae <_dtoa_r+0x5ae>
 8023aa6:	ee15 3a10 	vmov	r3, s10
 8023aaa:	07d9      	lsls	r1, r3, #31
 8023aac:	d411      	bmi.n	8023ad2 <_dtoa_r+0x5d2>
 8023aae:	4629      	mov	r1, r5
 8023ab0:	4630      	mov	r0, r6
 8023ab2:	f000 fbd1 	bl	8024258 <_Bfree>
 8023ab6:	2300      	movs	r3, #0
 8023ab8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023aba:	f888 3000 	strb.w	r3, [r8]
 8023abe:	f10b 0301 	add.w	r3, fp, #1
 8023ac2:	6013      	str	r3, [r2, #0]
 8023ac4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023ac6:	2b00      	cmp	r3, #0
 8023ac8:	f43f ad69 	beq.w	802359e <_dtoa_r+0x9e>
 8023acc:	f8c3 8000 	str.w	r8, [r3]
 8023ad0:	e565      	b.n	802359e <_dtoa_r+0x9e>
 8023ad2:	465a      	mov	r2, fp
 8023ad4:	4643      	mov	r3, r8
 8023ad6:	4698      	mov	r8, r3
 8023ad8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8023adc:	2939      	cmp	r1, #57	; 0x39
 8023ade:	d106      	bne.n	8023aee <_dtoa_r+0x5ee>
 8023ae0:	9901      	ldr	r1, [sp, #4]
 8023ae2:	4299      	cmp	r1, r3
 8023ae4:	d1f7      	bne.n	8023ad6 <_dtoa_r+0x5d6>
 8023ae6:	9801      	ldr	r0, [sp, #4]
 8023ae8:	2130      	movs	r1, #48	; 0x30
 8023aea:	3201      	adds	r2, #1
 8023aec:	7001      	strb	r1, [r0, #0]
 8023aee:	7819      	ldrb	r1, [r3, #0]
 8023af0:	3101      	adds	r1, #1
 8023af2:	7019      	strb	r1, [r3, #0]
 8023af4:	e7ae      	b.n	8023a54 <_dtoa_r+0x554>
 8023af6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8023afa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8023afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8023b02:	d1b2      	bne.n	8023a6a <_dtoa_r+0x56a>
 8023b04:	e7d3      	b.n	8023aae <_dtoa_r+0x5ae>
 8023b06:	bf00      	nop
 8023b08:	08026558 	.word	0x08026558
 8023b0c:	08026530 	.word	0x08026530
 8023b10:	9907      	ldr	r1, [sp, #28]
 8023b12:	2900      	cmp	r1, #0
 8023b14:	f000 80d0 	beq.w	8023cb8 <_dtoa_r+0x7b8>
 8023b18:	9906      	ldr	r1, [sp, #24]
 8023b1a:	2901      	cmp	r1, #1
 8023b1c:	f300 80b4 	bgt.w	8023c88 <_dtoa_r+0x788>
 8023b20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8023b22:	2900      	cmp	r1, #0
 8023b24:	f000 80ac 	beq.w	8023c80 <_dtoa_r+0x780>
 8023b28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8023b2c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8023b30:	461c      	mov	r4, r3
 8023b32:	9309      	str	r3, [sp, #36]	; 0x24
 8023b34:	9b04      	ldr	r3, [sp, #16]
 8023b36:	4413      	add	r3, r2
 8023b38:	9304      	str	r3, [sp, #16]
 8023b3a:	9b05      	ldr	r3, [sp, #20]
 8023b3c:	2101      	movs	r1, #1
 8023b3e:	4413      	add	r3, r2
 8023b40:	4630      	mov	r0, r6
 8023b42:	9305      	str	r3, [sp, #20]
 8023b44:	f000 fc3e 	bl	80243c4 <__i2b>
 8023b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023b4a:	4607      	mov	r7, r0
 8023b4c:	f1b8 0f00 	cmp.w	r8, #0
 8023b50:	d00d      	beq.n	8023b6e <_dtoa_r+0x66e>
 8023b52:	9a05      	ldr	r2, [sp, #20]
 8023b54:	2a00      	cmp	r2, #0
 8023b56:	dd0a      	ble.n	8023b6e <_dtoa_r+0x66e>
 8023b58:	4542      	cmp	r2, r8
 8023b5a:	9904      	ldr	r1, [sp, #16]
 8023b5c:	bfa8      	it	ge
 8023b5e:	4642      	movge	r2, r8
 8023b60:	1a89      	subs	r1, r1, r2
 8023b62:	9104      	str	r1, [sp, #16]
 8023b64:	9905      	ldr	r1, [sp, #20]
 8023b66:	eba8 0802 	sub.w	r8, r8, r2
 8023b6a:	1a8a      	subs	r2, r1, r2
 8023b6c:	9205      	str	r2, [sp, #20]
 8023b6e:	b303      	cbz	r3, 8023bb2 <_dtoa_r+0x6b2>
 8023b70:	9a07      	ldr	r2, [sp, #28]
 8023b72:	2a00      	cmp	r2, #0
 8023b74:	f000 80a5 	beq.w	8023cc2 <_dtoa_r+0x7c2>
 8023b78:	2c00      	cmp	r4, #0
 8023b7a:	dd13      	ble.n	8023ba4 <_dtoa_r+0x6a4>
 8023b7c:	4639      	mov	r1, r7
 8023b7e:	4622      	mov	r2, r4
 8023b80:	4630      	mov	r0, r6
 8023b82:	930d      	str	r3, [sp, #52]	; 0x34
 8023b84:	f000 fcde 	bl	8024544 <__pow5mult>
 8023b88:	462a      	mov	r2, r5
 8023b8a:	4601      	mov	r1, r0
 8023b8c:	4607      	mov	r7, r0
 8023b8e:	4630      	mov	r0, r6
 8023b90:	f000 fc2e 	bl	80243f0 <__multiply>
 8023b94:	4629      	mov	r1, r5
 8023b96:	9009      	str	r0, [sp, #36]	; 0x24
 8023b98:	4630      	mov	r0, r6
 8023b9a:	f000 fb5d 	bl	8024258 <_Bfree>
 8023b9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023ba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023ba2:	4615      	mov	r5, r2
 8023ba4:	1b1a      	subs	r2, r3, r4
 8023ba6:	d004      	beq.n	8023bb2 <_dtoa_r+0x6b2>
 8023ba8:	4629      	mov	r1, r5
 8023baa:	4630      	mov	r0, r6
 8023bac:	f000 fcca 	bl	8024544 <__pow5mult>
 8023bb0:	4605      	mov	r5, r0
 8023bb2:	2101      	movs	r1, #1
 8023bb4:	4630      	mov	r0, r6
 8023bb6:	f000 fc05 	bl	80243c4 <__i2b>
 8023bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023bbc:	2b00      	cmp	r3, #0
 8023bbe:	4604      	mov	r4, r0
 8023bc0:	f340 8081 	ble.w	8023cc6 <_dtoa_r+0x7c6>
 8023bc4:	461a      	mov	r2, r3
 8023bc6:	4601      	mov	r1, r0
 8023bc8:	4630      	mov	r0, r6
 8023bca:	f000 fcbb 	bl	8024544 <__pow5mult>
 8023bce:	9b06      	ldr	r3, [sp, #24]
 8023bd0:	2b01      	cmp	r3, #1
 8023bd2:	4604      	mov	r4, r0
 8023bd4:	dd7a      	ble.n	8023ccc <_dtoa_r+0x7cc>
 8023bd6:	2300      	movs	r3, #0
 8023bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8023bda:	6922      	ldr	r2, [r4, #16]
 8023bdc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8023be0:	6910      	ldr	r0, [r2, #16]
 8023be2:	f000 fba1 	bl	8024328 <__hi0bits>
 8023be6:	f1c0 0020 	rsb	r0, r0, #32
 8023bea:	9b05      	ldr	r3, [sp, #20]
 8023bec:	4418      	add	r0, r3
 8023bee:	f010 001f 	ands.w	r0, r0, #31
 8023bf2:	f000 8093 	beq.w	8023d1c <_dtoa_r+0x81c>
 8023bf6:	f1c0 0220 	rsb	r2, r0, #32
 8023bfa:	2a04      	cmp	r2, #4
 8023bfc:	f340 8085 	ble.w	8023d0a <_dtoa_r+0x80a>
 8023c00:	9b04      	ldr	r3, [sp, #16]
 8023c02:	f1c0 001c 	rsb	r0, r0, #28
 8023c06:	4403      	add	r3, r0
 8023c08:	9304      	str	r3, [sp, #16]
 8023c0a:	9b05      	ldr	r3, [sp, #20]
 8023c0c:	4480      	add	r8, r0
 8023c0e:	4403      	add	r3, r0
 8023c10:	9305      	str	r3, [sp, #20]
 8023c12:	9b04      	ldr	r3, [sp, #16]
 8023c14:	2b00      	cmp	r3, #0
 8023c16:	dd05      	ble.n	8023c24 <_dtoa_r+0x724>
 8023c18:	4629      	mov	r1, r5
 8023c1a:	461a      	mov	r2, r3
 8023c1c:	4630      	mov	r0, r6
 8023c1e:	f000 fceb 	bl	80245f8 <__lshift>
 8023c22:	4605      	mov	r5, r0
 8023c24:	9b05      	ldr	r3, [sp, #20]
 8023c26:	2b00      	cmp	r3, #0
 8023c28:	dd05      	ble.n	8023c36 <_dtoa_r+0x736>
 8023c2a:	4621      	mov	r1, r4
 8023c2c:	461a      	mov	r2, r3
 8023c2e:	4630      	mov	r0, r6
 8023c30:	f000 fce2 	bl	80245f8 <__lshift>
 8023c34:	4604      	mov	r4, r0
 8023c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023c38:	2b00      	cmp	r3, #0
 8023c3a:	d071      	beq.n	8023d20 <_dtoa_r+0x820>
 8023c3c:	4621      	mov	r1, r4
 8023c3e:	4628      	mov	r0, r5
 8023c40:	f000 fd46 	bl	80246d0 <__mcmp>
 8023c44:	2800      	cmp	r0, #0
 8023c46:	da6b      	bge.n	8023d20 <_dtoa_r+0x820>
 8023c48:	2300      	movs	r3, #0
 8023c4a:	4629      	mov	r1, r5
 8023c4c:	220a      	movs	r2, #10
 8023c4e:	4630      	mov	r0, r6
 8023c50:	f000 fb24 	bl	802429c <__multadd>
 8023c54:	9b07      	ldr	r3, [sp, #28]
 8023c56:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023c5a:	4605      	mov	r5, r0
 8023c5c:	2b00      	cmp	r3, #0
 8023c5e:	f000 8197 	beq.w	8023f90 <_dtoa_r+0xa90>
 8023c62:	4639      	mov	r1, r7
 8023c64:	2300      	movs	r3, #0
 8023c66:	220a      	movs	r2, #10
 8023c68:	4630      	mov	r0, r6
 8023c6a:	f000 fb17 	bl	802429c <__multadd>
 8023c6e:	f1ba 0f00 	cmp.w	sl, #0
 8023c72:	4607      	mov	r7, r0
 8023c74:	f300 8093 	bgt.w	8023d9e <_dtoa_r+0x89e>
 8023c78:	9b06      	ldr	r3, [sp, #24]
 8023c7a:	2b02      	cmp	r3, #2
 8023c7c:	dc57      	bgt.n	8023d2e <_dtoa_r+0x82e>
 8023c7e:	e08e      	b.n	8023d9e <_dtoa_r+0x89e>
 8023c80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023c82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8023c86:	e751      	b.n	8023b2c <_dtoa_r+0x62c>
 8023c88:	f109 34ff 	add.w	r4, r9, #4294967295
 8023c8c:	42a3      	cmp	r3, r4
 8023c8e:	bfbf      	itttt	lt
 8023c90:	1ae2      	sublt	r2, r4, r3
 8023c92:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8023c94:	189b      	addlt	r3, r3, r2
 8023c96:	930a      	strlt	r3, [sp, #40]	; 0x28
 8023c98:	bfae      	itee	ge
 8023c9a:	1b1c      	subge	r4, r3, r4
 8023c9c:	4623      	movlt	r3, r4
 8023c9e:	2400      	movlt	r4, #0
 8023ca0:	f1b9 0f00 	cmp.w	r9, #0
 8023ca4:	bfb5      	itete	lt
 8023ca6:	9a04      	ldrlt	r2, [sp, #16]
 8023ca8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8023cac:	eba2 0809 	sublt.w	r8, r2, r9
 8023cb0:	464a      	movge	r2, r9
 8023cb2:	bfb8      	it	lt
 8023cb4:	2200      	movlt	r2, #0
 8023cb6:	e73c      	b.n	8023b32 <_dtoa_r+0x632>
 8023cb8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8023cbc:	9f07      	ldr	r7, [sp, #28]
 8023cbe:	461c      	mov	r4, r3
 8023cc0:	e744      	b.n	8023b4c <_dtoa_r+0x64c>
 8023cc2:	461a      	mov	r2, r3
 8023cc4:	e770      	b.n	8023ba8 <_dtoa_r+0x6a8>
 8023cc6:	9b06      	ldr	r3, [sp, #24]
 8023cc8:	2b01      	cmp	r3, #1
 8023cca:	dc18      	bgt.n	8023cfe <_dtoa_r+0x7fe>
 8023ccc:	9b02      	ldr	r3, [sp, #8]
 8023cce:	b9b3      	cbnz	r3, 8023cfe <_dtoa_r+0x7fe>
 8023cd0:	9b03      	ldr	r3, [sp, #12]
 8023cd2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8023cd6:	b9a2      	cbnz	r2, 8023d02 <_dtoa_r+0x802>
 8023cd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8023cdc:	0d12      	lsrs	r2, r2, #20
 8023cde:	0512      	lsls	r2, r2, #20
 8023ce0:	b18a      	cbz	r2, 8023d06 <_dtoa_r+0x806>
 8023ce2:	9b04      	ldr	r3, [sp, #16]
 8023ce4:	3301      	adds	r3, #1
 8023ce6:	9304      	str	r3, [sp, #16]
 8023ce8:	9b05      	ldr	r3, [sp, #20]
 8023cea:	3301      	adds	r3, #1
 8023cec:	9305      	str	r3, [sp, #20]
 8023cee:	2301      	movs	r3, #1
 8023cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8023cf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023cf4:	2b00      	cmp	r3, #0
 8023cf6:	f47f af70 	bne.w	8023bda <_dtoa_r+0x6da>
 8023cfa:	2001      	movs	r0, #1
 8023cfc:	e775      	b.n	8023bea <_dtoa_r+0x6ea>
 8023cfe:	2300      	movs	r3, #0
 8023d00:	e7f6      	b.n	8023cf0 <_dtoa_r+0x7f0>
 8023d02:	9b02      	ldr	r3, [sp, #8]
 8023d04:	e7f4      	b.n	8023cf0 <_dtoa_r+0x7f0>
 8023d06:	9209      	str	r2, [sp, #36]	; 0x24
 8023d08:	e7f3      	b.n	8023cf2 <_dtoa_r+0x7f2>
 8023d0a:	d082      	beq.n	8023c12 <_dtoa_r+0x712>
 8023d0c:	9b04      	ldr	r3, [sp, #16]
 8023d0e:	321c      	adds	r2, #28
 8023d10:	4413      	add	r3, r2
 8023d12:	9304      	str	r3, [sp, #16]
 8023d14:	9b05      	ldr	r3, [sp, #20]
 8023d16:	4490      	add	r8, r2
 8023d18:	4413      	add	r3, r2
 8023d1a:	e779      	b.n	8023c10 <_dtoa_r+0x710>
 8023d1c:	4602      	mov	r2, r0
 8023d1e:	e7f5      	b.n	8023d0c <_dtoa_r+0x80c>
 8023d20:	f1b9 0f00 	cmp.w	r9, #0
 8023d24:	dc36      	bgt.n	8023d94 <_dtoa_r+0x894>
 8023d26:	9b06      	ldr	r3, [sp, #24]
 8023d28:	2b02      	cmp	r3, #2
 8023d2a:	dd33      	ble.n	8023d94 <_dtoa_r+0x894>
 8023d2c:	46ca      	mov	sl, r9
 8023d2e:	f1ba 0f00 	cmp.w	sl, #0
 8023d32:	d10d      	bne.n	8023d50 <_dtoa_r+0x850>
 8023d34:	4621      	mov	r1, r4
 8023d36:	4653      	mov	r3, sl
 8023d38:	2205      	movs	r2, #5
 8023d3a:	4630      	mov	r0, r6
 8023d3c:	f000 faae 	bl	802429c <__multadd>
 8023d40:	4601      	mov	r1, r0
 8023d42:	4604      	mov	r4, r0
 8023d44:	4628      	mov	r0, r5
 8023d46:	f000 fcc3 	bl	80246d0 <__mcmp>
 8023d4a:	2800      	cmp	r0, #0
 8023d4c:	f73f ade4 	bgt.w	8023918 <_dtoa_r+0x418>
 8023d50:	9b08      	ldr	r3, [sp, #32]
 8023d52:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8023d56:	ea6f 0b03 	mvn.w	fp, r3
 8023d5a:	f04f 0900 	mov.w	r9, #0
 8023d5e:	4621      	mov	r1, r4
 8023d60:	4630      	mov	r0, r6
 8023d62:	f000 fa79 	bl	8024258 <_Bfree>
 8023d66:	2f00      	cmp	r7, #0
 8023d68:	f43f aea1 	beq.w	8023aae <_dtoa_r+0x5ae>
 8023d6c:	f1b9 0f00 	cmp.w	r9, #0
 8023d70:	d005      	beq.n	8023d7e <_dtoa_r+0x87e>
 8023d72:	45b9      	cmp	r9, r7
 8023d74:	d003      	beq.n	8023d7e <_dtoa_r+0x87e>
 8023d76:	4649      	mov	r1, r9
 8023d78:	4630      	mov	r0, r6
 8023d7a:	f000 fa6d 	bl	8024258 <_Bfree>
 8023d7e:	4639      	mov	r1, r7
 8023d80:	4630      	mov	r0, r6
 8023d82:	f000 fa69 	bl	8024258 <_Bfree>
 8023d86:	e692      	b.n	8023aae <_dtoa_r+0x5ae>
 8023d88:	2400      	movs	r4, #0
 8023d8a:	4627      	mov	r7, r4
 8023d8c:	e7e0      	b.n	8023d50 <_dtoa_r+0x850>
 8023d8e:	4693      	mov	fp, r2
 8023d90:	4627      	mov	r7, r4
 8023d92:	e5c1      	b.n	8023918 <_dtoa_r+0x418>
 8023d94:	9b07      	ldr	r3, [sp, #28]
 8023d96:	46ca      	mov	sl, r9
 8023d98:	2b00      	cmp	r3, #0
 8023d9a:	f000 8100 	beq.w	8023f9e <_dtoa_r+0xa9e>
 8023d9e:	f1b8 0f00 	cmp.w	r8, #0
 8023da2:	dd05      	ble.n	8023db0 <_dtoa_r+0x8b0>
 8023da4:	4639      	mov	r1, r7
 8023da6:	4642      	mov	r2, r8
 8023da8:	4630      	mov	r0, r6
 8023daa:	f000 fc25 	bl	80245f8 <__lshift>
 8023dae:	4607      	mov	r7, r0
 8023db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023db2:	2b00      	cmp	r3, #0
 8023db4:	d05d      	beq.n	8023e72 <_dtoa_r+0x972>
 8023db6:	6879      	ldr	r1, [r7, #4]
 8023db8:	4630      	mov	r0, r6
 8023dba:	f000 fa0d 	bl	80241d8 <_Balloc>
 8023dbe:	4680      	mov	r8, r0
 8023dc0:	b928      	cbnz	r0, 8023dce <_dtoa_r+0x8ce>
 8023dc2:	4b82      	ldr	r3, [pc, #520]	; (8023fcc <_dtoa_r+0xacc>)
 8023dc4:	4602      	mov	r2, r0
 8023dc6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8023dca:	f7ff bbb1 	b.w	8023530 <_dtoa_r+0x30>
 8023dce:	693a      	ldr	r2, [r7, #16]
 8023dd0:	3202      	adds	r2, #2
 8023dd2:	0092      	lsls	r2, r2, #2
 8023dd4:	f107 010c 	add.w	r1, r7, #12
 8023dd8:	300c      	adds	r0, #12
 8023dda:	f7ff faf2 	bl	80233c2 <memcpy>
 8023dde:	2201      	movs	r2, #1
 8023de0:	4641      	mov	r1, r8
 8023de2:	4630      	mov	r0, r6
 8023de4:	f000 fc08 	bl	80245f8 <__lshift>
 8023de8:	9b01      	ldr	r3, [sp, #4]
 8023dea:	3301      	adds	r3, #1
 8023dec:	9304      	str	r3, [sp, #16]
 8023dee:	9b01      	ldr	r3, [sp, #4]
 8023df0:	4453      	add	r3, sl
 8023df2:	9308      	str	r3, [sp, #32]
 8023df4:	9b02      	ldr	r3, [sp, #8]
 8023df6:	f003 0301 	and.w	r3, r3, #1
 8023dfa:	46b9      	mov	r9, r7
 8023dfc:	9307      	str	r3, [sp, #28]
 8023dfe:	4607      	mov	r7, r0
 8023e00:	9b04      	ldr	r3, [sp, #16]
 8023e02:	4621      	mov	r1, r4
 8023e04:	3b01      	subs	r3, #1
 8023e06:	4628      	mov	r0, r5
 8023e08:	9302      	str	r3, [sp, #8]
 8023e0a:	f7ff faef 	bl	80233ec <quorem>
 8023e0e:	4603      	mov	r3, r0
 8023e10:	3330      	adds	r3, #48	; 0x30
 8023e12:	9005      	str	r0, [sp, #20]
 8023e14:	4649      	mov	r1, r9
 8023e16:	4628      	mov	r0, r5
 8023e18:	9309      	str	r3, [sp, #36]	; 0x24
 8023e1a:	f000 fc59 	bl	80246d0 <__mcmp>
 8023e1e:	463a      	mov	r2, r7
 8023e20:	4682      	mov	sl, r0
 8023e22:	4621      	mov	r1, r4
 8023e24:	4630      	mov	r0, r6
 8023e26:	f000 fc6f 	bl	8024708 <__mdiff>
 8023e2a:	68c2      	ldr	r2, [r0, #12]
 8023e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e2e:	4680      	mov	r8, r0
 8023e30:	bb0a      	cbnz	r2, 8023e76 <_dtoa_r+0x976>
 8023e32:	4601      	mov	r1, r0
 8023e34:	4628      	mov	r0, r5
 8023e36:	f000 fc4b 	bl	80246d0 <__mcmp>
 8023e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e3c:	4602      	mov	r2, r0
 8023e3e:	4641      	mov	r1, r8
 8023e40:	4630      	mov	r0, r6
 8023e42:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8023e46:	f000 fa07 	bl	8024258 <_Bfree>
 8023e4a:	9b06      	ldr	r3, [sp, #24]
 8023e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023e4e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8023e52:	ea43 0102 	orr.w	r1, r3, r2
 8023e56:	9b07      	ldr	r3, [sp, #28]
 8023e58:	4319      	orrs	r1, r3
 8023e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023e5c:	d10d      	bne.n	8023e7a <_dtoa_r+0x97a>
 8023e5e:	2b39      	cmp	r3, #57	; 0x39
 8023e60:	d029      	beq.n	8023eb6 <_dtoa_r+0x9b6>
 8023e62:	f1ba 0f00 	cmp.w	sl, #0
 8023e66:	dd01      	ble.n	8023e6c <_dtoa_r+0x96c>
 8023e68:	9b05      	ldr	r3, [sp, #20]
 8023e6a:	3331      	adds	r3, #49	; 0x31
 8023e6c:	9a02      	ldr	r2, [sp, #8]
 8023e6e:	7013      	strb	r3, [r2, #0]
 8023e70:	e775      	b.n	8023d5e <_dtoa_r+0x85e>
 8023e72:	4638      	mov	r0, r7
 8023e74:	e7b8      	b.n	8023de8 <_dtoa_r+0x8e8>
 8023e76:	2201      	movs	r2, #1
 8023e78:	e7e1      	b.n	8023e3e <_dtoa_r+0x93e>
 8023e7a:	f1ba 0f00 	cmp.w	sl, #0
 8023e7e:	db06      	blt.n	8023e8e <_dtoa_r+0x98e>
 8023e80:	9906      	ldr	r1, [sp, #24]
 8023e82:	ea41 0a0a 	orr.w	sl, r1, sl
 8023e86:	9907      	ldr	r1, [sp, #28]
 8023e88:	ea5a 0a01 	orrs.w	sl, sl, r1
 8023e8c:	d120      	bne.n	8023ed0 <_dtoa_r+0x9d0>
 8023e8e:	2a00      	cmp	r2, #0
 8023e90:	ddec      	ble.n	8023e6c <_dtoa_r+0x96c>
 8023e92:	4629      	mov	r1, r5
 8023e94:	2201      	movs	r2, #1
 8023e96:	4630      	mov	r0, r6
 8023e98:	9304      	str	r3, [sp, #16]
 8023e9a:	f000 fbad 	bl	80245f8 <__lshift>
 8023e9e:	4621      	mov	r1, r4
 8023ea0:	4605      	mov	r5, r0
 8023ea2:	f000 fc15 	bl	80246d0 <__mcmp>
 8023ea6:	2800      	cmp	r0, #0
 8023ea8:	9b04      	ldr	r3, [sp, #16]
 8023eaa:	dc02      	bgt.n	8023eb2 <_dtoa_r+0x9b2>
 8023eac:	d1de      	bne.n	8023e6c <_dtoa_r+0x96c>
 8023eae:	07da      	lsls	r2, r3, #31
 8023eb0:	d5dc      	bpl.n	8023e6c <_dtoa_r+0x96c>
 8023eb2:	2b39      	cmp	r3, #57	; 0x39
 8023eb4:	d1d8      	bne.n	8023e68 <_dtoa_r+0x968>
 8023eb6:	9a02      	ldr	r2, [sp, #8]
 8023eb8:	2339      	movs	r3, #57	; 0x39
 8023eba:	7013      	strb	r3, [r2, #0]
 8023ebc:	4643      	mov	r3, r8
 8023ebe:	4698      	mov	r8, r3
 8023ec0:	3b01      	subs	r3, #1
 8023ec2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8023ec6:	2a39      	cmp	r2, #57	; 0x39
 8023ec8:	d051      	beq.n	8023f6e <_dtoa_r+0xa6e>
 8023eca:	3201      	adds	r2, #1
 8023ecc:	701a      	strb	r2, [r3, #0]
 8023ece:	e746      	b.n	8023d5e <_dtoa_r+0x85e>
 8023ed0:	2a00      	cmp	r2, #0
 8023ed2:	dd03      	ble.n	8023edc <_dtoa_r+0x9dc>
 8023ed4:	2b39      	cmp	r3, #57	; 0x39
 8023ed6:	d0ee      	beq.n	8023eb6 <_dtoa_r+0x9b6>
 8023ed8:	3301      	adds	r3, #1
 8023eda:	e7c7      	b.n	8023e6c <_dtoa_r+0x96c>
 8023edc:	9a04      	ldr	r2, [sp, #16]
 8023ede:	9908      	ldr	r1, [sp, #32]
 8023ee0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8023ee4:	428a      	cmp	r2, r1
 8023ee6:	d02b      	beq.n	8023f40 <_dtoa_r+0xa40>
 8023ee8:	4629      	mov	r1, r5
 8023eea:	2300      	movs	r3, #0
 8023eec:	220a      	movs	r2, #10
 8023eee:	4630      	mov	r0, r6
 8023ef0:	f000 f9d4 	bl	802429c <__multadd>
 8023ef4:	45b9      	cmp	r9, r7
 8023ef6:	4605      	mov	r5, r0
 8023ef8:	f04f 0300 	mov.w	r3, #0
 8023efc:	f04f 020a 	mov.w	r2, #10
 8023f00:	4649      	mov	r1, r9
 8023f02:	4630      	mov	r0, r6
 8023f04:	d107      	bne.n	8023f16 <_dtoa_r+0xa16>
 8023f06:	f000 f9c9 	bl	802429c <__multadd>
 8023f0a:	4681      	mov	r9, r0
 8023f0c:	4607      	mov	r7, r0
 8023f0e:	9b04      	ldr	r3, [sp, #16]
 8023f10:	3301      	adds	r3, #1
 8023f12:	9304      	str	r3, [sp, #16]
 8023f14:	e774      	b.n	8023e00 <_dtoa_r+0x900>
 8023f16:	f000 f9c1 	bl	802429c <__multadd>
 8023f1a:	4639      	mov	r1, r7
 8023f1c:	4681      	mov	r9, r0
 8023f1e:	2300      	movs	r3, #0
 8023f20:	220a      	movs	r2, #10
 8023f22:	4630      	mov	r0, r6
 8023f24:	f000 f9ba 	bl	802429c <__multadd>
 8023f28:	4607      	mov	r7, r0
 8023f2a:	e7f0      	b.n	8023f0e <_dtoa_r+0xa0e>
 8023f2c:	f1ba 0f00 	cmp.w	sl, #0
 8023f30:	9a01      	ldr	r2, [sp, #4]
 8023f32:	bfcc      	ite	gt
 8023f34:	46d0      	movgt	r8, sl
 8023f36:	f04f 0801 	movle.w	r8, #1
 8023f3a:	4490      	add	r8, r2
 8023f3c:	f04f 0900 	mov.w	r9, #0
 8023f40:	4629      	mov	r1, r5
 8023f42:	2201      	movs	r2, #1
 8023f44:	4630      	mov	r0, r6
 8023f46:	9302      	str	r3, [sp, #8]
 8023f48:	f000 fb56 	bl	80245f8 <__lshift>
 8023f4c:	4621      	mov	r1, r4
 8023f4e:	4605      	mov	r5, r0
 8023f50:	f000 fbbe 	bl	80246d0 <__mcmp>
 8023f54:	2800      	cmp	r0, #0
 8023f56:	dcb1      	bgt.n	8023ebc <_dtoa_r+0x9bc>
 8023f58:	d102      	bne.n	8023f60 <_dtoa_r+0xa60>
 8023f5a:	9b02      	ldr	r3, [sp, #8]
 8023f5c:	07db      	lsls	r3, r3, #31
 8023f5e:	d4ad      	bmi.n	8023ebc <_dtoa_r+0x9bc>
 8023f60:	4643      	mov	r3, r8
 8023f62:	4698      	mov	r8, r3
 8023f64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8023f68:	2a30      	cmp	r2, #48	; 0x30
 8023f6a:	d0fa      	beq.n	8023f62 <_dtoa_r+0xa62>
 8023f6c:	e6f7      	b.n	8023d5e <_dtoa_r+0x85e>
 8023f6e:	9a01      	ldr	r2, [sp, #4]
 8023f70:	429a      	cmp	r2, r3
 8023f72:	d1a4      	bne.n	8023ebe <_dtoa_r+0x9be>
 8023f74:	f10b 0b01 	add.w	fp, fp, #1
 8023f78:	2331      	movs	r3, #49	; 0x31
 8023f7a:	e778      	b.n	8023e6e <_dtoa_r+0x96e>
 8023f7c:	4b14      	ldr	r3, [pc, #80]	; (8023fd0 <_dtoa_r+0xad0>)
 8023f7e:	f7ff bb2a 	b.w	80235d6 <_dtoa_r+0xd6>
 8023f82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8023f84:	2b00      	cmp	r3, #0
 8023f86:	f47f ab05 	bne.w	8023594 <_dtoa_r+0x94>
 8023f8a:	4b12      	ldr	r3, [pc, #72]	; (8023fd4 <_dtoa_r+0xad4>)
 8023f8c:	f7ff bb23 	b.w	80235d6 <_dtoa_r+0xd6>
 8023f90:	f1ba 0f00 	cmp.w	sl, #0
 8023f94:	dc03      	bgt.n	8023f9e <_dtoa_r+0xa9e>
 8023f96:	9b06      	ldr	r3, [sp, #24]
 8023f98:	2b02      	cmp	r3, #2
 8023f9a:	f73f aec8 	bgt.w	8023d2e <_dtoa_r+0x82e>
 8023f9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8023fa2:	4621      	mov	r1, r4
 8023fa4:	4628      	mov	r0, r5
 8023fa6:	f7ff fa21 	bl	80233ec <quorem>
 8023faa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8023fae:	f808 3b01 	strb.w	r3, [r8], #1
 8023fb2:	9a01      	ldr	r2, [sp, #4]
 8023fb4:	eba8 0202 	sub.w	r2, r8, r2
 8023fb8:	4592      	cmp	sl, r2
 8023fba:	ddb7      	ble.n	8023f2c <_dtoa_r+0xa2c>
 8023fbc:	4629      	mov	r1, r5
 8023fbe:	2300      	movs	r3, #0
 8023fc0:	220a      	movs	r2, #10
 8023fc2:	4630      	mov	r0, r6
 8023fc4:	f000 f96a 	bl	802429c <__multadd>
 8023fc8:	4605      	mov	r5, r0
 8023fca:	e7ea      	b.n	8023fa2 <_dtoa_r+0xaa2>
 8023fcc:	080264c4 	.word	0x080264c4
 8023fd0:	08026424 	.word	0x08026424
 8023fd4:	08026448 	.word	0x08026448

08023fd8 <_free_r>:
 8023fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023fda:	2900      	cmp	r1, #0
 8023fdc:	d044      	beq.n	8024068 <_free_r+0x90>
 8023fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023fe2:	9001      	str	r0, [sp, #4]
 8023fe4:	2b00      	cmp	r3, #0
 8023fe6:	f1a1 0404 	sub.w	r4, r1, #4
 8023fea:	bfb8      	it	lt
 8023fec:	18e4      	addlt	r4, r4, r3
 8023fee:	f000 f8e7 	bl	80241c0 <__malloc_lock>
 8023ff2:	4a1e      	ldr	r2, [pc, #120]	; (802406c <_free_r+0x94>)
 8023ff4:	9801      	ldr	r0, [sp, #4]
 8023ff6:	6813      	ldr	r3, [r2, #0]
 8023ff8:	b933      	cbnz	r3, 8024008 <_free_r+0x30>
 8023ffa:	6063      	str	r3, [r4, #4]
 8023ffc:	6014      	str	r4, [r2, #0]
 8023ffe:	b003      	add	sp, #12
 8024000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024004:	f000 b8e2 	b.w	80241cc <__malloc_unlock>
 8024008:	42a3      	cmp	r3, r4
 802400a:	d908      	bls.n	802401e <_free_r+0x46>
 802400c:	6825      	ldr	r5, [r4, #0]
 802400e:	1961      	adds	r1, r4, r5
 8024010:	428b      	cmp	r3, r1
 8024012:	bf01      	itttt	eq
 8024014:	6819      	ldreq	r1, [r3, #0]
 8024016:	685b      	ldreq	r3, [r3, #4]
 8024018:	1949      	addeq	r1, r1, r5
 802401a:	6021      	streq	r1, [r4, #0]
 802401c:	e7ed      	b.n	8023ffa <_free_r+0x22>
 802401e:	461a      	mov	r2, r3
 8024020:	685b      	ldr	r3, [r3, #4]
 8024022:	b10b      	cbz	r3, 8024028 <_free_r+0x50>
 8024024:	42a3      	cmp	r3, r4
 8024026:	d9fa      	bls.n	802401e <_free_r+0x46>
 8024028:	6811      	ldr	r1, [r2, #0]
 802402a:	1855      	adds	r5, r2, r1
 802402c:	42a5      	cmp	r5, r4
 802402e:	d10b      	bne.n	8024048 <_free_r+0x70>
 8024030:	6824      	ldr	r4, [r4, #0]
 8024032:	4421      	add	r1, r4
 8024034:	1854      	adds	r4, r2, r1
 8024036:	42a3      	cmp	r3, r4
 8024038:	6011      	str	r1, [r2, #0]
 802403a:	d1e0      	bne.n	8023ffe <_free_r+0x26>
 802403c:	681c      	ldr	r4, [r3, #0]
 802403e:	685b      	ldr	r3, [r3, #4]
 8024040:	6053      	str	r3, [r2, #4]
 8024042:	440c      	add	r4, r1
 8024044:	6014      	str	r4, [r2, #0]
 8024046:	e7da      	b.n	8023ffe <_free_r+0x26>
 8024048:	d902      	bls.n	8024050 <_free_r+0x78>
 802404a:	230c      	movs	r3, #12
 802404c:	6003      	str	r3, [r0, #0]
 802404e:	e7d6      	b.n	8023ffe <_free_r+0x26>
 8024050:	6825      	ldr	r5, [r4, #0]
 8024052:	1961      	adds	r1, r4, r5
 8024054:	428b      	cmp	r3, r1
 8024056:	bf04      	itt	eq
 8024058:	6819      	ldreq	r1, [r3, #0]
 802405a:	685b      	ldreq	r3, [r3, #4]
 802405c:	6063      	str	r3, [r4, #4]
 802405e:	bf04      	itt	eq
 8024060:	1949      	addeq	r1, r1, r5
 8024062:	6021      	streq	r1, [r4, #0]
 8024064:	6054      	str	r4, [r2, #4]
 8024066:	e7ca      	b.n	8023ffe <_free_r+0x26>
 8024068:	b003      	add	sp, #12
 802406a:	bd30      	pop	{r4, r5, pc}
 802406c:	2401e5a0 	.word	0x2401e5a0

08024070 <malloc>:
 8024070:	4b02      	ldr	r3, [pc, #8]	; (802407c <malloc+0xc>)
 8024072:	4601      	mov	r1, r0
 8024074:	6818      	ldr	r0, [r3, #0]
 8024076:	f000 b823 	b.w	80240c0 <_malloc_r>
 802407a:	bf00      	nop
 802407c:	240000b4 	.word	0x240000b4

08024080 <sbrk_aligned>:
 8024080:	b570      	push	{r4, r5, r6, lr}
 8024082:	4e0e      	ldr	r6, [pc, #56]	; (80240bc <sbrk_aligned+0x3c>)
 8024084:	460c      	mov	r4, r1
 8024086:	6831      	ldr	r1, [r6, #0]
 8024088:	4605      	mov	r5, r0
 802408a:	b911      	cbnz	r1, 8024092 <sbrk_aligned+0x12>
 802408c:	f000 feec 	bl	8024e68 <_sbrk_r>
 8024090:	6030      	str	r0, [r6, #0]
 8024092:	4621      	mov	r1, r4
 8024094:	4628      	mov	r0, r5
 8024096:	f000 fee7 	bl	8024e68 <_sbrk_r>
 802409a:	1c43      	adds	r3, r0, #1
 802409c:	d00a      	beq.n	80240b4 <sbrk_aligned+0x34>
 802409e:	1cc4      	adds	r4, r0, #3
 80240a0:	f024 0403 	bic.w	r4, r4, #3
 80240a4:	42a0      	cmp	r0, r4
 80240a6:	d007      	beq.n	80240b8 <sbrk_aligned+0x38>
 80240a8:	1a21      	subs	r1, r4, r0
 80240aa:	4628      	mov	r0, r5
 80240ac:	f000 fedc 	bl	8024e68 <_sbrk_r>
 80240b0:	3001      	adds	r0, #1
 80240b2:	d101      	bne.n	80240b8 <sbrk_aligned+0x38>
 80240b4:	f04f 34ff 	mov.w	r4, #4294967295
 80240b8:	4620      	mov	r0, r4
 80240ba:	bd70      	pop	{r4, r5, r6, pc}
 80240bc:	2401e5a4 	.word	0x2401e5a4

080240c0 <_malloc_r>:
 80240c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80240c4:	1ccd      	adds	r5, r1, #3
 80240c6:	f025 0503 	bic.w	r5, r5, #3
 80240ca:	3508      	adds	r5, #8
 80240cc:	2d0c      	cmp	r5, #12
 80240ce:	bf38      	it	cc
 80240d0:	250c      	movcc	r5, #12
 80240d2:	2d00      	cmp	r5, #0
 80240d4:	4607      	mov	r7, r0
 80240d6:	db01      	blt.n	80240dc <_malloc_r+0x1c>
 80240d8:	42a9      	cmp	r1, r5
 80240da:	d905      	bls.n	80240e8 <_malloc_r+0x28>
 80240dc:	230c      	movs	r3, #12
 80240de:	603b      	str	r3, [r7, #0]
 80240e0:	2600      	movs	r6, #0
 80240e2:	4630      	mov	r0, r6
 80240e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80240e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80241bc <_malloc_r+0xfc>
 80240ec:	f000 f868 	bl	80241c0 <__malloc_lock>
 80240f0:	f8d8 3000 	ldr.w	r3, [r8]
 80240f4:	461c      	mov	r4, r3
 80240f6:	bb5c      	cbnz	r4, 8024150 <_malloc_r+0x90>
 80240f8:	4629      	mov	r1, r5
 80240fa:	4638      	mov	r0, r7
 80240fc:	f7ff ffc0 	bl	8024080 <sbrk_aligned>
 8024100:	1c43      	adds	r3, r0, #1
 8024102:	4604      	mov	r4, r0
 8024104:	d155      	bne.n	80241b2 <_malloc_r+0xf2>
 8024106:	f8d8 4000 	ldr.w	r4, [r8]
 802410a:	4626      	mov	r6, r4
 802410c:	2e00      	cmp	r6, #0
 802410e:	d145      	bne.n	802419c <_malloc_r+0xdc>
 8024110:	2c00      	cmp	r4, #0
 8024112:	d048      	beq.n	80241a6 <_malloc_r+0xe6>
 8024114:	6823      	ldr	r3, [r4, #0]
 8024116:	4631      	mov	r1, r6
 8024118:	4638      	mov	r0, r7
 802411a:	eb04 0903 	add.w	r9, r4, r3
 802411e:	f000 fea3 	bl	8024e68 <_sbrk_r>
 8024122:	4581      	cmp	r9, r0
 8024124:	d13f      	bne.n	80241a6 <_malloc_r+0xe6>
 8024126:	6821      	ldr	r1, [r4, #0]
 8024128:	1a6d      	subs	r5, r5, r1
 802412a:	4629      	mov	r1, r5
 802412c:	4638      	mov	r0, r7
 802412e:	f7ff ffa7 	bl	8024080 <sbrk_aligned>
 8024132:	3001      	adds	r0, #1
 8024134:	d037      	beq.n	80241a6 <_malloc_r+0xe6>
 8024136:	6823      	ldr	r3, [r4, #0]
 8024138:	442b      	add	r3, r5
 802413a:	6023      	str	r3, [r4, #0]
 802413c:	f8d8 3000 	ldr.w	r3, [r8]
 8024140:	2b00      	cmp	r3, #0
 8024142:	d038      	beq.n	80241b6 <_malloc_r+0xf6>
 8024144:	685a      	ldr	r2, [r3, #4]
 8024146:	42a2      	cmp	r2, r4
 8024148:	d12b      	bne.n	80241a2 <_malloc_r+0xe2>
 802414a:	2200      	movs	r2, #0
 802414c:	605a      	str	r2, [r3, #4]
 802414e:	e00f      	b.n	8024170 <_malloc_r+0xb0>
 8024150:	6822      	ldr	r2, [r4, #0]
 8024152:	1b52      	subs	r2, r2, r5
 8024154:	d41f      	bmi.n	8024196 <_malloc_r+0xd6>
 8024156:	2a0b      	cmp	r2, #11
 8024158:	d917      	bls.n	802418a <_malloc_r+0xca>
 802415a:	1961      	adds	r1, r4, r5
 802415c:	42a3      	cmp	r3, r4
 802415e:	6025      	str	r5, [r4, #0]
 8024160:	bf18      	it	ne
 8024162:	6059      	strne	r1, [r3, #4]
 8024164:	6863      	ldr	r3, [r4, #4]
 8024166:	bf08      	it	eq
 8024168:	f8c8 1000 	streq.w	r1, [r8]
 802416c:	5162      	str	r2, [r4, r5]
 802416e:	604b      	str	r3, [r1, #4]
 8024170:	4638      	mov	r0, r7
 8024172:	f104 060b 	add.w	r6, r4, #11
 8024176:	f000 f829 	bl	80241cc <__malloc_unlock>
 802417a:	f026 0607 	bic.w	r6, r6, #7
 802417e:	1d23      	adds	r3, r4, #4
 8024180:	1af2      	subs	r2, r6, r3
 8024182:	d0ae      	beq.n	80240e2 <_malloc_r+0x22>
 8024184:	1b9b      	subs	r3, r3, r6
 8024186:	50a3      	str	r3, [r4, r2]
 8024188:	e7ab      	b.n	80240e2 <_malloc_r+0x22>
 802418a:	42a3      	cmp	r3, r4
 802418c:	6862      	ldr	r2, [r4, #4]
 802418e:	d1dd      	bne.n	802414c <_malloc_r+0x8c>
 8024190:	f8c8 2000 	str.w	r2, [r8]
 8024194:	e7ec      	b.n	8024170 <_malloc_r+0xb0>
 8024196:	4623      	mov	r3, r4
 8024198:	6864      	ldr	r4, [r4, #4]
 802419a:	e7ac      	b.n	80240f6 <_malloc_r+0x36>
 802419c:	4634      	mov	r4, r6
 802419e:	6876      	ldr	r6, [r6, #4]
 80241a0:	e7b4      	b.n	802410c <_malloc_r+0x4c>
 80241a2:	4613      	mov	r3, r2
 80241a4:	e7cc      	b.n	8024140 <_malloc_r+0x80>
 80241a6:	230c      	movs	r3, #12
 80241a8:	603b      	str	r3, [r7, #0]
 80241aa:	4638      	mov	r0, r7
 80241ac:	f000 f80e 	bl	80241cc <__malloc_unlock>
 80241b0:	e797      	b.n	80240e2 <_malloc_r+0x22>
 80241b2:	6025      	str	r5, [r4, #0]
 80241b4:	e7dc      	b.n	8024170 <_malloc_r+0xb0>
 80241b6:	605b      	str	r3, [r3, #4]
 80241b8:	deff      	udf	#255	; 0xff
 80241ba:	bf00      	nop
 80241bc:	2401e5a0 	.word	0x2401e5a0

080241c0 <__malloc_lock>:
 80241c0:	4801      	ldr	r0, [pc, #4]	; (80241c8 <__malloc_lock+0x8>)
 80241c2:	f7ff b8fc 	b.w	80233be <__retarget_lock_acquire_recursive>
 80241c6:	bf00      	nop
 80241c8:	2401e59c 	.word	0x2401e59c

080241cc <__malloc_unlock>:
 80241cc:	4801      	ldr	r0, [pc, #4]	; (80241d4 <__malloc_unlock+0x8>)
 80241ce:	f7ff b8f7 	b.w	80233c0 <__retarget_lock_release_recursive>
 80241d2:	bf00      	nop
 80241d4:	2401e59c 	.word	0x2401e59c

080241d8 <_Balloc>:
 80241d8:	b570      	push	{r4, r5, r6, lr}
 80241da:	69c6      	ldr	r6, [r0, #28]
 80241dc:	4604      	mov	r4, r0
 80241de:	460d      	mov	r5, r1
 80241e0:	b976      	cbnz	r6, 8024200 <_Balloc+0x28>
 80241e2:	2010      	movs	r0, #16
 80241e4:	f7ff ff44 	bl	8024070 <malloc>
 80241e8:	4602      	mov	r2, r0
 80241ea:	61e0      	str	r0, [r4, #28]
 80241ec:	b920      	cbnz	r0, 80241f8 <_Balloc+0x20>
 80241ee:	4b18      	ldr	r3, [pc, #96]	; (8024250 <_Balloc+0x78>)
 80241f0:	4818      	ldr	r0, [pc, #96]	; (8024254 <_Balloc+0x7c>)
 80241f2:	216b      	movs	r1, #107	; 0x6b
 80241f4:	f7fe fa84 	bl	8022700 <__assert_func>
 80241f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80241fc:	6006      	str	r6, [r0, #0]
 80241fe:	60c6      	str	r6, [r0, #12]
 8024200:	69e6      	ldr	r6, [r4, #28]
 8024202:	68f3      	ldr	r3, [r6, #12]
 8024204:	b183      	cbz	r3, 8024228 <_Balloc+0x50>
 8024206:	69e3      	ldr	r3, [r4, #28]
 8024208:	68db      	ldr	r3, [r3, #12]
 802420a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802420e:	b9b8      	cbnz	r0, 8024240 <_Balloc+0x68>
 8024210:	2101      	movs	r1, #1
 8024212:	fa01 f605 	lsl.w	r6, r1, r5
 8024216:	1d72      	adds	r2, r6, #5
 8024218:	0092      	lsls	r2, r2, #2
 802421a:	4620      	mov	r0, r4
 802421c:	f000 fe34 	bl	8024e88 <_calloc_r>
 8024220:	b160      	cbz	r0, 802423c <_Balloc+0x64>
 8024222:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8024226:	e00e      	b.n	8024246 <_Balloc+0x6e>
 8024228:	2221      	movs	r2, #33	; 0x21
 802422a:	2104      	movs	r1, #4
 802422c:	4620      	mov	r0, r4
 802422e:	f000 fe2b 	bl	8024e88 <_calloc_r>
 8024232:	69e3      	ldr	r3, [r4, #28]
 8024234:	60f0      	str	r0, [r6, #12]
 8024236:	68db      	ldr	r3, [r3, #12]
 8024238:	2b00      	cmp	r3, #0
 802423a:	d1e4      	bne.n	8024206 <_Balloc+0x2e>
 802423c:	2000      	movs	r0, #0
 802423e:	bd70      	pop	{r4, r5, r6, pc}
 8024240:	6802      	ldr	r2, [r0, #0]
 8024242:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8024246:	2300      	movs	r3, #0
 8024248:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802424c:	e7f7      	b.n	802423e <_Balloc+0x66>
 802424e:	bf00      	nop
 8024250:	08026455 	.word	0x08026455
 8024254:	080264d5 	.word	0x080264d5

08024258 <_Bfree>:
 8024258:	b570      	push	{r4, r5, r6, lr}
 802425a:	69c6      	ldr	r6, [r0, #28]
 802425c:	4605      	mov	r5, r0
 802425e:	460c      	mov	r4, r1
 8024260:	b976      	cbnz	r6, 8024280 <_Bfree+0x28>
 8024262:	2010      	movs	r0, #16
 8024264:	f7ff ff04 	bl	8024070 <malloc>
 8024268:	4602      	mov	r2, r0
 802426a:	61e8      	str	r0, [r5, #28]
 802426c:	b920      	cbnz	r0, 8024278 <_Bfree+0x20>
 802426e:	4b09      	ldr	r3, [pc, #36]	; (8024294 <_Bfree+0x3c>)
 8024270:	4809      	ldr	r0, [pc, #36]	; (8024298 <_Bfree+0x40>)
 8024272:	218f      	movs	r1, #143	; 0x8f
 8024274:	f7fe fa44 	bl	8022700 <__assert_func>
 8024278:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802427c:	6006      	str	r6, [r0, #0]
 802427e:	60c6      	str	r6, [r0, #12]
 8024280:	b13c      	cbz	r4, 8024292 <_Bfree+0x3a>
 8024282:	69eb      	ldr	r3, [r5, #28]
 8024284:	6862      	ldr	r2, [r4, #4]
 8024286:	68db      	ldr	r3, [r3, #12]
 8024288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802428c:	6021      	str	r1, [r4, #0]
 802428e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8024292:	bd70      	pop	{r4, r5, r6, pc}
 8024294:	08026455 	.word	0x08026455
 8024298:	080264d5 	.word	0x080264d5

0802429c <__multadd>:
 802429c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80242a0:	690d      	ldr	r5, [r1, #16]
 80242a2:	4607      	mov	r7, r0
 80242a4:	460c      	mov	r4, r1
 80242a6:	461e      	mov	r6, r3
 80242a8:	f101 0c14 	add.w	ip, r1, #20
 80242ac:	2000      	movs	r0, #0
 80242ae:	f8dc 3000 	ldr.w	r3, [ip]
 80242b2:	b299      	uxth	r1, r3
 80242b4:	fb02 6101 	mla	r1, r2, r1, r6
 80242b8:	0c1e      	lsrs	r6, r3, #16
 80242ba:	0c0b      	lsrs	r3, r1, #16
 80242bc:	fb02 3306 	mla	r3, r2, r6, r3
 80242c0:	b289      	uxth	r1, r1
 80242c2:	3001      	adds	r0, #1
 80242c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80242c8:	4285      	cmp	r5, r0
 80242ca:	f84c 1b04 	str.w	r1, [ip], #4
 80242ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80242d2:	dcec      	bgt.n	80242ae <__multadd+0x12>
 80242d4:	b30e      	cbz	r6, 802431a <__multadd+0x7e>
 80242d6:	68a3      	ldr	r3, [r4, #8]
 80242d8:	42ab      	cmp	r3, r5
 80242da:	dc19      	bgt.n	8024310 <__multadd+0x74>
 80242dc:	6861      	ldr	r1, [r4, #4]
 80242de:	4638      	mov	r0, r7
 80242e0:	3101      	adds	r1, #1
 80242e2:	f7ff ff79 	bl	80241d8 <_Balloc>
 80242e6:	4680      	mov	r8, r0
 80242e8:	b928      	cbnz	r0, 80242f6 <__multadd+0x5a>
 80242ea:	4602      	mov	r2, r0
 80242ec:	4b0c      	ldr	r3, [pc, #48]	; (8024320 <__multadd+0x84>)
 80242ee:	480d      	ldr	r0, [pc, #52]	; (8024324 <__multadd+0x88>)
 80242f0:	21ba      	movs	r1, #186	; 0xba
 80242f2:	f7fe fa05 	bl	8022700 <__assert_func>
 80242f6:	6922      	ldr	r2, [r4, #16]
 80242f8:	3202      	adds	r2, #2
 80242fa:	f104 010c 	add.w	r1, r4, #12
 80242fe:	0092      	lsls	r2, r2, #2
 8024300:	300c      	adds	r0, #12
 8024302:	f7ff f85e 	bl	80233c2 <memcpy>
 8024306:	4621      	mov	r1, r4
 8024308:	4638      	mov	r0, r7
 802430a:	f7ff ffa5 	bl	8024258 <_Bfree>
 802430e:	4644      	mov	r4, r8
 8024310:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8024314:	3501      	adds	r5, #1
 8024316:	615e      	str	r6, [r3, #20]
 8024318:	6125      	str	r5, [r4, #16]
 802431a:	4620      	mov	r0, r4
 802431c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024320:	080264c4 	.word	0x080264c4
 8024324:	080264d5 	.word	0x080264d5

08024328 <__hi0bits>:
 8024328:	0c03      	lsrs	r3, r0, #16
 802432a:	041b      	lsls	r3, r3, #16
 802432c:	b9d3      	cbnz	r3, 8024364 <__hi0bits+0x3c>
 802432e:	0400      	lsls	r0, r0, #16
 8024330:	2310      	movs	r3, #16
 8024332:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8024336:	bf04      	itt	eq
 8024338:	0200      	lsleq	r0, r0, #8
 802433a:	3308      	addeq	r3, #8
 802433c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8024340:	bf04      	itt	eq
 8024342:	0100      	lsleq	r0, r0, #4
 8024344:	3304      	addeq	r3, #4
 8024346:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802434a:	bf04      	itt	eq
 802434c:	0080      	lsleq	r0, r0, #2
 802434e:	3302      	addeq	r3, #2
 8024350:	2800      	cmp	r0, #0
 8024352:	db05      	blt.n	8024360 <__hi0bits+0x38>
 8024354:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8024358:	f103 0301 	add.w	r3, r3, #1
 802435c:	bf08      	it	eq
 802435e:	2320      	moveq	r3, #32
 8024360:	4618      	mov	r0, r3
 8024362:	4770      	bx	lr
 8024364:	2300      	movs	r3, #0
 8024366:	e7e4      	b.n	8024332 <__hi0bits+0xa>

08024368 <__lo0bits>:
 8024368:	6803      	ldr	r3, [r0, #0]
 802436a:	f013 0207 	ands.w	r2, r3, #7
 802436e:	d00c      	beq.n	802438a <__lo0bits+0x22>
 8024370:	07d9      	lsls	r1, r3, #31
 8024372:	d422      	bmi.n	80243ba <__lo0bits+0x52>
 8024374:	079a      	lsls	r2, r3, #30
 8024376:	bf49      	itett	mi
 8024378:	085b      	lsrmi	r3, r3, #1
 802437a:	089b      	lsrpl	r3, r3, #2
 802437c:	6003      	strmi	r3, [r0, #0]
 802437e:	2201      	movmi	r2, #1
 8024380:	bf5c      	itt	pl
 8024382:	6003      	strpl	r3, [r0, #0]
 8024384:	2202      	movpl	r2, #2
 8024386:	4610      	mov	r0, r2
 8024388:	4770      	bx	lr
 802438a:	b299      	uxth	r1, r3
 802438c:	b909      	cbnz	r1, 8024392 <__lo0bits+0x2a>
 802438e:	0c1b      	lsrs	r3, r3, #16
 8024390:	2210      	movs	r2, #16
 8024392:	b2d9      	uxtb	r1, r3
 8024394:	b909      	cbnz	r1, 802439a <__lo0bits+0x32>
 8024396:	3208      	adds	r2, #8
 8024398:	0a1b      	lsrs	r3, r3, #8
 802439a:	0719      	lsls	r1, r3, #28
 802439c:	bf04      	itt	eq
 802439e:	091b      	lsreq	r3, r3, #4
 80243a0:	3204      	addeq	r2, #4
 80243a2:	0799      	lsls	r1, r3, #30
 80243a4:	bf04      	itt	eq
 80243a6:	089b      	lsreq	r3, r3, #2
 80243a8:	3202      	addeq	r2, #2
 80243aa:	07d9      	lsls	r1, r3, #31
 80243ac:	d403      	bmi.n	80243b6 <__lo0bits+0x4e>
 80243ae:	085b      	lsrs	r3, r3, #1
 80243b0:	f102 0201 	add.w	r2, r2, #1
 80243b4:	d003      	beq.n	80243be <__lo0bits+0x56>
 80243b6:	6003      	str	r3, [r0, #0]
 80243b8:	e7e5      	b.n	8024386 <__lo0bits+0x1e>
 80243ba:	2200      	movs	r2, #0
 80243bc:	e7e3      	b.n	8024386 <__lo0bits+0x1e>
 80243be:	2220      	movs	r2, #32
 80243c0:	e7e1      	b.n	8024386 <__lo0bits+0x1e>
	...

080243c4 <__i2b>:
 80243c4:	b510      	push	{r4, lr}
 80243c6:	460c      	mov	r4, r1
 80243c8:	2101      	movs	r1, #1
 80243ca:	f7ff ff05 	bl	80241d8 <_Balloc>
 80243ce:	4602      	mov	r2, r0
 80243d0:	b928      	cbnz	r0, 80243de <__i2b+0x1a>
 80243d2:	4b05      	ldr	r3, [pc, #20]	; (80243e8 <__i2b+0x24>)
 80243d4:	4805      	ldr	r0, [pc, #20]	; (80243ec <__i2b+0x28>)
 80243d6:	f240 1145 	movw	r1, #325	; 0x145
 80243da:	f7fe f991 	bl	8022700 <__assert_func>
 80243de:	2301      	movs	r3, #1
 80243e0:	6144      	str	r4, [r0, #20]
 80243e2:	6103      	str	r3, [r0, #16]
 80243e4:	bd10      	pop	{r4, pc}
 80243e6:	bf00      	nop
 80243e8:	080264c4 	.word	0x080264c4
 80243ec:	080264d5 	.word	0x080264d5

080243f0 <__multiply>:
 80243f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243f4:	4691      	mov	r9, r2
 80243f6:	690a      	ldr	r2, [r1, #16]
 80243f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80243fc:	429a      	cmp	r2, r3
 80243fe:	bfb8      	it	lt
 8024400:	460b      	movlt	r3, r1
 8024402:	460c      	mov	r4, r1
 8024404:	bfbc      	itt	lt
 8024406:	464c      	movlt	r4, r9
 8024408:	4699      	movlt	r9, r3
 802440a:	6927      	ldr	r7, [r4, #16]
 802440c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8024410:	68a3      	ldr	r3, [r4, #8]
 8024412:	6861      	ldr	r1, [r4, #4]
 8024414:	eb07 060a 	add.w	r6, r7, sl
 8024418:	42b3      	cmp	r3, r6
 802441a:	b085      	sub	sp, #20
 802441c:	bfb8      	it	lt
 802441e:	3101      	addlt	r1, #1
 8024420:	f7ff feda 	bl	80241d8 <_Balloc>
 8024424:	b930      	cbnz	r0, 8024434 <__multiply+0x44>
 8024426:	4602      	mov	r2, r0
 8024428:	4b44      	ldr	r3, [pc, #272]	; (802453c <__multiply+0x14c>)
 802442a:	4845      	ldr	r0, [pc, #276]	; (8024540 <__multiply+0x150>)
 802442c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8024430:	f7fe f966 	bl	8022700 <__assert_func>
 8024434:	f100 0514 	add.w	r5, r0, #20
 8024438:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802443c:	462b      	mov	r3, r5
 802443e:	2200      	movs	r2, #0
 8024440:	4543      	cmp	r3, r8
 8024442:	d321      	bcc.n	8024488 <__multiply+0x98>
 8024444:	f104 0314 	add.w	r3, r4, #20
 8024448:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802444c:	f109 0314 	add.w	r3, r9, #20
 8024450:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8024454:	9202      	str	r2, [sp, #8]
 8024456:	1b3a      	subs	r2, r7, r4
 8024458:	3a15      	subs	r2, #21
 802445a:	f022 0203 	bic.w	r2, r2, #3
 802445e:	3204      	adds	r2, #4
 8024460:	f104 0115 	add.w	r1, r4, #21
 8024464:	428f      	cmp	r7, r1
 8024466:	bf38      	it	cc
 8024468:	2204      	movcc	r2, #4
 802446a:	9201      	str	r2, [sp, #4]
 802446c:	9a02      	ldr	r2, [sp, #8]
 802446e:	9303      	str	r3, [sp, #12]
 8024470:	429a      	cmp	r2, r3
 8024472:	d80c      	bhi.n	802448e <__multiply+0x9e>
 8024474:	2e00      	cmp	r6, #0
 8024476:	dd03      	ble.n	8024480 <__multiply+0x90>
 8024478:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802447c:	2b00      	cmp	r3, #0
 802447e:	d05b      	beq.n	8024538 <__multiply+0x148>
 8024480:	6106      	str	r6, [r0, #16]
 8024482:	b005      	add	sp, #20
 8024484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024488:	f843 2b04 	str.w	r2, [r3], #4
 802448c:	e7d8      	b.n	8024440 <__multiply+0x50>
 802448e:	f8b3 a000 	ldrh.w	sl, [r3]
 8024492:	f1ba 0f00 	cmp.w	sl, #0
 8024496:	d024      	beq.n	80244e2 <__multiply+0xf2>
 8024498:	f104 0e14 	add.w	lr, r4, #20
 802449c:	46a9      	mov	r9, r5
 802449e:	f04f 0c00 	mov.w	ip, #0
 80244a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80244a6:	f8d9 1000 	ldr.w	r1, [r9]
 80244aa:	fa1f fb82 	uxth.w	fp, r2
 80244ae:	b289      	uxth	r1, r1
 80244b0:	fb0a 110b 	mla	r1, sl, fp, r1
 80244b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80244b8:	f8d9 2000 	ldr.w	r2, [r9]
 80244bc:	4461      	add	r1, ip
 80244be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80244c2:	fb0a c20b 	mla	r2, sl, fp, ip
 80244c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80244ca:	b289      	uxth	r1, r1
 80244cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80244d0:	4577      	cmp	r7, lr
 80244d2:	f849 1b04 	str.w	r1, [r9], #4
 80244d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80244da:	d8e2      	bhi.n	80244a2 <__multiply+0xb2>
 80244dc:	9a01      	ldr	r2, [sp, #4]
 80244de:	f845 c002 	str.w	ip, [r5, r2]
 80244e2:	9a03      	ldr	r2, [sp, #12]
 80244e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80244e8:	3304      	adds	r3, #4
 80244ea:	f1b9 0f00 	cmp.w	r9, #0
 80244ee:	d021      	beq.n	8024534 <__multiply+0x144>
 80244f0:	6829      	ldr	r1, [r5, #0]
 80244f2:	f104 0c14 	add.w	ip, r4, #20
 80244f6:	46ae      	mov	lr, r5
 80244f8:	f04f 0a00 	mov.w	sl, #0
 80244fc:	f8bc b000 	ldrh.w	fp, [ip]
 8024500:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8024504:	fb09 220b 	mla	r2, r9, fp, r2
 8024508:	4452      	add	r2, sl
 802450a:	b289      	uxth	r1, r1
 802450c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8024510:	f84e 1b04 	str.w	r1, [lr], #4
 8024514:	f85c 1b04 	ldr.w	r1, [ip], #4
 8024518:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802451c:	f8be 1000 	ldrh.w	r1, [lr]
 8024520:	fb09 110a 	mla	r1, r9, sl, r1
 8024524:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8024528:	4567      	cmp	r7, ip
 802452a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802452e:	d8e5      	bhi.n	80244fc <__multiply+0x10c>
 8024530:	9a01      	ldr	r2, [sp, #4]
 8024532:	50a9      	str	r1, [r5, r2]
 8024534:	3504      	adds	r5, #4
 8024536:	e799      	b.n	802446c <__multiply+0x7c>
 8024538:	3e01      	subs	r6, #1
 802453a:	e79b      	b.n	8024474 <__multiply+0x84>
 802453c:	080264c4 	.word	0x080264c4
 8024540:	080264d5 	.word	0x080264d5

08024544 <__pow5mult>:
 8024544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024548:	4615      	mov	r5, r2
 802454a:	f012 0203 	ands.w	r2, r2, #3
 802454e:	4606      	mov	r6, r0
 8024550:	460f      	mov	r7, r1
 8024552:	d007      	beq.n	8024564 <__pow5mult+0x20>
 8024554:	4c25      	ldr	r4, [pc, #148]	; (80245ec <__pow5mult+0xa8>)
 8024556:	3a01      	subs	r2, #1
 8024558:	2300      	movs	r3, #0
 802455a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802455e:	f7ff fe9d 	bl	802429c <__multadd>
 8024562:	4607      	mov	r7, r0
 8024564:	10ad      	asrs	r5, r5, #2
 8024566:	d03d      	beq.n	80245e4 <__pow5mult+0xa0>
 8024568:	69f4      	ldr	r4, [r6, #28]
 802456a:	b97c      	cbnz	r4, 802458c <__pow5mult+0x48>
 802456c:	2010      	movs	r0, #16
 802456e:	f7ff fd7f 	bl	8024070 <malloc>
 8024572:	4602      	mov	r2, r0
 8024574:	61f0      	str	r0, [r6, #28]
 8024576:	b928      	cbnz	r0, 8024584 <__pow5mult+0x40>
 8024578:	4b1d      	ldr	r3, [pc, #116]	; (80245f0 <__pow5mult+0xac>)
 802457a:	481e      	ldr	r0, [pc, #120]	; (80245f4 <__pow5mult+0xb0>)
 802457c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8024580:	f7fe f8be 	bl	8022700 <__assert_func>
 8024584:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8024588:	6004      	str	r4, [r0, #0]
 802458a:	60c4      	str	r4, [r0, #12]
 802458c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8024590:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8024594:	b94c      	cbnz	r4, 80245aa <__pow5mult+0x66>
 8024596:	f240 2171 	movw	r1, #625	; 0x271
 802459a:	4630      	mov	r0, r6
 802459c:	f7ff ff12 	bl	80243c4 <__i2b>
 80245a0:	2300      	movs	r3, #0
 80245a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80245a6:	4604      	mov	r4, r0
 80245a8:	6003      	str	r3, [r0, #0]
 80245aa:	f04f 0900 	mov.w	r9, #0
 80245ae:	07eb      	lsls	r3, r5, #31
 80245b0:	d50a      	bpl.n	80245c8 <__pow5mult+0x84>
 80245b2:	4639      	mov	r1, r7
 80245b4:	4622      	mov	r2, r4
 80245b6:	4630      	mov	r0, r6
 80245b8:	f7ff ff1a 	bl	80243f0 <__multiply>
 80245bc:	4639      	mov	r1, r7
 80245be:	4680      	mov	r8, r0
 80245c0:	4630      	mov	r0, r6
 80245c2:	f7ff fe49 	bl	8024258 <_Bfree>
 80245c6:	4647      	mov	r7, r8
 80245c8:	106d      	asrs	r5, r5, #1
 80245ca:	d00b      	beq.n	80245e4 <__pow5mult+0xa0>
 80245cc:	6820      	ldr	r0, [r4, #0]
 80245ce:	b938      	cbnz	r0, 80245e0 <__pow5mult+0x9c>
 80245d0:	4622      	mov	r2, r4
 80245d2:	4621      	mov	r1, r4
 80245d4:	4630      	mov	r0, r6
 80245d6:	f7ff ff0b 	bl	80243f0 <__multiply>
 80245da:	6020      	str	r0, [r4, #0]
 80245dc:	f8c0 9000 	str.w	r9, [r0]
 80245e0:	4604      	mov	r4, r0
 80245e2:	e7e4      	b.n	80245ae <__pow5mult+0x6a>
 80245e4:	4638      	mov	r0, r7
 80245e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80245ea:	bf00      	nop
 80245ec:	08026620 	.word	0x08026620
 80245f0:	08026455 	.word	0x08026455
 80245f4:	080264d5 	.word	0x080264d5

080245f8 <__lshift>:
 80245f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80245fc:	460c      	mov	r4, r1
 80245fe:	6849      	ldr	r1, [r1, #4]
 8024600:	6923      	ldr	r3, [r4, #16]
 8024602:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8024606:	68a3      	ldr	r3, [r4, #8]
 8024608:	4607      	mov	r7, r0
 802460a:	4691      	mov	r9, r2
 802460c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8024610:	f108 0601 	add.w	r6, r8, #1
 8024614:	42b3      	cmp	r3, r6
 8024616:	db0b      	blt.n	8024630 <__lshift+0x38>
 8024618:	4638      	mov	r0, r7
 802461a:	f7ff fddd 	bl	80241d8 <_Balloc>
 802461e:	4605      	mov	r5, r0
 8024620:	b948      	cbnz	r0, 8024636 <__lshift+0x3e>
 8024622:	4602      	mov	r2, r0
 8024624:	4b28      	ldr	r3, [pc, #160]	; (80246c8 <__lshift+0xd0>)
 8024626:	4829      	ldr	r0, [pc, #164]	; (80246cc <__lshift+0xd4>)
 8024628:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 802462c:	f7fe f868 	bl	8022700 <__assert_func>
 8024630:	3101      	adds	r1, #1
 8024632:	005b      	lsls	r3, r3, #1
 8024634:	e7ee      	b.n	8024614 <__lshift+0x1c>
 8024636:	2300      	movs	r3, #0
 8024638:	f100 0114 	add.w	r1, r0, #20
 802463c:	f100 0210 	add.w	r2, r0, #16
 8024640:	4618      	mov	r0, r3
 8024642:	4553      	cmp	r3, sl
 8024644:	db33      	blt.n	80246ae <__lshift+0xb6>
 8024646:	6920      	ldr	r0, [r4, #16]
 8024648:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802464c:	f104 0314 	add.w	r3, r4, #20
 8024650:	f019 091f 	ands.w	r9, r9, #31
 8024654:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8024658:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802465c:	d02b      	beq.n	80246b6 <__lshift+0xbe>
 802465e:	f1c9 0e20 	rsb	lr, r9, #32
 8024662:	468a      	mov	sl, r1
 8024664:	2200      	movs	r2, #0
 8024666:	6818      	ldr	r0, [r3, #0]
 8024668:	fa00 f009 	lsl.w	r0, r0, r9
 802466c:	4310      	orrs	r0, r2
 802466e:	f84a 0b04 	str.w	r0, [sl], #4
 8024672:	f853 2b04 	ldr.w	r2, [r3], #4
 8024676:	459c      	cmp	ip, r3
 8024678:	fa22 f20e 	lsr.w	r2, r2, lr
 802467c:	d8f3      	bhi.n	8024666 <__lshift+0x6e>
 802467e:	ebac 0304 	sub.w	r3, ip, r4
 8024682:	3b15      	subs	r3, #21
 8024684:	f023 0303 	bic.w	r3, r3, #3
 8024688:	3304      	adds	r3, #4
 802468a:	f104 0015 	add.w	r0, r4, #21
 802468e:	4584      	cmp	ip, r0
 8024690:	bf38      	it	cc
 8024692:	2304      	movcc	r3, #4
 8024694:	50ca      	str	r2, [r1, r3]
 8024696:	b10a      	cbz	r2, 802469c <__lshift+0xa4>
 8024698:	f108 0602 	add.w	r6, r8, #2
 802469c:	3e01      	subs	r6, #1
 802469e:	4638      	mov	r0, r7
 80246a0:	612e      	str	r6, [r5, #16]
 80246a2:	4621      	mov	r1, r4
 80246a4:	f7ff fdd8 	bl	8024258 <_Bfree>
 80246a8:	4628      	mov	r0, r5
 80246aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80246ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80246b2:	3301      	adds	r3, #1
 80246b4:	e7c5      	b.n	8024642 <__lshift+0x4a>
 80246b6:	3904      	subs	r1, #4
 80246b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80246bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80246c0:	459c      	cmp	ip, r3
 80246c2:	d8f9      	bhi.n	80246b8 <__lshift+0xc0>
 80246c4:	e7ea      	b.n	802469c <__lshift+0xa4>
 80246c6:	bf00      	nop
 80246c8:	080264c4 	.word	0x080264c4
 80246cc:	080264d5 	.word	0x080264d5

080246d0 <__mcmp>:
 80246d0:	b530      	push	{r4, r5, lr}
 80246d2:	6902      	ldr	r2, [r0, #16]
 80246d4:	690c      	ldr	r4, [r1, #16]
 80246d6:	1b12      	subs	r2, r2, r4
 80246d8:	d10e      	bne.n	80246f8 <__mcmp+0x28>
 80246da:	f100 0314 	add.w	r3, r0, #20
 80246de:	3114      	adds	r1, #20
 80246e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80246e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80246e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80246ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80246f0:	42a5      	cmp	r5, r4
 80246f2:	d003      	beq.n	80246fc <__mcmp+0x2c>
 80246f4:	d305      	bcc.n	8024702 <__mcmp+0x32>
 80246f6:	2201      	movs	r2, #1
 80246f8:	4610      	mov	r0, r2
 80246fa:	bd30      	pop	{r4, r5, pc}
 80246fc:	4283      	cmp	r3, r0
 80246fe:	d3f3      	bcc.n	80246e8 <__mcmp+0x18>
 8024700:	e7fa      	b.n	80246f8 <__mcmp+0x28>
 8024702:	f04f 32ff 	mov.w	r2, #4294967295
 8024706:	e7f7      	b.n	80246f8 <__mcmp+0x28>

08024708 <__mdiff>:
 8024708:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802470c:	460c      	mov	r4, r1
 802470e:	4606      	mov	r6, r0
 8024710:	4611      	mov	r1, r2
 8024712:	4620      	mov	r0, r4
 8024714:	4690      	mov	r8, r2
 8024716:	f7ff ffdb 	bl	80246d0 <__mcmp>
 802471a:	1e05      	subs	r5, r0, #0
 802471c:	d110      	bne.n	8024740 <__mdiff+0x38>
 802471e:	4629      	mov	r1, r5
 8024720:	4630      	mov	r0, r6
 8024722:	f7ff fd59 	bl	80241d8 <_Balloc>
 8024726:	b930      	cbnz	r0, 8024736 <__mdiff+0x2e>
 8024728:	4b3a      	ldr	r3, [pc, #232]	; (8024814 <__mdiff+0x10c>)
 802472a:	4602      	mov	r2, r0
 802472c:	f240 2137 	movw	r1, #567	; 0x237
 8024730:	4839      	ldr	r0, [pc, #228]	; (8024818 <__mdiff+0x110>)
 8024732:	f7fd ffe5 	bl	8022700 <__assert_func>
 8024736:	2301      	movs	r3, #1
 8024738:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802473c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024740:	bfa4      	itt	ge
 8024742:	4643      	movge	r3, r8
 8024744:	46a0      	movge	r8, r4
 8024746:	4630      	mov	r0, r6
 8024748:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802474c:	bfa6      	itte	ge
 802474e:	461c      	movge	r4, r3
 8024750:	2500      	movge	r5, #0
 8024752:	2501      	movlt	r5, #1
 8024754:	f7ff fd40 	bl	80241d8 <_Balloc>
 8024758:	b920      	cbnz	r0, 8024764 <__mdiff+0x5c>
 802475a:	4b2e      	ldr	r3, [pc, #184]	; (8024814 <__mdiff+0x10c>)
 802475c:	4602      	mov	r2, r0
 802475e:	f240 2145 	movw	r1, #581	; 0x245
 8024762:	e7e5      	b.n	8024730 <__mdiff+0x28>
 8024764:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8024768:	6926      	ldr	r6, [r4, #16]
 802476a:	60c5      	str	r5, [r0, #12]
 802476c:	f104 0914 	add.w	r9, r4, #20
 8024770:	f108 0514 	add.w	r5, r8, #20
 8024774:	f100 0e14 	add.w	lr, r0, #20
 8024778:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802477c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8024780:	f108 0210 	add.w	r2, r8, #16
 8024784:	46f2      	mov	sl, lr
 8024786:	2100      	movs	r1, #0
 8024788:	f859 3b04 	ldr.w	r3, [r9], #4
 802478c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8024790:	fa11 f88b 	uxtah	r8, r1, fp
 8024794:	b299      	uxth	r1, r3
 8024796:	0c1b      	lsrs	r3, r3, #16
 8024798:	eba8 0801 	sub.w	r8, r8, r1
 802479c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80247a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80247a4:	fa1f f888 	uxth.w	r8, r8
 80247a8:	1419      	asrs	r1, r3, #16
 80247aa:	454e      	cmp	r6, r9
 80247ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80247b0:	f84a 3b04 	str.w	r3, [sl], #4
 80247b4:	d8e8      	bhi.n	8024788 <__mdiff+0x80>
 80247b6:	1b33      	subs	r3, r6, r4
 80247b8:	3b15      	subs	r3, #21
 80247ba:	f023 0303 	bic.w	r3, r3, #3
 80247be:	3304      	adds	r3, #4
 80247c0:	3415      	adds	r4, #21
 80247c2:	42a6      	cmp	r6, r4
 80247c4:	bf38      	it	cc
 80247c6:	2304      	movcc	r3, #4
 80247c8:	441d      	add	r5, r3
 80247ca:	4473      	add	r3, lr
 80247cc:	469e      	mov	lr, r3
 80247ce:	462e      	mov	r6, r5
 80247d0:	4566      	cmp	r6, ip
 80247d2:	d30e      	bcc.n	80247f2 <__mdiff+0xea>
 80247d4:	f10c 0203 	add.w	r2, ip, #3
 80247d8:	1b52      	subs	r2, r2, r5
 80247da:	f022 0203 	bic.w	r2, r2, #3
 80247de:	3d03      	subs	r5, #3
 80247e0:	45ac      	cmp	ip, r5
 80247e2:	bf38      	it	cc
 80247e4:	2200      	movcc	r2, #0
 80247e6:	4413      	add	r3, r2
 80247e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80247ec:	b17a      	cbz	r2, 802480e <__mdiff+0x106>
 80247ee:	6107      	str	r7, [r0, #16]
 80247f0:	e7a4      	b.n	802473c <__mdiff+0x34>
 80247f2:	f856 8b04 	ldr.w	r8, [r6], #4
 80247f6:	fa11 f288 	uxtah	r2, r1, r8
 80247fa:	1414      	asrs	r4, r2, #16
 80247fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8024800:	b292      	uxth	r2, r2
 8024802:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8024806:	f84e 2b04 	str.w	r2, [lr], #4
 802480a:	1421      	asrs	r1, r4, #16
 802480c:	e7e0      	b.n	80247d0 <__mdiff+0xc8>
 802480e:	3f01      	subs	r7, #1
 8024810:	e7ea      	b.n	80247e8 <__mdiff+0xe0>
 8024812:	bf00      	nop
 8024814:	080264c4 	.word	0x080264c4
 8024818:	080264d5 	.word	0x080264d5

0802481c <__d2b>:
 802481c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8024820:	460f      	mov	r7, r1
 8024822:	2101      	movs	r1, #1
 8024824:	ec59 8b10 	vmov	r8, r9, d0
 8024828:	4616      	mov	r6, r2
 802482a:	f7ff fcd5 	bl	80241d8 <_Balloc>
 802482e:	4604      	mov	r4, r0
 8024830:	b930      	cbnz	r0, 8024840 <__d2b+0x24>
 8024832:	4602      	mov	r2, r0
 8024834:	4b24      	ldr	r3, [pc, #144]	; (80248c8 <__d2b+0xac>)
 8024836:	4825      	ldr	r0, [pc, #148]	; (80248cc <__d2b+0xb0>)
 8024838:	f240 310f 	movw	r1, #783	; 0x30f
 802483c:	f7fd ff60 	bl	8022700 <__assert_func>
 8024840:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8024844:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8024848:	bb2d      	cbnz	r5, 8024896 <__d2b+0x7a>
 802484a:	9301      	str	r3, [sp, #4]
 802484c:	f1b8 0300 	subs.w	r3, r8, #0
 8024850:	d026      	beq.n	80248a0 <__d2b+0x84>
 8024852:	4668      	mov	r0, sp
 8024854:	9300      	str	r3, [sp, #0]
 8024856:	f7ff fd87 	bl	8024368 <__lo0bits>
 802485a:	e9dd 1200 	ldrd	r1, r2, [sp]
 802485e:	b1e8      	cbz	r0, 802489c <__d2b+0x80>
 8024860:	f1c0 0320 	rsb	r3, r0, #32
 8024864:	fa02 f303 	lsl.w	r3, r2, r3
 8024868:	430b      	orrs	r3, r1
 802486a:	40c2      	lsrs	r2, r0
 802486c:	6163      	str	r3, [r4, #20]
 802486e:	9201      	str	r2, [sp, #4]
 8024870:	9b01      	ldr	r3, [sp, #4]
 8024872:	61a3      	str	r3, [r4, #24]
 8024874:	2b00      	cmp	r3, #0
 8024876:	bf14      	ite	ne
 8024878:	2202      	movne	r2, #2
 802487a:	2201      	moveq	r2, #1
 802487c:	6122      	str	r2, [r4, #16]
 802487e:	b1bd      	cbz	r5, 80248b0 <__d2b+0x94>
 8024880:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8024884:	4405      	add	r5, r0
 8024886:	603d      	str	r5, [r7, #0]
 8024888:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802488c:	6030      	str	r0, [r6, #0]
 802488e:	4620      	mov	r0, r4
 8024890:	b003      	add	sp, #12
 8024892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024896:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802489a:	e7d6      	b.n	802484a <__d2b+0x2e>
 802489c:	6161      	str	r1, [r4, #20]
 802489e:	e7e7      	b.n	8024870 <__d2b+0x54>
 80248a0:	a801      	add	r0, sp, #4
 80248a2:	f7ff fd61 	bl	8024368 <__lo0bits>
 80248a6:	9b01      	ldr	r3, [sp, #4]
 80248a8:	6163      	str	r3, [r4, #20]
 80248aa:	3020      	adds	r0, #32
 80248ac:	2201      	movs	r2, #1
 80248ae:	e7e5      	b.n	802487c <__d2b+0x60>
 80248b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80248b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80248b8:	6038      	str	r0, [r7, #0]
 80248ba:	6918      	ldr	r0, [r3, #16]
 80248bc:	f7ff fd34 	bl	8024328 <__hi0bits>
 80248c0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80248c4:	e7e2      	b.n	802488c <__d2b+0x70>
 80248c6:	bf00      	nop
 80248c8:	080264c4 	.word	0x080264c4
 80248cc:	080264d5 	.word	0x080264d5

080248d0 <__sfputc_r>:
 80248d0:	6893      	ldr	r3, [r2, #8]
 80248d2:	3b01      	subs	r3, #1
 80248d4:	2b00      	cmp	r3, #0
 80248d6:	b410      	push	{r4}
 80248d8:	6093      	str	r3, [r2, #8]
 80248da:	da08      	bge.n	80248ee <__sfputc_r+0x1e>
 80248dc:	6994      	ldr	r4, [r2, #24]
 80248de:	42a3      	cmp	r3, r4
 80248e0:	db01      	blt.n	80248e6 <__sfputc_r+0x16>
 80248e2:	290a      	cmp	r1, #10
 80248e4:	d103      	bne.n	80248ee <__sfputc_r+0x1e>
 80248e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80248ea:	f000 b9e3 	b.w	8024cb4 <__swbuf_r>
 80248ee:	6813      	ldr	r3, [r2, #0]
 80248f0:	1c58      	adds	r0, r3, #1
 80248f2:	6010      	str	r0, [r2, #0]
 80248f4:	7019      	strb	r1, [r3, #0]
 80248f6:	4608      	mov	r0, r1
 80248f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80248fc:	4770      	bx	lr

080248fe <__sfputs_r>:
 80248fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024900:	4606      	mov	r6, r0
 8024902:	460f      	mov	r7, r1
 8024904:	4614      	mov	r4, r2
 8024906:	18d5      	adds	r5, r2, r3
 8024908:	42ac      	cmp	r4, r5
 802490a:	d101      	bne.n	8024910 <__sfputs_r+0x12>
 802490c:	2000      	movs	r0, #0
 802490e:	e007      	b.n	8024920 <__sfputs_r+0x22>
 8024910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024914:	463a      	mov	r2, r7
 8024916:	4630      	mov	r0, r6
 8024918:	f7ff ffda 	bl	80248d0 <__sfputc_r>
 802491c:	1c43      	adds	r3, r0, #1
 802491e:	d1f3      	bne.n	8024908 <__sfputs_r+0xa>
 8024920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024924 <_vfiprintf_r>:
 8024924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024928:	460d      	mov	r5, r1
 802492a:	b09d      	sub	sp, #116	; 0x74
 802492c:	4614      	mov	r4, r2
 802492e:	4698      	mov	r8, r3
 8024930:	4606      	mov	r6, r0
 8024932:	b118      	cbz	r0, 802493c <_vfiprintf_r+0x18>
 8024934:	6a03      	ldr	r3, [r0, #32]
 8024936:	b90b      	cbnz	r3, 802493c <_vfiprintf_r+0x18>
 8024938:	f7fe fbc8 	bl	80230cc <__sinit>
 802493c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802493e:	07d9      	lsls	r1, r3, #31
 8024940:	d405      	bmi.n	802494e <_vfiprintf_r+0x2a>
 8024942:	89ab      	ldrh	r3, [r5, #12]
 8024944:	059a      	lsls	r2, r3, #22
 8024946:	d402      	bmi.n	802494e <_vfiprintf_r+0x2a>
 8024948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802494a:	f7fe fd38 	bl	80233be <__retarget_lock_acquire_recursive>
 802494e:	89ab      	ldrh	r3, [r5, #12]
 8024950:	071b      	lsls	r3, r3, #28
 8024952:	d501      	bpl.n	8024958 <_vfiprintf_r+0x34>
 8024954:	692b      	ldr	r3, [r5, #16]
 8024956:	b99b      	cbnz	r3, 8024980 <_vfiprintf_r+0x5c>
 8024958:	4629      	mov	r1, r5
 802495a:	4630      	mov	r0, r6
 802495c:	f000 f9e8 	bl	8024d30 <__swsetup_r>
 8024960:	b170      	cbz	r0, 8024980 <_vfiprintf_r+0x5c>
 8024962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024964:	07dc      	lsls	r4, r3, #31
 8024966:	d504      	bpl.n	8024972 <_vfiprintf_r+0x4e>
 8024968:	f04f 30ff 	mov.w	r0, #4294967295
 802496c:	b01d      	add	sp, #116	; 0x74
 802496e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024972:	89ab      	ldrh	r3, [r5, #12]
 8024974:	0598      	lsls	r0, r3, #22
 8024976:	d4f7      	bmi.n	8024968 <_vfiprintf_r+0x44>
 8024978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802497a:	f7fe fd21 	bl	80233c0 <__retarget_lock_release_recursive>
 802497e:	e7f3      	b.n	8024968 <_vfiprintf_r+0x44>
 8024980:	2300      	movs	r3, #0
 8024982:	9309      	str	r3, [sp, #36]	; 0x24
 8024984:	2320      	movs	r3, #32
 8024986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802498a:	f8cd 800c 	str.w	r8, [sp, #12]
 802498e:	2330      	movs	r3, #48	; 0x30
 8024990:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8024b44 <_vfiprintf_r+0x220>
 8024994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024998:	f04f 0901 	mov.w	r9, #1
 802499c:	4623      	mov	r3, r4
 802499e:	469a      	mov	sl, r3
 80249a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80249a4:	b10a      	cbz	r2, 80249aa <_vfiprintf_r+0x86>
 80249a6:	2a25      	cmp	r2, #37	; 0x25
 80249a8:	d1f9      	bne.n	802499e <_vfiprintf_r+0x7a>
 80249aa:	ebba 0b04 	subs.w	fp, sl, r4
 80249ae:	d00b      	beq.n	80249c8 <_vfiprintf_r+0xa4>
 80249b0:	465b      	mov	r3, fp
 80249b2:	4622      	mov	r2, r4
 80249b4:	4629      	mov	r1, r5
 80249b6:	4630      	mov	r0, r6
 80249b8:	f7ff ffa1 	bl	80248fe <__sfputs_r>
 80249bc:	3001      	adds	r0, #1
 80249be:	f000 80a9 	beq.w	8024b14 <_vfiprintf_r+0x1f0>
 80249c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80249c4:	445a      	add	r2, fp
 80249c6:	9209      	str	r2, [sp, #36]	; 0x24
 80249c8:	f89a 3000 	ldrb.w	r3, [sl]
 80249cc:	2b00      	cmp	r3, #0
 80249ce:	f000 80a1 	beq.w	8024b14 <_vfiprintf_r+0x1f0>
 80249d2:	2300      	movs	r3, #0
 80249d4:	f04f 32ff 	mov.w	r2, #4294967295
 80249d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80249dc:	f10a 0a01 	add.w	sl, sl, #1
 80249e0:	9304      	str	r3, [sp, #16]
 80249e2:	9307      	str	r3, [sp, #28]
 80249e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80249e8:	931a      	str	r3, [sp, #104]	; 0x68
 80249ea:	4654      	mov	r4, sl
 80249ec:	2205      	movs	r2, #5
 80249ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80249f2:	4854      	ldr	r0, [pc, #336]	; (8024b44 <_vfiprintf_r+0x220>)
 80249f4:	f7db fc74 	bl	80002e0 <memchr>
 80249f8:	9a04      	ldr	r2, [sp, #16]
 80249fa:	b9d8      	cbnz	r0, 8024a34 <_vfiprintf_r+0x110>
 80249fc:	06d1      	lsls	r1, r2, #27
 80249fe:	bf44      	itt	mi
 8024a00:	2320      	movmi	r3, #32
 8024a02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024a06:	0713      	lsls	r3, r2, #28
 8024a08:	bf44      	itt	mi
 8024a0a:	232b      	movmi	r3, #43	; 0x2b
 8024a0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024a10:	f89a 3000 	ldrb.w	r3, [sl]
 8024a14:	2b2a      	cmp	r3, #42	; 0x2a
 8024a16:	d015      	beq.n	8024a44 <_vfiprintf_r+0x120>
 8024a18:	9a07      	ldr	r2, [sp, #28]
 8024a1a:	4654      	mov	r4, sl
 8024a1c:	2000      	movs	r0, #0
 8024a1e:	f04f 0c0a 	mov.w	ip, #10
 8024a22:	4621      	mov	r1, r4
 8024a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024a28:	3b30      	subs	r3, #48	; 0x30
 8024a2a:	2b09      	cmp	r3, #9
 8024a2c:	d94d      	bls.n	8024aca <_vfiprintf_r+0x1a6>
 8024a2e:	b1b0      	cbz	r0, 8024a5e <_vfiprintf_r+0x13a>
 8024a30:	9207      	str	r2, [sp, #28]
 8024a32:	e014      	b.n	8024a5e <_vfiprintf_r+0x13a>
 8024a34:	eba0 0308 	sub.w	r3, r0, r8
 8024a38:	fa09 f303 	lsl.w	r3, r9, r3
 8024a3c:	4313      	orrs	r3, r2
 8024a3e:	9304      	str	r3, [sp, #16]
 8024a40:	46a2      	mov	sl, r4
 8024a42:	e7d2      	b.n	80249ea <_vfiprintf_r+0xc6>
 8024a44:	9b03      	ldr	r3, [sp, #12]
 8024a46:	1d19      	adds	r1, r3, #4
 8024a48:	681b      	ldr	r3, [r3, #0]
 8024a4a:	9103      	str	r1, [sp, #12]
 8024a4c:	2b00      	cmp	r3, #0
 8024a4e:	bfbb      	ittet	lt
 8024a50:	425b      	neglt	r3, r3
 8024a52:	f042 0202 	orrlt.w	r2, r2, #2
 8024a56:	9307      	strge	r3, [sp, #28]
 8024a58:	9307      	strlt	r3, [sp, #28]
 8024a5a:	bfb8      	it	lt
 8024a5c:	9204      	strlt	r2, [sp, #16]
 8024a5e:	7823      	ldrb	r3, [r4, #0]
 8024a60:	2b2e      	cmp	r3, #46	; 0x2e
 8024a62:	d10c      	bne.n	8024a7e <_vfiprintf_r+0x15a>
 8024a64:	7863      	ldrb	r3, [r4, #1]
 8024a66:	2b2a      	cmp	r3, #42	; 0x2a
 8024a68:	d134      	bne.n	8024ad4 <_vfiprintf_r+0x1b0>
 8024a6a:	9b03      	ldr	r3, [sp, #12]
 8024a6c:	1d1a      	adds	r2, r3, #4
 8024a6e:	681b      	ldr	r3, [r3, #0]
 8024a70:	9203      	str	r2, [sp, #12]
 8024a72:	2b00      	cmp	r3, #0
 8024a74:	bfb8      	it	lt
 8024a76:	f04f 33ff 	movlt.w	r3, #4294967295
 8024a7a:	3402      	adds	r4, #2
 8024a7c:	9305      	str	r3, [sp, #20]
 8024a7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8024b54 <_vfiprintf_r+0x230>
 8024a82:	7821      	ldrb	r1, [r4, #0]
 8024a84:	2203      	movs	r2, #3
 8024a86:	4650      	mov	r0, sl
 8024a88:	f7db fc2a 	bl	80002e0 <memchr>
 8024a8c:	b138      	cbz	r0, 8024a9e <_vfiprintf_r+0x17a>
 8024a8e:	9b04      	ldr	r3, [sp, #16]
 8024a90:	eba0 000a 	sub.w	r0, r0, sl
 8024a94:	2240      	movs	r2, #64	; 0x40
 8024a96:	4082      	lsls	r2, r0
 8024a98:	4313      	orrs	r3, r2
 8024a9a:	3401      	adds	r4, #1
 8024a9c:	9304      	str	r3, [sp, #16]
 8024a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024aa2:	4829      	ldr	r0, [pc, #164]	; (8024b48 <_vfiprintf_r+0x224>)
 8024aa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024aa8:	2206      	movs	r2, #6
 8024aaa:	f7db fc19 	bl	80002e0 <memchr>
 8024aae:	2800      	cmp	r0, #0
 8024ab0:	d03f      	beq.n	8024b32 <_vfiprintf_r+0x20e>
 8024ab2:	4b26      	ldr	r3, [pc, #152]	; (8024b4c <_vfiprintf_r+0x228>)
 8024ab4:	bb1b      	cbnz	r3, 8024afe <_vfiprintf_r+0x1da>
 8024ab6:	9b03      	ldr	r3, [sp, #12]
 8024ab8:	3307      	adds	r3, #7
 8024aba:	f023 0307 	bic.w	r3, r3, #7
 8024abe:	3308      	adds	r3, #8
 8024ac0:	9303      	str	r3, [sp, #12]
 8024ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ac4:	443b      	add	r3, r7
 8024ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8024ac8:	e768      	b.n	802499c <_vfiprintf_r+0x78>
 8024aca:	fb0c 3202 	mla	r2, ip, r2, r3
 8024ace:	460c      	mov	r4, r1
 8024ad0:	2001      	movs	r0, #1
 8024ad2:	e7a6      	b.n	8024a22 <_vfiprintf_r+0xfe>
 8024ad4:	2300      	movs	r3, #0
 8024ad6:	3401      	adds	r4, #1
 8024ad8:	9305      	str	r3, [sp, #20]
 8024ada:	4619      	mov	r1, r3
 8024adc:	f04f 0c0a 	mov.w	ip, #10
 8024ae0:	4620      	mov	r0, r4
 8024ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024ae6:	3a30      	subs	r2, #48	; 0x30
 8024ae8:	2a09      	cmp	r2, #9
 8024aea:	d903      	bls.n	8024af4 <_vfiprintf_r+0x1d0>
 8024aec:	2b00      	cmp	r3, #0
 8024aee:	d0c6      	beq.n	8024a7e <_vfiprintf_r+0x15a>
 8024af0:	9105      	str	r1, [sp, #20]
 8024af2:	e7c4      	b.n	8024a7e <_vfiprintf_r+0x15a>
 8024af4:	fb0c 2101 	mla	r1, ip, r1, r2
 8024af8:	4604      	mov	r4, r0
 8024afa:	2301      	movs	r3, #1
 8024afc:	e7f0      	b.n	8024ae0 <_vfiprintf_r+0x1bc>
 8024afe:	ab03      	add	r3, sp, #12
 8024b00:	9300      	str	r3, [sp, #0]
 8024b02:	462a      	mov	r2, r5
 8024b04:	4b12      	ldr	r3, [pc, #72]	; (8024b50 <_vfiprintf_r+0x22c>)
 8024b06:	a904      	add	r1, sp, #16
 8024b08:	4630      	mov	r0, r6
 8024b0a:	f7fd fea9 	bl	8022860 <_printf_float>
 8024b0e:	4607      	mov	r7, r0
 8024b10:	1c78      	adds	r0, r7, #1
 8024b12:	d1d6      	bne.n	8024ac2 <_vfiprintf_r+0x19e>
 8024b14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024b16:	07d9      	lsls	r1, r3, #31
 8024b18:	d405      	bmi.n	8024b26 <_vfiprintf_r+0x202>
 8024b1a:	89ab      	ldrh	r3, [r5, #12]
 8024b1c:	059a      	lsls	r2, r3, #22
 8024b1e:	d402      	bmi.n	8024b26 <_vfiprintf_r+0x202>
 8024b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024b22:	f7fe fc4d 	bl	80233c0 <__retarget_lock_release_recursive>
 8024b26:	89ab      	ldrh	r3, [r5, #12]
 8024b28:	065b      	lsls	r3, r3, #25
 8024b2a:	f53f af1d 	bmi.w	8024968 <_vfiprintf_r+0x44>
 8024b2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024b30:	e71c      	b.n	802496c <_vfiprintf_r+0x48>
 8024b32:	ab03      	add	r3, sp, #12
 8024b34:	9300      	str	r3, [sp, #0]
 8024b36:	462a      	mov	r2, r5
 8024b38:	4b05      	ldr	r3, [pc, #20]	; (8024b50 <_vfiprintf_r+0x22c>)
 8024b3a:	a904      	add	r1, sp, #16
 8024b3c:	4630      	mov	r0, r6
 8024b3e:	f7fe f917 	bl	8022d70 <_printf_i>
 8024b42:	e7e4      	b.n	8024b0e <_vfiprintf_r+0x1ea>
 8024b44:	0802662c 	.word	0x0802662c
 8024b48:	08026636 	.word	0x08026636
 8024b4c:	08022861 	.word	0x08022861
 8024b50:	080248ff 	.word	0x080248ff
 8024b54:	08026632 	.word	0x08026632

08024b58 <__sflush_r>:
 8024b58:	898a      	ldrh	r2, [r1, #12]
 8024b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b5e:	4605      	mov	r5, r0
 8024b60:	0710      	lsls	r0, r2, #28
 8024b62:	460c      	mov	r4, r1
 8024b64:	d458      	bmi.n	8024c18 <__sflush_r+0xc0>
 8024b66:	684b      	ldr	r3, [r1, #4]
 8024b68:	2b00      	cmp	r3, #0
 8024b6a:	dc05      	bgt.n	8024b78 <__sflush_r+0x20>
 8024b6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8024b6e:	2b00      	cmp	r3, #0
 8024b70:	dc02      	bgt.n	8024b78 <__sflush_r+0x20>
 8024b72:	2000      	movs	r0, #0
 8024b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024b7a:	2e00      	cmp	r6, #0
 8024b7c:	d0f9      	beq.n	8024b72 <__sflush_r+0x1a>
 8024b7e:	2300      	movs	r3, #0
 8024b80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024b84:	682f      	ldr	r7, [r5, #0]
 8024b86:	6a21      	ldr	r1, [r4, #32]
 8024b88:	602b      	str	r3, [r5, #0]
 8024b8a:	d032      	beq.n	8024bf2 <__sflush_r+0x9a>
 8024b8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024b8e:	89a3      	ldrh	r3, [r4, #12]
 8024b90:	075a      	lsls	r2, r3, #29
 8024b92:	d505      	bpl.n	8024ba0 <__sflush_r+0x48>
 8024b94:	6863      	ldr	r3, [r4, #4]
 8024b96:	1ac0      	subs	r0, r0, r3
 8024b98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024b9a:	b10b      	cbz	r3, 8024ba0 <__sflush_r+0x48>
 8024b9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024b9e:	1ac0      	subs	r0, r0, r3
 8024ba0:	2300      	movs	r3, #0
 8024ba2:	4602      	mov	r2, r0
 8024ba4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024ba6:	6a21      	ldr	r1, [r4, #32]
 8024ba8:	4628      	mov	r0, r5
 8024baa:	47b0      	blx	r6
 8024bac:	1c43      	adds	r3, r0, #1
 8024bae:	89a3      	ldrh	r3, [r4, #12]
 8024bb0:	d106      	bne.n	8024bc0 <__sflush_r+0x68>
 8024bb2:	6829      	ldr	r1, [r5, #0]
 8024bb4:	291d      	cmp	r1, #29
 8024bb6:	d82b      	bhi.n	8024c10 <__sflush_r+0xb8>
 8024bb8:	4a29      	ldr	r2, [pc, #164]	; (8024c60 <__sflush_r+0x108>)
 8024bba:	410a      	asrs	r2, r1
 8024bbc:	07d6      	lsls	r6, r2, #31
 8024bbe:	d427      	bmi.n	8024c10 <__sflush_r+0xb8>
 8024bc0:	2200      	movs	r2, #0
 8024bc2:	6062      	str	r2, [r4, #4]
 8024bc4:	04d9      	lsls	r1, r3, #19
 8024bc6:	6922      	ldr	r2, [r4, #16]
 8024bc8:	6022      	str	r2, [r4, #0]
 8024bca:	d504      	bpl.n	8024bd6 <__sflush_r+0x7e>
 8024bcc:	1c42      	adds	r2, r0, #1
 8024bce:	d101      	bne.n	8024bd4 <__sflush_r+0x7c>
 8024bd0:	682b      	ldr	r3, [r5, #0]
 8024bd2:	b903      	cbnz	r3, 8024bd6 <__sflush_r+0x7e>
 8024bd4:	6560      	str	r0, [r4, #84]	; 0x54
 8024bd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024bd8:	602f      	str	r7, [r5, #0]
 8024bda:	2900      	cmp	r1, #0
 8024bdc:	d0c9      	beq.n	8024b72 <__sflush_r+0x1a>
 8024bde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024be2:	4299      	cmp	r1, r3
 8024be4:	d002      	beq.n	8024bec <__sflush_r+0x94>
 8024be6:	4628      	mov	r0, r5
 8024be8:	f7ff f9f6 	bl	8023fd8 <_free_r>
 8024bec:	2000      	movs	r0, #0
 8024bee:	6360      	str	r0, [r4, #52]	; 0x34
 8024bf0:	e7c0      	b.n	8024b74 <__sflush_r+0x1c>
 8024bf2:	2301      	movs	r3, #1
 8024bf4:	4628      	mov	r0, r5
 8024bf6:	47b0      	blx	r6
 8024bf8:	1c41      	adds	r1, r0, #1
 8024bfa:	d1c8      	bne.n	8024b8e <__sflush_r+0x36>
 8024bfc:	682b      	ldr	r3, [r5, #0]
 8024bfe:	2b00      	cmp	r3, #0
 8024c00:	d0c5      	beq.n	8024b8e <__sflush_r+0x36>
 8024c02:	2b1d      	cmp	r3, #29
 8024c04:	d001      	beq.n	8024c0a <__sflush_r+0xb2>
 8024c06:	2b16      	cmp	r3, #22
 8024c08:	d101      	bne.n	8024c0e <__sflush_r+0xb6>
 8024c0a:	602f      	str	r7, [r5, #0]
 8024c0c:	e7b1      	b.n	8024b72 <__sflush_r+0x1a>
 8024c0e:	89a3      	ldrh	r3, [r4, #12]
 8024c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024c14:	81a3      	strh	r3, [r4, #12]
 8024c16:	e7ad      	b.n	8024b74 <__sflush_r+0x1c>
 8024c18:	690f      	ldr	r7, [r1, #16]
 8024c1a:	2f00      	cmp	r7, #0
 8024c1c:	d0a9      	beq.n	8024b72 <__sflush_r+0x1a>
 8024c1e:	0793      	lsls	r3, r2, #30
 8024c20:	680e      	ldr	r6, [r1, #0]
 8024c22:	bf08      	it	eq
 8024c24:	694b      	ldreq	r3, [r1, #20]
 8024c26:	600f      	str	r7, [r1, #0]
 8024c28:	bf18      	it	ne
 8024c2a:	2300      	movne	r3, #0
 8024c2c:	eba6 0807 	sub.w	r8, r6, r7
 8024c30:	608b      	str	r3, [r1, #8]
 8024c32:	f1b8 0f00 	cmp.w	r8, #0
 8024c36:	dd9c      	ble.n	8024b72 <__sflush_r+0x1a>
 8024c38:	6a21      	ldr	r1, [r4, #32]
 8024c3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8024c3c:	4643      	mov	r3, r8
 8024c3e:	463a      	mov	r2, r7
 8024c40:	4628      	mov	r0, r5
 8024c42:	47b0      	blx	r6
 8024c44:	2800      	cmp	r0, #0
 8024c46:	dc06      	bgt.n	8024c56 <__sflush_r+0xfe>
 8024c48:	89a3      	ldrh	r3, [r4, #12]
 8024c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024c4e:	81a3      	strh	r3, [r4, #12]
 8024c50:	f04f 30ff 	mov.w	r0, #4294967295
 8024c54:	e78e      	b.n	8024b74 <__sflush_r+0x1c>
 8024c56:	4407      	add	r7, r0
 8024c58:	eba8 0800 	sub.w	r8, r8, r0
 8024c5c:	e7e9      	b.n	8024c32 <__sflush_r+0xda>
 8024c5e:	bf00      	nop
 8024c60:	dfbffffe 	.word	0xdfbffffe

08024c64 <_fflush_r>:
 8024c64:	b538      	push	{r3, r4, r5, lr}
 8024c66:	690b      	ldr	r3, [r1, #16]
 8024c68:	4605      	mov	r5, r0
 8024c6a:	460c      	mov	r4, r1
 8024c6c:	b913      	cbnz	r3, 8024c74 <_fflush_r+0x10>
 8024c6e:	2500      	movs	r5, #0
 8024c70:	4628      	mov	r0, r5
 8024c72:	bd38      	pop	{r3, r4, r5, pc}
 8024c74:	b118      	cbz	r0, 8024c7e <_fflush_r+0x1a>
 8024c76:	6a03      	ldr	r3, [r0, #32]
 8024c78:	b90b      	cbnz	r3, 8024c7e <_fflush_r+0x1a>
 8024c7a:	f7fe fa27 	bl	80230cc <__sinit>
 8024c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024c82:	2b00      	cmp	r3, #0
 8024c84:	d0f3      	beq.n	8024c6e <_fflush_r+0xa>
 8024c86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024c88:	07d0      	lsls	r0, r2, #31
 8024c8a:	d404      	bmi.n	8024c96 <_fflush_r+0x32>
 8024c8c:	0599      	lsls	r1, r3, #22
 8024c8e:	d402      	bmi.n	8024c96 <_fflush_r+0x32>
 8024c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024c92:	f7fe fb94 	bl	80233be <__retarget_lock_acquire_recursive>
 8024c96:	4628      	mov	r0, r5
 8024c98:	4621      	mov	r1, r4
 8024c9a:	f7ff ff5d 	bl	8024b58 <__sflush_r>
 8024c9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024ca0:	07da      	lsls	r2, r3, #31
 8024ca2:	4605      	mov	r5, r0
 8024ca4:	d4e4      	bmi.n	8024c70 <_fflush_r+0xc>
 8024ca6:	89a3      	ldrh	r3, [r4, #12]
 8024ca8:	059b      	lsls	r3, r3, #22
 8024caa:	d4e1      	bmi.n	8024c70 <_fflush_r+0xc>
 8024cac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024cae:	f7fe fb87 	bl	80233c0 <__retarget_lock_release_recursive>
 8024cb2:	e7dd      	b.n	8024c70 <_fflush_r+0xc>

08024cb4 <__swbuf_r>:
 8024cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024cb6:	460e      	mov	r6, r1
 8024cb8:	4614      	mov	r4, r2
 8024cba:	4605      	mov	r5, r0
 8024cbc:	b118      	cbz	r0, 8024cc6 <__swbuf_r+0x12>
 8024cbe:	6a03      	ldr	r3, [r0, #32]
 8024cc0:	b90b      	cbnz	r3, 8024cc6 <__swbuf_r+0x12>
 8024cc2:	f7fe fa03 	bl	80230cc <__sinit>
 8024cc6:	69a3      	ldr	r3, [r4, #24]
 8024cc8:	60a3      	str	r3, [r4, #8]
 8024cca:	89a3      	ldrh	r3, [r4, #12]
 8024ccc:	071a      	lsls	r2, r3, #28
 8024cce:	d525      	bpl.n	8024d1c <__swbuf_r+0x68>
 8024cd0:	6923      	ldr	r3, [r4, #16]
 8024cd2:	b31b      	cbz	r3, 8024d1c <__swbuf_r+0x68>
 8024cd4:	6823      	ldr	r3, [r4, #0]
 8024cd6:	6922      	ldr	r2, [r4, #16]
 8024cd8:	1a98      	subs	r0, r3, r2
 8024cda:	6963      	ldr	r3, [r4, #20]
 8024cdc:	b2f6      	uxtb	r6, r6
 8024cde:	4283      	cmp	r3, r0
 8024ce0:	4637      	mov	r7, r6
 8024ce2:	dc04      	bgt.n	8024cee <__swbuf_r+0x3a>
 8024ce4:	4621      	mov	r1, r4
 8024ce6:	4628      	mov	r0, r5
 8024ce8:	f7ff ffbc 	bl	8024c64 <_fflush_r>
 8024cec:	b9e0      	cbnz	r0, 8024d28 <__swbuf_r+0x74>
 8024cee:	68a3      	ldr	r3, [r4, #8]
 8024cf0:	3b01      	subs	r3, #1
 8024cf2:	60a3      	str	r3, [r4, #8]
 8024cf4:	6823      	ldr	r3, [r4, #0]
 8024cf6:	1c5a      	adds	r2, r3, #1
 8024cf8:	6022      	str	r2, [r4, #0]
 8024cfa:	701e      	strb	r6, [r3, #0]
 8024cfc:	6962      	ldr	r2, [r4, #20]
 8024cfe:	1c43      	adds	r3, r0, #1
 8024d00:	429a      	cmp	r2, r3
 8024d02:	d004      	beq.n	8024d0e <__swbuf_r+0x5a>
 8024d04:	89a3      	ldrh	r3, [r4, #12]
 8024d06:	07db      	lsls	r3, r3, #31
 8024d08:	d506      	bpl.n	8024d18 <__swbuf_r+0x64>
 8024d0a:	2e0a      	cmp	r6, #10
 8024d0c:	d104      	bne.n	8024d18 <__swbuf_r+0x64>
 8024d0e:	4621      	mov	r1, r4
 8024d10:	4628      	mov	r0, r5
 8024d12:	f7ff ffa7 	bl	8024c64 <_fflush_r>
 8024d16:	b938      	cbnz	r0, 8024d28 <__swbuf_r+0x74>
 8024d18:	4638      	mov	r0, r7
 8024d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024d1c:	4621      	mov	r1, r4
 8024d1e:	4628      	mov	r0, r5
 8024d20:	f000 f806 	bl	8024d30 <__swsetup_r>
 8024d24:	2800      	cmp	r0, #0
 8024d26:	d0d5      	beq.n	8024cd4 <__swbuf_r+0x20>
 8024d28:	f04f 37ff 	mov.w	r7, #4294967295
 8024d2c:	e7f4      	b.n	8024d18 <__swbuf_r+0x64>
	...

08024d30 <__swsetup_r>:
 8024d30:	b538      	push	{r3, r4, r5, lr}
 8024d32:	4b2a      	ldr	r3, [pc, #168]	; (8024ddc <__swsetup_r+0xac>)
 8024d34:	4605      	mov	r5, r0
 8024d36:	6818      	ldr	r0, [r3, #0]
 8024d38:	460c      	mov	r4, r1
 8024d3a:	b118      	cbz	r0, 8024d44 <__swsetup_r+0x14>
 8024d3c:	6a03      	ldr	r3, [r0, #32]
 8024d3e:	b90b      	cbnz	r3, 8024d44 <__swsetup_r+0x14>
 8024d40:	f7fe f9c4 	bl	80230cc <__sinit>
 8024d44:	89a3      	ldrh	r3, [r4, #12]
 8024d46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024d4a:	0718      	lsls	r0, r3, #28
 8024d4c:	d422      	bmi.n	8024d94 <__swsetup_r+0x64>
 8024d4e:	06d9      	lsls	r1, r3, #27
 8024d50:	d407      	bmi.n	8024d62 <__swsetup_r+0x32>
 8024d52:	2309      	movs	r3, #9
 8024d54:	602b      	str	r3, [r5, #0]
 8024d56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024d5a:	81a3      	strh	r3, [r4, #12]
 8024d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8024d60:	e034      	b.n	8024dcc <__swsetup_r+0x9c>
 8024d62:	0758      	lsls	r0, r3, #29
 8024d64:	d512      	bpl.n	8024d8c <__swsetup_r+0x5c>
 8024d66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024d68:	b141      	cbz	r1, 8024d7c <__swsetup_r+0x4c>
 8024d6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024d6e:	4299      	cmp	r1, r3
 8024d70:	d002      	beq.n	8024d78 <__swsetup_r+0x48>
 8024d72:	4628      	mov	r0, r5
 8024d74:	f7ff f930 	bl	8023fd8 <_free_r>
 8024d78:	2300      	movs	r3, #0
 8024d7a:	6363      	str	r3, [r4, #52]	; 0x34
 8024d7c:	89a3      	ldrh	r3, [r4, #12]
 8024d7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024d82:	81a3      	strh	r3, [r4, #12]
 8024d84:	2300      	movs	r3, #0
 8024d86:	6063      	str	r3, [r4, #4]
 8024d88:	6923      	ldr	r3, [r4, #16]
 8024d8a:	6023      	str	r3, [r4, #0]
 8024d8c:	89a3      	ldrh	r3, [r4, #12]
 8024d8e:	f043 0308 	orr.w	r3, r3, #8
 8024d92:	81a3      	strh	r3, [r4, #12]
 8024d94:	6923      	ldr	r3, [r4, #16]
 8024d96:	b94b      	cbnz	r3, 8024dac <__swsetup_r+0x7c>
 8024d98:	89a3      	ldrh	r3, [r4, #12]
 8024d9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8024da2:	d003      	beq.n	8024dac <__swsetup_r+0x7c>
 8024da4:	4621      	mov	r1, r4
 8024da6:	4628      	mov	r0, r5
 8024da8:	f000 f8c9 	bl	8024f3e <__smakebuf_r>
 8024dac:	89a0      	ldrh	r0, [r4, #12]
 8024dae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024db2:	f010 0301 	ands.w	r3, r0, #1
 8024db6:	d00a      	beq.n	8024dce <__swsetup_r+0x9e>
 8024db8:	2300      	movs	r3, #0
 8024dba:	60a3      	str	r3, [r4, #8]
 8024dbc:	6963      	ldr	r3, [r4, #20]
 8024dbe:	425b      	negs	r3, r3
 8024dc0:	61a3      	str	r3, [r4, #24]
 8024dc2:	6923      	ldr	r3, [r4, #16]
 8024dc4:	b943      	cbnz	r3, 8024dd8 <__swsetup_r+0xa8>
 8024dc6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024dca:	d1c4      	bne.n	8024d56 <__swsetup_r+0x26>
 8024dcc:	bd38      	pop	{r3, r4, r5, pc}
 8024dce:	0781      	lsls	r1, r0, #30
 8024dd0:	bf58      	it	pl
 8024dd2:	6963      	ldrpl	r3, [r4, #20]
 8024dd4:	60a3      	str	r3, [r4, #8]
 8024dd6:	e7f4      	b.n	8024dc2 <__swsetup_r+0x92>
 8024dd8:	2000      	movs	r0, #0
 8024dda:	e7f7      	b.n	8024dcc <__swsetup_r+0x9c>
 8024ddc:	240000b4 	.word	0x240000b4

08024de0 <_raise_r>:
 8024de0:	291f      	cmp	r1, #31
 8024de2:	b538      	push	{r3, r4, r5, lr}
 8024de4:	4604      	mov	r4, r0
 8024de6:	460d      	mov	r5, r1
 8024de8:	d904      	bls.n	8024df4 <_raise_r+0x14>
 8024dea:	2316      	movs	r3, #22
 8024dec:	6003      	str	r3, [r0, #0]
 8024dee:	f04f 30ff 	mov.w	r0, #4294967295
 8024df2:	bd38      	pop	{r3, r4, r5, pc}
 8024df4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8024df6:	b112      	cbz	r2, 8024dfe <_raise_r+0x1e>
 8024df8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8024dfc:	b94b      	cbnz	r3, 8024e12 <_raise_r+0x32>
 8024dfe:	4620      	mov	r0, r4
 8024e00:	f000 f830 	bl	8024e64 <_getpid_r>
 8024e04:	462a      	mov	r2, r5
 8024e06:	4601      	mov	r1, r0
 8024e08:	4620      	mov	r0, r4
 8024e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024e0e:	f000 b817 	b.w	8024e40 <_kill_r>
 8024e12:	2b01      	cmp	r3, #1
 8024e14:	d00a      	beq.n	8024e2c <_raise_r+0x4c>
 8024e16:	1c59      	adds	r1, r3, #1
 8024e18:	d103      	bne.n	8024e22 <_raise_r+0x42>
 8024e1a:	2316      	movs	r3, #22
 8024e1c:	6003      	str	r3, [r0, #0]
 8024e1e:	2001      	movs	r0, #1
 8024e20:	e7e7      	b.n	8024df2 <_raise_r+0x12>
 8024e22:	2400      	movs	r4, #0
 8024e24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024e28:	4628      	mov	r0, r5
 8024e2a:	4798      	blx	r3
 8024e2c:	2000      	movs	r0, #0
 8024e2e:	e7e0      	b.n	8024df2 <_raise_r+0x12>

08024e30 <raise>:
 8024e30:	4b02      	ldr	r3, [pc, #8]	; (8024e3c <raise+0xc>)
 8024e32:	4601      	mov	r1, r0
 8024e34:	6818      	ldr	r0, [r3, #0]
 8024e36:	f7ff bfd3 	b.w	8024de0 <_raise_r>
 8024e3a:	bf00      	nop
 8024e3c:	240000b4 	.word	0x240000b4

08024e40 <_kill_r>:
 8024e40:	b538      	push	{r3, r4, r5, lr}
 8024e42:	4d07      	ldr	r5, [pc, #28]	; (8024e60 <_kill_r+0x20>)
 8024e44:	2300      	movs	r3, #0
 8024e46:	4604      	mov	r4, r0
 8024e48:	4608      	mov	r0, r1
 8024e4a:	4611      	mov	r1, r2
 8024e4c:	602b      	str	r3, [r5, #0]
 8024e4e:	f7dd f877 	bl	8001f40 <_kill>
 8024e52:	1c43      	adds	r3, r0, #1
 8024e54:	d102      	bne.n	8024e5c <_kill_r+0x1c>
 8024e56:	682b      	ldr	r3, [r5, #0]
 8024e58:	b103      	cbz	r3, 8024e5c <_kill_r+0x1c>
 8024e5a:	6023      	str	r3, [r4, #0]
 8024e5c:	bd38      	pop	{r3, r4, r5, pc}
 8024e5e:	bf00      	nop
 8024e60:	2401e598 	.word	0x2401e598

08024e64 <_getpid_r>:
 8024e64:	f7dd b864 	b.w	8001f30 <_getpid>

08024e68 <_sbrk_r>:
 8024e68:	b538      	push	{r3, r4, r5, lr}
 8024e6a:	4d06      	ldr	r5, [pc, #24]	; (8024e84 <_sbrk_r+0x1c>)
 8024e6c:	2300      	movs	r3, #0
 8024e6e:	4604      	mov	r4, r0
 8024e70:	4608      	mov	r0, r1
 8024e72:	602b      	str	r3, [r5, #0]
 8024e74:	f7dd f8ec 	bl	8002050 <_sbrk>
 8024e78:	1c43      	adds	r3, r0, #1
 8024e7a:	d102      	bne.n	8024e82 <_sbrk_r+0x1a>
 8024e7c:	682b      	ldr	r3, [r5, #0]
 8024e7e:	b103      	cbz	r3, 8024e82 <_sbrk_r+0x1a>
 8024e80:	6023      	str	r3, [r4, #0]
 8024e82:	bd38      	pop	{r3, r4, r5, pc}
 8024e84:	2401e598 	.word	0x2401e598

08024e88 <_calloc_r>:
 8024e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024e8a:	fba1 2402 	umull	r2, r4, r1, r2
 8024e8e:	b94c      	cbnz	r4, 8024ea4 <_calloc_r+0x1c>
 8024e90:	4611      	mov	r1, r2
 8024e92:	9201      	str	r2, [sp, #4]
 8024e94:	f7ff f914 	bl	80240c0 <_malloc_r>
 8024e98:	9a01      	ldr	r2, [sp, #4]
 8024e9a:	4605      	mov	r5, r0
 8024e9c:	b930      	cbnz	r0, 8024eac <_calloc_r+0x24>
 8024e9e:	4628      	mov	r0, r5
 8024ea0:	b003      	add	sp, #12
 8024ea2:	bd30      	pop	{r4, r5, pc}
 8024ea4:	220c      	movs	r2, #12
 8024ea6:	6002      	str	r2, [r0, #0]
 8024ea8:	2500      	movs	r5, #0
 8024eaa:	e7f8      	b.n	8024e9e <_calloc_r+0x16>
 8024eac:	4621      	mov	r1, r4
 8024eae:	f7fe f9b2 	bl	8023216 <memset>
 8024eb2:	e7f4      	b.n	8024e9e <_calloc_r+0x16>

08024eb4 <__ascii_mbtowc>:
 8024eb4:	b082      	sub	sp, #8
 8024eb6:	b901      	cbnz	r1, 8024eba <__ascii_mbtowc+0x6>
 8024eb8:	a901      	add	r1, sp, #4
 8024eba:	b142      	cbz	r2, 8024ece <__ascii_mbtowc+0x1a>
 8024ebc:	b14b      	cbz	r3, 8024ed2 <__ascii_mbtowc+0x1e>
 8024ebe:	7813      	ldrb	r3, [r2, #0]
 8024ec0:	600b      	str	r3, [r1, #0]
 8024ec2:	7812      	ldrb	r2, [r2, #0]
 8024ec4:	1e10      	subs	r0, r2, #0
 8024ec6:	bf18      	it	ne
 8024ec8:	2001      	movne	r0, #1
 8024eca:	b002      	add	sp, #8
 8024ecc:	4770      	bx	lr
 8024ece:	4610      	mov	r0, r2
 8024ed0:	e7fb      	b.n	8024eca <__ascii_mbtowc+0x16>
 8024ed2:	f06f 0001 	mvn.w	r0, #1
 8024ed6:	e7f8      	b.n	8024eca <__ascii_mbtowc+0x16>

08024ed8 <__ascii_wctomb>:
 8024ed8:	b149      	cbz	r1, 8024eee <__ascii_wctomb+0x16>
 8024eda:	2aff      	cmp	r2, #255	; 0xff
 8024edc:	bf85      	ittet	hi
 8024ede:	238a      	movhi	r3, #138	; 0x8a
 8024ee0:	6003      	strhi	r3, [r0, #0]
 8024ee2:	700a      	strbls	r2, [r1, #0]
 8024ee4:	f04f 30ff 	movhi.w	r0, #4294967295
 8024ee8:	bf98      	it	ls
 8024eea:	2001      	movls	r0, #1
 8024eec:	4770      	bx	lr
 8024eee:	4608      	mov	r0, r1
 8024ef0:	4770      	bx	lr

08024ef2 <__swhatbuf_r>:
 8024ef2:	b570      	push	{r4, r5, r6, lr}
 8024ef4:	460c      	mov	r4, r1
 8024ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024efa:	2900      	cmp	r1, #0
 8024efc:	b096      	sub	sp, #88	; 0x58
 8024efe:	4615      	mov	r5, r2
 8024f00:	461e      	mov	r6, r3
 8024f02:	da0d      	bge.n	8024f20 <__swhatbuf_r+0x2e>
 8024f04:	89a3      	ldrh	r3, [r4, #12]
 8024f06:	f013 0f80 	tst.w	r3, #128	; 0x80
 8024f0a:	f04f 0100 	mov.w	r1, #0
 8024f0e:	bf0c      	ite	eq
 8024f10:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8024f14:	2340      	movne	r3, #64	; 0x40
 8024f16:	2000      	movs	r0, #0
 8024f18:	6031      	str	r1, [r6, #0]
 8024f1a:	602b      	str	r3, [r5, #0]
 8024f1c:	b016      	add	sp, #88	; 0x58
 8024f1e:	bd70      	pop	{r4, r5, r6, pc}
 8024f20:	466a      	mov	r2, sp
 8024f22:	f000 f849 	bl	8024fb8 <_fstat_r>
 8024f26:	2800      	cmp	r0, #0
 8024f28:	dbec      	blt.n	8024f04 <__swhatbuf_r+0x12>
 8024f2a:	9901      	ldr	r1, [sp, #4]
 8024f2c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8024f30:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8024f34:	4259      	negs	r1, r3
 8024f36:	4159      	adcs	r1, r3
 8024f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8024f3c:	e7eb      	b.n	8024f16 <__swhatbuf_r+0x24>

08024f3e <__smakebuf_r>:
 8024f3e:	898b      	ldrh	r3, [r1, #12]
 8024f40:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8024f42:	079d      	lsls	r5, r3, #30
 8024f44:	4606      	mov	r6, r0
 8024f46:	460c      	mov	r4, r1
 8024f48:	d507      	bpl.n	8024f5a <__smakebuf_r+0x1c>
 8024f4a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8024f4e:	6023      	str	r3, [r4, #0]
 8024f50:	6123      	str	r3, [r4, #16]
 8024f52:	2301      	movs	r3, #1
 8024f54:	6163      	str	r3, [r4, #20]
 8024f56:	b002      	add	sp, #8
 8024f58:	bd70      	pop	{r4, r5, r6, pc}
 8024f5a:	ab01      	add	r3, sp, #4
 8024f5c:	466a      	mov	r2, sp
 8024f5e:	f7ff ffc8 	bl	8024ef2 <__swhatbuf_r>
 8024f62:	9900      	ldr	r1, [sp, #0]
 8024f64:	4605      	mov	r5, r0
 8024f66:	4630      	mov	r0, r6
 8024f68:	f7ff f8aa 	bl	80240c0 <_malloc_r>
 8024f6c:	b948      	cbnz	r0, 8024f82 <__smakebuf_r+0x44>
 8024f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024f72:	059a      	lsls	r2, r3, #22
 8024f74:	d4ef      	bmi.n	8024f56 <__smakebuf_r+0x18>
 8024f76:	f023 0303 	bic.w	r3, r3, #3
 8024f7a:	f043 0302 	orr.w	r3, r3, #2
 8024f7e:	81a3      	strh	r3, [r4, #12]
 8024f80:	e7e3      	b.n	8024f4a <__smakebuf_r+0xc>
 8024f82:	89a3      	ldrh	r3, [r4, #12]
 8024f84:	6020      	str	r0, [r4, #0]
 8024f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024f8a:	81a3      	strh	r3, [r4, #12]
 8024f8c:	9b00      	ldr	r3, [sp, #0]
 8024f8e:	6163      	str	r3, [r4, #20]
 8024f90:	9b01      	ldr	r3, [sp, #4]
 8024f92:	6120      	str	r0, [r4, #16]
 8024f94:	b15b      	cbz	r3, 8024fae <__smakebuf_r+0x70>
 8024f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024f9a:	4630      	mov	r0, r6
 8024f9c:	f000 f81e 	bl	8024fdc <_isatty_r>
 8024fa0:	b128      	cbz	r0, 8024fae <__smakebuf_r+0x70>
 8024fa2:	89a3      	ldrh	r3, [r4, #12]
 8024fa4:	f023 0303 	bic.w	r3, r3, #3
 8024fa8:	f043 0301 	orr.w	r3, r3, #1
 8024fac:	81a3      	strh	r3, [r4, #12]
 8024fae:	89a3      	ldrh	r3, [r4, #12]
 8024fb0:	431d      	orrs	r5, r3
 8024fb2:	81a5      	strh	r5, [r4, #12]
 8024fb4:	e7cf      	b.n	8024f56 <__smakebuf_r+0x18>
	...

08024fb8 <_fstat_r>:
 8024fb8:	b538      	push	{r3, r4, r5, lr}
 8024fba:	4d07      	ldr	r5, [pc, #28]	; (8024fd8 <_fstat_r+0x20>)
 8024fbc:	2300      	movs	r3, #0
 8024fbe:	4604      	mov	r4, r0
 8024fc0:	4608      	mov	r0, r1
 8024fc2:	4611      	mov	r1, r2
 8024fc4:	602b      	str	r3, [r5, #0]
 8024fc6:	f7dd f81a 	bl	8001ffe <_fstat>
 8024fca:	1c43      	adds	r3, r0, #1
 8024fcc:	d102      	bne.n	8024fd4 <_fstat_r+0x1c>
 8024fce:	682b      	ldr	r3, [r5, #0]
 8024fd0:	b103      	cbz	r3, 8024fd4 <_fstat_r+0x1c>
 8024fd2:	6023      	str	r3, [r4, #0]
 8024fd4:	bd38      	pop	{r3, r4, r5, pc}
 8024fd6:	bf00      	nop
 8024fd8:	2401e598 	.word	0x2401e598

08024fdc <_isatty_r>:
 8024fdc:	b538      	push	{r3, r4, r5, lr}
 8024fde:	4d06      	ldr	r5, [pc, #24]	; (8024ff8 <_isatty_r+0x1c>)
 8024fe0:	2300      	movs	r3, #0
 8024fe2:	4604      	mov	r4, r0
 8024fe4:	4608      	mov	r0, r1
 8024fe6:	602b      	str	r3, [r5, #0]
 8024fe8:	f7dd f819 	bl	800201e <_isatty>
 8024fec:	1c43      	adds	r3, r0, #1
 8024fee:	d102      	bne.n	8024ff6 <_isatty_r+0x1a>
 8024ff0:	682b      	ldr	r3, [r5, #0]
 8024ff2:	b103      	cbz	r3, 8024ff6 <_isatty_r+0x1a>
 8024ff4:	6023      	str	r3, [r4, #0]
 8024ff6:	bd38      	pop	{r3, r4, r5, pc}
 8024ff8:	2401e598 	.word	0x2401e598

08024ffc <_init>:
 8024ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024ffe:	bf00      	nop
 8025000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025002:	bc08      	pop	{r3}
 8025004:	469e      	mov	lr, r3
 8025006:	4770      	bx	lr

08025008 <_fini>:
 8025008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802500a:	bf00      	nop
 802500c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802500e:	bc08      	pop	{r3}
 8025010:	469e      	mov	lr, r3
 8025012:	4770      	bx	lr
