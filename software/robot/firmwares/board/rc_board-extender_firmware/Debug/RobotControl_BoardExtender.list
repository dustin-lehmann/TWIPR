
RobotControl_BoardExtender.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008188  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08008244  08008244  00018244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008368  08008368  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08008368  08008368  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008368  08008368  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008368  08008368  00018368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008370  08008370  00018370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b5c  2000000c  08008380  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b68  08008380  00020b68  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000184ef  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c1e  00000000  00000000  00038566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013b0  00000000  00000000  0003c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f32  00000000  00000000  0003d538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a79c  00000000  00000000  0003e46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019027  00000000  00000000  00058c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009f36d  00000000  00000000  00071c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000484c  00000000  00000000  00110f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  001157e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800822c 	.word	0x0800822c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800822c 	.word	0x0800822c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_f2uiz>:
 800021c:	219e      	movs	r1, #158	; 0x9e
 800021e:	b510      	push	{r4, lr}
 8000220:	05c9      	lsls	r1, r1, #23
 8000222:	1c04      	adds	r4, r0, #0
 8000224:	f000 fe5c 	bl	8000ee0 <__aeabi_fcmpge>
 8000228:	2800      	cmp	r0, #0
 800022a:	d103      	bne.n	8000234 <__aeabi_f2uiz+0x18>
 800022c:	1c20      	adds	r0, r4, #0
 800022e:	f000 fdb5 	bl	8000d9c <__aeabi_f2iz>
 8000232:	bd10      	pop	{r4, pc}
 8000234:	219e      	movs	r1, #158	; 0x9e
 8000236:	1c20      	adds	r0, r4, #0
 8000238:	05c9      	lsls	r1, r1, #23
 800023a:	f000 fc0f 	bl	8000a5c <__aeabi_fsub>
 800023e:	f000 fdad 	bl	8000d9c <__aeabi_f2iz>
 8000242:	2380      	movs	r3, #128	; 0x80
 8000244:	061b      	lsls	r3, r3, #24
 8000246:	469c      	mov	ip, r3
 8000248:	4460      	add	r0, ip
 800024a:	e7f2      	b.n	8000232 <__aeabi_f2uiz+0x16>

0800024c <__aeabi_fadd>:
 800024c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800024e:	4647      	mov	r7, r8
 8000250:	46ce      	mov	lr, r9
 8000252:	024a      	lsls	r2, r1, #9
 8000254:	0243      	lsls	r3, r0, #9
 8000256:	0045      	lsls	r5, r0, #1
 8000258:	0fc4      	lsrs	r4, r0, #31
 800025a:	0a50      	lsrs	r0, r2, #9
 800025c:	4680      	mov	r8, r0
 800025e:	0048      	lsls	r0, r1, #1
 8000260:	0a5b      	lsrs	r3, r3, #9
 8000262:	0e00      	lsrs	r0, r0, #24
 8000264:	0992      	lsrs	r2, r2, #6
 8000266:	4694      	mov	ip, r2
 8000268:	b580      	push	{r7, lr}
 800026a:	001e      	movs	r6, r3
 800026c:	4681      	mov	r9, r0
 800026e:	0002      	movs	r2, r0
 8000270:	0e2d      	lsrs	r5, r5, #24
 8000272:	00df      	lsls	r7, r3, #3
 8000274:	0fc9      	lsrs	r1, r1, #31
 8000276:	428c      	cmp	r4, r1
 8000278:	d024      	beq.n	80002c4 <__aeabi_fadd+0x78>
 800027a:	1a28      	subs	r0, r5, r0
 800027c:	2800      	cmp	r0, #0
 800027e:	dd0e      	ble.n	800029e <__aeabi_fadd+0x52>
 8000280:	2a00      	cmp	r2, #0
 8000282:	d13e      	bne.n	8000302 <__aeabi_fadd+0xb6>
 8000284:	4662      	mov	r2, ip
 8000286:	2a00      	cmp	r2, #0
 8000288:	d100      	bne.n	800028c <__aeabi_fadd+0x40>
 800028a:	e0fd      	b.n	8000488 <__aeabi_fadd+0x23c>
 800028c:	1e42      	subs	r2, r0, #1
 800028e:	2801      	cmp	r0, #1
 8000290:	d100      	bne.n	8000294 <__aeabi_fadd+0x48>
 8000292:	e137      	b.n	8000504 <__aeabi_fadd+0x2b8>
 8000294:	28ff      	cmp	r0, #255	; 0xff
 8000296:	d100      	bne.n	800029a <__aeabi_fadd+0x4e>
 8000298:	e0a9      	b.n	80003ee <__aeabi_fadd+0x1a2>
 800029a:	0010      	movs	r0, r2
 800029c:	e039      	b.n	8000312 <__aeabi_fadd+0xc6>
 800029e:	2800      	cmp	r0, #0
 80002a0:	d063      	beq.n	800036a <__aeabi_fadd+0x11e>
 80002a2:	464b      	mov	r3, r9
 80002a4:	1b52      	subs	r2, r2, r5
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	d000      	beq.n	80002ac <__aeabi_fadd+0x60>
 80002aa:	e0e0      	b.n	800046e <__aeabi_fadd+0x222>
 80002ac:	2f00      	cmp	r7, #0
 80002ae:	d100      	bne.n	80002b2 <__aeabi_fadd+0x66>
 80002b0:	e0ce      	b.n	8000450 <__aeabi_fadd+0x204>
 80002b2:	1e53      	subs	r3, r2, #1
 80002b4:	2a01      	cmp	r2, #1
 80002b6:	d100      	bne.n	80002ba <__aeabi_fadd+0x6e>
 80002b8:	e155      	b.n	8000566 <__aeabi_fadd+0x31a>
 80002ba:	2aff      	cmp	r2, #255	; 0xff
 80002bc:	d100      	bne.n	80002c0 <__aeabi_fadd+0x74>
 80002be:	e094      	b.n	80003ea <__aeabi_fadd+0x19e>
 80002c0:	001a      	movs	r2, r3
 80002c2:	e0d9      	b.n	8000478 <__aeabi_fadd+0x22c>
 80002c4:	1a2a      	subs	r2, r5, r0
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	dc00      	bgt.n	80002cc <__aeabi_fadd+0x80>
 80002ca:	e099      	b.n	8000400 <__aeabi_fadd+0x1b4>
 80002cc:	2800      	cmp	r0, #0
 80002ce:	d062      	beq.n	8000396 <__aeabi_fadd+0x14a>
 80002d0:	2dff      	cmp	r5, #255	; 0xff
 80002d2:	d100      	bne.n	80002d6 <__aeabi_fadd+0x8a>
 80002d4:	e08b      	b.n	80003ee <__aeabi_fadd+0x1a2>
 80002d6:	2380      	movs	r3, #128	; 0x80
 80002d8:	4661      	mov	r1, ip
 80002da:	04db      	lsls	r3, r3, #19
 80002dc:	4319      	orrs	r1, r3
 80002de:	468c      	mov	ip, r1
 80002e0:	2a1b      	cmp	r2, #27
 80002e2:	dc00      	bgt.n	80002e6 <__aeabi_fadd+0x9a>
 80002e4:	e0d2      	b.n	800048c <__aeabi_fadd+0x240>
 80002e6:	2301      	movs	r3, #1
 80002e8:	19db      	adds	r3, r3, r7
 80002ea:	015a      	lsls	r2, r3, #5
 80002ec:	d56a      	bpl.n	80003c4 <__aeabi_fadd+0x178>
 80002ee:	3501      	adds	r5, #1
 80002f0:	2dff      	cmp	r5, #255	; 0xff
 80002f2:	d05b      	beq.n	80003ac <__aeabi_fadd+0x160>
 80002f4:	2201      	movs	r2, #1
 80002f6:	49a3      	ldr	r1, [pc, #652]	; (8000584 <__aeabi_fadd+0x338>)
 80002f8:	401a      	ands	r2, r3
 80002fa:	085b      	lsrs	r3, r3, #1
 80002fc:	400b      	ands	r3, r1
 80002fe:	4313      	orrs	r3, r2
 8000300:	e01c      	b.n	800033c <__aeabi_fadd+0xf0>
 8000302:	2dff      	cmp	r5, #255	; 0xff
 8000304:	d100      	bne.n	8000308 <__aeabi_fadd+0xbc>
 8000306:	e072      	b.n	80003ee <__aeabi_fadd+0x1a2>
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	4662      	mov	r2, ip
 800030c:	04db      	lsls	r3, r3, #19
 800030e:	431a      	orrs	r2, r3
 8000310:	4694      	mov	ip, r2
 8000312:	281b      	cmp	r0, #27
 8000314:	dc00      	bgt.n	8000318 <__aeabi_fadd+0xcc>
 8000316:	e090      	b.n	800043a <__aeabi_fadd+0x1ee>
 8000318:	2301      	movs	r3, #1
 800031a:	1afb      	subs	r3, r7, r3
 800031c:	015a      	lsls	r2, r3, #5
 800031e:	d551      	bpl.n	80003c4 <__aeabi_fadd+0x178>
 8000320:	019b      	lsls	r3, r3, #6
 8000322:	099e      	lsrs	r6, r3, #6
 8000324:	0030      	movs	r0, r6
 8000326:	f000 fde5 	bl	8000ef4 <__clzsi2>
 800032a:	0033      	movs	r3, r6
 800032c:	3805      	subs	r0, #5
 800032e:	4083      	lsls	r3, r0
 8000330:	4285      	cmp	r5, r0
 8000332:	dc00      	bgt.n	8000336 <__aeabi_fadd+0xea>
 8000334:	e075      	b.n	8000422 <__aeabi_fadd+0x1d6>
 8000336:	4a94      	ldr	r2, [pc, #592]	; (8000588 <__aeabi_fadd+0x33c>)
 8000338:	1a2d      	subs	r5, r5, r0
 800033a:	4013      	ands	r3, r2
 800033c:	075a      	lsls	r2, r3, #29
 800033e:	d004      	beq.n	800034a <__aeabi_fadd+0xfe>
 8000340:	220f      	movs	r2, #15
 8000342:	401a      	ands	r2, r3
 8000344:	2a04      	cmp	r2, #4
 8000346:	d000      	beq.n	800034a <__aeabi_fadd+0xfe>
 8000348:	3304      	adds	r3, #4
 800034a:	015a      	lsls	r2, r3, #5
 800034c:	d53c      	bpl.n	80003c8 <__aeabi_fadd+0x17c>
 800034e:	1c68      	adds	r0, r5, #1
 8000350:	2dfe      	cmp	r5, #254	; 0xfe
 8000352:	d02b      	beq.n	80003ac <__aeabi_fadd+0x160>
 8000354:	019b      	lsls	r3, r3, #6
 8000356:	0a5e      	lsrs	r6, r3, #9
 8000358:	b2c0      	uxtb	r0, r0
 800035a:	05c0      	lsls	r0, r0, #23
 800035c:	4330      	orrs	r0, r6
 800035e:	07e4      	lsls	r4, r4, #31
 8000360:	4320      	orrs	r0, r4
 8000362:	bcc0      	pop	{r6, r7}
 8000364:	46b9      	mov	r9, r7
 8000366:	46b0      	mov	r8, r6
 8000368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800036a:	20fe      	movs	r0, #254	; 0xfe
 800036c:	1c6a      	adds	r2, r5, #1
 800036e:	4210      	tst	r0, r2
 8000370:	d172      	bne.n	8000458 <__aeabi_fadd+0x20c>
 8000372:	2d00      	cmp	r5, #0
 8000374:	d000      	beq.n	8000378 <__aeabi_fadd+0x12c>
 8000376:	e0ae      	b.n	80004d6 <__aeabi_fadd+0x28a>
 8000378:	2f00      	cmp	r7, #0
 800037a:	d100      	bne.n	800037e <__aeabi_fadd+0x132>
 800037c:	e0ec      	b.n	8000558 <__aeabi_fadd+0x30c>
 800037e:	4663      	mov	r3, ip
 8000380:	2000      	movs	r0, #0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d0e9      	beq.n	800035a <__aeabi_fadd+0x10e>
 8000386:	1afb      	subs	r3, r7, r3
 8000388:	015a      	lsls	r2, r3, #5
 800038a:	d400      	bmi.n	800038e <__aeabi_fadd+0x142>
 800038c:	e0f3      	b.n	8000576 <__aeabi_fadd+0x32a>
 800038e:	4663      	mov	r3, ip
 8000390:	000c      	movs	r4, r1
 8000392:	1bdb      	subs	r3, r3, r7
 8000394:	e7d2      	b.n	800033c <__aeabi_fadd+0xf0>
 8000396:	4661      	mov	r1, ip
 8000398:	2900      	cmp	r1, #0
 800039a:	d05b      	beq.n	8000454 <__aeabi_fadd+0x208>
 800039c:	1e51      	subs	r1, r2, #1
 800039e:	2a01      	cmp	r2, #1
 80003a0:	d100      	bne.n	80003a4 <__aeabi_fadd+0x158>
 80003a2:	e0a7      	b.n	80004f4 <__aeabi_fadd+0x2a8>
 80003a4:	2aff      	cmp	r2, #255	; 0xff
 80003a6:	d022      	beq.n	80003ee <__aeabi_fadd+0x1a2>
 80003a8:	000a      	movs	r2, r1
 80003aa:	e799      	b.n	80002e0 <__aeabi_fadd+0x94>
 80003ac:	20ff      	movs	r0, #255	; 0xff
 80003ae:	2600      	movs	r6, #0
 80003b0:	e7d3      	b.n	800035a <__aeabi_fadd+0x10e>
 80003b2:	21fe      	movs	r1, #254	; 0xfe
 80003b4:	1c6a      	adds	r2, r5, #1
 80003b6:	4211      	tst	r1, r2
 80003b8:	d073      	beq.n	80004a2 <__aeabi_fadd+0x256>
 80003ba:	2aff      	cmp	r2, #255	; 0xff
 80003bc:	d0f6      	beq.n	80003ac <__aeabi_fadd+0x160>
 80003be:	0015      	movs	r5, r2
 80003c0:	4467      	add	r7, ip
 80003c2:	087b      	lsrs	r3, r7, #1
 80003c4:	075a      	lsls	r2, r3, #29
 80003c6:	d1bb      	bne.n	8000340 <__aeabi_fadd+0xf4>
 80003c8:	08db      	lsrs	r3, r3, #3
 80003ca:	2dff      	cmp	r5, #255	; 0xff
 80003cc:	d00f      	beq.n	80003ee <__aeabi_fadd+0x1a2>
 80003ce:	025b      	lsls	r3, r3, #9
 80003d0:	0a5e      	lsrs	r6, r3, #9
 80003d2:	b2e8      	uxtb	r0, r5
 80003d4:	e7c1      	b.n	800035a <__aeabi_fadd+0x10e>
 80003d6:	4662      	mov	r2, ip
 80003d8:	2a00      	cmp	r2, #0
 80003da:	d008      	beq.n	80003ee <__aeabi_fadd+0x1a2>
 80003dc:	2280      	movs	r2, #128	; 0x80
 80003de:	03d2      	lsls	r2, r2, #15
 80003e0:	4213      	tst	r3, r2
 80003e2:	d004      	beq.n	80003ee <__aeabi_fadd+0x1a2>
 80003e4:	4640      	mov	r0, r8
 80003e6:	4210      	tst	r0, r2
 80003e8:	d101      	bne.n	80003ee <__aeabi_fadd+0x1a2>
 80003ea:	000c      	movs	r4, r1
 80003ec:	4643      	mov	r3, r8
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0dc      	beq.n	80003ac <__aeabi_fadd+0x160>
 80003f2:	2680      	movs	r6, #128	; 0x80
 80003f4:	03f6      	lsls	r6, r6, #15
 80003f6:	431e      	orrs	r6, r3
 80003f8:	0276      	lsls	r6, r6, #9
 80003fa:	20ff      	movs	r0, #255	; 0xff
 80003fc:	0a76      	lsrs	r6, r6, #9
 80003fe:	e7ac      	b.n	800035a <__aeabi_fadd+0x10e>
 8000400:	2a00      	cmp	r2, #0
 8000402:	d0d6      	beq.n	80003b2 <__aeabi_fadd+0x166>
 8000404:	1b42      	subs	r2, r0, r5
 8000406:	2d00      	cmp	r5, #0
 8000408:	d05c      	beq.n	80004c4 <__aeabi_fadd+0x278>
 800040a:	28ff      	cmp	r0, #255	; 0xff
 800040c:	d0ee      	beq.n	80003ec <__aeabi_fadd+0x1a0>
 800040e:	2380      	movs	r3, #128	; 0x80
 8000410:	04db      	lsls	r3, r3, #19
 8000412:	431f      	orrs	r7, r3
 8000414:	2a1b      	cmp	r2, #27
 8000416:	dc00      	bgt.n	800041a <__aeabi_fadd+0x1ce>
 8000418:	e082      	b.n	8000520 <__aeabi_fadd+0x2d4>
 800041a:	2301      	movs	r3, #1
 800041c:	464d      	mov	r5, r9
 800041e:	4463      	add	r3, ip
 8000420:	e763      	b.n	80002ea <__aeabi_fadd+0x9e>
 8000422:	2220      	movs	r2, #32
 8000424:	1b40      	subs	r0, r0, r5
 8000426:	3001      	adds	r0, #1
 8000428:	1a12      	subs	r2, r2, r0
 800042a:	0019      	movs	r1, r3
 800042c:	4093      	lsls	r3, r2
 800042e:	40c1      	lsrs	r1, r0
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	4193      	sbcs	r3, r2
 8000434:	2500      	movs	r5, #0
 8000436:	430b      	orrs	r3, r1
 8000438:	e780      	b.n	800033c <__aeabi_fadd+0xf0>
 800043a:	2320      	movs	r3, #32
 800043c:	4661      	mov	r1, ip
 800043e:	1a1b      	subs	r3, r3, r0
 8000440:	4099      	lsls	r1, r3
 8000442:	4662      	mov	r2, ip
 8000444:	000b      	movs	r3, r1
 8000446:	40c2      	lsrs	r2, r0
 8000448:	1e59      	subs	r1, r3, #1
 800044a:	418b      	sbcs	r3, r1
 800044c:	4313      	orrs	r3, r2
 800044e:	e764      	b.n	800031a <__aeabi_fadd+0xce>
 8000450:	000c      	movs	r4, r1
 8000452:	4643      	mov	r3, r8
 8000454:	0015      	movs	r5, r2
 8000456:	e7b8      	b.n	80003ca <__aeabi_fadd+0x17e>
 8000458:	4663      	mov	r3, ip
 800045a:	1afe      	subs	r6, r7, r3
 800045c:	0173      	lsls	r3, r6, #5
 800045e:	d445      	bmi.n	80004ec <__aeabi_fadd+0x2a0>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d000      	beq.n	8000466 <__aeabi_fadd+0x21a>
 8000464:	e75e      	b.n	8000324 <__aeabi_fadd+0xd8>
 8000466:	2400      	movs	r4, #0
 8000468:	2000      	movs	r0, #0
 800046a:	2600      	movs	r6, #0
 800046c:	e775      	b.n	800035a <__aeabi_fadd+0x10e>
 800046e:	2bff      	cmp	r3, #255	; 0xff
 8000470:	d0bb      	beq.n	80003ea <__aeabi_fadd+0x19e>
 8000472:	2380      	movs	r3, #128	; 0x80
 8000474:	04db      	lsls	r3, r3, #19
 8000476:	431f      	orrs	r7, r3
 8000478:	2a1b      	cmp	r2, #27
 800047a:	dd47      	ble.n	800050c <__aeabi_fadd+0x2c0>
 800047c:	2301      	movs	r3, #1
 800047e:	4662      	mov	r2, ip
 8000480:	000c      	movs	r4, r1
 8000482:	464d      	mov	r5, r9
 8000484:	1ad3      	subs	r3, r2, r3
 8000486:	e749      	b.n	800031c <__aeabi_fadd+0xd0>
 8000488:	0005      	movs	r5, r0
 800048a:	e79e      	b.n	80003ca <__aeabi_fadd+0x17e>
 800048c:	4661      	mov	r1, ip
 800048e:	2320      	movs	r3, #32
 8000490:	40d1      	lsrs	r1, r2
 8000492:	1a9b      	subs	r3, r3, r2
 8000494:	4662      	mov	r2, ip
 8000496:	409a      	lsls	r2, r3
 8000498:	0013      	movs	r3, r2
 800049a:	1e5a      	subs	r2, r3, #1
 800049c:	4193      	sbcs	r3, r2
 800049e:	430b      	orrs	r3, r1
 80004a0:	e722      	b.n	80002e8 <__aeabi_fadd+0x9c>
 80004a2:	2d00      	cmp	r5, #0
 80004a4:	d146      	bne.n	8000534 <__aeabi_fadd+0x2e8>
 80004a6:	2f00      	cmp	r7, #0
 80004a8:	d062      	beq.n	8000570 <__aeabi_fadd+0x324>
 80004aa:	4663      	mov	r3, ip
 80004ac:	2000      	movs	r0, #0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d100      	bne.n	80004b4 <__aeabi_fadd+0x268>
 80004b2:	e752      	b.n	800035a <__aeabi_fadd+0x10e>
 80004b4:	003b      	movs	r3, r7
 80004b6:	4463      	add	r3, ip
 80004b8:	015a      	lsls	r2, r3, #5
 80004ba:	d583      	bpl.n	80003c4 <__aeabi_fadd+0x178>
 80004bc:	4a32      	ldr	r2, [pc, #200]	; (8000588 <__aeabi_fadd+0x33c>)
 80004be:	3501      	adds	r5, #1
 80004c0:	4013      	ands	r3, r2
 80004c2:	e77f      	b.n	80003c4 <__aeabi_fadd+0x178>
 80004c4:	2f00      	cmp	r7, #0
 80004c6:	d0c4      	beq.n	8000452 <__aeabi_fadd+0x206>
 80004c8:	1e53      	subs	r3, r2, #1
 80004ca:	2a01      	cmp	r2, #1
 80004cc:	d012      	beq.n	80004f4 <__aeabi_fadd+0x2a8>
 80004ce:	2aff      	cmp	r2, #255	; 0xff
 80004d0:	d08c      	beq.n	80003ec <__aeabi_fadd+0x1a0>
 80004d2:	001a      	movs	r2, r3
 80004d4:	e79e      	b.n	8000414 <__aeabi_fadd+0x1c8>
 80004d6:	2f00      	cmp	r7, #0
 80004d8:	d000      	beq.n	80004dc <__aeabi_fadd+0x290>
 80004da:	e77c      	b.n	80003d6 <__aeabi_fadd+0x18a>
 80004dc:	4663      	mov	r3, ip
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d183      	bne.n	80003ea <__aeabi_fadd+0x19e>
 80004e2:	2680      	movs	r6, #128	; 0x80
 80004e4:	2400      	movs	r4, #0
 80004e6:	20ff      	movs	r0, #255	; 0xff
 80004e8:	03f6      	lsls	r6, r6, #15
 80004ea:	e736      	b.n	800035a <__aeabi_fadd+0x10e>
 80004ec:	4663      	mov	r3, ip
 80004ee:	000c      	movs	r4, r1
 80004f0:	1bde      	subs	r6, r3, r7
 80004f2:	e717      	b.n	8000324 <__aeabi_fadd+0xd8>
 80004f4:	003b      	movs	r3, r7
 80004f6:	4463      	add	r3, ip
 80004f8:	2501      	movs	r5, #1
 80004fa:	015a      	lsls	r2, r3, #5
 80004fc:	d400      	bmi.n	8000500 <__aeabi_fadd+0x2b4>
 80004fe:	e761      	b.n	80003c4 <__aeabi_fadd+0x178>
 8000500:	2502      	movs	r5, #2
 8000502:	e6f7      	b.n	80002f4 <__aeabi_fadd+0xa8>
 8000504:	4663      	mov	r3, ip
 8000506:	2501      	movs	r5, #1
 8000508:	1afb      	subs	r3, r7, r3
 800050a:	e707      	b.n	800031c <__aeabi_fadd+0xd0>
 800050c:	2320      	movs	r3, #32
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	0038      	movs	r0, r7
 8000512:	409f      	lsls	r7, r3
 8000514:	003b      	movs	r3, r7
 8000516:	40d0      	lsrs	r0, r2
 8000518:	1e5a      	subs	r2, r3, #1
 800051a:	4193      	sbcs	r3, r2
 800051c:	4303      	orrs	r3, r0
 800051e:	e7ae      	b.n	800047e <__aeabi_fadd+0x232>
 8000520:	2320      	movs	r3, #32
 8000522:	1a9b      	subs	r3, r3, r2
 8000524:	0039      	movs	r1, r7
 8000526:	409f      	lsls	r7, r3
 8000528:	003b      	movs	r3, r7
 800052a:	40d1      	lsrs	r1, r2
 800052c:	1e5a      	subs	r2, r3, #1
 800052e:	4193      	sbcs	r3, r2
 8000530:	430b      	orrs	r3, r1
 8000532:	e773      	b.n	800041c <__aeabi_fadd+0x1d0>
 8000534:	2f00      	cmp	r7, #0
 8000536:	d100      	bne.n	800053a <__aeabi_fadd+0x2ee>
 8000538:	e758      	b.n	80003ec <__aeabi_fadd+0x1a0>
 800053a:	4662      	mov	r2, ip
 800053c:	2a00      	cmp	r2, #0
 800053e:	d100      	bne.n	8000542 <__aeabi_fadd+0x2f6>
 8000540:	e755      	b.n	80003ee <__aeabi_fadd+0x1a2>
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	03d2      	lsls	r2, r2, #15
 8000546:	4213      	tst	r3, r2
 8000548:	d100      	bne.n	800054c <__aeabi_fadd+0x300>
 800054a:	e750      	b.n	80003ee <__aeabi_fadd+0x1a2>
 800054c:	4641      	mov	r1, r8
 800054e:	4211      	tst	r1, r2
 8000550:	d000      	beq.n	8000554 <__aeabi_fadd+0x308>
 8000552:	e74c      	b.n	80003ee <__aeabi_fadd+0x1a2>
 8000554:	4643      	mov	r3, r8
 8000556:	e74a      	b.n	80003ee <__aeabi_fadd+0x1a2>
 8000558:	4663      	mov	r3, ip
 800055a:	2b00      	cmp	r3, #0
 800055c:	d083      	beq.n	8000466 <__aeabi_fadd+0x21a>
 800055e:	000c      	movs	r4, r1
 8000560:	4646      	mov	r6, r8
 8000562:	2000      	movs	r0, #0
 8000564:	e6f9      	b.n	800035a <__aeabi_fadd+0x10e>
 8000566:	4663      	mov	r3, ip
 8000568:	000c      	movs	r4, r1
 800056a:	1bdb      	subs	r3, r3, r7
 800056c:	3501      	adds	r5, #1
 800056e:	e6d5      	b.n	800031c <__aeabi_fadd+0xd0>
 8000570:	4646      	mov	r6, r8
 8000572:	2000      	movs	r0, #0
 8000574:	e6f1      	b.n	800035a <__aeabi_fadd+0x10e>
 8000576:	2b00      	cmp	r3, #0
 8000578:	d000      	beq.n	800057c <__aeabi_fadd+0x330>
 800057a:	e723      	b.n	80003c4 <__aeabi_fadd+0x178>
 800057c:	2400      	movs	r4, #0
 800057e:	2600      	movs	r6, #0
 8000580:	e6eb      	b.n	800035a <__aeabi_fadd+0x10e>
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	7dffffff 	.word	0x7dffffff
 8000588:	fbffffff 	.word	0xfbffffff

0800058c <__aeabi_fdiv>:
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	464f      	mov	r7, r9
 8000590:	4646      	mov	r6, r8
 8000592:	46d6      	mov	lr, sl
 8000594:	0245      	lsls	r5, r0, #9
 8000596:	b5c0      	push	{r6, r7, lr}
 8000598:	0047      	lsls	r7, r0, #1
 800059a:	1c0c      	adds	r4, r1, #0
 800059c:	0a6d      	lsrs	r5, r5, #9
 800059e:	0e3f      	lsrs	r7, r7, #24
 80005a0:	0fc6      	lsrs	r6, r0, #31
 80005a2:	2f00      	cmp	r7, #0
 80005a4:	d100      	bne.n	80005a8 <__aeabi_fdiv+0x1c>
 80005a6:	e06f      	b.n	8000688 <__aeabi_fdiv+0xfc>
 80005a8:	2fff      	cmp	r7, #255	; 0xff
 80005aa:	d100      	bne.n	80005ae <__aeabi_fdiv+0x22>
 80005ac:	e074      	b.n	8000698 <__aeabi_fdiv+0x10c>
 80005ae:	2300      	movs	r3, #0
 80005b0:	2280      	movs	r2, #128	; 0x80
 80005b2:	4699      	mov	r9, r3
 80005b4:	469a      	mov	sl, r3
 80005b6:	00ed      	lsls	r5, r5, #3
 80005b8:	04d2      	lsls	r2, r2, #19
 80005ba:	4315      	orrs	r5, r2
 80005bc:	3f7f      	subs	r7, #127	; 0x7f
 80005be:	0263      	lsls	r3, r4, #9
 80005c0:	0a5b      	lsrs	r3, r3, #9
 80005c2:	4698      	mov	r8, r3
 80005c4:	0063      	lsls	r3, r4, #1
 80005c6:	0e1b      	lsrs	r3, r3, #24
 80005c8:	0fe4      	lsrs	r4, r4, #31
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d04d      	beq.n	800066a <__aeabi_fdiv+0xde>
 80005ce:	2bff      	cmp	r3, #255	; 0xff
 80005d0:	d045      	beq.n	800065e <__aeabi_fdiv+0xd2>
 80005d2:	4642      	mov	r2, r8
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	00d2      	lsls	r2, r2, #3
 80005d8:	04c9      	lsls	r1, r1, #19
 80005da:	4311      	orrs	r1, r2
 80005dc:	4688      	mov	r8, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	3b7f      	subs	r3, #127	; 0x7f
 80005e2:	0031      	movs	r1, r6
 80005e4:	1aff      	subs	r7, r7, r3
 80005e6:	464b      	mov	r3, r9
 80005e8:	4061      	eors	r1, r4
 80005ea:	b2c9      	uxtb	r1, r1
 80005ec:	2b0f      	cmp	r3, #15
 80005ee:	d900      	bls.n	80005f2 <__aeabi_fdiv+0x66>
 80005f0:	e0b8      	b.n	8000764 <__aeabi_fdiv+0x1d8>
 80005f2:	4870      	ldr	r0, [pc, #448]	; (80007b4 <__aeabi_fdiv+0x228>)
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	58c3      	ldr	r3, [r0, r3]
 80005f8:	469f      	mov	pc, r3
 80005fa:	2300      	movs	r3, #0
 80005fc:	4698      	mov	r8, r3
 80005fe:	0026      	movs	r6, r4
 8000600:	4645      	mov	r5, r8
 8000602:	4692      	mov	sl, r2
 8000604:	4653      	mov	r3, sl
 8000606:	2b02      	cmp	r3, #2
 8000608:	d100      	bne.n	800060c <__aeabi_fdiv+0x80>
 800060a:	e08d      	b.n	8000728 <__aeabi_fdiv+0x19c>
 800060c:	2b03      	cmp	r3, #3
 800060e:	d100      	bne.n	8000612 <__aeabi_fdiv+0x86>
 8000610:	e0a1      	b.n	8000756 <__aeabi_fdiv+0x1ca>
 8000612:	2b01      	cmp	r3, #1
 8000614:	d018      	beq.n	8000648 <__aeabi_fdiv+0xbc>
 8000616:	003b      	movs	r3, r7
 8000618:	337f      	adds	r3, #127	; 0x7f
 800061a:	2b00      	cmp	r3, #0
 800061c:	dd6d      	ble.n	80006fa <__aeabi_fdiv+0x16e>
 800061e:	076a      	lsls	r2, r5, #29
 8000620:	d004      	beq.n	800062c <__aeabi_fdiv+0xa0>
 8000622:	220f      	movs	r2, #15
 8000624:	402a      	ands	r2, r5
 8000626:	2a04      	cmp	r2, #4
 8000628:	d000      	beq.n	800062c <__aeabi_fdiv+0xa0>
 800062a:	3504      	adds	r5, #4
 800062c:	012a      	lsls	r2, r5, #4
 800062e:	d503      	bpl.n	8000638 <__aeabi_fdiv+0xac>
 8000630:	4b61      	ldr	r3, [pc, #388]	; (80007b8 <__aeabi_fdiv+0x22c>)
 8000632:	401d      	ands	r5, r3
 8000634:	003b      	movs	r3, r7
 8000636:	3380      	adds	r3, #128	; 0x80
 8000638:	2bfe      	cmp	r3, #254	; 0xfe
 800063a:	dd00      	ble.n	800063e <__aeabi_fdiv+0xb2>
 800063c:	e074      	b.n	8000728 <__aeabi_fdiv+0x19c>
 800063e:	01aa      	lsls	r2, r5, #6
 8000640:	0a52      	lsrs	r2, r2, #9
 8000642:	b2d8      	uxtb	r0, r3
 8000644:	e002      	b.n	800064c <__aeabi_fdiv+0xc0>
 8000646:	000e      	movs	r6, r1
 8000648:	2000      	movs	r0, #0
 800064a:	2200      	movs	r2, #0
 800064c:	05c0      	lsls	r0, r0, #23
 800064e:	07f6      	lsls	r6, r6, #31
 8000650:	4310      	orrs	r0, r2
 8000652:	4330      	orrs	r0, r6
 8000654:	bce0      	pop	{r5, r6, r7}
 8000656:	46ba      	mov	sl, r7
 8000658:	46b1      	mov	r9, r6
 800065a:	46a8      	mov	r8, r5
 800065c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800065e:	4643      	mov	r3, r8
 8000660:	2b00      	cmp	r3, #0
 8000662:	d13f      	bne.n	80006e4 <__aeabi_fdiv+0x158>
 8000664:	2202      	movs	r2, #2
 8000666:	3fff      	subs	r7, #255	; 0xff
 8000668:	e003      	b.n	8000672 <__aeabi_fdiv+0xe6>
 800066a:	4643      	mov	r3, r8
 800066c:	2b00      	cmp	r3, #0
 800066e:	d12d      	bne.n	80006cc <__aeabi_fdiv+0x140>
 8000670:	2201      	movs	r2, #1
 8000672:	0031      	movs	r1, r6
 8000674:	464b      	mov	r3, r9
 8000676:	4061      	eors	r1, r4
 8000678:	b2c9      	uxtb	r1, r1
 800067a:	4313      	orrs	r3, r2
 800067c:	2b0f      	cmp	r3, #15
 800067e:	d838      	bhi.n	80006f2 <__aeabi_fdiv+0x166>
 8000680:	484e      	ldr	r0, [pc, #312]	; (80007bc <__aeabi_fdiv+0x230>)
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	58c3      	ldr	r3, [r0, r3]
 8000686:	469f      	mov	pc, r3
 8000688:	2d00      	cmp	r5, #0
 800068a:	d113      	bne.n	80006b4 <__aeabi_fdiv+0x128>
 800068c:	2304      	movs	r3, #4
 800068e:	4699      	mov	r9, r3
 8000690:	3b03      	subs	r3, #3
 8000692:	2700      	movs	r7, #0
 8000694:	469a      	mov	sl, r3
 8000696:	e792      	b.n	80005be <__aeabi_fdiv+0x32>
 8000698:	2d00      	cmp	r5, #0
 800069a:	d105      	bne.n	80006a8 <__aeabi_fdiv+0x11c>
 800069c:	2308      	movs	r3, #8
 800069e:	4699      	mov	r9, r3
 80006a0:	3b06      	subs	r3, #6
 80006a2:	27ff      	movs	r7, #255	; 0xff
 80006a4:	469a      	mov	sl, r3
 80006a6:	e78a      	b.n	80005be <__aeabi_fdiv+0x32>
 80006a8:	230c      	movs	r3, #12
 80006aa:	4699      	mov	r9, r3
 80006ac:	3b09      	subs	r3, #9
 80006ae:	27ff      	movs	r7, #255	; 0xff
 80006b0:	469a      	mov	sl, r3
 80006b2:	e784      	b.n	80005be <__aeabi_fdiv+0x32>
 80006b4:	0028      	movs	r0, r5
 80006b6:	f000 fc1d 	bl	8000ef4 <__clzsi2>
 80006ba:	2776      	movs	r7, #118	; 0x76
 80006bc:	1f43      	subs	r3, r0, #5
 80006be:	409d      	lsls	r5, r3
 80006c0:	2300      	movs	r3, #0
 80006c2:	427f      	negs	r7, r7
 80006c4:	4699      	mov	r9, r3
 80006c6:	469a      	mov	sl, r3
 80006c8:	1a3f      	subs	r7, r7, r0
 80006ca:	e778      	b.n	80005be <__aeabi_fdiv+0x32>
 80006cc:	4640      	mov	r0, r8
 80006ce:	f000 fc11 	bl	8000ef4 <__clzsi2>
 80006d2:	4642      	mov	r2, r8
 80006d4:	1f43      	subs	r3, r0, #5
 80006d6:	409a      	lsls	r2, r3
 80006d8:	2376      	movs	r3, #118	; 0x76
 80006da:	425b      	negs	r3, r3
 80006dc:	4690      	mov	r8, r2
 80006de:	1a1b      	subs	r3, r3, r0
 80006e0:	2200      	movs	r2, #0
 80006e2:	e77e      	b.n	80005e2 <__aeabi_fdiv+0x56>
 80006e4:	2303      	movs	r3, #3
 80006e6:	464a      	mov	r2, r9
 80006e8:	431a      	orrs	r2, r3
 80006ea:	4691      	mov	r9, r2
 80006ec:	33fc      	adds	r3, #252	; 0xfc
 80006ee:	2203      	movs	r2, #3
 80006f0:	e777      	b.n	80005e2 <__aeabi_fdiv+0x56>
 80006f2:	000e      	movs	r6, r1
 80006f4:	20ff      	movs	r0, #255	; 0xff
 80006f6:	2200      	movs	r2, #0
 80006f8:	e7a8      	b.n	800064c <__aeabi_fdiv+0xc0>
 80006fa:	2201      	movs	r2, #1
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	2b1b      	cmp	r3, #27
 8000700:	dca2      	bgt.n	8000648 <__aeabi_fdiv+0xbc>
 8000702:	379e      	adds	r7, #158	; 0x9e
 8000704:	002a      	movs	r2, r5
 8000706:	40bd      	lsls	r5, r7
 8000708:	40da      	lsrs	r2, r3
 800070a:	1e6b      	subs	r3, r5, #1
 800070c:	419d      	sbcs	r5, r3
 800070e:	4315      	orrs	r5, r2
 8000710:	076a      	lsls	r2, r5, #29
 8000712:	d004      	beq.n	800071e <__aeabi_fdiv+0x192>
 8000714:	220f      	movs	r2, #15
 8000716:	402a      	ands	r2, r5
 8000718:	2a04      	cmp	r2, #4
 800071a:	d000      	beq.n	800071e <__aeabi_fdiv+0x192>
 800071c:	3504      	adds	r5, #4
 800071e:	016a      	lsls	r2, r5, #5
 8000720:	d544      	bpl.n	80007ac <__aeabi_fdiv+0x220>
 8000722:	2001      	movs	r0, #1
 8000724:	2200      	movs	r2, #0
 8000726:	e791      	b.n	800064c <__aeabi_fdiv+0xc0>
 8000728:	20ff      	movs	r0, #255	; 0xff
 800072a:	2200      	movs	r2, #0
 800072c:	e78e      	b.n	800064c <__aeabi_fdiv+0xc0>
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	2600      	movs	r6, #0
 8000732:	20ff      	movs	r0, #255	; 0xff
 8000734:	03d2      	lsls	r2, r2, #15
 8000736:	e789      	b.n	800064c <__aeabi_fdiv+0xc0>
 8000738:	2300      	movs	r3, #0
 800073a:	4698      	mov	r8, r3
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	03d2      	lsls	r2, r2, #15
 8000740:	4215      	tst	r5, r2
 8000742:	d008      	beq.n	8000756 <__aeabi_fdiv+0x1ca>
 8000744:	4643      	mov	r3, r8
 8000746:	4213      	tst	r3, r2
 8000748:	d105      	bne.n	8000756 <__aeabi_fdiv+0x1ca>
 800074a:	431a      	orrs	r2, r3
 800074c:	0252      	lsls	r2, r2, #9
 800074e:	0026      	movs	r6, r4
 8000750:	20ff      	movs	r0, #255	; 0xff
 8000752:	0a52      	lsrs	r2, r2, #9
 8000754:	e77a      	b.n	800064c <__aeabi_fdiv+0xc0>
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	03d2      	lsls	r2, r2, #15
 800075a:	432a      	orrs	r2, r5
 800075c:	0252      	lsls	r2, r2, #9
 800075e:	20ff      	movs	r0, #255	; 0xff
 8000760:	0a52      	lsrs	r2, r2, #9
 8000762:	e773      	b.n	800064c <__aeabi_fdiv+0xc0>
 8000764:	4642      	mov	r2, r8
 8000766:	016b      	lsls	r3, r5, #5
 8000768:	0155      	lsls	r5, r2, #5
 800076a:	42ab      	cmp	r3, r5
 800076c:	d21a      	bcs.n	80007a4 <__aeabi_fdiv+0x218>
 800076e:	201b      	movs	r0, #27
 8000770:	2200      	movs	r2, #0
 8000772:	3f01      	subs	r7, #1
 8000774:	2601      	movs	r6, #1
 8000776:	001c      	movs	r4, r3
 8000778:	0052      	lsls	r2, r2, #1
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	2c00      	cmp	r4, #0
 800077e:	db01      	blt.n	8000784 <__aeabi_fdiv+0x1f8>
 8000780:	429d      	cmp	r5, r3
 8000782:	d801      	bhi.n	8000788 <__aeabi_fdiv+0x1fc>
 8000784:	1b5b      	subs	r3, r3, r5
 8000786:	4332      	orrs	r2, r6
 8000788:	3801      	subs	r0, #1
 800078a:	2800      	cmp	r0, #0
 800078c:	d1f3      	bne.n	8000776 <__aeabi_fdiv+0x1ea>
 800078e:	1e58      	subs	r0, r3, #1
 8000790:	4183      	sbcs	r3, r0
 8000792:	4313      	orrs	r3, r2
 8000794:	001d      	movs	r5, r3
 8000796:	003b      	movs	r3, r7
 8000798:	337f      	adds	r3, #127	; 0x7f
 800079a:	000e      	movs	r6, r1
 800079c:	2b00      	cmp	r3, #0
 800079e:	dd00      	ble.n	80007a2 <__aeabi_fdiv+0x216>
 80007a0:	e73d      	b.n	800061e <__aeabi_fdiv+0x92>
 80007a2:	e7aa      	b.n	80006fa <__aeabi_fdiv+0x16e>
 80007a4:	201a      	movs	r0, #26
 80007a6:	2201      	movs	r2, #1
 80007a8:	1b5b      	subs	r3, r3, r5
 80007aa:	e7e3      	b.n	8000774 <__aeabi_fdiv+0x1e8>
 80007ac:	01aa      	lsls	r2, r5, #6
 80007ae:	2000      	movs	r0, #0
 80007b0:	0a52      	lsrs	r2, r2, #9
 80007b2:	e74b      	b.n	800064c <__aeabi_fdiv+0xc0>
 80007b4:	08008254 	.word	0x08008254
 80007b8:	f7ffffff 	.word	0xf7ffffff
 80007bc:	08008294 	.word	0x08008294

080007c0 <__aeabi_fmul>:
 80007c0:	0243      	lsls	r3, r0, #9
 80007c2:	0a5b      	lsrs	r3, r3, #9
 80007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c6:	464f      	mov	r7, r9
 80007c8:	4646      	mov	r6, r8
 80007ca:	4699      	mov	r9, r3
 80007cc:	46d6      	mov	lr, sl
 80007ce:	0fc3      	lsrs	r3, r0, #31
 80007d0:	0045      	lsls	r5, r0, #1
 80007d2:	4698      	mov	r8, r3
 80007d4:	b5c0      	push	{r6, r7, lr}
 80007d6:	464b      	mov	r3, r9
 80007d8:	1c0f      	adds	r7, r1, #0
 80007da:	0e2d      	lsrs	r5, r5, #24
 80007dc:	d100      	bne.n	80007e0 <__aeabi_fmul+0x20>
 80007de:	e0cb      	b.n	8000978 <__aeabi_fmul+0x1b8>
 80007e0:	2dff      	cmp	r5, #255	; 0xff
 80007e2:	d100      	bne.n	80007e6 <__aeabi_fmul+0x26>
 80007e4:	e0cf      	b.n	8000986 <__aeabi_fmul+0x1c6>
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	04d2      	lsls	r2, r2, #19
 80007ec:	431a      	orrs	r2, r3
 80007ee:	2300      	movs	r3, #0
 80007f0:	4691      	mov	r9, r2
 80007f2:	2600      	movs	r6, #0
 80007f4:	469a      	mov	sl, r3
 80007f6:	3d7f      	subs	r5, #127	; 0x7f
 80007f8:	027c      	lsls	r4, r7, #9
 80007fa:	007b      	lsls	r3, r7, #1
 80007fc:	0a64      	lsrs	r4, r4, #9
 80007fe:	0e1b      	lsrs	r3, r3, #24
 8000800:	0fff      	lsrs	r7, r7, #31
 8000802:	2b00      	cmp	r3, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fmul+0x48>
 8000806:	e0a9      	b.n	800095c <__aeabi_fmul+0x19c>
 8000808:	2bff      	cmp	r3, #255	; 0xff
 800080a:	d011      	beq.n	8000830 <__aeabi_fmul+0x70>
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	00e4      	lsls	r4, r4, #3
 8000810:	04d2      	lsls	r2, r2, #19
 8000812:	4314      	orrs	r4, r2
 8000814:	4642      	mov	r2, r8
 8000816:	3b7f      	subs	r3, #127	; 0x7f
 8000818:	195b      	adds	r3, r3, r5
 800081a:	407a      	eors	r2, r7
 800081c:	2000      	movs	r0, #0
 800081e:	b2d2      	uxtb	r2, r2
 8000820:	1c5d      	adds	r5, r3, #1
 8000822:	2e0a      	cmp	r6, #10
 8000824:	dd13      	ble.n	800084e <__aeabi_fmul+0x8e>
 8000826:	003a      	movs	r2, r7
 8000828:	2e0b      	cmp	r6, #11
 800082a:	d047      	beq.n	80008bc <__aeabi_fmul+0xfc>
 800082c:	4647      	mov	r7, r8
 800082e:	e03f      	b.n	80008b0 <__aeabi_fmul+0xf0>
 8000830:	002b      	movs	r3, r5
 8000832:	33ff      	adds	r3, #255	; 0xff
 8000834:	2c00      	cmp	r4, #0
 8000836:	d11e      	bne.n	8000876 <__aeabi_fmul+0xb6>
 8000838:	2202      	movs	r2, #2
 800083a:	4316      	orrs	r6, r2
 800083c:	4642      	mov	r2, r8
 800083e:	3501      	adds	r5, #1
 8000840:	407a      	eors	r2, r7
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	35ff      	adds	r5, #255	; 0xff
 8000846:	2e0a      	cmp	r6, #10
 8000848:	dd00      	ble.n	800084c <__aeabi_fmul+0x8c>
 800084a:	e0e4      	b.n	8000a16 <__aeabi_fmul+0x256>
 800084c:	2002      	movs	r0, #2
 800084e:	2e02      	cmp	r6, #2
 8000850:	dc1c      	bgt.n	800088c <__aeabi_fmul+0xcc>
 8000852:	3e01      	subs	r6, #1
 8000854:	2e01      	cmp	r6, #1
 8000856:	d842      	bhi.n	80008de <__aeabi_fmul+0x11e>
 8000858:	2802      	cmp	r0, #2
 800085a:	d03d      	beq.n	80008d8 <__aeabi_fmul+0x118>
 800085c:	2801      	cmp	r0, #1
 800085e:	d166      	bne.n	800092e <__aeabi_fmul+0x16e>
 8000860:	2000      	movs	r0, #0
 8000862:	2100      	movs	r1, #0
 8000864:	05c0      	lsls	r0, r0, #23
 8000866:	4308      	orrs	r0, r1
 8000868:	07d2      	lsls	r2, r2, #31
 800086a:	4310      	orrs	r0, r2
 800086c:	bce0      	pop	{r5, r6, r7}
 800086e:	46ba      	mov	sl, r7
 8000870:	46b1      	mov	r9, r6
 8000872:	46a8      	mov	r8, r5
 8000874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000876:	2203      	movs	r2, #3
 8000878:	4316      	orrs	r6, r2
 800087a:	4642      	mov	r2, r8
 800087c:	3501      	adds	r5, #1
 800087e:	407a      	eors	r2, r7
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	35ff      	adds	r5, #255	; 0xff
 8000884:	2e0a      	cmp	r6, #10
 8000886:	dd00      	ble.n	800088a <__aeabi_fmul+0xca>
 8000888:	e0e4      	b.n	8000a54 <__aeabi_fmul+0x294>
 800088a:	2003      	movs	r0, #3
 800088c:	2101      	movs	r1, #1
 800088e:	40b1      	lsls	r1, r6
 8000890:	26a6      	movs	r6, #166	; 0xa6
 8000892:	00f6      	lsls	r6, r6, #3
 8000894:	4231      	tst	r1, r6
 8000896:	d10a      	bne.n	80008ae <__aeabi_fmul+0xee>
 8000898:	2690      	movs	r6, #144	; 0x90
 800089a:	00b6      	lsls	r6, r6, #2
 800089c:	4231      	tst	r1, r6
 800089e:	d116      	bne.n	80008ce <__aeabi_fmul+0x10e>
 80008a0:	3eb9      	subs	r6, #185	; 0xb9
 80008a2:	3eff      	subs	r6, #255	; 0xff
 80008a4:	420e      	tst	r6, r1
 80008a6:	d01a      	beq.n	80008de <__aeabi_fmul+0x11e>
 80008a8:	46a1      	mov	r9, r4
 80008aa:	4682      	mov	sl, r0
 80008ac:	e000      	b.n	80008b0 <__aeabi_fmul+0xf0>
 80008ae:	0017      	movs	r7, r2
 80008b0:	4653      	mov	r3, sl
 80008b2:	003a      	movs	r2, r7
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d00f      	beq.n	80008d8 <__aeabi_fmul+0x118>
 80008b8:	464c      	mov	r4, r9
 80008ba:	4650      	mov	r0, sl
 80008bc:	2803      	cmp	r0, #3
 80008be:	d1cd      	bne.n	800085c <__aeabi_fmul+0x9c>
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	03c9      	lsls	r1, r1, #15
 80008c4:	4321      	orrs	r1, r4
 80008c6:	0249      	lsls	r1, r1, #9
 80008c8:	20ff      	movs	r0, #255	; 0xff
 80008ca:	0a49      	lsrs	r1, r1, #9
 80008cc:	e7ca      	b.n	8000864 <__aeabi_fmul+0xa4>
 80008ce:	2180      	movs	r1, #128	; 0x80
 80008d0:	2200      	movs	r2, #0
 80008d2:	20ff      	movs	r0, #255	; 0xff
 80008d4:	03c9      	lsls	r1, r1, #15
 80008d6:	e7c5      	b.n	8000864 <__aeabi_fmul+0xa4>
 80008d8:	20ff      	movs	r0, #255	; 0xff
 80008da:	2100      	movs	r1, #0
 80008dc:	e7c2      	b.n	8000864 <__aeabi_fmul+0xa4>
 80008de:	0c20      	lsrs	r0, r4, #16
 80008e0:	4649      	mov	r1, r9
 80008e2:	0424      	lsls	r4, r4, #16
 80008e4:	0c24      	lsrs	r4, r4, #16
 80008e6:	0027      	movs	r7, r4
 80008e8:	0c0e      	lsrs	r6, r1, #16
 80008ea:	0409      	lsls	r1, r1, #16
 80008ec:	0c09      	lsrs	r1, r1, #16
 80008ee:	4374      	muls	r4, r6
 80008f0:	434f      	muls	r7, r1
 80008f2:	4346      	muls	r6, r0
 80008f4:	4348      	muls	r0, r1
 80008f6:	0c39      	lsrs	r1, r7, #16
 80008f8:	1900      	adds	r0, r0, r4
 80008fa:	1809      	adds	r1, r1, r0
 80008fc:	428c      	cmp	r4, r1
 80008fe:	d903      	bls.n	8000908 <__aeabi_fmul+0x148>
 8000900:	2080      	movs	r0, #128	; 0x80
 8000902:	0240      	lsls	r0, r0, #9
 8000904:	4684      	mov	ip, r0
 8000906:	4466      	add	r6, ip
 8000908:	043f      	lsls	r7, r7, #16
 800090a:	0408      	lsls	r0, r1, #16
 800090c:	0c3f      	lsrs	r7, r7, #16
 800090e:	19c0      	adds	r0, r0, r7
 8000910:	0184      	lsls	r4, r0, #6
 8000912:	1e67      	subs	r7, r4, #1
 8000914:	41bc      	sbcs	r4, r7
 8000916:	0c09      	lsrs	r1, r1, #16
 8000918:	0e80      	lsrs	r0, r0, #26
 800091a:	1989      	adds	r1, r1, r6
 800091c:	4304      	orrs	r4, r0
 800091e:	0189      	lsls	r1, r1, #6
 8000920:	430c      	orrs	r4, r1
 8000922:	0109      	lsls	r1, r1, #4
 8000924:	d571      	bpl.n	8000a0a <__aeabi_fmul+0x24a>
 8000926:	2301      	movs	r3, #1
 8000928:	0861      	lsrs	r1, r4, #1
 800092a:	401c      	ands	r4, r3
 800092c:	430c      	orrs	r4, r1
 800092e:	002b      	movs	r3, r5
 8000930:	337f      	adds	r3, #127	; 0x7f
 8000932:	2b00      	cmp	r3, #0
 8000934:	dd51      	ble.n	80009da <__aeabi_fmul+0x21a>
 8000936:	0761      	lsls	r1, r4, #29
 8000938:	d004      	beq.n	8000944 <__aeabi_fmul+0x184>
 800093a:	210f      	movs	r1, #15
 800093c:	4021      	ands	r1, r4
 800093e:	2904      	cmp	r1, #4
 8000940:	d000      	beq.n	8000944 <__aeabi_fmul+0x184>
 8000942:	3404      	adds	r4, #4
 8000944:	0121      	lsls	r1, r4, #4
 8000946:	d503      	bpl.n	8000950 <__aeabi_fmul+0x190>
 8000948:	4b43      	ldr	r3, [pc, #268]	; (8000a58 <__aeabi_fmul+0x298>)
 800094a:	401c      	ands	r4, r3
 800094c:	002b      	movs	r3, r5
 800094e:	3380      	adds	r3, #128	; 0x80
 8000950:	2bfe      	cmp	r3, #254	; 0xfe
 8000952:	dcc1      	bgt.n	80008d8 <__aeabi_fmul+0x118>
 8000954:	01a1      	lsls	r1, r4, #6
 8000956:	0a49      	lsrs	r1, r1, #9
 8000958:	b2d8      	uxtb	r0, r3
 800095a:	e783      	b.n	8000864 <__aeabi_fmul+0xa4>
 800095c:	2c00      	cmp	r4, #0
 800095e:	d12c      	bne.n	80009ba <__aeabi_fmul+0x1fa>
 8000960:	2301      	movs	r3, #1
 8000962:	4642      	mov	r2, r8
 8000964:	431e      	orrs	r6, r3
 8000966:	002b      	movs	r3, r5
 8000968:	407a      	eors	r2, r7
 800096a:	2001      	movs	r0, #1
 800096c:	b2d2      	uxtb	r2, r2
 800096e:	1c5d      	adds	r5, r3, #1
 8000970:	2e0a      	cmp	r6, #10
 8000972:	dd00      	ble.n	8000976 <__aeabi_fmul+0x1b6>
 8000974:	e757      	b.n	8000826 <__aeabi_fmul+0x66>
 8000976:	e76a      	b.n	800084e <__aeabi_fmul+0x8e>
 8000978:	2b00      	cmp	r3, #0
 800097a:	d110      	bne.n	800099e <__aeabi_fmul+0x1de>
 800097c:	2301      	movs	r3, #1
 800097e:	2604      	movs	r6, #4
 8000980:	2500      	movs	r5, #0
 8000982:	469a      	mov	sl, r3
 8000984:	e738      	b.n	80007f8 <__aeabi_fmul+0x38>
 8000986:	2b00      	cmp	r3, #0
 8000988:	d104      	bne.n	8000994 <__aeabi_fmul+0x1d4>
 800098a:	2302      	movs	r3, #2
 800098c:	2608      	movs	r6, #8
 800098e:	25ff      	movs	r5, #255	; 0xff
 8000990:	469a      	mov	sl, r3
 8000992:	e731      	b.n	80007f8 <__aeabi_fmul+0x38>
 8000994:	2303      	movs	r3, #3
 8000996:	260c      	movs	r6, #12
 8000998:	25ff      	movs	r5, #255	; 0xff
 800099a:	469a      	mov	sl, r3
 800099c:	e72c      	b.n	80007f8 <__aeabi_fmul+0x38>
 800099e:	4648      	mov	r0, r9
 80009a0:	f000 faa8 	bl	8000ef4 <__clzsi2>
 80009a4:	464a      	mov	r2, r9
 80009a6:	1f43      	subs	r3, r0, #5
 80009a8:	2576      	movs	r5, #118	; 0x76
 80009aa:	409a      	lsls	r2, r3
 80009ac:	2300      	movs	r3, #0
 80009ae:	426d      	negs	r5, r5
 80009b0:	4691      	mov	r9, r2
 80009b2:	2600      	movs	r6, #0
 80009b4:	469a      	mov	sl, r3
 80009b6:	1a2d      	subs	r5, r5, r0
 80009b8:	e71e      	b.n	80007f8 <__aeabi_fmul+0x38>
 80009ba:	0020      	movs	r0, r4
 80009bc:	f000 fa9a 	bl	8000ef4 <__clzsi2>
 80009c0:	4642      	mov	r2, r8
 80009c2:	1f43      	subs	r3, r0, #5
 80009c4:	409c      	lsls	r4, r3
 80009c6:	1a2b      	subs	r3, r5, r0
 80009c8:	3b76      	subs	r3, #118	; 0x76
 80009ca:	407a      	eors	r2, r7
 80009cc:	2000      	movs	r0, #0
 80009ce:	b2d2      	uxtb	r2, r2
 80009d0:	1c5d      	adds	r5, r3, #1
 80009d2:	2e0a      	cmp	r6, #10
 80009d4:	dd00      	ble.n	80009d8 <__aeabi_fmul+0x218>
 80009d6:	e726      	b.n	8000826 <__aeabi_fmul+0x66>
 80009d8:	e739      	b.n	800084e <__aeabi_fmul+0x8e>
 80009da:	2101      	movs	r1, #1
 80009dc:	1acb      	subs	r3, r1, r3
 80009de:	2b1b      	cmp	r3, #27
 80009e0:	dd00      	ble.n	80009e4 <__aeabi_fmul+0x224>
 80009e2:	e73d      	b.n	8000860 <__aeabi_fmul+0xa0>
 80009e4:	359e      	adds	r5, #158	; 0x9e
 80009e6:	0021      	movs	r1, r4
 80009e8:	40ac      	lsls	r4, r5
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	1e63      	subs	r3, r4, #1
 80009ee:	419c      	sbcs	r4, r3
 80009f0:	4321      	orrs	r1, r4
 80009f2:	074b      	lsls	r3, r1, #29
 80009f4:	d004      	beq.n	8000a00 <__aeabi_fmul+0x240>
 80009f6:	230f      	movs	r3, #15
 80009f8:	400b      	ands	r3, r1
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	d000      	beq.n	8000a00 <__aeabi_fmul+0x240>
 80009fe:	3104      	adds	r1, #4
 8000a00:	014b      	lsls	r3, r1, #5
 8000a02:	d504      	bpl.n	8000a0e <__aeabi_fmul+0x24e>
 8000a04:	2001      	movs	r0, #1
 8000a06:	2100      	movs	r1, #0
 8000a08:	e72c      	b.n	8000864 <__aeabi_fmul+0xa4>
 8000a0a:	001d      	movs	r5, r3
 8000a0c:	e78f      	b.n	800092e <__aeabi_fmul+0x16e>
 8000a0e:	0189      	lsls	r1, r1, #6
 8000a10:	2000      	movs	r0, #0
 8000a12:	0a49      	lsrs	r1, r1, #9
 8000a14:	e726      	b.n	8000864 <__aeabi_fmul+0xa4>
 8000a16:	2302      	movs	r3, #2
 8000a18:	2e0f      	cmp	r6, #15
 8000a1a:	d10c      	bne.n	8000a36 <__aeabi_fmul+0x276>
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	464b      	mov	r3, r9
 8000a20:	03c9      	lsls	r1, r1, #15
 8000a22:	420b      	tst	r3, r1
 8000a24:	d00d      	beq.n	8000a42 <__aeabi_fmul+0x282>
 8000a26:	420c      	tst	r4, r1
 8000a28:	d10b      	bne.n	8000a42 <__aeabi_fmul+0x282>
 8000a2a:	4321      	orrs	r1, r4
 8000a2c:	0249      	lsls	r1, r1, #9
 8000a2e:	003a      	movs	r2, r7
 8000a30:	20ff      	movs	r0, #255	; 0xff
 8000a32:	0a49      	lsrs	r1, r1, #9
 8000a34:	e716      	b.n	8000864 <__aeabi_fmul+0xa4>
 8000a36:	2e0b      	cmp	r6, #11
 8000a38:	d000      	beq.n	8000a3c <__aeabi_fmul+0x27c>
 8000a3a:	e6f7      	b.n	800082c <__aeabi_fmul+0x6c>
 8000a3c:	46a1      	mov	r9, r4
 8000a3e:	469a      	mov	sl, r3
 8000a40:	e736      	b.n	80008b0 <__aeabi_fmul+0xf0>
 8000a42:	2180      	movs	r1, #128	; 0x80
 8000a44:	464b      	mov	r3, r9
 8000a46:	03c9      	lsls	r1, r1, #15
 8000a48:	4319      	orrs	r1, r3
 8000a4a:	0249      	lsls	r1, r1, #9
 8000a4c:	4642      	mov	r2, r8
 8000a4e:	20ff      	movs	r0, #255	; 0xff
 8000a50:	0a49      	lsrs	r1, r1, #9
 8000a52:	e707      	b.n	8000864 <__aeabi_fmul+0xa4>
 8000a54:	2303      	movs	r3, #3
 8000a56:	e7df      	b.n	8000a18 <__aeabi_fmul+0x258>
 8000a58:	f7ffffff 	.word	0xf7ffffff

08000a5c <__aeabi_fsub>:
 8000a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5e:	46c6      	mov	lr, r8
 8000a60:	0243      	lsls	r3, r0, #9
 8000a62:	0a5b      	lsrs	r3, r3, #9
 8000a64:	0045      	lsls	r5, r0, #1
 8000a66:	00da      	lsls	r2, r3, #3
 8000a68:	0fc4      	lsrs	r4, r0, #31
 8000a6a:	0248      	lsls	r0, r1, #9
 8000a6c:	004f      	lsls	r7, r1, #1
 8000a6e:	4694      	mov	ip, r2
 8000a70:	0a42      	lsrs	r2, r0, #9
 8000a72:	001e      	movs	r6, r3
 8000a74:	4690      	mov	r8, r2
 8000a76:	b500      	push	{lr}
 8000a78:	0e2d      	lsrs	r5, r5, #24
 8000a7a:	0e3f      	lsrs	r7, r7, #24
 8000a7c:	0fc9      	lsrs	r1, r1, #31
 8000a7e:	0980      	lsrs	r0, r0, #6
 8000a80:	2fff      	cmp	r7, #255	; 0xff
 8000a82:	d059      	beq.n	8000b38 <__aeabi_fsub+0xdc>
 8000a84:	2201      	movs	r2, #1
 8000a86:	4051      	eors	r1, r2
 8000a88:	428c      	cmp	r4, r1
 8000a8a:	d039      	beq.n	8000b00 <__aeabi_fsub+0xa4>
 8000a8c:	1bea      	subs	r2, r5, r7
 8000a8e:	2a00      	cmp	r2, #0
 8000a90:	dd58      	ble.n	8000b44 <__aeabi_fsub+0xe8>
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	d068      	beq.n	8000b68 <__aeabi_fsub+0x10c>
 8000a96:	2dff      	cmp	r5, #255	; 0xff
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fsub+0x40>
 8000a9a:	e0d1      	b.n	8000c40 <__aeabi_fsub+0x1e4>
 8000a9c:	2380      	movs	r3, #128	; 0x80
 8000a9e:	04db      	lsls	r3, r3, #19
 8000aa0:	4318      	orrs	r0, r3
 8000aa2:	2a1b      	cmp	r2, #27
 8000aa4:	dc00      	bgt.n	8000aa8 <__aeabi_fsub+0x4c>
 8000aa6:	e0e3      	b.n	8000c70 <__aeabi_fsub+0x214>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	4662      	mov	r2, ip
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	015a      	lsls	r2, r3, #5
 8000ab0:	d400      	bmi.n	8000ab4 <__aeabi_fsub+0x58>
 8000ab2:	e0ac      	b.n	8000c0e <__aeabi_fsub+0x1b2>
 8000ab4:	019b      	lsls	r3, r3, #6
 8000ab6:	099e      	lsrs	r6, r3, #6
 8000ab8:	0030      	movs	r0, r6
 8000aba:	f000 fa1b 	bl	8000ef4 <__clzsi2>
 8000abe:	0033      	movs	r3, r6
 8000ac0:	3805      	subs	r0, #5
 8000ac2:	4083      	lsls	r3, r0
 8000ac4:	4285      	cmp	r5, r0
 8000ac6:	dc00      	bgt.n	8000aca <__aeabi_fsub+0x6e>
 8000ac8:	e0c6      	b.n	8000c58 <__aeabi_fsub+0x1fc>
 8000aca:	4ab2      	ldr	r2, [pc, #712]	; (8000d94 <__aeabi_fsub+0x338>)
 8000acc:	1a2d      	subs	r5, r5, r0
 8000ace:	4013      	ands	r3, r2
 8000ad0:	075a      	lsls	r2, r3, #29
 8000ad2:	d004      	beq.n	8000ade <__aeabi_fsub+0x82>
 8000ad4:	220f      	movs	r2, #15
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	2a04      	cmp	r2, #4
 8000ada:	d000      	beq.n	8000ade <__aeabi_fsub+0x82>
 8000adc:	3304      	adds	r3, #4
 8000ade:	015a      	lsls	r2, r3, #5
 8000ae0:	d400      	bmi.n	8000ae4 <__aeabi_fsub+0x88>
 8000ae2:	e097      	b.n	8000c14 <__aeabi_fsub+0x1b8>
 8000ae4:	1c6a      	adds	r2, r5, #1
 8000ae6:	2dfe      	cmp	r5, #254	; 0xfe
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fsub+0x90>
 8000aea:	e084      	b.n	8000bf6 <__aeabi_fsub+0x19a>
 8000aec:	019b      	lsls	r3, r3, #6
 8000aee:	0a5e      	lsrs	r6, r3, #9
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	05d0      	lsls	r0, r2, #23
 8000af4:	4330      	orrs	r0, r6
 8000af6:	07e4      	lsls	r4, r4, #31
 8000af8:	4320      	orrs	r0, r4
 8000afa:	bc80      	pop	{r7}
 8000afc:	46b8      	mov	r8, r7
 8000afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b00:	1bea      	subs	r2, r5, r7
 8000b02:	2a00      	cmp	r2, #0
 8000b04:	dd41      	ble.n	8000b8a <__aeabi_fsub+0x12e>
 8000b06:	2f00      	cmp	r7, #0
 8000b08:	d06b      	beq.n	8000be2 <__aeabi_fsub+0x186>
 8000b0a:	2dff      	cmp	r5, #255	; 0xff
 8000b0c:	d100      	bne.n	8000b10 <__aeabi_fsub+0xb4>
 8000b0e:	e097      	b.n	8000c40 <__aeabi_fsub+0x1e4>
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	04db      	lsls	r3, r3, #19
 8000b14:	4318      	orrs	r0, r3
 8000b16:	2a1b      	cmp	r2, #27
 8000b18:	dc00      	bgt.n	8000b1c <__aeabi_fsub+0xc0>
 8000b1a:	e0cc      	b.n	8000cb6 <__aeabi_fsub+0x25a>
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	4463      	add	r3, ip
 8000b20:	015a      	lsls	r2, r3, #5
 8000b22:	d574      	bpl.n	8000c0e <__aeabi_fsub+0x1b2>
 8000b24:	3501      	adds	r5, #1
 8000b26:	2dff      	cmp	r5, #255	; 0xff
 8000b28:	d065      	beq.n	8000bf6 <__aeabi_fsub+0x19a>
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	499a      	ldr	r1, [pc, #616]	; (8000d98 <__aeabi_fsub+0x33c>)
 8000b2e:	401a      	ands	r2, r3
 8000b30:	085b      	lsrs	r3, r3, #1
 8000b32:	400b      	ands	r3, r1
 8000b34:	4313      	orrs	r3, r2
 8000b36:	e7cb      	b.n	8000ad0 <__aeabi_fsub+0x74>
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d01f      	beq.n	8000b7c <__aeabi_fsub+0x120>
 8000b3c:	428c      	cmp	r4, r1
 8000b3e:	d022      	beq.n	8000b86 <__aeabi_fsub+0x12a>
 8000b40:	002a      	movs	r2, r5
 8000b42:	3aff      	subs	r2, #255	; 0xff
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d035      	beq.n	8000bb4 <__aeabi_fsub+0x158>
 8000b48:	1b7a      	subs	r2, r7, r5
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_fsub+0xf4>
 8000b4e:	e099      	b.n	8000c84 <__aeabi_fsub+0x228>
 8000b50:	4663      	mov	r3, ip
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d100      	bne.n	8000b58 <__aeabi_fsub+0xfc>
 8000b56:	e0dd      	b.n	8000d14 <__aeabi_fsub+0x2b8>
 8000b58:	1e53      	subs	r3, r2, #1
 8000b5a:	2a01      	cmp	r2, #1
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_fsub+0x104>
 8000b5e:	e105      	b.n	8000d6c <__aeabi_fsub+0x310>
 8000b60:	2aff      	cmp	r2, #255	; 0xff
 8000b62:	d06b      	beq.n	8000c3c <__aeabi_fsub+0x1e0>
 8000b64:	001a      	movs	r2, r3
 8000b66:	e094      	b.n	8000c92 <__aeabi_fsub+0x236>
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	d073      	beq.n	8000c54 <__aeabi_fsub+0x1f8>
 8000b6c:	1e51      	subs	r1, r2, #1
 8000b6e:	2a01      	cmp	r2, #1
 8000b70:	d100      	bne.n	8000b74 <__aeabi_fsub+0x118>
 8000b72:	e0df      	b.n	8000d34 <__aeabi_fsub+0x2d8>
 8000b74:	2aff      	cmp	r2, #255	; 0xff
 8000b76:	d063      	beq.n	8000c40 <__aeabi_fsub+0x1e4>
 8000b78:	000a      	movs	r2, r1
 8000b7a:	e792      	b.n	8000aa2 <__aeabi_fsub+0x46>
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4051      	eors	r1, r2
 8000b80:	42a1      	cmp	r1, r4
 8000b82:	d000      	beq.n	8000b86 <__aeabi_fsub+0x12a>
 8000b84:	e782      	b.n	8000a8c <__aeabi_fsub+0x30>
 8000b86:	002a      	movs	r2, r5
 8000b88:	3aff      	subs	r2, #255	; 0xff
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d036      	beq.n	8000bfc <__aeabi_fsub+0x1a0>
 8000b8e:	1b7a      	subs	r2, r7, r5
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d100      	bne.n	8000b96 <__aeabi_fsub+0x13a>
 8000b94:	e0aa      	b.n	8000cec <__aeabi_fsub+0x290>
 8000b96:	2fff      	cmp	r7, #255	; 0xff
 8000b98:	d100      	bne.n	8000b9c <__aeabi_fsub+0x140>
 8000b9a:	e0da      	b.n	8000d52 <__aeabi_fsub+0x2f6>
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	4661      	mov	r1, ip
 8000ba0:	04db      	lsls	r3, r3, #19
 8000ba2:	4319      	orrs	r1, r3
 8000ba4:	468c      	mov	ip, r1
 8000ba6:	2a1b      	cmp	r2, #27
 8000ba8:	dc00      	bgt.n	8000bac <__aeabi_fsub+0x150>
 8000baa:	e0d4      	b.n	8000d56 <__aeabi_fsub+0x2fa>
 8000bac:	2301      	movs	r3, #1
 8000bae:	003d      	movs	r5, r7
 8000bb0:	181b      	adds	r3, r3, r0
 8000bb2:	e7b5      	b.n	8000b20 <__aeabi_fsub+0xc4>
 8000bb4:	27fe      	movs	r7, #254	; 0xfe
 8000bb6:	1c6a      	adds	r2, r5, #1
 8000bb8:	4217      	tst	r7, r2
 8000bba:	d171      	bne.n	8000ca0 <__aeabi_fsub+0x244>
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d000      	beq.n	8000bc2 <__aeabi_fsub+0x166>
 8000bc0:	e09e      	b.n	8000d00 <__aeabi_fsub+0x2a4>
 8000bc2:	4663      	mov	r3, ip
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d100      	bne.n	8000bca <__aeabi_fsub+0x16e>
 8000bc8:	e0d5      	b.n	8000d76 <__aeabi_fsub+0x31a>
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2800      	cmp	r0, #0
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_fsub+0x176>
 8000bd0:	e78f      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000bd2:	1a1b      	subs	r3, r3, r0
 8000bd4:	015e      	lsls	r6, r3, #5
 8000bd6:	d400      	bmi.n	8000bda <__aeabi_fsub+0x17e>
 8000bd8:	e0d6      	b.n	8000d88 <__aeabi_fsub+0x32c>
 8000bda:	4663      	mov	r3, ip
 8000bdc:	000c      	movs	r4, r1
 8000bde:	1ac3      	subs	r3, r0, r3
 8000be0:	e776      	b.n	8000ad0 <__aeabi_fsub+0x74>
 8000be2:	2800      	cmp	r0, #0
 8000be4:	d036      	beq.n	8000c54 <__aeabi_fsub+0x1f8>
 8000be6:	1e51      	subs	r1, r2, #1
 8000be8:	2a01      	cmp	r2, #1
 8000bea:	d100      	bne.n	8000bee <__aeabi_fsub+0x192>
 8000bec:	e09a      	b.n	8000d24 <__aeabi_fsub+0x2c8>
 8000bee:	2aff      	cmp	r2, #255	; 0xff
 8000bf0:	d026      	beq.n	8000c40 <__aeabi_fsub+0x1e4>
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	e78f      	b.n	8000b16 <__aeabi_fsub+0xba>
 8000bf6:	22ff      	movs	r2, #255	; 0xff
 8000bf8:	2600      	movs	r6, #0
 8000bfa:	e77a      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000bfc:	27fe      	movs	r7, #254	; 0xfe
 8000bfe:	1c6a      	adds	r2, r5, #1
 8000c00:	4217      	tst	r7, r2
 8000c02:	d062      	beq.n	8000cca <__aeabi_fsub+0x26e>
 8000c04:	2aff      	cmp	r2, #255	; 0xff
 8000c06:	d0f6      	beq.n	8000bf6 <__aeabi_fsub+0x19a>
 8000c08:	0015      	movs	r5, r2
 8000c0a:	4460      	add	r0, ip
 8000c0c:	0843      	lsrs	r3, r0, #1
 8000c0e:	075a      	lsls	r2, r3, #29
 8000c10:	d000      	beq.n	8000c14 <__aeabi_fsub+0x1b8>
 8000c12:	e75f      	b.n	8000ad4 <__aeabi_fsub+0x78>
 8000c14:	08db      	lsrs	r3, r3, #3
 8000c16:	2dff      	cmp	r5, #255	; 0xff
 8000c18:	d012      	beq.n	8000c40 <__aeabi_fsub+0x1e4>
 8000c1a:	025b      	lsls	r3, r3, #9
 8000c1c:	0a5e      	lsrs	r6, r3, #9
 8000c1e:	b2ea      	uxtb	r2, r5
 8000c20:	e767      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000c22:	4662      	mov	r2, ip
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	d100      	bne.n	8000c2a <__aeabi_fsub+0x1ce>
 8000c28:	e093      	b.n	8000d52 <__aeabi_fsub+0x2f6>
 8000c2a:	2800      	cmp	r0, #0
 8000c2c:	d008      	beq.n	8000c40 <__aeabi_fsub+0x1e4>
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	03d2      	lsls	r2, r2, #15
 8000c32:	4213      	tst	r3, r2
 8000c34:	d004      	beq.n	8000c40 <__aeabi_fsub+0x1e4>
 8000c36:	4640      	mov	r0, r8
 8000c38:	4210      	tst	r0, r2
 8000c3a:	d101      	bne.n	8000c40 <__aeabi_fsub+0x1e4>
 8000c3c:	000c      	movs	r4, r1
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d0d8      	beq.n	8000bf6 <__aeabi_fsub+0x19a>
 8000c44:	2680      	movs	r6, #128	; 0x80
 8000c46:	03f6      	lsls	r6, r6, #15
 8000c48:	431e      	orrs	r6, r3
 8000c4a:	0276      	lsls	r6, r6, #9
 8000c4c:	22ff      	movs	r2, #255	; 0xff
 8000c4e:	0a76      	lsrs	r6, r6, #9
 8000c50:	e74f      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000c52:	4643      	mov	r3, r8
 8000c54:	0015      	movs	r5, r2
 8000c56:	e7de      	b.n	8000c16 <__aeabi_fsub+0x1ba>
 8000c58:	2220      	movs	r2, #32
 8000c5a:	1b40      	subs	r0, r0, r5
 8000c5c:	3001      	adds	r0, #1
 8000c5e:	1a12      	subs	r2, r2, r0
 8000c60:	0019      	movs	r1, r3
 8000c62:	4093      	lsls	r3, r2
 8000c64:	40c1      	lsrs	r1, r0
 8000c66:	1e5a      	subs	r2, r3, #1
 8000c68:	4193      	sbcs	r3, r2
 8000c6a:	2500      	movs	r5, #0
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	e72f      	b.n	8000ad0 <__aeabi_fsub+0x74>
 8000c70:	2320      	movs	r3, #32
 8000c72:	1a9b      	subs	r3, r3, r2
 8000c74:	0001      	movs	r1, r0
 8000c76:	4098      	lsls	r0, r3
 8000c78:	0003      	movs	r3, r0
 8000c7a:	40d1      	lsrs	r1, r2
 8000c7c:	1e5a      	subs	r2, r3, #1
 8000c7e:	4193      	sbcs	r3, r2
 8000c80:	430b      	orrs	r3, r1
 8000c82:	e712      	b.n	8000aaa <__aeabi_fsub+0x4e>
 8000c84:	2fff      	cmp	r7, #255	; 0xff
 8000c86:	d0d9      	beq.n	8000c3c <__aeabi_fsub+0x1e0>
 8000c88:	2380      	movs	r3, #128	; 0x80
 8000c8a:	4664      	mov	r4, ip
 8000c8c:	04db      	lsls	r3, r3, #19
 8000c8e:	431c      	orrs	r4, r3
 8000c90:	46a4      	mov	ip, r4
 8000c92:	2a1b      	cmp	r2, #27
 8000c94:	dd52      	ble.n	8000d3c <__aeabi_fsub+0x2e0>
 8000c96:	2301      	movs	r3, #1
 8000c98:	000c      	movs	r4, r1
 8000c9a:	003d      	movs	r5, r7
 8000c9c:	1ac3      	subs	r3, r0, r3
 8000c9e:	e706      	b.n	8000aae <__aeabi_fsub+0x52>
 8000ca0:	4663      	mov	r3, ip
 8000ca2:	1a1e      	subs	r6, r3, r0
 8000ca4:	0173      	lsls	r3, r6, #5
 8000ca6:	d439      	bmi.n	8000d1c <__aeabi_fsub+0x2c0>
 8000ca8:	2e00      	cmp	r6, #0
 8000caa:	d000      	beq.n	8000cae <__aeabi_fsub+0x252>
 8000cac:	e704      	b.n	8000ab8 <__aeabi_fsub+0x5c>
 8000cae:	2400      	movs	r4, #0
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2600      	movs	r6, #0
 8000cb4:	e71d      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000cb6:	2320      	movs	r3, #32
 8000cb8:	1a9b      	subs	r3, r3, r2
 8000cba:	0001      	movs	r1, r0
 8000cbc:	4098      	lsls	r0, r3
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	40d1      	lsrs	r1, r2
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	4193      	sbcs	r3, r2
 8000cc6:	430b      	orrs	r3, r1
 8000cc8:	e729      	b.n	8000b1e <__aeabi_fsub+0xc2>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d1a9      	bne.n	8000c22 <__aeabi_fsub+0x1c6>
 8000cce:	4663      	mov	r3, ip
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d056      	beq.n	8000d82 <__aeabi_fsub+0x326>
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2800      	cmp	r0, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_fsub+0x280>
 8000cda:	e70a      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	4463      	add	r3, ip
 8000ce0:	015a      	lsls	r2, r3, #5
 8000ce2:	d594      	bpl.n	8000c0e <__aeabi_fsub+0x1b2>
 8000ce4:	4a2b      	ldr	r2, [pc, #172]	; (8000d94 <__aeabi_fsub+0x338>)
 8000ce6:	3501      	adds	r5, #1
 8000ce8:	4013      	ands	r3, r2
 8000cea:	e790      	b.n	8000c0e <__aeabi_fsub+0x1b2>
 8000cec:	4663      	mov	r3, ip
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0af      	beq.n	8000c52 <__aeabi_fsub+0x1f6>
 8000cf2:	1e53      	subs	r3, r2, #1
 8000cf4:	2a01      	cmp	r2, #1
 8000cf6:	d015      	beq.n	8000d24 <__aeabi_fsub+0x2c8>
 8000cf8:	2aff      	cmp	r2, #255	; 0xff
 8000cfa:	d02a      	beq.n	8000d52 <__aeabi_fsub+0x2f6>
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	e752      	b.n	8000ba6 <__aeabi_fsub+0x14a>
 8000d00:	4662      	mov	r2, ip
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	d191      	bne.n	8000c2a <__aeabi_fsub+0x1ce>
 8000d06:	2800      	cmp	r0, #0
 8000d08:	d198      	bne.n	8000c3c <__aeabi_fsub+0x1e0>
 8000d0a:	2680      	movs	r6, #128	; 0x80
 8000d0c:	2400      	movs	r4, #0
 8000d0e:	22ff      	movs	r2, #255	; 0xff
 8000d10:	03f6      	lsls	r6, r6, #15
 8000d12:	e6ee      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000d14:	000c      	movs	r4, r1
 8000d16:	4643      	mov	r3, r8
 8000d18:	0015      	movs	r5, r2
 8000d1a:	e77c      	b.n	8000c16 <__aeabi_fsub+0x1ba>
 8000d1c:	4663      	mov	r3, ip
 8000d1e:	000c      	movs	r4, r1
 8000d20:	1ac6      	subs	r6, r0, r3
 8000d22:	e6c9      	b.n	8000ab8 <__aeabi_fsub+0x5c>
 8000d24:	0003      	movs	r3, r0
 8000d26:	4463      	add	r3, ip
 8000d28:	2501      	movs	r5, #1
 8000d2a:	015a      	lsls	r2, r3, #5
 8000d2c:	d400      	bmi.n	8000d30 <__aeabi_fsub+0x2d4>
 8000d2e:	e76e      	b.n	8000c0e <__aeabi_fsub+0x1b2>
 8000d30:	2502      	movs	r5, #2
 8000d32:	e6fa      	b.n	8000b2a <__aeabi_fsub+0xce>
 8000d34:	4663      	mov	r3, ip
 8000d36:	2501      	movs	r5, #1
 8000d38:	1a1b      	subs	r3, r3, r0
 8000d3a:	e6b8      	b.n	8000aae <__aeabi_fsub+0x52>
 8000d3c:	4664      	mov	r4, ip
 8000d3e:	2320      	movs	r3, #32
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	4662      	mov	r2, ip
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	1e5a      	subs	r2, r3, #1
 8000d4c:	4193      	sbcs	r3, r2
 8000d4e:	4323      	orrs	r3, r4
 8000d50:	e7a2      	b.n	8000c98 <__aeabi_fsub+0x23c>
 8000d52:	4643      	mov	r3, r8
 8000d54:	e774      	b.n	8000c40 <__aeabi_fsub+0x1e4>
 8000d56:	4661      	mov	r1, ip
 8000d58:	2320      	movs	r3, #32
 8000d5a:	40d1      	lsrs	r1, r2
 8000d5c:	1a9b      	subs	r3, r3, r2
 8000d5e:	4662      	mov	r2, ip
 8000d60:	409a      	lsls	r2, r3
 8000d62:	0013      	movs	r3, r2
 8000d64:	1e5a      	subs	r2, r3, #1
 8000d66:	4193      	sbcs	r3, r2
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	e720      	b.n	8000bae <__aeabi_fsub+0x152>
 8000d6c:	4663      	mov	r3, ip
 8000d6e:	000c      	movs	r4, r1
 8000d70:	2501      	movs	r5, #1
 8000d72:	1ac3      	subs	r3, r0, r3
 8000d74:	e69b      	b.n	8000aae <__aeabi_fsub+0x52>
 8000d76:	2800      	cmp	r0, #0
 8000d78:	d099      	beq.n	8000cae <__aeabi_fsub+0x252>
 8000d7a:	000c      	movs	r4, r1
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	2200      	movs	r2, #0
 8000d80:	e6b7      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000d82:	4646      	mov	r6, r8
 8000d84:	2200      	movs	r2, #0
 8000d86:	e6b4      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_fsub+0x332>
 8000d8c:	e73f      	b.n	8000c0e <__aeabi_fsub+0x1b2>
 8000d8e:	2400      	movs	r4, #0
 8000d90:	2600      	movs	r6, #0
 8000d92:	e6ae      	b.n	8000af2 <__aeabi_fsub+0x96>
 8000d94:	fbffffff 	.word	0xfbffffff
 8000d98:	7dffffff 	.word	0x7dffffff

08000d9c <__aeabi_f2iz>:
 8000d9c:	0241      	lsls	r1, r0, #9
 8000d9e:	0042      	lsls	r2, r0, #1
 8000da0:	0fc3      	lsrs	r3, r0, #31
 8000da2:	0a49      	lsrs	r1, r1, #9
 8000da4:	2000      	movs	r0, #0
 8000da6:	0e12      	lsrs	r2, r2, #24
 8000da8:	2a7e      	cmp	r2, #126	; 0x7e
 8000daa:	dd03      	ble.n	8000db4 <__aeabi_f2iz+0x18>
 8000dac:	2a9d      	cmp	r2, #157	; 0x9d
 8000dae:	dd02      	ble.n	8000db6 <__aeabi_f2iz+0x1a>
 8000db0:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <__aeabi_f2iz+0x3c>)
 8000db2:	1898      	adds	r0, r3, r2
 8000db4:	4770      	bx	lr
 8000db6:	2080      	movs	r0, #128	; 0x80
 8000db8:	0400      	lsls	r0, r0, #16
 8000dba:	4301      	orrs	r1, r0
 8000dbc:	2a95      	cmp	r2, #149	; 0x95
 8000dbe:	dc07      	bgt.n	8000dd0 <__aeabi_f2iz+0x34>
 8000dc0:	2096      	movs	r0, #150	; 0x96
 8000dc2:	1a82      	subs	r2, r0, r2
 8000dc4:	40d1      	lsrs	r1, r2
 8000dc6:	4248      	negs	r0, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_f2iz+0x18>
 8000dcc:	0008      	movs	r0, r1
 8000dce:	e7f1      	b.n	8000db4 <__aeabi_f2iz+0x18>
 8000dd0:	3a96      	subs	r2, #150	; 0x96
 8000dd2:	4091      	lsls	r1, r2
 8000dd4:	e7f7      	b.n	8000dc6 <__aeabi_f2iz+0x2a>
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	7fffffff 	.word	0x7fffffff

08000ddc <__aeabi_i2f>:
 8000ddc:	b570      	push	{r4, r5, r6, lr}
 8000dde:	2800      	cmp	r0, #0
 8000de0:	d013      	beq.n	8000e0a <__aeabi_i2f+0x2e>
 8000de2:	17c3      	asrs	r3, r0, #31
 8000de4:	18c5      	adds	r5, r0, r3
 8000de6:	405d      	eors	r5, r3
 8000de8:	0fc4      	lsrs	r4, r0, #31
 8000dea:	0028      	movs	r0, r5
 8000dec:	f000 f882 	bl	8000ef4 <__clzsi2>
 8000df0:	239e      	movs	r3, #158	; 0x9e
 8000df2:	0001      	movs	r1, r0
 8000df4:	1a1b      	subs	r3, r3, r0
 8000df6:	2b96      	cmp	r3, #150	; 0x96
 8000df8:	dc0f      	bgt.n	8000e1a <__aeabi_i2f+0x3e>
 8000dfa:	2808      	cmp	r0, #8
 8000dfc:	d031      	beq.n	8000e62 <__aeabi_i2f+0x86>
 8000dfe:	3908      	subs	r1, #8
 8000e00:	408d      	lsls	r5, r1
 8000e02:	026d      	lsls	r5, r5, #9
 8000e04:	0a6d      	lsrs	r5, r5, #9
 8000e06:	b2d8      	uxtb	r0, r3
 8000e08:	e002      	b.n	8000e10 <__aeabi_i2f+0x34>
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	2500      	movs	r5, #0
 8000e10:	05c0      	lsls	r0, r0, #23
 8000e12:	4328      	orrs	r0, r5
 8000e14:	07e4      	lsls	r4, r4, #31
 8000e16:	4320      	orrs	r0, r4
 8000e18:	bd70      	pop	{r4, r5, r6, pc}
 8000e1a:	2b99      	cmp	r3, #153	; 0x99
 8000e1c:	dd0c      	ble.n	8000e38 <__aeabi_i2f+0x5c>
 8000e1e:	2205      	movs	r2, #5
 8000e20:	1a12      	subs	r2, r2, r0
 8000e22:	0028      	movs	r0, r5
 8000e24:	40d0      	lsrs	r0, r2
 8000e26:	0002      	movs	r2, r0
 8000e28:	0008      	movs	r0, r1
 8000e2a:	301b      	adds	r0, #27
 8000e2c:	4085      	lsls	r5, r0
 8000e2e:	0028      	movs	r0, r5
 8000e30:	1e45      	subs	r5, r0, #1
 8000e32:	41a8      	sbcs	r0, r5
 8000e34:	4302      	orrs	r2, r0
 8000e36:	0015      	movs	r5, r2
 8000e38:	2905      	cmp	r1, #5
 8000e3a:	dc16      	bgt.n	8000e6a <__aeabi_i2f+0x8e>
 8000e3c:	002a      	movs	r2, r5
 8000e3e:	480f      	ldr	r0, [pc, #60]	; (8000e7c <__aeabi_i2f+0xa0>)
 8000e40:	4002      	ands	r2, r0
 8000e42:	076e      	lsls	r6, r5, #29
 8000e44:	d009      	beq.n	8000e5a <__aeabi_i2f+0x7e>
 8000e46:	260f      	movs	r6, #15
 8000e48:	4035      	ands	r5, r6
 8000e4a:	2d04      	cmp	r5, #4
 8000e4c:	d005      	beq.n	8000e5a <__aeabi_i2f+0x7e>
 8000e4e:	3204      	adds	r2, #4
 8000e50:	0155      	lsls	r5, r2, #5
 8000e52:	d502      	bpl.n	8000e5a <__aeabi_i2f+0x7e>
 8000e54:	239f      	movs	r3, #159	; 0x9f
 8000e56:	4002      	ands	r2, r0
 8000e58:	1a5b      	subs	r3, r3, r1
 8000e5a:	0192      	lsls	r2, r2, #6
 8000e5c:	0a55      	lsrs	r5, r2, #9
 8000e5e:	b2d8      	uxtb	r0, r3
 8000e60:	e7d6      	b.n	8000e10 <__aeabi_i2f+0x34>
 8000e62:	026d      	lsls	r5, r5, #9
 8000e64:	2096      	movs	r0, #150	; 0x96
 8000e66:	0a6d      	lsrs	r5, r5, #9
 8000e68:	e7d2      	b.n	8000e10 <__aeabi_i2f+0x34>
 8000e6a:	1f4a      	subs	r2, r1, #5
 8000e6c:	4095      	lsls	r5, r2
 8000e6e:	002a      	movs	r2, r5
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <__aeabi_i2f+0xa0>)
 8000e72:	4002      	ands	r2, r0
 8000e74:	076e      	lsls	r6, r5, #29
 8000e76:	d0f0      	beq.n	8000e5a <__aeabi_i2f+0x7e>
 8000e78:	e7e5      	b.n	8000e46 <__aeabi_i2f+0x6a>
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	fbffffff 	.word	0xfbffffff

08000e80 <__aeabi_cfrcmple>:
 8000e80:	4684      	mov	ip, r0
 8000e82:	0008      	movs	r0, r1
 8000e84:	4661      	mov	r1, ip
 8000e86:	e7ff      	b.n	8000e88 <__aeabi_cfcmpeq>

08000e88 <__aeabi_cfcmpeq>:
 8000e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000e8a:	f000 f8bd 	bl	8001008 <__lesf2>
 8000e8e:	2800      	cmp	r0, #0
 8000e90:	d401      	bmi.n	8000e96 <__aeabi_cfcmpeq+0xe>
 8000e92:	2100      	movs	r1, #0
 8000e94:	42c8      	cmn	r0, r1
 8000e96:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000e98 <__aeabi_fcmpeq>:
 8000e98:	b510      	push	{r4, lr}
 8000e9a:	f000 f849 	bl	8000f30 <__eqsf2>
 8000e9e:	4240      	negs	r0, r0
 8000ea0:	3001      	adds	r0, #1
 8000ea2:	bd10      	pop	{r4, pc}

08000ea4 <__aeabi_fcmplt>:
 8000ea4:	b510      	push	{r4, lr}
 8000ea6:	f000 f8af 	bl	8001008 <__lesf2>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	db01      	blt.n	8000eb2 <__aeabi_fcmplt+0xe>
 8000eae:	2000      	movs	r0, #0
 8000eb0:	bd10      	pop	{r4, pc}
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	bd10      	pop	{r4, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)

08000eb8 <__aeabi_fcmple>:
 8000eb8:	b510      	push	{r4, lr}
 8000eba:	f000 f8a5 	bl	8001008 <__lesf2>
 8000ebe:	2800      	cmp	r0, #0
 8000ec0:	dd01      	ble.n	8000ec6 <__aeabi_fcmple+0xe>
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	bd10      	pop	{r4, pc}
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	bd10      	pop	{r4, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)

08000ecc <__aeabi_fcmpgt>:
 8000ecc:	b510      	push	{r4, lr}
 8000ece:	f000 f855 	bl	8000f7c <__gesf2>
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	dc01      	bgt.n	8000eda <__aeabi_fcmpgt+0xe>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	bd10      	pop	{r4, pc}
 8000eda:	2001      	movs	r0, #1
 8000edc:	bd10      	pop	{r4, pc}
 8000ede:	46c0      	nop			; (mov r8, r8)

08000ee0 <__aeabi_fcmpge>:
 8000ee0:	b510      	push	{r4, lr}
 8000ee2:	f000 f84b 	bl	8000f7c <__gesf2>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	da01      	bge.n	8000eee <__aeabi_fcmpge+0xe>
 8000eea:	2000      	movs	r0, #0
 8000eec:	bd10      	pop	{r4, pc}
 8000eee:	2001      	movs	r0, #1
 8000ef0:	bd10      	pop	{r4, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)

08000ef4 <__clzsi2>:
 8000ef4:	211c      	movs	r1, #28
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	041b      	lsls	r3, r3, #16
 8000efa:	4298      	cmp	r0, r3
 8000efc:	d301      	bcc.n	8000f02 <__clzsi2+0xe>
 8000efe:	0c00      	lsrs	r0, r0, #16
 8000f00:	3910      	subs	r1, #16
 8000f02:	0a1b      	lsrs	r3, r3, #8
 8000f04:	4298      	cmp	r0, r3
 8000f06:	d301      	bcc.n	8000f0c <__clzsi2+0x18>
 8000f08:	0a00      	lsrs	r0, r0, #8
 8000f0a:	3908      	subs	r1, #8
 8000f0c:	091b      	lsrs	r3, r3, #4
 8000f0e:	4298      	cmp	r0, r3
 8000f10:	d301      	bcc.n	8000f16 <__clzsi2+0x22>
 8000f12:	0900      	lsrs	r0, r0, #4
 8000f14:	3904      	subs	r1, #4
 8000f16:	a202      	add	r2, pc, #8	; (adr r2, 8000f20 <__clzsi2+0x2c>)
 8000f18:	5c10      	ldrb	r0, [r2, r0]
 8000f1a:	1840      	adds	r0, r0, r1
 8000f1c:	4770      	bx	lr
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	02020304 	.word	0x02020304
 8000f24:	01010101 	.word	0x01010101
	...

08000f30 <__eqsf2>:
 8000f30:	b570      	push	{r4, r5, r6, lr}
 8000f32:	0042      	lsls	r2, r0, #1
 8000f34:	0245      	lsls	r5, r0, #9
 8000f36:	024e      	lsls	r6, r1, #9
 8000f38:	004c      	lsls	r4, r1, #1
 8000f3a:	0fc3      	lsrs	r3, r0, #31
 8000f3c:	0a6d      	lsrs	r5, r5, #9
 8000f3e:	2001      	movs	r0, #1
 8000f40:	0e12      	lsrs	r2, r2, #24
 8000f42:	0a76      	lsrs	r6, r6, #9
 8000f44:	0e24      	lsrs	r4, r4, #24
 8000f46:	0fc9      	lsrs	r1, r1, #31
 8000f48:	2aff      	cmp	r2, #255	; 0xff
 8000f4a:	d006      	beq.n	8000f5a <__eqsf2+0x2a>
 8000f4c:	2cff      	cmp	r4, #255	; 0xff
 8000f4e:	d003      	beq.n	8000f58 <__eqsf2+0x28>
 8000f50:	42a2      	cmp	r2, r4
 8000f52:	d101      	bne.n	8000f58 <__eqsf2+0x28>
 8000f54:	42b5      	cmp	r5, r6
 8000f56:	d006      	beq.n	8000f66 <__eqsf2+0x36>
 8000f58:	bd70      	pop	{r4, r5, r6, pc}
 8000f5a:	2d00      	cmp	r5, #0
 8000f5c:	d1fc      	bne.n	8000f58 <__eqsf2+0x28>
 8000f5e:	2cff      	cmp	r4, #255	; 0xff
 8000f60:	d1fa      	bne.n	8000f58 <__eqsf2+0x28>
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	d1f8      	bne.n	8000f58 <__eqsf2+0x28>
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d006      	beq.n	8000f78 <__eqsf2+0x48>
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	2a00      	cmp	r2, #0
 8000f6e:	d1f3      	bne.n	8000f58 <__eqsf2+0x28>
 8000f70:	0028      	movs	r0, r5
 8000f72:	1e43      	subs	r3, r0, #1
 8000f74:	4198      	sbcs	r0, r3
 8000f76:	e7ef      	b.n	8000f58 <__eqsf2+0x28>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	e7ed      	b.n	8000f58 <__eqsf2+0x28>

08000f7c <__gesf2>:
 8000f7c:	b570      	push	{r4, r5, r6, lr}
 8000f7e:	0042      	lsls	r2, r0, #1
 8000f80:	0245      	lsls	r5, r0, #9
 8000f82:	024e      	lsls	r6, r1, #9
 8000f84:	004c      	lsls	r4, r1, #1
 8000f86:	0fc3      	lsrs	r3, r0, #31
 8000f88:	0a6d      	lsrs	r5, r5, #9
 8000f8a:	0e12      	lsrs	r2, r2, #24
 8000f8c:	0a76      	lsrs	r6, r6, #9
 8000f8e:	0e24      	lsrs	r4, r4, #24
 8000f90:	0fc8      	lsrs	r0, r1, #31
 8000f92:	2aff      	cmp	r2, #255	; 0xff
 8000f94:	d01b      	beq.n	8000fce <__gesf2+0x52>
 8000f96:	2cff      	cmp	r4, #255	; 0xff
 8000f98:	d00e      	beq.n	8000fb8 <__gesf2+0x3c>
 8000f9a:	2a00      	cmp	r2, #0
 8000f9c:	d11b      	bne.n	8000fd6 <__gesf2+0x5a>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d101      	bne.n	8000fa6 <__gesf2+0x2a>
 8000fa2:	2e00      	cmp	r6, #0
 8000fa4:	d01c      	beq.n	8000fe0 <__gesf2+0x64>
 8000fa6:	2d00      	cmp	r5, #0
 8000fa8:	d00c      	beq.n	8000fc4 <__gesf2+0x48>
 8000faa:	4283      	cmp	r3, r0
 8000fac:	d01c      	beq.n	8000fe8 <__gesf2+0x6c>
 8000fae:	2102      	movs	r1, #2
 8000fb0:	1e58      	subs	r0, r3, #1
 8000fb2:	4008      	ands	r0, r1
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	bd70      	pop	{r4, r5, r6, pc}
 8000fb8:	2e00      	cmp	r6, #0
 8000fba:	d122      	bne.n	8001002 <__gesf2+0x86>
 8000fbc:	2a00      	cmp	r2, #0
 8000fbe:	d1f4      	bne.n	8000faa <__gesf2+0x2e>
 8000fc0:	2d00      	cmp	r5, #0
 8000fc2:	d1f2      	bne.n	8000faa <__gesf2+0x2e>
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d1f6      	bne.n	8000fb6 <__gesf2+0x3a>
 8000fc8:	2001      	movs	r0, #1
 8000fca:	4240      	negs	r0, r0
 8000fcc:	e7f3      	b.n	8000fb6 <__gesf2+0x3a>
 8000fce:	2d00      	cmp	r5, #0
 8000fd0:	d117      	bne.n	8001002 <__gesf2+0x86>
 8000fd2:	2cff      	cmp	r4, #255	; 0xff
 8000fd4:	d0f0      	beq.n	8000fb8 <__gesf2+0x3c>
 8000fd6:	2c00      	cmp	r4, #0
 8000fd8:	d1e7      	bne.n	8000faa <__gesf2+0x2e>
 8000fda:	2e00      	cmp	r6, #0
 8000fdc:	d1e5      	bne.n	8000faa <__gesf2+0x2e>
 8000fde:	e7e6      	b.n	8000fae <__gesf2+0x32>
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	2d00      	cmp	r5, #0
 8000fe4:	d0e7      	beq.n	8000fb6 <__gesf2+0x3a>
 8000fe6:	e7e2      	b.n	8000fae <__gesf2+0x32>
 8000fe8:	42a2      	cmp	r2, r4
 8000fea:	dc05      	bgt.n	8000ff8 <__gesf2+0x7c>
 8000fec:	dbea      	blt.n	8000fc4 <__gesf2+0x48>
 8000fee:	42b5      	cmp	r5, r6
 8000ff0:	d802      	bhi.n	8000ff8 <__gesf2+0x7c>
 8000ff2:	d3e7      	bcc.n	8000fc4 <__gesf2+0x48>
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	e7de      	b.n	8000fb6 <__gesf2+0x3a>
 8000ff8:	4243      	negs	r3, r0
 8000ffa:	4158      	adcs	r0, r3
 8000ffc:	0040      	lsls	r0, r0, #1
 8000ffe:	3801      	subs	r0, #1
 8001000:	e7d9      	b.n	8000fb6 <__gesf2+0x3a>
 8001002:	2002      	movs	r0, #2
 8001004:	4240      	negs	r0, r0
 8001006:	e7d6      	b.n	8000fb6 <__gesf2+0x3a>

08001008 <__lesf2>:
 8001008:	b570      	push	{r4, r5, r6, lr}
 800100a:	0042      	lsls	r2, r0, #1
 800100c:	0245      	lsls	r5, r0, #9
 800100e:	024e      	lsls	r6, r1, #9
 8001010:	004c      	lsls	r4, r1, #1
 8001012:	0fc3      	lsrs	r3, r0, #31
 8001014:	0a6d      	lsrs	r5, r5, #9
 8001016:	0e12      	lsrs	r2, r2, #24
 8001018:	0a76      	lsrs	r6, r6, #9
 800101a:	0e24      	lsrs	r4, r4, #24
 800101c:	0fc8      	lsrs	r0, r1, #31
 800101e:	2aff      	cmp	r2, #255	; 0xff
 8001020:	d00b      	beq.n	800103a <__lesf2+0x32>
 8001022:	2cff      	cmp	r4, #255	; 0xff
 8001024:	d00d      	beq.n	8001042 <__lesf2+0x3a>
 8001026:	2a00      	cmp	r2, #0
 8001028:	d11f      	bne.n	800106a <__lesf2+0x62>
 800102a:	2c00      	cmp	r4, #0
 800102c:	d116      	bne.n	800105c <__lesf2+0x54>
 800102e:	2e00      	cmp	r6, #0
 8001030:	d114      	bne.n	800105c <__lesf2+0x54>
 8001032:	2000      	movs	r0, #0
 8001034:	2d00      	cmp	r5, #0
 8001036:	d010      	beq.n	800105a <__lesf2+0x52>
 8001038:	e009      	b.n	800104e <__lesf2+0x46>
 800103a:	2d00      	cmp	r5, #0
 800103c:	d10c      	bne.n	8001058 <__lesf2+0x50>
 800103e:	2cff      	cmp	r4, #255	; 0xff
 8001040:	d113      	bne.n	800106a <__lesf2+0x62>
 8001042:	2e00      	cmp	r6, #0
 8001044:	d108      	bne.n	8001058 <__lesf2+0x50>
 8001046:	2a00      	cmp	r2, #0
 8001048:	d008      	beq.n	800105c <__lesf2+0x54>
 800104a:	4283      	cmp	r3, r0
 800104c:	d012      	beq.n	8001074 <__lesf2+0x6c>
 800104e:	2102      	movs	r1, #2
 8001050:	1e58      	subs	r0, r3, #1
 8001052:	4008      	ands	r0, r1
 8001054:	3801      	subs	r0, #1
 8001056:	e000      	b.n	800105a <__lesf2+0x52>
 8001058:	2002      	movs	r0, #2
 800105a:	bd70      	pop	{r4, r5, r6, pc}
 800105c:	2d00      	cmp	r5, #0
 800105e:	d1f4      	bne.n	800104a <__lesf2+0x42>
 8001060:	2800      	cmp	r0, #0
 8001062:	d1fa      	bne.n	800105a <__lesf2+0x52>
 8001064:	2001      	movs	r0, #1
 8001066:	4240      	negs	r0, r0
 8001068:	e7f7      	b.n	800105a <__lesf2+0x52>
 800106a:	2c00      	cmp	r4, #0
 800106c:	d1ed      	bne.n	800104a <__lesf2+0x42>
 800106e:	2e00      	cmp	r6, #0
 8001070:	d1eb      	bne.n	800104a <__lesf2+0x42>
 8001072:	e7ec      	b.n	800104e <__lesf2+0x46>
 8001074:	42a2      	cmp	r2, r4
 8001076:	dc05      	bgt.n	8001084 <__lesf2+0x7c>
 8001078:	dbf2      	blt.n	8001060 <__lesf2+0x58>
 800107a:	42b5      	cmp	r5, r6
 800107c:	d802      	bhi.n	8001084 <__lesf2+0x7c>
 800107e:	d3ef      	bcc.n	8001060 <__lesf2+0x58>
 8001080:	2000      	movs	r0, #0
 8001082:	e7ea      	b.n	800105a <__lesf2+0x52>
 8001084:	4243      	negs	r3, r0
 8001086:	4158      	adcs	r0, r3
 8001088:	0040      	lsls	r0, r0, #1
 800108a:	3801      	subs	r0, #1
 800108c:	e7e5      	b.n	800105a <__lesf2+0x52>
 800108e:	46c0      	nop			; (mov r8, r8)

08001090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001094:	f000 fea4 	bl	8001de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001098:	f000 f815 	bl	80010c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109c:	f000 faf0 	bl	8001680 <MX_GPIO_Init>
  MX_DMA_Init();
 80010a0:	f000 fac8 	bl	8001634 <MX_DMA_Init>
  MX_ADC1_Init();
 80010a4:	f000 f86e 	bl	8001184 <MX_ADC1_Init>
  MX_I2C1_Init();
 80010a8:	f000 f8d8 	bl	800125c <MX_I2C1_Init>
  MX_TIM3_Init();
 80010ac:	f000 fa62 	bl	8001574 <MX_TIM3_Init>
  MX_TIM2_Init();
 80010b0:	f000 fa02 	bl	80014b8 <MX_TIM2_Init>
  MX_TIM1_Init();
 80010b4:	f000 f954 	bl	8001360 <MX_TIM1_Init>
  MX_I2C2_Init();
 80010b8:	f000 f912 	bl	80012e0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  firmware_init();
 80010bc:	f006 f87c 	bl	80071b8 <firmware_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  firmware_update();
 80010c0:	f006 f8fe 	bl	80072c0 <firmware_update>
 80010c4:	e7fc      	b.n	80010c0 <main+0x30>

080010c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c6:	b590      	push	{r4, r7, lr}
 80010c8:	b093      	sub	sp, #76	; 0x4c
 80010ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010cc:	2410      	movs	r4, #16
 80010ce:	193b      	adds	r3, r7, r4
 80010d0:	0018      	movs	r0, r3
 80010d2:	2338      	movs	r3, #56	; 0x38
 80010d4:	001a      	movs	r2, r3
 80010d6:	2100      	movs	r1, #0
 80010d8:	f007 f87c 	bl	80081d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	003b      	movs	r3, r7
 80010de:	0018      	movs	r0, r3
 80010e0:	2310      	movs	r3, #16
 80010e2:	001a      	movs	r2, r3
 80010e4:	2100      	movs	r1, #0
 80010e6:	f007 f875 	bl	80081d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	0018      	movs	r0, r3
 80010f0:	f003 fd3a 	bl	8004b68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010f4:	193b      	adds	r3, r7, r4
 80010f6:	2202      	movs	r2, #2
 80010f8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010fa:	193b      	adds	r3, r7, r4
 80010fc:	2280      	movs	r2, #128	; 0x80
 80010fe:	0052      	lsls	r2, r2, #1
 8001100:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001102:	0021      	movs	r1, r4
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110a:	187b      	adds	r3, r7, r1
 800110c:	2240      	movs	r2, #64	; 0x40
 800110e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001110:	187b      	adds	r3, r7, r1
 8001112:	2202      	movs	r2, #2
 8001114:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001116:	187b      	adds	r3, r7, r1
 8001118:	2202      	movs	r2, #2
 800111a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2200      	movs	r2, #0
 8001120:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2208      	movs	r2, #8
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2280      	movs	r2, #128	; 0x80
 800112c:	0292      	lsls	r2, r2, #10
 800112e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001130:	187b      	adds	r3, r7, r1
 8001132:	2280      	movs	r2, #128	; 0x80
 8001134:	0492      	lsls	r2, r2, #18
 8001136:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001138:	187b      	adds	r3, r7, r1
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	0592      	lsls	r2, r2, #22
 800113e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001140:	187b      	adds	r3, r7, r1
 8001142:	0018      	movs	r0, r3
 8001144:	f003 fd50 	bl	8004be8 <HAL_RCC_OscConfig>
 8001148:	1e03      	subs	r3, r0, #0
 800114a:	d001      	beq.n	8001150 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800114c:	f000 fb52 	bl	80017f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001150:	003b      	movs	r3, r7
 8001152:	2207      	movs	r2, #7
 8001154:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001156:	003b      	movs	r3, r7
 8001158:	2202      	movs	r2, #2
 800115a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800115c:	003b      	movs	r3, r7
 800115e:	2280      	movs	r2, #128	; 0x80
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001164:	003b      	movs	r3, r7
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800116a:	003b      	movs	r3, r7
 800116c:	2101      	movs	r1, #1
 800116e:	0018      	movs	r0, r3
 8001170:	f004 f854 	bl	800521c <HAL_RCC_ClockConfig>
 8001174:	1e03      	subs	r3, r0, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001178:	f000 fb3c 	bl	80017f4 <Error_Handler>
  }
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	b013      	add	sp, #76	; 0x4c
 8001182:	bd90      	pop	{r4, r7, pc}

08001184 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	0018      	movs	r0, r3
 800118e:	230c      	movs	r3, #12
 8001190:	001a      	movs	r2, r3
 8001192:	2100      	movs	r1, #0
 8001194:	f007 f81e 	bl	80081d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001198:	4b2d      	ldr	r3, [pc, #180]	; (8001250 <MX_ADC1_Init+0xcc>)
 800119a:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <MX_ADC1_Init+0xd0>)
 800119c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800119e:	4b2c      	ldr	r3, [pc, #176]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011a0:	2280      	movs	r2, #128	; 0x80
 80011a2:	05d2      	lsls	r2, r2, #23
 80011a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a6:	4b2a      	ldr	r3, [pc, #168]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011b2:	4b27      	ldr	r3, [pc, #156]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011ba:	2204      	movs	r2, #4
 80011bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80011c4:	4b22      	ldr	r3, [pc, #136]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ca:	4b21      	ldr	r3, [pc, #132]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011d8:	2220      	movs	r2, #32
 80011da:	2100      	movs	r1, #0
 80011dc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011de:	4b1c      	ldr	r3, [pc, #112]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011ec:	222c      	movs	r2, #44	; 0x2c
 80011ee:	2100      	movs	r1, #0
 80011f0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011f2:	4b17      	ldr	r3, [pc, #92]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <MX_ADC1_Init+0xcc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_ADC1_Init+0xcc>)
 8001200:	2200      	movs	r2, #0
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <MX_ADC1_Init+0xcc>)
 8001206:	223c      	movs	r2, #60	; 0x3c
 8001208:	2100      	movs	r1, #0
 800120a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800120c:	4b10      	ldr	r3, [pc, #64]	; (8001250 <MX_ADC1_Init+0xcc>)
 800120e:	2200      	movs	r2, #0
 8001210:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001212:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_ADC1_Init+0xcc>)
 8001214:	0018      	movs	r0, r3
 8001216:	f000 ff8b 	bl	8002130 <HAL_ADC_Init>
 800121a:	1e03      	subs	r3, r0, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800121e:	f000 fae9 	bl	80017f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4a0c      	ldr	r2, [pc, #48]	; (8001258 <MX_ADC1_Init+0xd4>)
 8001226:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001234:	1d3a      	adds	r2, r7, #4
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_ADC1_Init+0xcc>)
 8001238:	0011      	movs	r1, r2
 800123a:	0018      	movs	r0, r3
 800123c:	f001 f920 	bl	8002480 <HAL_ADC_ConfigChannel>
 8001240:	1e03      	subs	r3, r0, #0
 8001242:	d001      	beq.n	8001248 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001244:	f000 fad6 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b004      	add	sp, #16
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000028 	.word	0x20000028
 8001254:	40012400 	.word	0x40012400
 8001258:	04000002 	.word	0x04000002

0800125c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <MX_I2C1_Init+0x78>)
 8001262:	4a1d      	ldr	r2, [pc, #116]	; (80012d8 <MX_I2C1_Init+0x7c>)
 8001264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MX_I2C1_Init+0x78>)
 8001268:	4a1c      	ldr	r2, [pc, #112]	; (80012dc <MX_I2C1_Init+0x80>)
 800126a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 2;
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <MX_I2C1_Init+0x78>)
 800126e:	2202      	movs	r2, #2
 8001270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MX_I2C1_Init+0x78>)
 8001274:	2201      	movs	r2, #1
 8001276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <MX_I2C1_Init+0x78>)
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	0212      	lsls	r2, r2, #8
 800127e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001280:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_I2C1_Init+0x78>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001286:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <MX_I2C1_Init+0x78>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <MX_I2C1_Init+0x78>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001292:	4b10      	ldr	r3, [pc, #64]	; (80012d4 <MX_I2C1_Init+0x78>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001298:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <MX_I2C1_Init+0x78>)
 800129a:	0018      	movs	r0, r3
 800129c:	f002 f828 	bl	80032f0 <HAL_I2C_Init>
 80012a0:	1e03      	subs	r3, r0, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a4:	f000 faa6 	bl	80017f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <MX_I2C1_Init+0x78>)
 80012aa:	2100      	movs	r1, #0
 80012ac:	0018      	movs	r0, r3
 80012ae:	f003 fbc3 	bl	8004a38 <HAL_I2CEx_ConfigAnalogFilter>
 80012b2:	1e03      	subs	r3, r0, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012b6:	f000 fa9d 	bl	80017f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MX_I2C1_Init+0x78>)
 80012bc:	2100      	movs	r1, #0
 80012be:	0018      	movs	r0, r3
 80012c0:	f003 fc06 	bl	8004ad0 <HAL_I2CEx_ConfigDigitalFilter>
 80012c4:	1e03      	subs	r3, r0, #0
 80012c6:	d001      	beq.n	80012cc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012c8:	f000 fa94 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	2000008c 	.word	0x2000008c
 80012d8:	40005400 	.word	0x40005400
 80012dc:	00707cbb 	.word	0x00707cbb

080012e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_I2C2_Init+0x74>)
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <MX_I2C2_Init+0x78>)
 80012e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_I2C2_Init+0x74>)
 80012ec:	4a1b      	ldr	r2, [pc, #108]	; (800135c <MX_I2C2_Init+0x7c>)
 80012ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 2;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_I2C2_Init+0x74>)
 80012f2:	2202      	movs	r2, #2
 80012f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_I2C2_Init+0x74>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_I2C2_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_I2C2_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_I2C2_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_I2C2_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_I2C2_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_I2C2_Init+0x74>)
 800131c:	0018      	movs	r0, r3
 800131e:	f001 ffe7 	bl	80032f0 <HAL_I2C_Init>
 8001322:	1e03      	subs	r3, r0, #0
 8001324:	d001      	beq.n	800132a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001326:	f000 fa65 	bl	80017f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <MX_I2C2_Init+0x74>)
 800132c:	2100      	movs	r1, #0
 800132e:	0018      	movs	r0, r3
 8001330:	f003 fb82 	bl	8004a38 <HAL_I2CEx_ConfigAnalogFilter>
 8001334:	1e03      	subs	r3, r0, #0
 8001336:	d001      	beq.n	800133c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001338:	f000 fa5c 	bl	80017f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <MX_I2C2_Init+0x74>)
 800133e:	2100      	movs	r1, #0
 8001340:	0018      	movs	r0, r3
 8001342:	f003 fbc5 	bl	8004ad0 <HAL_I2CEx_ConfigDigitalFilter>
 8001346:	1e03      	subs	r3, r0, #0
 8001348:	d001      	beq.n	800134e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800134a:	f000 fa53 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200000e0 	.word	0x200000e0
 8001358:	40005800 	.word	0x40005800
 800135c:	00707cbb 	.word	0x00707cbb

08001360 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b098      	sub	sp, #96	; 0x60
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001366:	2354      	movs	r3, #84	; 0x54
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	0018      	movs	r0, r3
 800136c:	230c      	movs	r3, #12
 800136e:	001a      	movs	r2, r3
 8001370:	2100      	movs	r1, #0
 8001372:	f006 ff2f 	bl	80081d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001376:	2338      	movs	r3, #56	; 0x38
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	0018      	movs	r0, r3
 800137c:	231c      	movs	r3, #28
 800137e:	001a      	movs	r2, r3
 8001380:	2100      	movs	r1, #0
 8001382:	f006 ff27 	bl	80081d4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	0018      	movs	r0, r3
 800138a:	2334      	movs	r3, #52	; 0x34
 800138c:	001a      	movs	r2, r3
 800138e:	2100      	movs	r1, #0
 8001390:	f006 ff20 	bl	80081d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001394:	4b45      	ldr	r3, [pc, #276]	; (80014ac <MX_TIM1_Init+0x14c>)
 8001396:	4a46      	ldr	r2, [pc, #280]	; (80014b0 <MX_TIM1_Init+0x150>)
 8001398:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 800139a:	4b44      	ldr	r3, [pc, #272]	; (80014ac <MX_TIM1_Init+0x14c>)
 800139c:	2205      	movs	r2, #5
 800139e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b42      	ldr	r3, [pc, #264]	; (80014ac <MX_TIM1_Init+0x14c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013a6:	4b41      	ldr	r3, [pc, #260]	; (80014ac <MX_TIM1_Init+0x14c>)
 80013a8:	4a42      	ldr	r2, [pc, #264]	; (80014b4 <MX_TIM1_Init+0x154>)
 80013aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b3f      	ldr	r3, [pc, #252]	; (80014ac <MX_TIM1_Init+0x14c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013b2:	4b3e      	ldr	r3, [pc, #248]	; (80014ac <MX_TIM1_Init+0x14c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b3c      	ldr	r3, [pc, #240]	; (80014ac <MX_TIM1_Init+0x14c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013be:	4b3b      	ldr	r3, [pc, #236]	; (80014ac <MX_TIM1_Init+0x14c>)
 80013c0:	0018      	movs	r0, r3
 80013c2:	f004 fa2f 	bl	8005824 <HAL_TIM_PWM_Init>
 80013c6:	1e03      	subs	r3, r0, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80013ca:	f000 fa13 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2154      	movs	r1, #84	; 0x54
 80013d0:	187b      	adds	r3, r7, r1
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013d6:	187b      	adds	r3, r7, r1
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013e2:	187a      	adds	r2, r7, r1
 80013e4:	4b31      	ldr	r3, [pc, #196]	; (80014ac <MX_TIM1_Init+0x14c>)
 80013e6:	0011      	movs	r1, r2
 80013e8:	0018      	movs	r0, r3
 80013ea:	f005 fbcf 	bl	8006b8c <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	1e03      	subs	r3, r0, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013f2:	f000 f9ff 	bl	80017f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f6:	2138      	movs	r1, #56	; 0x38
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	2260      	movs	r2, #96	; 0x60
 80013fc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001404:	187b      	adds	r3, r7, r1
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800140a:	187b      	adds	r3, r7, r1
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001410:	187b      	adds	r3, r7, r1
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001416:	187b      	adds	r3, r7, r1
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800141c:	187b      	adds	r3, r7, r1
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001422:	1879      	adds	r1, r7, r1
 8001424:	4b21      	ldr	r3, [pc, #132]	; (80014ac <MX_TIM1_Init+0x14c>)
 8001426:	2204      	movs	r2, #4
 8001428:	0018      	movs	r0, r3
 800142a:	f004 fe95 	bl	8006158 <HAL_TIM_PWM_ConfigChannel>
 800142e:	1e03      	subs	r3, r0, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001432:	f000 f9df 	bl	80017f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	0192      	lsls	r2, r2, #6
 800145a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2200      	movs	r2, #0
 800146c:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	2280      	movs	r2, #128	; 0x80
 8001472:	0492      	lsls	r2, r2, #18
 8001474:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001476:	1d3b      	adds	r3, r7, #4
 8001478:	2200      	movs	r2, #0
 800147a:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2200      	movs	r2, #0
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001488:	1d3a      	adds	r2, r7, #4
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_TIM1_Init+0x14c>)
 800148c:	0011      	movs	r1, r2
 800148e:	0018      	movs	r0, r3
 8001490:	f005 fbe4 	bl	8006c5c <HAL_TIMEx_ConfigBreakDeadTime>
 8001494:	1e03      	subs	r3, r0, #0
 8001496:	d001      	beq.n	800149c <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001498:	f000 f9ac 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <MX_TIM1_Init+0x14c>)
 800149e:	0018      	movs	r0, r3
 80014a0:	f000 fb7c 	bl	8001b9c <HAL_TIM_MspPostInit>

}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b018      	add	sp, #96	; 0x60
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000134 	.word	0x20000134
 80014b0:	40012c00 	.word	0x40012c00
 80014b4:	0000ffff 	.word	0x0000ffff

080014b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	231c      	movs	r3, #28
 80014c0:	18fb      	adds	r3, r7, r3
 80014c2:	0018      	movs	r0, r3
 80014c4:	230c      	movs	r3, #12
 80014c6:	001a      	movs	r2, r3
 80014c8:	2100      	movs	r1, #0
 80014ca:	f006 fe83 	bl	80081d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ce:	003b      	movs	r3, r7
 80014d0:	0018      	movs	r0, r3
 80014d2:	231c      	movs	r3, #28
 80014d4:	001a      	movs	r2, r3
 80014d6:	2100      	movs	r1, #0
 80014d8:	f006 fe7c 	bl	80081d4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014dc:	4b24      	ldr	r3, [pc, #144]	; (8001570 <MX_TIM2_Init+0xb8>)
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	05d2      	lsls	r2, r2, #23
 80014e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_TIM2_Init+0xb8>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <MX_TIM2_Init+0xb8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_TIM2_Init+0xb8>)
 80014f2:	2227      	movs	r2, #39	; 0x27
 80014f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <MX_TIM2_Init+0xb8>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fc:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_TIM2_Init+0xb8>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <MX_TIM2_Init+0xb8>)
 8001504:	0018      	movs	r0, r3
 8001506:	f004 f98d 	bl	8005824 <HAL_TIM_PWM_Init>
 800150a:	1e03      	subs	r3, r0, #0
 800150c:	d001      	beq.n	8001512 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800150e:	f000 f971 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001512:	211c      	movs	r1, #28
 8001514:	187b      	adds	r3, r7, r1
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151a:	187b      	adds	r3, r7, r1
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001520:	187a      	adds	r2, r7, r1
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_TIM2_Init+0xb8>)
 8001524:	0011      	movs	r1, r2
 8001526:	0018      	movs	r0, r3
 8001528:	f005 fb30 	bl	8006b8c <HAL_TIMEx_MasterConfigSynchronization>
 800152c:	1e03      	subs	r3, r0, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001530:	f000 f960 	bl	80017f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001534:	003b      	movs	r3, r7
 8001536:	2260      	movs	r2, #96	; 0x60
 8001538:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800153a:	003b      	movs	r3, r7
 800153c:	2200      	movs	r2, #0
 800153e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001540:	003b      	movs	r3, r7
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001546:	003b      	movs	r3, r7
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154c:	0039      	movs	r1, r7
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_TIM2_Init+0xb8>)
 8001550:	2200      	movs	r2, #0
 8001552:	0018      	movs	r0, r3
 8001554:	f004 fe00 	bl	8006158 <HAL_TIM_PWM_ConfigChannel>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800155c:	f000 f94a 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <MX_TIM2_Init+0xb8>)
 8001562:	0018      	movs	r0, r3
 8001564:	f000 fb1a 	bl	8001b9c <HAL_TIM_MspPostInit>

}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b00a      	add	sp, #40	; 0x28
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000180 	.word	0x20000180

08001574 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	; 0x28
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157a:	231c      	movs	r3, #28
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	0018      	movs	r0, r3
 8001580:	230c      	movs	r3, #12
 8001582:	001a      	movs	r2, r3
 8001584:	2100      	movs	r1, #0
 8001586:	f006 fe25 	bl	80081d4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158a:	003b      	movs	r3, r7
 800158c:	0018      	movs	r0, r3
 800158e:	231c      	movs	r3, #28
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f006 fe1e 	bl	80081d4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <MX_TIM3_Init+0xb8>)
 800159a:	4a25      	ldr	r2, [pc, #148]	; (8001630 <MX_TIM3_Init+0xbc>)
 800159c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <MX_TIM3_Init+0xb8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b21      	ldr	r3, [pc, #132]	; (800162c <MX_TIM3_Init+0xb8>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39;
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <MX_TIM3_Init+0xb8>)
 80015ac:	2227      	movs	r2, #39	; 0x27
 80015ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	; (800162c <MX_TIM3_Init+0xb8>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <MX_TIM3_Init+0xb8>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015bc:	4b1b      	ldr	r3, [pc, #108]	; (800162c <MX_TIM3_Init+0xb8>)
 80015be:	0018      	movs	r0, r3
 80015c0:	f004 f930 	bl	8005824 <HAL_TIM_PWM_Init>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80015c8:	f000 f914 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015cc:	211c      	movs	r1, #28
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015da:	187a      	adds	r2, r7, r1
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_TIM3_Init+0xb8>)
 80015de:	0011      	movs	r1, r2
 80015e0:	0018      	movs	r0, r3
 80015e2:	f005 fad3 	bl	8006b8c <HAL_TIMEx_MasterConfigSynchronization>
 80015e6:	1e03      	subs	r3, r0, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80015ea:	f000 f903 	bl	80017f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ee:	003b      	movs	r3, r7
 80015f0:	2260      	movs	r2, #96	; 0x60
 80015f2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80015f4:	003b      	movs	r3, r7
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015fa:	003b      	movs	r3, r7
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001600:	003b      	movs	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001606:	0039      	movs	r1, r7
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <MX_TIM3_Init+0xb8>)
 800160a:	2200      	movs	r2, #0
 800160c:	0018      	movs	r0, r3
 800160e:	f004 fda3 	bl	8006158 <HAL_TIM_PWM_ConfigChannel>
 8001612:	1e03      	subs	r3, r0, #0
 8001614:	d001      	beq.n	800161a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8001616:	f000 f8ed 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <MX_TIM3_Init+0xb8>)
 800161c:	0018      	movs	r0, r3
 800161e:	f000 fabd 	bl	8001b9c <HAL_TIM_MspPostInit>

}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	b00a      	add	sp, #40	; 0x28
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	200001cc 	.word	0x200001cc
 8001630:	40000400 	.word	0x40000400

08001634 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <MX_DMA_Init+0x48>)
 800163c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_DMA_Init+0x48>)
 8001640:	2101      	movs	r1, #1
 8001642:	430a      	orrs	r2, r1
 8001644:	639a      	str	r2, [r3, #56]	; 0x38
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <MX_DMA_Init+0x48>)
 8001648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800164a:	2201      	movs	r2, #1
 800164c:	4013      	ands	r3, r2
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2009      	movs	r0, #9
 8001658:	f001 f996 	bl	8002988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800165c:	2009      	movs	r0, #9
 800165e:	f001 f9a8 	bl	80029b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	200a      	movs	r0, #10
 8001668:	f001 f98e 	bl	8002988 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800166c:	200a      	movs	r0, #10
 800166e:	f001 f9a0 	bl	80029b2 <HAL_NVIC_EnableIRQ>

}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	b002      	add	sp, #8
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	40021000 	.word	0x40021000

08001680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	240c      	movs	r4, #12
 8001688:	193b      	adds	r3, r7, r4
 800168a:	0018      	movs	r0, r3
 800168c:	2314      	movs	r3, #20
 800168e:	001a      	movs	r2, r3
 8001690:	2100      	movs	r1, #0
 8001692:	f006 fd9f 	bl	80081d4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <MX_GPIO_Init+0x164>)
 8001698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800169a:	4b52      	ldr	r3, [pc, #328]	; (80017e4 <MX_GPIO_Init+0x164>)
 800169c:	2101      	movs	r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	635a      	str	r2, [r3, #52]	; 0x34
 80016a2:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <MX_GPIO_Init+0x164>)
 80016a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a6:	2201      	movs	r2, #1
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	4b4d      	ldr	r3, [pc, #308]	; (80017e4 <MX_GPIO_Init+0x164>)
 80016b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b2:	4b4c      	ldr	r3, [pc, #304]	; (80017e4 <MX_GPIO_Init+0x164>)
 80016b4:	2102      	movs	r1, #2
 80016b6:	430a      	orrs	r2, r1
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
 80016ba:	4b4a      	ldr	r3, [pc, #296]	; (80017e4 <MX_GPIO_Init+0x164>)
 80016bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016be:	2202      	movs	r2, #2
 80016c0:	4013      	ands	r3, r2
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <MX_GPIO_Init+0x164>)
 80016c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ca:	4b46      	ldr	r3, [pc, #280]	; (80017e4 <MX_GPIO_Init+0x164>)
 80016cc:	2104      	movs	r1, #4
 80016ce:	430a      	orrs	r2, r1
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34
 80016d2:	4b44      	ldr	r3, [pc, #272]	; (80017e4 <MX_GPIO_Init+0x164>)
 80016d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d6:	2204      	movs	r2, #4
 80016d8:	4013      	ands	r3, r2
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_SD_Pin|LED_Pin, GPIO_PIN_RESET);
 80016de:	4942      	ldr	r1, [pc, #264]	; (80017e8 <MX_GPIO_Init+0x168>)
 80016e0:	23a0      	movs	r3, #160	; 0xa0
 80016e2:	05db      	lsls	r3, r3, #23
 80016e4:	2200      	movs	r2, #0
 80016e6:	0018      	movs	r0, r3
 80016e8:	f001 fdc9 	bl	800327e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_USB_Pin|ENABLE_5V_Pin, GPIO_PIN_RESET);
 80016ec:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <MX_GPIO_Init+0x16c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	2121      	movs	r1, #33	; 0x21
 80016f2:	0018      	movs	r0, r3
 80016f4:	f001 fdc3 	bl	800327e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_CM4_GPIO_Port, ENABLE_CM4_Pin, GPIO_PIN_RESET);
 80016f8:	4b3d      	ldr	r3, [pc, #244]	; (80017f0 <MX_GPIO_Init+0x170>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	2140      	movs	r1, #64	; 0x40
 80016fe:	0018      	movs	r0, r3
 8001700:	f001 fdbd 	bl	800327e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENABLE_SD_Pin LED_Pin */
  GPIO_InitStruct.Pin = ENABLE_SD_Pin|LED_Pin;
 8001704:	193b      	adds	r3, r7, r4
 8001706:	4a38      	ldr	r2, [pc, #224]	; (80017e8 <MX_GPIO_Init+0x168>)
 8001708:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	193b      	adds	r3, r7, r4
 800170c:	2201      	movs	r2, #1
 800170e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	193b      	adds	r3, r7, r4
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	193b      	adds	r3, r7, r4
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171c:	193a      	adds	r2, r7, r4
 800171e:	23a0      	movs	r3, #160	; 0xa0
 8001720:	05db      	lsls	r3, r3, #23
 8001722:	0011      	movs	r1, r2
 8001724:	0018      	movs	r0, r3
 8001726:	f001 fc29 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : DETECT_SD_Pin DEBUG_JMP_Pin */
  GPIO_InitStruct.Pin = DETECT_SD_Pin|DEBUG_JMP_Pin;
 800172a:	193b      	adds	r3, r7, r4
 800172c:	2288      	movs	r2, #136	; 0x88
 800172e:	0052      	lsls	r2, r2, #1
 8001730:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001732:	193b      	adds	r3, r7, r4
 8001734:	2200      	movs	r2, #0
 8001736:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	193b      	adds	r3, r7, r4
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	193a      	adds	r2, r7, r4
 8001740:	23a0      	movs	r3, #160	; 0xa0
 8001742:	05db      	lsls	r3, r3, #23
 8001744:	0011      	movs	r1, r2
 8001746:	0018      	movs	r0, r3
 8001748:	f001 fc18 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : DETECT_USB_Pin */
  GPIO_InitStruct.Pin = DETECT_USB_Pin;
 800174c:	193b      	adds	r3, r7, r4
 800174e:	2240      	movs	r2, #64	; 0x40
 8001750:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001752:	193b      	adds	r3, r7, r4
 8001754:	2200      	movs	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001758:	193b      	adds	r3, r7, r4
 800175a:	2201      	movs	r2, #1
 800175c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DETECT_USB_GPIO_Port, &GPIO_InitStruct);
 800175e:	193a      	adds	r2, r7, r4
 8001760:	23a0      	movs	r3, #160	; 0xa0
 8001762:	05db      	lsls	r3, r3, #23
 8001764:	0011      	movs	r1, r2
 8001766:	0018      	movs	r0, r3
 8001768:	f001 fc08 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_USB_Pin ENABLE_5V_Pin */
  GPIO_InitStruct.Pin = LED_USB_Pin|ENABLE_5V_Pin;
 800176c:	193b      	adds	r3, r7, r4
 800176e:	2221      	movs	r2, #33	; 0x21
 8001770:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	193b      	adds	r3, r7, r4
 8001774:	2201      	movs	r2, #1
 8001776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	193b      	adds	r3, r7, r4
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	193b      	adds	r3, r7, r4
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001784:	193b      	adds	r3, r7, r4
 8001786:	4a19      	ldr	r2, [pc, #100]	; (80017ec <MX_GPIO_Init+0x16c>)
 8001788:	0019      	movs	r1, r3
 800178a:	0010      	movs	r0, r2
 800178c:	f001 fbf6 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXT_Pin CM4_3V3_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXT_Pin|CM4_3V3_Pin;
 8001790:	0021      	movs	r1, r4
 8001792:	187b      	adds	r3, r7, r1
 8001794:	2281      	movs	r2, #129	; 0x81
 8001796:	0052      	lsls	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179a:	000c      	movs	r4, r1
 800179c:	193b      	adds	r3, r7, r4
 800179e:	2200      	movs	r2, #0
 80017a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	193b      	adds	r3, r7, r4
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a8:	193b      	adds	r3, r7, r4
 80017aa:	4a10      	ldr	r2, [pc, #64]	; (80017ec <MX_GPIO_Init+0x16c>)
 80017ac:	0019      	movs	r1, r3
 80017ae:	0010      	movs	r0, r2
 80017b0:	f001 fbe4 	bl	8002f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_CM4_Pin */
  GPIO_InitStruct.Pin = ENABLE_CM4_Pin;
 80017b4:	0021      	movs	r1, r4
 80017b6:	187b      	adds	r3, r7, r1
 80017b8:	2240      	movs	r2, #64	; 0x40
 80017ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	2201      	movs	r2, #1
 80017c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	2202      	movs	r2, #2
 80017c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENABLE_CM4_GPIO_Port, &GPIO_InitStruct);
 80017ce:	187b      	adds	r3, r7, r1
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <MX_GPIO_Init+0x170>)
 80017d2:	0019      	movs	r1, r3
 80017d4:	0010      	movs	r0, r2
 80017d6:	f001 fbd1 	bl	8002f7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	46bd      	mov	sp, r7
 80017de:	b009      	add	sp, #36	; 0x24
 80017e0:	bd90      	pop	{r4, r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	40021000 	.word	0x40021000
 80017e8:	00008004 	.word	0x00008004
 80017ec:	50000400 	.word	0x50000400
 80017f0:	50000800 	.word	0x50000800

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fc:	e7fe      	b.n	80017fc <Error_Handler+0x8>
	...

08001800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <HAL_MspInit+0x44>)
 8001808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <HAL_MspInit+0x44>)
 800180c:	2101      	movs	r1, #1
 800180e:	430a      	orrs	r2, r1
 8001810:	641a      	str	r2, [r3, #64]	; 0x40
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <HAL_MspInit+0x44>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	2201      	movs	r2, #1
 8001818:	4013      	ands	r3, r2
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_MspInit+0x44>)
 8001820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <HAL_MspInit+0x44>)
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	0549      	lsls	r1, r1, #21
 8001828:	430a      	orrs	r2, r1
 800182a:	63da      	str	r2, [r3, #60]	; 0x3c
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_MspInit+0x44>)
 800182e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	055b      	lsls	r3, r3, #21
 8001834:	4013      	ands	r3, r2
 8001836:	603b      	str	r3, [r7, #0]
 8001838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	46bd      	mov	sp, r7
 800183e:	b002      	add	sp, #8
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	40021000 	.word	0x40021000

08001848 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b08b      	sub	sp, #44	; 0x2c
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	2414      	movs	r4, #20
 8001852:	193b      	adds	r3, r7, r4
 8001854:	0018      	movs	r0, r3
 8001856:	2314      	movs	r3, #20
 8001858:	001a      	movs	r2, r3
 800185a:	2100      	movs	r1, #0
 800185c:	f006 fcba 	bl	80081d4 <memset>
  if(hadc->Instance==ADC1)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <HAL_ADC_MspInit+0x80>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d129      	bne.n	80018be <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800186a:	4b18      	ldr	r3, [pc, #96]	; (80018cc <HAL_ADC_MspInit+0x84>)
 800186c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800186e:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_ADC_MspInit+0x84>)
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	0349      	lsls	r1, r1, #13
 8001874:	430a      	orrs	r2, r1
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_ADC_MspInit+0x84>)
 800187a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	035b      	lsls	r3, r3, #13
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_ADC_MspInit+0x84>)
 8001888:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_ADC_MspInit+0x84>)
 800188c:	2101      	movs	r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	635a      	str	r2, [r3, #52]	; 0x34
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_ADC_MspInit+0x84>)
 8001894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001896:	2201      	movs	r2, #1
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 800189e:	193b      	adds	r3, r7, r4
 80018a0:	220b      	movs	r2, #11
 80018a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018a4:	193b      	adds	r3, r7, r4
 80018a6:	2203      	movs	r2, #3
 80018a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	193b      	adds	r3, r7, r4
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	193a      	adds	r2, r7, r4
 80018b2:	23a0      	movs	r3, #160	; 0xa0
 80018b4:	05db      	lsls	r3, r3, #23
 80018b6:	0011      	movs	r1, r2
 80018b8:	0018      	movs	r0, r3
 80018ba:	f001 fb5f 	bl	8002f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46bd      	mov	sp, r7
 80018c2:	b00b      	add	sp, #44	; 0x2c
 80018c4:	bd90      	pop	{r4, r7, pc}
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	40012400 	.word	0x40012400
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b097      	sub	sp, #92	; 0x5c
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	2344      	movs	r3, #68	; 0x44
 80018da:	18fb      	adds	r3, r7, r3
 80018dc:	0018      	movs	r0, r3
 80018de:	2314      	movs	r3, #20
 80018e0:	001a      	movs	r2, r3
 80018e2:	2100      	movs	r1, #0
 80018e4:	f006 fc76 	bl	80081d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e8:	241c      	movs	r4, #28
 80018ea:	193b      	adds	r3, r7, r4
 80018ec:	0018      	movs	r0, r3
 80018ee:	2328      	movs	r3, #40	; 0x28
 80018f0:	001a      	movs	r2, r3
 80018f2:	2100      	movs	r1, #0
 80018f4:	f006 fc6e 	bl	80081d4 <memset>
  if(hi2c->Instance==I2C1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a46      	ldr	r2, [pc, #280]	; (8001a18 <HAL_I2C_MspInit+0x148>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d146      	bne.n	8001990 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001902:	193b      	adds	r3, r7, r4
 8001904:	2220      	movs	r2, #32
 8001906:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001908:	193b      	adds	r3, r7, r4
 800190a:	2200      	movs	r2, #0
 800190c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190e:	193b      	adds	r3, r7, r4
 8001910:	0018      	movs	r0, r3
 8001912:	f003 fe0d 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 8001916:	1e03      	subs	r3, r0, #0
 8001918:	d001      	beq.n	800191e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800191a:	f7ff ff6b 	bl	80017f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	4b3f      	ldr	r3, [pc, #252]	; (8001a1c <HAL_I2C_MspInit+0x14c>)
 8001920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001922:	4b3e      	ldr	r3, [pc, #248]	; (8001a1c <HAL_I2C_MspInit+0x14c>)
 8001924:	2102      	movs	r1, #2
 8001926:	430a      	orrs	r2, r1
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
 800192a:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <HAL_I2C_MspInit+0x14c>)
 800192c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800192e:	2202      	movs	r2, #2
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
 8001934:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001936:	2144      	movs	r1, #68	; 0x44
 8001938:	187b      	adds	r3, r7, r1
 800193a:	22c0      	movs	r2, #192	; 0xc0
 800193c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800193e:	187b      	adds	r3, r7, r1
 8001940:	2212      	movs	r2, #18
 8001942:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	187b      	adds	r3, r7, r1
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	187b      	adds	r3, r7, r1
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001950:	187b      	adds	r3, r7, r1
 8001952:	2206      	movs	r2, #6
 8001954:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001956:	187b      	adds	r3, r7, r1
 8001958:	4a31      	ldr	r2, [pc, #196]	; (8001a20 <HAL_I2C_MspInit+0x150>)
 800195a:	0019      	movs	r1, r3
 800195c:	0010      	movs	r0, r2
 800195e:	f001 fb0d 	bl	8002f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001962:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <HAL_I2C_MspInit+0x14c>)
 8001964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001966:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <HAL_I2C_MspInit+0x14c>)
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	0389      	lsls	r1, r1, #14
 800196c:	430a      	orrs	r2, r1
 800196e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001970:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_I2C_MspInit+0x14c>)
 8001972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	039b      	lsls	r3, r3, #14
 8001978:	4013      	ands	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
 8001980:	2100      	movs	r1, #0
 8001982:	2017      	movs	r0, #23
 8001984:	f001 f800 	bl	8002988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8001988:	2017      	movs	r0, #23
 800198a:	f001 f812 	bl	80029b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800198e:	e03e      	b.n	8001a0e <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a23      	ldr	r2, [pc, #140]	; (8001a24 <HAL_I2C_MspInit+0x154>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d139      	bne.n	8001a0e <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <HAL_I2C_MspInit+0x14c>)
 800199c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199e:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <HAL_I2C_MspInit+0x14c>)
 80019a0:	2101      	movs	r1, #1
 80019a2:	430a      	orrs	r2, r1
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34
 80019a6:	4b1d      	ldr	r3, [pc, #116]	; (8001a1c <HAL_I2C_MspInit+0x14c>)
 80019a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019aa:	2201      	movs	r2, #1
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019b2:	2144      	movs	r1, #68	; 0x44
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	22c0      	movs	r2, #192	; 0xc0
 80019b8:	0152      	lsls	r2, r2, #5
 80019ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019bc:	187b      	adds	r3, r7, r1
 80019be:	2212      	movs	r2, #18
 80019c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	187b      	adds	r3, r7, r1
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	187b      	adds	r3, r7, r1
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80019ce:	187b      	adds	r3, r7, r1
 80019d0:	2206      	movs	r2, #6
 80019d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d4:	187a      	adds	r2, r7, r1
 80019d6:	23a0      	movs	r3, #160	; 0xa0
 80019d8:	05db      	lsls	r3, r3, #23
 80019da:	0011      	movs	r1, r2
 80019dc:	0018      	movs	r0, r3
 80019de:	f001 facd 	bl	8002f7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_I2C_MspInit+0x14c>)
 80019e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_I2C_MspInit+0x14c>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	03c9      	lsls	r1, r1, #15
 80019ec:	430a      	orrs	r2, r1
 80019ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_I2C_MspInit+0x14c>)
 80019f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	03db      	lsls	r3, r3, #15
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2018      	movs	r0, #24
 8001a04:	f000 ffc0 	bl	8002988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8001a08:	2018      	movs	r0, #24
 8001a0a:	f000 ffd2 	bl	80029b2 <HAL_NVIC_EnableIRQ>
}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b017      	add	sp, #92	; 0x5c
 8001a14:	bd90      	pop	{r4, r7, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	40005400 	.word	0x40005400
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	50000400 	.word	0x50000400
 8001a24:	40005800 	.word	0x40005800

08001a28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a28:	b590      	push	{r4, r7, lr}
 8001a2a:	b091      	sub	sp, #68	; 0x44
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a30:	2418      	movs	r4, #24
 8001a32:	193b      	adds	r3, r7, r4
 8001a34:	0018      	movs	r0, r3
 8001a36:	2328      	movs	r3, #40	; 0x28
 8001a38:	001a      	movs	r2, r3
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	f006 fbca 	bl	80081d4 <memset>
  if(htim_pwm->Instance==TIM1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a4e      	ldr	r2, [pc, #312]	; (8001b80 <HAL_TIM_PWM_MspInit+0x158>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d11d      	bne.n	8001a86 <HAL_TIM_PWM_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001a4a:	193b      	adds	r3, r7, r4
 8001a4c:	2280      	movs	r2, #128	; 0x80
 8001a4e:	0392      	lsls	r2, r2, #14
 8001a50:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001a52:	193b      	adds	r3, r7, r4
 8001a54:	2200      	movs	r2, #0
 8001a56:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a58:	193b      	adds	r3, r7, r4
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f003 fd68 	bl	8005530 <HAL_RCCEx_PeriphCLKConfig>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_TIM_PWM_MspInit+0x40>
    {
      Error_Handler();
 8001a64:	f7ff fec6 	bl	80017f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a68:	4b46      	ldr	r3, [pc, #280]	; (8001b84 <HAL_TIM_PWM_MspInit+0x15c>)
 8001a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a6c:	4b45      	ldr	r3, [pc, #276]	; (8001b84 <HAL_TIM_PWM_MspInit+0x15c>)
 8001a6e:	2180      	movs	r1, #128	; 0x80
 8001a70:	0109      	lsls	r1, r1, #4
 8001a72:	430a      	orrs	r2, r1
 8001a74:	641a      	str	r2, [r3, #64]	; 0x40
 8001a76:	4b43      	ldr	r3, [pc, #268]	; (8001b84 <HAL_TIM_PWM_MspInit+0x15c>)
 8001a78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	4013      	ands	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a84:	e077      	b.n	8001b76 <HAL_TIM_PWM_MspInit+0x14e>
  else if(htim_pwm->Instance==TIM2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	05db      	lsls	r3, r3, #23
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d136      	bne.n	8001b00 <HAL_TIM_PWM_MspInit+0xd8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a92:	4b3c      	ldr	r3, [pc, #240]	; (8001b84 <HAL_TIM_PWM_MspInit+0x15c>)
 8001a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a96:	4b3b      	ldr	r3, [pc, #236]	; (8001b84 <HAL_TIM_PWM_MspInit+0x15c>)
 8001a98:	2101      	movs	r1, #1
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a9e:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <HAL_TIM_PWM_MspInit+0x15c>)
 8001aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_ch1.Instance = DMA1_Channel2;
 8001aaa:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <HAL_TIM_PWM_MspInit+0x160>)
 8001aac:	4a37      	ldr	r2, [pc, #220]	; (8001b8c <HAL_TIM_PWM_MspInit+0x164>)
 8001aae:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001ab0:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <HAL_TIM_PWM_MspInit+0x160>)
 8001ab2:	221a      	movs	r2, #26
 8001ab4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ab6:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <HAL_TIM_PWM_MspInit+0x160>)
 8001ab8:	2210      	movs	r2, #16
 8001aba:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001abc:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_TIM_PWM_MspInit+0x160>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ac2:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_TIM_PWM_MspInit+0x160>)
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_TIM_PWM_MspInit+0x160>)
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ad0:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_TIM_PWM_MspInit+0x160>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001ad6:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <HAL_TIM_PWM_MspInit+0x160>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001adc:	4b2a      	ldr	r3, [pc, #168]	; (8001b88 <HAL_TIM_PWM_MspInit+0x160>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001ae2:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <HAL_TIM_PWM_MspInit+0x160>)
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f000 ff81 	bl	80029ec <HAL_DMA_Init>
 8001aea:	1e03      	subs	r3, r0, #0
 8001aec:	d001      	beq.n	8001af2 <HAL_TIM_PWM_MspInit+0xca>
      Error_Handler();
 8001aee:	f7ff fe81 	bl	80017f4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a24      	ldr	r2, [pc, #144]	; (8001b88 <HAL_TIM_PWM_MspInit+0x160>)
 8001af6:	625a      	str	r2, [r3, #36]	; 0x24
 8001af8:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <HAL_TIM_PWM_MspInit+0x160>)
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001afe:	e03a      	b.n	8001b76 <HAL_TIM_PWM_MspInit+0x14e>
  else if(htim_pwm->Instance==TIM3)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <HAL_TIM_PWM_MspInit+0x168>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d135      	bne.n	8001b76 <HAL_TIM_PWM_MspInit+0x14e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <HAL_TIM_PWM_MspInit+0x15c>)
 8001b0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <HAL_TIM_PWM_MspInit+0x15c>)
 8001b10:	2102      	movs	r1, #2
 8001b12:	430a      	orrs	r2, r1
 8001b14:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_TIM_PWM_MspInit+0x15c>)
 8001b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_ch1.Instance = DMA1_Channel1;
 8001b22:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <HAL_TIM_PWM_MspInit+0x16c>)
 8001b24:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <HAL_TIM_PWM_MspInit+0x170>)
 8001b26:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <HAL_TIM_PWM_MspInit+0x16c>)
 8001b2a:	2220      	movs	r2, #32
 8001b2c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_TIM_PWM_MspInit+0x16c>)
 8001b30:	2210      	movs	r2, #16
 8001b32:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_TIM_PWM_MspInit+0x16c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b3a:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <HAL_TIM_PWM_MspInit+0x16c>)
 8001b3c:	2280      	movs	r2, #128	; 0x80
 8001b3e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <HAL_TIM_PWM_MspInit+0x16c>)
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	0052      	lsls	r2, r2, #1
 8001b46:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_TIM_PWM_MspInit+0x16c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_TIM_PWM_MspInit+0x16c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <HAL_TIM_PWM_MspInit+0x16c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_TIM_PWM_MspInit+0x16c>)
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f000 ff45 	bl	80029ec <HAL_DMA_Init>
 8001b62:	1e03      	subs	r3, r0, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_TIM_PWM_MspInit+0x142>
      Error_Handler();
 8001b66:	f7ff fe45 	bl	80017f4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a09      	ldr	r2, [pc, #36]	; (8001b94 <HAL_TIM_PWM_MspInit+0x16c>)
 8001b6e:	625a      	str	r2, [r3, #36]	; 0x24
 8001b70:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <HAL_TIM_PWM_MspInit+0x16c>)
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b76:	46c0      	nop			; (mov r8, r8)
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b011      	add	sp, #68	; 0x44
 8001b7c:	bd90      	pop	{r4, r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	20000218 	.word	0x20000218
 8001b8c:	4002001c 	.word	0x4002001c
 8001b90:	40000400 	.word	0x40000400
 8001b94:	20000274 	.word	0x20000274
 8001b98:	40020008 	.word	0x40020008

08001b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b08b      	sub	sp, #44	; 0x2c
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	2414      	movs	r4, #20
 8001ba6:	193b      	adds	r3, r7, r4
 8001ba8:	0018      	movs	r0, r3
 8001baa:	2314      	movs	r3, #20
 8001bac:	001a      	movs	r2, r3
 8001bae:	2100      	movs	r1, #0
 8001bb0:	f006 fb10 	bl	80081d4 <memset>
  if(htim->Instance==TIM1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a3d      	ldr	r2, [pc, #244]	; (8001cb0 <HAL_TIM_MspPostInit+0x114>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d122      	bne.n	8001c04 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bbe:	4b3d      	ldr	r3, [pc, #244]	; (8001cb4 <HAL_TIM_MspPostInit+0x118>)
 8001bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <HAL_TIM_MspPostInit+0x118>)
 8001bc4:	2102      	movs	r1, #2
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <HAL_TIM_MspPostInit+0x118>)
 8001bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bd6:	0021      	movs	r1, r4
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	2208      	movs	r2, #8
 8001bdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	187b      	adds	r3, r7, r1
 8001be0:	2202      	movs	r2, #2
 8001be2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	187b      	adds	r3, r7, r1
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bf0:	187b      	adds	r3, r7, r1
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	187b      	adds	r3, r7, r1
 8001bf8:	4a2f      	ldr	r2, [pc, #188]	; (8001cb8 <HAL_TIM_MspPostInit+0x11c>)
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	0010      	movs	r0, r2
 8001bfe:	f001 f9bd 	bl	8002f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c02:	e050      	b.n	8001ca6 <HAL_TIM_MspPostInit+0x10a>
  else if(htim->Instance==TIM2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	05db      	lsls	r3, r3, #23
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d123      	bne.n	8001c58 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c10:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <HAL_TIM_MspPostInit+0x118>)
 8001c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_TIM_MspPostInit+0x118>)
 8001c16:	2101      	movs	r1, #1
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	635a      	str	r2, [r3, #52]	; 0x34
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <HAL_TIM_MspPostInit+0x118>)
 8001c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c20:	2201      	movs	r2, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
 8001c26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c28:	2114      	movs	r1, #20
 8001c2a:	187b      	adds	r3, r7, r1
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	2202      	movs	r2, #2
 8001c34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c36:	187b      	adds	r3, r7, r1
 8001c38:	2202      	movs	r2, #2
 8001c3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	2200      	movs	r2, #0
 8001c40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	2202      	movs	r2, #2
 8001c46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c48:	187a      	adds	r2, r7, r1
 8001c4a:	23a0      	movs	r3, #160	; 0xa0
 8001c4c:	05db      	lsls	r3, r3, #23
 8001c4e:	0011      	movs	r1, r2
 8001c50:	0018      	movs	r0, r3
 8001c52:	f001 f993 	bl	8002f7c <HAL_GPIO_Init>
}
 8001c56:	e026      	b.n	8001ca6 <HAL_TIM_MspPostInit+0x10a>
  else if(htim->Instance==TIM3)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a17      	ldr	r2, [pc, #92]	; (8001cbc <HAL_TIM_MspPostInit+0x120>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d121      	bne.n	8001ca6 <HAL_TIM_MspPostInit+0x10a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_TIM_MspPostInit+0x118>)
 8001c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <HAL_TIM_MspPostInit+0x118>)
 8001c68:	2102      	movs	r1, #2
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_TIM_MspPostInit+0x118>)
 8001c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c7a:	2114      	movs	r1, #20
 8001c7c:	187b      	adds	r3, r7, r1
 8001c7e:	2210      	movs	r2, #16
 8001c80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	2202      	movs	r2, #2
 8001c86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	187b      	adds	r3, r7, r1
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	2201      	movs	r2, #1
 8001c98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9a:	187b      	adds	r3, r7, r1
 8001c9c:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <HAL_TIM_MspPostInit+0x11c>)
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	0010      	movs	r0, r2
 8001ca2:	f001 f96b 	bl	8002f7c <HAL_GPIO_Init>
}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b00b      	add	sp, #44	; 0x2c
 8001cac:	bd90      	pop	{r4, r7, pc}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	40012c00 	.word	0x40012c00
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	50000400 	.word	0x50000400
 8001cbc:	40000400 	.word	0x40000400

08001cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <NMI_Handler+0x4>

08001cc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <HardFault_Handler+0x4>

08001ccc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce4:	f000 f8e6 	bl	8001eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce8:	46c0      	nop			; (mov r8, r8)
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
	...

08001cf0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <DMA1_Channel1_IRQHandler+0x14>)
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f000 fff2 	bl	8002ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	20000274 	.word	0x20000274

08001d08 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <DMA1_Channel2_3_IRQHandler+0x14>)
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 ffe6 	bl	8002ce0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001d14:	46c0      	nop			; (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	20000218 	.word	0x20000218

08001d20 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <I2C1_IRQHandler+0x2c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699a      	ldr	r2, [r3, #24]
 8001d2a:	23e0      	movs	r3, #224	; 0xe0
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d004      	beq.n	8001d3c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <I2C1_IRQHandler+0x2c>)
 8001d34:	0018      	movs	r0, r3
 8001d36:	f001 fd2f 	bl	8003798 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001d3a:	e003      	b.n	8001d44 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <I2C1_IRQHandler+0x2c>)
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f001 fd10 	bl	8003764 <HAL_I2C_EV_IRQHandler>
}
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	2000008c 	.word	0x2000008c

08001d50 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <I2C2_IRQHandler+0x2c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	23e0      	movs	r3, #224	; 0xe0
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d004      	beq.n	8001d6c <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <I2C2_IRQHandler+0x2c>)
 8001d64:	0018      	movs	r0, r3
 8001d66:	f001 fd17 	bl	8003798 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8001d6a:	e003      	b.n	8001d74 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <I2C2_IRQHandler+0x2c>)
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f001 fcf8 	bl	8003764 <HAL_I2C_EV_IRQHandler>
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	200000e0 	.word	0x200000e0

08001d80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d8c:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d90:	f7ff fff6 	bl	8001d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d94:	480c      	ldr	r0, [pc, #48]	; (8001dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d96:	490d      	ldr	r1, [pc, #52]	; (8001dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d98:	4a0d      	ldr	r2, [pc, #52]	; (8001dd0 <LoopForever+0xe>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d9c:	e002      	b.n	8001da4 <LoopCopyDataInit>

08001d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da2:	3304      	adds	r3, #4

08001da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da8:	d3f9      	bcc.n	8001d9e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001daa:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dac:	4c0a      	ldr	r4, [pc, #40]	; (8001dd8 <LoopForever+0x16>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db0:	e001      	b.n	8001db6 <LoopFillZerobss>

08001db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db4:	3204      	adds	r2, #4

08001db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db8:	d3fb      	bcc.n	8001db2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001dba:	f006 fa13 	bl	80081e4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001dbe:	f7ff f967 	bl	8001090 <main>

08001dc2 <LoopForever>:

LoopForever:
  b LoopForever
 8001dc2:	e7fe      	b.n	8001dc2 <LoopForever>
  ldr   r0, =_estack
 8001dc4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001dd0:	08008374 	.word	0x08008374
  ldr r2, =_sbss
 8001dd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001dd8:	20000b68 	.word	0x20000b68

08001ddc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC1_IRQHandler>
	...

08001de0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001de6:	1dfb      	adds	r3, r7, #7
 8001de8:	2200      	movs	r2, #0
 8001dea:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_Init+0x3c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <HAL_Init+0x3c>)
 8001df2:	2180      	movs	r1, #128	; 0x80
 8001df4:	0049      	lsls	r1, r1, #1
 8001df6:	430a      	orrs	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dfa:	2003      	movs	r0, #3
 8001dfc:	f000 f810 	bl	8001e20 <HAL_InitTick>
 8001e00:	1e03      	subs	r3, r0, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001e04:	1dfb      	adds	r3, r7, #7
 8001e06:	2201      	movs	r2, #1
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e001      	b.n	8001e10 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001e0c:	f7ff fcf8 	bl	8001800 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e10:	1dfb      	adds	r3, r7, #7
 8001e12:	781b      	ldrb	r3, [r3, #0]
}
 8001e14:	0018      	movs	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	b002      	add	sp, #8
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40022000 	.word	0x40022000

08001e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b590      	push	{r4, r7, lr}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e28:	230f      	movs	r3, #15
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001e30:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <HAL_InitTick+0x88>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d02b      	beq.n	8001e90 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001e38:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <HAL_InitTick+0x8c>)
 8001e3a:	681c      	ldr	r4, [r3, #0]
 8001e3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ea8 <HAL_InitTick+0x88>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	0019      	movs	r1, r3
 8001e42:	23fa      	movs	r3, #250	; 0xfa
 8001e44:	0098      	lsls	r0, r3, #2
 8001e46:	f7fe f95d 	bl	8000104 <__udivsi3>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	0020      	movs	r0, r4
 8001e50:	f7fe f958 	bl	8000104 <__udivsi3>
 8001e54:	0003      	movs	r3, r0
 8001e56:	0018      	movs	r0, r3
 8001e58:	f000 fdbb 	bl	80029d2 <HAL_SYSTICK_Config>
 8001e5c:	1e03      	subs	r3, r0, #0
 8001e5e:	d112      	bne.n	8001e86 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d80a      	bhi.n	8001e7c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	2301      	movs	r3, #1
 8001e6a:	425b      	negs	r3, r3
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 fd8a 	bl	8002988 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_InitTick+0x90>)
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	e00d      	b.n	8001e98 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e7c:	230f      	movs	r3, #15
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
 8001e84:	e008      	b.n	8001e98 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e86:	230f      	movs	r3, #15
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
 8001e8e:	e003      	b.n	8001e98 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e90:	230f      	movs	r3, #15
 8001e92:	18fb      	adds	r3, r7, r3
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e98:	230f      	movs	r3, #15
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	781b      	ldrb	r3, [r3, #0]
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b005      	add	sp, #20
 8001ea4:	bd90      	pop	{r4, r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	20000008 	.word	0x20000008
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	20000004 	.word	0x20000004

08001eb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_IncTick+0x1c>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	001a      	movs	r2, r3
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_IncTick+0x20>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	18d2      	adds	r2, r2, r3
 8001ec4:	4b03      	ldr	r3, [pc, #12]	; (8001ed4 <HAL_IncTick+0x20>)
 8001ec6:	601a      	str	r2, [r3, #0]
}
 8001ec8:	46c0      	nop			; (mov r8, r8)
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	46c0      	nop			; (mov r8, r8)
 8001ed0:	20000008 	.word	0x20000008
 8001ed4:	200002d0 	.word	0x200002d0

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b02      	ldr	r3, [pc, #8]	; (8001ee8 <HAL_GetTick+0x10>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	200002d0 	.word	0x200002d0

08001eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef4:	f7ff fff0 	bl	8001ed8 <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3301      	adds	r3, #1
 8001f04:	d005      	beq.n	8001f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f06:	4b0a      	ldr	r3, [pc, #40]	; (8001f30 <HAL_Delay+0x44>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	001a      	movs	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	189b      	adds	r3, r3, r2
 8001f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	f7ff ffe0 	bl	8001ed8 <HAL_GetTick>
 8001f18:	0002      	movs	r2, r0
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d8f7      	bhi.n	8001f14 <HAL_Delay+0x28>
  {
  }
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b004      	add	sp, #16
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	20000008 	.word	0x20000008

08001f34 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001f44:	401a      	ands	r2, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	601a      	str	r2, [r3, #0]
}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b002      	add	sp, #8
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	fe3fffff 	.word	0xfe3fffff

08001f5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	23e0      	movs	r3, #224	; 0xe0
 8001f6a:	045b      	lsls	r3, r3, #17
 8001f6c:	4013      	ands	r3, r2
}
 8001f6e:	0018      	movs	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b002      	add	sp, #8
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	2104      	movs	r1, #4
 8001f8a:	400a      	ands	r2, r1
 8001f8c:	2107      	movs	r1, #7
 8001f8e:	4091      	lsls	r1, r2
 8001f90:	000a      	movs	r2, r1
 8001f92:	43d2      	mvns	r2, r2
 8001f94:	401a      	ands	r2, r3
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2104      	movs	r1, #4
 8001f9a:	400b      	ands	r3, r1
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4099      	lsls	r1, r3
 8001fa0:	000b      	movs	r3, r1
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b004      	add	sp, #16
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	2107      	movs	r1, #7
 8001fc6:	4091      	lsls	r1, r2
 8001fc8:	000a      	movs	r2, r1
 8001fca:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2104      	movs	r1, #4
 8001fd0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001fd2:	40da      	lsrs	r2, r3
 8001fd4:	0013      	movs	r3, r2
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	211f      	movs	r1, #31
 8001ff2:	400a      	ands	r2, r1
 8001ff4:	210f      	movs	r1, #15
 8001ff6:	4091      	lsls	r1, r2
 8001ff8:	000a      	movs	r2, r1
 8001ffa:	43d2      	mvns	r2, r2
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	210f      	movs	r1, #15
 8002004:	4019      	ands	r1, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	201f      	movs	r0, #31
 800200a:	4003      	ands	r3, r0
 800200c:	4099      	lsls	r1, r3
 800200e:	000b      	movs	r3, r1
 8002010:	431a      	orrs	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	b004      	add	sp, #16
 800201c:	bd80      	pop	{r7, pc}

0800201e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	035b      	lsls	r3, r3, #13
 8002030:	0b5b      	lsrs	r3, r3, #13
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}

08002040 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	0352      	lsls	r2, r2, #13
 8002052:	0b52      	lsrs	r2, r2, #13
 8002054:	43d2      	mvns	r2, r2
 8002056:	401a      	ands	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b002      	add	sp, #8
 8002062:	bd80      	pop	{r7, pc}

08002064 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	0212      	lsls	r2, r2, #8
 8002078:	43d2      	mvns	r2, r2
 800207a:	401a      	ands	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	400b      	ands	r3, r1
 8002084:	4904      	ldr	r1, [pc, #16]	; (8002098 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002086:	400b      	ands	r3, r1
 8002088:	431a      	orrs	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	46bd      	mov	sp, r7
 8002092:	b004      	add	sp, #16
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	07ffff00 	.word	0x07ffff00

0800209c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	0552      	lsls	r2, r2, #21
 80020b0:	431a      	orrs	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	6fffffe8 	.word	0x6fffffe8

080020c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	055b      	lsls	r3, r3, #21
 80020d4:	401a      	ands	r2, r3
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	055b      	lsls	r3, r3, #21
 80020da:	429a      	cmp	r2, r3
 80020dc:	d101      	bne.n	80020e2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80020de:	2301      	movs	r3, #1
 80020e0:	e000      	b.n	80020e4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b002      	add	sp, #8
 80020ea:	bd80      	pop	{r7, pc}

080020ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2201      	movs	r2, #1
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <LL_ADC_IsEnabled+0x18>
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <LL_ADC_IsEnabled+0x1a>
 8002104:	2300      	movs	r3, #0
}
 8002106:	0018      	movs	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	b002      	add	sp, #8
 800210c:	bd80      	pop	{r7, pc}

0800210e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2204      	movs	r2, #4
 800211c:	4013      	ands	r3, r2
 800211e:	2b04      	cmp	r3, #4
 8002120:	d101      	bne.n	8002126 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002122:	2301      	movs	r3, #1
 8002124:	e000      	b.n	8002128 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002126:	2300      	movs	r3, #0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b002      	add	sp, #8
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002138:	231f      	movs	r3, #31
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e17f      	b.n	8002456 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	0018      	movs	r0, r3
 8002162:	f7ff fb71 	bl	8001848 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2254      	movs	r2, #84	; 0x54
 8002170:	2100      	movs	r1, #0
 8002172:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0018      	movs	r0, r3
 800217a:	f7ff ffa3 	bl	80020c4 <LL_ADC_IsInternalRegulatorEnabled>
 800217e:	1e03      	subs	r3, r0, #0
 8002180:	d115      	bne.n	80021ae <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	0018      	movs	r0, r3
 8002188:	f7ff ff88 	bl	800209c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800218c:	4bb4      	ldr	r3, [pc, #720]	; (8002460 <HAL_ADC_Init+0x330>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	49b4      	ldr	r1, [pc, #720]	; (8002464 <HAL_ADC_Init+0x334>)
 8002192:	0018      	movs	r0, r3
 8002194:	f7fd ffb6 	bl	8000104 <__udivsi3>
 8002198:	0003      	movs	r3, r0
 800219a:	3301      	adds	r3, #1
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021a0:	e002      	b.n	80021a8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f9      	bne.n	80021a2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f7ff ff86 	bl	80020c4 <LL_ADC_IsInternalRegulatorEnabled>
 80021b8:	1e03      	subs	r3, r0, #0
 80021ba:	d10f      	bne.n	80021dc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	2210      	movs	r2, #16
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021cc:	2201      	movs	r2, #1
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021d4:	231f      	movs	r3, #31
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f7ff ff94 	bl	800210e <LL_ADC_REG_IsConversionOngoing>
 80021e6:	0003      	movs	r3, r0
 80021e8:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	2210      	movs	r2, #16
 80021f0:	4013      	ands	r3, r2
 80021f2:	d000      	beq.n	80021f6 <HAL_ADC_Init+0xc6>
 80021f4:	e122      	b.n	800243c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d000      	beq.n	80021fe <HAL_ADC_Init+0xce>
 80021fc:	e11e      	b.n	800243c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	4a99      	ldr	r2, [pc, #612]	; (8002468 <HAL_ADC_Init+0x338>)
 8002204:	4013      	ands	r3, r2
 8002206:	2202      	movs	r2, #2
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	0018      	movs	r0, r3
 8002214:	f7ff ff6a 	bl	80020ec <LL_ADC_IsEnabled>
 8002218:	1e03      	subs	r3, r0, #0
 800221a:	d000      	beq.n	800221e <HAL_ADC_Init+0xee>
 800221c:	e0ad      	b.n	800237a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7e1b      	ldrb	r3, [r3, #24]
 8002226:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002228:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7e5b      	ldrb	r3, [r3, #25]
 800222e:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002230:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	7e9b      	ldrb	r3, [r3, #26]
 8002236:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002238:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <HAL_ADC_Init+0x118>
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	015b      	lsls	r3, r3, #5
 8002246:	e000      	b.n	800224a <HAL_ADC_Init+0x11a>
 8002248:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800224a:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002250:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	da04      	bge.n	8002264 <HAL_ADC_Init+0x134>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	085b      	lsrs	r3, r3, #1
 8002262:	e001      	b.n	8002268 <HAL_ADC_Init+0x138>
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002268:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	212c      	movs	r1, #44	; 0x2c
 800226e:	5c5b      	ldrb	r3, [r3, r1]
 8002270:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002272:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	5c9b      	ldrb	r3, [r3, r2]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d115      	bne.n	80022b0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7e9b      	ldrb	r3, [r3, #26]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d105      	bne.n	8002298 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	0252      	lsls	r2, r2, #9
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	e00b      	b.n	80022b0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	2220      	movs	r2, #32
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a8:	2201      	movs	r2, #1
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022bc:	23e0      	movs	r3, #224	; 0xe0
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80022c6:	4313      	orrs	r3, r2
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a65      	ldr	r2, [pc, #404]	; (800246c <HAL_ADC_Init+0x33c>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	0f9b      	lsrs	r3, r3, #30
 80022ea:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022f0:	4313      	orrs	r3, r2
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	223c      	movs	r2, #60	; 0x3c
 80022fc:	5c9b      	ldrb	r3, [r3, r2]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d111      	bne.n	8002326 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	0f9b      	lsrs	r3, r3, #30
 8002308:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800230e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002314:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800231a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	4313      	orrs	r3, r2
 8002320:	2201      	movs	r2, #1
 8002322:	4313      	orrs	r3, r2
 8002324:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4a50      	ldr	r2, [pc, #320]	; (8002470 <HAL_ADC_Init+0x340>)
 800232e:	4013      	ands	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	430a      	orrs	r2, r1
 800233a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	23c0      	movs	r3, #192	; 0xc0
 8002342:	061b      	lsls	r3, r3, #24
 8002344:	429a      	cmp	r2, r3
 8002346:	d018      	beq.n	800237a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	05db      	lsls	r3, r3, #23
 8002350:	429a      	cmp	r2, r3
 8002352:	d012      	beq.n	800237a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	061b      	lsls	r3, r3, #24
 800235c:	429a      	cmp	r2, r3
 800235e:	d00c      	beq.n	800237a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002360:	4b44      	ldr	r3, [pc, #272]	; (8002474 <HAL_ADC_Init+0x344>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a44      	ldr	r2, [pc, #272]	; (8002478 <HAL_ADC_Init+0x348>)
 8002366:	4013      	ands	r3, r2
 8002368:	0019      	movs	r1, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	23f0      	movs	r3, #240	; 0xf0
 8002370:	039b      	lsls	r3, r3, #14
 8002372:	401a      	ands	r2, r3
 8002374:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <HAL_ADC_Init+0x344>)
 8002376:	430a      	orrs	r2, r1
 8002378:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002382:	001a      	movs	r2, r3
 8002384:	2100      	movs	r1, #0
 8002386:	f7ff fdf6 	bl	8001f76 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002392:	493a      	ldr	r1, [pc, #232]	; (800247c <HAL_ADC_Init+0x34c>)
 8002394:	001a      	movs	r2, r3
 8002396:	f7ff fdee 	bl	8001f76 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2110      	movs	r1, #16
 80023ae:	4249      	negs	r1, r1
 80023b0:	430a      	orrs	r2, r1
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
 80023b4:	e018      	b.n	80023e8 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691a      	ldr	r2, [r3, #16]
 80023ba:	2380      	movs	r3, #128	; 0x80
 80023bc:	039b      	lsls	r3, r3, #14
 80023be:	429a      	cmp	r2, r3
 80023c0:	d112      	bne.n	80023e8 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	221c      	movs	r2, #28
 80023d2:	4013      	ands	r3, r2
 80023d4:	2210      	movs	r2, #16
 80023d6:	4252      	negs	r2, r2
 80023d8:	409a      	lsls	r2, r3
 80023da:	0011      	movs	r1, r2
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2100      	movs	r1, #0
 80023ee:	0018      	movs	r0, r3
 80023f0:	f7ff fdde 	bl	8001fb0 <LL_ADC_GetSamplingTimeCommonChannels>
 80023f4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d10b      	bne.n	8002416 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002408:	2203      	movs	r2, #3
 800240a:	4393      	bics	r3, r2
 800240c:	2201      	movs	r2, #1
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002414:	e01c      	b.n	8002450 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	2212      	movs	r2, #18
 800241c:	4393      	bics	r3, r2
 800241e:	2210      	movs	r2, #16
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	2201      	movs	r2, #1
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002432:	231f      	movs	r3, #31
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	2201      	movs	r2, #1
 8002438:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800243a:	e009      	b.n	8002450 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	2210      	movs	r2, #16
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002448:	231f      	movs	r3, #31
 800244a:	18fb      	adds	r3, r7, r3
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002450:	231f      	movs	r3, #31
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	781b      	ldrb	r3, [r3, #0]
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	b008      	add	sp, #32
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	20000000 	.word	0x20000000
 8002464:	00030d40 	.word	0x00030d40
 8002468:	fffffefd 	.word	0xfffffefd
 800246c:	fffe0201 	.word	0xfffe0201
 8002470:	1ffffc02 	.word	0x1ffffc02
 8002474:	40012708 	.word	0x40012708
 8002478:	ffc3ffff 	.word	0xffc3ffff
 800247c:	07ffff04 	.word	0x07ffff04

08002480 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800248a:	2317      	movs	r3, #23
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2254      	movs	r2, #84	; 0x54
 800249a:	5c9b      	ldrb	r3, [r3, r2]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x24>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e1c0      	b.n	8002826 <HAL_ADC_ConfigChannel+0x3a6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2254      	movs	r2, #84	; 0x54
 80024a8:	2101      	movs	r1, #1
 80024aa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7ff fe2c 	bl	800210e <LL_ADC_REG_IsConversionOngoing>
 80024b6:	1e03      	subs	r3, r0, #0
 80024b8:	d000      	beq.n	80024bc <HAL_ADC_ConfigChannel+0x3c>
 80024ba:	e1a3      	b.n	8002804 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d100      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x46>
 80024c4:	e143      	b.n	800274e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691a      	ldr	r2, [r3, #16]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	061b      	lsls	r3, r3, #24
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d004      	beq.n	80024dc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80024d6:	4ac1      	ldr	r2, [pc, #772]	; (80027dc <HAL_ADC_ConfigChannel+0x35c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d108      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0019      	movs	r1, r3
 80024e6:	0010      	movs	r0, r2
 80024e8:	f7ff fd99 	bl	800201e <LL_ADC_REG_SetSequencerChAdd>
 80024ec:	e0c9      	b.n	8002682 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	211f      	movs	r1, #31
 80024f8:	400b      	ands	r3, r1
 80024fa:	210f      	movs	r1, #15
 80024fc:	4099      	lsls	r1, r3
 80024fe:	000b      	movs	r3, r1
 8002500:	43db      	mvns	r3, r3
 8002502:	4013      	ands	r3, r2
 8002504:	0019      	movs	r1, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	035b      	lsls	r3, r3, #13
 800250c:	0b5b      	lsrs	r3, r3, #13
 800250e:	d105      	bne.n	800251c <HAL_ADC_ConfigChannel+0x9c>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	0e9b      	lsrs	r3, r3, #26
 8002516:	221f      	movs	r2, #31
 8002518:	4013      	ands	r3, r2
 800251a:	e098      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2201      	movs	r2, #1
 8002522:	4013      	ands	r3, r2
 8002524:	d000      	beq.n	8002528 <HAL_ADC_ConfigChannel+0xa8>
 8002526:	e091      	b.n	800264c <HAL_ADC_ConfigChannel+0x1cc>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2202      	movs	r2, #2
 800252e:	4013      	ands	r3, r2
 8002530:	d000      	beq.n	8002534 <HAL_ADC_ConfigChannel+0xb4>
 8002532:	e089      	b.n	8002648 <HAL_ADC_ConfigChannel+0x1c8>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2204      	movs	r2, #4
 800253a:	4013      	ands	r3, r2
 800253c:	d000      	beq.n	8002540 <HAL_ADC_ConfigChannel+0xc0>
 800253e:	e081      	b.n	8002644 <HAL_ADC_ConfigChannel+0x1c4>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2208      	movs	r2, #8
 8002546:	4013      	ands	r3, r2
 8002548:	d000      	beq.n	800254c <HAL_ADC_ConfigChannel+0xcc>
 800254a:	e079      	b.n	8002640 <HAL_ADC_ConfigChannel+0x1c0>
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2210      	movs	r2, #16
 8002552:	4013      	ands	r3, r2
 8002554:	d000      	beq.n	8002558 <HAL_ADC_ConfigChannel+0xd8>
 8002556:	e071      	b.n	800263c <HAL_ADC_ConfigChannel+0x1bc>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2220      	movs	r2, #32
 800255e:	4013      	ands	r3, r2
 8002560:	d000      	beq.n	8002564 <HAL_ADC_ConfigChannel+0xe4>
 8002562:	e069      	b.n	8002638 <HAL_ADC_ConfigChannel+0x1b8>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2240      	movs	r2, #64	; 0x40
 800256a:	4013      	ands	r3, r2
 800256c:	d000      	beq.n	8002570 <HAL_ADC_ConfigChannel+0xf0>
 800256e:	e061      	b.n	8002634 <HAL_ADC_ConfigChannel+0x1b4>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	4013      	ands	r3, r2
 8002578:	d000      	beq.n	800257c <HAL_ADC_ConfigChannel+0xfc>
 800257a:	e059      	b.n	8002630 <HAL_ADC_ConfigChannel+0x1b0>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4013      	ands	r3, r2
 8002586:	d151      	bne.n	800262c <HAL_ADC_ConfigChannel+0x1ac>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4013      	ands	r3, r2
 8002592:	d149      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x1a8>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4013      	ands	r3, r2
 800259e:	d141      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x1a4>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	4013      	ands	r3, r2
 80025aa:	d139      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x1a0>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	015b      	lsls	r3, r3, #5
 80025b4:	4013      	ands	r3, r2
 80025b6:	d131      	bne.n	800261c <HAL_ADC_ConfigChannel+0x19c>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	019b      	lsls	r3, r3, #6
 80025c0:	4013      	ands	r3, r2
 80025c2:	d129      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x198>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	01db      	lsls	r3, r3, #7
 80025cc:	4013      	ands	r3, r2
 80025ce:	d121      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x194>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	4013      	ands	r3, r2
 80025da:	d119      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x190>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	025b      	lsls	r3, r3, #9
 80025e4:	4013      	ands	r3, r2
 80025e6:	d111      	bne.n	800260c <HAL_ADC_ConfigChannel+0x18c>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	029b      	lsls	r3, r3, #10
 80025f0:	4013      	ands	r3, r2
 80025f2:	d109      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x188>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	02db      	lsls	r3, r3, #11
 80025fc:	4013      	ands	r3, r2
 80025fe:	d001      	beq.n	8002604 <HAL_ADC_ConfigChannel+0x184>
 8002600:	2312      	movs	r3, #18
 8002602:	e024      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 8002604:	2300      	movs	r3, #0
 8002606:	e022      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 8002608:	2311      	movs	r3, #17
 800260a:	e020      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 800260c:	2310      	movs	r3, #16
 800260e:	e01e      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 8002610:	230f      	movs	r3, #15
 8002612:	e01c      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 8002614:	230e      	movs	r3, #14
 8002616:	e01a      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 8002618:	230d      	movs	r3, #13
 800261a:	e018      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 800261c:	230c      	movs	r3, #12
 800261e:	e016      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 8002620:	230b      	movs	r3, #11
 8002622:	e014      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 8002624:	230a      	movs	r3, #10
 8002626:	e012      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 8002628:	2309      	movs	r3, #9
 800262a:	e010      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 800262c:	2308      	movs	r3, #8
 800262e:	e00e      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 8002630:	2307      	movs	r3, #7
 8002632:	e00c      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 8002634:	2306      	movs	r3, #6
 8002636:	e00a      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 8002638:	2305      	movs	r3, #5
 800263a:	e008      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 800263c:	2304      	movs	r3, #4
 800263e:	e006      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 8002640:	2303      	movs	r3, #3
 8002642:	e004      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 8002644:	2302      	movs	r3, #2
 8002646:	e002      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <HAL_ADC_ConfigChannel+0x1ce>
 800264c:	2300      	movs	r3, #0
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	6852      	ldr	r2, [r2, #4]
 8002652:	201f      	movs	r0, #31
 8002654:	4002      	ands	r2, r0
 8002656:	4093      	lsls	r3, r2
 8002658:	000a      	movs	r2, r1
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	1c5a      	adds	r2, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	429a      	cmp	r2, r3
 800266e:	d808      	bhi.n	8002682 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	001a      	movs	r2, r3
 800267e:	f7ff fcae 	bl	8001fde <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6819      	ldr	r1, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	001a      	movs	r2, r3
 8002690:	f7ff fce8 	bl	8002064 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	db00      	blt.n	800269e <HAL_ADC_ConfigChannel+0x21e>
 800269c:	e0bc      	b.n	8002818 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800269e:	4b50      	ldr	r3, [pc, #320]	; (80027e0 <HAL_ADC_ConfigChannel+0x360>)
 80026a0:	0018      	movs	r0, r3
 80026a2:	f7ff fc5b 	bl	8001f5c <LL_ADC_GetCommonPathInternalCh>
 80026a6:	0003      	movs	r3, r0
 80026a8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a4d      	ldr	r2, [pc, #308]	; (80027e4 <HAL_ADC_ConfigChannel+0x364>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d122      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	2380      	movs	r3, #128	; 0x80
 80026b8:	041b      	lsls	r3, r3, #16
 80026ba:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026bc:	d11d      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2280      	movs	r2, #128	; 0x80
 80026c2:	0412      	lsls	r2, r2, #16
 80026c4:	4313      	orrs	r3, r2
 80026c6:	4a46      	ldr	r2, [pc, #280]	; (80027e0 <HAL_ADC_ConfigChannel+0x360>)
 80026c8:	0019      	movs	r1, r3
 80026ca:	0010      	movs	r0, r2
 80026cc:	f7ff fc32 	bl	8001f34 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026d0:	4b45      	ldr	r3, [pc, #276]	; (80027e8 <HAL_ADC_ConfigChannel+0x368>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4945      	ldr	r1, [pc, #276]	; (80027ec <HAL_ADC_ConfigChannel+0x36c>)
 80026d6:	0018      	movs	r0, r3
 80026d8:	f7fd fd14 	bl	8000104 <__udivsi3>
 80026dc:	0003      	movs	r3, r0
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	0013      	movs	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	189b      	adds	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026ea:	e002      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f9      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026f8:	e08e      	b.n	8002818 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a3c      	ldr	r2, [pc, #240]	; (80027f0 <HAL_ADC_ConfigChannel+0x370>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d10e      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	045b      	lsls	r3, r3, #17
 800270a:	4013      	ands	r3, r2
 800270c:	d109      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2280      	movs	r2, #128	; 0x80
 8002712:	0452      	lsls	r2, r2, #17
 8002714:	4313      	orrs	r3, r2
 8002716:	4a32      	ldr	r2, [pc, #200]	; (80027e0 <HAL_ADC_ConfigChannel+0x360>)
 8002718:	0019      	movs	r1, r3
 800271a:	0010      	movs	r0, r2
 800271c:	f7ff fc0a 	bl	8001f34 <LL_ADC_SetCommonPathInternalCh>
 8002720:	e07a      	b.n	8002818 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a33      	ldr	r2, [pc, #204]	; (80027f4 <HAL_ADC_ConfigChannel+0x374>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d000      	beq.n	800272e <HAL_ADC_ConfigChannel+0x2ae>
 800272c:	e074      	b.n	8002818 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	03db      	lsls	r3, r3, #15
 8002734:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002736:	d000      	beq.n	800273a <HAL_ADC_ConfigChannel+0x2ba>
 8002738:	e06e      	b.n	8002818 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2280      	movs	r2, #128	; 0x80
 800273e:	03d2      	lsls	r2, r2, #15
 8002740:	4313      	orrs	r3, r2
 8002742:	4a27      	ldr	r2, [pc, #156]	; (80027e0 <HAL_ADC_ConfigChannel+0x360>)
 8002744:	0019      	movs	r1, r3
 8002746:	0010      	movs	r0, r2
 8002748:	f7ff fbf4 	bl	8001f34 <LL_ADC_SetCommonPathInternalCh>
 800274c:	e064      	b.n	8002818 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	429a      	cmp	r2, r3
 8002758:	d004      	beq.n	8002764 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800275e:	4a1f      	ldr	r2, [pc, #124]	; (80027dc <HAL_ADC_ConfigChannel+0x35c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d107      	bne.n	8002774 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	0019      	movs	r1, r3
 800276e:	0010      	movs	r0, r2
 8002770:	f7ff fc66 	bl	8002040 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	da4d      	bge.n	8002818 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800277c:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_ADC_ConfigChannel+0x360>)
 800277e:	0018      	movs	r0, r3
 8002780:	f7ff fbec 	bl	8001f5c <LL_ADC_GetCommonPathInternalCh>
 8002784:	0003      	movs	r3, r0
 8002786:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a15      	ldr	r2, [pc, #84]	; (80027e4 <HAL_ADC_ConfigChannel+0x364>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d108      	bne.n	80027a4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <HAL_ADC_ConfigChannel+0x378>)
 8002796:	4013      	ands	r3, r2
 8002798:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <HAL_ADC_ConfigChannel+0x360>)
 800279a:	0019      	movs	r1, r3
 800279c:	0010      	movs	r0, r2
 800279e:	f7ff fbc9 	bl	8001f34 <LL_ADC_SetCommonPathInternalCh>
 80027a2:	e039      	b.n	8002818 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a11      	ldr	r2, [pc, #68]	; (80027f0 <HAL_ADC_ConfigChannel+0x370>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d108      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4a12      	ldr	r2, [pc, #72]	; (80027fc <HAL_ADC_ConfigChannel+0x37c>)
 80027b2:	4013      	ands	r3, r2
 80027b4:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <HAL_ADC_ConfigChannel+0x360>)
 80027b6:	0019      	movs	r1, r3
 80027b8:	0010      	movs	r0, r2
 80027ba:	f7ff fbbb 	bl	8001f34 <LL_ADC_SetCommonPathInternalCh>
 80027be:	e02b      	b.n	8002818 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <HAL_ADC_ConfigChannel+0x374>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d126      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <HAL_ADC_ConfigChannel+0x380>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	4a03      	ldr	r2, [pc, #12]	; (80027e0 <HAL_ADC_ConfigChannel+0x360>)
 80027d2:	0019      	movs	r1, r3
 80027d4:	0010      	movs	r0, r2
 80027d6:	f7ff fbad 	bl	8001f34 <LL_ADC_SetCommonPathInternalCh>
 80027da:	e01d      	b.n	8002818 <HAL_ADC_ConfigChannel+0x398>
 80027dc:	80000004 	.word	0x80000004
 80027e0:	40012708 	.word	0x40012708
 80027e4:	b0001000 	.word	0xb0001000
 80027e8:	20000000 	.word	0x20000000
 80027ec:	00030d40 	.word	0x00030d40
 80027f0:	b8004000 	.word	0xb8004000
 80027f4:	b4002000 	.word	0xb4002000
 80027f8:	ff7fffff 	.word	0xff7fffff
 80027fc:	feffffff 	.word	0xfeffffff
 8002800:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	2220      	movs	r2, #32
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002810:	2317      	movs	r3, #23
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	2201      	movs	r2, #1
 8002816:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2254      	movs	r2, #84	; 0x54
 800281c:	2100      	movs	r1, #0
 800281e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002820:	2317      	movs	r3, #23
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	781b      	ldrb	r3, [r3, #0]
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b006      	add	sp, #24
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)

08002830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	0002      	movs	r2, r0
 8002838:	1dfb      	adds	r3, r7, #7
 800283a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b7f      	cmp	r3, #127	; 0x7f
 8002842:	d809      	bhi.n	8002858 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002844:	1dfb      	adds	r3, r7, #7
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	001a      	movs	r2, r3
 800284a:	231f      	movs	r3, #31
 800284c:	401a      	ands	r2, r3
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <__NVIC_EnableIRQ+0x30>)
 8002850:	2101      	movs	r1, #1
 8002852:	4091      	lsls	r1, r2
 8002854:	000a      	movs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b002      	add	sp, #8
 800285e:	bd80      	pop	{r7, pc}
 8002860:	e000e100 	.word	0xe000e100

08002864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	0002      	movs	r2, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	1dfb      	adds	r3, r7, #7
 8002870:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002872:	1dfb      	adds	r3, r7, #7
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b7f      	cmp	r3, #127	; 0x7f
 8002878:	d828      	bhi.n	80028cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800287a:	4a2f      	ldr	r2, [pc, #188]	; (8002938 <__NVIC_SetPriority+0xd4>)
 800287c:	1dfb      	adds	r3, r7, #7
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b25b      	sxtb	r3, r3
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	33c0      	adds	r3, #192	; 0xc0
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	589b      	ldr	r3, [r3, r2]
 800288a:	1dfa      	adds	r2, r7, #7
 800288c:	7812      	ldrb	r2, [r2, #0]
 800288e:	0011      	movs	r1, r2
 8002890:	2203      	movs	r2, #3
 8002892:	400a      	ands	r2, r1
 8002894:	00d2      	lsls	r2, r2, #3
 8002896:	21ff      	movs	r1, #255	; 0xff
 8002898:	4091      	lsls	r1, r2
 800289a:	000a      	movs	r2, r1
 800289c:	43d2      	mvns	r2, r2
 800289e:	401a      	ands	r2, r3
 80028a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	019b      	lsls	r3, r3, #6
 80028a6:	22ff      	movs	r2, #255	; 0xff
 80028a8:	401a      	ands	r2, r3
 80028aa:	1dfb      	adds	r3, r7, #7
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	0018      	movs	r0, r3
 80028b0:	2303      	movs	r3, #3
 80028b2:	4003      	ands	r3, r0
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028b8:	481f      	ldr	r0, [pc, #124]	; (8002938 <__NVIC_SetPriority+0xd4>)
 80028ba:	1dfb      	adds	r3, r7, #7
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	089b      	lsrs	r3, r3, #2
 80028c2:	430a      	orrs	r2, r1
 80028c4:	33c0      	adds	r3, #192	; 0xc0
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028ca:	e031      	b.n	8002930 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <__NVIC_SetPriority+0xd8>)
 80028ce:	1dfb      	adds	r3, r7, #7
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	0019      	movs	r1, r3
 80028d4:	230f      	movs	r3, #15
 80028d6:	400b      	ands	r3, r1
 80028d8:	3b08      	subs	r3, #8
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3306      	adds	r3, #6
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	18d3      	adds	r3, r2, r3
 80028e2:	3304      	adds	r3, #4
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	1dfa      	adds	r2, r7, #7
 80028e8:	7812      	ldrb	r2, [r2, #0]
 80028ea:	0011      	movs	r1, r2
 80028ec:	2203      	movs	r2, #3
 80028ee:	400a      	ands	r2, r1
 80028f0:	00d2      	lsls	r2, r2, #3
 80028f2:	21ff      	movs	r1, #255	; 0xff
 80028f4:	4091      	lsls	r1, r2
 80028f6:	000a      	movs	r2, r1
 80028f8:	43d2      	mvns	r2, r2
 80028fa:	401a      	ands	r2, r3
 80028fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	019b      	lsls	r3, r3, #6
 8002902:	22ff      	movs	r2, #255	; 0xff
 8002904:	401a      	ands	r2, r3
 8002906:	1dfb      	adds	r3, r7, #7
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	0018      	movs	r0, r3
 800290c:	2303      	movs	r3, #3
 800290e:	4003      	ands	r3, r0
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002914:	4809      	ldr	r0, [pc, #36]	; (800293c <__NVIC_SetPriority+0xd8>)
 8002916:	1dfb      	adds	r3, r7, #7
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	001c      	movs	r4, r3
 800291c:	230f      	movs	r3, #15
 800291e:	4023      	ands	r3, r4
 8002920:	3b08      	subs	r3, #8
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	430a      	orrs	r2, r1
 8002926:	3306      	adds	r3, #6
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	18c3      	adds	r3, r0, r3
 800292c:	3304      	adds	r3, #4
 800292e:	601a      	str	r2, [r3, #0]
}
 8002930:	46c0      	nop			; (mov r8, r8)
 8002932:	46bd      	mov	sp, r7
 8002934:	b003      	add	sp, #12
 8002936:	bd90      	pop	{r4, r7, pc}
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	1e5a      	subs	r2, r3, #1
 800294c:	2380      	movs	r3, #128	; 0x80
 800294e:	045b      	lsls	r3, r3, #17
 8002950:	429a      	cmp	r2, r3
 8002952:	d301      	bcc.n	8002958 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002954:	2301      	movs	r3, #1
 8002956:	e010      	b.n	800297a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <SysTick_Config+0x44>)
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	3a01      	subs	r2, #1
 800295e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002960:	2301      	movs	r3, #1
 8002962:	425b      	negs	r3, r3
 8002964:	2103      	movs	r1, #3
 8002966:	0018      	movs	r0, r3
 8002968:	f7ff ff7c 	bl	8002864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <SysTick_Config+0x44>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <SysTick_Config+0x44>)
 8002974:	2207      	movs	r2, #7
 8002976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002978:	2300      	movs	r3, #0
}
 800297a:	0018      	movs	r0, r3
 800297c:	46bd      	mov	sp, r7
 800297e:	b002      	add	sp, #8
 8002980:	bd80      	pop	{r7, pc}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	e000e010 	.word	0xe000e010

08002988 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	210f      	movs	r1, #15
 8002994:	187b      	adds	r3, r7, r1
 8002996:	1c02      	adds	r2, r0, #0
 8002998:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	187b      	adds	r3, r7, r1
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	b25b      	sxtb	r3, r3
 80029a2:	0011      	movs	r1, r2
 80029a4:	0018      	movs	r0, r3
 80029a6:	f7ff ff5d 	bl	8002864 <__NVIC_SetPriority>
}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b004      	add	sp, #16
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	0002      	movs	r2, r0
 80029ba:	1dfb      	adds	r3, r7, #7
 80029bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029be:	1dfb      	adds	r3, r7, #7
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	b25b      	sxtb	r3, r3
 80029c4:	0018      	movs	r0, r3
 80029c6:	f7ff ff33 	bl	8002830 <__NVIC_EnableIRQ>
}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b002      	add	sp, #8
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	0018      	movs	r0, r3
 80029de:	f7ff ffaf 	bl	8002940 <SysTick_Config>
 80029e2:	0003      	movs	r3, r0
}
 80029e4:	0018      	movs	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b002      	add	sp, #8
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d101      	bne.n	80029fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e077      	b.n	8002aee <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a3d      	ldr	r2, [pc, #244]	; (8002af8 <HAL_DMA_Init+0x10c>)
 8002a04:	4694      	mov	ip, r2
 8002a06:	4463      	add	r3, ip
 8002a08:	2114      	movs	r1, #20
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7fd fb7a 	bl	8000104 <__udivsi3>
 8002a10:	0003      	movs	r3, r0
 8002a12:	009a      	lsls	r2, r3, #2
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2225      	movs	r2, #37	; 0x25
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4934      	ldr	r1, [pc, #208]	; (8002afc <HAL_DMA_Init+0x110>)
 8002a2c:	400a      	ands	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689a      	ldr	r2, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 fa37 	bl	8002edc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	01db      	lsls	r3, r3, #7
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d102      	bne.n	8002a80 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	213f      	movs	r1, #63	; 0x3f
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a96:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d011      	beq.n	8002ac4 <HAL_DMA_Init+0xd8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d80d      	bhi.n	8002ac4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 fa42 	bl	8002f34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002ac0:	605a      	str	r2, [r3, #4]
 8002ac2:	e008      	b.n	8002ad6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2225      	movs	r2, #37	; 0x25
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2224      	movs	r2, #36	; 0x24
 8002ae8:	2100      	movs	r1, #0
 8002aea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	0018      	movs	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b002      	add	sp, #8
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	bffdfff8 	.word	0xbffdfff8
 8002afc:	ffff800f 	.word	0xffff800f

08002b00 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2317      	movs	r3, #23
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	2200      	movs	r2, #0
 8002b14:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2224      	movs	r2, #36	; 0x24
 8002b1a:	5c9b      	ldrb	r3, [r3, r2]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <HAL_DMA_Start_IT+0x24>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e06f      	b.n	8002c04 <HAL_DMA_Start_IT+0x104>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2224      	movs	r2, #36	; 0x24
 8002b28:	2101      	movs	r1, #1
 8002b2a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2225      	movs	r2, #37	; 0x25
 8002b30:	5c9b      	ldrb	r3, [r3, r2]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d157      	bne.n	8002be8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2225      	movs	r2, #37	; 0x25
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2101      	movs	r1, #1
 8002b52:	438a      	bics	r2, r1
 8002b54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68b9      	ldr	r1, [r7, #8]
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f97d 	bl	8002e5c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	210e      	movs	r1, #14
 8002b76:	430a      	orrs	r2, r1
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e00f      	b.n	8002b9c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2104      	movs	r1, #4
 8002b88:	438a      	bics	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	210a      	movs	r1, #10
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	025b      	lsls	r3, r3, #9
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d008      	beq.n	8002bbc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	2180      	movs	r1, #128	; 0x80
 8002bb6:	0049      	lsls	r1, r1, #1
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bce:	2180      	movs	r1, #128	; 0x80
 8002bd0:	0049      	lsls	r1, r1, #1
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2101      	movs	r1, #1
 8002be2:	430a      	orrs	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e00a      	b.n	8002bfe <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2280      	movs	r2, #128	; 0x80
 8002bec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2224      	movs	r2, #36	; 0x24
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002bf6:	2317      	movs	r3, #23
 8002bf8:	18fb      	adds	r3, r7, r3
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002bfe:	2317      	movs	r3, #23
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	781b      	ldrb	r3, [r3, #0]
}
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b006      	add	sp, #24
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c14:	210f      	movs	r1, #15
 8002c16:	187b      	adds	r3, r7, r1
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2225      	movs	r2, #37	; 0x25
 8002c20:	5c9b      	ldrb	r3, [r3, r2]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d006      	beq.n	8002c36 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002c2e:	187b      	adds	r3, r7, r1
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	e049      	b.n	8002cca <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	210e      	movs	r1, #14
 8002c42:	438a      	bics	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2101      	movs	r1, #1
 8002c52:	438a      	bics	r2, r1
 8002c54:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c60:	491d      	ldr	r1, [pc, #116]	; (8002cd8 <HAL_DMA_Abort_IT+0xcc>)
 8002c62:	400a      	ands	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002c66:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <HAL_DMA_Abort_IT+0xd0>)
 8002c68:	6859      	ldr	r1, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	221c      	movs	r2, #28
 8002c70:	4013      	ands	r3, r2
 8002c72:	2201      	movs	r2, #1
 8002c74:	409a      	lsls	r2, r3
 8002c76:	4b19      	ldr	r3, [pc, #100]	; (8002cdc <HAL_DMA_Abort_IT+0xd0>)
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c84:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00c      	beq.n	8002ca8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c98:	490f      	ldr	r1, [pc, #60]	; (8002cd8 <HAL_DMA_Abort_IT+0xcc>)
 8002c9a:	400a      	ands	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002ca6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2225      	movs	r2, #37	; 0x25
 8002cac:	2101      	movs	r1, #1
 8002cae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	; 0x24
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d004      	beq.n	8002cca <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	0010      	movs	r0, r2
 8002cc8:	4798      	blx	r3
    }
  }
  return status;
 8002cca:	230f      	movs	r3, #15
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	781b      	ldrb	r3, [r3, #0]
}
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b004      	add	sp, #16
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	fffffeff 	.word	0xfffffeff
 8002cdc:	40020000 	.word	0x40020000

08002ce0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002ce8:	4b55      	ldr	r3, [pc, #340]	; (8002e40 <HAL_DMA_IRQHandler+0x160>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	221c      	movs	r2, #28
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2204      	movs	r2, #4
 8002d00:	409a      	lsls	r2, r3
 8002d02:	0013      	movs	r3, r2
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4013      	ands	r3, r2
 8002d08:	d027      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x7a>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	4013      	ands	r3, r2
 8002d10:	d023      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d107      	bne.n	8002d2e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2104      	movs	r1, #4
 8002d2a:	438a      	bics	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002d2e:	4b44      	ldr	r3, [pc, #272]	; (8002e40 <HAL_DMA_IRQHandler+0x160>)
 8002d30:	6859      	ldr	r1, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	221c      	movs	r2, #28
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2204      	movs	r2, #4
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <HAL_DMA_IRQHandler+0x160>)
 8002d40:	430a      	orrs	r2, r1
 8002d42:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d100      	bne.n	8002d4e <HAL_DMA_IRQHandler+0x6e>
 8002d4c:	e073      	b.n	8002e36 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	0010      	movs	r0, r2
 8002d56:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002d58:	e06d      	b.n	8002e36 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	221c      	movs	r2, #28
 8002d60:	4013      	ands	r3, r2
 8002d62:	2202      	movs	r2, #2
 8002d64:	409a      	lsls	r2, r3
 8002d66:	0013      	movs	r3, r2
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d02e      	beq.n	8002dcc <HAL_DMA_IRQHandler+0xec>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2202      	movs	r2, #2
 8002d72:	4013      	ands	r3, r2
 8002d74:	d02a      	beq.n	8002dcc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d10b      	bne.n	8002d9a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	210a      	movs	r1, #10
 8002d8e:	438a      	bics	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2225      	movs	r2, #37	; 0x25
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002d9a:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <HAL_DMA_IRQHandler+0x160>)
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	221c      	movs	r2, #28
 8002da4:	4013      	ands	r3, r2
 8002da6:	2202      	movs	r2, #2
 8002da8:	409a      	lsls	r2, r3
 8002daa:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <HAL_DMA_IRQHandler+0x160>)
 8002dac:	430a      	orrs	r2, r1
 8002dae:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2224      	movs	r2, #36	; 0x24
 8002db4:	2100      	movs	r1, #0
 8002db6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d03a      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	0010      	movs	r0, r2
 8002dc8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002dca:	e034      	b.n	8002e36 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	221c      	movs	r2, #28
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	0013      	movs	r3, r2
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d02b      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x158>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2208      	movs	r2, #8
 8002de4:	4013      	ands	r3, r2
 8002de6:	d027      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	210e      	movs	r1, #14
 8002df4:	438a      	bics	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_DMA_IRQHandler+0x160>)
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	221c      	movs	r2, #28
 8002e02:	4013      	ands	r3, r2
 8002e04:	2201      	movs	r2, #1
 8002e06:	409a      	lsls	r2, r3
 8002e08:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_DMA_IRQHandler+0x160>)
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2225      	movs	r2, #37	; 0x25
 8002e18:	2101      	movs	r1, #1
 8002e1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2224      	movs	r2, #36	; 0x24
 8002e20:	2100      	movs	r1, #0
 8002e22:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	0010      	movs	r0, r2
 8002e34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46c0      	nop			; (mov r8, r8)
}
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b004      	add	sp, #16
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40020000 	.word	0x40020000

08002e44 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2225      	movs	r2, #37	; 0x25
 8002e50:	5c9b      	ldrb	r3, [r3, r2]
 8002e52:	b2db      	uxtb	r3, r3
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002e72:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002e84:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002e86:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <DMA_SetConfig+0x7c>)
 8002e88:	6859      	ldr	r1, [r3, #4]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	221c      	movs	r2, #28
 8002e90:	4013      	ands	r3, r2
 8002e92:	2201      	movs	r2, #1
 8002e94:	409a      	lsls	r2, r3
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <DMA_SetConfig+0x7c>)
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d108      	bne.n	8002ebe <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002ebc:	e007      	b.n	8002ece <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	60da      	str	r2, [r3, #12]
}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b004      	add	sp, #16
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	46c0      	nop			; (mov r8, r8)
 8002ed8:	40020000 	.word	0x40020000

08002edc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	4a10      	ldr	r2, [pc, #64]	; (8002f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002eec:	4694      	mov	ip, r2
 8002eee:	4463      	add	r3, ip
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	001a      	movs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	001a      	movs	r2, r3
 8002efe:	23ff      	movs	r3, #255	; 0xff
 8002f00:	4013      	ands	r3, r2
 8002f02:	3b08      	subs	r3, #8
 8002f04:	2114      	movs	r1, #20
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7fd f8fc 	bl	8000104 <__udivsi3>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a07      	ldr	r2, [pc, #28]	; (8002f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002f14:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	221f      	movs	r2, #31
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b004      	add	sp, #16
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	10008200 	.word	0x10008200
 8002f30:	40020880 	.word	0x40020880

08002f34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	223f      	movs	r2, #63	; 0x3f
 8002f42:	4013      	ands	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002f4a:	4694      	mov	ip, r2
 8002f4c:	4463      	add	r3, ip
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	001a      	movs	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a07      	ldr	r2, [pc, #28]	; (8002f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	2203      	movs	r2, #3
 8002f62:	4013      	ands	r3, r2
 8002f64:	2201      	movs	r2, #1
 8002f66:	409a      	lsls	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b004      	add	sp, #16
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	1000823f 	.word	0x1000823f
 8002f78:	40020940 	.word	0x40020940

08002f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f8a:	e147      	b.n	800321c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2101      	movs	r1, #1
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4091      	lsls	r1, r2
 8002f96:	000a      	movs	r2, r1
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d100      	bne.n	8002fa4 <HAL_GPIO_Init+0x28>
 8002fa2:	e138      	b.n	8003216 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2203      	movs	r2, #3
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d005      	beq.n	8002fbc <HAL_GPIO_Init+0x40>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d130      	bne.n	800301e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	2203      	movs	r2, #3
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	0013      	movs	r3, r2
 8002fcc:	43da      	mvns	r2, r3
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	0013      	movs	r3, r2
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	0013      	movs	r3, r2
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4013      	ands	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	2201      	movs	r2, #1
 800300a:	401a      	ands	r2, r3
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	409a      	lsls	r2, r3
 8003010:	0013      	movs	r3, r2
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	2203      	movs	r2, #3
 8003024:	4013      	ands	r3, r2
 8003026:	2b03      	cmp	r3, #3
 8003028:	d017      	beq.n	800305a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	2203      	movs	r2, #3
 8003036:	409a      	lsls	r2, r3
 8003038:	0013      	movs	r3, r2
 800303a:	43da      	mvns	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	409a      	lsls	r2, r3
 800304c:	0013      	movs	r3, r2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2203      	movs	r2, #3
 8003060:	4013      	ands	r3, r2
 8003062:	2b02      	cmp	r3, #2
 8003064:	d123      	bne.n	80030ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	08da      	lsrs	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	3208      	adds	r2, #8
 800306e:	0092      	lsls	r2, r2, #2
 8003070:	58d3      	ldr	r3, [r2, r3]
 8003072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2207      	movs	r2, #7
 8003078:	4013      	ands	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	220f      	movs	r2, #15
 800307e:	409a      	lsls	r2, r3
 8003080:	0013      	movs	r3, r2
 8003082:	43da      	mvns	r2, r3
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4013      	ands	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	691a      	ldr	r2, [r3, #16]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2107      	movs	r1, #7
 8003092:	400b      	ands	r3, r1
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	409a      	lsls	r2, r3
 8003098:	0013      	movs	r3, r2
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	0092      	lsls	r2, r2, #2
 80030aa:	6939      	ldr	r1, [r7, #16]
 80030ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	2203      	movs	r2, #3
 80030ba:	409a      	lsls	r2, r3
 80030bc:	0013      	movs	r3, r2
 80030be:	43da      	mvns	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2203      	movs	r2, #3
 80030cc:	401a      	ands	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	409a      	lsls	r2, r3
 80030d4:	0013      	movs	r3, r2
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	23c0      	movs	r3, #192	; 0xc0
 80030e8:	029b      	lsls	r3, r3, #10
 80030ea:	4013      	ands	r3, r2
 80030ec:	d100      	bne.n	80030f0 <HAL_GPIO_Init+0x174>
 80030ee:	e092      	b.n	8003216 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80030f0:	4a50      	ldr	r2, [pc, #320]	; (8003234 <HAL_GPIO_Init+0x2b8>)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	3318      	adds	r3, #24
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	589b      	ldr	r3, [r3, r2]
 80030fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2203      	movs	r2, #3
 8003102:	4013      	ands	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	220f      	movs	r2, #15
 8003108:	409a      	lsls	r2, r3
 800310a:	0013      	movs	r3, r2
 800310c:	43da      	mvns	r2, r3
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	23a0      	movs	r3, #160	; 0xa0
 8003118:	05db      	lsls	r3, r3, #23
 800311a:	429a      	cmp	r2, r3
 800311c:	d013      	beq.n	8003146 <HAL_GPIO_Init+0x1ca>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a45      	ldr	r2, [pc, #276]	; (8003238 <HAL_GPIO_Init+0x2bc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00d      	beq.n	8003142 <HAL_GPIO_Init+0x1c6>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a44      	ldr	r2, [pc, #272]	; (800323c <HAL_GPIO_Init+0x2c0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d007      	beq.n	800313e <HAL_GPIO_Init+0x1c2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a43      	ldr	r2, [pc, #268]	; (8003240 <HAL_GPIO_Init+0x2c4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d101      	bne.n	800313a <HAL_GPIO_Init+0x1be>
 8003136:	2303      	movs	r3, #3
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x1cc>
 800313a:	2305      	movs	r3, #5
 800313c:	e004      	b.n	8003148 <HAL_GPIO_Init+0x1cc>
 800313e:	2302      	movs	r3, #2
 8003140:	e002      	b.n	8003148 <HAL_GPIO_Init+0x1cc>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <HAL_GPIO_Init+0x1cc>
 8003146:	2300      	movs	r3, #0
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	2103      	movs	r1, #3
 800314c:	400a      	ands	r2, r1
 800314e:	00d2      	lsls	r2, r2, #3
 8003150:	4093      	lsls	r3, r2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003158:	4936      	ldr	r1, [pc, #216]	; (8003234 <HAL_GPIO_Init+0x2b8>)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	3318      	adds	r3, #24
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003166:	4b33      	ldr	r3, [pc, #204]	; (8003234 <HAL_GPIO_Init+0x2b8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	43da      	mvns	r2, r3
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4013      	ands	r3, r2
 8003174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	035b      	lsls	r3, r3, #13
 800317e:	4013      	ands	r3, r2
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800318a:	4b2a      	ldr	r3, [pc, #168]	; (8003234 <HAL_GPIO_Init+0x2b8>)
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003190:	4b28      	ldr	r3, [pc, #160]	; (8003234 <HAL_GPIO_Init+0x2b8>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	43da      	mvns	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	039b      	lsls	r3, r3, #14
 80031a8:	4013      	ands	r3, r2
 80031aa:	d003      	beq.n	80031b4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031b4:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <HAL_GPIO_Init+0x2b8>)
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031ba:	4a1e      	ldr	r2, [pc, #120]	; (8003234 <HAL_GPIO_Init+0x2b8>)
 80031bc:	2384      	movs	r3, #132	; 0x84
 80031be:	58d3      	ldr	r3, [r2, r3]
 80031c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	43da      	mvns	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	029b      	lsls	r3, r3, #10
 80031d4:	4013      	ands	r3, r2
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80031e0:	4914      	ldr	r1, [pc, #80]	; (8003234 <HAL_GPIO_Init+0x2b8>)
 80031e2:	2284      	movs	r2, #132	; 0x84
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80031e8:	4a12      	ldr	r2, [pc, #72]	; (8003234 <HAL_GPIO_Init+0x2b8>)
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	58d3      	ldr	r3, [r2, r3]
 80031ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	43da      	mvns	r2, r3
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	025b      	lsls	r3, r3, #9
 8003202:	4013      	ands	r3, r2
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800320e:	4909      	ldr	r1, [pc, #36]	; (8003234 <HAL_GPIO_Init+0x2b8>)
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	3301      	adds	r3, #1
 800321a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	40da      	lsrs	r2, r3
 8003224:	1e13      	subs	r3, r2, #0
 8003226:	d000      	beq.n	800322a <HAL_GPIO_Init+0x2ae>
 8003228:	e6b0      	b.n	8002f8c <HAL_GPIO_Init+0x10>
  }
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	b006      	add	sp, #24
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40021800 	.word	0x40021800
 8003238:	50000400 	.word	0x50000400
 800323c:	50000800 	.word	0x50000800
 8003240:	50000c00 	.word	0x50000c00

08003244 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	000a      	movs	r2, r1
 800324e:	1cbb      	adds	r3, r7, #2
 8003250:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	1cba      	adds	r2, r7, #2
 8003258:	8812      	ldrh	r2, [r2, #0]
 800325a:	4013      	ands	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800325e:	230f      	movs	r3, #15
 8003260:	18fb      	adds	r3, r7, r3
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
 8003266:	e003      	b.n	8003270 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003268:	230f      	movs	r3, #15
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003270:	230f      	movs	r3, #15
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	781b      	ldrb	r3, [r3, #0]
}
 8003276:	0018      	movs	r0, r3
 8003278:	46bd      	mov	sp, r7
 800327a:	b004      	add	sp, #16
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	0008      	movs	r0, r1
 8003288:	0011      	movs	r1, r2
 800328a:	1cbb      	adds	r3, r7, #2
 800328c:	1c02      	adds	r2, r0, #0
 800328e:	801a      	strh	r2, [r3, #0]
 8003290:	1c7b      	adds	r3, r7, #1
 8003292:	1c0a      	adds	r2, r1, #0
 8003294:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003296:	1c7b      	adds	r3, r7, #1
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d004      	beq.n	80032a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800329e:	1cbb      	adds	r3, r7, #2
 80032a0:	881a      	ldrh	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032a6:	e003      	b.n	80032b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032a8:	1cbb      	adds	r3, r7, #2
 80032aa:	881a      	ldrh	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032b0:	46c0      	nop			; (mov r8, r8)
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b002      	add	sp, #8
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	000a      	movs	r2, r1
 80032c2:	1cbb      	adds	r3, r7, #2
 80032c4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032cc:	1cbb      	adds	r3, r7, #2
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4013      	ands	r3, r2
 80032d4:	041a      	lsls	r2, r3, #16
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	43db      	mvns	r3, r3
 80032da:	1cb9      	adds	r1, r7, #2
 80032dc:	8809      	ldrh	r1, [r1, #0]
 80032de:	400b      	ands	r3, r1
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	619a      	str	r2, [r3, #24]
}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b004      	add	sp, #16
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e082      	b.n	8003408 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2241      	movs	r2, #65	; 0x41
 8003306:	5c9b      	ldrb	r3, [r3, r2]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d107      	bne.n	800331e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2240      	movs	r2, #64	; 0x40
 8003312:	2100      	movs	r1, #0
 8003314:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	0018      	movs	r0, r3
 800331a:	f7fe fad9 	bl	80018d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2241      	movs	r2, #65	; 0x41
 8003322:	2124      	movs	r1, #36	; 0x24
 8003324:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2101      	movs	r1, #1
 8003332:	438a      	bics	r2, r1
 8003334:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4934      	ldr	r1, [pc, #208]	; (8003410 <HAL_I2C_Init+0x120>)
 8003340:	400a      	ands	r2, r1
 8003342:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4931      	ldr	r1, [pc, #196]	; (8003414 <HAL_I2C_Init+0x124>)
 8003350:	400a      	ands	r2, r1
 8003352:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d108      	bne.n	800336e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2180      	movs	r1, #128	; 0x80
 8003366:	0209      	lsls	r1, r1, #8
 8003368:	430a      	orrs	r2, r1
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	e007      	b.n	800337e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2184      	movs	r1, #132	; 0x84
 8003378:	0209      	lsls	r1, r1, #8
 800337a:	430a      	orrs	r2, r1
 800337c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d104      	bne.n	8003390 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2280      	movs	r2, #128	; 0x80
 800338c:	0112      	lsls	r2, r2, #4
 800338e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	491f      	ldr	r1, [pc, #124]	; (8003418 <HAL_I2C_Init+0x128>)
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	491a      	ldr	r1, [pc, #104]	; (8003414 <HAL_I2C_Init+0x124>)
 80033ac:	400a      	ands	r2, r1
 80033ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	431a      	orrs	r2, r3
 80033ba:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69d9      	ldr	r1, [r3, #28]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1a      	ldr	r2, [r3, #32]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2101      	movs	r1, #1
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2241      	movs	r2, #65	; 0x41
 80033f4:	2120      	movs	r1, #32
 80033f6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2242      	movs	r2, #66	; 0x42
 8003402:	2100      	movs	r1, #0
 8003404:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	0018      	movs	r0, r3
 800340a:	46bd      	mov	sp, r7
 800340c:	b002      	add	sp, #8
 800340e:	bd80      	pop	{r7, pc}
 8003410:	f0ffffff 	.word	0xf0ffffff
 8003414:	ffff7fff 	.word	0xffff7fff
 8003418:	02008000 	.word	0x02008000

0800341c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	1dbb      	adds	r3, r7, #6
 800342a:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2241      	movs	r2, #65	; 0x41
 8003430:	5c9b      	ldrb	r3, [r3, r2]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	001a      	movs	r2, r3
 8003436:	2328      	movs	r3, #40	; 0x28
 8003438:	4013      	ands	r3, r2
 800343a:	2b28      	cmp	r3, #40	; 0x28
 800343c:	d000      	beq.n	8003440 <HAL_I2C_Slave_Seq_Transmit_IT+0x24>
 800343e:	e09f      	b.n	8003580 <HAL_I2C_Slave_Seq_Transmit_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_I2C_Slave_Seq_Transmit_IT+0x32>
 8003446:	1dbb      	adds	r3, r7, #6
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d105      	bne.n	800345a <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e093      	b.n	8003582 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800345a:	4a4c      	ldr	r2, [pc, #304]	; (800358c <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	0011      	movs	r1, r2
 8003460:	0018      	movs	r0, r3
 8003462:	f001 fa85 	bl	8004970 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2240      	movs	r2, #64	; 0x40
 800346a:	5c9b      	ldrb	r3, [r3, r2]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_I2C_Slave_Seq_Transmit_IT+0x58>
 8003470:	2302      	movs	r3, #2
 8003472:	e086      	b.n	8003582 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2240      	movs	r2, #64	; 0x40
 8003478:	2101      	movs	r1, #1
 800347a:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2241      	movs	r2, #65	; 0x41
 8003480:	5c9b      	ldrb	r3, [r3, r2]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b2a      	cmp	r3, #42	; 0x2a
 8003486:	d12c      	bne.n	80034e2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2102      	movs	r1, #2
 800348c:	0018      	movs	r0, r3
 800348e:	f001 fa6f 	bl	8004970 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	401a      	ands	r2, r3
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d11d      	bne.n	80034e2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4937      	ldr	r1, [pc, #220]	; (8003590 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 80034b2:	400a      	ands	r2, r1
 80034b4:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d011      	beq.n	80034e2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c2:	4a34      	ldr	r2, [pc, #208]	; (8003594 <HAL_I2C_Slave_Seq_Transmit_IT+0x178>)
 80034c4:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ca:	0018      	movs	r0, r3
 80034cc:	f7ff fb9e 	bl	8002c0c <HAL_DMA_Abort_IT>
 80034d0:	1e03      	subs	r3, r0, #0
 80034d2:	d006      	beq.n	80034e2 <HAL_I2C_Slave_Seq_Transmit_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	0018      	movs	r0, r3
 80034e0:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2241      	movs	r2, #65	; 0x41
 80034e6:	2129      	movs	r1, #41	; 0x29
 80034e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2242      	movs	r2, #66	; 0x42
 80034ee:	2120      	movs	r1, #32
 80034f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4923      	ldr	r1, [pc, #140]	; (8003590 <HAL_I2C_Slave_Seq_Transmit_IT+0x174>)
 8003504:	400a      	ands	r2, r1
 8003506:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1dba      	adds	r2, r7, #6
 8003512:	8812      	ldrh	r2, [r2, #0]
 8003514:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <HAL_I2C_Slave_Seq_Transmit_IT+0x17c>)
 800352a:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2208      	movs	r2, #8
 8003534:	4013      	ands	r3, r2
 8003536:	3b08      	subs	r3, #8
 8003538:	425a      	negs	r2, r3
 800353a:	4153      	adcs	r3, r2
 800353c:	b2da      	uxtb	r2, r3
 800353e:	2117      	movs	r1, #23
 8003540:	187b      	adds	r3, r7, r1
 8003542:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	0c1b      	lsrs	r3, r3, #16
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2201      	movs	r2, #1
 8003550:	4013      	ands	r3, r2
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	d107      	bne.n	8003568 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
 8003558:	187b      	adds	r3, r7, r1
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_I2C_Slave_Seq_Transmit_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2208      	movs	r2, #8
 8003566:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2240      	movs	r2, #64	; 0x40
 800356c:	2100      	movs	r1, #0
 800356e:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003570:	4a06      	ldr	r2, [pc, #24]	; (800358c <HAL_I2C_Slave_Seq_Transmit_IT+0x170>)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	0011      	movs	r1, r2
 8003576:	0018      	movs	r0, r3
 8003578:	f001 f98a 	bl	8004890 <I2C_Enable_IRQ>

    return HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	e000      	b.n	8003582 <HAL_I2C_Slave_Seq_Transmit_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
  }
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b006      	add	sp, #24
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	00008001 	.word	0x00008001
 8003590:	ffff7fff 	.word	0xffff7fff
 8003594:	080047df 	.word	0x080047df
 8003598:	080038a1 	.word	0x080038a1

0800359c <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	1dbb      	adds	r3, r7, #6
 80035aa:	801a      	strh	r2, [r3, #0]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2241      	movs	r2, #65	; 0x41
 80035b0:	5c9b      	ldrb	r3, [r3, r2]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	001a      	movs	r2, r3
 80035b6:	2328      	movs	r3, #40	; 0x28
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b28      	cmp	r3, #40	; 0x28
 80035bc:	d000      	beq.n	80035c0 <HAL_I2C_Slave_Seq_Receive_IT+0x24>
 80035be:	e09f      	b.n	8003700 <HAL_I2C_Slave_Seq_Receive_IT+0x164>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_I2C_Slave_Seq_Receive_IT+0x32>
 80035c6:	1dbb      	adds	r3, r7, #6
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d105      	bne.n	80035da <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2280      	movs	r2, #128	; 0x80
 80035d2:	0092      	lsls	r2, r2, #2
 80035d4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e093      	b.n	8003702 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80035da:	4a4c      	ldr	r2, [pc, #304]	; (800370c <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	0011      	movs	r1, r2
 80035e0:	0018      	movs	r0, r3
 80035e2:	f001 f9c5 	bl	8004970 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2240      	movs	r2, #64	; 0x40
 80035ea:	5c9b      	ldrb	r3, [r3, r2]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_I2C_Slave_Seq_Receive_IT+0x58>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e086      	b.n	8003702 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2240      	movs	r2, #64	; 0x40
 80035f8:	2101      	movs	r1, #1
 80035fa:	5499      	strb	r1, [r3, r2]

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2241      	movs	r2, #65	; 0x41
 8003600:	5c9b      	ldrb	r3, [r3, r2]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b29      	cmp	r3, #41	; 0x29
 8003606:	d12c      	bne.n	8003662 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2101      	movs	r1, #1
 800360c:	0018      	movs	r0, r3
 800360e:	f001 f9af 	bl	8004970 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	2380      	movs	r3, #128	; 0x80
 800361a:	01db      	lsls	r3, r3, #7
 800361c:	401a      	ands	r2, r3
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	01db      	lsls	r3, r3, #7
 8003622:	429a      	cmp	r2, r3
 8003624:	d11d      	bne.n	8003662 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4937      	ldr	r1, [pc, #220]	; (8003710 <HAL_I2C_Slave_Seq_Receive_IT+0x174>)
 8003632:	400a      	ands	r2, r1
 8003634:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	2b00      	cmp	r3, #0
 800363c:	d011      	beq.n	8003662 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	4a34      	ldr	r2, [pc, #208]	; (8003714 <HAL_I2C_Slave_Seq_Receive_IT+0x178>)
 8003644:	639a      	str	r2, [r3, #56]	; 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	0018      	movs	r0, r3
 800364c:	f7ff fade 	bl	8002c0c <HAL_DMA_Abort_IT>
 8003650:	1e03      	subs	r3, r0, #0
 8003652:	d006      	beq.n	8003662 <HAL_I2C_Slave_Seq_Receive_IT+0xc6>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	0018      	movs	r0, r3
 8003660:	4790      	blx	r2
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2241      	movs	r2, #65	; 0x41
 8003666:	212a      	movs	r1, #42	; 0x2a
 8003668:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2242      	movs	r2, #66	; 0x42
 800366e:	2120      	movs	r1, #32
 8003670:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4925      	ldr	r1, [pc, #148]	; (8003718 <HAL_I2C_Slave_Seq_Receive_IT+0x17c>)
 8003684:	400a      	ands	r2, r1
 8003686:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1dba      	adds	r2, r7, #6
 8003692:	8812      	ldrh	r2, [r2, #0]
 8003694:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	4a1c      	ldr	r2, [pc, #112]	; (800371c <HAL_I2C_Slave_Seq_Receive_IT+0x180>)
 80036aa:	635a      	str	r2, [r3, #52]	; 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2208      	movs	r2, #8
 80036b4:	4013      	ands	r3, r2
 80036b6:	3b08      	subs	r3, #8
 80036b8:	425a      	negs	r2, r3
 80036ba:	4153      	adcs	r3, r2
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	2117      	movs	r1, #23
 80036c0:	187b      	adds	r3, r7, r1
 80036c2:	701a      	strb	r2, [r3, #0]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	0c1b      	lsrs	r3, r3, #16
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2201      	movs	r2, #1
 80036d0:	4013      	ands	r3, r2
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d107      	bne.n	80036e8 <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
 80036d8:	187b      	adds	r3, r7, r1
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_I2C_Slave_Seq_Receive_IT+0x14c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2208      	movs	r2, #8
 80036e6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2240      	movs	r2, #64	; 0x40
 80036ec:	2100      	movs	r1, #0
 80036ee:	5499      	strb	r1, [r3, r2]

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80036f0:	4a06      	ldr	r2, [pc, #24]	; (800370c <HAL_I2C_Slave_Seq_Receive_IT+0x170>)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	0011      	movs	r1, r2
 80036f6:	0018      	movs	r0, r3
 80036f8:	f001 f8ca 	bl	8004890 <I2C_Enable_IRQ>

    return HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e000      	b.n	8003702 <HAL_I2C_Slave_Seq_Receive_IT+0x166>
  }
  else
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
  }
}
 8003702:	0018      	movs	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	b006      	add	sp, #24
 8003708:	bd80      	pop	{r7, pc}
 800370a:	46c0      	nop			; (mov r8, r8)
 800370c:	00008002 	.word	0x00008002
 8003710:	ffffbfff 	.word	0xffffbfff
 8003714:	080047df 	.word	0x080047df
 8003718:	ffff7fff 	.word	0xffff7fff
 800371c:	080038a1 	.word	0x080038a1

08003720 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2241      	movs	r2, #65	; 0x41
 800372c:	5c9b      	ldrb	r3, [r3, r2]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b20      	cmp	r3, #32
 8003732:	d10f      	bne.n	8003754 <HAL_I2C_EnableListen_IT+0x34>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2241      	movs	r2, #65	; 0x41
 8003738:	2128      	movs	r1, #40	; 0x28
 800373a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR = I2C_Slave_ISR_IT;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a08      	ldr	r2, [pc, #32]	; (8003760 <HAL_I2C_EnableListen_IT+0x40>)
 8003740:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	021a      	lsls	r2, r3, #8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	0011      	movs	r1, r2
 800374a:	0018      	movs	r0, r3
 800374c:	f001 f8a0 	bl	8004890 <I2C_Enable_IRQ>

    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <HAL_I2C_EnableListen_IT+0x36>
  }
  else
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
  }
}
 8003756:	0018      	movs	r0, r3
 8003758:	46bd      	mov	sp, r7
 800375a:	b002      	add	sp, #8
 800375c:	bd80      	pop	{r7, pc}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	080038a1 	.word	0x080038a1

08003764 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003780:	2b00      	cmp	r3, #0
 8003782:	d005      	beq.n	8003790 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	68f9      	ldr	r1, [r7, #12]
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4798      	blx	r3
  }
}
 8003790:	46c0      	nop			; (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b004      	add	sp, #16
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	2380      	movs	r3, #128	; 0x80
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	4013      	ands	r3, r2
 80037b8:	d00e      	beq.n	80037d8 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2280      	movs	r2, #128	; 0x80
 80037be:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80037c0:	d00a      	beq.n	80037d8 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	2201      	movs	r2, #1
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2280      	movs	r2, #128	; 0x80
 80037d4:	0052      	lsls	r2, r2, #1
 80037d6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	2380      	movs	r3, #128	; 0x80
 80037dc:	00db      	lsls	r3, r3, #3
 80037de:	4013      	ands	r3, r2
 80037e0:	d00e      	beq.n	8003800 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2280      	movs	r2, #128	; 0x80
 80037e6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80037e8:	d00a      	beq.n	8003800 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ee:	2208      	movs	r2, #8
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2280      	movs	r2, #128	; 0x80
 80037fc:	00d2      	lsls	r2, r2, #3
 80037fe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4013      	ands	r3, r2
 8003808:	d00e      	beq.n	8003828 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2280      	movs	r2, #128	; 0x80
 800380e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003810:	d00a      	beq.n	8003828 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	2202      	movs	r2, #2
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	0092      	lsls	r2, r2, #2
 8003826:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	220b      	movs	r2, #11
 8003832:	4013      	ands	r3, r2
 8003834:	d005      	beq.n	8003842 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	0011      	movs	r1, r2
 800383c:	0018      	movs	r0, r3
 800383e:	f000 fea1 	bl	8004584 <I2C_ITError>
  }
}
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	46bd      	mov	sp, r7
 8003846:	b006      	add	sp, #24
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003852:	46c0      	nop			; (mov r8, r8)
 8003854:	46bd      	mov	sp, r7
 8003856:	b002      	add	sp, #8
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	46bd      	mov	sp, r7
 8003866:	b002      	add	sp, #8
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b082      	sub	sp, #8
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	46bd      	mov	sp, r7
 8003886:	b002      	add	sp, #8
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b002      	add	sp, #8
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2240      	movs	r2, #64	; 0x40
 80038ba:	5c9b      	ldrb	r3, [r3, r2]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <I2C_Slave_ISR_IT+0x24>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e0e6      	b.n	8003a92 <I2C_Slave_ISR_IT+0x1f2>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2240      	movs	r2, #64	; 0x40
 80038c8:	2101      	movs	r1, #1
 80038ca:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2220      	movs	r2, #32
 80038d0:	4013      	ands	r3, r2
 80038d2:	d009      	beq.n	80038e8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038da:	d005      	beq.n	80038e8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	0011      	movs	r1, r2
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 fcd6 	bl	8004294 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2210      	movs	r2, #16
 80038ec:	4013      	ands	r3, r2
 80038ee:	d052      	beq.n	8003996 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2210      	movs	r2, #16
 80038f4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80038f6:	d04e      	beq.n	8003996 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d12d      	bne.n	800395e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2241      	movs	r2, #65	; 0x41
 8003906:	5c9b      	ldrb	r3, [r3, r2]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b28      	cmp	r3, #40	; 0x28
 800390c:	d10b      	bne.n	8003926 <I2C_Slave_ISR_IT+0x86>
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	049b      	lsls	r3, r3, #18
 8003914:	429a      	cmp	r2, r3
 8003916:	d106      	bne.n	8003926 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	0011      	movs	r1, r2
 800391e:	0018      	movs	r0, r3
 8003920:	f000 fdd8 	bl	80044d4 <I2C_ITListenCplt>
 8003924:	e036      	b.n	8003994 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2241      	movs	r2, #65	; 0x41
 800392a:	5c9b      	ldrb	r3, [r3, r2]
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b29      	cmp	r3, #41	; 0x29
 8003930:	d110      	bne.n	8003954 <I2C_Slave_ISR_IT+0xb4>
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	4a59      	ldr	r2, [pc, #356]	; (8003a9c <I2C_Slave_ISR_IT+0x1fc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00c      	beq.n	8003954 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2210      	movs	r2, #16
 8003940:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	0018      	movs	r0, r3
 8003946:	f000 ff28 	bl	800479a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	0018      	movs	r0, r3
 800394e:	f000 fb6f 	bl	8004030 <I2C_ITSlaveSeqCplt>
 8003952:	e01f      	b.n	8003994 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2210      	movs	r2, #16
 800395a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800395c:	e091      	b.n	8003a82 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2210      	movs	r2, #16
 8003964:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	2204      	movs	r2, #4
 800396c:	431a      	orrs	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <I2C_Slave_ISR_IT+0xe4>
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	045b      	lsls	r3, r3, #17
 800397e:	429a      	cmp	r2, r3
 8003980:	d000      	beq.n	8003984 <I2C_Slave_ISR_IT+0xe4>
 8003982:	e07e      	b.n	8003a82 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	0011      	movs	r1, r2
 800398c:	0018      	movs	r0, r3
 800398e:	f000 fdf9 	bl	8004584 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003992:	e076      	b.n	8003a82 <I2C_Slave_ISR_IT+0x1e2>
 8003994:	e075      	b.n	8003a82 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2204      	movs	r2, #4
 800399a:	4013      	ands	r3, r2
 800399c:	d02f      	beq.n	80039fe <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2204      	movs	r2, #4
 80039a2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80039a4:	d02b      	beq.n	80039fe <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d018      	beq.n	80039e2 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	b2d2      	uxtb	r2, r2
 80039bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	3b01      	subs	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d14c      	bne.n	8003a86 <I2C_Slave_ISR_IT+0x1e6>
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	4a2b      	ldr	r2, [pc, #172]	; (8003a9c <I2C_Slave_ISR_IT+0x1fc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d048      	beq.n	8003a86 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	0018      	movs	r0, r3
 80039f8:	f000 fb1a 	bl	8004030 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80039fc:	e043      	b.n	8003a86 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2208      	movs	r2, #8
 8003a02:	4013      	ands	r3, r2
 8003a04:	d00a      	beq.n	8003a1c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a0c:	d006      	beq.n	8003a1c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	0011      	movs	r1, r2
 8003a14:	0018      	movs	r0, r3
 8003a16:	f000 fa25 	bl	8003e64 <I2C_ITAddrCplt>
 8003a1a:	e035      	b.n	8003a88 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	4013      	ands	r3, r2
 8003a22:	d031      	beq.n	8003a88 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a2a:	d02d      	beq.n	8003a88 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d018      	beq.n	8003a68 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3a:	781a      	ldrb	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	851a      	strh	r2, [r3, #40]	; 0x28
 8003a66:	e00f      	b.n	8003a88 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	2380      	movs	r3, #128	; 0x80
 8003a6c:	045b      	lsls	r3, r3, #17
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d002      	beq.n	8003a78 <I2C_Slave_ISR_IT+0x1d8>
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d107      	bne.n	8003a88 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f000 fad8 	bl	8004030 <I2C_ITSlaveSeqCplt>
 8003a80:	e002      	b.n	8003a88 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	e000      	b.n	8003a88 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8003a86:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2240      	movs	r2, #64	; 0x40
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	0018      	movs	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b006      	add	sp, #24
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	ffff0000 	.word	0xffff0000

08003aa0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003aa0:	b590      	push	{r4, r7, lr}
 8003aa2:	b089      	sub	sp, #36	; 0x24
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2240      	movs	r2, #64	; 0x40
 8003ab0:	5c9b      	ldrb	r3, [r3, r2]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <I2C_Master_ISR_DMA+0x1a>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e0e7      	b.n	8003c8a <I2C_Master_ISR_DMA+0x1ea>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2240      	movs	r2, #64	; 0x40
 8003abe:	2101      	movs	r1, #1
 8003ac0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2210      	movs	r2, #16
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d017      	beq.n	8003afa <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2210      	movs	r2, #16
 8003ace:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ad0:	d013      	beq.n	8003afa <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2210      	movs	r2, #16
 8003ad8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	2204      	movs	r2, #4
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2120      	movs	r1, #32
 8003aea:	0018      	movs	r0, r3
 8003aec:	f000 fed0 	bl	8004890 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	0018      	movs	r0, r3
 8003af4:	f000 fe51 	bl	800479a <I2C_Flush_TXDR>
 8003af8:	e0c2      	b.n	8003c80 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2280      	movs	r2, #128	; 0x80
 8003afe:	4013      	ands	r3, r2
 8003b00:	d100      	bne.n	8003b04 <I2C_Master_ISR_DMA+0x64>
 8003b02:	e07c      	b.n	8003bfe <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2240      	movs	r2, #64	; 0x40
 8003b08:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003b0a:	d100      	bne.n	8003b0e <I2C_Master_ISR_DMA+0x6e>
 8003b0c:	e077      	b.n	8003bfe <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2140      	movs	r1, #64	; 0x40
 8003b1a:	438a      	bics	r2, r1
 8003b1c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d055      	beq.n	8003bd4 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	2312      	movs	r3, #18
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	0592      	lsls	r2, r2, #22
 8003b36:	0d92      	lsrs	r2, r2, #22
 8003b38:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2bff      	cmp	r3, #255	; 0xff
 8003b42:	d906      	bls.n	8003b52 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	22ff      	movs	r2, #255	; 0xff
 8003b48:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	045b      	lsls	r3, r3, #17
 8003b4e:	617b      	str	r3, [r7, #20]
 8003b50:	e010      	b.n	8003b74 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b60:	4a4c      	ldr	r2, [pc, #304]	; (8003c94 <I2C_Master_ISR_DMA+0x1f4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d003      	beq.n	8003b6e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e002      	b.n	8003b74 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	049b      	lsls	r3, r3, #18
 8003b72:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	697c      	ldr	r4, [r7, #20]
 8003b7c:	2312      	movs	r3, #18
 8003b7e:	18fb      	adds	r3, r7, r3
 8003b80:	8819      	ldrh	r1, [r3, #0]
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	2300      	movs	r3, #0
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	0023      	movs	r3, r4
 8003b8a:	f000 fe47 	bl	800481c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2241      	movs	r2, #65	; 0x41
 8003ba4:	5c9b      	ldrb	r3, [r3, r2]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b22      	cmp	r3, #34	; 0x22
 8003baa:	d109      	bne.n	8003bc0 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2180      	movs	r1, #128	; 0x80
 8003bb8:	0209      	lsls	r1, r1, #8
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003bbe:	e05f      	b.n	8003c80 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2180      	movs	r1, #128	; 0x80
 8003bcc:	01c9      	lsls	r1, r1, #7
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003bd2:	e055      	b.n	8003c80 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	049b      	lsls	r3, r3, #18
 8003bde:	401a      	ands	r2, r3
 8003be0:	2380      	movs	r3, #128	; 0x80
 8003be2:	049b      	lsls	r3, r3, #18
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d004      	beq.n	8003bf2 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	0018      	movs	r0, r3
 8003bec:	f000 f9de 	bl	8003fac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003bf0:	e046      	b.n	8003c80 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2140      	movs	r1, #64	; 0x40
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f000 fcc4 	bl	8004584 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003bfc:	e040      	b.n	8003c80 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2240      	movs	r2, #64	; 0x40
 8003c02:	4013      	ands	r3, r2
 8003c04:	d02c      	beq.n	8003c60 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2240      	movs	r2, #64	; 0x40
 8003c0a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003c0c:	d028      	beq.n	8003c60 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d11d      	bne.n	8003c54 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	049b      	lsls	r3, r3, #18
 8003c22:	401a      	ands	r2, r3
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	049b      	lsls	r3, r3, #18
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d028      	beq.n	8003c7e <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <I2C_Master_ISR_DMA+0x1f4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d109      	bne.n	8003c4a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2180      	movs	r1, #128	; 0x80
 8003c42:	01c9      	lsls	r1, r1, #7
 8003c44:	430a      	orrs	r2, r1
 8003c46:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003c48:	e019      	b.n	8003c7e <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f000 f9ad 	bl	8003fac <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003c52:	e014      	b.n	8003c7e <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2140      	movs	r1, #64	; 0x40
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f000 fc93 	bl	8004584 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003c5e:	e00e      	b.n	8003c7e <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2220      	movs	r2, #32
 8003c64:	4013      	ands	r3, r2
 8003c66:	d00b      	beq.n	8003c80 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c6e:	d007      	beq.n	8003c80 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	0011      	movs	r1, r2
 8003c76:	0018      	movs	r0, r3
 8003c78:	f000 fa3e 	bl	80040f8 <I2C_ITMasterCplt>
 8003c7c:	e000      	b.n	8003c80 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8003c7e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2240      	movs	r2, #64	; 0x40
 8003c84:	2100      	movs	r1, #0
 8003c86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b007      	add	sp, #28
 8003c90:	bd90      	pop	{r4, r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	ffff0000 	.word	0xffff0000

08003c98 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2240      	movs	r2, #64	; 0x40
 8003cb2:	5c9b      	ldrb	r3, [r3, r2]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <I2C_Slave_ISR_DMA+0x24>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e0cd      	b.n	8003e58 <I2C_Slave_ISR_DMA+0x1c0>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2240      	movs	r2, #64	; 0x40
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d009      	beq.n	8003ce0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003cd2:	d005      	beq.n	8003ce0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	0011      	movs	r1, r2
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f000 fada 	bl	8004294 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2210      	movs	r2, #16
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d100      	bne.n	8003cea <I2C_Slave_ISR_DMA+0x52>
 8003ce8:	e0a3      	b.n	8003e32 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2210      	movs	r2, #16
 8003cee:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003cf0:	d100      	bne.n	8003cf4 <I2C_Slave_ISR_DMA+0x5c>
 8003cf2:	e09e      	b.n	8003e32 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	01db      	lsls	r3, r3, #7
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d105      	bne.n	8003d0a <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	2380      	movs	r3, #128	; 0x80
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d06:	d100      	bne.n	8003d0a <I2C_Slave_ISR_DMA+0x72>
 8003d08:	e08c      	b.n	8003e24 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00c      	beq.n	8003d2c <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	021b      	lsls	r3, r3, #8
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d007      	beq.n	8003d2c <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00c      	beq.n	8003d4e <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	2380      	movs	r3, #128	; 0x80
 8003d38:	01db      	lsls	r3, r3, #7
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d007      	beq.n	8003d4e <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d12d      	bne.n	8003db0 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2241      	movs	r2, #65	; 0x41
 8003d58:	5c9b      	ldrb	r3, [r3, r2]
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b28      	cmp	r3, #40	; 0x28
 8003d5e:	d10b      	bne.n	8003d78 <I2C_Slave_ISR_DMA+0xe0>
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	049b      	lsls	r3, r3, #18
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d106      	bne.n	8003d78 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	0011      	movs	r1, r2
 8003d70:	0018      	movs	r0, r3
 8003d72:	f000 fbaf 	bl	80044d4 <I2C_ITListenCplt>
 8003d76:	e054      	b.n	8003e22 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2241      	movs	r2, #65	; 0x41
 8003d7c:	5c9b      	ldrb	r3, [r3, r2]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b29      	cmp	r3, #41	; 0x29
 8003d82:	d110      	bne.n	8003da6 <I2C_Slave_ISR_DMA+0x10e>
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	4a36      	ldr	r2, [pc, #216]	; (8003e60 <I2C_Slave_ISR_DMA+0x1c8>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00c      	beq.n	8003da6 <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2210      	movs	r2, #16
 8003d92:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	0018      	movs	r0, r3
 8003d98:	f000 fcff 	bl	800479a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f000 f946 	bl	8004030 <I2C_ITSlaveSeqCplt>
 8003da4:	e03d      	b.n	8003e22 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2210      	movs	r2, #16
 8003dac:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003dae:	e03e      	b.n	8003e2e <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2210      	movs	r2, #16
 8003db6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003dc4:	2317      	movs	r3, #23
 8003dc6:	18fb      	adds	r3, r7, r3
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	2141      	movs	r1, #65	; 0x41
 8003dcc:	5c52      	ldrb	r2, [r2, r1]
 8003dce:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d004      	beq.n	8003de0 <I2C_Slave_ISR_DMA+0x148>
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	045b      	lsls	r3, r3, #17
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d126      	bne.n	8003e2e <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003de0:	2217      	movs	r2, #23
 8003de2:	18bb      	adds	r3, r7, r2
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b21      	cmp	r3, #33	; 0x21
 8003de8:	d003      	beq.n	8003df2 <I2C_Slave_ISR_DMA+0x15a>
 8003dea:	18bb      	adds	r3, r7, r2
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b29      	cmp	r3, #41	; 0x29
 8003df0:	d103      	bne.n	8003dfa <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2221      	movs	r2, #33	; 0x21
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
 8003df8:	e00b      	b.n	8003e12 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003dfa:	2217      	movs	r2, #23
 8003dfc:	18bb      	adds	r3, r7, r2
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b22      	cmp	r3, #34	; 0x22
 8003e02:	d003      	beq.n	8003e0c <I2C_Slave_ISR_DMA+0x174>
 8003e04:	18bb      	adds	r3, r7, r2
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b2a      	cmp	r3, #42	; 0x2a
 8003e0a:	d102      	bne.n	8003e12 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2222      	movs	r2, #34	; 0x22
 8003e10:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	0011      	movs	r1, r2
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f000 fbb2 	bl	8004584 <I2C_ITError>
      if (treatdmanack == 1U)
 8003e20:	e005      	b.n	8003e2e <I2C_Slave_ISR_DMA+0x196>
 8003e22:	e004      	b.n	8003e2e <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2210      	movs	r2, #16
 8003e2a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003e2c:	e00f      	b.n	8003e4e <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8003e2e:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003e30:	e00d      	b.n	8003e4e <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2208      	movs	r2, #8
 8003e36:	4013      	ands	r3, r2
 8003e38:	d009      	beq.n	8003e4e <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003e40:	d005      	beq.n	8003e4e <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	0011      	movs	r1, r2
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f000 f80b 	bl	8003e64 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2240      	movs	r2, #64	; 0x40
 8003e52:	2100      	movs	r1, #0
 8003e54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	0018      	movs	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	b008      	add	sp, #32
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	ffff0000 	.word	0xffff0000

08003e64 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e64:	b5b0      	push	{r4, r5, r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2241      	movs	r2, #65	; 0x41
 8003e72:	5c9b      	ldrb	r3, [r3, r2]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	001a      	movs	r2, r3
 8003e78:	2328      	movs	r3, #40	; 0x28
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b28      	cmp	r3, #40	; 0x28
 8003e7e:	d000      	beq.n	8003e82 <I2C_ITAddrCplt+0x1e>
 8003e80:	e088      	b.n	8003f94 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	0c1b      	lsrs	r3, r3, #16
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	250f      	movs	r5, #15
 8003e8e:	197b      	adds	r3, r7, r5
 8003e90:	2101      	movs	r1, #1
 8003e92:	400a      	ands	r2, r1
 8003e94:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	200c      	movs	r0, #12
 8003ea2:	183b      	adds	r3, r7, r0
 8003ea4:	21fe      	movs	r1, #254	; 0xfe
 8003ea6:	400a      	ands	r2, r1
 8003ea8:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	240a      	movs	r4, #10
 8003eb4:	193b      	adds	r3, r7, r4
 8003eb6:	0592      	lsls	r2, r2, #22
 8003eb8:	0d92      	lsrs	r2, r2, #22
 8003eba:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	2308      	movs	r3, #8
 8003ec6:	18fb      	adds	r3, r7, r3
 8003ec8:	21fe      	movs	r1, #254	; 0xfe
 8003eca:	400a      	ands	r2, r1
 8003ecc:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d148      	bne.n	8003f68 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003ed6:	0021      	movs	r1, r4
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	09db      	lsrs	r3, r3, #7
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	183b      	adds	r3, r7, r0
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	4053      	eors	r3, r2
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	001a      	movs	r2, r3
 8003eea:	2306      	movs	r3, #6
 8003eec:	4013      	ands	r3, r2
 8003eee:	d120      	bne.n	8003f32 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003ef0:	183b      	adds	r3, r7, r0
 8003ef2:	187a      	adds	r2, r7, r1
 8003ef4:	8812      	ldrh	r2, [r2, #0]
 8003ef6:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d14c      	bne.n	8003fa4 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2208      	movs	r2, #8
 8003f16:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2240      	movs	r2, #64	; 0x40
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f20:	183b      	adds	r3, r7, r0
 8003f22:	881a      	ldrh	r2, [r3, #0]
 8003f24:	197b      	adds	r3, r7, r5
 8003f26:	7819      	ldrb	r1, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f003 fc89 	bl	8007842 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f30:	e038      	b.n	8003fa4 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8003f32:	240c      	movs	r4, #12
 8003f34:	193b      	adds	r3, r7, r4
 8003f36:	2208      	movs	r2, #8
 8003f38:	18ba      	adds	r2, r7, r2
 8003f3a:	8812      	ldrh	r2, [r2, #0]
 8003f3c:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	021a      	lsls	r2, r3, #8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	0011      	movs	r1, r2
 8003f46:	0018      	movs	r0, r3
 8003f48:	f000 fd12 	bl	8004970 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2240      	movs	r2, #64	; 0x40
 8003f50:	2100      	movs	r1, #0
 8003f52:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f54:	193b      	adds	r3, r7, r4
 8003f56:	881a      	ldrh	r2, [r3, #0]
 8003f58:	230f      	movs	r3, #15
 8003f5a:	18fb      	adds	r3, r7, r3
 8003f5c:	7819      	ldrb	r1, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	0018      	movs	r0, r3
 8003f62:	f003 fc6e 	bl	8007842 <HAL_I2C_AddrCallback>
}
 8003f66:	e01d      	b.n	8003fa4 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f68:	2380      	movs	r3, #128	; 0x80
 8003f6a:	021a      	lsls	r2, r3, #8
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	0011      	movs	r1, r2
 8003f70:	0018      	movs	r0, r3
 8003f72:	f000 fcfd 	bl	8004970 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2240      	movs	r2, #64	; 0x40
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f7e:	230c      	movs	r3, #12
 8003f80:	18fb      	adds	r3, r7, r3
 8003f82:	881a      	ldrh	r2, [r3, #0]
 8003f84:	230f      	movs	r3, #15
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	7819      	ldrb	r1, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f003 fc58 	bl	8007842 <HAL_I2C_AddrCallback>
}
 8003f92:	e007      	b.n	8003fa4 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2208      	movs	r2, #8
 8003f9a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2240      	movs	r2, #64	; 0x40
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	5499      	strb	r1, [r3, r2]
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b004      	add	sp, #16
 8003faa:	bdb0      	pop	{r4, r5, r7, pc}

08003fac <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2242      	movs	r2, #66	; 0x42
 8003fb8:	2100      	movs	r1, #0
 8003fba:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2241      	movs	r2, #65	; 0x41
 8003fc0:	5c9b      	ldrb	r3, [r3, r2]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b21      	cmp	r3, #33	; 0x21
 8003fc6:	d117      	bne.n	8003ff8 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2241      	movs	r2, #65	; 0x41
 8003fcc:	2120      	movs	r1, #32
 8003fce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2211      	movs	r2, #17
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2101      	movs	r1, #1
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f000 fcc5 	bl	8004970 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2240      	movs	r2, #64	; 0x40
 8003fea:	2100      	movs	r1, #0
 8003fec:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7ff fc2a 	bl	800384a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ff6:	e016      	b.n	8004026 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2241      	movs	r2, #65	; 0x41
 8003ffc:	2120      	movs	r1, #32
 8003ffe:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2212      	movs	r2, #18
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2102      	movs	r1, #2
 8004010:	0018      	movs	r0, r3
 8004012:	f000 fcad 	bl	8004970 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2240      	movs	r2, #64	; 0x40
 800401a:	2100      	movs	r1, #0
 800401c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	0018      	movs	r0, r3
 8004022:	f7ff fc1a 	bl	800385a <HAL_I2C_MasterRxCpltCallback>
}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	46bd      	mov	sp, r7
 800402a:	b002      	add	sp, #8
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2242      	movs	r2, #66	; 0x42
 8004044:	2100      	movs	r1, #0
 8004046:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	01db      	lsls	r3, r3, #7
 800404e:	4013      	ands	r3, r2
 8004050:	d008      	beq.n	8004064 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4924      	ldr	r1, [pc, #144]	; (80040f0 <I2C_ITSlaveSeqCplt+0xc0>)
 800405e:	400a      	ands	r2, r1
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	e00c      	b.n	800407e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	2380      	movs	r3, #128	; 0x80
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	4013      	ands	r3, r2
 800406c:	d007      	beq.n	800407e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	491e      	ldr	r1, [pc, #120]	; (80040f4 <I2C_ITSlaveSeqCplt+0xc4>)
 800407a:	400a      	ands	r2, r1
 800407c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2241      	movs	r2, #65	; 0x41
 8004082:	5c9b      	ldrb	r3, [r3, r2]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b29      	cmp	r3, #41	; 0x29
 8004088:	d114      	bne.n	80040b4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2241      	movs	r2, #65	; 0x41
 800408e:	2128      	movs	r1, #40	; 0x28
 8004090:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2221      	movs	r2, #33	; 0x21
 8004096:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2101      	movs	r1, #1
 800409c:	0018      	movs	r0, r3
 800409e:	f000 fc67 	bl	8004970 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2240      	movs	r2, #64	; 0x40
 80040a6:	2100      	movs	r1, #0
 80040a8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f003 fbfe 	bl	80078ae <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80040b2:	e019      	b.n	80040e8 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2241      	movs	r2, #65	; 0x41
 80040b8:	5c9b      	ldrb	r3, [r3, r2]
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b2a      	cmp	r3, #42	; 0x2a
 80040be:	d113      	bne.n	80040e8 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2241      	movs	r2, #65	; 0x41
 80040c4:	2128      	movs	r1, #40	; 0x28
 80040c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2222      	movs	r2, #34	; 0x22
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2102      	movs	r1, #2
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 fc4c 	bl	8004970 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2240      	movs	r2, #64	; 0x40
 80040dc:	2100      	movs	r1, #0
 80040de:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	0018      	movs	r0, r3
 80040e4:	f003 fbce 	bl	8007884 <HAL_I2C_SlaveRxCpltCallback>
}
 80040e8:	46c0      	nop			; (mov r8, r8)
 80040ea:	46bd      	mov	sp, r7
 80040ec:	b004      	add	sp, #16
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	ffffbfff 	.word	0xffffbfff
 80040f4:	ffff7fff 	.word	0xffff7fff

080040f8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2220      	movs	r2, #32
 800410c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2241      	movs	r2, #65	; 0x41
 8004112:	5c9b      	ldrb	r3, [r3, r2]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b21      	cmp	r3, #33	; 0x21
 8004118:	d108      	bne.n	800412c <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2101      	movs	r1, #1
 800411e:	0018      	movs	r0, r3
 8004120:	f000 fc26 	bl	8004970 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2211      	movs	r2, #17
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
 800412a:	e00d      	b.n	8004148 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2241      	movs	r2, #65	; 0x41
 8004130:	5c9b      	ldrb	r3, [r3, r2]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b22      	cmp	r3, #34	; 0x22
 8004136:	d107      	bne.n	8004148 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2102      	movs	r1, #2
 800413c:	0018      	movs	r0, r3
 800413e:	f000 fc17 	bl	8004970 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2212      	movs	r2, #18
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	494e      	ldr	r1, [pc, #312]	; (800428c <I2C_ITMasterCplt+0x194>)
 8004154:	400a      	ands	r2, r1
 8004156:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a4b      	ldr	r2, [pc, #300]	; (8004290 <I2C_ITMasterCplt+0x198>)
 8004162:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2210      	movs	r2, #16
 8004168:	4013      	ands	r3, r2
 800416a:	d009      	beq.n	8004180 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2210      	movs	r2, #16
 8004172:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004178:	2204      	movs	r2, #4
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2241      	movs	r2, #65	; 0x41
 8004184:	5c9b      	ldrb	r3, [r3, r2]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b60      	cmp	r3, #96	; 0x60
 800418a:	d109      	bne.n	80041a0 <I2C_ITMasterCplt+0xa8>
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	2204      	movs	r2, #4
 8004190:	4013      	ands	r3, r2
 8004192:	d005      	beq.n	80041a0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	b2db      	uxtb	r3, r3
 800419c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800419e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	0018      	movs	r0, r3
 80041a4:	f000 faf9 	bl	800479a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ac:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2241      	movs	r2, #65	; 0x41
 80041b2:	5c9b      	ldrb	r3, [r3, r2]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b60      	cmp	r3, #96	; 0x60
 80041b8:	d002      	beq.n	80041c0 <I2C_ITMasterCplt+0xc8>
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	0011      	movs	r1, r2
 80041c8:	0018      	movs	r0, r3
 80041ca:	f000 f9db 	bl	8004584 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80041ce:	e058      	b.n	8004282 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2241      	movs	r2, #65	; 0x41
 80041d4:	5c9b      	ldrb	r3, [r3, r2]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b21      	cmp	r3, #33	; 0x21
 80041da:	d126      	bne.n	800422a <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2241      	movs	r2, #65	; 0x41
 80041e0:	2120      	movs	r1, #32
 80041e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2242      	movs	r2, #66	; 0x42
 80041ee:	5c9b      	ldrb	r3, [r3, r2]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b40      	cmp	r3, #64	; 0x40
 80041f4:	d10c      	bne.n	8004210 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2242      	movs	r2, #66	; 0x42
 80041fa:	2100      	movs	r1, #0
 80041fc:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2240      	movs	r2, #64	; 0x40
 8004202:	2100      	movs	r1, #0
 8004204:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0018      	movs	r0, r3
 800420a:	f7ff fb2e 	bl	800386a <HAL_I2C_MemTxCpltCallback>
}
 800420e:	e038      	b.n	8004282 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2242      	movs	r2, #66	; 0x42
 8004214:	2100      	movs	r1, #0
 8004216:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2240      	movs	r2, #64	; 0x40
 800421c:	2100      	movs	r1, #0
 800421e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	0018      	movs	r0, r3
 8004224:	f7ff fb11 	bl	800384a <HAL_I2C_MasterTxCpltCallback>
}
 8004228:	e02b      	b.n	8004282 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2241      	movs	r2, #65	; 0x41
 800422e:	5c9b      	ldrb	r3, [r3, r2]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b22      	cmp	r3, #34	; 0x22
 8004234:	d125      	bne.n	8004282 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2241      	movs	r2, #65	; 0x41
 800423a:	2120      	movs	r1, #32
 800423c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2242      	movs	r2, #66	; 0x42
 8004248:	5c9b      	ldrb	r3, [r3, r2]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b40      	cmp	r3, #64	; 0x40
 800424e:	d10c      	bne.n	800426a <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2242      	movs	r2, #66	; 0x42
 8004254:	2100      	movs	r1, #0
 8004256:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2240      	movs	r2, #64	; 0x40
 800425c:	2100      	movs	r1, #0
 800425e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	0018      	movs	r0, r3
 8004264:	f7ff fb09 	bl	800387a <HAL_I2C_MemRxCpltCallback>
}
 8004268:	e00b      	b.n	8004282 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2242      	movs	r2, #66	; 0x42
 800426e:	2100      	movs	r1, #0
 8004270:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2240      	movs	r2, #64	; 0x40
 8004276:	2100      	movs	r1, #0
 8004278:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	0018      	movs	r0, r3
 800427e:	f7ff faec 	bl	800385a <HAL_I2C_MasterRxCpltCallback>
}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	46bd      	mov	sp, r7
 8004286:	b006      	add	sp, #24
 8004288:	bd80      	pop	{r7, pc}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	fe00e800 	.word	0xfe00e800
 8004290:	ffff0000 	.word	0xffff0000

08004294 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80042aa:	200f      	movs	r0, #15
 80042ac:	183b      	adds	r3, r7, r0
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	2141      	movs	r1, #65	; 0x41
 80042b2:	5c52      	ldrb	r2, [r2, r1]
 80042b4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2220      	movs	r2, #32
 80042bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042be:	183b      	adds	r3, r7, r0
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	2b21      	cmp	r3, #33	; 0x21
 80042c4:	d003      	beq.n	80042ce <I2C_ITSlaveCplt+0x3a>
 80042c6:	183b      	adds	r3, r7, r0
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b29      	cmp	r3, #41	; 0x29
 80042cc:	d109      	bne.n	80042e2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80042ce:	4a7b      	ldr	r2, [pc, #492]	; (80044bc <I2C_ITSlaveCplt+0x228>)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	0011      	movs	r1, r2
 80042d4:	0018      	movs	r0, r3
 80042d6:	f000 fb4b 	bl	8004970 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2221      	movs	r2, #33	; 0x21
 80042de:	631a      	str	r2, [r3, #48]	; 0x30
 80042e0:	e011      	b.n	8004306 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042e2:	220f      	movs	r2, #15
 80042e4:	18bb      	adds	r3, r7, r2
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b22      	cmp	r3, #34	; 0x22
 80042ea:	d003      	beq.n	80042f4 <I2C_ITSlaveCplt+0x60>
 80042ec:	18bb      	adds	r3, r7, r2
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b2a      	cmp	r3, #42	; 0x2a
 80042f2:	d108      	bne.n	8004306 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80042f4:	4a72      	ldr	r2, [pc, #456]	; (80044c0 <I2C_ITSlaveCplt+0x22c>)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	0011      	movs	r1, r2
 80042fa:	0018      	movs	r0, r3
 80042fc:	f000 fb38 	bl	8004970 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2222      	movs	r2, #34	; 0x22
 8004304:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685a      	ldr	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2180      	movs	r1, #128	; 0x80
 8004312:	0209      	lsls	r1, r1, #8
 8004314:	430a      	orrs	r2, r1
 8004316:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4968      	ldr	r1, [pc, #416]	; (80044c4 <I2C_ITSlaveCplt+0x230>)
 8004324:	400a      	ands	r2, r1
 8004326:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0018      	movs	r0, r3
 800432c:	f000 fa35 	bl	800479a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	01db      	lsls	r3, r3, #7
 8004336:	4013      	ands	r3, r2
 8004338:	d013      	beq.n	8004362 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4960      	ldr	r1, [pc, #384]	; (80044c8 <I2C_ITSlaveCplt+0x234>)
 8004346:	400a      	ands	r2, r1
 8004348:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01f      	beq.n	8004392 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	b29a      	uxth	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004360:	e017      	b.n	8004392 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	2380      	movs	r3, #128	; 0x80
 8004366:	021b      	lsls	r3, r3, #8
 8004368:	4013      	ands	r3, r2
 800436a:	d012      	beq.n	8004392 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4955      	ldr	r1, [pc, #340]	; (80044cc <I2C_ITSlaveCplt+0x238>)
 8004378:	400a      	ands	r2, r1
 800437a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d006      	beq.n	8004392 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2204      	movs	r2, #4
 8004396:	4013      	ands	r3, r2
 8004398:	d020      	beq.n	80043dc <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2204      	movs	r2, #4
 800439e:	4393      	bics	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00c      	beq.n	80043dc <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ea:	2204      	movs	r2, #4
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2242      	movs	r2, #66	; 0x42
 80043f6:	2100      	movs	r1, #0
 80043f8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004404:	2b00      	cmp	r3, #0
 8004406:	d013      	beq.n	8004430 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	0011      	movs	r1, r2
 8004410:	0018      	movs	r0, r3
 8004412:	f000 f8b7 	bl	8004584 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2241      	movs	r2, #65	; 0x41
 800441a:	5c9b      	ldrb	r3, [r3, r2]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b28      	cmp	r3, #40	; 0x28
 8004420:	d147      	bne.n	80044b2 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	0011      	movs	r1, r2
 8004428:	0018      	movs	r0, r3
 800442a:	f000 f853 	bl	80044d4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800442e:	e040      	b.n	80044b2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	4a26      	ldr	r2, [pc, #152]	; (80044d0 <I2C_ITSlaveCplt+0x23c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d016      	beq.n	8004468 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	0018      	movs	r0, r3
 800443e:	f7ff fdf7 	bl	8004030 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a22      	ldr	r2, [pc, #136]	; (80044d0 <I2C_ITSlaveCplt+0x23c>)
 8004446:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2241      	movs	r2, #65	; 0x41
 800444c:	2120      	movs	r1, #32
 800444e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2240      	movs	r2, #64	; 0x40
 800445a:	2100      	movs	r1, #0
 800445c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	0018      	movs	r0, r3
 8004462:	f003 f9d9 	bl	8007818 <HAL_I2C_ListenCpltCallback>
}
 8004466:	e024      	b.n	80044b2 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2241      	movs	r2, #65	; 0x41
 800446c:	5c9b      	ldrb	r3, [r3, r2]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b22      	cmp	r3, #34	; 0x22
 8004472:	d10f      	bne.n	8004494 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2241      	movs	r2, #65	; 0x41
 8004478:	2120      	movs	r1, #32
 800447a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2240      	movs	r2, #64	; 0x40
 8004486:	2100      	movs	r1, #0
 8004488:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	0018      	movs	r0, r3
 800448e:	f003 f9f9 	bl	8007884 <HAL_I2C_SlaveRxCpltCallback>
}
 8004492:	e00e      	b.n	80044b2 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2241      	movs	r2, #65	; 0x41
 8004498:	2120      	movs	r1, #32
 800449a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2240      	movs	r2, #64	; 0x40
 80044a6:	2100      	movs	r1, #0
 80044a8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	0018      	movs	r0, r3
 80044ae:	f003 f9fe 	bl	80078ae <HAL_I2C_SlaveTxCpltCallback>
}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b006      	add	sp, #24
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	46c0      	nop			; (mov r8, r8)
 80044bc:	00008001 	.word	0x00008001
 80044c0:	00008002 	.word	0x00008002
 80044c4:	fe00e800 	.word	0xfe00e800
 80044c8:	ffffbfff 	.word	0xffffbfff
 80044cc:	ffff7fff 	.word	0xffff7fff
 80044d0:	ffff0000 	.word	0xffff0000

080044d4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a26      	ldr	r2, [pc, #152]	; (800457c <I2C_ITListenCplt+0xa8>)
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2241      	movs	r2, #65	; 0x41
 80044ee:	2120      	movs	r1, #32
 80044f0:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2242      	movs	r2, #66	; 0x42
 80044f6:	2100      	movs	r1, #0
 80044f8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2204      	movs	r2, #4
 8004504:	4013      	ands	r3, r2
 8004506:	d022      	beq.n	800454e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004524:	2b00      	cmp	r3, #0
 8004526:	d012      	beq.n	800454e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29a      	uxth	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004546:	2204      	movs	r2, #4
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800454e:	4a0c      	ldr	r2, [pc, #48]	; (8004580 <I2C_ITListenCplt+0xac>)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0011      	movs	r1, r2
 8004554:	0018      	movs	r0, r3
 8004556:	f000 fa0b 	bl	8004970 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2210      	movs	r2, #16
 8004560:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2240      	movs	r2, #64	; 0x40
 8004566:	2100      	movs	r1, #0
 8004568:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	0018      	movs	r0, r3
 800456e:	f003 f953 	bl	8007818 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004572:	46c0      	nop			; (mov r8, r8)
 8004574:	46bd      	mov	sp, r7
 8004576:	b002      	add	sp, #8
 8004578:	bd80      	pop	{r7, pc}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	ffff0000 	.word	0xffff0000
 8004580:	00008003 	.word	0x00008003

08004584 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800458e:	200f      	movs	r0, #15
 8004590:	183b      	adds	r3, r7, r0
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	2141      	movs	r1, #65	; 0x41
 8004596:	5c52      	ldrb	r2, [r2, r1]
 8004598:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2242      	movs	r2, #66	; 0x42
 800459e:	2100      	movs	r1, #0
 80045a0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a62      	ldr	r2, [pc, #392]	; (8004730 <I2C_ITError+0x1ac>)
 80045a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80045ba:	183b      	adds	r3, r7, r0
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b28      	cmp	r3, #40	; 0x28
 80045c0:	d007      	beq.n	80045d2 <I2C_ITError+0x4e>
 80045c2:	183b      	adds	r3, r7, r0
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b29      	cmp	r3, #41	; 0x29
 80045c8:	d003      	beq.n	80045d2 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80045ca:	183b      	adds	r3, r7, r0
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b2a      	cmp	r3, #42	; 0x2a
 80045d0:	d10c      	bne.n	80045ec <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2103      	movs	r1, #3
 80045d6:	0018      	movs	r0, r3
 80045d8:	f000 f9ca 	bl	8004970 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2241      	movs	r2, #65	; 0x41
 80045e0:	2128      	movs	r1, #40	; 0x28
 80045e2:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a53      	ldr	r2, [pc, #332]	; (8004734 <I2C_ITError+0x1b0>)
 80045e8:	635a      	str	r2, [r3, #52]	; 0x34
 80045ea:	e012      	b.n	8004612 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045ec:	4a52      	ldr	r2, [pc, #328]	; (8004738 <I2C_ITError+0x1b4>)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0011      	movs	r1, r2
 80045f2:	0018      	movs	r0, r3
 80045f4:	f000 f9bc 	bl	8004970 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2241      	movs	r2, #65	; 0x41
 80045fc:	5c9b      	ldrb	r3, [r3, r2]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b60      	cmp	r3, #96	; 0x60
 8004602:	d003      	beq.n	800460c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2241      	movs	r2, #65	; 0x41
 8004608:	2120      	movs	r1, #32
 800460a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	2b00      	cmp	r3, #0
 800461e:	d03b      	beq.n	8004698 <I2C_ITError+0x114>
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b11      	cmp	r3, #17
 8004624:	d002      	beq.n	800462c <I2C_ITError+0xa8>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b21      	cmp	r3, #33	; 0x21
 800462a:	d135      	bne.n	8004698 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	01db      	lsls	r3, r3, #7
 8004636:	401a      	ands	r2, r3
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	01db      	lsls	r3, r3, #7
 800463c:	429a      	cmp	r2, r3
 800463e:	d107      	bne.n	8004650 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	493c      	ldr	r1, [pc, #240]	; (800473c <I2C_ITError+0x1b8>)
 800464c:	400a      	ands	r2, r1
 800464e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004654:	0018      	movs	r0, r3
 8004656:	f7fe fbf5 	bl	8002e44 <HAL_DMA_GetState>
 800465a:	0003      	movs	r3, r0
 800465c:	2b01      	cmp	r3, #1
 800465e:	d016      	beq.n	800468e <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	4a36      	ldr	r2, [pc, #216]	; (8004740 <I2C_ITError+0x1bc>)
 8004666:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2240      	movs	r2, #64	; 0x40
 800466c:	2100      	movs	r1, #0
 800466e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	0018      	movs	r0, r3
 8004676:	f7fe fac9 	bl	8002c0c <HAL_DMA_Abort_IT>
 800467a:	1e03      	subs	r3, r0, #0
 800467c:	d051      	beq.n	8004722 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	0018      	movs	r0, r3
 800468a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800468c:	e049      	b.n	8004722 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0018      	movs	r0, r3
 8004692:	f000 f859 	bl	8004748 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004696:	e044      	b.n	8004722 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800469c:	2b00      	cmp	r3, #0
 800469e:	d03b      	beq.n	8004718 <I2C_ITError+0x194>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b12      	cmp	r3, #18
 80046a4:	d002      	beq.n	80046ac <I2C_ITError+0x128>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b22      	cmp	r3, #34	; 0x22
 80046aa:	d135      	bne.n	8004718 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	2380      	movs	r3, #128	; 0x80
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	401a      	ands	r2, r3
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	429a      	cmp	r2, r3
 80046be:	d107      	bne.n	80046d0 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	491e      	ldr	r1, [pc, #120]	; (8004744 <I2C_ITError+0x1c0>)
 80046cc:	400a      	ands	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d4:	0018      	movs	r0, r3
 80046d6:	f7fe fbb5 	bl	8002e44 <HAL_DMA_GetState>
 80046da:	0003      	movs	r3, r0
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d016      	beq.n	800470e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e4:	4a16      	ldr	r2, [pc, #88]	; (8004740 <I2C_ITError+0x1bc>)
 80046e6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2240      	movs	r2, #64	; 0x40
 80046ec:	2100      	movs	r1, #0
 80046ee:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f4:	0018      	movs	r0, r3
 80046f6:	f7fe fa89 	bl	8002c0c <HAL_DMA_Abort_IT>
 80046fa:	1e03      	subs	r3, r0, #0
 80046fc:	d013      	beq.n	8004726 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004708:	0018      	movs	r0, r3
 800470a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800470c:	e00b      	b.n	8004726 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	0018      	movs	r0, r3
 8004712:	f000 f819 	bl	8004748 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004716:	e006      	b.n	8004726 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	0018      	movs	r0, r3
 800471c:	f000 f814 	bl	8004748 <I2C_TreatErrorCallback>
  }
}
 8004720:	e002      	b.n	8004728 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	e000      	b.n	8004728 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004726:	46c0      	nop			; (mov r8, r8)
}
 8004728:	46c0      	nop			; (mov r8, r8)
 800472a:	46bd      	mov	sp, r7
 800472c:	b004      	add	sp, #16
 800472e:	bd80      	pop	{r7, pc}
 8004730:	ffff0000 	.word	0xffff0000
 8004734:	080038a1 	.word	0x080038a1
 8004738:	00008003 	.word	0x00008003
 800473c:	ffffbfff 	.word	0xffffbfff
 8004740:	080047df 	.word	0x080047df
 8004744:	ffff7fff 	.word	0xffff7fff

08004748 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2241      	movs	r2, #65	; 0x41
 8004754:	5c9b      	ldrb	r3, [r3, r2]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b60      	cmp	r3, #96	; 0x60
 800475a:	d10f      	bne.n	800477c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2241      	movs	r2, #65	; 0x41
 8004760:	2120      	movs	r1, #32
 8004762:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2240      	movs	r2, #64	; 0x40
 800476e:	2100      	movs	r1, #0
 8004770:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	0018      	movs	r0, r3
 8004776:	f003 f8ca 	bl	800790e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800477a:	e00a      	b.n	8004792 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2240      	movs	r2, #64	; 0x40
 8004786:	2100      	movs	r1, #0
 8004788:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0018      	movs	r0, r3
 800478e:	f003 f8a3 	bl	80078d8 <HAL_I2C_ErrorCallback>
}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	46bd      	mov	sp, r7
 8004796:	b002      	add	sp, #8
 8004798:	bd80      	pop	{r7, pc}

0800479a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800479a:	b580      	push	{r7, lr}
 800479c:	b082      	sub	sp, #8
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	2202      	movs	r2, #2
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d103      	bne.n	80047b8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2200      	movs	r2, #0
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	2201      	movs	r2, #1
 80047c0:	4013      	ands	r3, r2
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d007      	beq.n	80047d6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2101      	movs	r1, #1
 80047d2:	430a      	orrs	r2, r1
 80047d4:	619a      	str	r2, [r3, #24]
  }
}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	46bd      	mov	sp, r7
 80047da:	b002      	add	sp, #8
 80047dc:	bd80      	pop	{r7, pc}

080047de <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f8:	2200      	movs	r2, #0
 80047fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004808:	2200      	movs	r2, #0
 800480a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	0018      	movs	r0, r3
 8004810:	f7ff ff9a 	bl	8004748 <I2C_TreatErrorCallback>
}
 8004814:	46c0      	nop			; (mov r8, r8)
 8004816:	46bd      	mov	sp, r7
 8004818:	b004      	add	sp, #16
 800481a:	bd80      	pop	{r7, pc}

0800481c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800481c:	b590      	push	{r4, r7, lr}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	0008      	movs	r0, r1
 8004826:	0011      	movs	r1, r2
 8004828:	607b      	str	r3, [r7, #4]
 800482a:	240a      	movs	r4, #10
 800482c:	193b      	adds	r3, r7, r4
 800482e:	1c02      	adds	r2, r0, #0
 8004830:	801a      	strh	r2, [r3, #0]
 8004832:	2009      	movs	r0, #9
 8004834:	183b      	adds	r3, r7, r0
 8004836:	1c0a      	adds	r2, r1, #0
 8004838:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800483a:	193b      	adds	r3, r7, r4
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	059b      	lsls	r3, r3, #22
 8004840:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004842:	183b      	adds	r3, r7, r0
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	0419      	lsls	r1, r3, #16
 8004848:	23ff      	movs	r3, #255	; 0xff
 800484a:	041b      	lsls	r3, r3, #16
 800484c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800484e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	4313      	orrs	r3, r2
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004866:	0d51      	lsrs	r1, r2, #21
 8004868:	2280      	movs	r2, #128	; 0x80
 800486a:	00d2      	lsls	r2, r2, #3
 800486c:	400a      	ands	r2, r1
 800486e:	4907      	ldr	r1, [pc, #28]	; (800488c <I2C_TransferConfig+0x70>)
 8004870:	430a      	orrs	r2, r1
 8004872:	43d2      	mvns	r2, r2
 8004874:	401a      	ands	r2, r3
 8004876:	0011      	movs	r1, r2
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	430a      	orrs	r2, r1
 8004880:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	46bd      	mov	sp, r7
 8004886:	b007      	add	sp, #28
 8004888:	bd90      	pop	{r4, r7, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	03ff63ff 	.word	0x03ff63ff

08004890 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	000a      	movs	r2, r1
 800489a:	1cbb      	adds	r3, r7, #2
 800489c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a6:	4b30      	ldr	r3, [pc, #192]	; (8004968 <I2C_Enable_IRQ+0xd8>)
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d004      	beq.n	80048b6 <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80048b0:	4b2e      	ldr	r3, [pc, #184]	; (800496c <I2C_Enable_IRQ+0xdc>)
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d121      	bne.n	80048fa <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048b6:	1cbb      	adds	r3, r7, #2
 80048b8:	2200      	movs	r2, #0
 80048ba:	5e9b      	ldrsh	r3, [r3, r2]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	da03      	bge.n	80048c8 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	22b8      	movs	r2, #184	; 0xb8
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80048c8:	1cbb      	adds	r3, r7, #2
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d103      	bne.n	80048d8 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2290      	movs	r2, #144	; 0x90
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80048d8:	1cbb      	adds	r3, r7, #2
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	2b20      	cmp	r3, #32
 80048de:	d103      	bne.n	80048e8 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2260      	movs	r2, #96	; 0x60
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80048e8:	1cbb      	adds	r3, r7, #2
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	2b40      	cmp	r3, #64	; 0x40
 80048ee:	d12f      	bne.n	8004950 <I2C_Enable_IRQ+0xc0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2240      	movs	r2, #64	; 0x40
 80048f4:	4313      	orrs	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80048f8:	e02a      	b.n	8004950 <I2C_Enable_IRQ+0xc0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048fa:	1cbb      	adds	r3, r7, #2
 80048fc:	2200      	movs	r2, #0
 80048fe:	5e9b      	ldrsh	r3, [r3, r2]
 8004900:	2b00      	cmp	r3, #0
 8004902:	da03      	bge.n	800490c <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	22b8      	movs	r2, #184	; 0xb8
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800490c:	1cbb      	adds	r3, r7, #2
 800490e:	881b      	ldrh	r3, [r3, #0]
 8004910:	2201      	movs	r2, #1
 8004912:	4013      	ands	r3, r2
 8004914:	d003      	beq.n	800491e <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	22f2      	movs	r2, #242	; 0xf2
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800491e:	1cbb      	adds	r3, r7, #2
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	2202      	movs	r2, #2
 8004924:	4013      	ands	r3, r2
 8004926:	d003      	beq.n	8004930 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	22f4      	movs	r2, #244	; 0xf4
 800492c:	4313      	orrs	r3, r2
 800492e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004930:	1cbb      	adds	r3, r7, #2
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	2b10      	cmp	r3, #16
 8004936:	d103      	bne.n	8004940 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2290      	movs	r2, #144	; 0x90
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004940:	1cbb      	adds	r3, r7, #2
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	2b20      	cmp	r3, #32
 8004946:	d103      	bne.n	8004950 <I2C_Enable_IRQ+0xc0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	4313      	orrs	r3, r2
 800494e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6819      	ldr	r1, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	430a      	orrs	r2, r1
 800495e:	601a      	str	r2, [r3, #0]
}
 8004960:	46c0      	nop			; (mov r8, r8)
 8004962:	46bd      	mov	sp, r7
 8004964:	b004      	add	sp, #16
 8004966:	bd80      	pop	{r7, pc}
 8004968:	08003aa1 	.word	0x08003aa1
 800496c:	08003c99 	.word	0x08003c99

08004970 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	000a      	movs	r2, r1
 800497a:	1cbb      	adds	r3, r7, #2
 800497c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004982:	1cbb      	adds	r3, r7, #2
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	2201      	movs	r2, #1
 8004988:	4013      	ands	r3, r2
 800498a:	d010      	beq.n	80049ae <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2242      	movs	r2, #66	; 0x42
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2241      	movs	r2, #65	; 0x41
 8004998:	5c9b      	ldrb	r3, [r3, r2]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	001a      	movs	r2, r3
 800499e:	2328      	movs	r3, #40	; 0x28
 80049a0:	4013      	ands	r3, r2
 80049a2:	2b28      	cmp	r3, #40	; 0x28
 80049a4:	d003      	beq.n	80049ae <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	22b0      	movs	r2, #176	; 0xb0
 80049aa:	4313      	orrs	r3, r2
 80049ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80049ae:	1cbb      	adds	r3, r7, #2
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	2202      	movs	r2, #2
 80049b4:	4013      	ands	r3, r2
 80049b6:	d010      	beq.n	80049da <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2244      	movs	r2, #68	; 0x44
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2241      	movs	r2, #65	; 0x41
 80049c4:	5c9b      	ldrb	r3, [r3, r2]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	001a      	movs	r2, r3
 80049ca:	2328      	movs	r3, #40	; 0x28
 80049cc:	4013      	ands	r3, r2
 80049ce:	2b28      	cmp	r3, #40	; 0x28
 80049d0:	d003      	beq.n	80049da <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	22b0      	movs	r2, #176	; 0xb0
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80049da:	1cbb      	adds	r3, r7, #2
 80049dc:	2200      	movs	r2, #0
 80049de:	5e9b      	ldrsh	r3, [r3, r2]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	da03      	bge.n	80049ec <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	22b8      	movs	r2, #184	; 0xb8
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80049ec:	1cbb      	adds	r3, r7, #2
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	2b10      	cmp	r3, #16
 80049f2:	d103      	bne.n	80049fc <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2290      	movs	r2, #144	; 0x90
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80049fc:	1cbb      	adds	r3, r7, #2
 80049fe:	881b      	ldrh	r3, [r3, #0]
 8004a00:	2b20      	cmp	r3, #32
 8004a02:	d103      	bne.n	8004a0c <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004a0c:	1cbb      	adds	r3, r7, #2
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	2b40      	cmp	r3, #64	; 0x40
 8004a12:	d103      	bne.n	8004a1c <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2240      	movs	r2, #64	; 0x40
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	43d9      	mvns	r1, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	400a      	ands	r2, r1
 8004a2c:	601a      	str	r2, [r3, #0]
}
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	46bd      	mov	sp, r7
 8004a32:	b004      	add	sp, #16
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2241      	movs	r2, #65	; 0x41
 8004a46:	5c9b      	ldrb	r3, [r3, r2]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	d138      	bne.n	8004ac0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2240      	movs	r2, #64	; 0x40
 8004a52:	5c9b      	ldrb	r3, [r3, r2]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e032      	b.n	8004ac2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2240      	movs	r2, #64	; 0x40
 8004a60:	2101      	movs	r1, #1
 8004a62:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2241      	movs	r2, #65	; 0x41
 8004a68:	2124      	movs	r1, #36	; 0x24
 8004a6a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2101      	movs	r1, #1
 8004a78:	438a      	bics	r2, r1
 8004a7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4911      	ldr	r1, [pc, #68]	; (8004acc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004a88:	400a      	ands	r2, r1
 8004a8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6819      	ldr	r1, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2241      	movs	r2, #65	; 0x41
 8004ab0:	2120      	movs	r1, #32
 8004ab2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2240      	movs	r2, #64	; 0x40
 8004ab8:	2100      	movs	r1, #0
 8004aba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e000      	b.n	8004ac2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ac0:	2302      	movs	r3, #2
  }
}
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	b002      	add	sp, #8
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	ffffefff 	.word	0xffffefff

08004ad0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2241      	movs	r2, #65	; 0x41
 8004ade:	5c9b      	ldrb	r3, [r3, r2]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d139      	bne.n	8004b5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2240      	movs	r2, #64	; 0x40
 8004aea:	5c9b      	ldrb	r3, [r3, r2]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e033      	b.n	8004b5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2240      	movs	r2, #64	; 0x40
 8004af8:	2101      	movs	r1, #1
 8004afa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2241      	movs	r2, #65	; 0x41
 8004b00:	2124      	movs	r1, #36	; 0x24
 8004b02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2101      	movs	r1, #1
 8004b10:	438a      	bics	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4a11      	ldr	r2, [pc, #68]	; (8004b64 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2101      	movs	r1, #1
 8004b42:	430a      	orrs	r2, r1
 8004b44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2241      	movs	r2, #65	; 0x41
 8004b4a:	2120      	movs	r1, #32
 8004b4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2240      	movs	r2, #64	; 0x40
 8004b52:	2100      	movs	r1, #0
 8004b54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	e000      	b.n	8004b5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b5a:	2302      	movs	r3, #2
  }
}
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b004      	add	sp, #16
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	fffff0ff 	.word	0xfffff0ff

08004b68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004b70:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004b76:	4013      	ands	r3, r2
 8004b78:	0019      	movs	r1, r3
 8004b7a:	4b17      	ldr	r3, [pc, #92]	; (8004bd8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d11f      	bne.n	8004bcc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004b8c:	4b14      	ldr	r3, [pc, #80]	; (8004be0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	0013      	movs	r3, r2
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	189b      	adds	r3, r3, r2
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	4912      	ldr	r1, [pc, #72]	; (8004be4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004b9a:	0018      	movs	r0, r3
 8004b9c:	f7fb fab2 	bl	8000104 <__udivsi3>
 8004ba0:	0003      	movs	r3, r0
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ba6:	e008      	b.n	8004bba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	e001      	b.n	8004bba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e009      	b.n	8004bce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bba:	4b07      	ldr	r3, [pc, #28]	; (8004bd8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004bbc:	695a      	ldr	r2, [r3, #20]
 8004bbe:	2380      	movs	r3, #128	; 0x80
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	401a      	ands	r2, r3
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d0ed      	beq.n	8004ba8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	0018      	movs	r0, r3
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b004      	add	sp, #16
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	40007000 	.word	0x40007000
 8004bdc:	fffff9ff 	.word	0xfffff9ff
 8004be0:	20000000 	.word	0x20000000
 8004be4:	000f4240 	.word	0x000f4240

08004be8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e2fe      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	4013      	ands	r3, r2
 8004c02:	d100      	bne.n	8004c06 <HAL_RCC_OscConfig+0x1e>
 8004c04:	e07c      	b.n	8004d00 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c06:	4bc3      	ldr	r3, [pc, #780]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	2238      	movs	r2, #56	; 0x38
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c10:	4bc0      	ldr	r3, [pc, #768]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	2203      	movs	r2, #3
 8004c16:	4013      	ands	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d102      	bne.n	8004c26 <HAL_RCC_OscConfig+0x3e>
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2b03      	cmp	r3, #3
 8004c24:	d002      	beq.n	8004c2c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d10b      	bne.n	8004c44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2c:	4bb9      	ldr	r3, [pc, #740]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	029b      	lsls	r3, r3, #10
 8004c34:	4013      	ands	r3, r2
 8004c36:	d062      	beq.n	8004cfe <HAL_RCC_OscConfig+0x116>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d15e      	bne.n	8004cfe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e2d9      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	025b      	lsls	r3, r3, #9
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d107      	bne.n	8004c60 <HAL_RCC_OscConfig+0x78>
 8004c50:	4bb0      	ldr	r3, [pc, #704]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	4baf      	ldr	r3, [pc, #700]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004c56:	2180      	movs	r1, #128	; 0x80
 8004c58:	0249      	lsls	r1, r1, #9
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	e020      	b.n	8004ca2 <HAL_RCC_OscConfig+0xba>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	23a0      	movs	r3, #160	; 0xa0
 8004c66:	02db      	lsls	r3, r3, #11
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d10e      	bne.n	8004c8a <HAL_RCC_OscConfig+0xa2>
 8004c6c:	4ba9      	ldr	r3, [pc, #676]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4ba8      	ldr	r3, [pc, #672]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004c72:	2180      	movs	r1, #128	; 0x80
 8004c74:	02c9      	lsls	r1, r1, #11
 8004c76:	430a      	orrs	r2, r1
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	4ba6      	ldr	r3, [pc, #664]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4ba5      	ldr	r3, [pc, #660]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004c80:	2180      	movs	r1, #128	; 0x80
 8004c82:	0249      	lsls	r1, r1, #9
 8004c84:	430a      	orrs	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	e00b      	b.n	8004ca2 <HAL_RCC_OscConfig+0xba>
 8004c8a:	4ba2      	ldr	r3, [pc, #648]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4ba1      	ldr	r3, [pc, #644]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004c90:	49a1      	ldr	r1, [pc, #644]	; (8004f18 <HAL_RCC_OscConfig+0x330>)
 8004c92:	400a      	ands	r2, r1
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	4b9f      	ldr	r3, [pc, #636]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	4b9e      	ldr	r3, [pc, #632]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004c9c:	499f      	ldr	r1, [pc, #636]	; (8004f1c <HAL_RCC_OscConfig+0x334>)
 8004c9e:	400a      	ands	r2, r1
 8004ca0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d014      	beq.n	8004cd4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004caa:	f7fd f915 	bl	8001ed8 <HAL_GetTick>
 8004cae:	0003      	movs	r3, r0
 8004cb0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cb4:	f7fd f910 	bl	8001ed8 <HAL_GetTick>
 8004cb8:	0002      	movs	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b64      	cmp	r3, #100	; 0x64
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e298      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cc6:	4b93      	ldr	r3, [pc, #588]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	029b      	lsls	r3, r3, #10
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0xcc>
 8004cd2:	e015      	b.n	8004d00 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7fd f900 	bl	8001ed8 <HAL_GetTick>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cde:	f7fd f8fb 	bl	8001ed8 <HAL_GetTick>
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b64      	cmp	r3, #100	; 0x64
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e283      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cf0:	4b88      	ldr	r3, [pc, #544]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	2380      	movs	r3, #128	; 0x80
 8004cf6:	029b      	lsls	r3, r3, #10
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d1f0      	bne.n	8004cde <HAL_RCC_OscConfig+0xf6>
 8004cfc:	e000      	b.n	8004d00 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cfe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2202      	movs	r2, #2
 8004d06:	4013      	ands	r3, r2
 8004d08:	d100      	bne.n	8004d0c <HAL_RCC_OscConfig+0x124>
 8004d0a:	e099      	b.n	8004e40 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d0c:	4b81      	ldr	r3, [pc, #516]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2238      	movs	r2, #56	; 0x38
 8004d12:	4013      	ands	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d16:	4b7f      	ldr	r3, [pc, #508]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b10      	cmp	r3, #16
 8004d24:	d102      	bne.n	8004d2c <HAL_RCC_OscConfig+0x144>
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d002      	beq.n	8004d32 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d135      	bne.n	8004d9e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d32:	4b78      	ldr	r3, [pc, #480]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	2380      	movs	r3, #128	; 0x80
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	d005      	beq.n	8004d4a <HAL_RCC_OscConfig+0x162>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e256      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4a:	4b72      	ldr	r3, [pc, #456]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	4a74      	ldr	r2, [pc, #464]	; (8004f20 <HAL_RCC_OscConfig+0x338>)
 8004d50:	4013      	ands	r3, r2
 8004d52:	0019      	movs	r1, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	021a      	lsls	r2, r3, #8
 8004d5a:	4b6e      	ldr	r3, [pc, #440]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d112      	bne.n	8004d8c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004d66:	4b6b      	ldr	r3, [pc, #428]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a6e      	ldr	r2, [pc, #440]	; (8004f24 <HAL_RCC_OscConfig+0x33c>)
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	0019      	movs	r1, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	4b67      	ldr	r3, [pc, #412]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004d76:	430a      	orrs	r2, r1
 8004d78:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004d7a:	4b66      	ldr	r3, [pc, #408]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	0adb      	lsrs	r3, r3, #11
 8004d80:	2207      	movs	r2, #7
 8004d82:	4013      	ands	r3, r2
 8004d84:	4a68      	ldr	r2, [pc, #416]	; (8004f28 <HAL_RCC_OscConfig+0x340>)
 8004d86:	40da      	lsrs	r2, r3
 8004d88:	4b68      	ldr	r3, [pc, #416]	; (8004f2c <HAL_RCC_OscConfig+0x344>)
 8004d8a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d8c:	4b68      	ldr	r3, [pc, #416]	; (8004f30 <HAL_RCC_OscConfig+0x348>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	0018      	movs	r0, r3
 8004d92:	f7fd f845 	bl	8001e20 <HAL_InitTick>
 8004d96:	1e03      	subs	r3, r0, #0
 8004d98:	d051      	beq.n	8004e3e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e22c      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d030      	beq.n	8004e08 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004da6:	4b5b      	ldr	r3, [pc, #364]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a5e      	ldr	r2, [pc, #376]	; (8004f24 <HAL_RCC_OscConfig+0x33c>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	0019      	movs	r1, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	4b57      	ldr	r3, [pc, #348]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004db6:	430a      	orrs	r2, r1
 8004db8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004dba:	4b56      	ldr	r3, [pc, #344]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b55      	ldr	r3, [pc, #340]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004dc0:	2180      	movs	r1, #128	; 0x80
 8004dc2:	0049      	lsls	r1, r1, #1
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dc8:	f7fd f886 	bl	8001ed8 <HAL_GetTick>
 8004dcc:	0003      	movs	r3, r0
 8004dce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004dd0:	e008      	b.n	8004de4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd2:	f7fd f881 	bl	8001ed8 <HAL_GetTick>
 8004dd6:	0002      	movs	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e209      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004de4:	4b4b      	ldr	r3, [pc, #300]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	2380      	movs	r3, #128	; 0x80
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4013      	ands	r3, r2
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df0:	4b48      	ldr	r3, [pc, #288]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4a4a      	ldr	r2, [pc, #296]	; (8004f20 <HAL_RCC_OscConfig+0x338>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	0019      	movs	r1, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	021a      	lsls	r2, r3, #8
 8004e00:	4b44      	ldr	r3, [pc, #272]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
 8004e06:	e01b      	b.n	8004e40 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004e08:	4b42      	ldr	r3, [pc, #264]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	4b41      	ldr	r3, [pc, #260]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004e0e:	4949      	ldr	r1, [pc, #292]	; (8004f34 <HAL_RCC_OscConfig+0x34c>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e14:	f7fd f860 	bl	8001ed8 <HAL_GetTick>
 8004e18:	0003      	movs	r3, r0
 8004e1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e1e:	f7fd f85b 	bl	8001ed8 <HAL_GetTick>
 8004e22:	0002      	movs	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e1e3      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e30:	4b38      	ldr	r3, [pc, #224]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	2380      	movs	r3, #128	; 0x80
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d1f0      	bne.n	8004e1e <HAL_RCC_OscConfig+0x236>
 8004e3c:	e000      	b.n	8004e40 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e3e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2208      	movs	r2, #8
 8004e46:	4013      	ands	r3, r2
 8004e48:	d047      	beq.n	8004eda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004e4a:	4b32      	ldr	r3, [pc, #200]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2238      	movs	r2, #56	; 0x38
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b18      	cmp	r3, #24
 8004e54:	d10a      	bne.n	8004e6c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004e56:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d03c      	beq.n	8004eda <HAL_RCC_OscConfig+0x2f2>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d138      	bne.n	8004eda <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e1c5      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d019      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004e74:	4b27      	ldr	r3, [pc, #156]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004e76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e78:	4b26      	ldr	r3, [pc, #152]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fd f82a 	bl	8001ed8 <HAL_GetTick>
 8004e84:	0003      	movs	r3, r0
 8004e86:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e8a:	f7fd f825 	bl	8001ed8 <HAL_GetTick>
 8004e8e:	0002      	movs	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e1ad      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e9c:	4b1d      	ldr	r3, [pc, #116]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	d0f1      	beq.n	8004e8a <HAL_RCC_OscConfig+0x2a2>
 8004ea6:	e018      	b.n	8004eda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004ea8:	4b1a      	ldr	r3, [pc, #104]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004eaa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004eae:	2101      	movs	r1, #1
 8004eb0:	438a      	bics	r2, r1
 8004eb2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fd f810 	bl	8001ed8 <HAL_GetTick>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ebc:	e008      	b.n	8004ed0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ebe:	f7fd f80b 	bl	8001ed8 <HAL_GetTick>
 8004ec2:	0002      	movs	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d901      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	e193      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ed0:	4b10      	ldr	r3, [pc, #64]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed4:	2202      	movs	r2, #2
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	d1f1      	bne.n	8004ebe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2204      	movs	r2, #4
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d100      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x2fe>
 8004ee4:	e0c6      	b.n	8005074 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ee6:	231f      	movs	r3, #31
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	2200      	movs	r2, #0
 8004eec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004eee:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2238      	movs	r2, #56	; 0x38
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d11e      	bne.n	8004f38 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <HAL_RCC_OscConfig+0x32c>)
 8004efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004efe:	2202      	movs	r2, #2
 8004f00:	4013      	ands	r3, r2
 8004f02:	d100      	bne.n	8004f06 <HAL_RCC_OscConfig+0x31e>
 8004f04:	e0b6      	b.n	8005074 <HAL_RCC_OscConfig+0x48c>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d000      	beq.n	8004f10 <HAL_RCC_OscConfig+0x328>
 8004f0e:	e0b1      	b.n	8005074 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e171      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
 8004f14:	40021000 	.word	0x40021000
 8004f18:	fffeffff 	.word	0xfffeffff
 8004f1c:	fffbffff 	.word	0xfffbffff
 8004f20:	ffff80ff 	.word	0xffff80ff
 8004f24:	ffffc7ff 	.word	0xffffc7ff
 8004f28:	00f42400 	.word	0x00f42400
 8004f2c:	20000000 	.word	0x20000000
 8004f30:	20000004 	.word	0x20000004
 8004f34:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f38:	4bb1      	ldr	r3, [pc, #708]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8004f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	055b      	lsls	r3, r3, #21
 8004f40:	4013      	ands	r3, r2
 8004f42:	d101      	bne.n	8004f48 <HAL_RCC_OscConfig+0x360>
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x362>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d011      	beq.n	8004f72 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004f4e:	4bac      	ldr	r3, [pc, #688]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8004f50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f52:	4bab      	ldr	r3, [pc, #684]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8004f54:	2180      	movs	r1, #128	; 0x80
 8004f56:	0549      	lsls	r1, r1, #21
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f5c:	4ba8      	ldr	r3, [pc, #672]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8004f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f60:	2380      	movs	r3, #128	; 0x80
 8004f62:	055b      	lsls	r3, r3, #21
 8004f64:	4013      	ands	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004f6a:	231f      	movs	r3, #31
 8004f6c:	18fb      	adds	r3, r7, r3
 8004f6e:	2201      	movs	r2, #1
 8004f70:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f72:	4ba4      	ldr	r3, [pc, #656]	; (8005204 <HAL_RCC_OscConfig+0x61c>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	2380      	movs	r3, #128	; 0x80
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	d11a      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f7e:	4ba1      	ldr	r3, [pc, #644]	; (8005204 <HAL_RCC_OscConfig+0x61c>)
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	4ba0      	ldr	r3, [pc, #640]	; (8005204 <HAL_RCC_OscConfig+0x61c>)
 8004f84:	2180      	movs	r1, #128	; 0x80
 8004f86:	0049      	lsls	r1, r1, #1
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004f8c:	f7fc ffa4 	bl	8001ed8 <HAL_GetTick>
 8004f90:	0003      	movs	r3, r0
 8004f92:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f96:	f7fc ff9f 	bl	8001ed8 <HAL_GetTick>
 8004f9a:	0002      	movs	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e127      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fa8:	4b96      	ldr	r3, [pc, #600]	; (8005204 <HAL_RCC_OscConfig+0x61c>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d0f0      	beq.n	8004f96 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d106      	bne.n	8004fca <HAL_RCC_OscConfig+0x3e2>
 8004fbc:	4b90      	ldr	r3, [pc, #576]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8004fbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fc0:	4b8f      	ldr	r3, [pc, #572]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8004fc2:	2101      	movs	r1, #1
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004fc8:	e01c      	b.n	8005004 <HAL_RCC_OscConfig+0x41c>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b05      	cmp	r3, #5
 8004fd0:	d10c      	bne.n	8004fec <HAL_RCC_OscConfig+0x404>
 8004fd2:	4b8b      	ldr	r3, [pc, #556]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8004fd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fd6:	4b8a      	ldr	r3, [pc, #552]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8004fd8:	2104      	movs	r1, #4
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8004fde:	4b88      	ldr	r3, [pc, #544]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8004fe0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fe2:	4b87      	ldr	r3, [pc, #540]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004fea:	e00b      	b.n	8005004 <HAL_RCC_OscConfig+0x41c>
 8004fec:	4b84      	ldr	r3, [pc, #528]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8004fee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ff0:	4b83      	ldr	r3, [pc, #524]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8004ff2:	2101      	movs	r1, #1
 8004ff4:	438a      	bics	r2, r1
 8004ff6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ff8:	4b81      	ldr	r3, [pc, #516]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8004ffa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ffc:	4b80      	ldr	r3, [pc, #512]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8004ffe:	2104      	movs	r1, #4
 8005000:	438a      	bics	r2, r1
 8005002:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d014      	beq.n	8005036 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500c:	f7fc ff64 	bl	8001ed8 <HAL_GetTick>
 8005010:	0003      	movs	r3, r0
 8005012:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005014:	e009      	b.n	800502a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005016:	f7fc ff5f 	bl	8001ed8 <HAL_GetTick>
 800501a:	0002      	movs	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	4a79      	ldr	r2, [pc, #484]	; (8005208 <HAL_RCC_OscConfig+0x620>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e0e6      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800502a:	4b75      	ldr	r3, [pc, #468]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 800502c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502e:	2202      	movs	r2, #2
 8005030:	4013      	ands	r3, r2
 8005032:	d0f0      	beq.n	8005016 <HAL_RCC_OscConfig+0x42e>
 8005034:	e013      	b.n	800505e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005036:	f7fc ff4f 	bl	8001ed8 <HAL_GetTick>
 800503a:	0003      	movs	r3, r0
 800503c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800503e:	e009      	b.n	8005054 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005040:	f7fc ff4a 	bl	8001ed8 <HAL_GetTick>
 8005044:	0002      	movs	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	4a6f      	ldr	r2, [pc, #444]	; (8005208 <HAL_RCC_OscConfig+0x620>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e0d1      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005054:	4b6a      	ldr	r3, [pc, #424]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8005056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005058:	2202      	movs	r2, #2
 800505a:	4013      	ands	r3, r2
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800505e:	231f      	movs	r3, #31
 8005060:	18fb      	adds	r3, r7, r3
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d105      	bne.n	8005074 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005068:	4b65      	ldr	r3, [pc, #404]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 800506a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800506c:	4b64      	ldr	r3, [pc, #400]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 800506e:	4967      	ldr	r1, [pc, #412]	; (800520c <HAL_RCC_OscConfig+0x624>)
 8005070:	400a      	ands	r2, r1
 8005072:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d100      	bne.n	800507e <HAL_RCC_OscConfig+0x496>
 800507c:	e0bb      	b.n	80051f6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800507e:	4b60      	ldr	r3, [pc, #384]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	2238      	movs	r2, #56	; 0x38
 8005084:	4013      	ands	r3, r2
 8005086:	2b10      	cmp	r3, #16
 8005088:	d100      	bne.n	800508c <HAL_RCC_OscConfig+0x4a4>
 800508a:	e07b      	b.n	8005184 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d156      	bne.n	8005142 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005094:	4b5a      	ldr	r3, [pc, #360]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	4b59      	ldr	r3, [pc, #356]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 800509a:	495d      	ldr	r1, [pc, #372]	; (8005210 <HAL_RCC_OscConfig+0x628>)
 800509c:	400a      	ands	r2, r1
 800509e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fc ff1a 	bl	8001ed8 <HAL_GetTick>
 80050a4:	0003      	movs	r3, r0
 80050a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050aa:	f7fc ff15 	bl	8001ed8 <HAL_GetTick>
 80050ae:	0002      	movs	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e09d      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050bc:	4b50      	ldr	r3, [pc, #320]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	2380      	movs	r3, #128	; 0x80
 80050c2:	049b      	lsls	r3, r3, #18
 80050c4:	4013      	ands	r3, r2
 80050c6:	d1f0      	bne.n	80050aa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050c8:	4b4d      	ldr	r3, [pc, #308]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	4a51      	ldr	r2, [pc, #324]	; (8005214 <HAL_RCC_OscConfig+0x62c>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	0019      	movs	r1, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1a      	ldr	r2, [r3, #32]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f4:	431a      	orrs	r2, r3
 80050f6:	4b42      	ldr	r3, [pc, #264]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 80050f8:	430a      	orrs	r2, r1
 80050fa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050fc:	4b40      	ldr	r3, [pc, #256]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b3f      	ldr	r3, [pc, #252]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8005102:	2180      	movs	r1, #128	; 0x80
 8005104:	0449      	lsls	r1, r1, #17
 8005106:	430a      	orrs	r2, r1
 8005108:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800510a:	4b3d      	ldr	r3, [pc, #244]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	4b3c      	ldr	r3, [pc, #240]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8005110:	2180      	movs	r1, #128	; 0x80
 8005112:	0549      	lsls	r1, r1, #21
 8005114:	430a      	orrs	r2, r1
 8005116:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fc fede 	bl	8001ed8 <HAL_GetTick>
 800511c:	0003      	movs	r3, r0
 800511e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005122:	f7fc fed9 	bl	8001ed8 <HAL_GetTick>
 8005126:	0002      	movs	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e061      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005134:	4b32      	ldr	r3, [pc, #200]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	2380      	movs	r3, #128	; 0x80
 800513a:	049b      	lsls	r3, r3, #18
 800513c:	4013      	ands	r3, r2
 800513e:	d0f0      	beq.n	8005122 <HAL_RCC_OscConfig+0x53a>
 8005140:	e059      	b.n	80051f6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005142:	4b2f      	ldr	r3, [pc, #188]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	4b2e      	ldr	r3, [pc, #184]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8005148:	4931      	ldr	r1, [pc, #196]	; (8005210 <HAL_RCC_OscConfig+0x628>)
 800514a:	400a      	ands	r2, r1
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800514e:	f7fc fec3 	bl	8001ed8 <HAL_GetTick>
 8005152:	0003      	movs	r3, r0
 8005154:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005158:	f7fc febe 	bl	8001ed8 <HAL_GetTick>
 800515c:	0002      	movs	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e046      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516a:	4b25      	ldr	r3, [pc, #148]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	2380      	movs	r3, #128	; 0x80
 8005170:	049b      	lsls	r3, r3, #18
 8005172:	4013      	ands	r3, r2
 8005174:	d1f0      	bne.n	8005158 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005176:	4b22      	ldr	r3, [pc, #136]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	4b21      	ldr	r3, [pc, #132]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 800517c:	4926      	ldr	r1, [pc, #152]	; (8005218 <HAL_RCC_OscConfig+0x630>)
 800517e:	400a      	ands	r2, r1
 8005180:	60da      	str	r2, [r3, #12]
 8005182:	e038      	b.n	80051f6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e033      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005190:	4b1b      	ldr	r3, [pc, #108]	; (8005200 <HAL_RCC_OscConfig+0x618>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2203      	movs	r2, #3
 800519a:	401a      	ands	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d126      	bne.n	80051f2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2270      	movs	r2, #112	; 0x70
 80051a8:	401a      	ands	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d11f      	bne.n	80051f2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	23fe      	movs	r3, #254	; 0xfe
 80051b6:	01db      	lsls	r3, r3, #7
 80051b8:	401a      	ands	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051be:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d116      	bne.n	80051f2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	23f8      	movs	r3, #248	; 0xf8
 80051c8:	039b      	lsls	r3, r3, #14
 80051ca:	401a      	ands	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d10e      	bne.n	80051f2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	23e0      	movs	r3, #224	; 0xe0
 80051d8:	051b      	lsls	r3, r3, #20
 80051da:	401a      	ands	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d106      	bne.n	80051f2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	0f5b      	lsrs	r3, r3, #29
 80051e8:	075a      	lsls	r2, r3, #29
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d001      	beq.n	80051f6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	0018      	movs	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	b008      	add	sp, #32
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	40021000 	.word	0x40021000
 8005204:	40007000 	.word	0x40007000
 8005208:	00001388 	.word	0x00001388
 800520c:	efffffff 	.word	0xefffffff
 8005210:	feffffff 	.word	0xfeffffff
 8005214:	11c1808c 	.word	0x11c1808c
 8005218:	eefefffc 	.word	0xeefefffc

0800521c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d101      	bne.n	8005230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0e9      	b.n	8005404 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005230:	4b76      	ldr	r3, [pc, #472]	; (800540c <HAL_RCC_ClockConfig+0x1f0>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2207      	movs	r2, #7
 8005236:	4013      	ands	r3, r2
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d91e      	bls.n	800527c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523e:	4b73      	ldr	r3, [pc, #460]	; (800540c <HAL_RCC_ClockConfig+0x1f0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2207      	movs	r2, #7
 8005244:	4393      	bics	r3, r2
 8005246:	0019      	movs	r1, r3
 8005248:	4b70      	ldr	r3, [pc, #448]	; (800540c <HAL_RCC_ClockConfig+0x1f0>)
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005250:	f7fc fe42 	bl	8001ed8 <HAL_GetTick>
 8005254:	0003      	movs	r3, r0
 8005256:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005258:	e009      	b.n	800526e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800525a:	f7fc fe3d 	bl	8001ed8 <HAL_GetTick>
 800525e:	0002      	movs	r2, r0
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	4a6a      	ldr	r2, [pc, #424]	; (8005410 <HAL_RCC_ClockConfig+0x1f4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d901      	bls.n	800526e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e0ca      	b.n	8005404 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800526e:	4b67      	ldr	r3, [pc, #412]	; (800540c <HAL_RCC_ClockConfig+0x1f0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2207      	movs	r2, #7
 8005274:	4013      	ands	r3, r2
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d1ee      	bne.n	800525a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2202      	movs	r2, #2
 8005282:	4013      	ands	r3, r2
 8005284:	d015      	beq.n	80052b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2204      	movs	r2, #4
 800528c:	4013      	ands	r3, r2
 800528e:	d006      	beq.n	800529e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005290:	4b60      	ldr	r3, [pc, #384]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	4b5f      	ldr	r3, [pc, #380]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 8005296:	21e0      	movs	r1, #224	; 0xe0
 8005298:	01c9      	lsls	r1, r1, #7
 800529a:	430a      	orrs	r2, r1
 800529c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800529e:	4b5d      	ldr	r3, [pc, #372]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	4a5d      	ldr	r2, [pc, #372]	; (8005418 <HAL_RCC_ClockConfig+0x1fc>)
 80052a4:	4013      	ands	r3, r2
 80052a6:	0019      	movs	r1, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	4b59      	ldr	r3, [pc, #356]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 80052ae:	430a      	orrs	r2, r1
 80052b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2201      	movs	r2, #1
 80052b8:	4013      	ands	r3, r2
 80052ba:	d057      	beq.n	800536c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d107      	bne.n	80052d4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052c4:	4b53      	ldr	r3, [pc, #332]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	2380      	movs	r3, #128	; 0x80
 80052ca:	029b      	lsls	r3, r3, #10
 80052cc:	4013      	ands	r3, r2
 80052ce:	d12b      	bne.n	8005328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e097      	b.n	8005404 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d107      	bne.n	80052ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052dc:	4b4d      	ldr	r3, [pc, #308]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	2380      	movs	r3, #128	; 0x80
 80052e2:	049b      	lsls	r3, r3, #18
 80052e4:	4013      	ands	r3, r2
 80052e6:	d11f      	bne.n	8005328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e08b      	b.n	8005404 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d107      	bne.n	8005304 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052f4:	4b47      	ldr	r3, [pc, #284]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	2380      	movs	r3, #128	; 0x80
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4013      	ands	r3, r2
 80052fe:	d113      	bne.n	8005328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e07f      	b.n	8005404 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d106      	bne.n	800531a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800530c:	4b41      	ldr	r3, [pc, #260]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 800530e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005310:	2202      	movs	r2, #2
 8005312:	4013      	ands	r3, r2
 8005314:	d108      	bne.n	8005328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e074      	b.n	8005404 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531a:	4b3e      	ldr	r3, [pc, #248]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 800531c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531e:	2202      	movs	r2, #2
 8005320:	4013      	ands	r3, r2
 8005322:	d101      	bne.n	8005328 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e06d      	b.n	8005404 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005328:	4b3a      	ldr	r3, [pc, #232]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	2207      	movs	r2, #7
 800532e:	4393      	bics	r3, r2
 8005330:	0019      	movs	r1, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	4b37      	ldr	r3, [pc, #220]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 8005338:	430a      	orrs	r2, r1
 800533a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800533c:	f7fc fdcc 	bl	8001ed8 <HAL_GetTick>
 8005340:	0003      	movs	r3, r0
 8005342:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005344:	e009      	b.n	800535a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005346:	f7fc fdc7 	bl	8001ed8 <HAL_GetTick>
 800534a:	0002      	movs	r2, r0
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	4a2f      	ldr	r2, [pc, #188]	; (8005410 <HAL_RCC_ClockConfig+0x1f4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e054      	b.n	8005404 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800535a:	4b2e      	ldr	r3, [pc, #184]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	2238      	movs	r2, #56	; 0x38
 8005360:	401a      	ands	r2, r3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	429a      	cmp	r2, r3
 800536a:	d1ec      	bne.n	8005346 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800536c:	4b27      	ldr	r3, [pc, #156]	; (800540c <HAL_RCC_ClockConfig+0x1f0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2207      	movs	r2, #7
 8005372:	4013      	ands	r3, r2
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d21e      	bcs.n	80053b8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b24      	ldr	r3, [pc, #144]	; (800540c <HAL_RCC_ClockConfig+0x1f0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2207      	movs	r2, #7
 8005380:	4393      	bics	r3, r2
 8005382:	0019      	movs	r1, r3
 8005384:	4b21      	ldr	r3, [pc, #132]	; (800540c <HAL_RCC_ClockConfig+0x1f0>)
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800538c:	f7fc fda4 	bl	8001ed8 <HAL_GetTick>
 8005390:	0003      	movs	r3, r0
 8005392:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005394:	e009      	b.n	80053aa <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005396:	f7fc fd9f 	bl	8001ed8 <HAL_GetTick>
 800539a:	0002      	movs	r2, r0
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	4a1b      	ldr	r2, [pc, #108]	; (8005410 <HAL_RCC_ClockConfig+0x1f4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e02c      	b.n	8005404 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80053aa:	4b18      	ldr	r3, [pc, #96]	; (800540c <HAL_RCC_ClockConfig+0x1f0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2207      	movs	r2, #7
 80053b0:	4013      	ands	r3, r2
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d1ee      	bne.n	8005396 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2204      	movs	r2, #4
 80053be:	4013      	ands	r3, r2
 80053c0:	d009      	beq.n	80053d6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80053c2:	4b14      	ldr	r3, [pc, #80]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	4a15      	ldr	r2, [pc, #84]	; (800541c <HAL_RCC_ClockConfig+0x200>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	0019      	movs	r1, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	4b10      	ldr	r3, [pc, #64]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 80053d2:	430a      	orrs	r2, r1
 80053d4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80053d6:	f000 f829 	bl	800542c <HAL_RCC_GetSysClockFreq>
 80053da:	0001      	movs	r1, r0
 80053dc:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <HAL_RCC_ClockConfig+0x1f8>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	0a1b      	lsrs	r3, r3, #8
 80053e2:	220f      	movs	r2, #15
 80053e4:	401a      	ands	r2, r3
 80053e6:	4b0e      	ldr	r3, [pc, #56]	; (8005420 <HAL_RCC_ClockConfig+0x204>)
 80053e8:	0092      	lsls	r2, r2, #2
 80053ea:	58d3      	ldr	r3, [r2, r3]
 80053ec:	221f      	movs	r2, #31
 80053ee:	4013      	ands	r3, r2
 80053f0:	000a      	movs	r2, r1
 80053f2:	40da      	lsrs	r2, r3
 80053f4:	4b0b      	ldr	r3, [pc, #44]	; (8005424 <HAL_RCC_ClockConfig+0x208>)
 80053f6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80053f8:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <HAL_RCC_ClockConfig+0x20c>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7fc fd0f 	bl	8001e20 <HAL_InitTick>
 8005402:	0003      	movs	r3, r0
}
 8005404:	0018      	movs	r0, r3
 8005406:	46bd      	mov	sp, r7
 8005408:	b004      	add	sp, #16
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40022000 	.word	0x40022000
 8005410:	00001388 	.word	0x00001388
 8005414:	40021000 	.word	0x40021000
 8005418:	fffff0ff 	.word	0xfffff0ff
 800541c:	ffff8fff 	.word	0xffff8fff
 8005420:	080082d4 	.word	0x080082d4
 8005424:	20000000 	.word	0x20000000
 8005428:	20000004 	.word	0x20000004

0800542c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005432:	4b3c      	ldr	r3, [pc, #240]	; (8005524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	2238      	movs	r2, #56	; 0x38
 8005438:	4013      	ands	r3, r2
 800543a:	d10f      	bne.n	800545c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800543c:	4b39      	ldr	r3, [pc, #228]	; (8005524 <HAL_RCC_GetSysClockFreq+0xf8>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	0adb      	lsrs	r3, r3, #11
 8005442:	2207      	movs	r2, #7
 8005444:	4013      	ands	r3, r2
 8005446:	2201      	movs	r2, #1
 8005448:	409a      	lsls	r2, r3
 800544a:	0013      	movs	r3, r2
 800544c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800544e:	6839      	ldr	r1, [r7, #0]
 8005450:	4835      	ldr	r0, [pc, #212]	; (8005528 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005452:	f7fa fe57 	bl	8000104 <__udivsi3>
 8005456:	0003      	movs	r3, r0
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	e05d      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800545c:	4b31      	ldr	r3, [pc, #196]	; (8005524 <HAL_RCC_GetSysClockFreq+0xf8>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2238      	movs	r2, #56	; 0x38
 8005462:	4013      	ands	r3, r2
 8005464:	2b08      	cmp	r3, #8
 8005466:	d102      	bne.n	800546e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005468:	4b30      	ldr	r3, [pc, #192]	; (800552c <HAL_RCC_GetSysClockFreq+0x100>)
 800546a:	613b      	str	r3, [r7, #16]
 800546c:	e054      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800546e:	4b2d      	ldr	r3, [pc, #180]	; (8005524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2238      	movs	r2, #56	; 0x38
 8005474:	4013      	ands	r3, r2
 8005476:	2b10      	cmp	r3, #16
 8005478:	d138      	bne.n	80054ec <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800547a:	4b2a      	ldr	r3, [pc, #168]	; (8005524 <HAL_RCC_GetSysClockFreq+0xf8>)
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	2203      	movs	r2, #3
 8005480:	4013      	ands	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005484:	4b27      	ldr	r3, [pc, #156]	; (8005524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	091b      	lsrs	r3, r3, #4
 800548a:	2207      	movs	r2, #7
 800548c:	4013      	ands	r3, r2
 800548e:	3301      	adds	r3, #1
 8005490:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b03      	cmp	r3, #3
 8005496:	d10d      	bne.n	80054b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4824      	ldr	r0, [pc, #144]	; (800552c <HAL_RCC_GetSysClockFreq+0x100>)
 800549c:	f7fa fe32 	bl	8000104 <__udivsi3>
 80054a0:	0003      	movs	r3, r0
 80054a2:	0019      	movs	r1, r3
 80054a4:	4b1f      	ldr	r3, [pc, #124]	; (8005524 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	0a1b      	lsrs	r3, r3, #8
 80054aa:	227f      	movs	r2, #127	; 0x7f
 80054ac:	4013      	ands	r3, r2
 80054ae:	434b      	muls	r3, r1
 80054b0:	617b      	str	r3, [r7, #20]
        break;
 80054b2:	e00d      	b.n	80054d0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	481c      	ldr	r0, [pc, #112]	; (8005528 <HAL_RCC_GetSysClockFreq+0xfc>)
 80054b8:	f7fa fe24 	bl	8000104 <__udivsi3>
 80054bc:	0003      	movs	r3, r0
 80054be:	0019      	movs	r1, r3
 80054c0:	4b18      	ldr	r3, [pc, #96]	; (8005524 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	0a1b      	lsrs	r3, r3, #8
 80054c6:	227f      	movs	r2, #127	; 0x7f
 80054c8:	4013      	ands	r3, r2
 80054ca:	434b      	muls	r3, r1
 80054cc:	617b      	str	r3, [r7, #20]
        break;
 80054ce:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80054d0:	4b14      	ldr	r3, [pc, #80]	; (8005524 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	0f5b      	lsrs	r3, r3, #29
 80054d6:	2207      	movs	r2, #7
 80054d8:	4013      	ands	r3, r2
 80054da:	3301      	adds	r3, #1
 80054dc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	6978      	ldr	r0, [r7, #20]
 80054e2:	f7fa fe0f 	bl	8000104 <__udivsi3>
 80054e6:	0003      	movs	r3, r0
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	e015      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80054ec:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <HAL_RCC_GetSysClockFreq+0xf8>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2238      	movs	r2, #56	; 0x38
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d103      	bne.n	8005500 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	e00b      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005500:	4b08      	ldr	r3, [pc, #32]	; (8005524 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2238      	movs	r2, #56	; 0x38
 8005506:	4013      	ands	r3, r2
 8005508:	2b18      	cmp	r3, #24
 800550a:	d103      	bne.n	8005514 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800550c:	23fa      	movs	r3, #250	; 0xfa
 800550e:	01db      	lsls	r3, r3, #7
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	e001      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005514:	2300      	movs	r3, #0
 8005516:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005518:	693b      	ldr	r3, [r7, #16]
}
 800551a:	0018      	movs	r0, r3
 800551c:	46bd      	mov	sp, r7
 800551e:	b006      	add	sp, #24
 8005520:	bd80      	pop	{r7, pc}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	40021000 	.word	0x40021000
 8005528:	00f42400 	.word	0x00f42400
 800552c:	007a1200 	.word	0x007a1200

08005530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005538:	2313      	movs	r3, #19
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	2200      	movs	r2, #0
 800553e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005540:	2312      	movs	r3, #18
 8005542:	18fb      	adds	r3, r7, r3
 8005544:	2200      	movs	r2, #0
 8005546:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	2380      	movs	r3, #128	; 0x80
 800554e:	029b      	lsls	r3, r3, #10
 8005550:	4013      	ands	r3, r2
 8005552:	d100      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005554:	e0a3      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005556:	2011      	movs	r0, #17
 8005558:	183b      	adds	r3, r7, r0
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800555e:	4ba5      	ldr	r3, [pc, #660]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005560:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005562:	2380      	movs	r3, #128	; 0x80
 8005564:	055b      	lsls	r3, r3, #21
 8005566:	4013      	ands	r3, r2
 8005568:	d110      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800556a:	4ba2      	ldr	r3, [pc, #648]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800556c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800556e:	4ba1      	ldr	r3, [pc, #644]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005570:	2180      	movs	r1, #128	; 0x80
 8005572:	0549      	lsls	r1, r1, #21
 8005574:	430a      	orrs	r2, r1
 8005576:	63da      	str	r2, [r3, #60]	; 0x3c
 8005578:	4b9e      	ldr	r3, [pc, #632]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800557a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800557c:	2380      	movs	r3, #128	; 0x80
 800557e:	055b      	lsls	r3, r3, #21
 8005580:	4013      	ands	r3, r2
 8005582:	60bb      	str	r3, [r7, #8]
 8005584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005586:	183b      	adds	r3, r7, r0
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800558c:	4b9a      	ldr	r3, [pc, #616]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4b99      	ldr	r3, [pc, #612]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005592:	2180      	movs	r1, #128	; 0x80
 8005594:	0049      	lsls	r1, r1, #1
 8005596:	430a      	orrs	r2, r1
 8005598:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800559a:	f7fc fc9d 	bl	8001ed8 <HAL_GetTick>
 800559e:	0003      	movs	r3, r0
 80055a0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055a2:	e00b      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a4:	f7fc fc98 	bl	8001ed8 <HAL_GetTick>
 80055a8:	0002      	movs	r2, r0
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d904      	bls.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80055b2:	2313      	movs	r3, #19
 80055b4:	18fb      	adds	r3, r7, r3
 80055b6:	2203      	movs	r2, #3
 80055b8:	701a      	strb	r2, [r3, #0]
        break;
 80055ba:	e005      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055bc:	4b8e      	ldr	r3, [pc, #568]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	2380      	movs	r3, #128	; 0x80
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	4013      	ands	r3, r2
 80055c6:	d0ed      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80055c8:	2313      	movs	r3, #19
 80055ca:	18fb      	adds	r3, r7, r3
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d154      	bne.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055d2:	4b88      	ldr	r3, [pc, #544]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055d6:	23c0      	movs	r3, #192	; 0xc0
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4013      	ands	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d019      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d014      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055ee:	4b81      	ldr	r3, [pc, #516]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f2:	4a82      	ldr	r2, [pc, #520]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055f8:	4b7e      	ldr	r3, [pc, #504]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055fc:	4b7d      	ldr	r3, [pc, #500]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80055fe:	2180      	movs	r1, #128	; 0x80
 8005600:	0249      	lsls	r1, r1, #9
 8005602:	430a      	orrs	r2, r1
 8005604:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005606:	4b7b      	ldr	r3, [pc, #492]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005608:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800560a:	4b7a      	ldr	r3, [pc, #488]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800560c:	497c      	ldr	r1, [pc, #496]	; (8005800 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800560e:	400a      	ands	r2, r1
 8005610:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005612:	4b78      	ldr	r3, [pc, #480]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	2201      	movs	r2, #1
 800561c:	4013      	ands	r3, r2
 800561e:	d016      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005620:	f7fc fc5a 	bl	8001ed8 <HAL_GetTick>
 8005624:	0003      	movs	r3, r0
 8005626:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005628:	e00c      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800562a:	f7fc fc55 	bl	8001ed8 <HAL_GetTick>
 800562e:	0002      	movs	r2, r0
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	4a73      	ldr	r2, [pc, #460]	; (8005804 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d904      	bls.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800563a:	2313      	movs	r3, #19
 800563c:	18fb      	adds	r3, r7, r3
 800563e:	2203      	movs	r2, #3
 8005640:	701a      	strb	r2, [r3, #0]
            break;
 8005642:	e004      	b.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005644:	4b6b      	ldr	r3, [pc, #428]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005648:	2202      	movs	r2, #2
 800564a:	4013      	ands	r3, r2
 800564c:	d0ed      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800564e:	2313      	movs	r3, #19
 8005650:	18fb      	adds	r3, r7, r3
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005658:	4b66      	ldr	r3, [pc, #408]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800565a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565c:	4a67      	ldr	r2, [pc, #412]	; (80057fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800565e:	4013      	ands	r3, r2
 8005660:	0019      	movs	r1, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005666:	4b63      	ldr	r3, [pc, #396]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005668:	430a      	orrs	r2, r1
 800566a:	65da      	str	r2, [r3, #92]	; 0x5c
 800566c:	e00c      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800566e:	2312      	movs	r3, #18
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	2213      	movs	r2, #19
 8005674:	18ba      	adds	r2, r7, r2
 8005676:	7812      	ldrb	r2, [r2, #0]
 8005678:	701a      	strb	r2, [r3, #0]
 800567a:	e005      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567c:	2312      	movs	r3, #18
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	2213      	movs	r2, #19
 8005682:	18ba      	adds	r2, r7, r2
 8005684:	7812      	ldrb	r2, [r2, #0]
 8005686:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005688:	2311      	movs	r3, #17
 800568a:	18fb      	adds	r3, r7, r3
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d105      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005692:	4b58      	ldr	r3, [pc, #352]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005696:	4b57      	ldr	r3, [pc, #348]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005698:	495b      	ldr	r1, [pc, #364]	; (8005808 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800569a:	400a      	ands	r2, r1
 800569c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2201      	movs	r2, #1
 80056a4:	4013      	ands	r3, r2
 80056a6:	d009      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056a8:	4b52      	ldr	r3, [pc, #328]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ac:	2203      	movs	r2, #3
 80056ae:	4393      	bics	r3, r2
 80056b0:	0019      	movs	r1, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	4b4f      	ldr	r3, [pc, #316]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056b8:	430a      	orrs	r2, r1
 80056ba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2210      	movs	r2, #16
 80056c2:	4013      	ands	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056c6:	4b4b      	ldr	r3, [pc, #300]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ca:	4a50      	ldr	r2, [pc, #320]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	0019      	movs	r1, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	4b47      	ldr	r3, [pc, #284]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056d6:	430a      	orrs	r2, r1
 80056d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	2380      	movs	r3, #128	; 0x80
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4013      	ands	r3, r2
 80056e4:	d009      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056e6:	4b43      	ldr	r3, [pc, #268]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ea:	4a49      	ldr	r2, [pc, #292]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	0019      	movs	r1, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	4b3f      	ldr	r3, [pc, #252]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80056f6:	430a      	orrs	r2, r1
 80056f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	2380      	movs	r3, #128	; 0x80
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	4013      	ands	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005706:	4b3b      	ldr	r3, [pc, #236]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570a:	4a42      	ldr	r2, [pc, #264]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800570c:	4013      	ands	r3, r2
 800570e:	0019      	movs	r1, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699a      	ldr	r2, [r3, #24]
 8005714:	4b37      	ldr	r3, [pc, #220]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005716:	430a      	orrs	r2, r1
 8005718:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2220      	movs	r2, #32
 8005720:	4013      	ands	r3, r2
 8005722:	d009      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005724:	4b33      	ldr	r3, [pc, #204]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005728:	4a3b      	ldr	r2, [pc, #236]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800572a:	4013      	ands	r3, r2
 800572c:	0019      	movs	r1, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	4b30      	ldr	r3, [pc, #192]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005734:	430a      	orrs	r2, r1
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	2380      	movs	r3, #128	; 0x80
 800573e:	01db      	lsls	r3, r3, #7
 8005740:	4013      	ands	r3, r2
 8005742:	d015      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005744:	4b2b      	ldr	r3, [pc, #172]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	0899      	lsrs	r1, r3, #2
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	4b28      	ldr	r3, [pc, #160]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005752:	430a      	orrs	r2, r1
 8005754:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69da      	ldr	r2, [r3, #28]
 800575a:	2380      	movs	r3, #128	; 0x80
 800575c:	05db      	lsls	r3, r3, #23
 800575e:	429a      	cmp	r2, r3
 8005760:	d106      	bne.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005762:	4b24      	ldr	r3, [pc, #144]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	4b23      	ldr	r3, [pc, #140]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005768:	2180      	movs	r1, #128	; 0x80
 800576a:	0249      	lsls	r1, r1, #9
 800576c:	430a      	orrs	r2, r1
 800576e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	2380      	movs	r3, #128	; 0x80
 8005776:	039b      	lsls	r3, r3, #14
 8005778:	4013      	ands	r3, r2
 800577a:	d016      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800577c:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005780:	4a26      	ldr	r2, [pc, #152]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005782:	4013      	ands	r3, r2
 8005784:	0019      	movs	r1, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1a      	ldr	r2, [r3, #32]
 800578a:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800578c:	430a      	orrs	r2, r1
 800578e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1a      	ldr	r2, [r3, #32]
 8005794:	2380      	movs	r3, #128	; 0x80
 8005796:	03db      	lsls	r3, r3, #15
 8005798:	429a      	cmp	r2, r3
 800579a:	d106      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800579c:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800579e:	68da      	ldr	r2, [r3, #12]
 80057a0:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057a2:	2180      	movs	r1, #128	; 0x80
 80057a4:	0449      	lsls	r1, r1, #17
 80057a6:	430a      	orrs	r2, r1
 80057a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	2380      	movs	r3, #128	; 0x80
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	4013      	ands	r3, r2
 80057b4:	d016      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80057b6:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	4a19      	ldr	r2, [pc, #100]	; (8005820 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80057bc:	4013      	ands	r3, r2
 80057be:	0019      	movs	r1, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	4b0b      	ldr	r3, [pc, #44]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057c6:	430a      	orrs	r2, r1
 80057c8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	2380      	movs	r3, #128	; 0x80
 80057d0:	01db      	lsls	r3, r3, #7
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d106      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80057d6:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80057dc:	2180      	movs	r1, #128	; 0x80
 80057de:	0249      	lsls	r1, r1, #9
 80057e0:	430a      	orrs	r2, r1
 80057e2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80057e4:	2312      	movs	r3, #18
 80057e6:	18fb      	adds	r3, r7, r3
 80057e8:	781b      	ldrb	r3, [r3, #0]
}
 80057ea:	0018      	movs	r0, r3
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b006      	add	sp, #24
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	40021000 	.word	0x40021000
 80057f8:	40007000 	.word	0x40007000
 80057fc:	fffffcff 	.word	0xfffffcff
 8005800:	fffeffff 	.word	0xfffeffff
 8005804:	00001388 	.word	0x00001388
 8005808:	efffffff 	.word	0xefffffff
 800580c:	fffff3ff 	.word	0xfffff3ff
 8005810:	fff3ffff 	.word	0xfff3ffff
 8005814:	ffcfffff 	.word	0xffcfffff
 8005818:	ffffcfff 	.word	0xffffcfff
 800581c:	ffbfffff 	.word	0xffbfffff
 8005820:	ffff3fff 	.word	0xffff3fff

08005824 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e04a      	b.n	80058cc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	223d      	movs	r2, #61	; 0x3d
 800583a:	5c9b      	ldrb	r3, [r3, r2]
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d107      	bne.n	8005852 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	223c      	movs	r2, #60	; 0x3c
 8005846:	2100      	movs	r1, #0
 8005848:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	0018      	movs	r0, r3
 800584e:	f7fc f8eb 	bl	8001a28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	223d      	movs	r2, #61	; 0x3d
 8005856:	2102      	movs	r1, #2
 8005858:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3304      	adds	r3, #4
 8005862:	0019      	movs	r1, r3
 8005864:	0010      	movs	r0, r2
 8005866:	f000 fe5b 	bl	8006520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2248      	movs	r2, #72	; 0x48
 800586e:	2101      	movs	r1, #1
 8005870:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	223e      	movs	r2, #62	; 0x3e
 8005876:	2101      	movs	r1, #1
 8005878:	5499      	strb	r1, [r3, r2]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	223f      	movs	r2, #63	; 0x3f
 800587e:	2101      	movs	r1, #1
 8005880:	5499      	strb	r1, [r3, r2]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2240      	movs	r2, #64	; 0x40
 8005886:	2101      	movs	r1, #1
 8005888:	5499      	strb	r1, [r3, r2]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2241      	movs	r2, #65	; 0x41
 800588e:	2101      	movs	r1, #1
 8005890:	5499      	strb	r1, [r3, r2]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2242      	movs	r2, #66	; 0x42
 8005896:	2101      	movs	r1, #1
 8005898:	5499      	strb	r1, [r3, r2]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2243      	movs	r2, #67	; 0x43
 800589e:	2101      	movs	r1, #1
 80058a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2244      	movs	r2, #68	; 0x44
 80058a6:	2101      	movs	r1, #1
 80058a8:	5499      	strb	r1, [r3, r2]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2245      	movs	r2, #69	; 0x45
 80058ae:	2101      	movs	r1, #1
 80058b0:	5499      	strb	r1, [r3, r2]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2246      	movs	r2, #70	; 0x46
 80058b6:	2101      	movs	r1, #1
 80058b8:	5499      	strb	r1, [r3, r2]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2247      	movs	r2, #71	; 0x47
 80058be:	2101      	movs	r1, #1
 80058c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	223d      	movs	r2, #61	; 0x3d
 80058c6:	2101      	movs	r1, #1
 80058c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	0018      	movs	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b002      	add	sp, #8
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d108      	bne.n	80058f6 <HAL_TIM_PWM_Start+0x22>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	223e      	movs	r2, #62	; 0x3e
 80058e8:	5c9b      	ldrb	r3, [r3, r2]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	1e5a      	subs	r2, r3, #1
 80058f0:	4193      	sbcs	r3, r2
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	e037      	b.n	8005966 <HAL_TIM_PWM_Start+0x92>
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d108      	bne.n	800590e <HAL_TIM_PWM_Start+0x3a>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	223f      	movs	r2, #63	; 0x3f
 8005900:	5c9b      	ldrb	r3, [r3, r2]
 8005902:	b2db      	uxtb	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	1e5a      	subs	r2, r3, #1
 8005908:	4193      	sbcs	r3, r2
 800590a:	b2db      	uxtb	r3, r3
 800590c:	e02b      	b.n	8005966 <HAL_TIM_PWM_Start+0x92>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b08      	cmp	r3, #8
 8005912:	d108      	bne.n	8005926 <HAL_TIM_PWM_Start+0x52>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2240      	movs	r2, #64	; 0x40
 8005918:	5c9b      	ldrb	r3, [r3, r2]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	1e5a      	subs	r2, r3, #1
 8005920:	4193      	sbcs	r3, r2
 8005922:	b2db      	uxtb	r3, r3
 8005924:	e01f      	b.n	8005966 <HAL_TIM_PWM_Start+0x92>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b0c      	cmp	r3, #12
 800592a:	d108      	bne.n	800593e <HAL_TIM_PWM_Start+0x6a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2241      	movs	r2, #65	; 0x41
 8005930:	5c9b      	ldrb	r3, [r3, r2]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	1e5a      	subs	r2, r3, #1
 8005938:	4193      	sbcs	r3, r2
 800593a:	b2db      	uxtb	r3, r3
 800593c:	e013      	b.n	8005966 <HAL_TIM_PWM_Start+0x92>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b10      	cmp	r3, #16
 8005942:	d108      	bne.n	8005956 <HAL_TIM_PWM_Start+0x82>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2242      	movs	r2, #66	; 0x42
 8005948:	5c9b      	ldrb	r3, [r3, r2]
 800594a:	b2db      	uxtb	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	1e5a      	subs	r2, r3, #1
 8005950:	4193      	sbcs	r3, r2
 8005952:	b2db      	uxtb	r3, r3
 8005954:	e007      	b.n	8005966 <HAL_TIM_PWM_Start+0x92>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2243      	movs	r2, #67	; 0x43
 800595a:	5c9b      	ldrb	r3, [r3, r2]
 800595c:	b2db      	uxtb	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	1e5a      	subs	r2, r3, #1
 8005962:	4193      	sbcs	r3, r2
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e081      	b.n	8005a72 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <HAL_TIM_PWM_Start+0xaa>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	223e      	movs	r2, #62	; 0x3e
 8005978:	2102      	movs	r1, #2
 800597a:	5499      	strb	r1, [r3, r2]
 800597c:	e023      	b.n	80059c6 <HAL_TIM_PWM_Start+0xf2>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b04      	cmp	r3, #4
 8005982:	d104      	bne.n	800598e <HAL_TIM_PWM_Start+0xba>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	223f      	movs	r2, #63	; 0x3f
 8005988:	2102      	movs	r1, #2
 800598a:	5499      	strb	r1, [r3, r2]
 800598c:	e01b      	b.n	80059c6 <HAL_TIM_PWM_Start+0xf2>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b08      	cmp	r3, #8
 8005992:	d104      	bne.n	800599e <HAL_TIM_PWM_Start+0xca>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2240      	movs	r2, #64	; 0x40
 8005998:	2102      	movs	r1, #2
 800599a:	5499      	strb	r1, [r3, r2]
 800599c:	e013      	b.n	80059c6 <HAL_TIM_PWM_Start+0xf2>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b0c      	cmp	r3, #12
 80059a2:	d104      	bne.n	80059ae <HAL_TIM_PWM_Start+0xda>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2241      	movs	r2, #65	; 0x41
 80059a8:	2102      	movs	r1, #2
 80059aa:	5499      	strb	r1, [r3, r2]
 80059ac:	e00b      	b.n	80059c6 <HAL_TIM_PWM_Start+0xf2>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b10      	cmp	r3, #16
 80059b2:	d104      	bne.n	80059be <HAL_TIM_PWM_Start+0xea>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2242      	movs	r2, #66	; 0x42
 80059b8:	2102      	movs	r1, #2
 80059ba:	5499      	strb	r1, [r3, r2]
 80059bc:	e003      	b.n	80059c6 <HAL_TIM_PWM_Start+0xf2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2243      	movs	r2, #67	; 0x43
 80059c2:	2102      	movs	r1, #2
 80059c4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6839      	ldr	r1, [r7, #0]
 80059cc:	2201      	movs	r2, #1
 80059ce:	0018      	movs	r0, r3
 80059d0:	f001 f8b8 	bl	8006b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a28      	ldr	r2, [pc, #160]	; (8005a7c <HAL_TIM_PWM_Start+0x1a8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_TIM_PWM_Start+0x11e>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a27      	ldr	r2, [pc, #156]	; (8005a80 <HAL_TIM_PWM_Start+0x1ac>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_TIM_PWM_Start+0x11e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a25      	ldr	r2, [pc, #148]	; (8005a84 <HAL_TIM_PWM_Start+0x1b0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d101      	bne.n	80059f6 <HAL_TIM_PWM_Start+0x122>
 80059f2:	2301      	movs	r3, #1
 80059f4:	e000      	b.n	80059f8 <HAL_TIM_PWM_Start+0x124>
 80059f6:	2300      	movs	r3, #0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d008      	beq.n	8005a0e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2180      	movs	r1, #128	; 0x80
 8005a08:	0209      	lsls	r1, r1, #8
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1a      	ldr	r2, [pc, #104]	; (8005a7c <HAL_TIM_PWM_Start+0x1a8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00a      	beq.n	8005a2e <HAL_TIM_PWM_Start+0x15a>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	2380      	movs	r3, #128	; 0x80
 8005a1e:	05db      	lsls	r3, r3, #23
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d004      	beq.n	8005a2e <HAL_TIM_PWM_Start+0x15a>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a17      	ldr	r2, [pc, #92]	; (8005a88 <HAL_TIM_PWM_Start+0x1b4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d116      	bne.n	8005a5c <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <HAL_TIM_PWM_Start+0x1b8>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b06      	cmp	r3, #6
 8005a3e:	d016      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x19a>
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	2380      	movs	r3, #128	; 0x80
 8005a44:	025b      	lsls	r3, r3, #9
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d011      	beq.n	8005a6e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2101      	movs	r1, #1
 8005a56:	430a      	orrs	r2, r1
 8005a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5a:	e008      	b.n	8005a6e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2101      	movs	r1, #1
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e000      	b.n	8005a70 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	0018      	movs	r0, r3
 8005a74:	46bd      	mov	sp, r7
 8005a76:	b004      	add	sp, #16
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	46c0      	nop			; (mov r8, r8)
 8005a7c:	40012c00 	.word	0x40012c00
 8005a80:	40014400 	.word	0x40014400
 8005a84:	40014800 	.word	0x40014800
 8005a88:	40000400 	.word	0x40000400
 8005a8c:	00010007 	.word	0x00010007

08005a90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6839      	ldr	r1, [r7, #0]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f001 f84e 	bl	8006b44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a35      	ldr	r2, [pc, #212]	; (8005b84 <HAL_TIM_PWM_Stop+0xf4>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d009      	beq.n	8005ac6 <HAL_TIM_PWM_Stop+0x36>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a34      	ldr	r2, [pc, #208]	; (8005b88 <HAL_TIM_PWM_Stop+0xf8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d004      	beq.n	8005ac6 <HAL_TIM_PWM_Stop+0x36>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a32      	ldr	r2, [pc, #200]	; (8005b8c <HAL_TIM_PWM_Stop+0xfc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d101      	bne.n	8005aca <HAL_TIM_PWM_Stop+0x3a>
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e000      	b.n	8005acc <HAL_TIM_PWM_Stop+0x3c>
 8005aca:	2300      	movs	r3, #0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d013      	beq.n	8005af8 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	4a2e      	ldr	r2, [pc, #184]	; (8005b90 <HAL_TIM_PWM_Stop+0x100>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d10d      	bne.n	8005af8 <HAL_TIM_PWM_Stop+0x68>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	4a2c      	ldr	r2, [pc, #176]	; (8005b94 <HAL_TIM_PWM_Stop+0x104>)
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d107      	bne.n	8005af8 <HAL_TIM_PWM_Stop+0x68>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4929      	ldr	r1, [pc, #164]	; (8005b98 <HAL_TIM_PWM_Stop+0x108>)
 8005af4:	400a      	ands	r2, r1
 8005af6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	4a24      	ldr	r2, [pc, #144]	; (8005b90 <HAL_TIM_PWM_Stop+0x100>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	d10d      	bne.n	8005b20 <HAL_TIM_PWM_Stop+0x90>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	4a22      	ldr	r2, [pc, #136]	; (8005b94 <HAL_TIM_PWM_Stop+0x104>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d107      	bne.n	8005b20 <HAL_TIM_PWM_Stop+0x90>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	438a      	bics	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <HAL_TIM_PWM_Stop+0xa0>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	223e      	movs	r2, #62	; 0x3e
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	5499      	strb	r1, [r3, r2]
 8005b2e:	e023      	b.n	8005b78 <HAL_TIM_PWM_Stop+0xe8>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d104      	bne.n	8005b40 <HAL_TIM_PWM_Stop+0xb0>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	223f      	movs	r2, #63	; 0x3f
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	5499      	strb	r1, [r3, r2]
 8005b3e:	e01b      	b.n	8005b78 <HAL_TIM_PWM_Stop+0xe8>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d104      	bne.n	8005b50 <HAL_TIM_PWM_Stop+0xc0>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2240      	movs	r2, #64	; 0x40
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	5499      	strb	r1, [r3, r2]
 8005b4e:	e013      	b.n	8005b78 <HAL_TIM_PWM_Stop+0xe8>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b0c      	cmp	r3, #12
 8005b54:	d104      	bne.n	8005b60 <HAL_TIM_PWM_Stop+0xd0>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2241      	movs	r2, #65	; 0x41
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	5499      	strb	r1, [r3, r2]
 8005b5e:	e00b      	b.n	8005b78 <HAL_TIM_PWM_Stop+0xe8>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b10      	cmp	r3, #16
 8005b64:	d104      	bne.n	8005b70 <HAL_TIM_PWM_Stop+0xe0>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2242      	movs	r2, #66	; 0x42
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	5499      	strb	r1, [r3, r2]
 8005b6e:	e003      	b.n	8005b78 <HAL_TIM_PWM_Stop+0xe8>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2243      	movs	r2, #67	; 0x43
 8005b74:	2101      	movs	r1, #1
 8005b76:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	0018      	movs	r0, r3
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	b002      	add	sp, #8
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	46c0      	nop			; (mov r8, r8)
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40014400 	.word	0x40014400
 8005b8c:	40014800 	.word	0x40014800
 8005b90:	00001111 	.word	0x00001111
 8005b94:	00000444 	.word	0x00000444
 8005b98:	ffff7fff 	.word	0xffff7fff

08005b9c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	001a      	movs	r2, r3
 8005baa:	1cbb      	adds	r3, r7, #2
 8005bac:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bae:	2317      	movs	r3, #23
 8005bb0:	18fb      	adds	r3, r7, r3
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d108      	bne.n	8005bce <HAL_TIM_PWM_Start_DMA+0x32>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	223e      	movs	r2, #62	; 0x3e
 8005bc0:	5c9b      	ldrb	r3, [r3, r2]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	3b02      	subs	r3, #2
 8005bc6:	425a      	negs	r2, r3
 8005bc8:	4153      	adcs	r3, r2
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	e037      	b.n	8005c3e <HAL_TIM_PWM_Start_DMA+0xa2>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d108      	bne.n	8005be6 <HAL_TIM_PWM_Start_DMA+0x4a>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	223f      	movs	r2, #63	; 0x3f
 8005bd8:	5c9b      	ldrb	r3, [r3, r2]
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	3b02      	subs	r3, #2
 8005bde:	425a      	negs	r2, r3
 8005be0:	4153      	adcs	r3, r2
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	e02b      	b.n	8005c3e <HAL_TIM_PWM_Start_DMA+0xa2>
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d108      	bne.n	8005bfe <HAL_TIM_PWM_Start_DMA+0x62>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2240      	movs	r2, #64	; 0x40
 8005bf0:	5c9b      	ldrb	r3, [r3, r2]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	3b02      	subs	r3, #2
 8005bf6:	425a      	negs	r2, r3
 8005bf8:	4153      	adcs	r3, r2
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	e01f      	b.n	8005c3e <HAL_TIM_PWM_Start_DMA+0xa2>
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b0c      	cmp	r3, #12
 8005c02:	d108      	bne.n	8005c16 <HAL_TIM_PWM_Start_DMA+0x7a>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2241      	movs	r2, #65	; 0x41
 8005c08:	5c9b      	ldrb	r3, [r3, r2]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	3b02      	subs	r3, #2
 8005c0e:	425a      	negs	r2, r3
 8005c10:	4153      	adcs	r3, r2
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	e013      	b.n	8005c3e <HAL_TIM_PWM_Start_DMA+0xa2>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	d108      	bne.n	8005c2e <HAL_TIM_PWM_Start_DMA+0x92>
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2242      	movs	r2, #66	; 0x42
 8005c20:	5c9b      	ldrb	r3, [r3, r2]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	3b02      	subs	r3, #2
 8005c26:	425a      	negs	r2, r3
 8005c28:	4153      	adcs	r3, r2
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	e007      	b.n	8005c3e <HAL_TIM_PWM_Start_DMA+0xa2>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2243      	movs	r2, #67	; 0x43
 8005c32:	5c9b      	ldrb	r3, [r3, r2]
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	3b02      	subs	r3, #2
 8005c38:	425a      	negs	r2, r3
 8005c3a:	4153      	adcs	r3, r2
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8005c42:	2302      	movs	r3, #2
 8005c44:	e189      	b.n	8005f5a <HAL_TIM_PWM_Start_DMA+0x3be>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d108      	bne.n	8005c5e <HAL_TIM_PWM_Start_DMA+0xc2>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	223e      	movs	r2, #62	; 0x3e
 8005c50:	5c9b      	ldrb	r3, [r3, r2]
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	3b01      	subs	r3, #1
 8005c56:	425a      	negs	r2, r3
 8005c58:	4153      	adcs	r3, r2
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	e037      	b.n	8005cce <HAL_TIM_PWM_Start_DMA+0x132>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d108      	bne.n	8005c76 <HAL_TIM_PWM_Start_DMA+0xda>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	223f      	movs	r2, #63	; 0x3f
 8005c68:	5c9b      	ldrb	r3, [r3, r2]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	425a      	negs	r2, r3
 8005c70:	4153      	adcs	r3, r2
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	e02b      	b.n	8005cce <HAL_TIM_PWM_Start_DMA+0x132>
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d108      	bne.n	8005c8e <HAL_TIM_PWM_Start_DMA+0xf2>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2240      	movs	r2, #64	; 0x40
 8005c80:	5c9b      	ldrb	r3, [r3, r2]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	3b01      	subs	r3, #1
 8005c86:	425a      	negs	r2, r3
 8005c88:	4153      	adcs	r3, r2
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	e01f      	b.n	8005cce <HAL_TIM_PWM_Start_DMA+0x132>
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b0c      	cmp	r3, #12
 8005c92:	d108      	bne.n	8005ca6 <HAL_TIM_PWM_Start_DMA+0x10a>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2241      	movs	r2, #65	; 0x41
 8005c98:	5c9b      	ldrb	r3, [r3, r2]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	425a      	negs	r2, r3
 8005ca0:	4153      	adcs	r3, r2
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	e013      	b.n	8005cce <HAL_TIM_PWM_Start_DMA+0x132>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b10      	cmp	r3, #16
 8005caa:	d108      	bne.n	8005cbe <HAL_TIM_PWM_Start_DMA+0x122>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2242      	movs	r2, #66	; 0x42
 8005cb0:	5c9b      	ldrb	r3, [r3, r2]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	425a      	negs	r2, r3
 8005cb8:	4153      	adcs	r3, r2
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	e007      	b.n	8005cce <HAL_TIM_PWM_Start_DMA+0x132>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2243      	movs	r2, #67	; 0x43
 8005cc2:	5c9b      	ldrb	r3, [r3, r2]
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	425a      	negs	r2, r3
 8005cca:	4153      	adcs	r3, r2
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d035      	beq.n	8005d3e <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_TIM_PWM_Start_DMA+0x144>
 8005cd8:	1cbb      	adds	r3, r7, #2
 8005cda:	881b      	ldrh	r3, [r3, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e13a      	b.n	8005f5a <HAL_TIM_PWM_Start_DMA+0x3be>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d104      	bne.n	8005cf4 <HAL_TIM_PWM_Start_DMA+0x158>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	223e      	movs	r2, #62	; 0x3e
 8005cee:	2102      	movs	r1, #2
 8005cf0:	5499      	strb	r1, [r3, r2]
 8005cf2:	e026      	b.n	8005d42 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	2b04      	cmp	r3, #4
 8005cf8:	d104      	bne.n	8005d04 <HAL_TIM_PWM_Start_DMA+0x168>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	223f      	movs	r2, #63	; 0x3f
 8005cfe:	2102      	movs	r1, #2
 8005d00:	5499      	strb	r1, [r3, r2]
 8005d02:	e01e      	b.n	8005d42 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d104      	bne.n	8005d14 <HAL_TIM_PWM_Start_DMA+0x178>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2240      	movs	r2, #64	; 0x40
 8005d0e:	2102      	movs	r1, #2
 8005d10:	5499      	strb	r1, [r3, r2]
 8005d12:	e016      	b.n	8005d42 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b0c      	cmp	r3, #12
 8005d18:	d104      	bne.n	8005d24 <HAL_TIM_PWM_Start_DMA+0x188>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2241      	movs	r2, #65	; 0x41
 8005d1e:	2102      	movs	r1, #2
 8005d20:	5499      	strb	r1, [r3, r2]
 8005d22:	e00e      	b.n	8005d42 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b10      	cmp	r3, #16
 8005d28:	d104      	bne.n	8005d34 <HAL_TIM_PWM_Start_DMA+0x198>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2242      	movs	r2, #66	; 0x42
 8005d2e:	2102      	movs	r1, #2
 8005d30:	5499      	strb	r1, [r3, r2]
 8005d32:	e006      	b.n	8005d42 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2243      	movs	r2, #67	; 0x43
 8005d38:	2102      	movs	r1, #2
 8005d3a:	5499      	strb	r1, [r3, r2]
 8005d3c:	e001      	b.n	8005d42 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e10b      	b.n	8005f5a <HAL_TIM_PWM_Start_DMA+0x3be>
  }

  switch (Channel)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b0c      	cmp	r3, #12
 8005d46:	d100      	bne.n	8005d4a <HAL_TIM_PWM_Start_DMA+0x1ae>
 8005d48:	e080      	b.n	8005e4c <HAL_TIM_PWM_Start_DMA+0x2b0>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b0c      	cmp	r3, #12
 8005d4e:	d900      	bls.n	8005d52 <HAL_TIM_PWM_Start_DMA+0x1b6>
 8005d50:	e0a1      	b.n	8005e96 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d054      	beq.n	8005e02 <HAL_TIM_PWM_Start_DMA+0x266>
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	2b08      	cmp	r3, #8
 8005d5c:	d900      	bls.n	8005d60 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8005d5e:	e09a      	b.n	8005e96 <HAL_TIM_PWM_Start_DMA+0x2fa>
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_TIM_PWM_Start_DMA+0x1d2>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d025      	beq.n	8005db8 <HAL_TIM_PWM_Start_DMA+0x21c>
 8005d6c:	e093      	b.n	8005e96 <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d72:	4a7c      	ldr	r2, [pc, #496]	; (8005f64 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8005d74:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d7a:	4a7b      	ldr	r2, [pc, #492]	; (8005f68 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8005d7c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	4a7a      	ldr	r2, [pc, #488]	; (8005f6c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8005d84:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3334      	adds	r3, #52	; 0x34
 8005d92:	001a      	movs	r2, r3
 8005d94:	1cbb      	adds	r3, r7, #2
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	f7fc feb2 	bl	8002b00 <HAL_DMA_Start_IT>
 8005d9c:	1e03      	subs	r3, r0, #0
 8005d9e:	d001      	beq.n	8005da4 <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0da      	b.n	8005f5a <HAL_TIM_PWM_Start_DMA+0x3be>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	0089      	lsls	r1, r1, #2
 8005db2:	430a      	orrs	r2, r1
 8005db4:	60da      	str	r2, [r3, #12]
      break;
 8005db6:	e073      	b.n	8005ea0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	4a69      	ldr	r2, [pc, #420]	; (8005f64 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8005dbe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	4a68      	ldr	r2, [pc, #416]	; (8005f68 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8005dc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	4a67      	ldr	r2, [pc, #412]	; (8005f6c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8005dce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005dd4:	6879      	ldr	r1, [r7, #4]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3338      	adds	r3, #56	; 0x38
 8005ddc:	001a      	movs	r2, r3
 8005dde:	1cbb      	adds	r3, r7, #2
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	f7fc fe8d 	bl	8002b00 <HAL_DMA_Start_IT>
 8005de6:	1e03      	subs	r3, r0, #0
 8005de8:	d001      	beq.n	8005dee <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e0b5      	b.n	8005f5a <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2180      	movs	r1, #128	; 0x80
 8005dfa:	00c9      	lsls	r1, r1, #3
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	60da      	str	r2, [r3, #12]
      break;
 8005e00:	e04e      	b.n	8005ea0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e06:	4a57      	ldr	r2, [pc, #348]	; (8005f64 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8005e08:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	4a56      	ldr	r2, [pc, #344]	; (8005f68 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8005e10:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e16:	4a55      	ldr	r2, [pc, #340]	; (8005f6c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8005e18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005e1e:	6879      	ldr	r1, [r7, #4]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	333c      	adds	r3, #60	; 0x3c
 8005e26:	001a      	movs	r2, r3
 8005e28:	1cbb      	adds	r3, r7, #2
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	f7fc fe68 	bl	8002b00 <HAL_DMA_Start_IT>
 8005e30:	1e03      	subs	r3, r0, #0
 8005e32:	d001      	beq.n	8005e38 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e090      	b.n	8005f5a <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68da      	ldr	r2, [r3, #12]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2180      	movs	r1, #128	; 0x80
 8005e44:	0109      	lsls	r1, r1, #4
 8005e46:	430a      	orrs	r2, r1
 8005e48:	60da      	str	r2, [r3, #12]
      break;
 8005e4a:	e029      	b.n	8005ea0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e50:	4a44      	ldr	r2, [pc, #272]	; (8005f64 <HAL_TIM_PWM_Start_DMA+0x3c8>)
 8005e52:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	4a43      	ldr	r2, [pc, #268]	; (8005f68 <HAL_TIM_PWM_Start_DMA+0x3cc>)
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	4a42      	ldr	r2, [pc, #264]	; (8005f6c <HAL_TIM_PWM_Start_DMA+0x3d0>)
 8005e62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005e68:	6879      	ldr	r1, [r7, #4]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3340      	adds	r3, #64	; 0x40
 8005e70:	001a      	movs	r2, r3
 8005e72:	1cbb      	adds	r3, r7, #2
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	f7fc fe43 	bl	8002b00 <HAL_DMA_Start_IT>
 8005e7a:	1e03      	subs	r3, r0, #0
 8005e7c:	d001      	beq.n	8005e82 <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e06b      	b.n	8005f5a <HAL_TIM_PWM_Start_DMA+0x3be>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68da      	ldr	r2, [r3, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2180      	movs	r1, #128	; 0x80
 8005e8e:	0149      	lsls	r1, r1, #5
 8005e90:	430a      	orrs	r2, r1
 8005e92:	60da      	str	r2, [r3, #12]
      break;
 8005e94:	e004      	b.n	8005ea0 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 8005e96:	2317      	movs	r3, #23
 8005e98:	18fb      	adds	r3, r7, r3
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
      break;
 8005e9e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8005ea0:	2317      	movs	r3, #23
 8005ea2:	18fb      	adds	r3, r7, r3
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d154      	bne.n	8005f54 <HAL_TIM_PWM_Start_DMA+0x3b8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f000 fe46 	bl	8006b44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a2c      	ldr	r2, [pc, #176]	; (8005f70 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d009      	beq.n	8005ed6 <HAL_TIM_PWM_Start_DMA+0x33a>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a2b      	ldr	r2, [pc, #172]	; (8005f74 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <HAL_TIM_PWM_Start_DMA+0x33a>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a29      	ldr	r2, [pc, #164]	; (8005f78 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d101      	bne.n	8005eda <HAL_TIM_PWM_Start_DMA+0x33e>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <HAL_TIM_PWM_Start_DMA+0x340>
 8005eda:	2300      	movs	r3, #0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d008      	beq.n	8005ef2 <HAL_TIM_PWM_Start_DMA+0x356>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2180      	movs	r1, #128	; 0x80
 8005eec:	0209      	lsls	r1, r1, #8
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a1e      	ldr	r2, [pc, #120]	; (8005f70 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00a      	beq.n	8005f12 <HAL_TIM_PWM_Start_DMA+0x376>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	2380      	movs	r3, #128	; 0x80
 8005f02:	05db      	lsls	r3, r3, #23
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d004      	beq.n	8005f12 <HAL_TIM_PWM_Start_DMA+0x376>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1b      	ldr	r2, [pc, #108]	; (8005f7c <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d116      	bne.n	8005f40 <HAL_TIM_PWM_Start_DMA+0x3a4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	4a19      	ldr	r2, [pc, #100]	; (8005f80 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b06      	cmp	r3, #6
 8005f22:	d016      	beq.n	8005f52 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	2380      	movs	r3, #128	; 0x80
 8005f28:	025b      	lsls	r3, r3, #9
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d011      	beq.n	8005f52 <HAL_TIM_PWM_Start_DMA+0x3b6>
      {
        __HAL_TIM_ENABLE(htim);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2101      	movs	r1, #1
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f3e:	e008      	b.n	8005f52 <HAL_TIM_PWM_Start_DMA+0x3b6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	e000      	b.n	8005f54 <HAL_TIM_PWM_Start_DMA+0x3b8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f52:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8005f54:	2317      	movs	r3, #23
 8005f56:	18fb      	adds	r3, r7, r3
 8005f58:	781b      	ldrb	r3, [r3, #0]
}
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	b006      	add	sp, #24
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	0800640d 	.word	0x0800640d
 8005f68:	080064b7 	.word	0x080064b7
 8005f6c:	08006379 	.word	0x08006379
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40014400 	.word	0x40014400
 8005f78:	40014800 	.word	0x40014800
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	00010007 	.word	0x00010007

08005f84 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f8e:	230f      	movs	r3, #15
 8005f90:	18fb      	adds	r3, r7, r3
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b0c      	cmp	r3, #12
 8005f9a:	d039      	beq.n	8006010 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b0c      	cmp	r3, #12
 8005fa0:	d844      	bhi.n	800602c <HAL_TIM_PWM_Stop_DMA+0xa8>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d025      	beq.n	8005ff4 <HAL_TIM_PWM_Stop_DMA+0x70>
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2b08      	cmp	r3, #8
 8005fac:	d83e      	bhi.n	800602c <HAL_TIM_PWM_Stop_DMA+0xa8>
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_TIM_PWM_Stop_DMA+0x38>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d00e      	beq.n	8005fd8 <HAL_TIM_PWM_Stop_DMA+0x54>
 8005fba:	e037      	b.n	800602c <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	495a      	ldr	r1, [pc, #360]	; (8006130 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8005fc8:	400a      	ands	r2, r1
 8005fca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	f7fc fe1b 	bl	8002c0c <HAL_DMA_Abort_IT>
      break;
 8005fd6:	e02e      	b.n	8006036 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68da      	ldr	r2, [r3, #12]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4954      	ldr	r1, [pc, #336]	; (8006134 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8005fe4:	400a      	ands	r2, r1
 8005fe6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fec:	0018      	movs	r0, r3
 8005fee:	f7fc fe0d 	bl	8002c0c <HAL_DMA_Abort_IT>
      break;
 8005ff2:	e020      	b.n	8006036 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	494e      	ldr	r1, [pc, #312]	; (8006138 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8006000:	400a      	ands	r2, r1
 8006002:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	0018      	movs	r0, r3
 800600a:	f7fc fdff 	bl	8002c0c <HAL_DMA_Abort_IT>
      break;
 800600e:	e012      	b.n	8006036 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4948      	ldr	r1, [pc, #288]	; (800613c <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 800601c:	400a      	ands	r2, r1
 800601e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	0018      	movs	r0, r3
 8006026:	f7fc fdf1 	bl	8002c0c <HAL_DMA_Abort_IT>
      break;
 800602a:	e004      	b.n	8006036 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 800602c:	230f      	movs	r3, #15
 800602e:	18fb      	adds	r3, r7, r3
 8006030:	2201      	movs	r2, #1
 8006032:	701a      	strb	r2, [r3, #0]
      break;
 8006034:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8006036:	230f      	movs	r3, #15
 8006038:	18fb      	adds	r3, r7, r3
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d000      	beq.n	8006042 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8006040:	e06e      	b.n	8006120 <HAL_TIM_PWM_Stop_DMA+0x19c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	6839      	ldr	r1, [r7, #0]
 8006048:	2200      	movs	r2, #0
 800604a:	0018      	movs	r0, r3
 800604c:	f000 fd7a 	bl	8006b44 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a3a      	ldr	r2, [pc, #232]	; (8006140 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d009      	beq.n	800606e <HAL_TIM_PWM_Stop_DMA+0xea>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a39      	ldr	r2, [pc, #228]	; (8006144 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d004      	beq.n	800606e <HAL_TIM_PWM_Stop_DMA+0xea>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a37      	ldr	r2, [pc, #220]	; (8006148 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d101      	bne.n	8006072 <HAL_TIM_PWM_Stop_DMA+0xee>
 800606e:	2301      	movs	r3, #1
 8006070:	e000      	b.n	8006074 <HAL_TIM_PWM_Stop_DMA+0xf0>
 8006072:	2300      	movs	r3, #0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d013      	beq.n	80060a0 <HAL_TIM_PWM_Stop_DMA+0x11c>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	4a33      	ldr	r2, [pc, #204]	; (800614c <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8006080:	4013      	ands	r3, r2
 8006082:	d10d      	bne.n	80060a0 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	4a31      	ldr	r2, [pc, #196]	; (8006150 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 800608c:	4013      	ands	r3, r2
 800608e:	d107      	bne.n	80060a0 <HAL_TIM_PWM_Stop_DMA+0x11c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	492e      	ldr	r1, [pc, #184]	; (8006154 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 800609c:	400a      	ands	r2, r1
 800609e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	4a29      	ldr	r2, [pc, #164]	; (800614c <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 80060a8:	4013      	ands	r3, r2
 80060aa:	d10d      	bne.n	80060c8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	4a27      	ldr	r2, [pc, #156]	; (8006150 <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	d107      	bne.n	80060c8 <HAL_TIM_PWM_Stop_DMA+0x144>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2101      	movs	r1, #1
 80060c4:	438a      	bics	r2, r1
 80060c6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d104      	bne.n	80060d8 <HAL_TIM_PWM_Stop_DMA+0x154>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	223e      	movs	r2, #62	; 0x3e
 80060d2:	2101      	movs	r1, #1
 80060d4:	5499      	strb	r1, [r3, r2]
 80060d6:	e023      	b.n	8006120 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d104      	bne.n	80060e8 <HAL_TIM_PWM_Stop_DMA+0x164>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	223f      	movs	r2, #63	; 0x3f
 80060e2:	2101      	movs	r1, #1
 80060e4:	5499      	strb	r1, [r3, r2]
 80060e6:	e01b      	b.n	8006120 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b08      	cmp	r3, #8
 80060ec:	d104      	bne.n	80060f8 <HAL_TIM_PWM_Stop_DMA+0x174>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2240      	movs	r2, #64	; 0x40
 80060f2:	2101      	movs	r1, #1
 80060f4:	5499      	strb	r1, [r3, r2]
 80060f6:	e013      	b.n	8006120 <HAL_TIM_PWM_Stop_DMA+0x19c>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2b0c      	cmp	r3, #12
 80060fc:	d104      	bne.n	8006108 <HAL_TIM_PWM_Stop_DMA+0x184>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2241      	movs	r2, #65	; 0x41
 8006102:	2101      	movs	r1, #1
 8006104:	5499      	strb	r1, [r3, r2]
 8006106:	e00b      	b.n	8006120 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	2b10      	cmp	r3, #16
 800610c:	d104      	bne.n	8006118 <HAL_TIM_PWM_Stop_DMA+0x194>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2242      	movs	r2, #66	; 0x42
 8006112:	2101      	movs	r1, #1
 8006114:	5499      	strb	r1, [r3, r2]
 8006116:	e003      	b.n	8006120 <HAL_TIM_PWM_Stop_DMA+0x19c>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2243      	movs	r2, #67	; 0x43
 800611c:	2101      	movs	r1, #1
 800611e:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8006120:	230f      	movs	r3, #15
 8006122:	18fb      	adds	r3, r7, r3
 8006124:	781b      	ldrb	r3, [r3, #0]
}
 8006126:	0018      	movs	r0, r3
 8006128:	46bd      	mov	sp, r7
 800612a:	b004      	add	sp, #16
 800612c:	bd80      	pop	{r7, pc}
 800612e:	46c0      	nop			; (mov r8, r8)
 8006130:	fffffdff 	.word	0xfffffdff
 8006134:	fffffbff 	.word	0xfffffbff
 8006138:	fffff7ff 	.word	0xfffff7ff
 800613c:	ffffefff 	.word	0xffffefff
 8006140:	40012c00 	.word	0x40012c00
 8006144:	40014400 	.word	0x40014400
 8006148:	40014800 	.word	0x40014800
 800614c:	00001111 	.word	0x00001111
 8006150:	00000444 	.word	0x00000444
 8006154:	ffff7fff 	.word	0xffff7fff

08006158 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006164:	2317      	movs	r3, #23
 8006166:	18fb      	adds	r3, r7, r3
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	223c      	movs	r2, #60	; 0x3c
 8006170:	5c9b      	ldrb	r3, [r3, r2]
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <HAL_TIM_PWM_ConfigChannel+0x22>
 8006176:	2302      	movs	r3, #2
 8006178:	e0e5      	b.n	8006346 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	223c      	movs	r2, #60	; 0x3c
 800617e:	2101      	movs	r1, #1
 8006180:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2b14      	cmp	r3, #20
 8006186:	d900      	bls.n	800618a <HAL_TIM_PWM_ConfigChannel+0x32>
 8006188:	e0d1      	b.n	800632e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	009a      	lsls	r2, r3, #2
 800618e:	4b70      	ldr	r3, [pc, #448]	; (8006350 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8006190:	18d3      	adds	r3, r2, r3
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	0011      	movs	r1, r2
 800619e:	0018      	movs	r0, r3
 80061a0:	f000 fa34 	bl	800660c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2108      	movs	r1, #8
 80061b0:	430a      	orrs	r2, r1
 80061b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2104      	movs	r1, #4
 80061c0:	438a      	bics	r2, r1
 80061c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6999      	ldr	r1, [r3, #24]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	619a      	str	r2, [r3, #24]
      break;
 80061d6:	e0af      	b.n	8006338 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68ba      	ldr	r2, [r7, #8]
 80061de:	0011      	movs	r1, r2
 80061e0:	0018      	movs	r0, r3
 80061e2:	f000 fa93 	bl	800670c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	699a      	ldr	r2, [r3, #24]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2180      	movs	r1, #128	; 0x80
 80061f2:	0109      	lsls	r1, r1, #4
 80061f4:	430a      	orrs	r2, r1
 80061f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	699a      	ldr	r2, [r3, #24]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4954      	ldr	r1, [pc, #336]	; (8006354 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006204:	400a      	ands	r2, r1
 8006206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6999      	ldr	r1, [r3, #24]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	021a      	lsls	r2, r3, #8
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	430a      	orrs	r2, r1
 800621a:	619a      	str	r2, [r3, #24]
      break;
 800621c:	e08c      	b.n	8006338 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	0011      	movs	r1, r2
 8006226:	0018      	movs	r0, r3
 8006228:	f000 faee 	bl	8006808 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69da      	ldr	r2, [r3, #28]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2108      	movs	r1, #8
 8006238:	430a      	orrs	r2, r1
 800623a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69da      	ldr	r2, [r3, #28]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2104      	movs	r1, #4
 8006248:	438a      	bics	r2, r1
 800624a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69d9      	ldr	r1, [r3, #28]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	691a      	ldr	r2, [r3, #16]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	61da      	str	r2, [r3, #28]
      break;
 800625e:	e06b      	b.n	8006338 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	0011      	movs	r1, r2
 8006268:	0018      	movs	r0, r3
 800626a:	f000 fb4f 	bl	800690c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2180      	movs	r1, #128	; 0x80
 800627a:	0109      	lsls	r1, r1, #4
 800627c:	430a      	orrs	r2, r1
 800627e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	69da      	ldr	r2, [r3, #28]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4932      	ldr	r1, [pc, #200]	; (8006354 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800628c:	400a      	ands	r2, r1
 800628e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	69d9      	ldr	r1, [r3, #28]
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	021a      	lsls	r2, r3, #8
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	61da      	str	r2, [r3, #28]
      break;
 80062a4:	e048      	b.n	8006338 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	0011      	movs	r1, r2
 80062ae:	0018      	movs	r0, r3
 80062b0:	f000 fb90 	bl	80069d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2108      	movs	r1, #8
 80062c0:	430a      	orrs	r2, r1
 80062c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2104      	movs	r1, #4
 80062d0:	438a      	bics	r2, r1
 80062d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062e6:	e027      	b.n	8006338 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	0011      	movs	r1, r2
 80062f0:	0018      	movs	r0, r3
 80062f2:	f000 fbc9 	bl	8006a88 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2180      	movs	r1, #128	; 0x80
 8006302:	0109      	lsls	r1, r1, #4
 8006304:	430a      	orrs	r2, r1
 8006306:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4910      	ldr	r1, [pc, #64]	; (8006354 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8006314:	400a      	ands	r2, r1
 8006316:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	021a      	lsls	r2, r3, #8
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800632c:	e004      	b.n	8006338 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800632e:	2317      	movs	r3, #23
 8006330:	18fb      	adds	r3, r7, r3
 8006332:	2201      	movs	r2, #1
 8006334:	701a      	strb	r2, [r3, #0]
      break;
 8006336:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	223c      	movs	r2, #60	; 0x3c
 800633c:	2100      	movs	r1, #0
 800633e:	5499      	strb	r1, [r3, r2]

  return status;
 8006340:	2317      	movs	r3, #23
 8006342:	18fb      	adds	r3, r7, r3
 8006344:	781b      	ldrb	r3, [r3, #0]
}
 8006346:	0018      	movs	r0, r3
 8006348:	46bd      	mov	sp, r7
 800634a:	b006      	add	sp, #24
 800634c:	bd80      	pop	{r7, pc}
 800634e:	46c0      	nop			; (mov r8, r8)
 8006350:	08008314 	.word	0x08008314
 8006354:	fffffbff 	.word	0xfffffbff

08006358 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006360:	46c0      	nop			; (mov r8, r8)
 8006362:	46bd      	mov	sp, r7
 8006364:	b002      	add	sp, #8
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006370:	46c0      	nop			; (mov r8, r8)
 8006372:	46bd      	mov	sp, r7
 8006374:	b002      	add	sp, #8
 8006376:	bd80      	pop	{r7, pc}

08006378 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	429a      	cmp	r2, r3
 800638e:	d107      	bne.n	80063a0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2201      	movs	r2, #1
 8006394:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	223e      	movs	r2, #62	; 0x3e
 800639a:	2101      	movs	r1, #1
 800639c:	5499      	strb	r1, [r3, r2]
 800639e:	e02a      	b.n	80063f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d107      	bne.n	80063ba <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2202      	movs	r2, #2
 80063ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	223f      	movs	r2, #63	; 0x3f
 80063b4:	2101      	movs	r1, #1
 80063b6:	5499      	strb	r1, [r3, r2]
 80063b8:	e01d      	b.n	80063f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d107      	bne.n	80063d4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2204      	movs	r2, #4
 80063c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2240      	movs	r2, #64	; 0x40
 80063ce:	2101      	movs	r1, #1
 80063d0:	5499      	strb	r1, [r3, r2]
 80063d2:	e010      	b.n	80063f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d107      	bne.n	80063ee <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2208      	movs	r2, #8
 80063e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2241      	movs	r2, #65	; 0x41
 80063e8:	2101      	movs	r1, #1
 80063ea:	5499      	strb	r1, [r3, r2]
 80063ec:	e003      	b.n	80063f6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	223d      	movs	r2, #61	; 0x3d
 80063f2:	2101      	movs	r1, #1
 80063f4:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	0018      	movs	r0, r3
 80063fa:	f7ff ffb5 	bl	8006368 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	771a      	strb	r2, [r3, #28]
}
 8006404:	46c0      	nop			; (mov r8, r8)
 8006406:	46bd      	mov	sp, r7
 8006408:	b004      	add	sp, #16
 800640a:	bd80      	pop	{r7, pc}

0800640c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006418:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	429a      	cmp	r2, r3
 8006422:	d10b      	bne.n	800643c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2201      	movs	r2, #1
 8006428:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69db      	ldr	r3, [r3, #28]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d136      	bne.n	80064a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	223e      	movs	r2, #62	; 0x3e
 8006436:	2101      	movs	r1, #1
 8006438:	5499      	strb	r1, [r3, r2]
 800643a:	e031      	b.n	80064a0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	429a      	cmp	r2, r3
 8006444:	d10b      	bne.n	800645e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2202      	movs	r2, #2
 800644a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	69db      	ldr	r3, [r3, #28]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d125      	bne.n	80064a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	223f      	movs	r2, #63	; 0x3f
 8006458:	2101      	movs	r1, #1
 800645a:	5499      	strb	r1, [r3, r2]
 800645c:	e020      	b.n	80064a0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	429a      	cmp	r2, r3
 8006466:	d10b      	bne.n	8006480 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2204      	movs	r2, #4
 800646c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d114      	bne.n	80064a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2240      	movs	r2, #64	; 0x40
 800647a:	2101      	movs	r1, #1
 800647c:	5499      	strb	r1, [r3, r2]
 800647e:	e00f      	b.n	80064a0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	429a      	cmp	r2, r3
 8006488:	d10a      	bne.n	80064a0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2208      	movs	r2, #8
 800648e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d103      	bne.n	80064a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2241      	movs	r2, #65	; 0x41
 800649c:	2101      	movs	r1, #1
 800649e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	0018      	movs	r0, r3
 80064a4:	f001 fe52 	bl	800814c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	771a      	strb	r2, [r3, #28]
}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b004      	add	sp, #16
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d103      	bne.n	80064d6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2201      	movs	r2, #1
 80064d2:	771a      	strb	r2, [r3, #28]
 80064d4:	e019      	b.n	800650a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d103      	bne.n	80064e8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2202      	movs	r2, #2
 80064e4:	771a      	strb	r2, [r3, #28]
 80064e6:	e010      	b.n	800650a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d103      	bne.n	80064fa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2204      	movs	r2, #4
 80064f6:	771a      	strb	r2, [r3, #28]
 80064f8:	e007      	b.n	800650a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	429a      	cmp	r2, r3
 8006502:	d102      	bne.n	800650a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2208      	movs	r2, #8
 8006508:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	0018      	movs	r0, r3
 800650e:	f7ff ff23 	bl	8006358 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	771a      	strb	r2, [r3, #28]
}
 8006518:	46c0      	nop			; (mov r8, r8)
 800651a:	46bd      	mov	sp, r7
 800651c:	b004      	add	sp, #16
 800651e:	bd80      	pop	{r7, pc}

08006520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a30      	ldr	r2, [pc, #192]	; (80065f4 <TIM_Base_SetConfig+0xd4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d008      	beq.n	800654a <TIM_Base_SetConfig+0x2a>
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	2380      	movs	r3, #128	; 0x80
 800653c:	05db      	lsls	r3, r3, #23
 800653e:	429a      	cmp	r2, r3
 8006540:	d003      	beq.n	800654a <TIM_Base_SetConfig+0x2a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a2c      	ldr	r2, [pc, #176]	; (80065f8 <TIM_Base_SetConfig+0xd8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d108      	bne.n	800655c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2270      	movs	r2, #112	; 0x70
 800654e:	4393      	bics	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a25      	ldr	r2, [pc, #148]	; (80065f4 <TIM_Base_SetConfig+0xd4>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d014      	beq.n	800658e <TIM_Base_SetConfig+0x6e>
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	2380      	movs	r3, #128	; 0x80
 8006568:	05db      	lsls	r3, r3, #23
 800656a:	429a      	cmp	r2, r3
 800656c:	d00f      	beq.n	800658e <TIM_Base_SetConfig+0x6e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a21      	ldr	r2, [pc, #132]	; (80065f8 <TIM_Base_SetConfig+0xd8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d00b      	beq.n	800658e <TIM_Base_SetConfig+0x6e>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a20      	ldr	r2, [pc, #128]	; (80065fc <TIM_Base_SetConfig+0xdc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d007      	beq.n	800658e <TIM_Base_SetConfig+0x6e>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <TIM_Base_SetConfig+0xe0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d003      	beq.n	800658e <TIM_Base_SetConfig+0x6e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a1e      	ldr	r2, [pc, #120]	; (8006604 <TIM_Base_SetConfig+0xe4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d108      	bne.n	80065a0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4a1d      	ldr	r2, [pc, #116]	; (8006608 <TIM_Base_SetConfig+0xe8>)
 8006592:	4013      	ands	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2280      	movs	r2, #128	; 0x80
 80065a4:	4393      	bics	r3, r2
 80065a6:	001a      	movs	r2, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a0a      	ldr	r2, [pc, #40]	; (80065f4 <TIM_Base_SetConfig+0xd4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d007      	beq.n	80065de <TIM_Base_SetConfig+0xbe>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a0b      	ldr	r2, [pc, #44]	; (8006600 <TIM_Base_SetConfig+0xe0>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d003      	beq.n	80065de <TIM_Base_SetConfig+0xbe>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a0a      	ldr	r2, [pc, #40]	; (8006604 <TIM_Base_SetConfig+0xe4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d103      	bne.n	80065e6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	615a      	str	r2, [r3, #20]
}
 80065ec:	46c0      	nop			; (mov r8, r8)
 80065ee:	46bd      	mov	sp, r7
 80065f0:	b004      	add	sp, #16
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	40012c00 	.word	0x40012c00
 80065f8:	40000400 	.word	0x40000400
 80065fc:	40002000 	.word	0x40002000
 8006600:	40014400 	.word	0x40014400
 8006604:	40014800 	.word	0x40014800
 8006608:	fffffcff 	.word	0xfffffcff

0800660c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	2201      	movs	r2, #1
 800661c:	4393      	bics	r3, r2
 800661e:	001a      	movs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4a2e      	ldr	r2, [pc, #184]	; (80066f4 <TIM_OC1_SetConfig+0xe8>)
 800663a:	4013      	ands	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2203      	movs	r2, #3
 8006642:	4393      	bics	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2202      	movs	r2, #2
 8006654:	4393      	bics	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	697a      	ldr	r2, [r7, #20]
 800665e:	4313      	orrs	r3, r2
 8006660:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a24      	ldr	r2, [pc, #144]	; (80066f8 <TIM_OC1_SetConfig+0xec>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d007      	beq.n	800667a <TIM_OC1_SetConfig+0x6e>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a23      	ldr	r2, [pc, #140]	; (80066fc <TIM_OC1_SetConfig+0xf0>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d003      	beq.n	800667a <TIM_OC1_SetConfig+0x6e>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a22      	ldr	r2, [pc, #136]	; (8006700 <TIM_OC1_SetConfig+0xf4>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d10c      	bne.n	8006694 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	2208      	movs	r2, #8
 800667e:	4393      	bics	r3, r2
 8006680:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2204      	movs	r2, #4
 8006690:	4393      	bics	r3, r2
 8006692:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a18      	ldr	r2, [pc, #96]	; (80066f8 <TIM_OC1_SetConfig+0xec>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d007      	beq.n	80066ac <TIM_OC1_SetConfig+0xa0>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a17      	ldr	r2, [pc, #92]	; (80066fc <TIM_OC1_SetConfig+0xf0>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_OC1_SetConfig+0xa0>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a16      	ldr	r2, [pc, #88]	; (8006700 <TIM_OC1_SetConfig+0xf4>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d111      	bne.n	80066d0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	4a15      	ldr	r2, [pc, #84]	; (8006704 <TIM_OC1_SetConfig+0xf8>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	4a14      	ldr	r2, [pc, #80]	; (8006708 <TIM_OC1_SetConfig+0xfc>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	699b      	ldr	r3, [r3, #24]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	621a      	str	r2, [r3, #32]
}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	46bd      	mov	sp, r7
 80066ee:	b006      	add	sp, #24
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	fffeff8f 	.word	0xfffeff8f
 80066f8:	40012c00 	.word	0x40012c00
 80066fc:	40014400 	.word	0x40014400
 8006700:	40014800 	.word	0x40014800
 8006704:	fffffeff 	.word	0xfffffeff
 8006708:	fffffdff 	.word	0xfffffdff

0800670c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	2210      	movs	r2, #16
 800671c:	4393      	bics	r3, r2
 800671e:	001a      	movs	r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4a2c      	ldr	r2, [pc, #176]	; (80067ec <TIM_OC2_SetConfig+0xe0>)
 800673a:	4013      	ands	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4a2b      	ldr	r2, [pc, #172]	; (80067f0 <TIM_OC2_SetConfig+0xe4>)
 8006742:	4013      	ands	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	021b      	lsls	r3, r3, #8
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2220      	movs	r2, #32
 8006756:	4393      	bics	r3, r2
 8006758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a22      	ldr	r2, [pc, #136]	; (80067f4 <TIM_OC2_SetConfig+0xe8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d10d      	bne.n	800678a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2280      	movs	r2, #128	; 0x80
 8006772:	4393      	bics	r3, r2
 8006774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	011b      	lsls	r3, r3, #4
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2240      	movs	r2, #64	; 0x40
 8006786:	4393      	bics	r3, r2
 8006788:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a19      	ldr	r2, [pc, #100]	; (80067f4 <TIM_OC2_SetConfig+0xe8>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d007      	beq.n	80067a2 <TIM_OC2_SetConfig+0x96>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a18      	ldr	r2, [pc, #96]	; (80067f8 <TIM_OC2_SetConfig+0xec>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d003      	beq.n	80067a2 <TIM_OC2_SetConfig+0x96>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a17      	ldr	r2, [pc, #92]	; (80067fc <TIM_OC2_SetConfig+0xf0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d113      	bne.n	80067ca <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	4a16      	ldr	r2, [pc, #88]	; (8006800 <TIM_OC2_SetConfig+0xf4>)
 80067a6:	4013      	ands	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	4a15      	ldr	r2, [pc, #84]	; (8006804 <TIM_OC2_SetConfig+0xf8>)
 80067ae:	4013      	ands	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4313      	orrs	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	621a      	str	r2, [r3, #32]
}
 80067e4:	46c0      	nop			; (mov r8, r8)
 80067e6:	46bd      	mov	sp, r7
 80067e8:	b006      	add	sp, #24
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	feff8fff 	.word	0xfeff8fff
 80067f0:	fffffcff 	.word	0xfffffcff
 80067f4:	40012c00 	.word	0x40012c00
 80067f8:	40014400 	.word	0x40014400
 80067fc:	40014800 	.word	0x40014800
 8006800:	fffffbff 	.word	0xfffffbff
 8006804:	fffff7ff 	.word	0xfffff7ff

08006808 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	4a33      	ldr	r2, [pc, #204]	; (80068e4 <TIM_OC3_SetConfig+0xdc>)
 8006818:	401a      	ands	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4a2d      	ldr	r2, [pc, #180]	; (80068e8 <TIM_OC3_SetConfig+0xe0>)
 8006834:	4013      	ands	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2203      	movs	r2, #3
 800683c:	4393      	bics	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	4a27      	ldr	r2, [pc, #156]	; (80068ec <TIM_OC3_SetConfig+0xe4>)
 800684e:	4013      	ands	r3, r2
 8006850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	4313      	orrs	r3, r2
 800685c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a23      	ldr	r2, [pc, #140]	; (80068f0 <TIM_OC3_SetConfig+0xe8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d10d      	bne.n	8006882 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	4a22      	ldr	r2, [pc, #136]	; (80068f4 <TIM_OC3_SetConfig+0xec>)
 800686a:	4013      	ands	r3, r2
 800686c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	4a1e      	ldr	r2, [pc, #120]	; (80068f8 <TIM_OC3_SetConfig+0xf0>)
 800687e:	4013      	ands	r3, r2
 8006880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a1a      	ldr	r2, [pc, #104]	; (80068f0 <TIM_OC3_SetConfig+0xe8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d007      	beq.n	800689a <TIM_OC3_SetConfig+0x92>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a1b      	ldr	r2, [pc, #108]	; (80068fc <TIM_OC3_SetConfig+0xf4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d003      	beq.n	800689a <TIM_OC3_SetConfig+0x92>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a1a      	ldr	r2, [pc, #104]	; (8006900 <TIM_OC3_SetConfig+0xf8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d113      	bne.n	80068c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4a19      	ldr	r2, [pc, #100]	; (8006904 <TIM_OC3_SetConfig+0xfc>)
 800689e:	4013      	ands	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4a18      	ldr	r2, [pc, #96]	; (8006908 <TIM_OC3_SetConfig+0x100>)
 80068a6:	4013      	ands	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	699b      	ldr	r3, [r3, #24]
 80068ba:	011b      	lsls	r3, r3, #4
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	685a      	ldr	r2, [r3, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	621a      	str	r2, [r3, #32]
}
 80068dc:	46c0      	nop			; (mov r8, r8)
 80068de:	46bd      	mov	sp, r7
 80068e0:	b006      	add	sp, #24
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	fffffeff 	.word	0xfffffeff
 80068e8:	fffeff8f 	.word	0xfffeff8f
 80068ec:	fffffdff 	.word	0xfffffdff
 80068f0:	40012c00 	.word	0x40012c00
 80068f4:	fffff7ff 	.word	0xfffff7ff
 80068f8:	fffffbff 	.word	0xfffffbff
 80068fc:	40014400 	.word	0x40014400
 8006900:	40014800 	.word	0x40014800
 8006904:	ffffefff 	.word	0xffffefff
 8006908:	ffffdfff 	.word	0xffffdfff

0800690c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	4a26      	ldr	r2, [pc, #152]	; (80069b4 <TIM_OC4_SetConfig+0xa8>)
 800691c:	401a      	ands	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4a20      	ldr	r2, [pc, #128]	; (80069b8 <TIM_OC4_SetConfig+0xac>)
 8006938:	4013      	ands	r3, r2
 800693a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4a1f      	ldr	r2, [pc, #124]	; (80069bc <TIM_OC4_SetConfig+0xb0>)
 8006940:	4013      	ands	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	021b      	lsls	r3, r3, #8
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <TIM_OC4_SetConfig+0xb4>)
 8006954:	4013      	ands	r3, r2
 8006956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	031b      	lsls	r3, r3, #12
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a17      	ldr	r2, [pc, #92]	; (80069c4 <TIM_OC4_SetConfig+0xb8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d007      	beq.n	800697c <TIM_OC4_SetConfig+0x70>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a16      	ldr	r2, [pc, #88]	; (80069c8 <TIM_OC4_SetConfig+0xbc>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d003      	beq.n	800697c <TIM_OC4_SetConfig+0x70>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a15      	ldr	r2, [pc, #84]	; (80069cc <TIM_OC4_SetConfig+0xc0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d109      	bne.n	8006990 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	4a14      	ldr	r2, [pc, #80]	; (80069d0 <TIM_OC4_SetConfig+0xc4>)
 8006980:	4013      	ands	r3, r2
 8006982:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	019b      	lsls	r3, r3, #6
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	46c0      	nop			; (mov r8, r8)
 80069ac:	46bd      	mov	sp, r7
 80069ae:	b006      	add	sp, #24
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	ffffefff 	.word	0xffffefff
 80069b8:	feff8fff 	.word	0xfeff8fff
 80069bc:	fffffcff 	.word	0xfffffcff
 80069c0:	ffffdfff 	.word	0xffffdfff
 80069c4:	40012c00 	.word	0x40012c00
 80069c8:	40014400 	.word	0x40014400
 80069cc:	40014800 	.word	0x40014800
 80069d0:	ffffbfff 	.word	0xffffbfff

080069d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	4a23      	ldr	r2, [pc, #140]	; (8006a70 <TIM_OC5_SetConfig+0x9c>)
 80069e4:	401a      	ands	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4a1d      	ldr	r2, [pc, #116]	; (8006a74 <TIM_OC5_SetConfig+0xa0>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	4a19      	ldr	r2, [pc, #100]	; (8006a78 <TIM_OC5_SetConfig+0xa4>)
 8006a12:	4013      	ands	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	041b      	lsls	r3, r3, #16
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a15      	ldr	r2, [pc, #84]	; (8006a7c <TIM_OC5_SetConfig+0xa8>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d007      	beq.n	8006a3a <TIM_OC5_SetConfig+0x66>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a14      	ldr	r2, [pc, #80]	; (8006a80 <TIM_OC5_SetConfig+0xac>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d003      	beq.n	8006a3a <TIM_OC5_SetConfig+0x66>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a13      	ldr	r2, [pc, #76]	; (8006a84 <TIM_OC5_SetConfig+0xb0>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d109      	bne.n	8006a4e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	4a0c      	ldr	r2, [pc, #48]	; (8006a70 <TIM_OC5_SetConfig+0x9c>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	021b      	lsls	r3, r3, #8
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	621a      	str	r2, [r3, #32]
}
 8006a68:	46c0      	nop			; (mov r8, r8)
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	b006      	add	sp, #24
 8006a6e:	bd80      	pop	{r7, pc}
 8006a70:	fffeffff 	.word	0xfffeffff
 8006a74:	fffeff8f 	.word	0xfffeff8f
 8006a78:	fffdffff 	.word	0xfffdffff
 8006a7c:	40012c00 	.word	0x40012c00
 8006a80:	40014400 	.word	0x40014400
 8006a84:	40014800 	.word	0x40014800

08006a88 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	4a24      	ldr	r2, [pc, #144]	; (8006b28 <TIM_OC6_SetConfig+0xa0>)
 8006a98:	401a      	ands	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a1e      	ldr	r2, [pc, #120]	; (8006b2c <TIM_OC6_SetConfig+0xa4>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	021b      	lsls	r3, r3, #8
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4a1a      	ldr	r2, [pc, #104]	; (8006b30 <TIM_OC6_SetConfig+0xa8>)
 8006ac8:	4013      	ands	r3, r2
 8006aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	051b      	lsls	r3, r3, #20
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a16      	ldr	r2, [pc, #88]	; (8006b34 <TIM_OC6_SetConfig+0xac>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d007      	beq.n	8006af0 <TIM_OC6_SetConfig+0x68>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <TIM_OC6_SetConfig+0xb0>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d003      	beq.n	8006af0 <TIM_OC6_SetConfig+0x68>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a14      	ldr	r2, [pc, #80]	; (8006b3c <TIM_OC6_SetConfig+0xb4>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d109      	bne.n	8006b04 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	4a13      	ldr	r2, [pc, #76]	; (8006b40 <TIM_OC6_SetConfig+0xb8>)
 8006af4:	4013      	ands	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	029b      	lsls	r3, r3, #10
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	621a      	str	r2, [r3, #32]
}
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	46bd      	mov	sp, r7
 8006b22:	b006      	add	sp, #24
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	46c0      	nop			; (mov r8, r8)
 8006b28:	ffefffff 	.word	0xffefffff
 8006b2c:	feff8fff 	.word	0xfeff8fff
 8006b30:	ffdfffff 	.word	0xffdfffff
 8006b34:	40012c00 	.word	0x40012c00
 8006b38:	40014400 	.word	0x40014400
 8006b3c:	40014800 	.word	0x40014800
 8006b40:	fffbffff 	.word	0xfffbffff

08006b44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	221f      	movs	r2, #31
 8006b54:	4013      	ands	r3, r2
 8006b56:	2201      	movs	r2, #1
 8006b58:	409a      	lsls	r2, r3
 8006b5a:	0013      	movs	r3, r2
 8006b5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	43d2      	mvns	r2, r2
 8006b66:	401a      	ands	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6a1a      	ldr	r2, [r3, #32]
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	211f      	movs	r1, #31
 8006b74:	400b      	ands	r3, r1
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	4099      	lsls	r1, r3
 8006b7a:	000b      	movs	r3, r1
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	621a      	str	r2, [r3, #32]
}
 8006b82:	46c0      	nop			; (mov r8, r8)
 8006b84:	46bd      	mov	sp, r7
 8006b86:	b006      	add	sp, #24
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	223c      	movs	r2, #60	; 0x3c
 8006b9a:	5c9b      	ldrb	r3, [r3, r2]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e050      	b.n	8006c46 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	223c      	movs	r2, #60	; 0x3c
 8006ba8:	2101      	movs	r1, #1
 8006baa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	223d      	movs	r2, #61	; 0x3d
 8006bb0:	2102      	movs	r1, #2
 8006bb2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a21      	ldr	r2, [pc, #132]	; (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d108      	bne.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4a20      	ldr	r2, [pc, #128]	; (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2270      	movs	r2, #112	; 0x70
 8006be4:	4393      	bics	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a14      	ldr	r2, [pc, #80]	; (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00a      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	2380      	movs	r3, #128	; 0x80
 8006c0a:	05db      	lsls	r3, r3, #23
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a10      	ldr	r2, [pc, #64]	; (8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d10c      	bne.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2280      	movs	r2, #128	; 0x80
 8006c1e:	4393      	bics	r3, r2
 8006c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	223d      	movs	r2, #61	; 0x3d
 8006c38:	2101      	movs	r1, #1
 8006c3a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	223c      	movs	r2, #60	; 0x3c
 8006c40:	2100      	movs	r1, #0
 8006c42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	0018      	movs	r0, r3
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	b004      	add	sp, #16
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	40012c00 	.word	0x40012c00
 8006c54:	ff0fffff 	.word	0xff0fffff
 8006c58:	40000400 	.word	0x40000400

08006c5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	223c      	movs	r2, #60	; 0x3c
 8006c6e:	5c9b      	ldrb	r3, [r3, r2]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d101      	bne.n	8006c78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c74:	2302      	movs	r3, #2
 8006c76:	e079      	b.n	8006d6c <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	223c      	movs	r2, #60	; 0x3c
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	22ff      	movs	r2, #255	; 0xff
 8006c84:	4393      	bics	r3, r2
 8006c86:	001a      	movs	r2, r3
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4a38      	ldr	r2, [pc, #224]	; (8006d74 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006c94:	401a      	ands	r2, r3
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	4a35      	ldr	r2, [pc, #212]	; (8006d78 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006ca2:	401a      	ands	r2, r3
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4a33      	ldr	r2, [pc, #204]	; (8006d7c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006cb0:	401a      	ands	r2, r3
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4a30      	ldr	r2, [pc, #192]	; (8006d80 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4a2e      	ldr	r2, [pc, #184]	; (8006d84 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006ccc:	401a      	ands	r2, r3
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4a2b      	ldr	r2, [pc, #172]	; (8006d88 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006cda:	401a      	ands	r2, r3
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4a29      	ldr	r2, [pc, #164]	; (8006d8c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006ce8:	401a      	ands	r2, r3
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	041b      	lsls	r3, r3, #16
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a25      	ldr	r2, [pc, #148]	; (8006d90 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d106      	bne.n	8006d0c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4a24      	ldr	r2, [pc, #144]	; (8006d94 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006d02:	401a      	ands	r2, r3
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a1f      	ldr	r2, [pc, #124]	; (8006d90 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d121      	bne.n	8006d5a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4a1f      	ldr	r2, [pc, #124]	; (8006d98 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006d1a:	401a      	ands	r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	051b      	lsls	r3, r3, #20
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	4a1c      	ldr	r2, [pc, #112]	; (8006d9c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006d2a:	401a      	ands	r2, r3
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4a1a      	ldr	r2, [pc, #104]	; (8006da0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006d38:	401a      	ands	r2, r3
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a12      	ldr	r2, [pc, #72]	; (8006d90 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d106      	bne.n	8006d5a <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4a15      	ldr	r2, [pc, #84]	; (8006da4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006d50:	401a      	ands	r2, r3
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	223c      	movs	r2, #60	; 0x3c
 8006d66:	2100      	movs	r1, #0
 8006d68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	b004      	add	sp, #16
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	fffffcff 	.word	0xfffffcff
 8006d78:	fffffbff 	.word	0xfffffbff
 8006d7c:	fffff7ff 	.word	0xfffff7ff
 8006d80:	ffffefff 	.word	0xffffefff
 8006d84:	ffffdfff 	.word	0xffffdfff
 8006d88:	ffffbfff 	.word	0xffffbfff
 8006d8c:	fff0ffff 	.word	0xfff0ffff
 8006d90:	40012c00 	.word	0x40012c00
 8006d94:	efffffff 	.word	0xefffffff
 8006d98:	ff0fffff 	.word	0xff0fffff
 8006d9c:	feffffff 	.word	0xfeffffff
 8006da0:	fdffffff 	.word	0xfdffffff
 8006da4:	dfffffff 	.word	0xdfffffff

08006da8 <_ZN13elapsedMillis5resetEv>:

class elapsedMillis {
private:
	unsigned long ms;
public:
	void reset() {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
		ms = millis();
 8006db0:	f001 fa08 	bl	80081c4 <_Z6millisv>
 8006db4:	0002      	movs	r2, r0
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	601a      	str	r2, [r3, #0]
	}
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	b002      	add	sp, #8
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <_ZN13elapsedMillisC1Ev>:
	elapsedMillis(void) {
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
		ms = millis();
 8006dca:	f001 f9fb 	bl	80081c4 <_Z6millisv>
 8006dce:	0002      	movs	r2, r0
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	601a      	str	r2, [r3, #0]
	}
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	0018      	movs	r0, r3
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	b002      	add	sp, #8
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <_ZNK13elapsedMilliscvmEv>:
		ms = millis() - val;
	}
	elapsedMillis(const elapsedMillis &orig) {
		ms = orig.ms;
	}
	operator unsigned long() const {
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b082      	sub	sp, #8
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
		return millis() - ms;
 8006de6:	f001 f9ed 	bl	80081c4 <_Z6millisv>
 8006dea:	0002      	movs	r2, r0
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	1ad3      	subs	r3, r2, r3
	}
 8006df2:	0018      	movs	r0, r3
 8006df4:	46bd      	mov	sp, r7
 8006df6:	b002      	add	sp, #8
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <_ZN6BuzzerC1EP17TIM_HandleTypeDefm>:
 *      Author: Dustin Lehmann
 */

#include "buzzer.h"

Buzzer::Buzzer(TIM_HandleTypeDef *tim, uint32_t channel) {
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607a      	str	r2, [r7, #4]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f7ff ffd9 	bl	8006dc2 <_ZN13elapsedMillisC1Ev>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	751a      	strb	r2, [r3, #20]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	755a      	strb	r2, [r3, #21]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	759a      	strb	r2, [r3, #22]
	this->tim = tim;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	60da      	str	r2, [r3, #12]
	this->channel = channel;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	611a      	str	r2, [r3, #16]
}
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	0018      	movs	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	b004      	add	sp, #16
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <_ZN6Buzzer8pwmStartEv>:

void Buzzer::pwmStart() {
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
	uint32_t arr = (uint32_t) (BUZZER_TIMER_BASE_FREQUENCY
			/ (this->config.frequency * BUZZER_TIMER_PSC + this->config.frequency)) - 1;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4967      	ldr	r1, [pc, #412]	; (8006fe4 <_ZN6Buzzer8pwmStartEv+0x1ac>)
 8006e46:	1c18      	adds	r0, r3, #0
 8006e48:	f7f9 fcba 	bl	80007c0 <__aeabi_fmul>
 8006e4c:	1c03      	adds	r3, r0, #0
 8006e4e:	1c1a      	adds	r2, r3, #0
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	1c19      	adds	r1, r3, #0
 8006e56:	1c10      	adds	r0, r2, #0
 8006e58:	f7f9 f9f8 	bl	800024c <__aeabi_fadd>
 8006e5c:	1c03      	adds	r3, r0, #0
 8006e5e:	1c19      	adds	r1, r3, #0
 8006e60:	4861      	ldr	r0, [pc, #388]	; (8006fe8 <_ZN6Buzzer8pwmStartEv+0x1b0>)
 8006e62:	f7f9 fb93 	bl	800058c <__aeabi_fdiv>
 8006e66:	1c03      	adds	r3, r0, #0
	uint32_t arr = (uint32_t) (BUZZER_TIMER_BASE_FREQUENCY
 8006e68:	1c18      	adds	r0, r3, #0
 8006e6a:	f7f9 f9d7 	bl	800021c <__aeabi_f2uiz>
 8006e6e:	0003      	movs	r3, r0
 8006e70:	3b01      	subs	r3, #1
 8006e72:	60fb      	str	r3, [r7, #12]

	HAL_TIM_PWM_Start(this->tim, this->channel);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68da      	ldr	r2, [r3, #12]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	0019      	movs	r1, r3
 8006e7e:	0010      	movs	r0, r2
 8006e80:	f7fe fd28 	bl	80058d4 <HAL_TIM_PWM_Start>

	if (this->tim->Instance == TIM2) {
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	2380      	movs	r3, #128	; 0x80
 8006e8c:	05db      	lsls	r3, r3, #23
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d146      	bne.n	8006f20 <_ZN6Buzzer8pwmStartEv+0xe8>

		__HAL_TIM_SetAutoreload(this->tim, (uint32_t) arr)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	60da      	str	r2, [r3, #12]
		;

		__HAL_TIM_SetCompare(this->tim,this->channel,(uint32_t) arr/2);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d106      	bne.n	8006eba <_ZN6Buzzer8pwmStartEv+0x82>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	0852      	lsrs	r2, r2, #1
 8006eb6:	635a      	str	r2, [r3, #52]	; 0x34
 8006eb8:	e08d      	b.n	8006fd6 <_ZN6Buzzer8pwmStartEv+0x19e>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d106      	bne.n	8006ed0 <_ZN6Buzzer8pwmStartEv+0x98>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	0852      	lsrs	r2, r2, #1
 8006ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8006ece:	e082      	b.n	8006fd6 <_ZN6Buzzer8pwmStartEv+0x19e>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b08      	cmp	r3, #8
 8006ed6:	d106      	bne.n	8006ee6 <_ZN6Buzzer8pwmStartEv+0xae>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	0852      	lsrs	r2, r2, #1
 8006ee2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ee4:	e077      	b.n	8006fd6 <_ZN6Buzzer8pwmStartEv+0x19e>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b0c      	cmp	r3, #12
 8006eec:	d106      	bne.n	8006efc <_ZN6Buzzer8pwmStartEv+0xc4>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	0852      	lsrs	r2, r2, #1
 8006ef8:	641a      	str	r2, [r3, #64]	; 0x40
 8006efa:	e06c      	b.n	8006fd6 <_ZN6Buzzer8pwmStartEv+0x19e>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b10      	cmp	r3, #16
 8006f02:	d106      	bne.n	8006f12 <_ZN6Buzzer8pwmStartEv+0xda>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	0852      	lsrs	r2, r2, #1
 8006f0e:	659a      	str	r2, [r3, #88]	; 0x58
 8006f10:	e061      	b.n	8006fd6 <_ZN6Buzzer8pwmStartEv+0x19e>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	0852      	lsrs	r2, r2, #1
 8006f1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006f1e:	e05a      	b.n	8006fd6 <_ZN6Buzzer8pwmStartEv+0x19e>

	} else {
		if (arr > 65535) {
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	2380      	movs	r3, #128	; 0x80
 8006f24:	025b      	lsls	r3, r3, #9
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d301      	bcc.n	8006f2e <_ZN6Buzzer8pwmStartEv+0xf6>
			arr = 65535;
 8006f2a:	4b30      	ldr	r3, [pc, #192]	; (8006fec <_ZN6Buzzer8pwmStartEv+0x1b4>)
 8006f2c:	60fb      	str	r3, [r7, #12]
		}
		__HAL_TIM_SetAutoreload(this->tim, (uint16_t) arr)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	b29a      	uxth	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	60da      	str	r2, [r3, #12]
		;

		__HAL_TIM_SetCompare(this->tim,this->channel,(uint16_t) arr/2);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d108      	bne.n	8006f5e <_ZN6Buzzer8pwmStartEv+0x126>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	085b      	lsrs	r3, r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	635a      	str	r2, [r3, #52]	; 0x34
 8006f5c:	e03b      	b.n	8006fd6 <_ZN6Buzzer8pwmStartEv+0x19e>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d108      	bne.n	8006f78 <_ZN6Buzzer8pwmStartEv+0x140>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	085b      	lsrs	r3, r3, #1
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	639a      	str	r2, [r3, #56]	; 0x38
 8006f76:	e02e      	b.n	8006fd6 <_ZN6Buzzer8pwmStartEv+0x19e>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b08      	cmp	r3, #8
 8006f7e:	d108      	bne.n	8006f92 <_ZN6Buzzer8pwmStartEv+0x15a>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	085b      	lsrs	r3, r3, #1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006f90:	e021      	b.n	8006fd6 <_ZN6Buzzer8pwmStartEv+0x19e>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	2b0c      	cmp	r3, #12
 8006f98:	d108      	bne.n	8006fac <_ZN6Buzzer8pwmStartEv+0x174>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	085b      	lsrs	r3, r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	641a      	str	r2, [r3, #64]	; 0x40
 8006faa:	e014      	b.n	8006fd6 <_ZN6Buzzer8pwmStartEv+0x19e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	2b10      	cmp	r3, #16
 8006fb2:	d108      	bne.n	8006fc6 <_ZN6Buzzer8pwmStartEv+0x18e>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	085b      	lsrs	r3, r3, #1
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	659a      	str	r2, [r3, #88]	; 0x58
 8006fc4:	e007      	b.n	8006fd6 <_ZN6Buzzer8pwmStartEv+0x19e>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	085b      	lsrs	r3, r3, #1
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	65da      	str	r2, [r3, #92]	; 0x5c
	}
	this->pwm_on = 1;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	751a      	strb	r2, [r3, #20]
}
 8006fdc:	46c0      	nop			; (mov r8, r8)
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	b004      	add	sp, #16
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	40a00000 	.word	0x40a00000
 8006fe8:	4bf42400 	.word	0x4bf42400
 8006fec:	0000ffff 	.word	0x0000ffff

08006ff0 <_ZN6Buzzer7pwmStopEv>:
void Buzzer::pwmStop() {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(this->tim, this->channel);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68da      	ldr	r2, [r3, #12]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	0019      	movs	r1, r3
 8007002:	0010      	movs	r0, r2
 8007004:	f7fe fd44 	bl	8005a90 <HAL_TIM_PWM_Stop>
	this->pwm_on = 0;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	751a      	strb	r2, [r3, #20]
}
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	46bd      	mov	sp, r7
 8007012:	b002      	add	sp, #8
 8007014:	bd80      	pop	{r7, pc}

08007016 <_ZN6Buzzer9setConfigEfta>:


void Buzzer::setConfig(Buzzer_config config) {
	this->config = config;
}
void Buzzer::setConfig(float frequency, uint16_t on_time_ms, int8_t counter) {
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	0019      	movs	r1, r3
 8007022:	1dbb      	adds	r3, r7, #6
 8007024:	801a      	strh	r2, [r3, #0]
 8007026:	1d7b      	adds	r3, r7, #5
 8007028:	1c0a      	adds	r2, r1, #0
 800702a:	701a      	strb	r2, [r3, #0]
	this->config.frequency = frequency;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	601a      	str	r2, [r3, #0]
	this->config.on_time_ms = on_time_ms;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	1dba      	adds	r2, r7, #6
 8007036:	8812      	ldrh	r2, [r2, #0]
 8007038:	809a      	strh	r2, [r3, #4]
	this->config.counter = counter;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	1d7a      	adds	r2, r7, #5
 800703e:	7812      	ldrb	r2, [r2, #0]
 8007040:	719a      	strb	r2, [r3, #6]
}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	46bd      	mov	sp, r7
 8007046:	b004      	add	sp, #16
 8007048:	bd80      	pop	{r7, pc}

0800704a <_ZN6Buzzer5startEv>:

void Buzzer::start() {
 800704a:	b580      	push	{r7, lr}
 800704c:	b082      	sub	sp, #8
 800704e:	af00      	add	r7, sp, #0
 8007050:	6078      	str	r0, [r7, #4]
	this->buzzerTimer.reset();
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3308      	adds	r3, #8
 8007056:	0018      	movs	r0, r3
 8007058:	f7ff fea6 	bl	8006da8 <_ZN13elapsedMillis5resetEv>
	this->output_state = 1;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	755a      	strb	r2, [r3, #21]
	this->counter = this->config.counter * 2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	799b      	ldrb	r3, [r3, #6]
 8007066:	b25b      	sxtb	r3, r3
 8007068:	b2db      	uxtb	r3, r3
 800706a:	18db      	adds	r3, r3, r3
 800706c:	b2da      	uxtb	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	759a      	strb	r2, [r3, #22]
}
 8007072:	46c0      	nop			; (mov r8, r8)
 8007074:	46bd      	mov	sp, r7
 8007076:	b002      	add	sp, #8
 8007078:	bd80      	pop	{r7, pc}

0800707a <_ZN6Buzzer6updateEv>:
void Buzzer::stop() {
	this->counter = 0;
	this->output_state = 0;
}

void Buzzer::update() {
 800707a:	b580      	push	{r7, lr}
 800707c:	b082      	sub	sp, #8
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
// TODO: continious buzzer
	if (this->counter > 0) {
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7d9b      	ldrb	r3, [r3, #22]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d028      	beq.n	80070dc <_ZN6Buzzer6updateEv+0x62>

		if (this->buzzerTimer >= this->config.on_time_ms) {
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	3308      	adds	r3, #8
 800708e:	0018      	movs	r0, r3
 8007090:	f7ff fea5 	bl	8006dde <_ZNK13elapsedMilliscvmEv>
 8007094:	0002      	movs	r2, r0
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	889b      	ldrh	r3, [r3, #4]
 800709a:	0019      	movs	r1, r3
 800709c:	2300      	movs	r3, #0
 800709e:	428a      	cmp	r2, r1
 80070a0:	415b      	adcs	r3, r3
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d019      	beq.n	80070dc <_ZN6Buzzer6updateEv+0x62>
			this->buzzerTimer.reset();
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3308      	adds	r3, #8
 80070ac:	0018      	movs	r0, r3
 80070ae:	f7ff fe7b 	bl	8006da8 <_ZN13elapsedMillis5resetEv>

			this->output_state = !this->output_state;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	7d5b      	ldrb	r3, [r3, #21]
 80070b6:	425a      	negs	r2, r3
 80070b8:	4153      	adcs	r3, r2
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	001a      	movs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	755a      	strb	r2, [r3, #21]
			this->counter--;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	7d9b      	ldrb	r3, [r3, #22]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	759a      	strb	r2, [r3, #22]

			if (this->counter == 0){
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	7d9b      	ldrb	r3, [r3, #22]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d102      	bne.n	80070dc <_ZN6Buzzer6updateEv+0x62>
				this->output_state = 0;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	755a      	strb	r2, [r3, #21]
			}
		}
	}

	if (this->output_state == 1 && this->pwm_on == 0) {
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	7d5b      	ldrb	r3, [r3, #21]
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	d108      	bne.n	80070f6 <_ZN6Buzzer6updateEv+0x7c>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	7d1b      	ldrb	r3, [r3, #20]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d104      	bne.n	80070f6 <_ZN6Buzzer6updateEv+0x7c>
		this->pwmStart();
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	0018      	movs	r0, r3
 80070f0:	f7ff fea2 	bl	8006e38 <_ZN6Buzzer8pwmStartEv>
//
//	if (this->state == 0 && this->pwm_on) {
//		this->stop();
//	}

}
 80070f4:	e00b      	b.n	800710e <_ZN6Buzzer6updateEv+0x94>
	} else if (this->output_state == 0 && this->pwm_on == 1) {
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	7d5b      	ldrb	r3, [r3, #21]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d107      	bne.n	800710e <_ZN6Buzzer6updateEv+0x94>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	7d1b      	ldrb	r3, [r3, #20]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d103      	bne.n	800710e <_ZN6Buzzer6updateEv+0x94>
		this->pwmStop();
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	0018      	movs	r0, r3
 800710a:	f7ff ff71 	bl	8006ff0 <_ZN6Buzzer7pwmStopEv>
}
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	46bd      	mov	sp, r7
 8007112:	b002      	add	sp, #8
 8007114:	bd80      	pop	{r7, pc}

08007116 <_ZN19core_utils_CallbackC1Ev>:


#include <callbacks/callback.h>


core_utils_Callback::core_utils_Callback() {
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	721a      	strb	r2, [r3, #8]

}
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	0018      	movs	r0, r3
 8007128:	46bd      	mov	sp, r7
 800712a:	b002      	add	sp, #8
 800712c:	bd80      	pop	{r7, pc}

0800712e <_ZN19core_utils_Callback4callEPv>:
	this->callback = callback;
	this->params = params;
}


void core_utils_Callback::call(void *argument) {
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	6039      	str	r1, [r7, #0]
	this->callback(argument, this->params);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6859      	ldr	r1, [r3, #4]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	0018      	movs	r0, r3
 8007144:	4790      	blx	r2
}
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	46bd      	mov	sp, r7
 800714a:	b002      	add	sp, #8
 800714c:	bd80      	pop	{r7, pc}

0800714e <_ZN6EEPROMC1EP19__I2C_HandleTypeDefh>:
 *      Author: Dustin Lehmann
 */

#include "eeprom.h"

EEPROM::EEPROM(I2C_HandleTypeDef *hi2c,
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	60f8      	str	r0, [r7, #12]
 8007156:	60b9      	str	r1, [r7, #8]
 8007158:	1dfb      	adds	r3, r7, #7
 800715a:	701a      	strb	r2, [r3, #0]
		uint8_t address) {
	this->hi2c = hi2c;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	601a      	str	r2, [r3, #0]
	this->address = address;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1dfa      	adds	r2, r7, #7
 8007166:	7812      	ldrb	r2, [r2, #0]
 8007168:	711a      	strb	r2, [r3, #4]
}
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	0018      	movs	r0, r3
 800716e:	46bd      	mov	sp, r7
 8007170:	b004      	add	sp, #16
 8007172:	bd80      	pop	{r7, pc}

08007174 <_ZN13elapsedMillisC1Em>:
	elapsedMillis(unsigned long val) {
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
		ms = millis() - val;
 800717e:	f001 f821 	bl	80081c4 <_Z6millisv>
 8007182:	0002      	movs	r2, r0
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	1ad2      	subs	r2, r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	601a      	str	r2, [r3, #0]
	}
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	0018      	movs	r0, r3
 8007190:	46bd      	mov	sp, r7
 8007192:	b002      	add	sp, #8
 8007194:	bd80      	pop	{r7, pc}

08007196 <_ZN13elapsedMillisaSEm>:
	elapsedMillis & operator =(const elapsedMillis &rhs) {
		ms = rhs.ms;
		return *this;
	}
	elapsedMillis & operator =(unsigned long val) {
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	6039      	str	r1, [r7, #0]
		ms = millis() - val;
 80071a0:	f001 f810 	bl	80081c4 <_Z6millisv>
 80071a4:	0002      	movs	r2, r0
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	1ad2      	subs	r2, r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	601a      	str	r2, [r3, #0]
		return *this;
 80071ae:	687b      	ldr	r3, [r7, #4]
	}
 80071b0:	0018      	movs	r0, r3
 80071b2:	46bd      	mov	sp, r7
 80071b4:	b002      	add	sp, #8
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <firmware_init>:
I2C_Slave i2c_slave_intern(&hi2c1, 0x02, register_map, 255);

elapsedMillis timer_test = 10000;

/* ================================================================================= */
void firmware_init() {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	af00      	add	r7, sp, #0

	neopixel_intern.init();
 80071bc:	4b36      	ldr	r3, [pc, #216]	; (8007298 <firmware_init+0xe0>)
 80071be:	0018      	movs	r0, r3
 80071c0:	f000 fe6e 	bl	8007ea0 <_ZN13WS2812_Strand4initEv>
	neopixel_extern.init();
 80071c4:	4b35      	ldr	r3, [pc, #212]	; (800729c <firmware_init+0xe4>)
 80071c6:	0018      	movs	r0, r3
 80071c8:	f000 fe6a 	bl	8007ea0 <_ZN13WS2812_Strand4initEv>

	neopixel_intern.update();
 80071cc:	4b32      	ldr	r3, [pc, #200]	; (8007298 <firmware_init+0xe0>)
 80071ce:	0018      	movs	r0, r3
 80071d0:	f000 fea0 	bl	8007f14 <_ZN13WS2812_Strand6updateEv>
	neopixel_intern.send();
 80071d4:	4b30      	ldr	r3, [pc, #192]	; (8007298 <firmware_init+0xe0>)
 80071d6:	0018      	movs	r0, r3
 80071d8:	f000 ff3e 	bl	8008058 <_ZN13WS2812_Strand4sendEv>

	i2c_slave_cm4.init();
 80071dc:	4b30      	ldr	r3, [pc, #192]	; (80072a0 <firmware_init+0xe8>)
 80071de:	0018      	movs	r0, r3
 80071e0:	f000 fbf6 	bl	80079d0 <_ZN9I2C_Slave4initEv>
	i2c_slave_cm4.start();
 80071e4:	4b2e      	ldr	r3, [pc, #184]	; (80072a0 <firmware_init+0xe8>)
 80071e6:	0018      	movs	r0, r3
 80071e8:	f000 fbfa 	bl	80079e0 <_ZN9I2C_Slave5startEv>

	i2c_slave_intern.init();
 80071ec:	4b2d      	ldr	r3, [pc, #180]	; (80072a4 <firmware_init+0xec>)
 80071ee:	0018      	movs	r0, r3
 80071f0:	f000 fbee 	bl	80079d0 <_ZN9I2C_Slave4initEv>
	i2c_slave_intern.start();
 80071f4:	4b2b      	ldr	r3, [pc, #172]	; (80072a4 <firmware_init+0xec>)
 80071f6:	0018      	movs	r0, r3
 80071f8:	f000 fbf2 	bl	80079e0 <_ZN9I2C_Slave5startEv>

	HAL_GPIO_WritePin(ENABLE_CM4_GPIO_Port, ENABLE_CM4_Pin, GPIO_PIN_SET);
 80071fc:	4b2a      	ldr	r3, [pc, #168]	; (80072a8 <firmware_init+0xf0>)
 80071fe:	2201      	movs	r2, #1
 8007200:	2140      	movs	r1, #64	; 0x40
 8007202:	0018      	movs	r0, r3
 8007204:	f7fc f83b 	bl	800327e <HAL_GPIO_WritePin>

	neopixel_intern.led[1].continious_output = 0;
 8007208:	4b23      	ldr	r3, [pc, #140]	; (8007298 <firmware_init+0xe0>)
 800720a:	2222      	movs	r2, #34	; 0x22
 800720c:	2100      	movs	r1, #0
 800720e:	5499      	strb	r1, [r3, r2]
	neopixel_intern.led[1].setColor(0, 0, 100);
 8007210:	4826      	ldr	r0, [pc, #152]	; (80072ac <firmware_init+0xf4>)
 8007212:	2364      	movs	r3, #100	; 0x64
 8007214:	2200      	movs	r2, #0
 8007216:	2100      	movs	r1, #0
 8007218:	f000 fd20 	bl	8007c5c <_ZN10WS2812_LED8setColorEhhh>
	neopixel_intern.led[1].blink_config.on_time_ms = 400;
 800721c:	4b1e      	ldr	r3, [pc, #120]	; (8007298 <firmware_init+0xe0>)
 800721e:	22c8      	movs	r2, #200	; 0xc8
 8007220:	0052      	lsls	r2, r2, #1
 8007222:	841a      	strh	r2, [r3, #32]
	neopixel_intern.led[1].blink_config.counter = 1;
 8007224:	4b1c      	ldr	r3, [pc, #112]	; (8007298 <firmware_init+0xe0>)
 8007226:	2201      	movs	r2, #1
 8007228:	779a      	strb	r2, [r3, #30]

	neopixel_intern.led[2].continious_output = 0;
 800722a:	4b1b      	ldr	r3, [pc, #108]	; (8007298 <firmware_init+0xe0>)
 800722c:	223a      	movs	r2, #58	; 0x3a
 800722e:	2100      	movs	r1, #0
 8007230:	5499      	strb	r1, [r3, r2]
	neopixel_intern.led[2].setColor(0, 100, 0);
 8007232:	481f      	ldr	r0, [pc, #124]	; (80072b0 <firmware_init+0xf8>)
 8007234:	2300      	movs	r3, #0
 8007236:	2264      	movs	r2, #100	; 0x64
 8007238:	2100      	movs	r1, #0
 800723a:	f000 fd0f 	bl	8007c5c <_ZN10WS2812_LED8setColorEhhh>
	neopixel_intern.led[2].blink_config.on_time_ms = 400;
 800723e:	4b16      	ldr	r3, [pc, #88]	; (8007298 <firmware_init+0xe0>)
 8007240:	22c8      	movs	r2, #200	; 0xc8
 8007242:	0052      	lsls	r2, r2, #1
 8007244:	871a      	strh	r2, [r3, #56]	; 0x38
	neopixel_intern.led[2].blink_config.counter = 1;
 8007246:	4b14      	ldr	r3, [pc, #80]	; (8007298 <firmware_init+0xe0>)
 8007248:	2236      	movs	r2, #54	; 0x36
 800724a:	2101      	movs	r1, #1
 800724c:	5499      	strb	r1, [r3, r2]

	neopixel_intern.led[0].continious_output = 0;
 800724e:	4b12      	ldr	r3, [pc, #72]	; (8007298 <firmware_init+0xe0>)
 8007250:	2200      	movs	r2, #0
 8007252:	729a      	strb	r2, [r3, #10]
	neopixel_intern.led[0].setColor(100, 0, 0);
 8007254:	4810      	ldr	r0, [pc, #64]	; (8007298 <firmware_init+0xe0>)
 8007256:	2300      	movs	r3, #0
 8007258:	2200      	movs	r2, #0
 800725a:	2164      	movs	r1, #100	; 0x64
 800725c:	f000 fcfe 	bl	8007c5c <_ZN10WS2812_LED8setColorEhhh>
	neopixel_intern.led[0].blink_config.on_time_ms = 400;
 8007260:	4b0d      	ldr	r3, [pc, #52]	; (8007298 <firmware_init+0xe0>)
 8007262:	22c8      	movs	r2, #200	; 0xc8
 8007264:	0052      	lsls	r2, r2, #1
 8007266:	811a      	strh	r2, [r3, #8]
	neopixel_intern.led[0].blink_config.counter = 10;
 8007268:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <firmware_init+0xe0>)
 800726a:	220a      	movs	r2, #10
 800726c:	719a      	strb	r2, [r3, #6]

	rc_buzzer.config.frequency = 440;
 800726e:	4b11      	ldr	r3, [pc, #68]	; (80072b4 <firmware_init+0xfc>)
 8007270:	4a11      	ldr	r2, [pc, #68]	; (80072b8 <firmware_init+0x100>)
 8007272:	601a      	str	r2, [r3, #0]
	rc_buzzer.config.on_time_ms = 100;
 8007274:	4b0f      	ldr	r3, [pc, #60]	; (80072b4 <firmware_init+0xfc>)
 8007276:	2264      	movs	r2, #100	; 0x64
 8007278:	809a      	strh	r2, [r3, #4]
	rc_buzzer.config.counter = 1;
 800727a:	4b0e      	ldr	r3, [pc, #56]	; (80072b4 <firmware_init+0xfc>)
 800727c:	2201      	movs	r2, #1
 800727e:	719a      	strb	r2, [r3, #6]

	led_status.on();
 8007280:	4b0e      	ldr	r3, [pc, #56]	; (80072bc <firmware_init+0x104>)
 8007282:	0018      	movs	r0, r3
 8007284:	f000 fc88 	bl	8007b98 <_ZN3LED2onEv>
	rc_buzzer.start();
 8007288:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <firmware_init+0xfc>)
 800728a:	0018      	movs	r0, r3
 800728c:	f7ff fedd 	bl	800704a <_ZN6Buzzer5startEv>


}
 8007290:	46c0      	nop			; (mov r8, r8)
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	46c0      	nop			; (mov r8, r8)
 8007298:	200002d4 	.word	0x200002d4
 800729c:	20000654 	.word	0x20000654
 80072a0:	20000b10 	.word	0x20000b10
 80072a4:	20000b30 	.word	0x20000b30
 80072a8:	50000800 	.word	0x50000800
 80072ac:	200002ec 	.word	0x200002ec
 80072b0:	20000304 	.word	0x20000304
 80072b4:	200009d4 	.word	0x200009d4
 80072b8:	43dc0000 	.word	0x43dc0000
 80072bc:	200009ec 	.word	0x200009ec

080072c0 <firmware_update>:

/* ================================================================================= */
void firmware_update() {
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0

	if (timer_check >= 100) {
 80072c4:	4b24      	ldr	r3, [pc, #144]	; (8007358 <firmware_update+0x98>)
 80072c6:	0018      	movs	r0, r3
 80072c8:	f7ff fd89 	bl	8006dde <_ZNK13elapsedMilliscvmEv>
 80072cc:	0003      	movs	r3, r0
 80072ce:	2263      	movs	r2, #99	; 0x63
 80072d0:	429a      	cmp	r2, r3
 80072d2:	419b      	sbcs	r3, r3
 80072d4:	425b      	negs	r3, r3
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d007      	beq.n	80072ec <firmware_update+0x2c>
		timer_check.reset();
 80072dc:	4b1e      	ldr	r3, [pc, #120]	; (8007358 <firmware_update+0x98>)
 80072de:	0018      	movs	r0, r3
 80072e0:	f7ff fd62 	bl	8006da8 <_ZN13elapsedMillis5resetEv>
		checkUsb();
 80072e4:	f000 f842 	bl	800736c <_Z8checkUsbv>
		checkSD();
 80072e8:	f000 f85e 	bl	80073a8 <_Z7checkSDv>
	}

	if (timer_led_update >= 10) {
 80072ec:	4b1b      	ldr	r3, [pc, #108]	; (800735c <firmware_update+0x9c>)
 80072ee:	0018      	movs	r0, r3
 80072f0:	f7ff fd75 	bl	8006dde <_ZNK13elapsedMilliscvmEv>
 80072f4:	0003      	movs	r3, r0
 80072f6:	2209      	movs	r2, #9
 80072f8:	429a      	cmp	r2, r3
 80072fa:	419b      	sbcs	r3, r3
 80072fc:	425b      	negs	r3, r3
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d016      	beq.n	8007332 <firmware_update+0x72>
		timer_led_update = 0;
 8007304:	4b15      	ldr	r3, [pc, #84]	; (800735c <firmware_update+0x9c>)
 8007306:	2100      	movs	r1, #0
 8007308:	0018      	movs	r0, r3
 800730a:	f7ff ff44 	bl	8007196 <_ZN13elapsedMillisaSEm>
		updateInternRGBLEDsFromRegisters();
 800730e:	f000 f89d 	bl	800744c <_Z32updateInternRGBLEDsFromRegistersv>
		updateStatusLEDFromRegisters();
 8007312:	f000 f869 	bl	80073e8 <_Z28updateStatusLEDFromRegistersv>
		updateBuzzerFromRegisters();
 8007316:	f000 f905 	bl	8007524 <_Z25updateBuzzerFromRegistersv>
		neopixel_intern.update();
 800731a:	4b11      	ldr	r3, [pc, #68]	; (8007360 <firmware_update+0xa0>)
 800731c:	0018      	movs	r0, r3
 800731e:	f000 fdf9 	bl	8007f14 <_ZN13WS2812_Strand6updateEv>
		neopixel_intern.send();
 8007322:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <firmware_update+0xa0>)
 8007324:	0018      	movs	r0, r3
 8007326:	f000 fe97 	bl	8008058 <_ZN13WS2812_Strand4sendEv>

		rc_buzzer.update();
 800732a:	4b0e      	ldr	r3, [pc, #56]	; (8007364 <firmware_update+0xa4>)
 800732c:	0018      	movs	r0, r3
 800732e:	f7ff fea4 	bl	800707a <_ZN6Buzzer6updateEv>
	}

	if (timer_test >= 70) {
 8007332:	4b0d      	ldr	r3, [pc, #52]	; (8007368 <firmware_update+0xa8>)
 8007334:	0018      	movs	r0, r3
 8007336:	f7ff fd52 	bl	8006dde <_ZNK13elapsedMilliscvmEv>
 800733a:	0003      	movs	r3, r0
 800733c:	2245      	movs	r2, #69	; 0x45
 800733e:	429a      	cmp	r2, r3
 8007340:	419b      	sbcs	r3, r3
 8007342:	425b      	negs	r3, r3
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <firmware_update+0x92>
		timer_test.reset();
 800734a:	4b07      	ldr	r3, [pc, #28]	; (8007368 <firmware_update+0xa8>)
 800734c:	0018      	movs	r0, r3
 800734e:	f7ff fd2b 	bl	8006da8 <_ZN13elapsedMillis5resetEv>
	}

}
 8007352:	46c0      	nop			; (mov r8, r8)
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	20000a04 	.word	0x20000a04
 800735c:	20000a08 	.word	0x20000a08
 8007360:	200002d4 	.word	0x200002d4
 8007364:	200009d4 	.word	0x200009d4
 8007368:	20000b50 	.word	0x20000b50

0800736c <_Z8checkUsbv>:

/* ================================================================================= */
void checkUsb() {
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(DETECT_USB_GPIO_Port, DETECT_USB_Pin) == 1) {
 8007370:	23a0      	movs	r3, #160	; 0xa0
 8007372:	05db      	lsls	r3, r3, #23
 8007374:	2140      	movs	r1, #64	; 0x40
 8007376:	0018      	movs	r0, r3
 8007378:	f7fb ff64 	bl	8003244 <HAL_GPIO_ReadPin>
 800737c:	0003      	movs	r3, r0
 800737e:	3b01      	subs	r3, #1
 8007380:	425a      	negs	r2, r3
 8007382:	4153      	adcs	r3, r2
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d004      	beq.n	8007394 <_Z8checkUsbv+0x28>
		led_usb.on();
 800738a:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <_Z8checkUsbv+0x38>)
 800738c:	0018      	movs	r0, r3
 800738e:	f000 fc03 	bl	8007b98 <_ZN3LED2onEv>
	} else {
		led_usb.off();
	}
}
 8007392:	e003      	b.n	800739c <_Z8checkUsbv+0x30>
		led_usb.off();
 8007394:	4b03      	ldr	r3, [pc, #12]	; (80073a4 <_Z8checkUsbv+0x38>)
 8007396:	0018      	movs	r0, r3
 8007398:	f000 fc0e 	bl	8007bb8 <_ZN3LED3offEv>
}
 800739c:	46c0      	nop			; (mov r8, r8)
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	46c0      	nop			; (mov r8, r8)
 80073a4:	200009f4 	.word	0x200009f4

080073a8 <_Z7checkSDv>:

/* ================================================================================= */
void checkSD() {
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(DETECT_SD_GPIO_Port, DETECT_SD_Pin) == 0) {
 80073ac:	23a0      	movs	r3, #160	; 0xa0
 80073ae:	05db      	lsls	r3, r3, #23
 80073b0:	2110      	movs	r1, #16
 80073b2:	0018      	movs	r0, r3
 80073b4:	f7fb ff46 	bl	8003244 <HAL_GPIO_ReadPin>
 80073b8:	0003      	movs	r3, r0
 80073ba:	425a      	negs	r2, r3
 80073bc:	4153      	adcs	r3, r2
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d007      	beq.n	80073d4 <_Z7checkSDv+0x2c>
		HAL_GPIO_WritePin(ENABLE_SD_GPIO_Port, ENABLE_SD_Pin, GPIO_PIN_SET);
 80073c4:	23a0      	movs	r3, #160	; 0xa0
 80073c6:	05db      	lsls	r3, r3, #23
 80073c8:	2201      	movs	r2, #1
 80073ca:	2104      	movs	r1, #4
 80073cc:	0018      	movs	r0, r3
 80073ce:	f7fb ff56 	bl	800327e <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(ENABLE_SD_GPIO_Port, ENABLE_SD_Pin, GPIO_PIN_RESET);
	}
}
 80073d2:	e006      	b.n	80073e2 <_Z7checkSDv+0x3a>
		HAL_GPIO_WritePin(ENABLE_SD_GPIO_Port, ENABLE_SD_Pin, GPIO_PIN_RESET);
 80073d4:	23a0      	movs	r3, #160	; 0xa0
 80073d6:	05db      	lsls	r3, r3, #23
 80073d8:	2200      	movs	r2, #0
 80073da:	2104      	movs	r1, #4
 80073dc:	0018      	movs	r0, r3
 80073de:	f7fb ff4e 	bl	800327e <HAL_GPIO_WritePin>
}
 80073e2:	46c0      	nop			; (mov r8, r8)
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <_Z28updateStatusLEDFromRegistersv>:

/* ================================================================================= */
void updateStatusLEDFromRegisters(){
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
	int8_t status = (int8_t) register_map[REG_ERROR_LED_CONFIG];
 80073ee:	4b15      	ldr	r3, [pc, #84]	; (8007444 <_Z28updateStatusLEDFromRegistersv+0x5c>)
 80073f0:	7f1a      	ldrb	r2, [r3, #28]
 80073f2:	1dfb      	adds	r3, r7, #7
 80073f4:	701a      	strb	r2, [r3, #0]

	switch (status) {
 80073f6:	1dfb      	adds	r3, r7, #7
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	b25b      	sxtb	r3, r3
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d017      	beq.n	8007430 <_Z28updateStatusLEDFromRegistersv+0x48>
 8007400:	dc1b      	bgt.n	800743a <_Z28updateStatusLEDFromRegistersv+0x52>
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	d002      	beq.n	800740c <_Z28updateStatusLEDFromRegistersv+0x24>
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00d      	beq.n	8007426 <_Z28updateStatusLEDFromRegistersv+0x3e>
			break;
		case 1:
			led_status.on();
			break;
	}
}
 800740a:	e016      	b.n	800743a <_Z28updateStatusLEDFromRegistersv+0x52>
			led_status.toggle();
 800740c:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <_Z28updateStatusLEDFromRegistersv+0x60>)
 800740e:	0018      	movs	r0, r3
 8007410:	f000 fbe2 	bl	8007bd8 <_ZN3LED6toggleEv>
			register_map[REG_ERROR_LED_CONFIG] = (uint8_t) led_status.getState();
 8007414:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <_Z28updateStatusLEDFromRegistersv+0x60>)
 8007416:	0018      	movs	r0, r3
 8007418:	f000 fbee 	bl	8007bf8 <_ZN3LED8getStateEv>
 800741c:	0003      	movs	r3, r0
 800741e:	001a      	movs	r2, r3
 8007420:	4b08      	ldr	r3, [pc, #32]	; (8007444 <_Z28updateStatusLEDFromRegistersv+0x5c>)
 8007422:	771a      	strb	r2, [r3, #28]
			break;
 8007424:	e009      	b.n	800743a <_Z28updateStatusLEDFromRegistersv+0x52>
			led_status.off();
 8007426:	4b08      	ldr	r3, [pc, #32]	; (8007448 <_Z28updateStatusLEDFromRegistersv+0x60>)
 8007428:	0018      	movs	r0, r3
 800742a:	f000 fbc5 	bl	8007bb8 <_ZN3LED3offEv>
			break;
 800742e:	e004      	b.n	800743a <_Z28updateStatusLEDFromRegistersv+0x52>
			led_status.on();
 8007430:	4b05      	ldr	r3, [pc, #20]	; (8007448 <_Z28updateStatusLEDFromRegistersv+0x60>)
 8007432:	0018      	movs	r0, r3
 8007434:	f000 fbb0 	bl	8007b98 <_ZN3LED2onEv>
			break;
 8007438:	46c0      	nop			; (mov r8, r8)
}
 800743a:	46c0      	nop			; (mov r8, r8)
 800743c:	46bd      	mov	sp, r7
 800743e:	b002      	add	sp, #8
 8007440:	bd80      	pop	{r7, pc}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	20000a10 	.word	0x20000a10
 8007448:	200009ec 	.word	0x200009ec

0800744c <_Z32updateInternRGBLEDsFromRegistersv>:


/* ================================================================================= */

void updateInternRGBLEDsFromRegisters() {
 800744c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800744e:	b085      	sub	sp, #20
 8007450:	af04      	add	r7, sp, #16
	set_rgb_led_data(&neopixel_intern.led[0],
 8007452:	4b30      	ldr	r3, [pc, #192]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 8007454:	2220      	movs	r2, #32
 8007456:	5c9c      	ldrb	r4, [r3, r2]
 8007458:	4b2e      	ldr	r3, [pc, #184]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 800745a:	2221      	movs	r2, #33	; 0x21
 800745c:	5c9d      	ldrb	r5, [r3, r2]
 800745e:	4b2d      	ldr	r3, [pc, #180]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 8007460:	2222      	movs	r2, #34	; 0x22
 8007462:	5c9e      	ldrb	r6, [r3, r2]
 8007464:	4b2b      	ldr	r3, [pc, #172]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 8007466:	2223      	movs	r2, #35	; 0x23
 8007468:	5c9b      	ldrb	r3, [r3, r2]
 800746a:	4a2a      	ldr	r2, [pc, #168]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 800746c:	2124      	movs	r1, #36	; 0x24
 800746e:	5c52      	ldrb	r2, [r2, r1]
 8007470:	4928      	ldr	r1, [pc, #160]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 8007472:	2025      	movs	r0, #37	; 0x25
 8007474:	5c09      	ldrb	r1, [r1, r0]
 8007476:	4828      	ldr	r0, [pc, #160]	; (8007518 <_Z32updateInternRGBLEDsFromRegistersv+0xcc>)
 8007478:	9102      	str	r1, [sp, #8]
 800747a:	9201      	str	r2, [sp, #4]
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	0033      	movs	r3, r6
 8007480:	002a      	movs	r2, r5
 8007482:	0021      	movs	r1, r4
 8007484:	f000 f896 	bl	80075b4 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh>
			register_map[REG_STATUS_RGB_LED_1_RED],
			register_map[REG_STATUS_RGB_LED_1_GREEN],
			register_map[REG_STATUS_RGB_LED_1_BLUE],
			register_map[REG_STATUS_RGB_LED_1_BLINK_TIME],
			register_map[REG_STATUS_RGB_LED_1_BLINK_COUNTER]);
	set_rgb_led_data(&neopixel_intern.led[1],
 8007488:	4b22      	ldr	r3, [pc, #136]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 800748a:	2226      	movs	r2, #38	; 0x26
 800748c:	5c9c      	ldrb	r4, [r3, r2]
 800748e:	4b21      	ldr	r3, [pc, #132]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 8007490:	2227      	movs	r2, #39	; 0x27
 8007492:	5c9d      	ldrb	r5, [r3, r2]
 8007494:	4b1f      	ldr	r3, [pc, #124]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 8007496:	2228      	movs	r2, #40	; 0x28
 8007498:	5c9e      	ldrb	r6, [r3, r2]
 800749a:	4b1e      	ldr	r3, [pc, #120]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 800749c:	2229      	movs	r2, #41	; 0x29
 800749e:	5c9b      	ldrb	r3, [r3, r2]
 80074a0:	4a1c      	ldr	r2, [pc, #112]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 80074a2:	212a      	movs	r1, #42	; 0x2a
 80074a4:	5c52      	ldrb	r2, [r2, r1]
 80074a6:	491b      	ldr	r1, [pc, #108]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 80074a8:	202b      	movs	r0, #43	; 0x2b
 80074aa:	5c09      	ldrb	r1, [r1, r0]
 80074ac:	481b      	ldr	r0, [pc, #108]	; (800751c <_Z32updateInternRGBLEDsFromRegistersv+0xd0>)
 80074ae:	9102      	str	r1, [sp, #8]
 80074b0:	9201      	str	r2, [sp, #4]
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	0033      	movs	r3, r6
 80074b6:	002a      	movs	r2, r5
 80074b8:	0021      	movs	r1, r4
 80074ba:	f000 f87b 	bl	80075b4 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh>
			register_map[REG_STATUS_RGB_LED_2_RED],
			register_map[REG_STATUS_RGB_LED_2_GREEN],
			register_map[REG_STATUS_RGB_LED_2_BLUE],
			register_map[REG_STATUS_RGB_LED_2_BLINK_TIME],
			register_map[REG_STATUS_RGB_LED_2_BLINK_COUNTER]);
	set_rgb_led_data(&neopixel_intern.led[2],
 80074be:	4b15      	ldr	r3, [pc, #84]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 80074c0:	222c      	movs	r2, #44	; 0x2c
 80074c2:	5c9c      	ldrb	r4, [r3, r2]
 80074c4:	4b13      	ldr	r3, [pc, #76]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 80074c6:	222d      	movs	r2, #45	; 0x2d
 80074c8:	5c9d      	ldrb	r5, [r3, r2]
 80074ca:	4b12      	ldr	r3, [pc, #72]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 80074cc:	222e      	movs	r2, #46	; 0x2e
 80074ce:	5c9e      	ldrb	r6, [r3, r2]
 80074d0:	4b10      	ldr	r3, [pc, #64]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 80074d2:	222f      	movs	r2, #47	; 0x2f
 80074d4:	5c9b      	ldrb	r3, [r3, r2]
 80074d6:	4a0f      	ldr	r2, [pc, #60]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 80074d8:	2130      	movs	r1, #48	; 0x30
 80074da:	5c52      	ldrb	r2, [r2, r1]
 80074dc:	490d      	ldr	r1, [pc, #52]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 80074de:	2031      	movs	r0, #49	; 0x31
 80074e0:	5c09      	ldrb	r1, [r1, r0]
 80074e2:	480f      	ldr	r0, [pc, #60]	; (8007520 <_Z32updateInternRGBLEDsFromRegistersv+0xd4>)
 80074e4:	9102      	str	r1, [sp, #8]
 80074e6:	9201      	str	r2, [sp, #4]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	0033      	movs	r3, r6
 80074ec:	002a      	movs	r2, r5
 80074ee:	0021      	movs	r1, r4
 80074f0:	f000 f860 	bl	80075b4 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh>
			register_map[REG_STATUS_RGB_LED_3_GREEN],
			register_map[REG_STATUS_RGB_LED_3_BLUE],
			register_map[REG_STATUS_RGB_LED_3_BLINK_TIME],
			register_map[REG_STATUS_RGB_LED_3_BLINK_COUNTER]);

	register_map[REG_STATUS_RGB_LED_1_BLINK_COUNTER] = 0;
 80074f4:	4b07      	ldr	r3, [pc, #28]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 80074f6:	2225      	movs	r2, #37	; 0x25
 80074f8:	2100      	movs	r1, #0
 80074fa:	5499      	strb	r1, [r3, r2]
	register_map[REG_STATUS_RGB_LED_2_BLINK_COUNTER] = 0;
 80074fc:	4b05      	ldr	r3, [pc, #20]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 80074fe:	222b      	movs	r2, #43	; 0x2b
 8007500:	2100      	movs	r1, #0
 8007502:	5499      	strb	r1, [r3, r2]
	register_map[REG_STATUS_RGB_LED_3_BLINK_COUNTER] = 0;
 8007504:	4b03      	ldr	r3, [pc, #12]	; (8007514 <_Z32updateInternRGBLEDsFromRegistersv+0xc8>)
 8007506:	2231      	movs	r2, #49	; 0x31
 8007508:	2100      	movs	r1, #0
 800750a:	5499      	strb	r1, [r3, r2]
}
 800750c:	46c0      	nop			; (mov r8, r8)
 800750e:	46bd      	mov	sp, r7
 8007510:	b001      	add	sp, #4
 8007512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007514:	20000a10 	.word	0x20000a10
 8007518:	200002d4 	.word	0x200002d4
 800751c:	200002ec 	.word	0x200002ec
 8007520:	20000304 	.word	0x20000304

08007524 <_Z25updateBuzzerFromRegistersv>:

void updateBuzzerFromRegisters() {
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
	uint8_t reg_config = register_map[REG_BUZZER_CONFIG];
 800752a:	1dfb      	adds	r3, r7, #7
 800752c:	4a1f      	ldr	r2, [pc, #124]	; (80075ac <_Z25updateBuzzerFromRegistersv+0x88>)
 800752e:	2133      	movs	r1, #51	; 0x33
 8007530:	5c52      	ldrb	r2, [r2, r1]
 8007532:	701a      	strb	r2, [r3, #0]
	uint8_t reg_data = register_map[REG_BUZZER_DATA];
 8007534:	1dbb      	adds	r3, r7, #6
 8007536:	4a1d      	ldr	r2, [pc, #116]	; (80075ac <_Z25updateBuzzerFromRegistersv+0x88>)
 8007538:	2134      	movs	r1, #52	; 0x34
 800753a:	5c52      	ldrb	r2, [r2, r1]
 800753c:	701a      	strb	r2, [r3, #0]
	uint8_t reg_freq = register_map[REG_BUZZER_FREQ];
 800753e:	1d7b      	adds	r3, r7, #5
 8007540:	4a1a      	ldr	r2, [pc, #104]	; (80075ac <_Z25updateBuzzerFromRegistersv+0x88>)
 8007542:	2135      	movs	r1, #53	; 0x35
 8007544:	5c52      	ldrb	r2, [r2, r1]
 8007546:	701a      	strb	r2, [r3, #0]
	uint8_t reg_blink_time = register_map[REG_BUZZER_BLINK_TIME];
 8007548:	1d3b      	adds	r3, r7, #4
 800754a:	4a18      	ldr	r2, [pc, #96]	; (80075ac <_Z25updateBuzzerFromRegistersv+0x88>)
 800754c:	2137      	movs	r1, #55	; 0x37
 800754e:	5c52      	ldrb	r2, [r2, r1]
 8007550:	701a      	strb	r2, [r3, #0]
	uint8_t reg_blink_counter = register_map[REG_BUZZER_BLINK_COUNTER];
 8007552:	1cfb      	adds	r3, r7, #3
 8007554:	4a15      	ldr	r2, [pc, #84]	; (80075ac <_Z25updateBuzzerFromRegistersv+0x88>)
 8007556:	2138      	movs	r1, #56	; 0x38
 8007558:	5c52      	ldrb	r2, [r2, r1]
 800755a:	701a      	strb	r2, [r3, #0]

	rc_buzzer.setConfig((float) (reg_freq * 10), (uint16_t)(reg_blink_time * 10), reg_blink_counter);
 800755c:	1d7b      	adds	r3, r7, #5
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	0013      	movs	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	189b      	adds	r3, r3, r2
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	0018      	movs	r0, r3
 800756a:	f7f9 fc37 	bl	8000ddc <__aeabi_i2f>
 800756e:	1c01      	adds	r1, r0, #0
 8007570:	1d3b      	adds	r3, r7, #4
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	b29b      	uxth	r3, r3
 8007576:	1c1a      	adds	r2, r3, #0
 8007578:	0092      	lsls	r2, r2, #2
 800757a:	18d3      	adds	r3, r2, r3
 800757c:	18db      	adds	r3, r3, r3
 800757e:	b29a      	uxth	r2, r3
 8007580:	1cfb      	adds	r3, r7, #3
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	b25b      	sxtb	r3, r3
 8007586:	480a      	ldr	r0, [pc, #40]	; (80075b0 <_Z25updateBuzzerFromRegistersv+0x8c>)
 8007588:	f7ff fd45 	bl	8007016 <_ZN6Buzzer9setConfigEfta>

	if(reg_data == 1){
 800758c:	1dbb      	adds	r3, r7, #6
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d107      	bne.n	80075a4 <_Z25updateBuzzerFromRegistersv+0x80>
		register_map[REG_BUZZER_DATA] = 0;
 8007594:	4b05      	ldr	r3, [pc, #20]	; (80075ac <_Z25updateBuzzerFromRegistersv+0x88>)
 8007596:	2234      	movs	r2, #52	; 0x34
 8007598:	2100      	movs	r1, #0
 800759a:	5499      	strb	r1, [r3, r2]
		rc_buzzer.start();
 800759c:	4b04      	ldr	r3, [pc, #16]	; (80075b0 <_Z25updateBuzzerFromRegistersv+0x8c>)
 800759e:	0018      	movs	r0, r3
 80075a0:	f7ff fd53 	bl	800704a <_ZN6Buzzer5startEv>
	}

}
 80075a4:	46c0      	nop			; (mov r8, r8)
 80075a6:	46bd      	mov	sp, r7
 80075a8:	b002      	add	sp, #8
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000a10 	.word	0x20000a10
 80075b0:	200009d4 	.word	0x200009d4

080075b4 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh>:

void set_rgb_led_data(WS2812_LED *led, uint8_t reg_config, uint8_t reg_red,
		uint8_t reg_green, uint8_t reg_blue, uint8_t reg_blink_time,
		uint8_t reg_blink_counter) {
 80075b4:	b590      	push	{r4, r7, lr}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	000c      	movs	r4, r1
 80075be:	0010      	movs	r0, r2
 80075c0:	0019      	movs	r1, r3
 80075c2:	1cfb      	adds	r3, r7, #3
 80075c4:	1c22      	adds	r2, r4, #0
 80075c6:	701a      	strb	r2, [r3, #0]
 80075c8:	1cbb      	adds	r3, r7, #2
 80075ca:	1c02      	adds	r2, r0, #0
 80075cc:	701a      	strb	r2, [r3, #0]
 80075ce:	1c7b      	adds	r3, r7, #1
 80075d0:	1c0a      	adds	r2, r1, #0
 80075d2:	701a      	strb	r2, [r3, #0]

	uint8_t config_mode = reg_config;
 80075d4:	210e      	movs	r1, #14
 80075d6:	187b      	adds	r3, r7, r1
 80075d8:	1cfa      	adds	r2, r7, #3
 80075da:	7812      	ldrb	r2, [r2, #0]
 80075dc:	701a      	strb	r2, [r3, #0]

	WS2812_LED_Mode mode;
	switch (config_mode) {
 80075de:	187b      	adds	r3, r7, r1
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0x38>
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d005      	beq.n	80075f6 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0x42>
 80075ea:	e009      	b.n	8007600 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0x4c>
	case 0: {
		mode = WS2812_LED_MODE_CONTINIOUS;
 80075ec:	230f      	movs	r3, #15
 80075ee:	18fb      	adds	r3, r7, r3
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]
		break;
 80075f4:	e009      	b.n	800760a <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0x56>
	}
	case 1: {
		mode = WS2812_LED_MODE_BLINK;
 80075f6:	230f      	movs	r3, #15
 80075f8:	18fb      	adds	r3, r7, r3
 80075fa:	2201      	movs	r2, #1
 80075fc:	701a      	strb	r2, [r3, #0]
		break;
 80075fe:	e004      	b.n	800760a <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0x56>
	}
	default: {
		mode = WS2812_LED_MODE_CONTINIOUS;
 8007600:	230f      	movs	r3, #15
 8007602:	18fb      	adds	r3, r7, r3
 8007604:	2200      	movs	r2, #0
 8007606:	701a      	strb	r2, [r3, #0]
		break;
 8007608:	46c0      	nop			; (mov r8, r8)
	}
	}

	// Set the Color based on the register entries
	led->setColor(reg_red, reg_green, reg_blue);
 800760a:	2320      	movs	r3, #32
 800760c:	18fb      	adds	r3, r7, r3
 800760e:	781c      	ldrb	r4, [r3, #0]
 8007610:	1c7b      	adds	r3, r7, #1
 8007612:	781a      	ldrb	r2, [r3, #0]
 8007614:	1cbb      	adds	r3, r7, #2
 8007616:	7819      	ldrb	r1, [r3, #0]
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	0023      	movs	r3, r4
 800761c:	f000 fb1e 	bl	8007c5c <_ZN10WS2812_LED8setColorEhhh>


	if (led->mode == WS2812_LED_MODE_CONTINIOUS){
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	791b      	ldrb	r3, [r3, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d11e      	bne.n	8007666 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0xb2>
		led->continious_output  = (reg_config >> 7);
 8007628:	1cfb      	adds	r3, r7, #3
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	09db      	lsrs	r3, r3, #7
 800762e:	b2da      	uxtb	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	729a      	strb	r2, [r3, #10]

		if (mode == WS2812_LED_MODE_BLINK){
 8007634:	230f      	movs	r3, #15
 8007636:	18fb      	adds	r3, r7, r3
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d129      	bne.n	8007692 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0xde>
			led->setBlinkConfig((uint16_t) reg_blink_time * 10, -1);
 800763e:	2324      	movs	r3, #36	; 0x24
 8007640:	18fb      	adds	r3, r7, r3
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	b29b      	uxth	r3, r3
 8007646:	1c1a      	adds	r2, r3, #0
 8007648:	0092      	lsls	r2, r2, #2
 800764a:	18d3      	adds	r3, r2, r3
 800764c:	18db      	adds	r3, r3, r3
 800764e:	b299      	uxth	r1, r3
 8007650:	2301      	movs	r3, #1
 8007652:	425a      	negs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	0018      	movs	r0, r3
 8007658:	f000 fb3b 	bl	8007cd2 <_ZN10WS2812_LED14setBlinkConfigEta>
			led->blink();
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	0018      	movs	r0, r3
 8007660:	f000 fb4f 	bl	8007d02 <_ZN10WS2812_LED5blinkEv>
			led->setMode(mode);
			led->continious_output  = (reg_config >> 7);
		}
	}

}
 8007664:	e015      	b.n	8007692 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0xde>
	} else if(led->mode == WS2812_LED_MODE_BLINK) {
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	791b      	ldrb	r3, [r3, #4]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d111      	bne.n	8007692 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0xde>
		if (mode == WS2812_LED_MODE_CONTINIOUS){
 800766e:	220f      	movs	r2, #15
 8007670:	18bb      	adds	r3, r7, r2
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10c      	bne.n	8007692 <_Z16set_rgb_led_dataP10WS2812_LEDhhhhhh+0xde>
			led->setMode(mode);
 8007678:	18bb      	adds	r3, r7, r2
 800767a:	781a      	ldrb	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	0011      	movs	r1, r2
 8007680:	0018      	movs	r0, r3
 8007682:	f000 fb0b 	bl	8007c9c <_ZN10WS2812_LED7setModeE15WS2812_LED_Mode>
			led->continious_output  = (reg_config >> 7);
 8007686:	1cfb      	adds	r3, r7, #3
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	09db      	lsrs	r3, r3, #7
 800768c:	b2da      	uxtb	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	729a      	strb	r2, [r3, #10]
}
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	46bd      	mov	sp, r7
 8007696:	b005      	add	sp, #20
 8007698:	bd90      	pop	{r4, r7, pc}
	...

0800769c <_Z41__static_initialization_and_destruction_0ii>:
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af02      	add	r7, sp, #8
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d14e      	bne.n	800774a <_Z41__static_initialization_and_destruction_0ii+0xae>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	4a29      	ldr	r2, [pc, #164]	; (8007754 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d14a      	bne.n	800774a <_Z41__static_initialization_and_destruction_0ii+0xae>
FIRMWARE_NEOPIXEL_INTERN_CHANNEL, 3);
 80076b4:	4928      	ldr	r1, [pc, #160]	; (8007758 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80076b6:	4829      	ldr	r0, [pc, #164]	; (800775c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80076b8:	2303      	movs	r3, #3
 80076ba:	2200      	movs	r2, #0
 80076bc:	f000 fbbd 	bl	8007e3a <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh>
FIRMWARE_NEOPIXEL_EXTERN_CHANNEL, 16);
 80076c0:	4927      	ldr	r1, [pc, #156]	; (8007760 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80076c2:	4828      	ldr	r0, [pc, #160]	; (8007764 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80076c4:	2310      	movs	r3, #16
 80076c6:	2200      	movs	r2, #0
 80076c8:	f000 fbb7 	bl	8007e3a <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh>
Buzzer rc_buzzer(FIRMWARE_PWM_BUZZER_TIM, FIRMWARE_PWM_BUZZER_CHANNEL);
 80076cc:	4926      	ldr	r1, [pc, #152]	; (8007768 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80076ce:	4b27      	ldr	r3, [pc, #156]	; (800776c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80076d0:	2204      	movs	r2, #4
 80076d2:	0018      	movs	r0, r3
 80076d4:	f7ff fb91 	bl	8006dfa <_ZN6BuzzerC1EP17TIM_HandleTypeDefm>
LED led_status(LED_GPIO_Port, LED_Pin);
 80076d8:	2380      	movs	r3, #128	; 0x80
 80076da:	021a      	lsls	r2, r3, #8
 80076dc:	23a0      	movs	r3, #160	; 0xa0
 80076de:	05d9      	lsls	r1, r3, #23
 80076e0:	4b23      	ldr	r3, [pc, #140]	; (8007770 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 80076e2:	0018      	movs	r0, r3
 80076e4:	f000 fa45 	bl	8007b72 <_ZN3LEDC1EP12GPIO_TypeDeft>
LED led_usb(LED_USB_GPIO_Port, LED_USB_Pin);
 80076e8:	4922      	ldr	r1, [pc, #136]	; (8007774 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 80076ea:	4b23      	ldr	r3, [pc, #140]	; (8007778 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80076ec:	2201      	movs	r2, #1
 80076ee:	0018      	movs	r0, r3
 80076f0:	f000 fa3f 	bl	8007b72 <_ZN3LEDC1EP12GPIO_TypeDeft>
EEPROM eeprom_config(FIRMWARE_I2C_INTERN, BOARD_EEPROM_CONFIG_ADDRESS);
 80076f4:	4921      	ldr	r1, [pc, #132]	; (800777c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80076f6:	4b22      	ldr	r3, [pc, #136]	; (8007780 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80076f8:	22a0      	movs	r2, #160	; 0xa0
 80076fa:	0018      	movs	r0, r3
 80076fc:	f7ff fd27 	bl	800714e <_ZN6EEPROMC1EP19__I2C_HandleTypeDefh>
elapsedMillis timer_check = 1000;
 8007700:	23fa      	movs	r3, #250	; 0xfa
 8007702:	009a      	lsls	r2, r3, #2
 8007704:	4b1f      	ldr	r3, [pc, #124]	; (8007784 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8007706:	0011      	movs	r1, r2
 8007708:	0018      	movs	r0, r3
 800770a:	f7ff fd33 	bl	8007174 <_ZN13elapsedMillisC1Em>
elapsedMillis timer_led_update;
 800770e:	4b1e      	ldr	r3, [pc, #120]	; (8007788 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8007710:	0018      	movs	r0, r3
 8007712:	f7ff fb56 	bl	8006dc2 <_ZN13elapsedMillisC1Ev>
elapsedMillis timer_led_register_read;
 8007716:	4b1d      	ldr	r3, [pc, #116]	; (800778c <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8007718:	0018      	movs	r0, r3
 800771a:	f7ff fb52 	bl	8006dc2 <_ZN13elapsedMillisC1Ev>
I2C_Slave i2c_slave_cm4(&hi2c2, 0x02, register_map, 255);
 800771e:	4b1c      	ldr	r3, [pc, #112]	; (8007790 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8007720:	491c      	ldr	r1, [pc, #112]	; (8007794 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8007722:	481d      	ldr	r0, [pc, #116]	; (8007798 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8007724:	22ff      	movs	r2, #255	; 0xff
 8007726:	9200      	str	r2, [sp, #0]
 8007728:	2202      	movs	r2, #2
 800772a:	f000 f913 	bl	8007954 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh>
I2C_Slave i2c_slave_intern(&hi2c1, 0x02, register_map, 255);
 800772e:	4b18      	ldr	r3, [pc, #96]	; (8007790 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8007730:	4912      	ldr	r1, [pc, #72]	; (800777c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8007732:	481a      	ldr	r0, [pc, #104]	; (800779c <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8007734:	22ff      	movs	r2, #255	; 0xff
 8007736:	9200      	str	r2, [sp, #0]
 8007738:	2202      	movs	r2, #2
 800773a:	f000 f90b 	bl	8007954 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh>
elapsedMillis timer_test = 10000;
 800773e:	4a18      	ldr	r2, [pc, #96]	; (80077a0 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8007740:	4b18      	ldr	r3, [pc, #96]	; (80077a4 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8007742:	0011      	movs	r1, r2
 8007744:	0018      	movs	r0, r3
 8007746:	f7ff fd15 	bl	8007174 <_ZN13elapsedMillisC1Em>
}
 800774a:	46c0      	nop			; (mov r8, r8)
 800774c:	46bd      	mov	sp, r7
 800774e:	b002      	add	sp, #8
 8007750:	bd80      	pop	{r7, pc}
 8007752:	46c0      	nop			; (mov r8, r8)
 8007754:	0000ffff 	.word	0x0000ffff
 8007758:	20000180 	.word	0x20000180
 800775c:	200002d4 	.word	0x200002d4
 8007760:	200001cc 	.word	0x200001cc
 8007764:	20000654 	.word	0x20000654
 8007768:	20000134 	.word	0x20000134
 800776c:	200009d4 	.word	0x200009d4
 8007770:	200009ec 	.word	0x200009ec
 8007774:	50000400 	.word	0x50000400
 8007778:	200009f4 	.word	0x200009f4
 800777c:	2000008c 	.word	0x2000008c
 8007780:	200009fc 	.word	0x200009fc
 8007784:	20000a04 	.word	0x20000a04
 8007788:	20000a08 	.word	0x20000a08
 800778c:	20000a0c 	.word	0x20000a0c
 8007790:	20000a10 	.word	0x20000a10
 8007794:	200000e0 	.word	0x200000e0
 8007798:	20000b10 	.word	0x20000b10
 800779c:	20000b30 	.word	0x20000b30
 80077a0:	00002710 	.word	0x00002710
 80077a4:	20000b50 	.word	0x20000b50

080077a8 <_GLOBAL__sub_I_neopixel_intern>:
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	4b03      	ldr	r3, [pc, #12]	; (80077bc <_GLOBAL__sub_I_neopixel_intern+0x14>)
 80077ae:	0019      	movs	r1, r3
 80077b0:	2001      	movs	r0, #1
 80077b2:	f7ff ff73 	bl	800769c <_Z41__static_initialization_and_destruction_0ii>
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	46c0      	nop			; (mov r8, r8)
 80077bc:	0000ffff 	.word	0x0000ffff

080077c0 <_Z3nopv>:
#include "i2c_slave.h"

I2C_Slave *registered_i2c_slaves[FIRMWARE_NUM_I2C_SLAVES];
uint8_t num_i2c_slave = 0;

void nop() {
 80077c0:	b580      	push	{r7, lr}
 80077c2:	af00      	add	r7, sp, #0

}
 80077c4:	46c0      	nop			; (mov r8, r8)
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>:

I2C_Slave* get_I2C_slave(I2C_HandleTypeDef *hi2c) {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < num_i2c_slave; i++) {
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	e00f      	b.n	80077fa <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x2e>
		if (registered_i2c_slaves[i]->hi2c == hi2c) {
 80077da:	4b0d      	ldr	r3, [pc, #52]	; (8007810 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x44>)
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	0092      	lsls	r2, r2, #2
 80077e0:	58d3      	ldr	r3, [r2, r3]
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d104      	bne.n	80077f4 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x28>
			return registered_i2c_slaves[i];
 80077ea:	4b09      	ldr	r3, [pc, #36]	; (8007810 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x44>)
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	0092      	lsls	r2, r2, #2
 80077f0:	58d3      	ldr	r3, [r2, r3]
 80077f2:	e009      	b.n	8007808 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x3c>
	for (int i = 0; i < num_i2c_slave; i++) {
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3301      	adds	r3, #1
 80077f8:	60fb      	str	r3, [r7, #12]
 80077fa:	4b06      	ldr	r3, [pc, #24]	; (8007814 <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0x48>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	001a      	movs	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	4293      	cmp	r3, r2
 8007804:	dbe9      	blt.n	80077da <_Z13get_I2C_slaveP19__I2C_HandleTypeDef+0xe>
		}
	}
	return NULL;
 8007806:	2300      	movs	r3, #0
}
 8007808:	0018      	movs	r0, r3
 800780a:	46bd      	mov	sp, r7
 800780c:	b004      	add	sp, #16
 800780e:	bd80      	pop	{r7, pc}
 8007810:	20000b54 	.word	0x20000b54
 8007814:	20000b5c 	.word	0x20000b5c

08007818 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	0018      	movs	r0, r3
 8007824:	f7ff ffd2 	bl	80077cc <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 8007828:	0003      	movs	r3, r0
 800782a:	60fb      	str	r3, [r7, #12]
	if (slave != NULL) {
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <HAL_I2C_ListenCpltCallback+0x22>
		slave->i2c_listenCompleteCallback();
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	0018      	movs	r0, r3
 8007836:	f000 f922 	bl	8007a7e <_ZN9I2C_Slave26i2c_listenCompleteCallbackEv>
	}
}
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	46bd      	mov	sp, r7
 800783e:	b004      	add	sp, #16
 8007840:	bd80      	pop	{r7, pc}

08007842 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection,
		uint16_t AddrMatchCode) {
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	0008      	movs	r0, r1
 800784c:	0011      	movs	r1, r2
 800784e:	1cfb      	adds	r3, r7, #3
 8007850:	1c02      	adds	r2, r0, #0
 8007852:	701a      	strb	r2, [r3, #0]
 8007854:	003b      	movs	r3, r7
 8007856:	1c0a      	adds	r2, r1, #0
 8007858:	801a      	strh	r2, [r3, #0]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	0018      	movs	r0, r3
 800785e:	f7ff ffb5 	bl	80077cc <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 8007862:	0003      	movs	r3, r0
 8007864:	60fb      	str	r3, [r7, #12]
	if (slave != NULL) {
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d007      	beq.n	800787c <HAL_I2C_AddrCallback+0x3a>
		slave->i2c_addrCallback(TransferDirection, AddrMatchCode);
 800786c:	003b      	movs	r3, r7
 800786e:	881a      	ldrh	r2, [r3, #0]
 8007870:	1cfb      	adds	r3, r7, #3
 8007872:	7819      	ldrb	r1, [r3, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	0018      	movs	r0, r3
 8007878:	f000 f8bf 	bl	80079fa <_ZN9I2C_Slave16i2c_addrCallbackEht>
	}
}
 800787c:	46c0      	nop			; (mov r8, r8)
 800787e:	46bd      	mov	sp, r7
 8007880:	b004      	add	sp, #16
 8007882:	bd80      	pop	{r7, pc}

08007884 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	0018      	movs	r0, r3
 8007890:	f7ff ff9c 	bl	80077cc <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 8007894:	0003      	movs	r3, r0
 8007896:	60fb      	str	r3, [r7, #12]
	if (slave != NULL) {
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <HAL_I2C_SlaveRxCpltCallback+0x22>
		slave->i2c_rxCompleteCallback();
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	0018      	movs	r0, r3
 80078a2:	f000 f909 	bl	8007ab8 <_ZN9I2C_Slave22i2c_rxCompleteCallbackEv>
	}
}
 80078a6:	46c0      	nop			; (mov r8, r8)
 80078a8:	46bd      	mov	sp, r7
 80078aa:	b004      	add	sp, #16
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b084      	sub	sp, #16
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	0018      	movs	r0, r3
 80078ba:	f7ff ff87 	bl	80077cc <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 80078be:	0003      	movs	r3, r0
 80078c0:	60fb      	str	r3, [r7, #12]
	if (slave != NULL) {
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <HAL_I2C_SlaveTxCpltCallback+0x22>
		slave->i2c_txCompleteCallback();
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	0018      	movs	r0, r3
 80078cc:	f000 f918 	bl	8007b00 <_ZN9I2C_Slave22i2c_txCompleteCallbackEv>
	}
}
 80078d0:	46c0      	nop			; (mov r8, r8)
 80078d2:	46bd      	mov	sp, r7
 80078d4:	b004      	add	sp, #16
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	0018      	movs	r0, r3
 80078e4:	f7ff ff72 	bl	80077cc <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 80078e8:	0003      	movs	r3, r0
 80078ea:	60fb      	str	r3, [r7, #12]
	uint32_t x = HAL_I2C_GetError(hi2c);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	0018      	movs	r0, r3
 80078f0:	f7fb ffcb 	bl	800388a <HAL_I2C_GetError>
 80078f4:	0003      	movs	r3, r0
 80078f6:	60bb      	str	r3, [r7, #8]
	if (slave != NULL) {
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d003      	beq.n	8007906 <HAL_I2C_ErrorCallback+0x2e>
		slave->i2c_errorCallback();
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	0018      	movs	r0, r3
 8007902:	f000 f91d 	bl	8007b40 <_ZN9I2C_Slave17i2c_errorCallbackEv>
	}
}
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	46bd      	mov	sp, r7
 800790a:	b004      	add	sp, #16
 800790c:	bd80      	pop	{r7, pc}

0800790e <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c) {
 800790e:	b580      	push	{r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
	I2C_Slave *slave = get_I2C_slave(hi2c);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	0018      	movs	r0, r3
 800791a:	f7ff ff57 	bl	80077cc <_Z13get_I2C_slaveP19__I2C_HandleTypeDef>
 800791e:	0003      	movs	r3, r0
 8007920:	60fb      	str	r3, [r7, #12]
	if (slave != NULL) {
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <HAL_I2C_AbortCpltCallback+0x22>
		slave->i2c_abortCompleteCallback();
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	0018      	movs	r0, r3
 800792c:	f000 f917 	bl	8007b5e <_ZN9I2C_Slave25i2c_abortCompleteCallbackEv>
	}
}
 8007930:	46c0      	nop			; (mov r8, r8)
 8007932:	46bd      	mov	sp, r7
 8007934:	b004      	add	sp, #16
 8007936:	bd80      	pop	{r7, pc}

08007938 <_ZN19I2C_Slave_callbacksC1Ev>:

typedef struct I2C_Slave_config {
	I2C_Slave_mode mode;
} I2C_Slave_config;

struct I2C_Slave_callbacks {
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	0018      	movs	r0, r3
 8007944:	f7ff fbe7 	bl	8007116 <_ZN19core_utils_CallbackC1Ev>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	0018      	movs	r0, r3
 800794c:	46bd      	mov	sp, r7
 800794e:	b002      	add	sp, #8
 8007950:	bd80      	pop	{r7, pc}
	...

08007954 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh>:

/* ===================================================================== */
I2C_Slave::I2C_Slave(I2C_HandleTypeDef *hi2c, uint8_t address,
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	60f8      	str	r0, [r7, #12]
 800795c:	60b9      	str	r1, [r7, #8]
 800795e:	603b      	str	r3, [r7, #0]
 8007960:	1dfb      	adds	r3, r7, #7
 8007962:	701a      	strb	r2, [r3, #0]
		uint8_t *registerMap, uint8_t num_registers) {
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	0018      	movs	r0, r3
 8007968:	f7ff ffe6 	bl	8007938 <_ZN19I2C_Slave_callbacksC1Ev>
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	615a      	str	r2, [r3, #20]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2200      	movs	r2, #0
 8007976:	761a      	strb	r2, [r3, #24]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	76da      	strb	r2, [r3, #27]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2200      	movs	r2, #0
 8007982:	771a      	strb	r2, [r3, #28]
	this->hi2c = hi2c;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	611a      	str	r2, [r3, #16]
	this->address = address;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	1dfa      	adds	r2, r7, #7
 800798e:	7812      	ldrb	r2, [r2, #0]
 8007990:	775a      	strb	r2, [r3, #29]
	this->register_map = registerMap;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	683a      	ldr	r2, [r7, #0]
 8007996:	615a      	str	r2, [r3, #20]
	this->register_map_length = num_registers;
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	2318      	movs	r3, #24
 800799c:	18fb      	adds	r3, r7, r3
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	7653      	strb	r3, [r2, #25]

	registered_i2c_slaves[num_i2c_slave] = this;
 80079a2:	4b09      	ldr	r3, [pc, #36]	; (80079c8 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh+0x74>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	001a      	movs	r2, r3
 80079a8:	4b08      	ldr	r3, [pc, #32]	; (80079cc <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh+0x78>)
 80079aa:	0092      	lsls	r2, r2, #2
 80079ac:	68f9      	ldr	r1, [r7, #12]
 80079ae:	50d1      	str	r1, [r2, r3]
	num_i2c_slave++;
 80079b0:	4b05      	ldr	r3, [pc, #20]	; (80079c8 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh+0x74>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	3301      	adds	r3, #1
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	4b03      	ldr	r3, [pc, #12]	; (80079c8 <_ZN9I2C_SlaveC1EP19__I2C_HandleTypeDefhPhh+0x74>)
 80079ba:	701a      	strb	r2, [r3, #0]
}
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	0018      	movs	r0, r3
 80079c0:	46bd      	mov	sp, r7
 80079c2:	b004      	add	sp, #16
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	46c0      	nop			; (mov r8, r8)
 80079c8:	20000b5c 	.word	0x20000b5c
 80079cc:	20000b54 	.word	0x20000b54

080079d0 <_ZN9I2C_Slave4initEv>:

	registered_i2c_slaves[num_i2c_slave] = this;
	num_i2c_slave++;
}

void I2C_Slave::init() {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]

}
 80079d8:	46c0      	nop			; (mov r8, r8)
 80079da:	46bd      	mov	sp, r7
 80079dc:	b002      	add	sp, #8
 80079de:	bd80      	pop	{r7, pc}

080079e0 <_ZN9I2C_Slave5startEv>:

void I2C_Slave::start() {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
	HAL_I2C_EnableListen_IT(this->hi2c);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	0018      	movs	r0, r3
 80079ee:	f7fb fe97 	bl	8003720 <HAL_I2C_EnableListen_IT>
}
 80079f2:	46c0      	nop			; (mov r8, r8)
 80079f4:	46bd      	mov	sp, r7
 80079f6:	b002      	add	sp, #8
 80079f8:	bd80      	pop	{r7, pc}

080079fa <_ZN9I2C_Slave16i2c_addrCallbackEht>:
	}
	}
}

void I2C_Slave::i2c_addrCallback(uint8_t TransferDirection,
		uint16_t AddrMatchCode) {
 80079fa:	b590      	push	{r4, r7, lr}
 80079fc:	b085      	sub	sp, #20
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	0008      	movs	r0, r1
 8007a04:	0011      	movs	r1, r2
 8007a06:	1cfb      	adds	r3, r7, #3
 8007a08:	1c02      	adds	r2, r0, #0
 8007a0a:	701a      	strb	r2, [r3, #0]
 8007a0c:	003b      	movs	r3, r7
 8007a0e:	1c0a      	adds	r2, r1, #0
 8007a10:	801a      	strh	r2, [r3, #0]

	if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8007a12:	1cfb      	adds	r3, r7, #3
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d11a      	bne.n	8007a50 <_ZN9I2C_Slave16i2c_addrCallbackEht+0x56>
		this->direction = I2C_SLAVE_DIRECTION_TRANSMIT;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	769a      	strb	r2, [r3, #26]
		if (this->received_bytes == 0) {
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	7edb      	ldrb	r3, [r3, #27]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d110      	bne.n	8007a4a <_ZN9I2C_Slave16i2c_addrCallbackEht+0x50>
			HAL_StatusTypeDef status = HAL_I2C_Slave_Seq_Receive_IT(this->hi2c, &this->bufferAddress, 1,
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6918      	ldr	r0, [r3, #16]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	3318      	adds	r3, #24
 8007a30:	0019      	movs	r1, r3
 8007a32:	230f      	movs	r3, #15
 8007a34:	18fc      	adds	r4, r7, r3
 8007a36:	2380      	movs	r3, #128	; 0x80
 8007a38:	045b      	lsls	r3, r3, #17
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f7fb fdae 	bl	800359c <HAL_I2C_Slave_Seq_Receive_IT>
 8007a40:	0003      	movs	r3, r0
 8007a42:	7023      	strb	r3, [r4, #0]
			I2C_NEXT_FRAME);
			nop();
 8007a44:	f7ff febc 	bl	80077c0 <_Z3nopv>
	} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
		this->direction = I2C_SLAVE_DIRECTION_RECEIVE;
		HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
				&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
	}
}
 8007a48:	e015      	b.n	8007a76 <_ZN9I2C_Slave16i2c_addrCallbackEht+0x7c>
			nop();
 8007a4a:	f7ff feb9 	bl	80077c0 <_Z3nopv>
}
 8007a4e:	e012      	b.n	8007a76 <_ZN9I2C_Slave16i2c_addrCallbackEht+0x7c>
	} else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
 8007a50:	1cfb      	adds	r3, r7, #3
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b01      	cmp	r3, #1
 8007a56:	d10e      	bne.n	8007a76 <_ZN9I2C_Slave16i2c_addrCallbackEht+0x7c>
		this->direction = I2C_SLAVE_DIRECTION_RECEIVE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	769a      	strb	r2, [r3, #26]
		HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6918      	ldr	r0, [r3, #16]
				&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	7e12      	ldrb	r2, [r2, #24]
		HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 8007a6a:	1899      	adds	r1, r3, r2
 8007a6c:	2380      	movs	r3, #128	; 0x80
 8007a6e:	045b      	lsls	r3, r3, #17
 8007a70:	2201      	movs	r2, #1
 8007a72:	f7fb fcd3 	bl	800341c <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	b005      	add	sp, #20
 8007a7c:	bd90      	pop	{r4, r7, pc}

08007a7e <_ZN9I2C_Slave26i2c_listenCompleteCallbackEv>:
void I2C_Slave::i2c_listenCompleteCallback() {
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b082      	sub	sp, #8
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]

	this->received_bytes = 0;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	76da      	strb	r2, [r3, #27]
	this->sent_bytes = 0;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	771a      	strb	r2, [r3, #28]
	HAL_I2C_EnableListen_IT(this->hi2c);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	0018      	movs	r0, r3
 8007a98:	f7fb fe42 	bl	8003720 <HAL_I2C_EnableListen_IT>
	if (this->callbacks.listen_cmplt_callback.registered) {
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	7a1b      	ldrb	r3, [r3, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <_ZN9I2C_Slave26i2c_listenCompleteCallbackEv+0x32>
		this->callbacks.listen_cmplt_callback.call(this);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	0011      	movs	r1, r2
 8007aaa:	0018      	movs	r0, r3
 8007aac:	f7ff fb3f 	bl	800712e <_ZN19core_utils_Callback4callEPv>
	}
}
 8007ab0:	46c0      	nop			; (mov r8, r8)
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	b002      	add	sp, #8
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <_ZN9I2C_Slave22i2c_rxCompleteCallbackEv>:
void I2C_Slave::i2c_rxCompleteCallback() {
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
	this->received_bytes++;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	7edb      	ldrb	r3, [r3, #27]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	76da      	strb	r2, [r3, #27]
	if (this->received_bytes > 1) {
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	7edb      	ldrb	r3, [r3, #27]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d905      	bls.n	8007ae0 <_ZN9I2C_Slave22i2c_rxCompleteCallbackEv+0x28>

		this->bufferAddress++;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	7e1b      	ldrb	r3, [r3, #24]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	b2da      	uxtb	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	761a      	strb	r2, [r3, #24]

	}
	HAL_I2C_Slave_Seq_Receive_IT(this->hi2c,
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6918      	ldr	r0, [r3, #16]
			&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	695b      	ldr	r3, [r3, #20]
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	7e12      	ldrb	r2, [r2, #24]
	HAL_I2C_Slave_Seq_Receive_IT(this->hi2c,
 8007aec:	1899      	adds	r1, r3, r2
 8007aee:	2380      	movs	r3, #128	; 0x80
 8007af0:	045b      	lsls	r3, r3, #17
 8007af2:	2201      	movs	r2, #1
 8007af4:	f7fb fd52 	bl	800359c <HAL_I2C_Slave_Seq_Receive_IT>

}
 8007af8:	46c0      	nop			; (mov r8, r8)
 8007afa:	46bd      	mov	sp, r7
 8007afc:	b002      	add	sp, #8
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <_ZN9I2C_Slave22i2c_txCompleteCallbackEv>:
void I2C_Slave::i2c_txCompleteCallback() {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
	this->bufferAddress++;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	7e1b      	ldrb	r3, [r3, #24]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	b2da      	uxtb	r2, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	761a      	strb	r2, [r3, #24]
	this->sent_bytes++;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	7f1b      	ldrb	r3, [r3, #28]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	771a      	strb	r2, [r3, #28]
	HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6918      	ldr	r0, [r3, #16]
			&this->register_map[this->bufferAddress], 1, I2C_NEXT_FRAME);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	7e12      	ldrb	r2, [r2, #24]
	HAL_I2C_Slave_Seq_Transmit_IT(this->hi2c,
 8007b2c:	1899      	adds	r1, r3, r2
 8007b2e:	2380      	movs	r3, #128	; 0x80
 8007b30:	045b      	lsls	r3, r3, #17
 8007b32:	2201      	movs	r2, #1
 8007b34:	f7fb fc72 	bl	800341c <HAL_I2C_Slave_Seq_Transmit_IT>

}
 8007b38:	46c0      	nop			; (mov r8, r8)
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b002      	add	sp, #8
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <_ZN9I2C_Slave17i2c_errorCallbackEv>:
void I2C_Slave::i2c_errorCallback() {
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
	nop();
 8007b48:	f7ff fe3a 	bl	80077c0 <_Z3nopv>
	HAL_I2C_EnableListen_IT(this->hi2c);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	0018      	movs	r0, r3
 8007b52:	f7fb fde5 	bl	8003720 <HAL_I2C_EnableListen_IT>
}
 8007b56:	46c0      	nop			; (mov r8, r8)
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	b002      	add	sp, #8
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <_ZN9I2C_Slave25i2c_abortCompleteCallbackEv>:
void I2C_Slave::i2c_abortCompleteCallback() {
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
	nop();
 8007b66:	f7ff fe2b 	bl	80077c0 <_Z3nopv>
}
 8007b6a:	46c0      	nop			; (mov r8, r8)
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	b002      	add	sp, #8
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <_ZN3LEDC1EP12GPIO_TypeDeft>:
 */


#include "led.h"

LED::LED(GPIO_TypeDef* GPIOx, uint16_t PINx) {
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b084      	sub	sp, #16
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	60f8      	str	r0, [r7, #12]
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	1dbb      	adds	r3, r7, #6
 8007b7e:	801a      	strh	r2, [r3, #0]
	this->GPIOx = GPIOx;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	601a      	str	r2, [r3, #0]
	this->PINx = PINx;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	1dba      	adds	r2, r7, #6
 8007b8a:	8812      	ldrh	r2, [r2, #0]
 8007b8c:	809a      	strh	r2, [r3, #4]
}
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	0018      	movs	r0, r3
 8007b92:	46bd      	mov	sp, r7
 8007b94:	b004      	add	sp, #16
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <_ZN3LED2onEv>:

void LED::on() {
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_SET);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6818      	ldr	r0, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	889b      	ldrh	r3, [r3, #4]
 8007ba8:	2201      	movs	r2, #1
 8007baa:	0019      	movs	r1, r3
 8007bac:	f7fb fb67 	bl	800327e <HAL_GPIO_WritePin>
}
 8007bb0:	46c0      	nop			; (mov r8, r8)
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	b002      	add	sp, #8
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <_ZN3LED3offEv>:


void LED::off() {
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_RESET);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6818      	ldr	r0, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	889b      	ldrh	r3, [r3, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	0019      	movs	r1, r3
 8007bcc:	f7fb fb57 	bl	800327e <HAL_GPIO_WritePin>
}
 8007bd0:	46c0      	nop			; (mov r8, r8)
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	b002      	add	sp, #8
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <_ZN3LED6toggleEv>:

void LED::toggle() {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(this->GPIOx, this->PINx);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	889b      	ldrh	r3, [r3, #4]
 8007be8:	0019      	movs	r1, r3
 8007bea:	0010      	movs	r0, r2
 8007bec:	f7fb fb64 	bl	80032b8 <HAL_GPIO_TogglePin>
}
 8007bf0:	46c0      	nop			; (mov r8, r8)
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	b002      	add	sp, #8
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <_ZN3LED8getStateEv>:

uint8_t LED::getState(){
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_ReadPin(this->GPIOx, this->PINx);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	889b      	ldrh	r3, [r3, #4]
 8007c08:	0019      	movs	r1, r3
 8007c0a:	0010      	movs	r0, r2
 8007c0c:	f7fb fb1a 	bl	8003244 <HAL_GPIO_ReadPin>
}
 8007c10:	46c0      	nop			; (mov r8, r8)
 8007c12:	0018      	movs	r0, r3
 8007c14:	46bd      	mov	sp, r7
 8007c16:	b002      	add	sp, #8
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <_ZN10WS2812_LEDC1Ev>:
#include <ws2812.h>

uint8_t num_neopixel = 0;
WS2812_Strand *neopixel_handler[2] = { 0 };

WS2812_LED::WS2812_LED() {
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	705a      	strb	r2, [r3, #1]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	709a      	strb	r2, [r3, #2]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	70da      	strb	r2, [r3, #3]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	729a      	strb	r2, [r3, #10]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	330c      	adds	r3, #12
 8007c3e:	0018      	movs	r0, r3
 8007c40:	f7ff f8bf 	bl	8006dc2 <_ZN13elapsedMillisC1Ev>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3310      	adds	r3, #16
 8007c48:	2203      	movs	r2, #3
 8007c4a:	2100      	movs	r1, #0
 8007c4c:	0018      	movs	r0, r3
 8007c4e:	f000 fac1 	bl	80081d4 <memset>
}
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	0018      	movs	r0, r3
 8007c56:	46bd      	mov	sp, r7
 8007c58:	b002      	add	sp, #8
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <_ZN10WS2812_LED8setColorEhhh>:

WS2812_LED::WS2812_LED(uint8_t position) {
	this->strand_position = position;
}

void WS2812_LED::setColor(uint8_t red, uint8_t green, uint8_t blue) {
 8007c5c:	b590      	push	{r4, r7, lr}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	000c      	movs	r4, r1
 8007c66:	0010      	movs	r0, r2
 8007c68:	0019      	movs	r1, r3
 8007c6a:	1cfb      	adds	r3, r7, #3
 8007c6c:	1c22      	adds	r2, r4, #0
 8007c6e:	701a      	strb	r2, [r3, #0]
 8007c70:	1cbb      	adds	r3, r7, #2
 8007c72:	1c02      	adds	r2, r0, #0
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	1c7b      	adds	r3, r7, #1
 8007c78:	1c0a      	adds	r2, r1, #0
 8007c7a:	701a      	strb	r2, [r3, #0]
	this->red = red;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	1cfa      	adds	r2, r7, #3
 8007c80:	7812      	ldrb	r2, [r2, #0]
 8007c82:	705a      	strb	r2, [r3, #1]
	this->green = green;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	1cba      	adds	r2, r7, #2
 8007c88:	7812      	ldrb	r2, [r2, #0]
 8007c8a:	709a      	strb	r2, [r3, #2]
	this->blue = blue;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	1c7a      	adds	r2, r7, #1
 8007c90:	7812      	ldrb	r2, [r2, #0]
 8007c92:	70da      	strb	r2, [r3, #3]
}
 8007c94:	46c0      	nop			; (mov r8, r8)
 8007c96:	46bd      	mov	sp, r7
 8007c98:	b003      	add	sp, #12
 8007c9a:	bd90      	pop	{r4, r7, pc}

08007c9c <_ZN10WS2812_LED7setModeE15WS2812_LED_Mode>:

void WS2812_LED::setMode(WS2812_LED_Mode mode) {
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	000a      	movs	r2, r1
 8007ca6:	1cfb      	adds	r3, r7, #3
 8007ca8:	701a      	strb	r2, [r3, #0]
	if (this->mode == WS2812_LED_MODE_CONTINIOUS && mode == WS2812_LED_MODE_BLINK){
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	791b      	ldrb	r3, [r3, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d107      	bne.n	8007cc2 <_ZN10WS2812_LED7setModeE15WS2812_LED_Mode+0x26>
 8007cb2:	1cfb      	adds	r3, r7, #3
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d103      	bne.n	8007cc2 <_ZN10WS2812_LED7setModeE15WS2812_LED_Mode+0x26>
		this->blink();
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	f000 f820 	bl	8007d02 <_ZN10WS2812_LED5blinkEv>
	}
	this->mode = mode;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	1cfa      	adds	r2, r7, #3
 8007cc6:	7812      	ldrb	r2, [r2, #0]
 8007cc8:	711a      	strb	r2, [r3, #4]
}
 8007cca:	46c0      	nop			; (mov r8, r8)
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	b002      	add	sp, #8
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <_ZN10WS2812_LED14setBlinkConfigEta>:
void WS2812_LED::setBlinkConfig(WS2812_blink_config config) {
	this->blink_config = config;
}

void WS2812_LED::setBlinkConfig(uint16_t on_time_ms, int8_t counter) {
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	0008      	movs	r0, r1
 8007cdc:	0011      	movs	r1, r2
 8007cde:	1cbb      	adds	r3, r7, #2
 8007ce0:	1c02      	adds	r2, r0, #0
 8007ce2:	801a      	strh	r2, [r3, #0]
 8007ce4:	1c7b      	adds	r3, r7, #1
 8007ce6:	1c0a      	adds	r2, r1, #0
 8007ce8:	701a      	strb	r2, [r3, #0]
	this->blink_config.on_time_ms = on_time_ms;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	1cba      	adds	r2, r7, #2
 8007cee:	8812      	ldrh	r2, [r2, #0]
 8007cf0:	811a      	strh	r2, [r3, #8]
	this->blink_config.counter = counter;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	1c7a      	adds	r2, r7, #1
 8007cf6:	7812      	ldrb	r2, [r2, #0]
 8007cf8:	719a      	strb	r2, [r3, #6]
}
 8007cfa:	46c0      	nop			; (mov r8, r8)
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	b002      	add	sp, #8
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <_ZN10WS2812_LED5blinkEv>:

void WS2812_LED::setContiniousOutput(uint8_t output) {
	this->continious_output = output;
}

void WS2812_LED::blink() {
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b082      	sub	sp, #8
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
	if (this->mode == WS2812_LED_MODE_CONTINIOUS){
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	791b      	ldrb	r3, [r3, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d118      	bne.n	8007d44 <_ZN10WS2812_LED5blinkEv+0x42>
		this->mode = WS2812_LED_MODE_BLINK;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	711a      	strb	r2, [r3, #4]
		this->blink_output = !this->continious_output;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	7a9b      	ldrb	r3, [r3, #10]
 8007d1c:	425a      	negs	r2, r3
 8007d1e:	4153      	adcs	r3, r2
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	001a      	movs	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	74da      	strb	r2, [r3, #19]
		this->blink_counter = this->blink_config.counter*2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	799b      	ldrb	r3, [r3, #6]
 8007d2c:	b25b      	sxtb	r3, r3
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	18db      	adds	r3, r3, r3
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	b25a      	sxtb	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	751a      	strb	r2, [r3, #20]
		this->blinkTimer.reset();
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	330c      	adds	r3, #12
 8007d3e:	0018      	movs	r0, r3
 8007d40:	f7ff f832 	bl	8006da8 <_ZN13elapsedMillis5resetEv>
	}
}
 8007d44:	46c0      	nop			; (mov r8, r8)
 8007d46:	46bd      	mov	sp, r7
 8007d48:	b002      	add	sp, #8
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <_ZN10WS2812_LED6updateEv>:

void WS2812_LED::update() {
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]

	if (this->mode == WS2812_LED_MODE_CONTINIOUS) {
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	791b      	ldrb	r3, [r3, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d118      	bne.n	8007d8e <_ZN10WS2812_LED6updateEv+0x42>

		this->led_data[0] = this->green * this->continious_output;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	789b      	ldrb	r3, [r3, #2]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	7a92      	ldrb	r2, [r2, #10]
 8007d64:	4353      	muls	r3, r2
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	741a      	strb	r2, [r3, #16]
		this->led_data[1] = this->red * this->continious_output;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	7a92      	ldrb	r2, [r2, #10]
 8007d74:	4353      	muls	r3, r2
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	745a      	strb	r2, [r3, #17]
		this->led_data[2] = this->blue * this->continious_output;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	78db      	ldrb	r3, [r3, #3]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	7a92      	ldrb	r2, [r2, #10]
 8007d84:	4353      	muls	r3, r2
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	749a      	strb	r2, [r3, #18]

		this->led_data[0] = this->green * this->blink_output;
		this->led_data[1] = this->red * this->blink_output;
		this->led_data[2] = this->blue * this->blink_output;
	}
}
 8007d8c:	e051      	b.n	8007e32 <_ZN10WS2812_LED6updateEv+0xe6>
	} else if (this->mode == WS2812_LED_MODE_BLINK) {
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	791b      	ldrb	r3, [r3, #4]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d14d      	bne.n	8007e32 <_ZN10WS2812_LED6updateEv+0xe6>
		if (this->blinkTimer >= this->blink_config.on_time_ms){
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	330c      	adds	r3, #12
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	f7ff f81f 	bl	8006dde <_ZNK13elapsedMilliscvmEv>
 8007da0:	0002      	movs	r2, r0
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	891b      	ldrh	r3, [r3, #8]
 8007da6:	0019      	movs	r1, r3
 8007da8:	2300      	movs	r3, #0
 8007daa:	428a      	cmp	r2, r1
 8007dac:	415b      	adcs	r3, r3
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d026      	beq.n	8007e02 <_ZN10WS2812_LED6updateEv+0xb6>
			this->blinkTimer.reset();
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	330c      	adds	r3, #12
 8007db8:	0018      	movs	r0, r3
 8007dba:	f7fe fff5 	bl	8006da8 <_ZN13elapsedMillis5resetEv>
			this->blink_output = !this->blink_output;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	7cdb      	ldrb	r3, [r3, #19]
 8007dc2:	425a      	negs	r2, r3
 8007dc4:	4153      	adcs	r3, r2
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	001a      	movs	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	74da      	strb	r2, [r3, #19]
			if (this->blink_counter > 0){
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	7d1b      	ldrb	r3, [r3, #20]
 8007dd2:	b25b      	sxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	dd14      	ble.n	8007e02 <_ZN10WS2812_LED6updateEv+0xb6>
				this->blink_counter--;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	7d1b      	ldrb	r3, [r3, #20]
 8007ddc:	b25b      	sxtb	r3, r3
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	3b01      	subs	r3, #1
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	b25a      	sxtb	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	751a      	strb	r2, [r3, #20]
				if (this->blink_counter == 0){
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	7d1b      	ldrb	r3, [r3, #20]
 8007dee:	b25b      	sxtb	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d106      	bne.n	8007e02 <_ZN10WS2812_LED6updateEv+0xb6>
					this->mode = WS2812_LED_MODE_CONTINIOUS;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	711a      	strb	r2, [r3, #4]
					this->blink_output = this->continious_output;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	7a9a      	ldrb	r2, [r3, #10]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	74da      	strb	r2, [r3, #19]
		this->led_data[0] = this->green * this->blink_output;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	789b      	ldrb	r3, [r3, #2]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	7cd2      	ldrb	r2, [r2, #19]
 8007e0a:	4353      	muls	r3, r2
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	741a      	strb	r2, [r3, #16]
		this->led_data[1] = this->red * this->blink_output;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	785b      	ldrb	r3, [r3, #1]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	7cd2      	ldrb	r2, [r2, #19]
 8007e1a:	4353      	muls	r3, r2
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	745a      	strb	r2, [r3, #17]
		this->led_data[2] = this->blue * this->blink_output;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	78db      	ldrb	r3, [r3, #3]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	7cd2      	ldrb	r2, [r2, #19]
 8007e2a:	4353      	muls	r3, r2
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	749a      	strb	r2, [r3, #18]
}
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	46bd      	mov	sp, r7
 8007e36:	b002      	add	sp, #8
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh>:
	this->tim = tim;
	this->timer_channel = timer_channel;
	this->num_led = MAX_LED;
}

WS2812_Strand::WS2812_Strand(TIM_HandleTypeDef *tim, uint32_t timer_channel,
 8007e3a:	b5b0      	push	{r4, r5, r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	607a      	str	r2, [r7, #4]
 8007e46:	001a      	movs	r2, r3
 8007e48:	1cfb      	adds	r3, r7, #3
 8007e4a:	701a      	strb	r2, [r3, #0]
		uint8_t num_led) {
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	240f      	movs	r4, #15
 8007e50:	001d      	movs	r5, r3
 8007e52:	e004      	b.n	8007e5e <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh+0x24>
 8007e54:	0028      	movs	r0, r5
 8007e56:	f7ff fee0 	bl	8007c1a <_ZN10WS2812_LEDC1Ev>
 8007e5a:	3518      	adds	r5, #24
 8007e5c:	3c01      	subs	r4, #1
 8007e5e:	2c00      	cmp	r4, #0
 8007e60:	daf8      	bge.n	8007e54 <_ZN13WS2812_StrandC1EP17TIM_HandleTypeDefmh+0x1a>
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	23c4      	movs	r3, #196	; 0xc4
 8007e66:	005b      	lsls	r3, r3, #1
 8007e68:	2100      	movs	r1, #0
 8007e6a:	54d1      	strb	r1, [r2, r3]
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	23df      	movs	r3, #223	; 0xdf
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	2100      	movs	r1, #0
 8007e74:	50d1      	str	r1, [r2, r3]
	this->tim = tim;
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	23c0      	movs	r3, #192	; 0xc0
 8007e7a:	005b      	lsls	r3, r3, #1
 8007e7c:	68b9      	ldr	r1, [r7, #8]
 8007e7e:	50d1      	str	r1, [r2, r3]
	this->timer_channel = timer_channel;
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	23c2      	movs	r3, #194	; 0xc2
 8007e84:	005b      	lsls	r3, r3, #1
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	50d1      	str	r1, [r2, r3]
	this->num_led = num_led;
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	1cf9      	adds	r1, r7, #3
 8007e8e:	238a      	movs	r3, #138	; 0x8a
 8007e90:	33ff      	adds	r3, #255	; 0xff
 8007e92:	7809      	ldrb	r1, [r1, #0]
 8007e94:	54d1      	strb	r1, [r2, r3]
}
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	0018      	movs	r0, r3
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	b004      	add	sp, #16
 8007e9e:	bdb0      	pop	{r4, r5, r7, pc}

08007ea0 <_ZN13WS2812_Strand4initEv>:

void WS2812_Strand::init() {
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
	neopixel_handler[num_neopixel] = this;
 8007ea8:	4b18      	ldr	r3, [pc, #96]	; (8007f0c <_ZN13WS2812_Strand4initEv+0x6c>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	001a      	movs	r2, r3
 8007eae:	4b18      	ldr	r3, [pc, #96]	; (8007f10 <_ZN13WS2812_Strand4initEv+0x70>)
 8007eb0:	0092      	lsls	r2, r2, #2
 8007eb2:	6879      	ldr	r1, [r7, #4]
 8007eb4:	50d1      	str	r1, [r2, r3]
	num_neopixel++;
 8007eb6:	4b15      	ldr	r3, [pc, #84]	; (8007f0c <_ZN13WS2812_Strand4initEv+0x6c>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	4b13      	ldr	r3, [pc, #76]	; (8007f0c <_ZN13WS2812_Strand4initEv+0x6c>)
 8007ec0:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < this->num_led; i++) {
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60fb      	str	r3, [r7, #12]
 8007ec6:	e00c      	b.n	8007ee2 <_ZN13WS2812_Strand4initEv+0x42>
		this->led[i].strand_position = i;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	b2d8      	uxtb	r0, r3
 8007ecc:	6879      	ldr	r1, [r7, #4]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	0013      	movs	r3, r2
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	189b      	adds	r3, r3, r2
 8007ed6:	00db      	lsls	r3, r3, #3
 8007ed8:	1c02      	adds	r2, r0, #0
 8007eda:	545a      	strb	r2, [r3, r1]
	for (int i = 0; i < this->num_led; i++) {
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	60fb      	str	r3, [r7, #12]
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	238a      	movs	r3, #138	; 0x8a
 8007ee6:	33ff      	adds	r3, #255	; 0xff
 8007ee8:	5cd3      	ldrb	r3, [r2, r3]
 8007eea:	001a      	movs	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	dbea      	blt.n	8007ec8 <_ZN13WS2812_Strand4initEv+0x28>
	}

	this->datasent = 0;
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	23c4      	movs	r3, #196	; 0xc4
 8007ef6:	005b      	lsls	r3, r3, #1
 8007ef8:	2100      	movs	r1, #0
 8007efa:	54d1      	strb	r1, [r2, r3]
	this->reset();
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	0018      	movs	r0, r3
 8007f00:	f000 f8d6 	bl	80080b0 <_ZN13WS2812_Strand5resetEv>
}
 8007f04:	46c0      	nop			; (mov r8, r8)
 8007f06:	46bd      	mov	sp, r7
 8007f08:	b004      	add	sp, #16
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	20000b5d 	.word	0x20000b5d
 8007f10:	20000b60 	.word	0x20000b60

08007f14 <_ZN13WS2812_Strand6updateEv>:

void WS2812_Strand::update() {
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b088      	sub	sp, #32
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
	this->data_index = 0;
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	23df      	movs	r3, #223	; 0xdf
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	2100      	movs	r1, #0
 8007f24:	50d1      	str	r1, [r2, r3]
	uint32_t color;

	for (int i = 0; i < this->num_led; i++) {
 8007f26:	2300      	movs	r3, #0
 8007f28:	61fb      	str	r3, [r7, #28]
 8007f2a:	e00c      	b.n	8007f46 <_ZN13WS2812_Strand6updateEv+0x32>
		this->led[i].update();
 8007f2c:	69fa      	ldr	r2, [r7, #28]
 8007f2e:	0013      	movs	r3, r2
 8007f30:	005b      	lsls	r3, r3, #1
 8007f32:	189b      	adds	r3, r3, r2
 8007f34:	00db      	lsls	r3, r3, #3
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	18d3      	adds	r3, r2, r3
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f7ff ff06 	bl	8007d4c <_ZN10WS2812_LED6updateEv>
	for (int i = 0; i < this->num_led; i++) {
 8007f40:	69fb      	ldr	r3, [r7, #28]
 8007f42:	3301      	adds	r3, #1
 8007f44:	61fb      	str	r3, [r7, #28]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	238a      	movs	r3, #138	; 0x8a
 8007f4a:	33ff      	adds	r3, #255	; 0xff
 8007f4c:	5cd3      	ldrb	r3, [r2, r3]
 8007f4e:	001a      	movs	r2, r3
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	4293      	cmp	r3, r2
 8007f54:	dbea      	blt.n	8007f2c <_ZN13WS2812_Strand6updateEv+0x18>
	}

	for (int i = 0; i < this->num_led; i++) {
 8007f56:	2300      	movs	r3, #0
 8007f58:	61bb      	str	r3, [r7, #24]
 8007f5a:	e053      	b.n	8008004 <_ZN13WS2812_Strand6updateEv+0xf0>
		color = ((this->led[i].led_data[0] << 16)
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	0013      	movs	r3, r2
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	189b      	adds	r3, r3, r2
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	18cb      	adds	r3, r1, r3
 8007f6a:	3310      	adds	r3, #16
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	0419      	lsls	r1, r3, #16
				| (this->led[i].led_data[1] << 8) | (this->led[i].led_data[2]));
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	69ba      	ldr	r2, [r7, #24]
 8007f74:	0013      	movs	r3, r2
 8007f76:	005b      	lsls	r3, r3, #1
 8007f78:	189b      	adds	r3, r3, r2
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	18c3      	adds	r3, r0, r3
 8007f7e:	3311      	adds	r3, #17
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	021b      	lsls	r3, r3, #8
 8007f84:	4319      	orrs	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	0013      	movs	r3, r2
 8007f8c:	005b      	lsls	r3, r3, #1
 8007f8e:	189b      	adds	r3, r3, r2
 8007f90:	00db      	lsls	r3, r3, #3
 8007f92:	18c3      	adds	r3, r0, r3
 8007f94:	3312      	adds	r3, #18
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	430b      	orrs	r3, r1
		color = ((this->led[i].led_data[0] << 16)
 8007f9a:	60fb      	str	r3, [r7, #12]

		for (int i = 23; i >= 0; i--) {
 8007f9c:	2317      	movs	r3, #23
 8007f9e:	617b      	str	r3, [r7, #20]
 8007fa0:	e02a      	b.n	8007ff8 <_ZN13WS2812_Strand6updateEv+0xe4>
			if (color & (1 << i)) {
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	409a      	lsls	r2, r3
 8007fa8:	0013      	movs	r3, r2
 8007faa:	001a      	movs	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4013      	ands	r3, r2
 8007fb0:	d00b      	beq.n	8007fca <_ZN13WS2812_Strand6updateEv+0xb6>
				this->pwm_data[this->data_index] = WS2812_LONG_PULSE;
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	23df      	movs	r3, #223	; 0xdf
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	58d2      	ldr	r2, [r2, r3]
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	23e5      	movs	r3, #229	; 0xe5
 8007fbe:	005b      	lsls	r3, r3, #1
 8007fc0:	188a      	adds	r2, r1, r2
 8007fc2:	18d3      	adds	r3, r2, r3
 8007fc4:	221c      	movs	r2, #28
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	e00a      	b.n	8007fe0 <_ZN13WS2812_Strand6updateEv+0xcc>
			}

			else {
				this->pwm_data[this->data_index] = WS2812_SHORT_PULSE;
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	23df      	movs	r3, #223	; 0xdf
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	58d2      	ldr	r2, [r2, r3]
 8007fd2:	6879      	ldr	r1, [r7, #4]
 8007fd4:	23e5      	movs	r3, #229	; 0xe5
 8007fd6:	005b      	lsls	r3, r3, #1
 8007fd8:	188a      	adds	r2, r1, r2
 8007fda:	18d3      	adds	r3, r2, r3
 8007fdc:	220b      	movs	r2, #11
 8007fde:	701a      	strb	r2, [r3, #0]
			}

			this->data_index++;
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	23df      	movs	r3, #223	; 0xdf
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	58d3      	ldr	r3, [r2, r3]
 8007fe8:	1c59      	adds	r1, r3, #1
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	23df      	movs	r3, #223	; 0xdf
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	50d1      	str	r1, [r2, r3]
		for (int i = 23; i >= 0; i--) {
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	617b      	str	r3, [r7, #20]
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	dad1      	bge.n	8007fa2 <_ZN13WS2812_Strand6updateEv+0x8e>
	for (int i = 0; i < this->num_led; i++) {
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	3301      	adds	r3, #1
 8008002:	61bb      	str	r3, [r7, #24]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	238a      	movs	r3, #138	; 0x8a
 8008008:	33ff      	adds	r3, #255	; 0xff
 800800a:	5cd3      	ldrb	r3, [r2, r3]
 800800c:	001a      	movs	r2, r3
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	4293      	cmp	r3, r2
 8008012:	dba3      	blt.n	8007f5c <_ZN13WS2812_Strand6updateEv+0x48>
		}
	}

	for (int i = 0; i < 10; i++) {
 8008014:	2300      	movs	r3, #0
 8008016:	613b      	str	r3, [r7, #16]
 8008018:	e016      	b.n	8008048 <_ZN13WS2812_Strand6updateEv+0x134>
		this->pwm_data[this->data_index] = 0;
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	23df      	movs	r3, #223	; 0xdf
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	58d2      	ldr	r2, [r2, r3]
 8008022:	6879      	ldr	r1, [r7, #4]
 8008024:	23e5      	movs	r3, #229	; 0xe5
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	188a      	adds	r2, r1, r2
 800802a:	18d3      	adds	r3, r2, r3
 800802c:	2200      	movs	r2, #0
 800802e:	701a      	strb	r2, [r3, #0]
		this->data_index++;
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	23df      	movs	r3, #223	; 0xdf
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	58d3      	ldr	r3, [r2, r3]
 8008038:	1c59      	adds	r1, r3, #1
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	23df      	movs	r3, #223	; 0xdf
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < 10; i++) {
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	3301      	adds	r3, #1
 8008046:	613b      	str	r3, [r7, #16]
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	2b09      	cmp	r3, #9
 800804c:	dde5      	ble.n	800801a <_ZN13WS2812_Strand6updateEv+0x106>
	}
}
 800804e:	46c0      	nop			; (mov r8, r8)
 8008050:	46c0      	nop			; (mov r8, r8)
 8008052:	46bd      	mov	sp, r7
 8008054:	b008      	add	sp, #32
 8008056:	bd80      	pop	{r7, pc}

08008058 <_ZN13WS2812_Strand4sendEv>:

void WS2812_Strand::send() {
 8008058:	b590      	push	{r4, r7, lr}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]

	HAL_TIM_PWM_Start_DMA(this->tim, this->timer_channel,
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	23c0      	movs	r3, #192	; 0xc0
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	58d0      	ldr	r0, [r2, r3]
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	23c2      	movs	r3, #194	; 0xc2
 800806c:	005b      	lsls	r3, r3, #1
 800806e:	58d1      	ldr	r1, [r2, r3]
			(uint32_t*) this->pwm_data, this->data_index);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	33cb      	adds	r3, #203	; 0xcb
 8008074:	33ff      	adds	r3, #255	; 0xff
 8008076:	001c      	movs	r4, r3
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	23df      	movs	r3, #223	; 0xdf
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	58d3      	ldr	r3, [r2, r3]
	HAL_TIM_PWM_Start_DMA(this->tim, this->timer_channel,
 8008080:	b29b      	uxth	r3, r3
 8008082:	0022      	movs	r2, r4
 8008084:	f7fd fd8a 	bl	8005b9c <HAL_TIM_PWM_Start_DMA>
	while (this->datasent == 0) {
 8008088:	46c0      	nop			; (mov r8, r8)
 800808a:	687a      	ldr	r2, [r7, #4]
 800808c:	23c4      	movs	r3, #196	; 0xc4
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	5cd3      	ldrb	r3, [r2, r3]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	425a      	negs	r2, r3
 8008096:	4153      	adcs	r3, r2
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1f5      	bne.n	800808a <_ZN13WS2812_Strand4sendEv+0x32>

	};
	this->datasent = 0;
 800809e:	687a      	ldr	r2, [r7, #4]
 80080a0:	23c4      	movs	r3, #196	; 0xc4
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	2100      	movs	r1, #0
 80080a6:	54d1      	strb	r1, [r2, r3]
}
 80080a8:	46c0      	nop			; (mov r8, r8)
 80080aa:	46bd      	mov	sp, r7
 80080ac:	b003      	add	sp, #12
 80080ae:	bd90      	pop	{r4, r7, pc}

080080b0 <_ZN13WS2812_Strand5resetEv>:

void WS2812_Strand::reset() {
 80080b0:	b5b0      	push	{r4, r5, r7, lr}
 80080b2:	b088      	sub	sp, #32
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < MAX_LED; i++) {
 80080b8:	2300      	movs	r3, #0
 80080ba:	61fb      	str	r3, [r7, #28]
 80080bc:	e027      	b.n	800810e <_ZN13WS2812_Strand5resetEv+0x5e>
		this->led_data[i][0] = i;
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	b2d9      	uxtb	r1, r3
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	69fb      	ldr	r3, [r7, #28]
 80080c6:	3362      	adds	r3, #98	; 0x62
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	18d3      	adds	r3, r2, r3
 80080cc:	3302      	adds	r3, #2
 80080ce:	1c0a      	adds	r2, r1, #0
 80080d0:	701a      	strb	r2, [r3, #0]
		this->led_data[i][1] = 0;
 80080d2:	6879      	ldr	r1, [r7, #4]
 80080d4:	69fa      	ldr	r2, [r7, #28]
 80080d6:	238c      	movs	r3, #140	; 0x8c
 80080d8:	33ff      	adds	r3, #255	; 0xff
 80080da:	0092      	lsls	r2, r2, #2
 80080dc:	188a      	adds	r2, r1, r2
 80080de:	18d3      	adds	r3, r2, r3
 80080e0:	2200      	movs	r2, #0
 80080e2:	701a      	strb	r2, [r3, #0]
		this->led_data[i][2] = 0;
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	69fa      	ldr	r2, [r7, #28]
 80080e8:	23c6      	movs	r3, #198	; 0xc6
 80080ea:	005b      	lsls	r3, r3, #1
 80080ec:	0092      	lsls	r2, r2, #2
 80080ee:	188a      	adds	r2, r1, r2
 80080f0:	18d3      	adds	r3, r2, r3
 80080f2:	2200      	movs	r2, #0
 80080f4:	701a      	strb	r2, [r3, #0]
		this->led_data[i][3] = 0;
 80080f6:	6879      	ldr	r1, [r7, #4]
 80080f8:	69fa      	ldr	r2, [r7, #28]
 80080fa:	238e      	movs	r3, #142	; 0x8e
 80080fc:	33ff      	adds	r3, #255	; 0xff
 80080fe:	0092      	lsls	r2, r2, #2
 8008100:	188a      	adds	r2, r1, r2
 8008102:	18d3      	adds	r3, r2, r3
 8008104:	2200      	movs	r2, #0
 8008106:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_LED; i++) {
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	3301      	adds	r3, #1
 800810c:	61fb      	str	r3, [r7, #28]
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	2b0f      	cmp	r3, #15
 8008112:	ddd4      	ble.n	80080be <_ZN13WS2812_Strand5resetEv+0xe>
	}
	uint32_t init_data[4] = { 50, 0, 50, 0 };
 8008114:	250c      	movs	r5, #12
 8008116:	197b      	adds	r3, r7, r5
 8008118:	4a0b      	ldr	r2, [pc, #44]	; (8008148 <_ZN13WS2812_Strand5resetEv+0x98>)
 800811a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800811c:	c313      	stmia	r3!, {r0, r1, r4}
 800811e:	6812      	ldr	r2, [r2, #0]
 8008120:	601a      	str	r2, [r3, #0]
	HAL_TIM_PWM_Start_DMA(this->tim, this->timer_channel, (uint32_t*) init_data,
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	23c0      	movs	r3, #192	; 0xc0
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	58d0      	ldr	r0, [r2, r3]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	23c2      	movs	r3, #194	; 0xc2
 800812e:	005b      	lsls	r3, r3, #1
 8008130:	58d1      	ldr	r1, [r2, r3]
 8008132:	197a      	adds	r2, r7, r5
 8008134:	2304      	movs	r3, #4
 8008136:	f7fd fd31 	bl	8005b9c <HAL_TIM_PWM_Start_DMA>
			4);
	HAL_Delay(10);
 800813a:	200a      	movs	r0, #10
 800813c:	f7f9 fed6 	bl	8001eec <HAL_Delay>
}
 8008140:	46c0      	nop			; (mov r8, r8)
 8008142:	46bd      	mov	sp, r7
 8008144:	b008      	add	sp, #32
 8008146:	bdb0      	pop	{r4, r5, r7, pc}
 8008148:	08008244 	.word	0x08008244

0800814c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < num_neopixel; i++) {
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	e025      	b.n	80081a6 <HAL_TIM_PWM_PulseFinishedCallback+0x5a>
		if (htim == neopixel_handler[i]->tim) {
 800815a:	4b18      	ldr	r3, [pc, #96]	; (80081bc <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	0092      	lsls	r2, r2, #2
 8008160:	58d2      	ldr	r2, [r2, r3]
 8008162:	23c0      	movs	r3, #192	; 0xc0
 8008164:	005b      	lsls	r3, r3, #1
 8008166:	58d3      	ldr	r3, [r2, r3]
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	429a      	cmp	r2, r3
 800816c:	d118      	bne.n	80081a0 <HAL_TIM_PWM_PulseFinishedCallback+0x54>
			HAL_TIM_PWM_Stop_DMA(neopixel_handler[i]->tim,
 800816e:	4b13      	ldr	r3, [pc, #76]	; (80081bc <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	0092      	lsls	r2, r2, #2
 8008174:	58d2      	ldr	r2, [r2, r3]
 8008176:	23c0      	movs	r3, #192	; 0xc0
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	58d0      	ldr	r0, [r2, r3]
					neopixel_handler[i]->timer_channel);
 800817c:	4b0f      	ldr	r3, [pc, #60]	; (80081bc <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	0092      	lsls	r2, r2, #2
 8008182:	58d2      	ldr	r2, [r2, r3]
			HAL_TIM_PWM_Stop_DMA(neopixel_handler[i]->tim,
 8008184:	23c2      	movs	r3, #194	; 0xc2
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	58d3      	ldr	r3, [r2, r3]
 800818a:	0019      	movs	r1, r3
 800818c:	f7fd fefa 	bl	8005f84 <HAL_TIM_PWM_Stop_DMA>
			neopixel_handler[i]->datasent = 1;
 8008190:	4b0a      	ldr	r3, [pc, #40]	; (80081bc <HAL_TIM_PWM_PulseFinishedCallback+0x70>)
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	0092      	lsls	r2, r2, #2
 8008196:	58d2      	ldr	r2, [r2, r3]
 8008198:	23c4      	movs	r3, #196	; 0xc4
 800819a:	005b      	lsls	r3, r3, #1
 800819c:	2101      	movs	r1, #1
 800819e:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < num_neopixel; i++) {
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	3301      	adds	r3, #1
 80081a4:	60fb      	str	r3, [r7, #12]
 80081a6:	4b06      	ldr	r3, [pc, #24]	; (80081c0 <HAL_TIM_PWM_PulseFinishedCallback+0x74>)
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	001a      	movs	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	4293      	cmp	r3, r2
 80081b0:	dbd3      	blt.n	800815a <HAL_TIM_PWM_PulseFinishedCallback+0xe>
		}
	}

}
 80081b2:	46c0      	nop			; (mov r8, r8)
 80081b4:	46c0      	nop			; (mov r8, r8)
 80081b6:	46bd      	mov	sp, r7
 80081b8:	b004      	add	sp, #16
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	20000b60 	.word	0x20000b60
 80081c0:	20000b5d 	.word	0x20000b5d

080081c4 <_Z6millisv>:
 *      Author: Dustin Lehmann
 */

#include "elapsedMillis.h"

uint32_t millis() {
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80081c8:	f7f9 fe86 	bl	8001ed8 <HAL_GetTick>
 80081cc:	0003      	movs	r3, r0
}
 80081ce:	0018      	movs	r0, r3
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <memset>:
 80081d4:	0003      	movs	r3, r0
 80081d6:	1882      	adds	r2, r0, r2
 80081d8:	4293      	cmp	r3, r2
 80081da:	d100      	bne.n	80081de <memset+0xa>
 80081dc:	4770      	bx	lr
 80081de:	7019      	strb	r1, [r3, #0]
 80081e0:	3301      	adds	r3, #1
 80081e2:	e7f9      	b.n	80081d8 <memset+0x4>

080081e4 <__libc_init_array>:
 80081e4:	b570      	push	{r4, r5, r6, lr}
 80081e6:	2600      	movs	r6, #0
 80081e8:	4c0c      	ldr	r4, [pc, #48]	; (800821c <__libc_init_array+0x38>)
 80081ea:	4d0d      	ldr	r5, [pc, #52]	; (8008220 <__libc_init_array+0x3c>)
 80081ec:	1b64      	subs	r4, r4, r5
 80081ee:	10a4      	asrs	r4, r4, #2
 80081f0:	42a6      	cmp	r6, r4
 80081f2:	d109      	bne.n	8008208 <__libc_init_array+0x24>
 80081f4:	2600      	movs	r6, #0
 80081f6:	f000 f819 	bl	800822c <_init>
 80081fa:	4c0a      	ldr	r4, [pc, #40]	; (8008224 <__libc_init_array+0x40>)
 80081fc:	4d0a      	ldr	r5, [pc, #40]	; (8008228 <__libc_init_array+0x44>)
 80081fe:	1b64      	subs	r4, r4, r5
 8008200:	10a4      	asrs	r4, r4, #2
 8008202:	42a6      	cmp	r6, r4
 8008204:	d105      	bne.n	8008212 <__libc_init_array+0x2e>
 8008206:	bd70      	pop	{r4, r5, r6, pc}
 8008208:	00b3      	lsls	r3, r6, #2
 800820a:	58eb      	ldr	r3, [r5, r3]
 800820c:	4798      	blx	r3
 800820e:	3601      	adds	r6, #1
 8008210:	e7ee      	b.n	80081f0 <__libc_init_array+0xc>
 8008212:	00b3      	lsls	r3, r6, #2
 8008214:	58eb      	ldr	r3, [r5, r3]
 8008216:	4798      	blx	r3
 8008218:	3601      	adds	r6, #1
 800821a:	e7f2      	b.n	8008202 <__libc_init_array+0x1e>
 800821c:	08008368 	.word	0x08008368
 8008220:	08008368 	.word	0x08008368
 8008224:	08008370 	.word	0x08008370
 8008228:	08008368 	.word	0x08008368

0800822c <_init>:
 800822c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822e:	46c0      	nop			; (mov r8, r8)
 8008230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008232:	bc08      	pop	{r3}
 8008234:	469e      	mov	lr, r3
 8008236:	4770      	bx	lr

08008238 <_fini>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800823e:	bc08      	pop	{r3}
 8008240:	469e      	mov	lr, r3
 8008242:	4770      	bx	lr
