
RC_v3_H743_TWIPR_270524.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022f4c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae8  080231f0  080231f0  000241f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08023cd8  08023cd8  00024cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000018  08023ce0  08023ce0  00024ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08023cf8  08023cf8  00024cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000224  24000000  08023cfc  00025000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0001e294  24000224  08023f20  00025224  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2401e4b8  08023f20  000254b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00025224  2**0
                  CONTENTS, READONLY
 10 .ramd2block   00000000  30000000  30000000  00025252  2**0
                  CONTENTS
 11 .debug_info   0008c1f1  00000000  00000000  00025252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000cd4e  00000000  00000000  000b1443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003d00  00000000  00000000  000be198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002eac  00000000  00000000  000c1e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00012935  00000000  00000000  000c4d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005f140  00000000  00000000  000d7679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00198116  00000000  00000000  001367b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  002ce8cf  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0001174c  00000000  00000000  002ce914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 000000a0  00000000  00000000  002e0060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000224 	.word	0x24000224
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080231d4 	.word	0x080231d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000228 	.word	0x24000228
 80002dc:	080231d4 	.word	0x080231d4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f001 fde8 	bl	8002258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f83e 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 fc88 	bl	8000fa0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000690:	f000 fbe0 	bl	8000e54 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000694:	f000 fb44 	bl	8000d20 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8000698:	f000 f9a4 	bl	80009e4 <MX_SPI2_Init>
  MX_UART8_Init();
 800069c:	f000 faf2 	bl	8000c84 <MX_UART8_Init>
  MX_USART2_UART_Init();
 80006a0:	f000 fb8a 	bl	8000db8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80006a4:	f000 f9f4 	bl	8000a90 <MX_TIM2_Init>
  MX_SPI1_Init();
 80006a8:	f000 f94c 	bl	8000944 <MX_SPI1_Init>
  MX_I2C3_Init();
 80006ac:	f000 f90a 	bl	80008c4 <MX_I2C3_Init>
  MX_FDCAN1_Init();
 80006b0:	f000 f8a4 	bl	80007fc <MX_FDCAN1_Init>
  MX_TIM3_Init();
 80006b4:	f000 fa3a 	bl	8000b2c <MX_TIM3_Init>
  MX_TIM4_Init();
 80006b8:	f000 fa8e 	bl	8000bd8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006bc:	f00f face 	bl	800fc5c <osKernelInitialize>
	/* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer02 */
  myTimer02Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer02_attributes);
 80006c0:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <main+0x70>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	2101      	movs	r1, #1
 80006c6:	480b      	ldr	r0, [pc, #44]	@ (80006f4 <main+0x74>)
 80006c8:	f00f fc44 	bl	800ff54 <osTimerNew>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <main+0x78>)
 80006d0:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	firmware();
 80006d2:	f01a fb93 	bl	801adfc <firmware>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006d6:	4a09      	ldr	r2, [pc, #36]	@ (80006fc <main+0x7c>)
 80006d8:	2100      	movs	r1, #0
 80006da:	4809      	ldr	r0, [pc, #36]	@ (8000700 <main+0x80>)
 80006dc:	f00f fb3f 	bl	800fd5e <osThreadNew>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <main+0x84>)
 80006e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006e6:	f00f faff 	bl	800fce8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80006ea:	bf00      	nop
 80006ec:	e7fd      	b.n	80006ea <main+0x6a>
 80006ee:	bf00      	nop
 80006f0:	0802335c 	.word	0x0802335c
 80006f4:	08001247 	.word	0x08001247
 80006f8:	24000c20 	.word	0x24000c20
 80006fc:	08023338 	.word	0x08023338
 8000700:	08001235 	.word	0x08001235
 8000704:	24000c1c 	.word	0x24000c1c

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b09c      	sub	sp, #112	@ 0x70
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000712:	224c      	movs	r2, #76	@ 0x4c
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f020 fe10 	bl	802133c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	1d3b      	adds	r3, r7, #4
 800071e:	2220      	movs	r2, #32
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f020 fe0a 	bl	802133c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000728:	2002      	movs	r0, #2
 800072a:	f006 fabf 	bl	8006cac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072e:	2300      	movs	r3, #0
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	4b30      	ldr	r3, [pc, #192]	@ (80007f4 <SystemClock_Config+0xec>)
 8000734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000736:	4a2f      	ldr	r2, [pc, #188]	@ (80007f4 <SystemClock_Config+0xec>)
 8000738:	f023 0301 	bic.w	r3, r3, #1
 800073c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800073e:	4b2d      	ldr	r3, [pc, #180]	@ (80007f4 <SystemClock_Config+0xec>)
 8000740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <SystemClock_Config+0xf0>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a2a      	ldr	r2, [pc, #168]	@ (80007f8 <SystemClock_Config+0xf0>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b28      	ldr	r3, [pc, #160]	@ (80007f8 <SystemClock_Config+0xf0>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000760:	bf00      	nop
 8000762:	4b25      	ldr	r3, [pc, #148]	@ (80007f8 <SystemClock_Config+0xf0>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800076a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800076e:	d1f8      	bne.n	8000762 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000778:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	2302      	movs	r3, #2
 8000780:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000782:	2302      	movs	r3, #2
 8000784:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000786:	2340      	movs	r3, #64	@ 0x40
 8000788:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800078e:	2304      	movs	r3, #4
 8000790:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000792:	2302      	movs	r3, #2
 8000794:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000796:	230c      	movs	r3, #12
 8000798:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800079a:	2300      	movs	r3, #0
 800079c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a6:	4618      	mov	r0, r3
 80007a8:	f006 faba 	bl	8006d20 <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007b2:	f000 fd65 	bl	8001280 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	233f      	movs	r3, #63	@ 0x3f
 80007b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2303      	movs	r3, #3
 80007bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007c2:	2308      	movs	r3, #8
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c6:	2340      	movs	r3, #64	@ 0x40
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ca:	2340      	movs	r3, #64	@ 0x40
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007d2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007d4:	2340      	movs	r3, #64	@ 0x40
 80007d6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2102      	movs	r1, #2
 80007dc:	4618      	mov	r0, r3
 80007de:	f006 fef9 	bl	80075d4 <HAL_RCC_ClockConfig>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80007e8:	f000 fd4a 	bl	8001280 <Error_Handler>
  }
}
 80007ec:	bf00      	nop
 80007ee:	3770      	adds	r7, #112	@ 0x70
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	58000400 	.word	0x58000400
 80007f8:	58024800 	.word	0x58024800

080007fc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000800:	4b2e      	ldr	r3, [pc, #184]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000802:	4a2f      	ldr	r2, [pc, #188]	@ (80008c0 <MX_FDCAN1_Init+0xc4>)
 8000804:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000806:	4b2d      	ldr	r3, [pc, #180]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800080c:	4b2b      	ldr	r3, [pc, #172]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000812:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000814:	2200      	movs	r2, #0
 8000816:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000818:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800081a:	2200      	movs	r2, #0
 800081c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800081e:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000820:	2200      	movs	r2, #0
 8000822:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 20;
 8000824:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000826:	2214      	movs	r2, #20
 8000828:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800082a:	4b24      	ldr	r3, [pc, #144]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800082c:	2201      	movs	r2, #1
 800082e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000830:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000832:	2202      	movs	r2, #2
 8000834:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000836:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000838:	2202      	movs	r2, #2
 800083a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800083c:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800083e:	2201      	movs	r2, #1
 8000840:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000842:	4b1e      	ldr	r3, [pc, #120]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000844:	2201      	movs	r2, #1
 8000846:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000848:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800084a:	2201      	movs	r2, #1
 800084c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800084e:	4b1b      	ldr	r3, [pc, #108]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000850:	2201      	movs	r2, #1
 8000852:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000854:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000856:	2200      	movs	r2, #0
 8000858:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800085a:	4b18      	ldr	r3, [pc, #96]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800085c:	2200      	movs	r2, #0
 800085e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000860:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000862:	2200      	movs	r2, #0
 8000864:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000866:	4b15      	ldr	r3, [pc, #84]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000868:	2200      	movs	r2, #0
 800086a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800086e:	2204      	movs	r2, #4
 8000870:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000872:	4b12      	ldr	r3, [pc, #72]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000874:	2200      	movs	r2, #0
 8000876:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000878:	4b10      	ldr	r3, [pc, #64]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800087a:	2204      	movs	r2, #4
 800087c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800087e:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000880:	2200      	movs	r2, #0
 8000882:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000884:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000886:	2204      	movs	r2, #4
 8000888:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800088c:	2200      	movs	r2, #0
 800088e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000890:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000892:	2200      	movs	r2, #0
 8000894:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 8000898:	2200      	movs	r2, #0
 800089a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800089c:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008a2:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_FDCAN1_Init+0xc0>)
 80008aa:	f004 fce3 	bl	8005274 <HAL_FDCAN_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 80008b4:	f000 fce4 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	24000240 	.word	0x24000240
 80008c0:	4000a000 	.word	0x4000a000

080008c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008ca:	4a1c      	ldr	r2, [pc, #112]	@ (800093c <MX_I2C3_Init+0x78>)
 80008cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10C0ECFF;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000940 <MX_I2C3_Init+0x7c>)
 80008d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008da:	4b17      	ldr	r3, [pc, #92]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008dc:	2201      	movs	r2, #1
 80008de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e0:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80008e6:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008ec:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f2:	4b11      	ldr	r3, [pc, #68]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_I2C3_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008fe:	480e      	ldr	r0, [pc, #56]	@ (8000938 <MX_I2C3_Init+0x74>)
 8000900:	f005 fd34 	bl	800636c <HAL_I2C_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800090a:	f000 fcb9 	bl	8001280 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800090e:	2100      	movs	r1, #0
 8000910:	4809      	ldr	r0, [pc, #36]	@ (8000938 <MX_I2C3_Init+0x74>)
 8000912:	f006 f933 	bl	8006b7c <HAL_I2CEx_ConfigAnalogFilter>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800091c:	f000 fcb0 	bl	8001280 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_I2C3_Init+0x74>)
 8000924:	f006 f975 	bl	8006c12 <HAL_I2CEx_ConfigDigitalFilter>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800092e:	f000 fca7 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240002e0 	.word	0x240002e0
 800093c:	40005c00 	.word	0x40005c00
 8000940:	10c0ecff 	.word	0x10c0ecff

08000944 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000948:	4b24      	ldr	r3, [pc, #144]	@ (80009dc <MX_SPI1_Init+0x98>)
 800094a:	4a25      	ldr	r2, [pc, #148]	@ (80009e0 <MX_SPI1_Init+0x9c>)
 800094c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800094e:	4b23      	ldr	r3, [pc, #140]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000954:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800095a:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <MX_SPI1_Init+0x98>)
 800095c:	2207      	movs	r2, #7
 800095e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000960:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000966:	4b1d      	ldr	r3, [pc, #116]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800096c:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <MX_SPI1_Init+0x98>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000972:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000978:	4b18      	ldr	r3, [pc, #96]	@ (80009dc <MX_SPI1_Init+0x98>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097e:	4b17      	ldr	r3, [pc, #92]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000980:	2200      	movs	r2, #0
 8000982:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000984:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000986:	2200      	movs	r2, #0
 8000988:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800098a:	4b14      	ldr	r3, [pc, #80]	@ (80009dc <MX_SPI1_Init+0x98>)
 800098c:	2200      	movs	r2, #0
 800098e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000990:	4b12      	ldr	r3, [pc, #72]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000992:	2200      	movs	r2, #0
 8000994:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000996:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_SPI1_Init+0x98>)
 8000998:	2200      	movs	r2, #0
 800099a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800099c:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <MX_SPI1_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	@ (80009dc <MX_SPI1_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <MX_SPI1_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <MX_SPI1_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009b4:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <MX_SPI1_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_SPI1_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_SPI1_Init+0x98>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <MX_SPI1_Init+0x98>)
 80009c8:	f008 fffe 	bl	80099c8 <HAL_SPI_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_SPI1_Init+0x92>
  {
    Error_Handler();
 80009d2:	f000 fc55 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	24000334 	.word	0x24000334
 80009e0:	40013000 	.word	0x40013000

080009e4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009e8:	4b27      	ldr	r3, [pc, #156]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 80009ea:	4a28      	ldr	r2, [pc, #160]	@ (8000a8c <MX_SPI2_Init+0xa8>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b26      	ldr	r3, [pc, #152]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 80009f0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80009f4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b24      	ldr	r3, [pc, #144]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009fc:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 80009fe:	2207      	movs	r2, #7
 8000a00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a02:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a08:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a10:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000a14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a24:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000a30:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a36:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a3c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a44:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a50:	4b0d      	ldr	r3, [pc, #52]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a62:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <MX_SPI2_Init+0xa4>)
 8000a76:	f008 ffa7 	bl	80099c8 <HAL_SPI_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000a80:	f000 fbfe 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	240003e8 	.word	0x240003e8
 8000a8c:	40003800 	.word	0x40003800

08000a90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000ab0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ab4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000ac4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ac8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aca:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ad6:	4814      	ldr	r0, [pc, #80]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000ad8:	f00a fce5 	bl	800b4a6 <HAL_TIM_Base_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ae2:	f000 fbcd 	bl	8001280 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ae6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4619      	mov	r1, r3
 8000af2:	480d      	ldr	r0, [pc, #52]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000af4:	f00a ff6c 	bl	800b9d0 <HAL_TIM_ConfigClockSource>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000afe:	f000 fbbf 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	@ (8000b28 <MX_TIM2_Init+0x98>)
 8000b10:	f00b f9b6 	bl	800be80 <HAL_TIMEx_MasterConfigSynchronization>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b1a:	f000 fbb1 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3720      	adds	r7, #32
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2400058c 	.word	0x2400058c

08000b2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08c      	sub	sp, #48	@ 0x30
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	2224      	movs	r2, #36	@ 0x24
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f020 fbfe 	bl	802133c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b40:	463b      	mov	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b4c:	4a21      	ldr	r2, [pc, #132]	@ (8000bd4 <MX_TIM3_Init+0xa8>)
 8000b4e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b56:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b62:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480d      	ldr	r0, [pc, #52]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000b9c:	f00a fd52 	bl	800b644 <HAL_TIM_Encoder_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000ba6:	f000 fb6b 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4806      	ldr	r0, [pc, #24]	@ (8000bd0 <MX_TIM3_Init+0xa4>)
 8000bb8:	f00b f962 	bl	800be80 <HAL_TIMEx_MasterConfigSynchronization>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000bc2:	f000 fb5d 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bc6:	bf00      	nop
 8000bc8:	3730      	adds	r7, #48	@ 0x30
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	240005d8 	.word	0x240005d8
 8000bd4:	40000400 	.word	0x40000400

08000bd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08c      	sub	sp, #48	@ 0x30
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	2224      	movs	r2, #36	@ 0x24
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f020 fba8 	bl	802133c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bec:	463b      	mov	r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000bf8:	4a21      	ldr	r2, [pc, #132]	@ (8000c80 <MX_TIM4_Init+0xa8>)
 8000bfa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	4b1e      	ldr	r3, [pc, #120]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000c0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c20:	2300      	movs	r3, #0
 8000c22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c24:	2301      	movs	r3, #1
 8000c26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c34:	2301      	movs	r3, #1
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	4619      	mov	r1, r3
 8000c46:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000c48:	f00a fcfc 	bl	800b644 <HAL_TIM_Encoder_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000c52:	f000 fb15 	bl	8001280 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <MX_TIM4_Init+0xa4>)
 8000c64:	f00b f90c 	bl	800be80 <HAL_TIMEx_MasterConfigSynchronization>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000c6e:	f000 fb07 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3730      	adds	r7, #48	@ 0x30
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	24000624 	.word	0x24000624
 8000c80:	40000800 	.word	0x40000800

08000c84 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000c88:	4b23      	ldr	r3, [pc, #140]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000c8a:	4a24      	ldr	r2, [pc, #144]	@ (8000d1c <MX_UART8_Init+0x98>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 57600;
 8000c8e:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000c90:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8000c94:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_9B;
 8000c96:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000c98:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000c9c:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000ca6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000caa:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cca:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000cd0:	4811      	ldr	r0, [pc, #68]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000cd2:	f00b f981 	bl	800bfd8 <HAL_UART_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_UART8_Init+0x5c>
  {
    Error_Handler();
 8000cdc:	f000 fad0 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480d      	ldr	r0, [pc, #52]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000ce4:	f00e fe57 	bl	800f996 <HAL_UARTEx_SetTxFifoThreshold>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_UART8_Init+0x6e>
  {
    Error_Handler();
 8000cee:	f000 fac7 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4808      	ldr	r0, [pc, #32]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000cf6:	f00e fe8c 	bl	800fa12 <HAL_UARTEx_SetRxFifoThreshold>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_UART8_Init+0x80>
  {
    Error_Handler();
 8000d00:	f000 fabe 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	@ (8000d18 <MX_UART8_Init+0x94>)
 8000d06:	f00e fe0d 	bl	800f924 <HAL_UARTEx_DisableFifoMode>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_UART8_Init+0x90>
  {
    Error_Handler();
 8000d10:	f000 fab6 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	24000670 	.word	0x24000670
 8000d1c:	40007c00 	.word	0x40007c00

08000d20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d24:	4b22      	ldr	r3, [pc, #136]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d26:	4a23      	ldr	r2, [pc, #140]	@ (8000db4 <MX_USART1_UART_Init+0x94>)
 8000d28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d32:	4b1f      	ldr	r3, [pc, #124]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d38:	4b1d      	ldr	r3, [pc, #116]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d46:	220c      	movs	r2, #12
 8000d48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4a:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d50:	4b17      	ldr	r3, [pc, #92]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d56:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d62:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d68:	4811      	ldr	r0, [pc, #68]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d6a:	f00b f935 	bl	800bfd8 <HAL_UART_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d74:	f000 fa84 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d78:	2100      	movs	r1, #0
 8000d7a:	480d      	ldr	r0, [pc, #52]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d7c:	f00e fe0b 	bl	800f996 <HAL_UARTEx_SetTxFifoThreshold>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d86:	f000 fa7b 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4808      	ldr	r0, [pc, #32]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d8e:	f00e fe40 	bl	800fa12 <HAL_UARTEx_SetRxFifoThreshold>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d98:	f000 fa72 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d9c:	4804      	ldr	r0, [pc, #16]	@ (8000db0 <MX_USART1_UART_Init+0x90>)
 8000d9e:	f00e fdc1 	bl	800f924 <HAL_UARTEx_DisableFifoMode>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000da8:	f000 fa6a 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	2400073c 	.word	0x2400073c
 8000db4:	40011000 	.word	0x40011000

08000db8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000dbe:	4a23      	ldr	r2, [pc, #140]	@ (8000e4c <MX_USART2_UART_Init+0x94>)
 8000dc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000dc4:	4a22      	ldr	r2, [pc, #136]	@ (8000e50 <MX_USART2_UART_Init+0x98>)
 8000dc6:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dce:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000ddc:	220c      	movs	r2, #12
 8000dde:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de0:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dec:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df8:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dfe:	4812      	ldr	r0, [pc, #72]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000e00:	f00b f8ea 	bl	800bfd8 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8000e0a:	f000 fa39 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	480d      	ldr	r0, [pc, #52]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000e12:	f00e fdc0 	bl	800f996 <HAL_UARTEx_SetTxFifoThreshold>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000e1c:	f000 fa30 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e20:	2100      	movs	r1, #0
 8000e22:	4809      	ldr	r0, [pc, #36]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000e24:	f00e fdf5 	bl	800fa12 <HAL_UARTEx_SetRxFifoThreshold>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000e2e:	f000 fa27 	bl	8001280 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <MX_USART2_UART_Init+0x90>)
 8000e34:	f00e fd76 	bl	800f924 <HAL_UARTEx_DisableFifoMode>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000e3e:	f000 fa1f 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	24000808 	.word	0x24000808
 8000e4c:	40004400 	.word	0x40004400
 8000e50:	000f4240 	.word	0x000f4240

08000e54 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5a:	4b4e      	ldr	r3, [pc, #312]	@ (8000f94 <MX_DMA_Init+0x140>)
 8000e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e60:	4a4c      	ldr	r2, [pc, #304]	@ (8000f94 <MX_DMA_Init+0x140>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000f94 <MX_DMA_Init+0x140>)
 8000e6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e78:	4b46      	ldr	r3, [pc, #280]	@ (8000f94 <MX_DMA_Init+0x140>)
 8000e7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e7e:	4a45      	ldr	r2, [pc, #276]	@ (8000f94 <MX_DMA_Init+0x140>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e88:	4b42      	ldr	r3, [pc, #264]	@ (8000f94 <MX_DMA_Init+0x140>)
 8000e8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8000e96:	4b40      	ldr	r3, [pc, #256]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000e98:	4a40      	ldr	r2, [pc, #256]	@ (8000f9c <MX_DMA_Init+0x148>)
 8000e9a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;
 8000e9c:	4b3e      	ldr	r3, [pc, #248]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000ea4:	2280      	movs	r2, #128	@ 0x80
 8000ea6:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eae:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8000eb0:	4b39      	ldr	r3, [pc, #228]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000eb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eb6:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb8:	4b37      	ldr	r3, [pc, #220]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ebe:	4b36      	ldr	r3, [pc, #216]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000ec4:	4b34      	ldr	r3, [pc, #208]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000eca:	4b33      	ldr	r3, [pc, #204]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000ecc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000ed0:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ed2:	4b31      	ldr	r3, [pc, #196]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ed8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000eda:	2203      	movs	r2, #3
 8000edc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8000ede:	4b2e      	ldr	r3, [pc, #184]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000eea:	482b      	ldr	r0, [pc, #172]	@ (8000f98 <MX_DMA_Init+0x144>)
 8000eec:	f001 fb20 	bl	8002530 <HAL_DMA_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_DMA_Init+0xa6>
  {
    Error_Handler( );
 8000ef6:	f000 f9c3 	bl	8001280 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2105      	movs	r1, #5
 8000efe:	200b      	movs	r0, #11
 8000f00:	f001 faee 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f04:	200b      	movs	r0, #11
 8000f06:	f001 fb05 	bl	8002514 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2105      	movs	r1, #5
 8000f0e:	200c      	movs	r0, #12
 8000f10:	f001 fae6 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000f14:	200c      	movs	r0, #12
 8000f16:	f001 fafd 	bl	8002514 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2105      	movs	r1, #5
 8000f1e:	200d      	movs	r0, #13
 8000f20:	f001 fade 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000f24:	200d      	movs	r0, #13
 8000f26:	f001 faf5 	bl	8002514 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	200e      	movs	r0, #14
 8000f30:	f001 fad6 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000f34:	200e      	movs	r0, #14
 8000f36:	f001 faed 	bl	8002514 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2105      	movs	r1, #5
 8000f3e:	200f      	movs	r0, #15
 8000f40:	f001 face 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000f44:	200f      	movs	r0, #15
 8000f46:	f001 fae5 	bl	8002514 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2105      	movs	r1, #5
 8000f4e:	2010      	movs	r0, #16
 8000f50:	f001 fac6 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f54:	2010      	movs	r0, #16
 8000f56:	f001 fadd 	bl	8002514 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2105      	movs	r1, #5
 8000f5e:	2011      	movs	r0, #17
 8000f60:	f001 fabe 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000f64:	2011      	movs	r0, #17
 8000f66:	f001 fad5 	bl	8002514 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2105      	movs	r1, #5
 8000f6e:	202f      	movs	r0, #47	@ 0x2f
 8000f70:	f001 fab6 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000f74:	202f      	movs	r0, #47	@ 0x2f
 8000f76:	f001 facd 	bl	8002514 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2105      	movs	r1, #5
 8000f7e:	2038      	movs	r0, #56	@ 0x38
 8000f80:	f001 faae 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f84:	2038      	movs	r0, #56	@ 0x38
 8000f86:	f001 fac5 	bl	8002514 <HAL_NVIC_EnableIRQ>

}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	58024400 	.word	0x58024400
 8000f98:	24000ba4 	.word	0x24000ba4
 8000f9c:	40020410 	.word	0x40020410

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08c      	sub	sp, #48	@ 0x30
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb6:	4b99      	ldr	r3, [pc, #612]	@ (800121c <MX_GPIO_Init+0x27c>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbc:	4a97      	ldr	r2, [pc, #604]	@ (800121c <MX_GPIO_Init+0x27c>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc6:	4b95      	ldr	r3, [pc, #596]	@ (800121c <MX_GPIO_Init+0x27c>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	61bb      	str	r3, [r7, #24]
 8000fd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd4:	4b91      	ldr	r3, [pc, #580]	@ (800121c <MX_GPIO_Init+0x27c>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fda:	4a90      	ldr	r2, [pc, #576]	@ (800121c <MX_GPIO_Init+0x27c>)
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe4:	4b8d      	ldr	r3, [pc, #564]	@ (800121c <MX_GPIO_Init+0x27c>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4b8a      	ldr	r3, [pc, #552]	@ (800121c <MX_GPIO_Init+0x27c>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	4a88      	ldr	r2, [pc, #544]	@ (800121c <MX_GPIO_Init+0x27c>)
 8000ffa:	f043 0304 	orr.w	r3, r3, #4
 8000ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001002:	4b86      	ldr	r3, [pc, #536]	@ (800121c <MX_GPIO_Init+0x27c>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b82      	ldr	r3, [pc, #520]	@ (800121c <MX_GPIO_Init+0x27c>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001016:	4a81      	ldr	r2, [pc, #516]	@ (800121c <MX_GPIO_Init+0x27c>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001020:	4b7e      	ldr	r3, [pc, #504]	@ (800121c <MX_GPIO_Init+0x27c>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b7b      	ldr	r3, [pc, #492]	@ (800121c <MX_GPIO_Init+0x27c>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	4a79      	ldr	r2, [pc, #484]	@ (800121c <MX_GPIO_Init+0x27c>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103e:	4b77      	ldr	r3, [pc, #476]	@ (800121c <MX_GPIO_Init+0x27c>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104c:	4b73      	ldr	r3, [pc, #460]	@ (800121c <MX_GPIO_Init+0x27c>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	4a72      	ldr	r2, [pc, #456]	@ (800121c <MX_GPIO_Init+0x27c>)
 8001054:	f043 0308 	orr.w	r3, r3, #8
 8001058:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105c:	4b6f      	ldr	r3, [pc, #444]	@ (800121c <MX_GPIO_Init+0x27c>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001062:	f003 0308 	and.w	r3, r3, #8
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	210c      	movs	r1, #12
 800106e:	486c      	ldr	r0, [pc, #432]	@ (8001220 <MX_GPIO_Init+0x280>)
 8001070:	f005 f92e 	bl	80062d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUTTON_LED_1_Pin|BUTTON_LED_2_Pin, GPIO_PIN_RESET);
 8001074:	2200      	movs	r2, #0
 8001076:	2103      	movs	r1, #3
 8001078:	486a      	ldr	r0, [pc, #424]	@ (8001224 <MX_GPIO_Init+0x284>)
 800107a:	f005 f929 	bl	80062d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CM4_GPIO_2_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f248 4180 	movw	r1, #33920	@ 0x8480
 8001084:	4868      	ldr	r0, [pc, #416]	@ (8001228 <MX_GPIO_Init+0x288>)
 8001086:	f005 f923 	bl	80062d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_IMU_GPIO_Port, CS_IMU_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001090:	4866      	ldr	r0, [pc, #408]	@ (800122c <MX_GPIO_Init+0x28c>)
 8001092:	f005 f91d 	bl	80062d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|LED_ACT_Pin|RS485_EN_Pin
 8001096:	2200      	movs	r2, #0
 8001098:	f648 3180 	movw	r1, #35712	@ 0x8b80
 800109c:	4864      	ldr	r0, [pc, #400]	@ (8001230 <MX_GPIO_Init+0x290>)
 800109e:	f005 f917 	bl	80062d0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010a2:	2310      	movs	r3, #16
 80010a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	485c      	ldr	r0, [pc, #368]	@ (8001228 <MX_GPIO_Init+0x288>)
 80010b6:	f004 ff43 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010ba:	2320      	movs	r3, #32
 80010bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80010ca:	2304      	movs	r3, #4
 80010cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4854      	ldr	r0, [pc, #336]	@ (8001228 <MX_GPIO_Init+0x288>)
 80010d6:	f004 ff33 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIDE_BUTTON_2_Pin SIDE_BUTTON_1_Pin */
  GPIO_InitStruct.Pin = SIDE_BUTTON_2_Pin|SIDE_BUTTON_1_Pin;
 80010da:	2303      	movs	r3, #3
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	484c      	ldr	r0, [pc, #304]	@ (8001220 <MX_GPIO_Init+0x280>)
 80010ee:	f004 ff27 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010f2:	230c      	movs	r3, #12
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4845      	ldr	r0, [pc, #276]	@ (8001220 <MX_GPIO_Init+0x280>)
 800110a:	f004 ff19 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_LED_1_Pin BUTTON_LED_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_LED_1_Pin|BUTTON_LED_2_Pin;
 800110e:	2303      	movs	r3, #3
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	483f      	ldr	r0, [pc, #252]	@ (8001224 <MX_GPIO_Init+0x284>)
 8001126:	f004 ff0b 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800112a:	2304      	movs	r3, #4
 800112c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800112e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001134:	2302      	movs	r3, #2
 8001136:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	483b      	ldr	r0, [pc, #236]	@ (800122c <MX_GPIO_Init+0x28c>)
 8001140:	f004 fefe 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : CM4_GPIO_2_Pin */
  GPIO_InitStruct.Pin = CM4_GPIO_2_Pin;
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800114c:	2302      	movs	r3, #2
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CM4_GPIO_2_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	4833      	ldr	r0, [pc, #204]	@ (8001228 <MX_GPIO_Init+0x288>)
 800115c:	f004 fef0 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001160:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001166:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800116c:	2302      	movs	r3, #2
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	482c      	ldr	r0, [pc, #176]	@ (8001228 <MX_GPIO_Init+0x288>)
 8001178:	f004 fee2 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 800117c:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	4824      	ldr	r0, [pc, #144]	@ (8001228 <MX_GPIO_Init+0x288>)
 8001196:	f004 fed3 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_IMU_Pin */
  GPIO_InitStruct.Pin = CS_IMU_Pin;
 800119a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_IMU_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	481e      	ldr	r0, [pc, #120]	@ (800122c <MX_GPIO_Init+0x28c>)
 80011b4:	f004 fec4 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4817      	ldr	r0, [pc, #92]	@ (8001230 <MX_GPIO_Init+0x290>)
 80011d2:	f004 feb5 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 LED_ACT_Pin RS485_EN_Pin PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|LED_ACT_Pin|RS485_EN_Pin|GPIO_PIN_7;
 80011d6:	f648 2380 	movw	r3, #35456	@ 0x8a80
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4810      	ldr	r0, [pc, #64]	@ (8001230 <MX_GPIO_Init+0x290>)
 80011f0:	f004 fea6 	bl	8005f40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2105      	movs	r1, #5
 80011f8:	2008      	movs	r0, #8
 80011fa:	f001 f971 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011fe:	2008      	movs	r0, #8
 8001200:	f001 f988 	bl	8002514 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001204:	2200      	movs	r2, #0
 8001206:	2105      	movs	r1, #5
 8001208:	2017      	movs	r0, #23
 800120a:	f001 f969 	bl	80024e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800120e:	2017      	movs	r0, #23
 8001210:	f001 f980 	bl	8002514 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001214:	bf00      	nop
 8001216:	3730      	adds	r7, #48	@ 0x30
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	58024400 	.word	0x58024400
 8001220:	58020800 	.word	0x58020800
 8001224:	58020000 	.word	0x58020000
 8001228:	58021000 	.word	0x58021000
 800122c:	58020400 	.word	0x58020400
 8001230:	58020c00 	.word	0x58020c00

08001234 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
//	  firmware_loop();
		osDelay(1000);
 800123c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001240:	f00e fe2a 	bl	800fe98 <osDelay>
 8001244:	e7fa      	b.n	800123c <StartDefaultTask+0x8>

08001246 <Callback01>:
  /* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void *argument)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */

  /* USER CODE END Callback01 */
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a04      	ldr	r2, [pc, #16]	@ (800127c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d101      	bne.n	8001272 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800126e:	f001 f82f 	bl	80022d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40001000 	.word	0x40001000

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
}
 8001286:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <Error_Handler+0x8>

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <HAL_MspInit+0x38>)
 8001294:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001298:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <HAL_MspInit+0x38>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <HAL_MspInit+0x38>)
 80012a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012b0:	2200      	movs	r2, #0
 80012b2:	210f      	movs	r1, #15
 80012b4:	f06f 0001 	mvn.w	r0, #1
 80012b8:	f001 f912 	bl	80024e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	58024400 	.word	0x58024400

080012c8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b0ba      	sub	sp, #232	@ 0xe8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	22c0      	movs	r2, #192	@ 0xc0
 80012e6:	2100      	movs	r1, #0
 80012e8:	4618      	mov	r0, r3
 80012ea:	f020 f827 	bl	802133c <memset>
  if(hfdcan->Instance==FDCAN1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a2e      	ldr	r2, [pc, #184]	@ (80013ac <HAL_FDCAN_MspInit+0xe4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d155      	bne.n	80013a4 <HAL_FDCAN_MspInit+0xdc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80012f8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130a:	f107 0310 	add.w	r3, r7, #16
 800130e:	4618      	mov	r0, r3
 8001310:	f006 fd2e 	bl	8007d70 <HAL_RCCEx_PeriphCLKConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 800131a:	f7ff ffb1 	bl	8001280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800131e:	4b24      	ldr	r3, [pc, #144]	@ (80013b0 <HAL_FDCAN_MspInit+0xe8>)
 8001320:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001324:	4a22      	ldr	r2, [pc, #136]	@ (80013b0 <HAL_FDCAN_MspInit+0xe8>)
 8001326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800132a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800132e:	4b20      	ldr	r3, [pc, #128]	@ (80013b0 <HAL_FDCAN_MspInit+0xe8>)
 8001330:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800133c:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <HAL_FDCAN_MspInit+0xe8>)
 800133e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001342:	4a1b      	ldr	r2, [pc, #108]	@ (80013b0 <HAL_FDCAN_MspInit+0xe8>)
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800134c:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <HAL_FDCAN_MspInit+0xe8>)
 800134e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001352:	f003 0308 	and.w	r3, r3, #8
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800135a:	2303      	movs	r3, #3
 800135c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001372:	2309      	movs	r3, #9
 8001374:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001378:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800137c:	4619      	mov	r1, r3
 800137e:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <HAL_FDCAN_MspInit+0xec>)
 8001380:	f004 fdde 	bl	8005f40 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2105      	movs	r1, #5
 8001388:	2013      	movs	r0, #19
 800138a:	f001 f8a9 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800138e:	2013      	movs	r0, #19
 8001390:	f001 f8c0 	bl	8002514 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2105      	movs	r1, #5
 8001398:	2015      	movs	r0, #21
 800139a:	f001 f8a1 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800139e:	2015      	movs	r0, #21
 80013a0:	f001 f8b8 	bl	8002514 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80013a4:	bf00      	nop
 80013a6:	37e8      	adds	r7, #232	@ 0xe8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	4000a000 	.word	0x4000a000
 80013b0:	58024400 	.word	0x58024400
 80013b4:	58020c00 	.word	0x58020c00

080013b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0bc      	sub	sp, #240	@ 0xf0
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d0:	f107 0318 	add.w	r3, r7, #24
 80013d4:	22c0      	movs	r2, #192	@ 0xc0
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f01f ffaf 	bl	802133c <memset>
  if(hi2c->Instance==I2C3)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a39      	ldr	r2, [pc, #228]	@ (80014c8 <HAL_I2C_MspInit+0x110>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d16b      	bne.n	80014c0 <HAL_I2C_MspInit+0x108>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80013e8:	f04f 0208 	mov.w	r2, #8
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fa:	f107 0318 	add.w	r3, r7, #24
 80013fe:	4618      	mov	r0, r3
 8001400:	f006 fcb6 	bl	8007d70 <HAL_RCCEx_PeriphCLKConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800140a:	f7ff ff39 	bl	8001280 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <HAL_I2C_MspInit+0x114>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001414:	4a2d      	ldr	r2, [pc, #180]	@ (80014cc <HAL_I2C_MspInit+0x114>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800141e:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <HAL_I2C_MspInit+0x114>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <HAL_I2C_MspInit+0x114>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001432:	4a26      	ldr	r2, [pc, #152]	@ (80014cc <HAL_I2C_MspInit+0x114>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800143c:	4b23      	ldr	r3, [pc, #140]	@ (80014cc <HAL_I2C_MspInit+0x114>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	613b      	str	r3, [r7, #16]
 8001448:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800144a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800144e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001452:	2312      	movs	r3, #18
 8001454:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001464:	2304      	movs	r3, #4
 8001466:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800146e:	4619      	mov	r1, r3
 8001470:	4817      	ldr	r0, [pc, #92]	@ (80014d0 <HAL_I2C_MspInit+0x118>)
 8001472:	f004 fd65 	bl	8005f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001476:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800147a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147e:	2312      	movs	r3, #18
 8001480:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001490:	2304      	movs	r3, #4
 8001492:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800149a:	4619      	mov	r1, r3
 800149c:	480d      	ldr	r0, [pc, #52]	@ (80014d4 <HAL_I2C_MspInit+0x11c>)
 800149e:	f004 fd4f 	bl	8005f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80014a2:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <HAL_I2C_MspInit+0x114>)
 80014a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014a8:	4a08      	ldr	r2, [pc, #32]	@ (80014cc <HAL_I2C_MspInit+0x114>)
 80014aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_I2C_MspInit+0x114>)
 80014b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80014b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80014c0:	bf00      	nop
 80014c2:	37f0      	adds	r7, #240	@ 0xf0
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40005c00 	.word	0x40005c00
 80014cc:	58024400 	.word	0x58024400
 80014d0:	58020800 	.word	0x58020800
 80014d4:	58020000 	.word	0x58020000

080014d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b0bc      	sub	sp, #240	@ 0xf0
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	22c0      	movs	r2, #192	@ 0xc0
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f01f ff1f 	bl	802133c <memset>
  if(hspi->Instance==SPI1)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a7d      	ldr	r2, [pc, #500]	@ (80016f8 <HAL_SPI_MspInit+0x220>)
 8001504:	4293      	cmp	r3, r2
 8001506:	f040 80a8 	bne.w	800165a <HAL_SPI_MspInit+0x182>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800150a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001516:	2300      	movs	r3, #0
 8001518:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151a:	f107 0318 	add.w	r3, r7, #24
 800151e:	4618      	mov	r0, r3
 8001520:	f006 fc26 	bl	8007d70 <HAL_RCCEx_PeriphCLKConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800152a:	f7ff fea9 	bl	8001280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800152e:	4b73      	ldr	r3, [pc, #460]	@ (80016fc <HAL_SPI_MspInit+0x224>)
 8001530:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001534:	4a71      	ldr	r2, [pc, #452]	@ (80016fc <HAL_SPI_MspInit+0x224>)
 8001536:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800153a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800153e:	4b6f      	ldr	r3, [pc, #444]	@ (80016fc <HAL_SPI_MspInit+0x224>)
 8001540:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001544:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b6b      	ldr	r3, [pc, #428]	@ (80016fc <HAL_SPI_MspInit+0x224>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001552:	4a6a      	ldr	r2, [pc, #424]	@ (80016fc <HAL_SPI_MspInit+0x224>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800155c:	4b67      	ldr	r3, [pc, #412]	@ (80016fc <HAL_SPI_MspInit+0x224>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800156a:	23f0      	movs	r3, #240	@ 0xf0
 800156c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001582:	2305      	movs	r3, #5
 8001584:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800158c:	4619      	mov	r1, r3
 800158e:	485c      	ldr	r0, [pc, #368]	@ (8001700 <HAL_SPI_MspInit+0x228>)
 8001590:	f004 fcd6 	bl	8005f40 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream6;
 8001594:	4b5b      	ldr	r3, [pc, #364]	@ (8001704 <HAL_SPI_MspInit+0x22c>)
 8001596:	4a5c      	ldr	r2, [pc, #368]	@ (8001708 <HAL_SPI_MspInit+0x230>)
 8001598:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800159a:	4b5a      	ldr	r3, [pc, #360]	@ (8001704 <HAL_SPI_MspInit+0x22c>)
 800159c:	2225      	movs	r2, #37	@ 0x25
 800159e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015a0:	4b58      	ldr	r3, [pc, #352]	@ (8001704 <HAL_SPI_MspInit+0x22c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015a6:	4b57      	ldr	r3, [pc, #348]	@ (8001704 <HAL_SPI_MspInit+0x22c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015ac:	4b55      	ldr	r3, [pc, #340]	@ (8001704 <HAL_SPI_MspInit+0x22c>)
 80015ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80015b2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015b4:	4b53      	ldr	r3, [pc, #332]	@ (8001704 <HAL_SPI_MspInit+0x22c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ba:	4b52      	ldr	r3, [pc, #328]	@ (8001704 <HAL_SPI_MspInit+0x22c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80015c0:	4b50      	ldr	r3, [pc, #320]	@ (8001704 <HAL_SPI_MspInit+0x22c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001704 <HAL_SPI_MspInit+0x22c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001704 <HAL_SPI_MspInit+0x22c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80015d2:	484c      	ldr	r0, [pc, #304]	@ (8001704 <HAL_SPI_MspInit+0x22c>)
 80015d4:	f000 ffac 	bl	8002530 <HAL_DMA_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 80015de:	f7ff fe4f 	bl	8001280 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a47      	ldr	r2, [pc, #284]	@ (8001704 <HAL_SPI_MspInit+0x22c>)
 80015e6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80015e8:	4a46      	ldr	r2, [pc, #280]	@ (8001704 <HAL_SPI_MspInit+0x22c>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream7;
 80015ee:	4b47      	ldr	r3, [pc, #284]	@ (800170c <HAL_SPI_MspInit+0x234>)
 80015f0:	4a47      	ldr	r2, [pc, #284]	@ (8001710 <HAL_SPI_MspInit+0x238>)
 80015f2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 80015f4:	4b45      	ldr	r3, [pc, #276]	@ (800170c <HAL_SPI_MspInit+0x234>)
 80015f6:	2226      	movs	r2, #38	@ 0x26
 80015f8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015fa:	4b44      	ldr	r3, [pc, #272]	@ (800170c <HAL_SPI_MspInit+0x234>)
 80015fc:	2240      	movs	r2, #64	@ 0x40
 80015fe:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001600:	4b42      	ldr	r3, [pc, #264]	@ (800170c <HAL_SPI_MspInit+0x234>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001606:	4b41      	ldr	r3, [pc, #260]	@ (800170c <HAL_SPI_MspInit+0x234>)
 8001608:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800160c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800160e:	4b3f      	ldr	r3, [pc, #252]	@ (800170c <HAL_SPI_MspInit+0x234>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001614:	4b3d      	ldr	r3, [pc, #244]	@ (800170c <HAL_SPI_MspInit+0x234>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800161a:	4b3c      	ldr	r3, [pc, #240]	@ (800170c <HAL_SPI_MspInit+0x234>)
 800161c:	2200      	movs	r2, #0
 800161e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001620:	4b3a      	ldr	r3, [pc, #232]	@ (800170c <HAL_SPI_MspInit+0x234>)
 8001622:	2200      	movs	r2, #0
 8001624:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001626:	4b39      	ldr	r3, [pc, #228]	@ (800170c <HAL_SPI_MspInit+0x234>)
 8001628:	2200      	movs	r2, #0
 800162a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800162c:	4837      	ldr	r0, [pc, #220]	@ (800170c <HAL_SPI_MspInit+0x234>)
 800162e:	f000 ff7f 	bl	8002530 <HAL_DMA_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <HAL_SPI_MspInit+0x164>
    {
      Error_Handler();
 8001638:	f7ff fe22 	bl	8001280 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a33      	ldr	r2, [pc, #204]	@ (800170c <HAL_SPI_MspInit+0x234>)
 8001640:	679a      	str	r2, [r3, #120]	@ 0x78
 8001642:	4a32      	ldr	r2, [pc, #200]	@ (800170c <HAL_SPI_MspInit+0x234>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2105      	movs	r1, #5
 800164c:	2023      	movs	r0, #35	@ 0x23
 800164e:	f000 ff47 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001652:	2023      	movs	r0, #35	@ 0x23
 8001654:	f000 ff5e 	bl	8002514 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001658:	e04a      	b.n	80016f0 <HAL_SPI_MspInit+0x218>
  else if(hspi->Instance==SPI2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a2d      	ldr	r2, [pc, #180]	@ (8001714 <HAL_SPI_MspInit+0x23c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d145      	bne.n	80016f0 <HAL_SPI_MspInit+0x218>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001664:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001670:	2300      	movs	r3, #0
 8001672:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001674:	f107 0318 	add.w	r3, r7, #24
 8001678:	4618      	mov	r0, r3
 800167a:	f006 fb79 	bl	8007d70 <HAL_RCCEx_PeriphCLKConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_SPI_MspInit+0x1b0>
      Error_Handler();
 8001684:	f7ff fdfc 	bl	8001280 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001688:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <HAL_SPI_MspInit+0x224>)
 800168a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800168e:	4a1b      	ldr	r2, [pc, #108]	@ (80016fc <HAL_SPI_MspInit+0x224>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001694:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001698:	4b18      	ldr	r3, [pc, #96]	@ (80016fc <HAL_SPI_MspInit+0x224>)
 800169a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800169e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_SPI_MspInit+0x224>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ac:	4a13      	ldr	r2, [pc, #76]	@ (80016fc <HAL_SPI_MspInit+0x224>)
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b6:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <HAL_SPI_MspInit+0x224>)
 80016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80016c4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80016c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016de:	2305      	movs	r3, #5
 80016e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016e8:	4619      	mov	r1, r3
 80016ea:	480b      	ldr	r0, [pc, #44]	@ (8001718 <HAL_SPI_MspInit+0x240>)
 80016ec:	f004 fc28 	bl	8005f40 <HAL_GPIO_Init>
}
 80016f0:	bf00      	nop
 80016f2:	37f0      	adds	r7, #240	@ 0xf0
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40013000 	.word	0x40013000
 80016fc:	58024400 	.word	0x58024400
 8001700:	58020000 	.word	0x58020000
 8001704:	2400049c 	.word	0x2400049c
 8001708:	400200a0 	.word	0x400200a0
 800170c:	24000514 	.word	0x24000514
 8001710:	400200b8 	.word	0x400200b8
 8001714:	40003800 	.word	0x40003800
 8001718:	58020400 	.word	0x58020400

0800171c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800172c:	d10e      	bne.n	800174c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <HAL_TIM_Base_MspInit+0x3c>)
 8001730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001734:	4a08      	ldr	r2, [pc, #32]	@ (8001758 <HAL_TIM_Base_MspInit+0x3c>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_TIM_Base_MspInit+0x3c>)
 8001740:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	58024400 	.word	0x58024400

0800175c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	@ 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a34      	ldr	r2, [pc, #208]	@ (800184c <HAL_TIM_Encoder_MspInit+0xf0>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d12e      	bne.n	80017dc <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800177e:	4b34      	ldr	r3, [pc, #208]	@ (8001850 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001784:	4a32      	ldr	r2, [pc, #200]	@ (8001850 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001786:	f043 0302 	orr.w	r3, r3, #2
 800178a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800178e:	4b30      	ldr	r3, [pc, #192]	@ (8001850 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001790:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
 800179a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800179c:	4b2c      	ldr	r3, [pc, #176]	@ (8001850 <HAL_TIM_Encoder_MspInit+0xf4>)
 800179e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001850 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ac:	4b28      	ldr	r3, [pc, #160]	@ (8001850 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017ba:	2330      	movs	r3, #48	@ 0x30
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017be:	2302      	movs	r3, #2
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017ca:	2302      	movs	r3, #2
 80017cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ce:	f107 031c 	add.w	r3, r7, #28
 80017d2:	4619      	mov	r1, r3
 80017d4:	481f      	ldr	r0, [pc, #124]	@ (8001854 <HAL_TIM_Encoder_MspInit+0xf8>)
 80017d6:	f004 fbb3 	bl	8005f40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80017da:	e032      	b.n	8001842 <HAL_TIM_Encoder_MspInit+0xe6>
  else if(htim_encoder->Instance==TIM4)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001858 <HAL_TIM_Encoder_MspInit+0xfc>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d12d      	bne.n	8001842 <HAL_TIM_Encoder_MspInit+0xe6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017ec:	4a18      	ldr	r2, [pc, #96]	@ (8001850 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017f6:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <HAL_TIM_Encoder_MspInit+0xf4>)
 80017f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180a:	4a11      	ldr	r2, [pc, #68]	@ (8001850 <HAL_TIM_Encoder_MspInit+0xf4>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001814:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001822:	23c0      	movs	r3, #192	@ 0xc0
 8001824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182e:	2300      	movs	r3, #0
 8001830:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001832:	2302      	movs	r3, #2
 8001834:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	@ (8001854 <HAL_TIM_Encoder_MspInit+0xf8>)
 800183e:	f004 fb7f 	bl	8005f40 <HAL_GPIO_Init>
}
 8001842:	bf00      	nop
 8001844:	3730      	adds	r7, #48	@ 0x30
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40000400 	.word	0x40000400
 8001850:	58024400 	.word	0x58024400
 8001854:	58020400 	.word	0x58020400
 8001858:	40000800 	.word	0x40000800

0800185c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b0be      	sub	sp, #248	@ 0xf8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001864:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001874:	f107 0320 	add.w	r3, r7, #32
 8001878:	22c0      	movs	r2, #192	@ 0xc0
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f01f fd5d 	bl	802133c <memset>
  if(huart->Instance==UART8)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4aaf      	ldr	r2, [pc, #700]	@ (8001b44 <HAL_UART_MspInit+0x2e8>)
 8001888:	4293      	cmp	r3, r2
 800188a:	f040 80aa 	bne.w	80019e2 <HAL_UART_MspInit+0x186>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800188e:	f04f 0202 	mov.w	r2, #2
 8001892:	f04f 0300 	mov.w	r3, #0
 8001896:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800189a:	2300      	movs	r3, #0
 800189c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a0:	f107 0320 	add.w	r3, r7, #32
 80018a4:	4618      	mov	r0, r3
 80018a6:	f006 fa63 	bl	8007d70 <HAL_RCCEx_PeriphCLKConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80018b0:	f7ff fce6 	bl	8001280 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80018b4:	4ba4      	ldr	r3, [pc, #656]	@ (8001b48 <HAL_UART_MspInit+0x2ec>)
 80018b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ba:	4aa3      	ldr	r2, [pc, #652]	@ (8001b48 <HAL_UART_MspInit+0x2ec>)
 80018bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80018c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018c4:	4ba0      	ldr	r3, [pc, #640]	@ (8001b48 <HAL_UART_MspInit+0x2ec>)
 80018c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018d2:	4b9d      	ldr	r3, [pc, #628]	@ (8001b48 <HAL_UART_MspInit+0x2ec>)
 80018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d8:	4a9b      	ldr	r2, [pc, #620]	@ (8001b48 <HAL_UART_MspInit+0x2ec>)
 80018da:	f043 0310 	orr.w	r3, r3, #16
 80018de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e2:	4b99      	ldr	r3, [pc, #612]	@ (8001b48 <HAL_UART_MspInit+0x2ec>)
 80018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e8:	f003 0310 	and.w	r3, r3, #16
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	69bb      	ldr	r3, [r7, #24]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018f0:	2303      	movs	r3, #3
 80018f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001908:	2308      	movs	r3, #8
 800190a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800190e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001912:	4619      	mov	r1, r3
 8001914:	488d      	ldr	r0, [pc, #564]	@ (8001b4c <HAL_UART_MspInit+0x2f0>)
 8001916:	f004 fb13 	bl	8005f40 <HAL_GPIO_Init>

    /* UART8 DMA Init */
    /* UART8_RX Init */
    hdma_uart8_rx.Instance = DMA1_Stream2;
 800191a:	4b8d      	ldr	r3, [pc, #564]	@ (8001b50 <HAL_UART_MspInit+0x2f4>)
 800191c:	4a8d      	ldr	r2, [pc, #564]	@ (8001b54 <HAL_UART_MspInit+0x2f8>)
 800191e:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001920:	4b8b      	ldr	r3, [pc, #556]	@ (8001b50 <HAL_UART_MspInit+0x2f4>)
 8001922:	2251      	movs	r2, #81	@ 0x51
 8001924:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001926:	4b8a      	ldr	r3, [pc, #552]	@ (8001b50 <HAL_UART_MspInit+0x2f4>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800192c:	4b88      	ldr	r3, [pc, #544]	@ (8001b50 <HAL_UART_MspInit+0x2f4>)
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001932:	4b87      	ldr	r3, [pc, #540]	@ (8001b50 <HAL_UART_MspInit+0x2f4>)
 8001934:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001938:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800193a:	4b85      	ldr	r3, [pc, #532]	@ (8001b50 <HAL_UART_MspInit+0x2f4>)
 800193c:	2200      	movs	r2, #0
 800193e:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001940:	4b83      	ldr	r3, [pc, #524]	@ (8001b50 <HAL_UART_MspInit+0x2f4>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001946:	4b82      	ldr	r3, [pc, #520]	@ (8001b50 <HAL_UART_MspInit+0x2f4>)
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800194c:	4b80      	ldr	r3, [pc, #512]	@ (8001b50 <HAL_UART_MspInit+0x2f4>)
 800194e:	2200      	movs	r2, #0
 8001950:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001952:	4b7f      	ldr	r3, [pc, #508]	@ (8001b50 <HAL_UART_MspInit+0x2f4>)
 8001954:	2200      	movs	r2, #0
 8001956:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001958:	487d      	ldr	r0, [pc, #500]	@ (8001b50 <HAL_UART_MspInit+0x2f4>)
 800195a:	f000 fde9 	bl	8002530 <HAL_DMA_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001964:	f7ff fc8c 	bl	8001280 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a79      	ldr	r2, [pc, #484]	@ (8001b50 <HAL_UART_MspInit+0x2f4>)
 800196c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001970:	4a77      	ldr	r2, [pc, #476]	@ (8001b50 <HAL_UART_MspInit+0x2f4>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8_TX Init */
    hdma_uart8_tx.Instance = DMA1_Stream3;
 8001976:	4b78      	ldr	r3, [pc, #480]	@ (8001b58 <HAL_UART_MspInit+0x2fc>)
 8001978:	4a78      	ldr	r2, [pc, #480]	@ (8001b5c <HAL_UART_MspInit+0x300>)
 800197a:	601a      	str	r2, [r3, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 800197c:	4b76      	ldr	r3, [pc, #472]	@ (8001b58 <HAL_UART_MspInit+0x2fc>)
 800197e:	2252      	movs	r2, #82	@ 0x52
 8001980:	605a      	str	r2, [r3, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001982:	4b75      	ldr	r3, [pc, #468]	@ (8001b58 <HAL_UART_MspInit+0x2fc>)
 8001984:	2240      	movs	r2, #64	@ 0x40
 8001986:	609a      	str	r2, [r3, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001988:	4b73      	ldr	r3, [pc, #460]	@ (8001b58 <HAL_UART_MspInit+0x2fc>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 800198e:	4b72      	ldr	r3, [pc, #456]	@ (8001b58 <HAL_UART_MspInit+0x2fc>)
 8001990:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001994:	611a      	str	r2, [r3, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001996:	4b70      	ldr	r3, [pc, #448]	@ (8001b58 <HAL_UART_MspInit+0x2fc>)
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800199c:	4b6e      	ldr	r3, [pc, #440]	@ (8001b58 <HAL_UART_MspInit+0x2fc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	619a      	str	r2, [r3, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 80019a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001b58 <HAL_UART_MspInit+0x2fc>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	61da      	str	r2, [r3, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001b58 <HAL_UART_MspInit+0x2fc>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	621a      	str	r2, [r3, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001b58 <HAL_UART_MspInit+0x2fc>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 80019b4:	4868      	ldr	r0, [pc, #416]	@ (8001b58 <HAL_UART_MspInit+0x2fc>)
 80019b6:	f000 fdbb 	bl	8002530 <HAL_DMA_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <HAL_UART_MspInit+0x168>
    {
      Error_Handler();
 80019c0:	f7ff fc5e 	bl	8001280 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a64      	ldr	r2, [pc, #400]	@ (8001b58 <HAL_UART_MspInit+0x2fc>)
 80019c8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80019ca:	4a63      	ldr	r2, [pc, #396]	@ (8001b58 <HAL_UART_MspInit+0x2fc>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2105      	movs	r1, #5
 80019d4:	2053      	movs	r0, #83	@ 0x53
 80019d6:	f000 fd83 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80019da:	2053      	movs	r0, #83	@ 0x53
 80019dc:	f000 fd9a 	bl	8002514 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019e0:	e179      	b.n	8001cd6 <HAL_UART_MspInit+0x47a>
  else if(huart->Instance==USART1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001b60 <HAL_UART_MspInit+0x304>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	f040 80c5 	bne.w	8001b78 <HAL_UART_MspInit+0x31c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80019ee:	f04f 0201 	mov.w	r2, #1
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4618      	mov	r0, r3
 8001a06:	f006 f9b3 	bl	8007d70 <HAL_RCCEx_PeriphCLKConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8001a10:	f7ff fc36 	bl	8001280 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a14:	4b4c      	ldr	r3, [pc, #304]	@ (8001b48 <HAL_UART_MspInit+0x2ec>)
 8001a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a1a:	4a4b      	ldr	r2, [pc, #300]	@ (8001b48 <HAL_UART_MspInit+0x2ec>)
 8001a1c:	f043 0310 	orr.w	r3, r3, #16
 8001a20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a24:	4b48      	ldr	r3, [pc, #288]	@ (8001b48 <HAL_UART_MspInit+0x2ec>)
 8001a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	4b45      	ldr	r3, [pc, #276]	@ (8001b48 <HAL_UART_MspInit+0x2ec>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a38:	4a43      	ldr	r2, [pc, #268]	@ (8001b48 <HAL_UART_MspInit+0x2ec>)
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a42:	4b41      	ldr	r3, [pc, #260]	@ (8001b48 <HAL_UART_MspInit+0x2ec>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a50:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a70:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a74:	4619      	mov	r1, r3
 8001a76:	483b      	ldr	r0, [pc, #236]	@ (8001b64 <HAL_UART_MspInit+0x308>)
 8001a78:	f004 fa62 	bl	8005f40 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001a7c:	4b3a      	ldr	r3, [pc, #232]	@ (8001b68 <HAL_UART_MspInit+0x30c>)
 8001a7e:	4a3b      	ldr	r2, [pc, #236]	@ (8001b6c <HAL_UART_MspInit+0x310>)
 8001a80:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001a82:	4b39      	ldr	r3, [pc, #228]	@ (8001b68 <HAL_UART_MspInit+0x30c>)
 8001a84:	2229      	movs	r2, #41	@ 0x29
 8001a86:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a88:	4b37      	ldr	r3, [pc, #220]	@ (8001b68 <HAL_UART_MspInit+0x30c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a8e:	4b36      	ldr	r3, [pc, #216]	@ (8001b68 <HAL_UART_MspInit+0x30c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a94:	4b34      	ldr	r3, [pc, #208]	@ (8001b68 <HAL_UART_MspInit+0x30c>)
 8001a96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a9a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a9c:	4b32      	ldr	r3, [pc, #200]	@ (8001b68 <HAL_UART_MspInit+0x30c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aa2:	4b31      	ldr	r3, [pc, #196]	@ (8001b68 <HAL_UART_MspInit+0x30c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b68 <HAL_UART_MspInit+0x30c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001aae:	4b2e      	ldr	r3, [pc, #184]	@ (8001b68 <HAL_UART_MspInit+0x30c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b68 <HAL_UART_MspInit+0x30c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001aba:	482b      	ldr	r0, [pc, #172]	@ (8001b68 <HAL_UART_MspInit+0x30c>)
 8001abc:	f000 fd38 	bl	8002530 <HAL_DMA_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <HAL_UART_MspInit+0x26e>
      Error_Handler();
 8001ac6:	f7ff fbdb 	bl	8001280 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a26      	ldr	r2, [pc, #152]	@ (8001b68 <HAL_UART_MspInit+0x30c>)
 8001ace:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001ad2:	4a25      	ldr	r2, [pc, #148]	@ (8001b68 <HAL_UART_MspInit+0x30c>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8001ad8:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <HAL_UART_MspInit+0x314>)
 8001ada:	4a26      	ldr	r2, [pc, #152]	@ (8001b74 <HAL_UART_MspInit+0x318>)
 8001adc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_UART_MspInit+0x314>)
 8001ae0:	222a      	movs	r2, #42	@ 0x2a
 8001ae2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	@ (8001b70 <HAL_UART_MspInit+0x314>)
 8001ae6:	2240      	movs	r2, #64	@ 0x40
 8001ae8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aea:	4b21      	ldr	r3, [pc, #132]	@ (8001b70 <HAL_UART_MspInit+0x314>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <HAL_UART_MspInit+0x314>)
 8001af2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001af6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <HAL_UART_MspInit+0x314>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <HAL_UART_MspInit+0x314>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b04:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <HAL_UART_MspInit+0x314>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b0a:	4b19      	ldr	r3, [pc, #100]	@ (8001b70 <HAL_UART_MspInit+0x314>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b10:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <HAL_UART_MspInit+0x314>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b16:	4816      	ldr	r0, [pc, #88]	@ (8001b70 <HAL_UART_MspInit+0x314>)
 8001b18:	f000 fd0a 	bl	8002530 <HAL_DMA_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_UART_MspInit+0x2ca>
      Error_Handler();
 8001b22:	f7ff fbad 	bl	8001280 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a11      	ldr	r2, [pc, #68]	@ (8001b70 <HAL_UART_MspInit+0x314>)
 8001b2a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001b2c:	4a10      	ldr	r2, [pc, #64]	@ (8001b70 <HAL_UART_MspInit+0x314>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2105      	movs	r1, #5
 8001b36:	2025      	movs	r0, #37	@ 0x25
 8001b38:	f000 fcd2 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b3c:	2025      	movs	r0, #37	@ 0x25
 8001b3e:	f000 fce9 	bl	8002514 <HAL_NVIC_EnableIRQ>
}
 8001b42:	e0c8      	b.n	8001cd6 <HAL_UART_MspInit+0x47a>
 8001b44:	40007c00 	.word	0x40007c00
 8001b48:	58024400 	.word	0x58024400
 8001b4c:	58021000 	.word	0x58021000
 8001b50:	240008d4 	.word	0x240008d4
 8001b54:	40020040 	.word	0x40020040
 8001b58:	2400094c 	.word	0x2400094c
 8001b5c:	40020058 	.word	0x40020058
 8001b60:	40011000 	.word	0x40011000
 8001b64:	58020000 	.word	0x58020000
 8001b68:	240009c4 	.word	0x240009c4
 8001b6c:	40020010 	.word	0x40020010
 8001b70:	24000a3c 	.word	0x24000a3c
 8001b74:	40020028 	.word	0x40020028
  else if(huart->Instance==USART2)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a58      	ldr	r2, [pc, #352]	@ (8001ce0 <HAL_UART_MspInit+0x484>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	f040 80a9 	bne.w	8001cd6 <HAL_UART_MspInit+0x47a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b84:	f04f 0202 	mov.w	r2, #2
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b96:	f107 0320 	add.w	r3, r7, #32
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f006 f8e8 	bl	8007d70 <HAL_RCCEx_PeriphCLKConfig>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_UART_MspInit+0x34e>
      Error_Handler();
 8001ba6:	f7ff fb6b 	bl	8001280 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001baa:	4b4e      	ldr	r3, [pc, #312]	@ (8001ce4 <HAL_UART_MspInit+0x488>)
 8001bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bb0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ce4 <HAL_UART_MspInit+0x488>)
 8001bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce4 <HAL_UART_MspInit+0x488>)
 8001bbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc8:	4b46      	ldr	r3, [pc, #280]	@ (8001ce4 <HAL_UART_MspInit+0x488>)
 8001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bce:	4a45      	ldr	r2, [pc, #276]	@ (8001ce4 <HAL_UART_MspInit+0x488>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bd8:	4b42      	ldr	r3, [pc, #264]	@ (8001ce4 <HAL_UART_MspInit+0x488>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001be6:	230c      	movs	r3, #12
 8001be8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bfe:	2307      	movs	r3, #7
 8001c00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4837      	ldr	r0, [pc, #220]	@ (8001ce8 <HAL_UART_MspInit+0x48c>)
 8001c0c:	f004 f998 	bl	8005f40 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream4;
 8001c10:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <HAL_UART_MspInit+0x490>)
 8001c12:	4a37      	ldr	r2, [pc, #220]	@ (8001cf0 <HAL_UART_MspInit+0x494>)
 8001c14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001c16:	4b35      	ldr	r3, [pc, #212]	@ (8001cec <HAL_UART_MspInit+0x490>)
 8001c18:	222b      	movs	r2, #43	@ 0x2b
 8001c1a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c1c:	4b33      	ldr	r3, [pc, #204]	@ (8001cec <HAL_UART_MspInit+0x490>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c22:	4b32      	ldr	r3, [pc, #200]	@ (8001cec <HAL_UART_MspInit+0x490>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c28:	4b30      	ldr	r3, [pc, #192]	@ (8001cec <HAL_UART_MspInit+0x490>)
 8001c2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c30:	4b2e      	ldr	r3, [pc, #184]	@ (8001cec <HAL_UART_MspInit+0x490>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c36:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <HAL_UART_MspInit+0x490>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001c3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001cec <HAL_UART_MspInit+0x490>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c42:	4b2a      	ldr	r3, [pc, #168]	@ (8001cec <HAL_UART_MspInit+0x490>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c48:	4b28      	ldr	r3, [pc, #160]	@ (8001cec <HAL_UART_MspInit+0x490>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c4e:	4827      	ldr	r0, [pc, #156]	@ (8001cec <HAL_UART_MspInit+0x490>)
 8001c50:	f000 fc6e 	bl	8002530 <HAL_DMA_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_UART_MspInit+0x402>
      Error_Handler();
 8001c5a:	f7ff fb11 	bl	8001280 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a22      	ldr	r2, [pc, #136]	@ (8001cec <HAL_UART_MspInit+0x490>)
 8001c62:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001c66:	4a21      	ldr	r2, [pc, #132]	@ (8001cec <HAL_UART_MspInit+0x490>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream5;
 8001c6c:	4b21      	ldr	r3, [pc, #132]	@ (8001cf4 <HAL_UART_MspInit+0x498>)
 8001c6e:	4a22      	ldr	r2, [pc, #136]	@ (8001cf8 <HAL_UART_MspInit+0x49c>)
 8001c70:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001c72:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <HAL_UART_MspInit+0x498>)
 8001c74:	222c      	movs	r2, #44	@ 0x2c
 8001c76:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c78:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf4 <HAL_UART_MspInit+0x498>)
 8001c7a:	2240      	movs	r2, #64	@ 0x40
 8001c7c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <HAL_UART_MspInit+0x498>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c84:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <HAL_UART_MspInit+0x498>)
 8001c86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c8a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c8c:	4b19      	ldr	r3, [pc, #100]	@ (8001cf4 <HAL_UART_MspInit+0x498>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c92:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <HAL_UART_MspInit+0x498>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c98:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <HAL_UART_MspInit+0x498>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c9e:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <HAL_UART_MspInit+0x498>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ca4:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <HAL_UART_MspInit+0x498>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001caa:	4812      	ldr	r0, [pc, #72]	@ (8001cf4 <HAL_UART_MspInit+0x498>)
 8001cac:	f000 fc40 	bl	8002530 <HAL_DMA_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_UART_MspInit+0x45e>
      Error_Handler();
 8001cb6:	f7ff fae3 	bl	8001280 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <HAL_UART_MspInit+0x498>)
 8001cbe:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001cf4 <HAL_UART_MspInit+0x498>)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	2105      	movs	r1, #5
 8001cca:	2026      	movs	r0, #38	@ 0x26
 8001ccc:	f000 fc08 	bl	80024e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cd0:	2026      	movs	r0, #38	@ 0x26
 8001cd2:	f000 fc1f 	bl	8002514 <HAL_NVIC_EnableIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	37f8      	adds	r7, #248	@ 0xf8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40004400 	.word	0x40004400
 8001ce4:	58024400 	.word	0x58024400
 8001ce8:	58020000 	.word	0x58020000
 8001cec:	24000ab4 	.word	0x24000ab4
 8001cf0:	40020070 	.word	0x40020070
 8001cf4:	24000b2c 	.word	0x24000b2c
 8001cf8:	40020088 	.word	0x40020088

08001cfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b090      	sub	sp, #64	@ 0x40
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b0f      	cmp	r3, #15
 8001d08:	d827      	bhi.n	8001d5a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	2036      	movs	r0, #54	@ 0x36
 8001d10:	f000 fbe6 	bl	80024e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d14:	2036      	movs	r0, #54	@ 0x36
 8001d16:	f000 fbfd 	bl	8002514 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001d1a:	4a29      	ldr	r2, [pc, #164]	@ (8001dc0 <HAL_InitTick+0xc4>)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d20:	4b28      	ldr	r3, [pc, #160]	@ (8001dc4 <HAL_InitTick+0xc8>)
 8001d22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d26:	4a27      	ldr	r2, [pc, #156]	@ (8001dc4 <HAL_InitTick+0xc8>)
 8001d28:	f043 0310 	orr.w	r3, r3, #16
 8001d2c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d30:	4b24      	ldr	r3, [pc, #144]	@ (8001dc4 <HAL_InitTick+0xc8>)
 8001d32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d3e:	f107 0210 	add.w	r2, r7, #16
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f005 ffcf 	bl	8007cec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d50:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d106      	bne.n	8001d66 <HAL_InitTick+0x6a>
 8001d58:	e001      	b.n	8001d5e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e02b      	b.n	8001db6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d5e:	f005 ff99 	bl	8007c94 <HAL_RCC_GetPCLK1Freq>
 8001d62:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001d64:	e004      	b.n	8001d70 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d66:	f005 ff95 	bl	8007c94 <HAL_RCC_GetPCLK1Freq>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d72:	4a15      	ldr	r2, [pc, #84]	@ (8001dc8 <HAL_InitTick+0xcc>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	0c9b      	lsrs	r3, r3, #18
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d7e:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <HAL_InitTick+0xd0>)
 8001d80:	4a13      	ldr	r2, [pc, #76]	@ (8001dd0 <HAL_InitTick+0xd4>)
 8001d82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <HAL_InitTick+0xd0>)
 8001d86:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d8a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001dcc <HAL_InitTick+0xd0>)
 8001d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d90:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	@ (8001dcc <HAL_InitTick+0xd0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d98:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <HAL_InitTick+0xd0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d9e:	480b      	ldr	r0, [pc, #44]	@ (8001dcc <HAL_InitTick+0xd0>)
 8001da0:	f009 fb81 	bl	800b4a6 <HAL_TIM_Base_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d104      	bne.n	8001db4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001daa:	4808      	ldr	r0, [pc, #32]	@ (8001dcc <HAL_InitTick+0xd0>)
 8001dac:	f009 fbd2 	bl	800b554 <HAL_TIM_Base_Start_IT>
 8001db0:	4603      	mov	r3, r0
 8001db2:	e000      	b.n	8001db6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3740      	adds	r7, #64	@ 0x40
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	24000008 	.word	0x24000008
 8001dc4:	58024400 	.word	0x58024400
 8001dc8:	431bde83 	.word	0x431bde83
 8001dcc:	24000c24 	.word	0x24000c24
 8001dd0:	40001000 	.word	0x40001000

08001dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <NMI_Handler+0x4>

08001ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <HardFault_Handler+0x4>

08001de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <MemManage_Handler+0x4>

08001dec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <BusFault_Handler+0x4>

08001df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <UsageFault_Handler+0x4>

08001dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001e0e:	2004      	movs	r0, #4
 8001e10:	f004 fa91 	bl	8006336 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <DMA1_Stream0_IRQHandler+0x10>)
 8001e1e:	f001 feb1 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	240009c4 	.word	0x240009c4

08001e2c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001e30:	4802      	ldr	r0, [pc, #8]	@ (8001e3c <DMA1_Stream1_IRQHandler+0x10>)
 8001e32:	f001 fea7 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	24000a3c 	.word	0x24000a3c

08001e40 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <DMA1_Stream2_IRQHandler+0x10>)
 8001e46:	f001 fe9d 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	240008d4 	.word	0x240008d4

08001e54 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <DMA1_Stream3_IRQHandler+0x10>)
 8001e5a:	f001 fe93 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2400094c 	.word	0x2400094c

08001e68 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <DMA1_Stream4_IRQHandler+0x10>)
 8001e6e:	f001 fe89 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	24000ab4 	.word	0x24000ab4

08001e7c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e80:	4802      	ldr	r0, [pc, #8]	@ (8001e8c <DMA1_Stream5_IRQHandler+0x10>)
 8001e82:	f001 fe7f 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	24000b2c 	.word	0x24000b2c

08001e90 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001e94:	4802      	ldr	r0, [pc, #8]	@ (8001ea0 <DMA1_Stream6_IRQHandler+0x10>)
 8001e96:	f001 fe75 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2400049c 	.word	0x2400049c

08001ea4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001ea8:	4802      	ldr	r0, [pc, #8]	@ (8001eb4 <FDCAN1_IT0_IRQHandler+0x10>)
 8001eaa:	f003 fbc1 	bl	8005630 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	24000240 	.word	0x24000240

08001eb8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <FDCAN1_IT1_IRQHandler+0x10>)
 8001ebe:	f003 fbb7 	bl	8005630 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	24000240 	.word	0x24000240

08001ecc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ed0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001ed4:	f004 fa2f 	bl	8006336 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}

08001edc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <SPI1_IRQHandler+0x10>)
 8001ee2:	f008 feb3 	bl	800ac4c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	24000334 	.word	0x24000334

08001ef0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <USART1_IRQHandler+0x10>)
 8001ef6:	f00a fd9d 	bl	800ca34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2400073c 	.word	0x2400073c

08001f04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <USART2_IRQHandler+0x10>)
 8001f0a:	f00a fd93 	bl	800ca34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	24000808 	.word	0x24000808

08001f18 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f1c:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <DMA1_Stream7_IRQHandler+0x10>)
 8001f1e:	f001 fe31 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	24000514 	.word	0x24000514

08001f2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <TIM6_DAC_IRQHandler+0x10>)
 8001f32:	f009 fc2d 	bl	800b790 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	24000c24 	.word	0x24000c24

08001f40 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <DMA2_Stream0_IRQHandler+0x10>)
 8001f46:	f001 fe1d 	bl	8003b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	24000ba4 	.word	0x24000ba4

08001f54 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <UART8_IRQHandler+0x10>)
 8001f5a:	f00a fd6b 	bl	800ca34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	24000670 	.word	0x24000670

08001f68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return 1;
 8001f6c:	2301      	movs	r3, #1
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_kill>:

int _kill(int pid, int sig)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f82:	f01f fa3d 	bl	8021400 <__errno>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2216      	movs	r2, #22
 8001f8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_exit>:

void _exit (int status)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ffe7 	bl	8001f78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001faa:	bf00      	nop
 8001fac:	e7fd      	b.n	8001faa <_exit+0x12>

08001fae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e00a      	b.n	8001fd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fc0:	f3af 8000 	nop.w
 8001fc4:	4601      	mov	r1, r0
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	60ba      	str	r2, [r7, #8]
 8001fcc:	b2ca      	uxtb	r2, r1
 8001fce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	dbf0      	blt.n	8001fc0 <_read+0x12>
  }

  return len;
 8001fde:	687b      	ldr	r3, [r7, #4]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e009      	b.n	800200e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	60ba      	str	r2, [r7, #8]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	3301      	adds	r3, #1
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	429a      	cmp	r2, r3
 8002014:	dbf1      	blt.n	8001ffa <_write+0x12>
  }
  return len;
 8002016:	687b      	ldr	r3, [r7, #4]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <_close>:

int _close(int file)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002048:	605a      	str	r2, [r3, #4]
  return 0;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_isatty>:

int _isatty(int file)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002060:	2301      	movs	r3, #1
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002090:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <_sbrk+0x5c>)
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <_sbrk+0x60>)
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800209c:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <_sbrk+0x64>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <_sbrk+0x68>)
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020aa:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d207      	bcs.n	80020c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b8:	f01f f9a2 	bl	8021400 <__errno>
 80020bc:	4603      	mov	r3, r0
 80020be:	220c      	movs	r2, #12
 80020c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020c6:	e009      	b.n	80020dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ce:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	4a05      	ldr	r2, [pc, #20]	@ (80020ec <_sbrk+0x64>)
 80020d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	24080000 	.word	0x24080000
 80020e8:	00000400 	.word	0x00000400
 80020ec:	24000c70 	.word	0x24000c70
 80020f0:	2401e4b8 	.word	0x2401e4b8

080020f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020f8:	4b37      	ldr	r3, [pc, #220]	@ (80021d8 <SystemInit+0xe4>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fe:	4a36      	ldr	r2, [pc, #216]	@ (80021d8 <SystemInit+0xe4>)
 8002100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002108:	4b34      	ldr	r3, [pc, #208]	@ (80021dc <SystemInit+0xe8>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	2b06      	cmp	r3, #6
 8002112:	d807      	bhi.n	8002124 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002114:	4b31      	ldr	r3, [pc, #196]	@ (80021dc <SystemInit+0xe8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 030f 	bic.w	r3, r3, #15
 800211c:	4a2f      	ldr	r2, [pc, #188]	@ (80021dc <SystemInit+0xe8>)
 800211e:	f043 0307 	orr.w	r3, r3, #7
 8002122:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002124:	4b2e      	ldr	r3, [pc, #184]	@ (80021e0 <SystemInit+0xec>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a2d      	ldr	r2, [pc, #180]	@ (80021e0 <SystemInit+0xec>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002130:	4b2b      	ldr	r3, [pc, #172]	@ (80021e0 <SystemInit+0xec>)
 8002132:	2200      	movs	r2, #0
 8002134:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002136:	4b2a      	ldr	r3, [pc, #168]	@ (80021e0 <SystemInit+0xec>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4929      	ldr	r1, [pc, #164]	@ (80021e0 <SystemInit+0xec>)
 800213c:	4b29      	ldr	r3, [pc, #164]	@ (80021e4 <SystemInit+0xf0>)
 800213e:	4013      	ands	r3, r2
 8002140:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002142:	4b26      	ldr	r3, [pc, #152]	@ (80021dc <SystemInit+0xe8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800214e:	4b23      	ldr	r3, [pc, #140]	@ (80021dc <SystemInit+0xe8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 030f 	bic.w	r3, r3, #15
 8002156:	4a21      	ldr	r2, [pc, #132]	@ (80021dc <SystemInit+0xe8>)
 8002158:	f043 0307 	orr.w	r3, r3, #7
 800215c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800215e:	4b20      	ldr	r3, [pc, #128]	@ (80021e0 <SystemInit+0xec>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002164:	4b1e      	ldr	r3, [pc, #120]	@ (80021e0 <SystemInit+0xec>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800216a:	4b1d      	ldr	r3, [pc, #116]	@ (80021e0 <SystemInit+0xec>)
 800216c:	2200      	movs	r2, #0
 800216e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002170:	4b1b      	ldr	r3, [pc, #108]	@ (80021e0 <SystemInit+0xec>)
 8002172:	4a1d      	ldr	r2, [pc, #116]	@ (80021e8 <SystemInit+0xf4>)
 8002174:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002176:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <SystemInit+0xec>)
 8002178:	4a1c      	ldr	r2, [pc, #112]	@ (80021ec <SystemInit+0xf8>)
 800217a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800217c:	4b18      	ldr	r3, [pc, #96]	@ (80021e0 <SystemInit+0xec>)
 800217e:	4a1c      	ldr	r2, [pc, #112]	@ (80021f0 <SystemInit+0xfc>)
 8002180:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002182:	4b17      	ldr	r3, [pc, #92]	@ (80021e0 <SystemInit+0xec>)
 8002184:	2200      	movs	r2, #0
 8002186:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002188:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <SystemInit+0xec>)
 800218a:	4a19      	ldr	r2, [pc, #100]	@ (80021f0 <SystemInit+0xfc>)
 800218c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800218e:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <SystemInit+0xec>)
 8002190:	2200      	movs	r2, #0
 8002192:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002194:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <SystemInit+0xec>)
 8002196:	4a16      	ldr	r2, [pc, #88]	@ (80021f0 <SystemInit+0xfc>)
 8002198:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800219a:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <SystemInit+0xec>)
 800219c:	2200      	movs	r2, #0
 800219e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	@ (80021e0 <SystemInit+0xec>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0e      	ldr	r2, [pc, #56]	@ (80021e0 <SystemInit+0xec>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <SystemInit+0xec>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80021b2:	4b10      	ldr	r3, [pc, #64]	@ (80021f4 <SystemInit+0x100>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b10      	ldr	r3, [pc, #64]	@ (80021f8 <SystemInit+0x104>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80021be:	d202      	bcs.n	80021c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80021c0:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <SystemInit+0x108>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002200 <SystemInit+0x10c>)
 80021c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80021cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80021ce:	bf00      	nop
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00
 80021dc:	52002000 	.word	0x52002000
 80021e0:	58024400 	.word	0x58024400
 80021e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80021e8:	02020200 	.word	0x02020200
 80021ec:	01ff0000 	.word	0x01ff0000
 80021f0:	01010280 	.word	0x01010280
 80021f4:	5c001000 	.word	0x5c001000
 80021f8:	ffff0000 	.word	0xffff0000
 80021fc:	51008108 	.word	0x51008108
 8002200:	52004000 	.word	0x52004000

08002204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002204:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800223c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002208:	f7ff ff74 	bl	80020f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800220c:	480c      	ldr	r0, [pc, #48]	@ (8002240 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800220e:	490d      	ldr	r1, [pc, #52]	@ (8002244 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002210:	4a0d      	ldr	r2, [pc, #52]	@ (8002248 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002214:	e002      	b.n	800221c <LoopCopyDataInit>

08002216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221a:	3304      	adds	r3, #4

0800221c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800221c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800221e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002220:	d3f9      	bcc.n	8002216 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002222:	4a0a      	ldr	r2, [pc, #40]	@ (800224c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002224:	4c0a      	ldr	r4, [pc, #40]	@ (8002250 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002228:	e001      	b.n	800222e <LoopFillZerobss>

0800222a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800222c:	3204      	adds	r2, #4

0800222e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800222e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002230:	d3fb      	bcc.n	800222a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002232:	f01f f8eb 	bl	802140c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002236:	f7fe fa23 	bl	8000680 <main>
  bx  lr
 800223a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800223c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002240:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002244:	24000224 	.word	0x24000224
  ldr r2, =_sidata
 8002248:	08023cfc 	.word	0x08023cfc
  ldr r2, =_sbss
 800224c:	24000224 	.word	0x24000224
  ldr r4, =_ebss
 8002250:	2401e4b8 	.word	0x2401e4b8

08002254 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <ADC3_IRQHandler>
	...

08002258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800225e:	2003      	movs	r0, #3
 8002260:	f000 f933 	bl	80024ca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002264:	f005 fb6c 	bl	8007940 <HAL_RCC_GetSysClockFreq>
 8002268:	4602      	mov	r2, r0
 800226a:	4b15      	ldr	r3, [pc, #84]	@ (80022c0 <HAL_Init+0x68>)
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	0a1b      	lsrs	r3, r3, #8
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	4913      	ldr	r1, [pc, #76]	@ (80022c4 <HAL_Init+0x6c>)
 8002276:	5ccb      	ldrb	r3, [r1, r3]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
 8002280:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002282:	4b0f      	ldr	r3, [pc, #60]	@ (80022c0 <HAL_Init+0x68>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	4a0e      	ldr	r2, [pc, #56]	@ (80022c4 <HAL_Init+0x6c>)
 800228c:	5cd3      	ldrb	r3, [r2, r3]
 800228e:	f003 031f 	and.w	r3, r3, #31
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
 8002298:	4a0b      	ldr	r2, [pc, #44]	@ (80022c8 <HAL_Init+0x70>)
 800229a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800229c:	4a0b      	ldr	r2, [pc, #44]	@ (80022cc <HAL_Init+0x74>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022a2:	200f      	movs	r0, #15
 80022a4:	f7ff fd2a 	bl	8001cfc <HAL_InitTick>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e002      	b.n	80022b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80022b2:	f7fe ffeb 	bl	800128c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	58024400 	.word	0x58024400
 80022c4:	0802336c 	.word	0x0802336c
 80022c8:	24000004 	.word	0x24000004
 80022cc:	24000000 	.word	0x24000000

080022d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022d4:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <HAL_IncTick+0x20>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b06      	ldr	r3, [pc, #24]	@ (80022f4 <HAL_IncTick+0x24>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <HAL_IncTick+0x24>)
 80022e2:	6013      	str	r3, [r2, #0]
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	2400000c 	.word	0x2400000c
 80022f4:	24000c74 	.word	0x24000c74

080022f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return uwTick;
 80022fc:	4b03      	ldr	r3, [pc, #12]	@ (800230c <HAL_GetTick+0x14>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	24000c74 	.word	0x24000c74

08002310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002318:	f7ff ffee 	bl	80022f8 <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002328:	d005      	beq.n	8002336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800232a:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <HAL_Delay+0x44>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4413      	add	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002336:	bf00      	nop
 8002338:	f7ff ffde 	bl	80022f8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	429a      	cmp	r2, r3
 8002346:	d8f7      	bhi.n	8002338 <HAL_Delay+0x28>
  {
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	2400000c 	.word	0x2400000c

08002358 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800235c:	4b03      	ldr	r3, [pc, #12]	@ (800236c <HAL_GetREVID+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	0c1b      	lsrs	r3, r3, #16
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	5c001000 	.word	0x5c001000

08002370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <__NVIC_SetPriorityGrouping+0x40>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800238c:	4013      	ands	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <__NVIC_SetPriorityGrouping+0x44>)
 800239a:	4313      	orrs	r3, r2
 800239c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239e:	4a04      	ldr	r2, [pc, #16]	@ (80023b0 <__NVIC_SetPriorityGrouping+0x40>)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60d3      	str	r3, [r2, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00
 80023b4:	05fa0000 	.word	0x05fa0000

080023b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023bc:	4b04      	ldr	r3, [pc, #16]	@ (80023d0 <__NVIC_GetPriorityGrouping+0x18>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	f003 0307 	and.w	r3, r3, #7
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db0b      	blt.n	80023fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	f003 021f 	and.w	r2, r3, #31
 80023ec:	4907      	ldr	r1, [pc, #28]	@ (800240c <__NVIC_EnableIRQ+0x38>)
 80023ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2001      	movs	r0, #1
 80023f6:	fa00 f202 	lsl.w	r2, r0, r2
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	e000e100 	.word	0xe000e100

08002410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	6039      	str	r1, [r7, #0]
 800241a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800241c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002420:	2b00      	cmp	r3, #0
 8002422:	db0a      	blt.n	800243a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	490c      	ldr	r1, [pc, #48]	@ (800245c <__NVIC_SetPriority+0x4c>)
 800242a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800242e:	0112      	lsls	r2, r2, #4
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	440b      	add	r3, r1
 8002434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002438:	e00a      	b.n	8002450 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4908      	ldr	r1, [pc, #32]	@ (8002460 <__NVIC_SetPriority+0x50>)
 8002440:	88fb      	ldrh	r3, [r7, #6]
 8002442:	f003 030f 	and.w	r3, r3, #15
 8002446:	3b04      	subs	r3, #4
 8002448:	0112      	lsls	r2, r2, #4
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	440b      	add	r3, r1
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	e000e100 	.word	0xe000e100
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	@ 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f1c3 0307 	rsb	r3, r3, #7
 800247e:	2b04      	cmp	r3, #4
 8002480:	bf28      	it	cs
 8002482:	2304      	movcs	r3, #4
 8002484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3304      	adds	r3, #4
 800248a:	2b06      	cmp	r3, #6
 800248c:	d902      	bls.n	8002494 <NVIC_EncodePriority+0x30>
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3b03      	subs	r3, #3
 8002492:	e000      	b.n	8002496 <NVIC_EncodePriority+0x32>
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002498:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	401a      	ands	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	fa01 f303 	lsl.w	r3, r1, r3
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	4313      	orrs	r3, r2
         );
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3724      	adds	r7, #36	@ 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ff4c 	bl	8002370 <__NVIC_SetPriorityGrouping>
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024ee:	f7ff ff63 	bl	80023b8 <__NVIC_GetPriorityGrouping>
 80024f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	6978      	ldr	r0, [r7, #20]
 80024fa:	f7ff ffb3 	bl	8002464 <NVIC_EncodePriority>
 80024fe:	4602      	mov	r2, r0
 8002500:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ff82 	bl	8002410 <__NVIC_SetPriority>
}
 800250c:	bf00      	nop
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}

08002514 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800251e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff ff56 	bl	80023d4 <__NVIC_EnableIRQ>
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff fede 	bl	80022f8 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e316      	b.n	8002b76 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a66      	ldr	r2, [pc, #408]	@ (80026e8 <HAL_DMA_Init+0x1b8>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d04a      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a65      	ldr	r2, [pc, #404]	@ (80026ec <HAL_DMA_Init+0x1bc>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d045      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a63      	ldr	r2, [pc, #396]	@ (80026f0 <HAL_DMA_Init+0x1c0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d040      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a62      	ldr	r2, [pc, #392]	@ (80026f4 <HAL_DMA_Init+0x1c4>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d03b      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a60      	ldr	r2, [pc, #384]	@ (80026f8 <HAL_DMA_Init+0x1c8>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d036      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a5f      	ldr	r2, [pc, #380]	@ (80026fc <HAL_DMA_Init+0x1cc>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d031      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a5d      	ldr	r2, [pc, #372]	@ (8002700 <HAL_DMA_Init+0x1d0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d02c      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a5c      	ldr	r2, [pc, #368]	@ (8002704 <HAL_DMA_Init+0x1d4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d027      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a5a      	ldr	r2, [pc, #360]	@ (8002708 <HAL_DMA_Init+0x1d8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d022      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a59      	ldr	r2, [pc, #356]	@ (800270c <HAL_DMA_Init+0x1dc>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d01d      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a57      	ldr	r2, [pc, #348]	@ (8002710 <HAL_DMA_Init+0x1e0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d018      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a56      	ldr	r2, [pc, #344]	@ (8002714 <HAL_DMA_Init+0x1e4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d013      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a54      	ldr	r2, [pc, #336]	@ (8002718 <HAL_DMA_Init+0x1e8>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00e      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a53      	ldr	r2, [pc, #332]	@ (800271c <HAL_DMA_Init+0x1ec>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d009      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a51      	ldr	r2, [pc, #324]	@ (8002720 <HAL_DMA_Init+0x1f0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <HAL_DMA_Init+0xb8>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a50      	ldr	r2, [pc, #320]	@ (8002724 <HAL_DMA_Init+0x1f4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d101      	bne.n	80025ec <HAL_DMA_Init+0xbc>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <HAL_DMA_Init+0xbe>
 80025ec:	2300      	movs	r3, #0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 813b 	beq.w	800286a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a37      	ldr	r2, [pc, #220]	@ (80026e8 <HAL_DMA_Init+0x1b8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d04a      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a36      	ldr	r2, [pc, #216]	@ (80026ec <HAL_DMA_Init+0x1bc>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d045      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a34      	ldr	r2, [pc, #208]	@ (80026f0 <HAL_DMA_Init+0x1c0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d040      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a33      	ldr	r2, [pc, #204]	@ (80026f4 <HAL_DMA_Init+0x1c4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d03b      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a31      	ldr	r2, [pc, #196]	@ (80026f8 <HAL_DMA_Init+0x1c8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d036      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a30      	ldr	r2, [pc, #192]	@ (80026fc <HAL_DMA_Init+0x1cc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d031      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a2e      	ldr	r2, [pc, #184]	@ (8002700 <HAL_DMA_Init+0x1d0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d02c      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a2d      	ldr	r2, [pc, #180]	@ (8002704 <HAL_DMA_Init+0x1d4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d027      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a2b      	ldr	r2, [pc, #172]	@ (8002708 <HAL_DMA_Init+0x1d8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d022      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2a      	ldr	r2, [pc, #168]	@ (800270c <HAL_DMA_Init+0x1dc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d01d      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a28      	ldr	r2, [pc, #160]	@ (8002710 <HAL_DMA_Init+0x1e0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d018      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a27      	ldr	r2, [pc, #156]	@ (8002714 <HAL_DMA_Init+0x1e4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d013      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a25      	ldr	r2, [pc, #148]	@ (8002718 <HAL_DMA_Init+0x1e8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00e      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a24      	ldr	r2, [pc, #144]	@ (800271c <HAL_DMA_Init+0x1ec>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d009      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a22      	ldr	r2, [pc, #136]	@ (8002720 <HAL_DMA_Init+0x1f0>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d004      	beq.n	80026a4 <HAL_DMA_Init+0x174>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a21      	ldr	r2, [pc, #132]	@ (8002724 <HAL_DMA_Init+0x1f4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d108      	bne.n	80026b6 <HAL_DMA_Init+0x186>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e007      	b.n	80026c6 <HAL_DMA_Init+0x196>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80026c6:	e02f      	b.n	8002728 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026c8:	f7ff fe16 	bl	80022f8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b05      	cmp	r3, #5
 80026d4:	d928      	bls.n	8002728 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2220      	movs	r2, #32
 80026da:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2203      	movs	r2, #3
 80026e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e246      	b.n	8002b76 <HAL_DMA_Init+0x646>
 80026e8:	40020010 	.word	0x40020010
 80026ec:	40020028 	.word	0x40020028
 80026f0:	40020040 	.word	0x40020040
 80026f4:	40020058 	.word	0x40020058
 80026f8:	40020070 	.word	0x40020070
 80026fc:	40020088 	.word	0x40020088
 8002700:	400200a0 	.word	0x400200a0
 8002704:	400200b8 	.word	0x400200b8
 8002708:	40020410 	.word	0x40020410
 800270c:	40020428 	.word	0x40020428
 8002710:	40020440 	.word	0x40020440
 8002714:	40020458 	.word	0x40020458
 8002718:	40020470 	.word	0x40020470
 800271c:	40020488 	.word	0x40020488
 8002720:	400204a0 	.word	0x400204a0
 8002724:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1c8      	bne.n	80026c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	4b83      	ldr	r3, [pc, #524]	@ (8002950 <HAL_DMA_Init+0x420>)
 8002742:	4013      	ands	r3, r2
 8002744:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800274e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002766:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	2b04      	cmp	r3, #4
 800277a:	d107      	bne.n	800278c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002784:	4313      	orrs	r3, r2
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800278c:	4b71      	ldr	r3, [pc, #452]	@ (8002954 <HAL_DMA_Init+0x424>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b71      	ldr	r3, [pc, #452]	@ (8002958 <HAL_DMA_Init+0x428>)
 8002792:	4013      	ands	r3, r2
 8002794:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002798:	d328      	bcc.n	80027ec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b28      	cmp	r3, #40	@ 0x28
 80027a0:	d903      	bls.n	80027aa <HAL_DMA_Init+0x27a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80027a8:	d917      	bls.n	80027da <HAL_DMA_Init+0x2aa>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80027b0:	d903      	bls.n	80027ba <HAL_DMA_Init+0x28a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b42      	cmp	r3, #66	@ 0x42
 80027b8:	d90f      	bls.n	80027da <HAL_DMA_Init+0x2aa>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b46      	cmp	r3, #70	@ 0x46
 80027c0:	d903      	bls.n	80027ca <HAL_DMA_Init+0x29a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b48      	cmp	r3, #72	@ 0x48
 80027c8:	d907      	bls.n	80027da <HAL_DMA_Init+0x2aa>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80027d0:	d905      	bls.n	80027de <HAL_DMA_Init+0x2ae>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	2b52      	cmp	r3, #82	@ 0x52
 80027d8:	d801      	bhi.n	80027de <HAL_DMA_Init+0x2ae>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_DMA_Init+0x2b0>
 80027de:	2300      	movs	r3, #0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027ea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f023 0307 	bic.w	r3, r3, #7
 8002802:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	2b04      	cmp	r3, #4
 8002814:	d117      	bne.n	8002846 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281a:	697a      	ldr	r2, [r7, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00e      	beq.n	8002846 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f002 fb99 	bl	8004f60 <DMA_CheckFifoParam>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2240      	movs	r2, #64	@ 0x40
 8002838:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e197      	b.n	8002b76 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f002 fad4 	bl	8004dfc <DMA_CalcBaseAndBitshift>
 8002854:	4603      	mov	r3, r0
 8002856:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	223f      	movs	r2, #63	@ 0x3f
 8002862:	409a      	lsls	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	e0cd      	b.n	8002a06 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a3b      	ldr	r2, [pc, #236]	@ (800295c <HAL_DMA_Init+0x42c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d022      	beq.n	80028ba <HAL_DMA_Init+0x38a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a39      	ldr	r2, [pc, #228]	@ (8002960 <HAL_DMA_Init+0x430>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d01d      	beq.n	80028ba <HAL_DMA_Init+0x38a>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a38      	ldr	r2, [pc, #224]	@ (8002964 <HAL_DMA_Init+0x434>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d018      	beq.n	80028ba <HAL_DMA_Init+0x38a>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a36      	ldr	r2, [pc, #216]	@ (8002968 <HAL_DMA_Init+0x438>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <HAL_DMA_Init+0x38a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a35      	ldr	r2, [pc, #212]	@ (800296c <HAL_DMA_Init+0x43c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00e      	beq.n	80028ba <HAL_DMA_Init+0x38a>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a33      	ldr	r2, [pc, #204]	@ (8002970 <HAL_DMA_Init+0x440>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d009      	beq.n	80028ba <HAL_DMA_Init+0x38a>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a32      	ldr	r2, [pc, #200]	@ (8002974 <HAL_DMA_Init+0x444>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d004      	beq.n	80028ba <HAL_DMA_Init+0x38a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a30      	ldr	r2, [pc, #192]	@ (8002978 <HAL_DMA_Init+0x448>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d101      	bne.n	80028be <HAL_DMA_Init+0x38e>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_DMA_Init+0x390>
 80028be:	2300      	movs	r3, #0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 8097 	beq.w	80029f4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a24      	ldr	r2, [pc, #144]	@ (800295c <HAL_DMA_Init+0x42c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d021      	beq.n	8002914 <HAL_DMA_Init+0x3e4>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a22      	ldr	r2, [pc, #136]	@ (8002960 <HAL_DMA_Init+0x430>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d01c      	beq.n	8002914 <HAL_DMA_Init+0x3e4>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a21      	ldr	r2, [pc, #132]	@ (8002964 <HAL_DMA_Init+0x434>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d017      	beq.n	8002914 <HAL_DMA_Init+0x3e4>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002968 <HAL_DMA_Init+0x438>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d012      	beq.n	8002914 <HAL_DMA_Init+0x3e4>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a1e      	ldr	r2, [pc, #120]	@ (800296c <HAL_DMA_Init+0x43c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d00d      	beq.n	8002914 <HAL_DMA_Init+0x3e4>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002970 <HAL_DMA_Init+0x440>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d008      	beq.n	8002914 <HAL_DMA_Init+0x3e4>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1b      	ldr	r2, [pc, #108]	@ (8002974 <HAL_DMA_Init+0x444>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <HAL_DMA_Init+0x3e4>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a19      	ldr	r2, [pc, #100]	@ (8002978 <HAL_DMA_Init+0x448>)
 8002912:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	4b13      	ldr	r3, [pc, #76]	@ (800297c <HAL_DMA_Init+0x44c>)
 8002930:	4013      	ands	r3, r2
 8002932:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b40      	cmp	r3, #64	@ 0x40
 800293a:	d021      	beq.n	8002980 <HAL_DMA_Init+0x450>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b80      	cmp	r3, #128	@ 0x80
 8002942:	d102      	bne.n	800294a <HAL_DMA_Init+0x41a>
 8002944:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002948:	e01b      	b.n	8002982 <HAL_DMA_Init+0x452>
 800294a:	2300      	movs	r3, #0
 800294c:	e019      	b.n	8002982 <HAL_DMA_Init+0x452>
 800294e:	bf00      	nop
 8002950:	fe10803f 	.word	0xfe10803f
 8002954:	5c001000 	.word	0x5c001000
 8002958:	ffff0000 	.word	0xffff0000
 800295c:	58025408 	.word	0x58025408
 8002960:	5802541c 	.word	0x5802541c
 8002964:	58025430 	.word	0x58025430
 8002968:	58025444 	.word	0x58025444
 800296c:	58025458 	.word	0x58025458
 8002970:	5802546c 	.word	0x5802546c
 8002974:	58025480 	.word	0x58025480
 8002978:	58025494 	.word	0x58025494
 800297c:	fffe000f 	.word	0xfffe000f
 8002980:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68d2      	ldr	r2, [r2, #12]
 8002986:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002988:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002990:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002998:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80029a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80029a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80029b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	4b6e      	ldr	r3, [pc, #440]	@ (8002b80 <HAL_DMA_Init+0x650>)
 80029c8:	4413      	add	r3, r2
 80029ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002b84 <HAL_DMA_Init+0x654>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	009a      	lsls	r2, r3, #2
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f002 fa0f 	bl	8004dfc <DMA_CalcBaseAndBitshift>
 80029de:	4603      	mov	r3, r0
 80029e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2201      	movs	r2, #1
 80029ec:	409a      	lsls	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	e008      	b.n	8002a06 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2240      	movs	r2, #64	@ 0x40
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2203      	movs	r2, #3
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e0b7      	b.n	8002b76 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a5f      	ldr	r2, [pc, #380]	@ (8002b88 <HAL_DMA_Init+0x658>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d072      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a5d      	ldr	r2, [pc, #372]	@ (8002b8c <HAL_DMA_Init+0x65c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d06d      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a5c      	ldr	r2, [pc, #368]	@ (8002b90 <HAL_DMA_Init+0x660>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d068      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a5a      	ldr	r2, [pc, #360]	@ (8002b94 <HAL_DMA_Init+0x664>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d063      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a59      	ldr	r2, [pc, #356]	@ (8002b98 <HAL_DMA_Init+0x668>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d05e      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a57      	ldr	r2, [pc, #348]	@ (8002b9c <HAL_DMA_Init+0x66c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d059      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a56      	ldr	r2, [pc, #344]	@ (8002ba0 <HAL_DMA_Init+0x670>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d054      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a54      	ldr	r2, [pc, #336]	@ (8002ba4 <HAL_DMA_Init+0x674>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d04f      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a53      	ldr	r2, [pc, #332]	@ (8002ba8 <HAL_DMA_Init+0x678>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d04a      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a51      	ldr	r2, [pc, #324]	@ (8002bac <HAL_DMA_Init+0x67c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d045      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a50      	ldr	r2, [pc, #320]	@ (8002bb0 <HAL_DMA_Init+0x680>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d040      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a4e      	ldr	r2, [pc, #312]	@ (8002bb4 <HAL_DMA_Init+0x684>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d03b      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a4d      	ldr	r2, [pc, #308]	@ (8002bb8 <HAL_DMA_Init+0x688>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d036      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002bbc <HAL_DMA_Init+0x68c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d031      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a4a      	ldr	r2, [pc, #296]	@ (8002bc0 <HAL_DMA_Init+0x690>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d02c      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a48      	ldr	r2, [pc, #288]	@ (8002bc4 <HAL_DMA_Init+0x694>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d027      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a47      	ldr	r2, [pc, #284]	@ (8002bc8 <HAL_DMA_Init+0x698>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d022      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a45      	ldr	r2, [pc, #276]	@ (8002bcc <HAL_DMA_Init+0x69c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d01d      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a44      	ldr	r2, [pc, #272]	@ (8002bd0 <HAL_DMA_Init+0x6a0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d018      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a42      	ldr	r2, [pc, #264]	@ (8002bd4 <HAL_DMA_Init+0x6a4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a41      	ldr	r2, [pc, #260]	@ (8002bd8 <HAL_DMA_Init+0x6a8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d00e      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a3f      	ldr	r2, [pc, #252]	@ (8002bdc <HAL_DMA_Init+0x6ac>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d009      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a3e      	ldr	r2, [pc, #248]	@ (8002be0 <HAL_DMA_Init+0x6b0>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_DMA_Init+0x5c6>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a3c      	ldr	r2, [pc, #240]	@ (8002be4 <HAL_DMA_Init+0x6b4>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d101      	bne.n	8002afa <HAL_DMA_Init+0x5ca>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e000      	b.n	8002afc <HAL_DMA_Init+0x5cc>
 8002afa:	2300      	movs	r3, #0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d032      	beq.n	8002b66 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f002 faa9 	bl	8005058 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b80      	cmp	r3, #128	@ 0x80
 8002b0c:	d102      	bne.n	8002b14 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002b28:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d010      	beq.n	8002b54 <HAL_DMA_Init+0x624>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d80c      	bhi.n	8002b54 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f002 fb26 	bl	800518c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	e008      	b.n	8002b66 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	a7fdabf8 	.word	0xa7fdabf8
 8002b84:	cccccccd 	.word	0xcccccccd
 8002b88:	40020010 	.word	0x40020010
 8002b8c:	40020028 	.word	0x40020028
 8002b90:	40020040 	.word	0x40020040
 8002b94:	40020058 	.word	0x40020058
 8002b98:	40020070 	.word	0x40020070
 8002b9c:	40020088 	.word	0x40020088
 8002ba0:	400200a0 	.word	0x400200a0
 8002ba4:	400200b8 	.word	0x400200b8
 8002ba8:	40020410 	.word	0x40020410
 8002bac:	40020428 	.word	0x40020428
 8002bb0:	40020440 	.word	0x40020440
 8002bb4:	40020458 	.word	0x40020458
 8002bb8:	40020470 	.word	0x40020470
 8002bbc:	40020488 	.word	0x40020488
 8002bc0:	400204a0 	.word	0x400204a0
 8002bc4:	400204b8 	.word	0x400204b8
 8002bc8:	58025408 	.word	0x58025408
 8002bcc:	5802541c 	.word	0x5802541c
 8002bd0:	58025430 	.word	0x58025430
 8002bd4:	58025444 	.word	0x58025444
 8002bd8:	58025458 	.word	0x58025458
 8002bdc:	5802546c 	.word	0x5802546c
 8002be0:	58025480 	.word	0x58025480
 8002be4:	58025494 	.word	0x58025494

08002be8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e226      	b.n	8003052 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_DMA_Start_IT+0x2a>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e21f      	b.n	8003052 <HAL_DMA_Start_IT+0x46a>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	f040 820a 	bne.w	800303c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a68      	ldr	r2, [pc, #416]	@ (8002ddc <HAL_DMA_Start_IT+0x1f4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d04a      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a66      	ldr	r2, [pc, #408]	@ (8002de0 <HAL_DMA_Start_IT+0x1f8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d045      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a65      	ldr	r2, [pc, #404]	@ (8002de4 <HAL_DMA_Start_IT+0x1fc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d040      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a63      	ldr	r2, [pc, #396]	@ (8002de8 <HAL_DMA_Start_IT+0x200>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d03b      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a62      	ldr	r2, [pc, #392]	@ (8002dec <HAL_DMA_Start_IT+0x204>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d036      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a60      	ldr	r2, [pc, #384]	@ (8002df0 <HAL_DMA_Start_IT+0x208>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d031      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a5f      	ldr	r2, [pc, #380]	@ (8002df4 <HAL_DMA_Start_IT+0x20c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d02c      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a5d      	ldr	r2, [pc, #372]	@ (8002df8 <HAL_DMA_Start_IT+0x210>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d027      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002dfc <HAL_DMA_Start_IT+0x214>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d022      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a5a      	ldr	r2, [pc, #360]	@ (8002e00 <HAL_DMA_Start_IT+0x218>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01d      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a59      	ldr	r2, [pc, #356]	@ (8002e04 <HAL_DMA_Start_IT+0x21c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d018      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a57      	ldr	r2, [pc, #348]	@ (8002e08 <HAL_DMA_Start_IT+0x220>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a56      	ldr	r2, [pc, #344]	@ (8002e0c <HAL_DMA_Start_IT+0x224>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00e      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a54      	ldr	r2, [pc, #336]	@ (8002e10 <HAL_DMA_Start_IT+0x228>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d009      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a53      	ldr	r2, [pc, #332]	@ (8002e14 <HAL_DMA_Start_IT+0x22c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d004      	beq.n	8002cd6 <HAL_DMA_Start_IT+0xee>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a51      	ldr	r2, [pc, #324]	@ (8002e18 <HAL_DMA_Start_IT+0x230>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d108      	bne.n	8002ce8 <HAL_DMA_Start_IT+0x100>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e007      	b.n	8002cf8 <HAL_DMA_Start_IT+0x110>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f001 fed0 	bl	8004aa4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a34      	ldr	r2, [pc, #208]	@ (8002ddc <HAL_DMA_Start_IT+0x1f4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d04a      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a33      	ldr	r2, [pc, #204]	@ (8002de0 <HAL_DMA_Start_IT+0x1f8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d045      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a31      	ldr	r2, [pc, #196]	@ (8002de4 <HAL_DMA_Start_IT+0x1fc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d040      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a30      	ldr	r2, [pc, #192]	@ (8002de8 <HAL_DMA_Start_IT+0x200>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d03b      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2e      	ldr	r2, [pc, #184]	@ (8002dec <HAL_DMA_Start_IT+0x204>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d036      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002df0 <HAL_DMA_Start_IT+0x208>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d031      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2b      	ldr	r2, [pc, #172]	@ (8002df4 <HAL_DMA_Start_IT+0x20c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d02c      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002df8 <HAL_DMA_Start_IT+0x210>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d027      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a28      	ldr	r2, [pc, #160]	@ (8002dfc <HAL_DMA_Start_IT+0x214>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d022      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a27      	ldr	r2, [pc, #156]	@ (8002e00 <HAL_DMA_Start_IT+0x218>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d01d      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a25      	ldr	r2, [pc, #148]	@ (8002e04 <HAL_DMA_Start_IT+0x21c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d018      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a24      	ldr	r2, [pc, #144]	@ (8002e08 <HAL_DMA_Start_IT+0x220>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d013      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a22      	ldr	r2, [pc, #136]	@ (8002e0c <HAL_DMA_Start_IT+0x224>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00e      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a21      	ldr	r2, [pc, #132]	@ (8002e10 <HAL_DMA_Start_IT+0x228>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d009      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1f      	ldr	r2, [pc, #124]	@ (8002e14 <HAL_DMA_Start_IT+0x22c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d004      	beq.n	8002da4 <HAL_DMA_Start_IT+0x1bc>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002e18 <HAL_DMA_Start_IT+0x230>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d101      	bne.n	8002da8 <HAL_DMA_Start_IT+0x1c0>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_DMA_Start_IT+0x1c2>
 8002da8:	2300      	movs	r3, #0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d036      	beq.n	8002e1c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 021e 	bic.w	r2, r3, #30
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0216 	orr.w	r2, r2, #22
 8002dc0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d03e      	beq.n	8002e48 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f042 0208 	orr.w	r2, r2, #8
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e035      	b.n	8002e48 <HAL_DMA_Start_IT+0x260>
 8002ddc:	40020010 	.word	0x40020010
 8002de0:	40020028 	.word	0x40020028
 8002de4:	40020040 	.word	0x40020040
 8002de8:	40020058 	.word	0x40020058
 8002dec:	40020070 	.word	0x40020070
 8002df0:	40020088 	.word	0x40020088
 8002df4:	400200a0 	.word	0x400200a0
 8002df8:	400200b8 	.word	0x400200b8
 8002dfc:	40020410 	.word	0x40020410
 8002e00:	40020428 	.word	0x40020428
 8002e04:	40020440 	.word	0x40020440
 8002e08:	40020458 	.word	0x40020458
 8002e0c:	40020470 	.word	0x40020470
 8002e10:	40020488 	.word	0x40020488
 8002e14:	400204a0 	.word	0x400204a0
 8002e18:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 020e 	bic.w	r2, r3, #14
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 020a 	orr.w	r2, r2, #10
 8002e2e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0204 	orr.w	r2, r2, #4
 8002e46:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a83      	ldr	r2, [pc, #524]	@ (800305c <HAL_DMA_Start_IT+0x474>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d072      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a82      	ldr	r2, [pc, #520]	@ (8003060 <HAL_DMA_Start_IT+0x478>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d06d      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a80      	ldr	r2, [pc, #512]	@ (8003064 <HAL_DMA_Start_IT+0x47c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d068      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7f      	ldr	r2, [pc, #508]	@ (8003068 <HAL_DMA_Start_IT+0x480>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d063      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a7d      	ldr	r2, [pc, #500]	@ (800306c <HAL_DMA_Start_IT+0x484>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d05e      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a7c      	ldr	r2, [pc, #496]	@ (8003070 <HAL_DMA_Start_IT+0x488>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d059      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a7a      	ldr	r2, [pc, #488]	@ (8003074 <HAL_DMA_Start_IT+0x48c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d054      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a79      	ldr	r2, [pc, #484]	@ (8003078 <HAL_DMA_Start_IT+0x490>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d04f      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a77      	ldr	r2, [pc, #476]	@ (800307c <HAL_DMA_Start_IT+0x494>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d04a      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a76      	ldr	r2, [pc, #472]	@ (8003080 <HAL_DMA_Start_IT+0x498>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d045      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a74      	ldr	r2, [pc, #464]	@ (8003084 <HAL_DMA_Start_IT+0x49c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d040      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a73      	ldr	r2, [pc, #460]	@ (8003088 <HAL_DMA_Start_IT+0x4a0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d03b      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a71      	ldr	r2, [pc, #452]	@ (800308c <HAL_DMA_Start_IT+0x4a4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d036      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a70      	ldr	r2, [pc, #448]	@ (8003090 <HAL_DMA_Start_IT+0x4a8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d031      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a6e      	ldr	r2, [pc, #440]	@ (8003094 <HAL_DMA_Start_IT+0x4ac>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d02c      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a6d      	ldr	r2, [pc, #436]	@ (8003098 <HAL_DMA_Start_IT+0x4b0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d027      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a6b      	ldr	r2, [pc, #428]	@ (800309c <HAL_DMA_Start_IT+0x4b4>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d022      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a6a      	ldr	r2, [pc, #424]	@ (80030a0 <HAL_DMA_Start_IT+0x4b8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d01d      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a68      	ldr	r2, [pc, #416]	@ (80030a4 <HAL_DMA_Start_IT+0x4bc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d018      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a67      	ldr	r2, [pc, #412]	@ (80030a8 <HAL_DMA_Start_IT+0x4c0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d013      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a65      	ldr	r2, [pc, #404]	@ (80030ac <HAL_DMA_Start_IT+0x4c4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00e      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a64      	ldr	r2, [pc, #400]	@ (80030b0 <HAL_DMA_Start_IT+0x4c8>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d009      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a62      	ldr	r2, [pc, #392]	@ (80030b4 <HAL_DMA_Start_IT+0x4cc>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d004      	beq.n	8002f38 <HAL_DMA_Start_IT+0x350>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a61      	ldr	r2, [pc, #388]	@ (80030b8 <HAL_DMA_Start_IT+0x4d0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d101      	bne.n	8002f3c <HAL_DMA_Start_IT+0x354>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_DMA_Start_IT+0x356>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01a      	beq.n	8002f78 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f5e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d007      	beq.n	8002f78 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f76:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a37      	ldr	r2, [pc, #220]	@ (800305c <HAL_DMA_Start_IT+0x474>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d04a      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a36      	ldr	r2, [pc, #216]	@ (8003060 <HAL_DMA_Start_IT+0x478>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d045      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a34      	ldr	r2, [pc, #208]	@ (8003064 <HAL_DMA_Start_IT+0x47c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d040      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a33      	ldr	r2, [pc, #204]	@ (8003068 <HAL_DMA_Start_IT+0x480>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d03b      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a31      	ldr	r2, [pc, #196]	@ (800306c <HAL_DMA_Start_IT+0x484>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d036      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a30      	ldr	r2, [pc, #192]	@ (8003070 <HAL_DMA_Start_IT+0x488>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d031      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8003074 <HAL_DMA_Start_IT+0x48c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d02c      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2d      	ldr	r2, [pc, #180]	@ (8003078 <HAL_DMA_Start_IT+0x490>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d027      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a2b      	ldr	r2, [pc, #172]	@ (800307c <HAL_DMA_Start_IT+0x494>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d022      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a2a      	ldr	r2, [pc, #168]	@ (8003080 <HAL_DMA_Start_IT+0x498>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d01d      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a28      	ldr	r2, [pc, #160]	@ (8003084 <HAL_DMA_Start_IT+0x49c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d018      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a27      	ldr	r2, [pc, #156]	@ (8003088 <HAL_DMA_Start_IT+0x4a0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d013      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a25      	ldr	r2, [pc, #148]	@ (800308c <HAL_DMA_Start_IT+0x4a4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00e      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a24      	ldr	r2, [pc, #144]	@ (8003090 <HAL_DMA_Start_IT+0x4a8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d009      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a22      	ldr	r2, [pc, #136]	@ (8003094 <HAL_DMA_Start_IT+0x4ac>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d004      	beq.n	8003018 <HAL_DMA_Start_IT+0x430>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a21      	ldr	r2, [pc, #132]	@ (8003098 <HAL_DMA_Start_IT+0x4b0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d108      	bne.n	800302a <HAL_DMA_Start_IT+0x442>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	e012      	b.n	8003050 <HAL_DMA_Start_IT+0x468>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	e009      	b.n	8003050 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003042:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003050:	7dfb      	ldrb	r3, [r7, #23]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40020010 	.word	0x40020010
 8003060:	40020028 	.word	0x40020028
 8003064:	40020040 	.word	0x40020040
 8003068:	40020058 	.word	0x40020058
 800306c:	40020070 	.word	0x40020070
 8003070:	40020088 	.word	0x40020088
 8003074:	400200a0 	.word	0x400200a0
 8003078:	400200b8 	.word	0x400200b8
 800307c:	40020410 	.word	0x40020410
 8003080:	40020428 	.word	0x40020428
 8003084:	40020440 	.word	0x40020440
 8003088:	40020458 	.word	0x40020458
 800308c:	40020470 	.word	0x40020470
 8003090:	40020488 	.word	0x40020488
 8003094:	400204a0 	.word	0x400204a0
 8003098:	400204b8 	.word	0x400204b8
 800309c:	58025408 	.word	0x58025408
 80030a0:	5802541c 	.word	0x5802541c
 80030a4:	58025430 	.word	0x58025430
 80030a8:	58025444 	.word	0x58025444
 80030ac:	58025458 	.word	0x58025458
 80030b0:	5802546c 	.word	0x5802546c
 80030b4:	58025480 	.word	0x58025480
 80030b8:	58025494 	.word	0x58025494

080030bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7ff f918 	bl	80022f8 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e2dc      	b.n	800368e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d008      	beq.n	80030f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2280      	movs	r2, #128	@ 0x80
 80030e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e2cd      	b.n	800368e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a76      	ldr	r2, [pc, #472]	@ (80032d0 <HAL_DMA_Abort+0x214>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d04a      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a74      	ldr	r2, [pc, #464]	@ (80032d4 <HAL_DMA_Abort+0x218>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d045      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a73      	ldr	r2, [pc, #460]	@ (80032d8 <HAL_DMA_Abort+0x21c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d040      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a71      	ldr	r2, [pc, #452]	@ (80032dc <HAL_DMA_Abort+0x220>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d03b      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a70      	ldr	r2, [pc, #448]	@ (80032e0 <HAL_DMA_Abort+0x224>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d036      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a6e      	ldr	r2, [pc, #440]	@ (80032e4 <HAL_DMA_Abort+0x228>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d031      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6d      	ldr	r2, [pc, #436]	@ (80032e8 <HAL_DMA_Abort+0x22c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d02c      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a6b      	ldr	r2, [pc, #428]	@ (80032ec <HAL_DMA_Abort+0x230>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d027      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a6a      	ldr	r2, [pc, #424]	@ (80032f0 <HAL_DMA_Abort+0x234>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d022      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a68      	ldr	r2, [pc, #416]	@ (80032f4 <HAL_DMA_Abort+0x238>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01d      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a67      	ldr	r2, [pc, #412]	@ (80032f8 <HAL_DMA_Abort+0x23c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d018      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a65      	ldr	r2, [pc, #404]	@ (80032fc <HAL_DMA_Abort+0x240>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a64      	ldr	r2, [pc, #400]	@ (8003300 <HAL_DMA_Abort+0x244>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d00e      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a62      	ldr	r2, [pc, #392]	@ (8003304 <HAL_DMA_Abort+0x248>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d009      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a61      	ldr	r2, [pc, #388]	@ (8003308 <HAL_DMA_Abort+0x24c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d004      	beq.n	8003192 <HAL_DMA_Abort+0xd6>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a5f      	ldr	r2, [pc, #380]	@ (800330c <HAL_DMA_Abort+0x250>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d101      	bne.n	8003196 <HAL_DMA_Abort+0xda>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_DMA_Abort+0xdc>
 8003196:	2300      	movs	r3, #0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d013      	beq.n	80031c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 021e 	bic.w	r2, r2, #30
 80031aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695a      	ldr	r2, [r3, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	e00a      	b.n	80031da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 020e 	bic.w	r2, r2, #14
 80031d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a3c      	ldr	r2, [pc, #240]	@ (80032d0 <HAL_DMA_Abort+0x214>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d072      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a3a      	ldr	r2, [pc, #232]	@ (80032d4 <HAL_DMA_Abort+0x218>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d06d      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a39      	ldr	r2, [pc, #228]	@ (80032d8 <HAL_DMA_Abort+0x21c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d068      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a37      	ldr	r2, [pc, #220]	@ (80032dc <HAL_DMA_Abort+0x220>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d063      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a36      	ldr	r2, [pc, #216]	@ (80032e0 <HAL_DMA_Abort+0x224>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d05e      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a34      	ldr	r2, [pc, #208]	@ (80032e4 <HAL_DMA_Abort+0x228>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d059      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a33      	ldr	r2, [pc, #204]	@ (80032e8 <HAL_DMA_Abort+0x22c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d054      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a31      	ldr	r2, [pc, #196]	@ (80032ec <HAL_DMA_Abort+0x230>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d04f      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a30      	ldr	r2, [pc, #192]	@ (80032f0 <HAL_DMA_Abort+0x234>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d04a      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a2e      	ldr	r2, [pc, #184]	@ (80032f4 <HAL_DMA_Abort+0x238>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d045      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a2d      	ldr	r2, [pc, #180]	@ (80032f8 <HAL_DMA_Abort+0x23c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d040      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a2b      	ldr	r2, [pc, #172]	@ (80032fc <HAL_DMA_Abort+0x240>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d03b      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a2a      	ldr	r2, [pc, #168]	@ (8003300 <HAL_DMA_Abort+0x244>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d036      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a28      	ldr	r2, [pc, #160]	@ (8003304 <HAL_DMA_Abort+0x248>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d031      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a27      	ldr	r2, [pc, #156]	@ (8003308 <HAL_DMA_Abort+0x24c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d02c      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a25      	ldr	r2, [pc, #148]	@ (800330c <HAL_DMA_Abort+0x250>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d027      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a24      	ldr	r2, [pc, #144]	@ (8003310 <HAL_DMA_Abort+0x254>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d022      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a22      	ldr	r2, [pc, #136]	@ (8003314 <HAL_DMA_Abort+0x258>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d01d      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a21      	ldr	r2, [pc, #132]	@ (8003318 <HAL_DMA_Abort+0x25c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d018      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1f      	ldr	r2, [pc, #124]	@ (800331c <HAL_DMA_Abort+0x260>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003320 <HAL_DMA_Abort+0x264>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003324 <HAL_DMA_Abort+0x268>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003328 <HAL_DMA_Abort+0x26c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_DMA_Abort+0x20e>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a19      	ldr	r2, [pc, #100]	@ (800332c <HAL_DMA_Abort+0x270>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d132      	bne.n	8003330 <HAL_DMA_Abort+0x274>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e031      	b.n	8003332 <HAL_DMA_Abort+0x276>
 80032ce:	bf00      	nop
 80032d0:	40020010 	.word	0x40020010
 80032d4:	40020028 	.word	0x40020028
 80032d8:	40020040 	.word	0x40020040
 80032dc:	40020058 	.word	0x40020058
 80032e0:	40020070 	.word	0x40020070
 80032e4:	40020088 	.word	0x40020088
 80032e8:	400200a0 	.word	0x400200a0
 80032ec:	400200b8 	.word	0x400200b8
 80032f0:	40020410 	.word	0x40020410
 80032f4:	40020428 	.word	0x40020428
 80032f8:	40020440 	.word	0x40020440
 80032fc:	40020458 	.word	0x40020458
 8003300:	40020470 	.word	0x40020470
 8003304:	40020488 	.word	0x40020488
 8003308:	400204a0 	.word	0x400204a0
 800330c:	400204b8 	.word	0x400204b8
 8003310:	58025408 	.word	0x58025408
 8003314:	5802541c 	.word	0x5802541c
 8003318:	58025430 	.word	0x58025430
 800331c:	58025444 	.word	0x58025444
 8003320:	58025458 	.word	0x58025458
 8003324:	5802546c 	.word	0x5802546c
 8003328:	58025480 	.word	0x58025480
 800332c:	58025494 	.word	0x58025494
 8003330:	2300      	movs	r3, #0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003344:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a6d      	ldr	r2, [pc, #436]	@ (8003500 <HAL_DMA_Abort+0x444>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d04a      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a6b      	ldr	r2, [pc, #428]	@ (8003504 <HAL_DMA_Abort+0x448>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d045      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6a      	ldr	r2, [pc, #424]	@ (8003508 <HAL_DMA_Abort+0x44c>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d040      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a68      	ldr	r2, [pc, #416]	@ (800350c <HAL_DMA_Abort+0x450>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d03b      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a67      	ldr	r2, [pc, #412]	@ (8003510 <HAL_DMA_Abort+0x454>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d036      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a65      	ldr	r2, [pc, #404]	@ (8003514 <HAL_DMA_Abort+0x458>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d031      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a64      	ldr	r2, [pc, #400]	@ (8003518 <HAL_DMA_Abort+0x45c>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d02c      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a62      	ldr	r2, [pc, #392]	@ (800351c <HAL_DMA_Abort+0x460>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d027      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a61      	ldr	r2, [pc, #388]	@ (8003520 <HAL_DMA_Abort+0x464>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d022      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a5f      	ldr	r2, [pc, #380]	@ (8003524 <HAL_DMA_Abort+0x468>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01d      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003528 <HAL_DMA_Abort+0x46c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d018      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a5c      	ldr	r2, [pc, #368]	@ (800352c <HAL_DMA_Abort+0x470>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d013      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003530 <HAL_DMA_Abort+0x474>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00e      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a59      	ldr	r2, [pc, #356]	@ (8003534 <HAL_DMA_Abort+0x478>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d009      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a58      	ldr	r2, [pc, #352]	@ (8003538 <HAL_DMA_Abort+0x47c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d004      	beq.n	80033e6 <HAL_DMA_Abort+0x32a>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a56      	ldr	r2, [pc, #344]	@ (800353c <HAL_DMA_Abort+0x480>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d108      	bne.n	80033f8 <HAL_DMA_Abort+0x33c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0201 	bic.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	e007      	b.n	8003408 <HAL_DMA_Abort+0x34c>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0201 	bic.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003408:	e013      	b.n	8003432 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800340a:	f7fe ff75 	bl	80022f8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b05      	cmp	r3, #5
 8003416:	d90c      	bls.n	8003432 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2203      	movs	r2, #3
 8003422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e12d      	b.n	800368e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1e5      	bne.n	800340a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2f      	ldr	r2, [pc, #188]	@ (8003500 <HAL_DMA_Abort+0x444>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d04a      	beq.n	80034de <HAL_DMA_Abort+0x422>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2d      	ldr	r2, [pc, #180]	@ (8003504 <HAL_DMA_Abort+0x448>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d045      	beq.n	80034de <HAL_DMA_Abort+0x422>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a2c      	ldr	r2, [pc, #176]	@ (8003508 <HAL_DMA_Abort+0x44c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d040      	beq.n	80034de <HAL_DMA_Abort+0x422>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a2a      	ldr	r2, [pc, #168]	@ (800350c <HAL_DMA_Abort+0x450>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d03b      	beq.n	80034de <HAL_DMA_Abort+0x422>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a29      	ldr	r2, [pc, #164]	@ (8003510 <HAL_DMA_Abort+0x454>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d036      	beq.n	80034de <HAL_DMA_Abort+0x422>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a27      	ldr	r2, [pc, #156]	@ (8003514 <HAL_DMA_Abort+0x458>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d031      	beq.n	80034de <HAL_DMA_Abort+0x422>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a26      	ldr	r2, [pc, #152]	@ (8003518 <HAL_DMA_Abort+0x45c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d02c      	beq.n	80034de <HAL_DMA_Abort+0x422>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a24      	ldr	r2, [pc, #144]	@ (800351c <HAL_DMA_Abort+0x460>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d027      	beq.n	80034de <HAL_DMA_Abort+0x422>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a23      	ldr	r2, [pc, #140]	@ (8003520 <HAL_DMA_Abort+0x464>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d022      	beq.n	80034de <HAL_DMA_Abort+0x422>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a21      	ldr	r2, [pc, #132]	@ (8003524 <HAL_DMA_Abort+0x468>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01d      	beq.n	80034de <HAL_DMA_Abort+0x422>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a20      	ldr	r2, [pc, #128]	@ (8003528 <HAL_DMA_Abort+0x46c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d018      	beq.n	80034de <HAL_DMA_Abort+0x422>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1e      	ldr	r2, [pc, #120]	@ (800352c <HAL_DMA_Abort+0x470>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_DMA_Abort+0x422>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003530 <HAL_DMA_Abort+0x474>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_DMA_Abort+0x422>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003534 <HAL_DMA_Abort+0x478>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_DMA_Abort+0x422>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003538 <HAL_DMA_Abort+0x47c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_DMA_Abort+0x422>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a18      	ldr	r2, [pc, #96]	@ (800353c <HAL_DMA_Abort+0x480>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_DMA_Abort+0x426>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_DMA_Abort+0x428>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d02b      	beq.n	8003540 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	223f      	movs	r2, #63	@ 0x3f
 80034f8:	409a      	lsls	r2, r3
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	e02a      	b.n	8003556 <HAL_DMA_Abort+0x49a>
 8003500:	40020010 	.word	0x40020010
 8003504:	40020028 	.word	0x40020028
 8003508:	40020040 	.word	0x40020040
 800350c:	40020058 	.word	0x40020058
 8003510:	40020070 	.word	0x40020070
 8003514:	40020088 	.word	0x40020088
 8003518:	400200a0 	.word	0x400200a0
 800351c:	400200b8 	.word	0x400200b8
 8003520:	40020410 	.word	0x40020410
 8003524:	40020428 	.word	0x40020428
 8003528:	40020440 	.word	0x40020440
 800352c:	40020458 	.word	0x40020458
 8003530:	40020470 	.word	0x40020470
 8003534:	40020488 	.word	0x40020488
 8003538:	400204a0 	.word	0x400204a0
 800353c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003544:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	2201      	movs	r2, #1
 8003550:	409a      	lsls	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a4f      	ldr	r2, [pc, #316]	@ (8003698 <HAL_DMA_Abort+0x5dc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d072      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a4d      	ldr	r2, [pc, #308]	@ (800369c <HAL_DMA_Abort+0x5e0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d06d      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a4c      	ldr	r2, [pc, #304]	@ (80036a0 <HAL_DMA_Abort+0x5e4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d068      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a4a      	ldr	r2, [pc, #296]	@ (80036a4 <HAL_DMA_Abort+0x5e8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d063      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a49      	ldr	r2, [pc, #292]	@ (80036a8 <HAL_DMA_Abort+0x5ec>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d05e      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a47      	ldr	r2, [pc, #284]	@ (80036ac <HAL_DMA_Abort+0x5f0>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d059      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a46      	ldr	r2, [pc, #280]	@ (80036b0 <HAL_DMA_Abort+0x5f4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d054      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a44      	ldr	r2, [pc, #272]	@ (80036b4 <HAL_DMA_Abort+0x5f8>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d04f      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a43      	ldr	r2, [pc, #268]	@ (80036b8 <HAL_DMA_Abort+0x5fc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d04a      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a41      	ldr	r2, [pc, #260]	@ (80036bc <HAL_DMA_Abort+0x600>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d045      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a40      	ldr	r2, [pc, #256]	@ (80036c0 <HAL_DMA_Abort+0x604>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d040      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a3e      	ldr	r2, [pc, #248]	@ (80036c4 <HAL_DMA_Abort+0x608>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d03b      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a3d      	ldr	r2, [pc, #244]	@ (80036c8 <HAL_DMA_Abort+0x60c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d036      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a3b      	ldr	r2, [pc, #236]	@ (80036cc <HAL_DMA_Abort+0x610>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d031      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a3a      	ldr	r2, [pc, #232]	@ (80036d0 <HAL_DMA_Abort+0x614>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d02c      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a38      	ldr	r2, [pc, #224]	@ (80036d4 <HAL_DMA_Abort+0x618>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d027      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a37      	ldr	r2, [pc, #220]	@ (80036d8 <HAL_DMA_Abort+0x61c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d022      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a35      	ldr	r2, [pc, #212]	@ (80036dc <HAL_DMA_Abort+0x620>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01d      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a34      	ldr	r2, [pc, #208]	@ (80036e0 <HAL_DMA_Abort+0x624>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d018      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a32      	ldr	r2, [pc, #200]	@ (80036e4 <HAL_DMA_Abort+0x628>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a31      	ldr	r2, [pc, #196]	@ (80036e8 <HAL_DMA_Abort+0x62c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00e      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a2f      	ldr	r2, [pc, #188]	@ (80036ec <HAL_DMA_Abort+0x630>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d009      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a2e      	ldr	r2, [pc, #184]	@ (80036f0 <HAL_DMA_Abort+0x634>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d004      	beq.n	8003646 <HAL_DMA_Abort+0x58a>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a2c      	ldr	r2, [pc, #176]	@ (80036f4 <HAL_DMA_Abort+0x638>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_DMA_Abort+0x58e>
 8003646:	2301      	movs	r3, #1
 8003648:	e000      	b.n	800364c <HAL_DMA_Abort+0x590>
 800364a:	2300      	movs	r3, #0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d015      	beq.n	800367c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003658:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00c      	beq.n	800367c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800366c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003670:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800367a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3718      	adds	r7, #24
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40020010 	.word	0x40020010
 800369c:	40020028 	.word	0x40020028
 80036a0:	40020040 	.word	0x40020040
 80036a4:	40020058 	.word	0x40020058
 80036a8:	40020070 	.word	0x40020070
 80036ac:	40020088 	.word	0x40020088
 80036b0:	400200a0 	.word	0x400200a0
 80036b4:	400200b8 	.word	0x400200b8
 80036b8:	40020410 	.word	0x40020410
 80036bc:	40020428 	.word	0x40020428
 80036c0:	40020440 	.word	0x40020440
 80036c4:	40020458 	.word	0x40020458
 80036c8:	40020470 	.word	0x40020470
 80036cc:	40020488 	.word	0x40020488
 80036d0:	400204a0 	.word	0x400204a0
 80036d4:	400204b8 	.word	0x400204b8
 80036d8:	58025408 	.word	0x58025408
 80036dc:	5802541c 	.word	0x5802541c
 80036e0:	58025430 	.word	0x58025430
 80036e4:	58025444 	.word	0x58025444
 80036e8:	58025458 	.word	0x58025458
 80036ec:	5802546c 	.word	0x5802546c
 80036f0:	58025480 	.word	0x58025480
 80036f4:	58025494 	.word	0x58025494

080036f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e237      	b.n	8003b7a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d004      	beq.n	8003720 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2280      	movs	r2, #128	@ 0x80
 800371a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e22c      	b.n	8003b7a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a5c      	ldr	r2, [pc, #368]	@ (8003898 <HAL_DMA_Abort_IT+0x1a0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d04a      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a5b      	ldr	r2, [pc, #364]	@ (800389c <HAL_DMA_Abort_IT+0x1a4>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d045      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a59      	ldr	r2, [pc, #356]	@ (80038a0 <HAL_DMA_Abort_IT+0x1a8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d040      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a58      	ldr	r2, [pc, #352]	@ (80038a4 <HAL_DMA_Abort_IT+0x1ac>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d03b      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a56      	ldr	r2, [pc, #344]	@ (80038a8 <HAL_DMA_Abort_IT+0x1b0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d036      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a55      	ldr	r2, [pc, #340]	@ (80038ac <HAL_DMA_Abort_IT+0x1b4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d031      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a53      	ldr	r2, [pc, #332]	@ (80038b0 <HAL_DMA_Abort_IT+0x1b8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d02c      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a52      	ldr	r2, [pc, #328]	@ (80038b4 <HAL_DMA_Abort_IT+0x1bc>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d027      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a50      	ldr	r2, [pc, #320]	@ (80038b8 <HAL_DMA_Abort_IT+0x1c0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d022      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a4f      	ldr	r2, [pc, #316]	@ (80038bc <HAL_DMA_Abort_IT+0x1c4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d01d      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a4d      	ldr	r2, [pc, #308]	@ (80038c0 <HAL_DMA_Abort_IT+0x1c8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d018      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a4c      	ldr	r2, [pc, #304]	@ (80038c4 <HAL_DMA_Abort_IT+0x1cc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d013      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a4a      	ldr	r2, [pc, #296]	@ (80038c8 <HAL_DMA_Abort_IT+0x1d0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00e      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a49      	ldr	r2, [pc, #292]	@ (80038cc <HAL_DMA_Abort_IT+0x1d4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d009      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a47      	ldr	r2, [pc, #284]	@ (80038d0 <HAL_DMA_Abort_IT+0x1d8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d004      	beq.n	80037c0 <HAL_DMA_Abort_IT+0xc8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a46      	ldr	r2, [pc, #280]	@ (80038d4 <HAL_DMA_Abort_IT+0x1dc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d101      	bne.n	80037c4 <HAL_DMA_Abort_IT+0xcc>
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_DMA_Abort_IT+0xce>
 80037c4:	2300      	movs	r3, #0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 8086 	beq.w	80038d8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2204      	movs	r2, #4
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003898 <HAL_DMA_Abort_IT+0x1a0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d04a      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2e      	ldr	r2, [pc, #184]	@ (800389c <HAL_DMA_Abort_IT+0x1a4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d045      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2c      	ldr	r2, [pc, #176]	@ (80038a0 <HAL_DMA_Abort_IT+0x1a8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d040      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2b      	ldr	r2, [pc, #172]	@ (80038a4 <HAL_DMA_Abort_IT+0x1ac>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d03b      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a29      	ldr	r2, [pc, #164]	@ (80038a8 <HAL_DMA_Abort_IT+0x1b0>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d036      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a28      	ldr	r2, [pc, #160]	@ (80038ac <HAL_DMA_Abort_IT+0x1b4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d031      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a26      	ldr	r2, [pc, #152]	@ (80038b0 <HAL_DMA_Abort_IT+0x1b8>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d02c      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a25      	ldr	r2, [pc, #148]	@ (80038b4 <HAL_DMA_Abort_IT+0x1bc>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d027      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a23      	ldr	r2, [pc, #140]	@ (80038b8 <HAL_DMA_Abort_IT+0x1c0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d022      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a22      	ldr	r2, [pc, #136]	@ (80038bc <HAL_DMA_Abort_IT+0x1c4>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d01d      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a20      	ldr	r2, [pc, #128]	@ (80038c0 <HAL_DMA_Abort_IT+0x1c8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d018      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1f      	ldr	r2, [pc, #124]	@ (80038c4 <HAL_DMA_Abort_IT+0x1cc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1d      	ldr	r2, [pc, #116]	@ (80038c8 <HAL_DMA_Abort_IT+0x1d0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00e      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a1c      	ldr	r2, [pc, #112]	@ (80038cc <HAL_DMA_Abort_IT+0x1d4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d009      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1a      	ldr	r2, [pc, #104]	@ (80038d0 <HAL_DMA_Abort_IT+0x1d8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_DMA_Abort_IT+0x17c>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a19      	ldr	r2, [pc, #100]	@ (80038d4 <HAL_DMA_Abort_IT+0x1dc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d108      	bne.n	8003886 <HAL_DMA_Abort_IT+0x18e>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0201 	bic.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	e178      	b.n	8003b78 <HAL_DMA_Abort_IT+0x480>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	e16f      	b.n	8003b78 <HAL_DMA_Abort_IT+0x480>
 8003898:	40020010 	.word	0x40020010
 800389c:	40020028 	.word	0x40020028
 80038a0:	40020040 	.word	0x40020040
 80038a4:	40020058 	.word	0x40020058
 80038a8:	40020070 	.word	0x40020070
 80038ac:	40020088 	.word	0x40020088
 80038b0:	400200a0 	.word	0x400200a0
 80038b4:	400200b8 	.word	0x400200b8
 80038b8:	40020410 	.word	0x40020410
 80038bc:	40020428 	.word	0x40020428
 80038c0:	40020440 	.word	0x40020440
 80038c4:	40020458 	.word	0x40020458
 80038c8:	40020470 	.word	0x40020470
 80038cc:	40020488 	.word	0x40020488
 80038d0:	400204a0 	.word	0x400204a0
 80038d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 020e 	bic.w	r2, r2, #14
 80038e6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a6c      	ldr	r2, [pc, #432]	@ (8003aa0 <HAL_DMA_Abort_IT+0x3a8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d04a      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6b      	ldr	r2, [pc, #428]	@ (8003aa4 <HAL_DMA_Abort_IT+0x3ac>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d045      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a69      	ldr	r2, [pc, #420]	@ (8003aa8 <HAL_DMA_Abort_IT+0x3b0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d040      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a68      	ldr	r2, [pc, #416]	@ (8003aac <HAL_DMA_Abort_IT+0x3b4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d03b      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a66      	ldr	r2, [pc, #408]	@ (8003ab0 <HAL_DMA_Abort_IT+0x3b8>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d036      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a65      	ldr	r2, [pc, #404]	@ (8003ab4 <HAL_DMA_Abort_IT+0x3bc>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d031      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a63      	ldr	r2, [pc, #396]	@ (8003ab8 <HAL_DMA_Abort_IT+0x3c0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d02c      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a62      	ldr	r2, [pc, #392]	@ (8003abc <HAL_DMA_Abort_IT+0x3c4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d027      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a60      	ldr	r2, [pc, #384]	@ (8003ac0 <HAL_DMA_Abort_IT+0x3c8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d022      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a5f      	ldr	r2, [pc, #380]	@ (8003ac4 <HAL_DMA_Abort_IT+0x3cc>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d01d      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a5d      	ldr	r2, [pc, #372]	@ (8003ac8 <HAL_DMA_Abort_IT+0x3d0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d018      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a5c      	ldr	r2, [pc, #368]	@ (8003acc <HAL_DMA_Abort_IT+0x3d4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a5a      	ldr	r2, [pc, #360]	@ (8003ad0 <HAL_DMA_Abort_IT+0x3d8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00e      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a59      	ldr	r2, [pc, #356]	@ (8003ad4 <HAL_DMA_Abort_IT+0x3dc>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d009      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a57      	ldr	r2, [pc, #348]	@ (8003ad8 <HAL_DMA_Abort_IT+0x3e0>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d004      	beq.n	8003988 <HAL_DMA_Abort_IT+0x290>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a56      	ldr	r2, [pc, #344]	@ (8003adc <HAL_DMA_Abort_IT+0x3e4>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d108      	bne.n	800399a <HAL_DMA_Abort_IT+0x2a2>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 0201 	bic.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	e007      	b.n	80039aa <HAL_DMA_Abort_IT+0x2b2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a3c      	ldr	r2, [pc, #240]	@ (8003aa0 <HAL_DMA_Abort_IT+0x3a8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d072      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a3a      	ldr	r2, [pc, #232]	@ (8003aa4 <HAL_DMA_Abort_IT+0x3ac>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d06d      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a39      	ldr	r2, [pc, #228]	@ (8003aa8 <HAL_DMA_Abort_IT+0x3b0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d068      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a37      	ldr	r2, [pc, #220]	@ (8003aac <HAL_DMA_Abort_IT+0x3b4>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d063      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a36      	ldr	r2, [pc, #216]	@ (8003ab0 <HAL_DMA_Abort_IT+0x3b8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d05e      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a34      	ldr	r2, [pc, #208]	@ (8003ab4 <HAL_DMA_Abort_IT+0x3bc>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d059      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a33      	ldr	r2, [pc, #204]	@ (8003ab8 <HAL_DMA_Abort_IT+0x3c0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d054      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a31      	ldr	r2, [pc, #196]	@ (8003abc <HAL_DMA_Abort_IT+0x3c4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d04f      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a30      	ldr	r2, [pc, #192]	@ (8003ac0 <HAL_DMA_Abort_IT+0x3c8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d04a      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a2e      	ldr	r2, [pc, #184]	@ (8003ac4 <HAL_DMA_Abort_IT+0x3cc>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d045      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a2d      	ldr	r2, [pc, #180]	@ (8003ac8 <HAL_DMA_Abort_IT+0x3d0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d040      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003acc <HAL_DMA_Abort_IT+0x3d4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d03b      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a2a      	ldr	r2, [pc, #168]	@ (8003ad0 <HAL_DMA_Abort_IT+0x3d8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d036      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a28      	ldr	r2, [pc, #160]	@ (8003ad4 <HAL_DMA_Abort_IT+0x3dc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d031      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a27      	ldr	r2, [pc, #156]	@ (8003ad8 <HAL_DMA_Abort_IT+0x3e0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d02c      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a25      	ldr	r2, [pc, #148]	@ (8003adc <HAL_DMA_Abort_IT+0x3e4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d027      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a24      	ldr	r2, [pc, #144]	@ (8003ae0 <HAL_DMA_Abort_IT+0x3e8>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d022      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a22      	ldr	r2, [pc, #136]	@ (8003ae4 <HAL_DMA_Abort_IT+0x3ec>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01d      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a21      	ldr	r2, [pc, #132]	@ (8003ae8 <HAL_DMA_Abort_IT+0x3f0>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d018      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003aec <HAL_DMA_Abort_IT+0x3f4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d013      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a1e      	ldr	r2, [pc, #120]	@ (8003af0 <HAL_DMA_Abort_IT+0x3f8>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00e      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a1c      	ldr	r2, [pc, #112]	@ (8003af4 <HAL_DMA_Abort_IT+0x3fc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d009      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003af8 <HAL_DMA_Abort_IT+0x400>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_DMA_Abort_IT+0x3a2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a19      	ldr	r2, [pc, #100]	@ (8003afc <HAL_DMA_Abort_IT+0x404>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d132      	bne.n	8003b00 <HAL_DMA_Abort_IT+0x408>
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e031      	b.n	8003b02 <HAL_DMA_Abort_IT+0x40a>
 8003a9e:	bf00      	nop
 8003aa0:	40020010 	.word	0x40020010
 8003aa4:	40020028 	.word	0x40020028
 8003aa8:	40020040 	.word	0x40020040
 8003aac:	40020058 	.word	0x40020058
 8003ab0:	40020070 	.word	0x40020070
 8003ab4:	40020088 	.word	0x40020088
 8003ab8:	400200a0 	.word	0x400200a0
 8003abc:	400200b8 	.word	0x400200b8
 8003ac0:	40020410 	.word	0x40020410
 8003ac4:	40020428 	.word	0x40020428
 8003ac8:	40020440 	.word	0x40020440
 8003acc:	40020458 	.word	0x40020458
 8003ad0:	40020470 	.word	0x40020470
 8003ad4:	40020488 	.word	0x40020488
 8003ad8:	400204a0 	.word	0x400204a0
 8003adc:	400204b8 	.word	0x400204b8
 8003ae0:	58025408 	.word	0x58025408
 8003ae4:	5802541c 	.word	0x5802541c
 8003ae8:	58025430 	.word	0x58025430
 8003aec:	58025444 	.word	0x58025444
 8003af0:	58025458 	.word	0x58025458
 8003af4:	5802546c 	.word	0x5802546c
 8003af8:	58025480 	.word	0x58025480
 8003afc:	58025494 	.word	0x58025494
 8003b00:	2300      	movs	r3, #0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d028      	beq.n	8003b58 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b14:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b20:	f003 031f 	and.w	r3, r3, #31
 8003b24:	2201      	movs	r2, #1
 8003b26:	409a      	lsls	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b34:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00c      	beq.n	8003b58 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b4c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b56:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop

08003b84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08a      	sub	sp, #40	@ 0x28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b90:	4b67      	ldr	r3, [pc, #412]	@ (8003d30 <HAL_DMA_IRQHandler+0x1ac>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a67      	ldr	r2, [pc, #412]	@ (8003d34 <HAL_DMA_IRQHandler+0x1b0>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	0a9b      	lsrs	r3, r3, #10
 8003b9c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ba8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a5f      	ldr	r2, [pc, #380]	@ (8003d38 <HAL_DMA_IRQHandler+0x1b4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d04a      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a5d      	ldr	r2, [pc, #372]	@ (8003d3c <HAL_DMA_IRQHandler+0x1b8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d045      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a5c      	ldr	r2, [pc, #368]	@ (8003d40 <HAL_DMA_IRQHandler+0x1bc>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d040      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a5a      	ldr	r2, [pc, #360]	@ (8003d44 <HAL_DMA_IRQHandler+0x1c0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d03b      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a59      	ldr	r2, [pc, #356]	@ (8003d48 <HAL_DMA_IRQHandler+0x1c4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d036      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a57      	ldr	r2, [pc, #348]	@ (8003d4c <HAL_DMA_IRQHandler+0x1c8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d031      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a56      	ldr	r2, [pc, #344]	@ (8003d50 <HAL_DMA_IRQHandler+0x1cc>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d02c      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a54      	ldr	r2, [pc, #336]	@ (8003d54 <HAL_DMA_IRQHandler+0x1d0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d027      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a53      	ldr	r2, [pc, #332]	@ (8003d58 <HAL_DMA_IRQHandler+0x1d4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d022      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a51      	ldr	r2, [pc, #324]	@ (8003d5c <HAL_DMA_IRQHandler+0x1d8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01d      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a50      	ldr	r2, [pc, #320]	@ (8003d60 <HAL_DMA_IRQHandler+0x1dc>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d018      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a4e      	ldr	r2, [pc, #312]	@ (8003d64 <HAL_DMA_IRQHandler+0x1e0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d013      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a4d      	ldr	r2, [pc, #308]	@ (8003d68 <HAL_DMA_IRQHandler+0x1e4>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d00e      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a4b      	ldr	r2, [pc, #300]	@ (8003d6c <HAL_DMA_IRQHandler+0x1e8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d009      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a4a      	ldr	r2, [pc, #296]	@ (8003d70 <HAL_DMA_IRQHandler+0x1ec>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d004      	beq.n	8003c56 <HAL_DMA_IRQHandler+0xd2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a48      	ldr	r2, [pc, #288]	@ (8003d74 <HAL_DMA_IRQHandler+0x1f0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d101      	bne.n	8003c5a <HAL_DMA_IRQHandler+0xd6>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <HAL_DMA_IRQHandler+0xd8>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 842b 	beq.w	80044b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	2208      	movs	r2, #8
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	f000 80a2 	beq.w	8003dbc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003d38 <HAL_DMA_IRQHandler+0x1b4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d04a      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a2d      	ldr	r2, [pc, #180]	@ (8003d3c <HAL_DMA_IRQHandler+0x1b8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d045      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a2b      	ldr	r2, [pc, #172]	@ (8003d40 <HAL_DMA_IRQHandler+0x1bc>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d040      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d44 <HAL_DMA_IRQHandler+0x1c0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d03b      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a28      	ldr	r2, [pc, #160]	@ (8003d48 <HAL_DMA_IRQHandler+0x1c4>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d036      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a27      	ldr	r2, [pc, #156]	@ (8003d4c <HAL_DMA_IRQHandler+0x1c8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d031      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a25      	ldr	r2, [pc, #148]	@ (8003d50 <HAL_DMA_IRQHandler+0x1cc>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d02c      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a24      	ldr	r2, [pc, #144]	@ (8003d54 <HAL_DMA_IRQHandler+0x1d0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d027      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a22      	ldr	r2, [pc, #136]	@ (8003d58 <HAL_DMA_IRQHandler+0x1d4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d022      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a21      	ldr	r2, [pc, #132]	@ (8003d5c <HAL_DMA_IRQHandler+0x1d8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d01d      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8003d60 <HAL_DMA_IRQHandler+0x1dc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d018      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a1e      	ldr	r2, [pc, #120]	@ (8003d64 <HAL_DMA_IRQHandler+0x1e0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d013      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d68 <HAL_DMA_IRQHandler+0x1e4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00e      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8003d6c <HAL_DMA_IRQHandler+0x1e8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d009      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a19      	ldr	r2, [pc, #100]	@ (8003d70 <HAL_DMA_IRQHandler+0x1ec>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d004      	beq.n	8003d18 <HAL_DMA_IRQHandler+0x194>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a18      	ldr	r2, [pc, #96]	@ (8003d74 <HAL_DMA_IRQHandler+0x1f0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d12f      	bne.n	8003d78 <HAL_DMA_IRQHandler+0x1f4>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0304 	and.w	r3, r3, #4
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	bf14      	ite	ne
 8003d26:	2301      	movne	r3, #1
 8003d28:	2300      	moveq	r3, #0
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	e02e      	b.n	8003d8c <HAL_DMA_IRQHandler+0x208>
 8003d2e:	bf00      	nop
 8003d30:	24000000 	.word	0x24000000
 8003d34:	1b4e81b5 	.word	0x1b4e81b5
 8003d38:	40020010 	.word	0x40020010
 8003d3c:	40020028 	.word	0x40020028
 8003d40:	40020040 	.word	0x40020040
 8003d44:	40020058 	.word	0x40020058
 8003d48:	40020070 	.word	0x40020070
 8003d4c:	40020088 	.word	0x40020088
 8003d50:	400200a0 	.word	0x400200a0
 8003d54:	400200b8 	.word	0x400200b8
 8003d58:	40020410 	.word	0x40020410
 8003d5c:	40020428 	.word	0x40020428
 8003d60:	40020440 	.word	0x40020440
 8003d64:	40020458 	.word	0x40020458
 8003d68:	40020470 	.word	0x40020470
 8003d6c:	40020488 	.word	0x40020488
 8003d70:	400204a0 	.word	0x400204a0
 8003d74:	400204b8 	.word	0x400204b8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	bf14      	ite	ne
 8003d86:	2301      	movne	r3, #1
 8003d88:	2300      	moveq	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d015      	beq.n	8003dbc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2208      	movs	r2, #8
 8003daa:	409a      	lsls	r2, r3
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db4:	f043 0201 	orr.w	r2, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d06e      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a69      	ldr	r2, [pc, #420]	@ (8003f7c <HAL_DMA_IRQHandler+0x3f8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d04a      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a67      	ldr	r2, [pc, #412]	@ (8003f80 <HAL_DMA_IRQHandler+0x3fc>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d045      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a66      	ldr	r2, [pc, #408]	@ (8003f84 <HAL_DMA_IRQHandler+0x400>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d040      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a64      	ldr	r2, [pc, #400]	@ (8003f88 <HAL_DMA_IRQHandler+0x404>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d03b      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a63      	ldr	r2, [pc, #396]	@ (8003f8c <HAL_DMA_IRQHandler+0x408>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d036      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a61      	ldr	r2, [pc, #388]	@ (8003f90 <HAL_DMA_IRQHandler+0x40c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d031      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a60      	ldr	r2, [pc, #384]	@ (8003f94 <HAL_DMA_IRQHandler+0x410>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d02c      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a5e      	ldr	r2, [pc, #376]	@ (8003f98 <HAL_DMA_IRQHandler+0x414>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d027      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a5d      	ldr	r2, [pc, #372]	@ (8003f9c <HAL_DMA_IRQHandler+0x418>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d022      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a5b      	ldr	r2, [pc, #364]	@ (8003fa0 <HAL_DMA_IRQHandler+0x41c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01d      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a5a      	ldr	r2, [pc, #360]	@ (8003fa4 <HAL_DMA_IRQHandler+0x420>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d018      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a58      	ldr	r2, [pc, #352]	@ (8003fa8 <HAL_DMA_IRQHandler+0x424>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d013      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a57      	ldr	r2, [pc, #348]	@ (8003fac <HAL_DMA_IRQHandler+0x428>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a55      	ldr	r2, [pc, #340]	@ (8003fb0 <HAL_DMA_IRQHandler+0x42c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d009      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a54      	ldr	r2, [pc, #336]	@ (8003fb4 <HAL_DMA_IRQHandler+0x430>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x2ee>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a52      	ldr	r2, [pc, #328]	@ (8003fb8 <HAL_DMA_IRQHandler+0x434>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10a      	bne.n	8003e88 <HAL_DMA_IRQHandler+0x304>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	695b      	ldr	r3, [r3, #20]
 8003e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	e003      	b.n	8003e90 <HAL_DMA_IRQHandler+0x30c>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00d      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea8:	f043 0202 	orr.w	r2, r3, #2
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	2204      	movs	r2, #4
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 808f 	beq.w	8003fe4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a2c      	ldr	r2, [pc, #176]	@ (8003f7c <HAL_DMA_IRQHandler+0x3f8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d04a      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a2a      	ldr	r2, [pc, #168]	@ (8003f80 <HAL_DMA_IRQHandler+0x3fc>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d045      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a29      	ldr	r2, [pc, #164]	@ (8003f84 <HAL_DMA_IRQHandler+0x400>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d040      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a27      	ldr	r2, [pc, #156]	@ (8003f88 <HAL_DMA_IRQHandler+0x404>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d03b      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a26      	ldr	r2, [pc, #152]	@ (8003f8c <HAL_DMA_IRQHandler+0x408>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d036      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a24      	ldr	r2, [pc, #144]	@ (8003f90 <HAL_DMA_IRQHandler+0x40c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d031      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a23      	ldr	r2, [pc, #140]	@ (8003f94 <HAL_DMA_IRQHandler+0x410>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d02c      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a21      	ldr	r2, [pc, #132]	@ (8003f98 <HAL_DMA_IRQHandler+0x414>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d027      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a20      	ldr	r2, [pc, #128]	@ (8003f9c <HAL_DMA_IRQHandler+0x418>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d022      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1e      	ldr	r2, [pc, #120]	@ (8003fa0 <HAL_DMA_IRQHandler+0x41c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01d      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa4 <HAL_DMA_IRQHandler+0x420>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d018      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa8 <HAL_DMA_IRQHandler+0x424>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a1a      	ldr	r2, [pc, #104]	@ (8003fac <HAL_DMA_IRQHandler+0x428>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00e      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a18      	ldr	r2, [pc, #96]	@ (8003fb0 <HAL_DMA_IRQHandler+0x42c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d009      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a17      	ldr	r2, [pc, #92]	@ (8003fb4 <HAL_DMA_IRQHandler+0x430>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d004      	beq.n	8003f66 <HAL_DMA_IRQHandler+0x3e2>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a15      	ldr	r2, [pc, #84]	@ (8003fb8 <HAL_DMA_IRQHandler+0x434>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d12a      	bne.n	8003fbc <HAL_DMA_IRQHandler+0x438>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf14      	ite	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	2300      	moveq	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	e023      	b.n	8003fc4 <HAL_DMA_IRQHandler+0x440>
 8003f7c:	40020010 	.word	0x40020010
 8003f80:	40020028 	.word	0x40020028
 8003f84:	40020040 	.word	0x40020040
 8003f88:	40020058 	.word	0x40020058
 8003f8c:	40020070 	.word	0x40020070
 8003f90:	40020088 	.word	0x40020088
 8003f94:	400200a0 	.word	0x400200a0
 8003f98:	400200b8 	.word	0x400200b8
 8003f9c:	40020410 	.word	0x40020410
 8003fa0:	40020428 	.word	0x40020428
 8003fa4:	40020440 	.word	0x40020440
 8003fa8:	40020458 	.word	0x40020458
 8003fac:	40020470 	.word	0x40020470
 8003fb0:	40020488 	.word	0x40020488
 8003fb4:	400204a0 	.word	0x400204a0
 8003fb8:	400204b8 	.word	0x400204b8
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00d      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	2204      	movs	r2, #4
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fdc:	f043 0204 	orr.w	r2, r3, #4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	2210      	movs	r2, #16
 8003fee:	409a      	lsls	r2, r3
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80a6 	beq.w	8004146 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a85      	ldr	r2, [pc, #532]	@ (8004214 <HAL_DMA_IRQHandler+0x690>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d04a      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a83      	ldr	r2, [pc, #524]	@ (8004218 <HAL_DMA_IRQHandler+0x694>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d045      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a82      	ldr	r2, [pc, #520]	@ (800421c <HAL_DMA_IRQHandler+0x698>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d040      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a80      	ldr	r2, [pc, #512]	@ (8004220 <HAL_DMA_IRQHandler+0x69c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d03b      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a7f      	ldr	r2, [pc, #508]	@ (8004224 <HAL_DMA_IRQHandler+0x6a0>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d036      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a7d      	ldr	r2, [pc, #500]	@ (8004228 <HAL_DMA_IRQHandler+0x6a4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d031      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a7c      	ldr	r2, [pc, #496]	@ (800422c <HAL_DMA_IRQHandler+0x6a8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d02c      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a7a      	ldr	r2, [pc, #488]	@ (8004230 <HAL_DMA_IRQHandler+0x6ac>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d027      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a79      	ldr	r2, [pc, #484]	@ (8004234 <HAL_DMA_IRQHandler+0x6b0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d022      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a77      	ldr	r2, [pc, #476]	@ (8004238 <HAL_DMA_IRQHandler+0x6b4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d01d      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a76      	ldr	r2, [pc, #472]	@ (800423c <HAL_DMA_IRQHandler+0x6b8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d018      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a74      	ldr	r2, [pc, #464]	@ (8004240 <HAL_DMA_IRQHandler+0x6bc>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a73      	ldr	r2, [pc, #460]	@ (8004244 <HAL_DMA_IRQHandler+0x6c0>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d00e      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a71      	ldr	r2, [pc, #452]	@ (8004248 <HAL_DMA_IRQHandler+0x6c4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d009      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a70      	ldr	r2, [pc, #448]	@ (800424c <HAL_DMA_IRQHandler+0x6c8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d004      	beq.n	800409a <HAL_DMA_IRQHandler+0x516>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a6e      	ldr	r2, [pc, #440]	@ (8004250 <HAL_DMA_IRQHandler+0x6cc>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d10a      	bne.n	80040b0 <HAL_DMA_IRQHandler+0x52c>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0308 	and.w	r3, r3, #8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	e009      	b.n	80040c4 <HAL_DMA_IRQHandler+0x540>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bf14      	ite	ne
 80040be:	2301      	movne	r3, #1
 80040c0:	2300      	moveq	r3, #0
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d03e      	beq.n	8004146 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	2210      	movs	r2, #16
 80040d2:	409a      	lsls	r2, r3
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d018      	beq.n	8004118 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d108      	bne.n	8004106 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d024      	beq.n	8004146 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	4798      	blx	r3
 8004104:	e01f      	b.n	8004146 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800410a:	2b00      	cmp	r3, #0
 800410c:	d01b      	beq.n	8004146 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	4798      	blx	r3
 8004116:	e016      	b.n	8004146 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004122:	2b00      	cmp	r3, #0
 8004124:	d107      	bne.n	8004136 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0208 	bic.w	r2, r2, #8
 8004134:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	2220      	movs	r2, #32
 8004150:	409a      	lsls	r2, r3
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8110 	beq.w	800437c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a2c      	ldr	r2, [pc, #176]	@ (8004214 <HAL_DMA_IRQHandler+0x690>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d04a      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a2b      	ldr	r2, [pc, #172]	@ (8004218 <HAL_DMA_IRQHandler+0x694>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d045      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a29      	ldr	r2, [pc, #164]	@ (800421c <HAL_DMA_IRQHandler+0x698>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d040      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a28      	ldr	r2, [pc, #160]	@ (8004220 <HAL_DMA_IRQHandler+0x69c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d03b      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a26      	ldr	r2, [pc, #152]	@ (8004224 <HAL_DMA_IRQHandler+0x6a0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d036      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a25      	ldr	r2, [pc, #148]	@ (8004228 <HAL_DMA_IRQHandler+0x6a4>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d031      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a23      	ldr	r2, [pc, #140]	@ (800422c <HAL_DMA_IRQHandler+0x6a8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d02c      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a22      	ldr	r2, [pc, #136]	@ (8004230 <HAL_DMA_IRQHandler+0x6ac>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d027      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a20      	ldr	r2, [pc, #128]	@ (8004234 <HAL_DMA_IRQHandler+0x6b0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d022      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004238 <HAL_DMA_IRQHandler+0x6b4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d01d      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a1d      	ldr	r2, [pc, #116]	@ (800423c <HAL_DMA_IRQHandler+0x6b8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d018      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004240 <HAL_DMA_IRQHandler+0x6bc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d013      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004244 <HAL_DMA_IRQHandler+0x6c0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00e      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a19      	ldr	r2, [pc, #100]	@ (8004248 <HAL_DMA_IRQHandler+0x6c4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d009      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a17      	ldr	r2, [pc, #92]	@ (800424c <HAL_DMA_IRQHandler+0x6c8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d004      	beq.n	80041fc <HAL_DMA_IRQHandler+0x678>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a16      	ldr	r2, [pc, #88]	@ (8004250 <HAL_DMA_IRQHandler+0x6cc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d12b      	bne.n	8004254 <HAL_DMA_IRQHandler+0x6d0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b00      	cmp	r3, #0
 8004208:	bf14      	ite	ne
 800420a:	2301      	movne	r3, #1
 800420c:	2300      	moveq	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	e02a      	b.n	8004268 <HAL_DMA_IRQHandler+0x6e4>
 8004212:	bf00      	nop
 8004214:	40020010 	.word	0x40020010
 8004218:	40020028 	.word	0x40020028
 800421c:	40020040 	.word	0x40020040
 8004220:	40020058 	.word	0x40020058
 8004224:	40020070 	.word	0x40020070
 8004228:	40020088 	.word	0x40020088
 800422c:	400200a0 	.word	0x400200a0
 8004230:	400200b8 	.word	0x400200b8
 8004234:	40020410 	.word	0x40020410
 8004238:	40020428 	.word	0x40020428
 800423c:	40020440 	.word	0x40020440
 8004240:	40020458 	.word	0x40020458
 8004244:	40020470 	.word	0x40020470
 8004248:	40020488 	.word	0x40020488
 800424c:	400204a0 	.word	0x400204a0
 8004250:	400204b8 	.word	0x400204b8
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8087 	beq.w	800437c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	2220      	movs	r2, #32
 8004278:	409a      	lsls	r2, r3
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b04      	cmp	r3, #4
 8004288:	d139      	bne.n	80042fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0216 	bic.w	r2, r2, #22
 8004298:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695a      	ldr	r2, [r3, #20]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80042a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d103      	bne.n	80042ba <HAL_DMA_IRQHandler+0x736>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d007      	beq.n	80042ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0208 	bic.w	r2, r2, #8
 80042c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ce:	f003 031f 	and.w	r3, r3, #31
 80042d2:	223f      	movs	r2, #63	@ 0x3f
 80042d4:	409a      	lsls	r2, r3
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 834a 	beq.w	8004988 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	4798      	blx	r3
          }
          return;
 80042fc:	e344      	b.n	8004988 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d018      	beq.n	800433e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d108      	bne.n	800432c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	2b00      	cmp	r3, #0
 8004320:	d02c      	beq.n	800437c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	4798      	blx	r3
 800432a:	e027      	b.n	800437c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d023      	beq.n	800437c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
 800433c:	e01e      	b.n	800437c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10f      	bne.n	800436c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0210 	bic.w	r2, r2, #16
 800435a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 8306 	beq.w	8004992 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8088 	beq.w	80044a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2204      	movs	r2, #4
 8004398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a7a      	ldr	r2, [pc, #488]	@ (800458c <HAL_DMA_IRQHandler+0xa08>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d04a      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a79      	ldr	r2, [pc, #484]	@ (8004590 <HAL_DMA_IRQHandler+0xa0c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d045      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a77      	ldr	r2, [pc, #476]	@ (8004594 <HAL_DMA_IRQHandler+0xa10>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d040      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a76      	ldr	r2, [pc, #472]	@ (8004598 <HAL_DMA_IRQHandler+0xa14>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d03b      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a74      	ldr	r2, [pc, #464]	@ (800459c <HAL_DMA_IRQHandler+0xa18>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d036      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a73      	ldr	r2, [pc, #460]	@ (80045a0 <HAL_DMA_IRQHandler+0xa1c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d031      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a71      	ldr	r2, [pc, #452]	@ (80045a4 <HAL_DMA_IRQHandler+0xa20>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d02c      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a70      	ldr	r2, [pc, #448]	@ (80045a8 <HAL_DMA_IRQHandler+0xa24>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d027      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a6e      	ldr	r2, [pc, #440]	@ (80045ac <HAL_DMA_IRQHandler+0xa28>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d022      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a6d      	ldr	r2, [pc, #436]	@ (80045b0 <HAL_DMA_IRQHandler+0xa2c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d01d      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a6b      	ldr	r2, [pc, #428]	@ (80045b4 <HAL_DMA_IRQHandler+0xa30>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d018      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a6a      	ldr	r2, [pc, #424]	@ (80045b8 <HAL_DMA_IRQHandler+0xa34>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d013      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a68      	ldr	r2, [pc, #416]	@ (80045bc <HAL_DMA_IRQHandler+0xa38>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00e      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a67      	ldr	r2, [pc, #412]	@ (80045c0 <HAL_DMA_IRQHandler+0xa3c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d009      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a65      	ldr	r2, [pc, #404]	@ (80045c4 <HAL_DMA_IRQHandler+0xa40>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d004      	beq.n	800443c <HAL_DMA_IRQHandler+0x8b8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a64      	ldr	r2, [pc, #400]	@ (80045c8 <HAL_DMA_IRQHandler+0xa44>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d108      	bne.n	800444e <HAL_DMA_IRQHandler+0x8ca>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 0201 	bic.w	r2, r2, #1
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	e007      	b.n	800445e <HAL_DMA_IRQHandler+0x8da>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f022 0201 	bic.w	r2, r2, #1
 800445c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3301      	adds	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004466:	429a      	cmp	r2, r3
 8004468:	d307      	bcc.n	800447a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f2      	bne.n	800445e <HAL_DMA_IRQHandler+0x8da>
 8004478:	e000      	b.n	800447c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800447a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d004      	beq.n	8004494 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2203      	movs	r2, #3
 800448e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004492:	e003      	b.n	800449c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8272 	beq.w	8004992 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4798      	blx	r3
 80044b6:	e26c      	b.n	8004992 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a43      	ldr	r2, [pc, #268]	@ (80045cc <HAL_DMA_IRQHandler+0xa48>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d022      	beq.n	8004508 <HAL_DMA_IRQHandler+0x984>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a42      	ldr	r2, [pc, #264]	@ (80045d0 <HAL_DMA_IRQHandler+0xa4c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d01d      	beq.n	8004508 <HAL_DMA_IRQHandler+0x984>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a40      	ldr	r2, [pc, #256]	@ (80045d4 <HAL_DMA_IRQHandler+0xa50>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d018      	beq.n	8004508 <HAL_DMA_IRQHandler+0x984>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a3f      	ldr	r2, [pc, #252]	@ (80045d8 <HAL_DMA_IRQHandler+0xa54>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d013      	beq.n	8004508 <HAL_DMA_IRQHandler+0x984>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a3d      	ldr	r2, [pc, #244]	@ (80045dc <HAL_DMA_IRQHandler+0xa58>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d00e      	beq.n	8004508 <HAL_DMA_IRQHandler+0x984>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a3c      	ldr	r2, [pc, #240]	@ (80045e0 <HAL_DMA_IRQHandler+0xa5c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d009      	beq.n	8004508 <HAL_DMA_IRQHandler+0x984>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a3a      	ldr	r2, [pc, #232]	@ (80045e4 <HAL_DMA_IRQHandler+0xa60>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d004      	beq.n	8004508 <HAL_DMA_IRQHandler+0x984>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a39      	ldr	r2, [pc, #228]	@ (80045e8 <HAL_DMA_IRQHandler+0xa64>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d101      	bne.n	800450c <HAL_DMA_IRQHandler+0x988>
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <HAL_DMA_IRQHandler+0x98a>
 800450c:	2300      	movs	r3, #0
 800450e:	2b00      	cmp	r3, #0
 8004510:	f000 823f 	beq.w	8004992 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004520:	f003 031f 	and.w	r3, r3, #31
 8004524:	2204      	movs	r2, #4
 8004526:	409a      	lsls	r2, r3
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	4013      	ands	r3, r2
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80cd 	beq.w	80046cc <HAL_DMA_IRQHandler+0xb48>
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80c7 	beq.w	80046cc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	2204      	movs	r2, #4
 8004548:	409a      	lsls	r2, r3
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d049      	beq.n	80045ec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 8210 	beq.w	800498c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004574:	e20a      	b.n	800498c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8206 	beq.w	800498c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004588:	e200      	b.n	800498c <HAL_DMA_IRQHandler+0xe08>
 800458a:	bf00      	nop
 800458c:	40020010 	.word	0x40020010
 8004590:	40020028 	.word	0x40020028
 8004594:	40020040 	.word	0x40020040
 8004598:	40020058 	.word	0x40020058
 800459c:	40020070 	.word	0x40020070
 80045a0:	40020088 	.word	0x40020088
 80045a4:	400200a0 	.word	0x400200a0
 80045a8:	400200b8 	.word	0x400200b8
 80045ac:	40020410 	.word	0x40020410
 80045b0:	40020428 	.word	0x40020428
 80045b4:	40020440 	.word	0x40020440
 80045b8:	40020458 	.word	0x40020458
 80045bc:	40020470 	.word	0x40020470
 80045c0:	40020488 	.word	0x40020488
 80045c4:	400204a0 	.word	0x400204a0
 80045c8:	400204b8 	.word	0x400204b8
 80045cc:	58025408 	.word	0x58025408
 80045d0:	5802541c 	.word	0x5802541c
 80045d4:	58025430 	.word	0x58025430
 80045d8:	58025444 	.word	0x58025444
 80045dc:	58025458 	.word	0x58025458
 80045e0:	5802546c 	.word	0x5802546c
 80045e4:	58025480 	.word	0x58025480
 80045e8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d160      	bne.n	80046b8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a7f      	ldr	r2, [pc, #508]	@ (80047f8 <HAL_DMA_IRQHandler+0xc74>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d04a      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a7d      	ldr	r2, [pc, #500]	@ (80047fc <HAL_DMA_IRQHandler+0xc78>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d045      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a7c      	ldr	r2, [pc, #496]	@ (8004800 <HAL_DMA_IRQHandler+0xc7c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d040      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a7a      	ldr	r2, [pc, #488]	@ (8004804 <HAL_DMA_IRQHandler+0xc80>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d03b      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a79      	ldr	r2, [pc, #484]	@ (8004808 <HAL_DMA_IRQHandler+0xc84>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d036      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a77      	ldr	r2, [pc, #476]	@ (800480c <HAL_DMA_IRQHandler+0xc88>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d031      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a76      	ldr	r2, [pc, #472]	@ (8004810 <HAL_DMA_IRQHandler+0xc8c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d02c      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a74      	ldr	r2, [pc, #464]	@ (8004814 <HAL_DMA_IRQHandler+0xc90>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d027      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a73      	ldr	r2, [pc, #460]	@ (8004818 <HAL_DMA_IRQHandler+0xc94>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d022      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a71      	ldr	r2, [pc, #452]	@ (800481c <HAL_DMA_IRQHandler+0xc98>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d01d      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a70      	ldr	r2, [pc, #448]	@ (8004820 <HAL_DMA_IRQHandler+0xc9c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d018      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a6e      	ldr	r2, [pc, #440]	@ (8004824 <HAL_DMA_IRQHandler+0xca0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d013      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a6d      	ldr	r2, [pc, #436]	@ (8004828 <HAL_DMA_IRQHandler+0xca4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00e      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a6b      	ldr	r2, [pc, #428]	@ (800482c <HAL_DMA_IRQHandler+0xca8>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d009      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a6a      	ldr	r2, [pc, #424]	@ (8004830 <HAL_DMA_IRQHandler+0xcac>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d004      	beq.n	8004696 <HAL_DMA_IRQHandler+0xb12>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a68      	ldr	r2, [pc, #416]	@ (8004834 <HAL_DMA_IRQHandler+0xcb0>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d108      	bne.n	80046a8 <HAL_DMA_IRQHandler+0xb24>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0208 	bic.w	r2, r2, #8
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e007      	b.n	80046b8 <HAL_DMA_IRQHandler+0xb34>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0204 	bic.w	r2, r2, #4
 80046b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8165 	beq.w	800498c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ca:	e15f      	b.n	800498c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	2202      	movs	r2, #2
 80046d6:	409a      	lsls	r2, r3
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80c5 	beq.w	800486c <HAL_DMA_IRQHandler+0xce8>
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 80bf 	beq.w	800486c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	2202      	movs	r2, #2
 80046f8:	409a      	lsls	r2, r3
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d018      	beq.n	800473a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 813a 	beq.w	8004990 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004724:	e134      	b.n	8004990 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 8130 	beq.w	8004990 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004738:	e12a      	b.n	8004990 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	f040 8089 	bne.w	8004858 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a2b      	ldr	r2, [pc, #172]	@ (80047f8 <HAL_DMA_IRQHandler+0xc74>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d04a      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a29      	ldr	r2, [pc, #164]	@ (80047fc <HAL_DMA_IRQHandler+0xc78>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d045      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a28      	ldr	r2, [pc, #160]	@ (8004800 <HAL_DMA_IRQHandler+0xc7c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d040      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a26      	ldr	r2, [pc, #152]	@ (8004804 <HAL_DMA_IRQHandler+0xc80>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d03b      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a25      	ldr	r2, [pc, #148]	@ (8004808 <HAL_DMA_IRQHandler+0xc84>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d036      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a23      	ldr	r2, [pc, #140]	@ (800480c <HAL_DMA_IRQHandler+0xc88>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d031      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a22      	ldr	r2, [pc, #136]	@ (8004810 <HAL_DMA_IRQHandler+0xc8c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d02c      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a20      	ldr	r2, [pc, #128]	@ (8004814 <HAL_DMA_IRQHandler+0xc90>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d027      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a1f      	ldr	r2, [pc, #124]	@ (8004818 <HAL_DMA_IRQHandler+0xc94>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d022      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a1d      	ldr	r2, [pc, #116]	@ (800481c <HAL_DMA_IRQHandler+0xc98>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01d      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004820 <HAL_DMA_IRQHandler+0xc9c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d018      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004824 <HAL_DMA_IRQHandler+0xca0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d013      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a19      	ldr	r2, [pc, #100]	@ (8004828 <HAL_DMA_IRQHandler+0xca4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00e      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a17      	ldr	r2, [pc, #92]	@ (800482c <HAL_DMA_IRQHandler+0xca8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d009      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a16      	ldr	r2, [pc, #88]	@ (8004830 <HAL_DMA_IRQHandler+0xcac>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d004      	beq.n	80047e6 <HAL_DMA_IRQHandler+0xc62>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a14      	ldr	r2, [pc, #80]	@ (8004834 <HAL_DMA_IRQHandler+0xcb0>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d128      	bne.n	8004838 <HAL_DMA_IRQHandler+0xcb4>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0214 	bic.w	r2, r2, #20
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	e027      	b.n	8004848 <HAL_DMA_IRQHandler+0xcc4>
 80047f8:	40020010 	.word	0x40020010
 80047fc:	40020028 	.word	0x40020028
 8004800:	40020040 	.word	0x40020040
 8004804:	40020058 	.word	0x40020058
 8004808:	40020070 	.word	0x40020070
 800480c:	40020088 	.word	0x40020088
 8004810:	400200a0 	.word	0x400200a0
 8004814:	400200b8 	.word	0x400200b8
 8004818:	40020410 	.word	0x40020410
 800481c:	40020428 	.word	0x40020428
 8004820:	40020440 	.word	0x40020440
 8004824:	40020458 	.word	0x40020458
 8004828:	40020470 	.word	0x40020470
 800482c:	40020488 	.word	0x40020488
 8004830:	400204a0 	.word	0x400204a0
 8004834:	400204b8 	.word	0x400204b8
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 020a 	bic.w	r2, r2, #10
 8004846:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485c:	2b00      	cmp	r3, #0
 800485e:	f000 8097 	beq.w	8004990 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800486a:	e091      	b.n	8004990 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004870:	f003 031f 	and.w	r3, r3, #31
 8004874:	2208      	movs	r2, #8
 8004876:	409a      	lsls	r2, r3
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8088 	beq.w	8004992 <HAL_DMA_IRQHandler+0xe0e>
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 8082 	beq.w	8004992 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a41      	ldr	r2, [pc, #260]	@ (8004998 <HAL_DMA_IRQHandler+0xe14>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d04a      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a3f      	ldr	r2, [pc, #252]	@ (800499c <HAL_DMA_IRQHandler+0xe18>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d045      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a3e      	ldr	r2, [pc, #248]	@ (80049a0 <HAL_DMA_IRQHandler+0xe1c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d040      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a3c      	ldr	r2, [pc, #240]	@ (80049a4 <HAL_DMA_IRQHandler+0xe20>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d03b      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a3b      	ldr	r2, [pc, #236]	@ (80049a8 <HAL_DMA_IRQHandler+0xe24>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d036      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a39      	ldr	r2, [pc, #228]	@ (80049ac <HAL_DMA_IRQHandler+0xe28>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d031      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a38      	ldr	r2, [pc, #224]	@ (80049b0 <HAL_DMA_IRQHandler+0xe2c>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d02c      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a36      	ldr	r2, [pc, #216]	@ (80049b4 <HAL_DMA_IRQHandler+0xe30>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d027      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a35      	ldr	r2, [pc, #212]	@ (80049b8 <HAL_DMA_IRQHandler+0xe34>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d022      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a33      	ldr	r2, [pc, #204]	@ (80049bc <HAL_DMA_IRQHandler+0xe38>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01d      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a32      	ldr	r2, [pc, #200]	@ (80049c0 <HAL_DMA_IRQHandler+0xe3c>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d018      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a30      	ldr	r2, [pc, #192]	@ (80049c4 <HAL_DMA_IRQHandler+0xe40>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a2f      	ldr	r2, [pc, #188]	@ (80049c8 <HAL_DMA_IRQHandler+0xe44>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a2d      	ldr	r2, [pc, #180]	@ (80049cc <HAL_DMA_IRQHandler+0xe48>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d009      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a2c      	ldr	r2, [pc, #176]	@ (80049d0 <HAL_DMA_IRQHandler+0xe4c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_DMA_IRQHandler+0xdaa>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a2a      	ldr	r2, [pc, #168]	@ (80049d4 <HAL_DMA_IRQHandler+0xe50>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d108      	bne.n	8004940 <HAL_DMA_IRQHandler+0xdbc>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 021c 	bic.w	r2, r2, #28
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	e007      	b.n	8004950 <HAL_DMA_IRQHandler+0xdcc>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 020e 	bic.w	r2, r2, #14
 800494e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	2201      	movs	r2, #1
 800495a:	409a      	lsls	r2, r3
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
 8004986:	e004      	b.n	8004992 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004988:	bf00      	nop
 800498a:	e002      	b.n	8004992 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800498c:	bf00      	nop
 800498e:	e000      	b.n	8004992 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004990:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004992:	3728      	adds	r7, #40	@ 0x28
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40020010 	.word	0x40020010
 800499c:	40020028 	.word	0x40020028
 80049a0:	40020040 	.word	0x40020040
 80049a4:	40020058 	.word	0x40020058
 80049a8:	40020070 	.word	0x40020070
 80049ac:	40020088 	.word	0x40020088
 80049b0:	400200a0 	.word	0x400200a0
 80049b4:	400200b8 	.word	0x400200b8
 80049b8:	40020410 	.word	0x40020410
 80049bc:	40020428 	.word	0x40020428
 80049c0:	40020440 	.word	0x40020440
 80049c4:	40020458 	.word	0x40020458
 80049c8:	40020470 	.word	0x40020470
 80049cc:	40020488 	.word	0x40020488
 80049d0:	400204a0 	.word	0x400204a0
 80049d4:	400204b8 	.word	0x400204b8

080049d8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callback function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	460b      	mov	r3, r1
 80049e2:	607a      	str	r2, [r7, #4]
 80049e4:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e045      	b.n	8004a80 <HAL_DMA_RegisterCallback+0xa8>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_DMA_RegisterCallback+0x2a>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e03e      	b.n	8004a80 <HAL_DMA_RegisterCallback+0xa8>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d12d      	bne.n	8004a72 <HAL_DMA_RegisterCallback+0x9a>
  {
    switch (CallbackID)
 8004a16:	7afb      	ldrb	r3, [r7, #11]
 8004a18:	2b05      	cmp	r3, #5
 8004a1a:	d827      	bhi.n	8004a6c <HAL_DMA_RegisterCallback+0x94>
 8004a1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004a24 <HAL_DMA_RegisterCallback+0x4c>)
 8004a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a22:	bf00      	nop
 8004a24:	08004a3d 	.word	0x08004a3d
 8004a28:	08004a45 	.word	0x08004a45
 8004a2c:	08004a4d 	.word	0x08004a4d
 8004a30:	08004a55 	.word	0x08004a55
 8004a34:	08004a5d 	.word	0x08004a5d
 8004a38:	08004a65 	.word	0x08004a65
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8004a42:	e018      	b.n	8004a76 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004a4a:	e014      	b.n	8004a76 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8004a52:	e010      	b.n	8004a76 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 8004a5a:	e00c      	b.n	8004a76 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8004a62:	e008      	b.n	8004a76 <HAL_DMA_RegisterCallback+0x9e>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004a6a:	e004      	b.n	8004a76 <HAL_DMA_RegisterCallback+0x9e>

    default:
      status =  HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004a70:	e001      	b.n	8004a76 <HAL_DMA_RegisterCallback+0x9e>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8004a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
 8004ab0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ab6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004abc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a7f      	ldr	r2, [pc, #508]	@ (8004cc0 <DMA_SetConfig+0x21c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d072      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a7d      	ldr	r2, [pc, #500]	@ (8004cc4 <DMA_SetConfig+0x220>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d06d      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a7c      	ldr	r2, [pc, #496]	@ (8004cc8 <DMA_SetConfig+0x224>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d068      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a7a      	ldr	r2, [pc, #488]	@ (8004ccc <DMA_SetConfig+0x228>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d063      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a79      	ldr	r2, [pc, #484]	@ (8004cd0 <DMA_SetConfig+0x22c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d05e      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a77      	ldr	r2, [pc, #476]	@ (8004cd4 <DMA_SetConfig+0x230>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d059      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a76      	ldr	r2, [pc, #472]	@ (8004cd8 <DMA_SetConfig+0x234>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d054      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a74      	ldr	r2, [pc, #464]	@ (8004cdc <DMA_SetConfig+0x238>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d04f      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a73      	ldr	r2, [pc, #460]	@ (8004ce0 <DMA_SetConfig+0x23c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d04a      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a71      	ldr	r2, [pc, #452]	@ (8004ce4 <DMA_SetConfig+0x240>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d045      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a70      	ldr	r2, [pc, #448]	@ (8004ce8 <DMA_SetConfig+0x244>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d040      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a6e      	ldr	r2, [pc, #440]	@ (8004cec <DMA_SetConfig+0x248>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d03b      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a6d      	ldr	r2, [pc, #436]	@ (8004cf0 <DMA_SetConfig+0x24c>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d036      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a6b      	ldr	r2, [pc, #428]	@ (8004cf4 <DMA_SetConfig+0x250>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d031      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a6a      	ldr	r2, [pc, #424]	@ (8004cf8 <DMA_SetConfig+0x254>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d02c      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a68      	ldr	r2, [pc, #416]	@ (8004cfc <DMA_SetConfig+0x258>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d027      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a67      	ldr	r2, [pc, #412]	@ (8004d00 <DMA_SetConfig+0x25c>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d022      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a65      	ldr	r2, [pc, #404]	@ (8004d04 <DMA_SetConfig+0x260>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d01d      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a64      	ldr	r2, [pc, #400]	@ (8004d08 <DMA_SetConfig+0x264>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d018      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a62      	ldr	r2, [pc, #392]	@ (8004d0c <DMA_SetConfig+0x268>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a61      	ldr	r2, [pc, #388]	@ (8004d10 <DMA_SetConfig+0x26c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00e      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a5f      	ldr	r2, [pc, #380]	@ (8004d14 <DMA_SetConfig+0x270>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d009      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a5e      	ldr	r2, [pc, #376]	@ (8004d18 <DMA_SetConfig+0x274>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d004      	beq.n	8004bae <DMA_SetConfig+0x10a>
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a5c      	ldr	r2, [pc, #368]	@ (8004d1c <DMA_SetConfig+0x278>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d101      	bne.n	8004bb2 <DMA_SetConfig+0x10e>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <DMA_SetConfig+0x110>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00d      	beq.n	8004bd4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004bc0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d004      	beq.n	8004bd4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004bd2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a39      	ldr	r2, [pc, #228]	@ (8004cc0 <DMA_SetConfig+0x21c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d04a      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a38      	ldr	r2, [pc, #224]	@ (8004cc4 <DMA_SetConfig+0x220>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d045      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a36      	ldr	r2, [pc, #216]	@ (8004cc8 <DMA_SetConfig+0x224>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d040      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a35      	ldr	r2, [pc, #212]	@ (8004ccc <DMA_SetConfig+0x228>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d03b      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a33      	ldr	r2, [pc, #204]	@ (8004cd0 <DMA_SetConfig+0x22c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d036      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a32      	ldr	r2, [pc, #200]	@ (8004cd4 <DMA_SetConfig+0x230>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d031      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a30      	ldr	r2, [pc, #192]	@ (8004cd8 <DMA_SetConfig+0x234>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d02c      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a2f      	ldr	r2, [pc, #188]	@ (8004cdc <DMA_SetConfig+0x238>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d027      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a2d      	ldr	r2, [pc, #180]	@ (8004ce0 <DMA_SetConfig+0x23c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d022      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a2c      	ldr	r2, [pc, #176]	@ (8004ce4 <DMA_SetConfig+0x240>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d01d      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ce8 <DMA_SetConfig+0x244>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d018      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a29      	ldr	r2, [pc, #164]	@ (8004cec <DMA_SetConfig+0x248>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d013      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a27      	ldr	r2, [pc, #156]	@ (8004cf0 <DMA_SetConfig+0x24c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00e      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a26      	ldr	r2, [pc, #152]	@ (8004cf4 <DMA_SetConfig+0x250>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d009      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a24      	ldr	r2, [pc, #144]	@ (8004cf8 <DMA_SetConfig+0x254>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d004      	beq.n	8004c74 <DMA_SetConfig+0x1d0>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a23      	ldr	r2, [pc, #140]	@ (8004cfc <DMA_SetConfig+0x258>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d101      	bne.n	8004c78 <DMA_SetConfig+0x1d4>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <DMA_SetConfig+0x1d6>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d059      	beq.n	8004d32 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	223f      	movs	r2, #63	@ 0x3f
 8004c88:	409a      	lsls	r2, r3
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c9c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b40      	cmp	r3, #64	@ 0x40
 8004cac:	d138      	bne.n	8004d20 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004cbe:	e086      	b.n	8004dce <DMA_SetConfig+0x32a>
 8004cc0:	40020010 	.word	0x40020010
 8004cc4:	40020028 	.word	0x40020028
 8004cc8:	40020040 	.word	0x40020040
 8004ccc:	40020058 	.word	0x40020058
 8004cd0:	40020070 	.word	0x40020070
 8004cd4:	40020088 	.word	0x40020088
 8004cd8:	400200a0 	.word	0x400200a0
 8004cdc:	400200b8 	.word	0x400200b8
 8004ce0:	40020410 	.word	0x40020410
 8004ce4:	40020428 	.word	0x40020428
 8004ce8:	40020440 	.word	0x40020440
 8004cec:	40020458 	.word	0x40020458
 8004cf0:	40020470 	.word	0x40020470
 8004cf4:	40020488 	.word	0x40020488
 8004cf8:	400204a0 	.word	0x400204a0
 8004cfc:	400204b8 	.word	0x400204b8
 8004d00:	58025408 	.word	0x58025408
 8004d04:	5802541c 	.word	0x5802541c
 8004d08:	58025430 	.word	0x58025430
 8004d0c:	58025444 	.word	0x58025444
 8004d10:	58025458 	.word	0x58025458
 8004d14:	5802546c 	.word	0x5802546c
 8004d18:	58025480 	.word	0x58025480
 8004d1c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	60da      	str	r2, [r3, #12]
}
 8004d30:	e04d      	b.n	8004dce <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a29      	ldr	r2, [pc, #164]	@ (8004ddc <DMA_SetConfig+0x338>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d022      	beq.n	8004d82 <DMA_SetConfig+0x2de>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a27      	ldr	r2, [pc, #156]	@ (8004de0 <DMA_SetConfig+0x33c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d01d      	beq.n	8004d82 <DMA_SetConfig+0x2de>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a26      	ldr	r2, [pc, #152]	@ (8004de4 <DMA_SetConfig+0x340>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d018      	beq.n	8004d82 <DMA_SetConfig+0x2de>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a24      	ldr	r2, [pc, #144]	@ (8004de8 <DMA_SetConfig+0x344>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d013      	beq.n	8004d82 <DMA_SetConfig+0x2de>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a23      	ldr	r2, [pc, #140]	@ (8004dec <DMA_SetConfig+0x348>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00e      	beq.n	8004d82 <DMA_SetConfig+0x2de>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a21      	ldr	r2, [pc, #132]	@ (8004df0 <DMA_SetConfig+0x34c>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d009      	beq.n	8004d82 <DMA_SetConfig+0x2de>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a20      	ldr	r2, [pc, #128]	@ (8004df4 <DMA_SetConfig+0x350>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d004      	beq.n	8004d82 <DMA_SetConfig+0x2de>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8004df8 <DMA_SetConfig+0x354>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d101      	bne.n	8004d86 <DMA_SetConfig+0x2e2>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <DMA_SetConfig+0x2e4>
 8004d86:	2300      	movs	r3, #0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d020      	beq.n	8004dce <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	2201      	movs	r2, #1
 8004d96:	409a      	lsls	r2, r3
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b40      	cmp	r3, #64	@ 0x40
 8004daa:	d108      	bne.n	8004dbe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	60da      	str	r2, [r3, #12]
}
 8004dbc:	e007      	b.n	8004dce <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	60da      	str	r2, [r3, #12]
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	58025408 	.word	0x58025408
 8004de0:	5802541c 	.word	0x5802541c
 8004de4:	58025430 	.word	0x58025430
 8004de8:	58025444 	.word	0x58025444
 8004dec:	58025458 	.word	0x58025458
 8004df0:	5802546c 	.word	0x5802546c
 8004df4:	58025480 	.word	0x58025480
 8004df8:	58025494 	.word	0x58025494

08004dfc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a42      	ldr	r2, [pc, #264]	@ (8004f14 <DMA_CalcBaseAndBitshift+0x118>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d04a      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a41      	ldr	r2, [pc, #260]	@ (8004f18 <DMA_CalcBaseAndBitshift+0x11c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d045      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a3f      	ldr	r2, [pc, #252]	@ (8004f1c <DMA_CalcBaseAndBitshift+0x120>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d040      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a3e      	ldr	r2, [pc, #248]	@ (8004f20 <DMA_CalcBaseAndBitshift+0x124>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d03b      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a3c      	ldr	r2, [pc, #240]	@ (8004f24 <DMA_CalcBaseAndBitshift+0x128>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d036      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a3b      	ldr	r2, [pc, #236]	@ (8004f28 <DMA_CalcBaseAndBitshift+0x12c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d031      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a39      	ldr	r2, [pc, #228]	@ (8004f2c <DMA_CalcBaseAndBitshift+0x130>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d02c      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a38      	ldr	r2, [pc, #224]	@ (8004f30 <DMA_CalcBaseAndBitshift+0x134>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d027      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a36      	ldr	r2, [pc, #216]	@ (8004f34 <DMA_CalcBaseAndBitshift+0x138>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d022      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a35      	ldr	r2, [pc, #212]	@ (8004f38 <DMA_CalcBaseAndBitshift+0x13c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d01d      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a33      	ldr	r2, [pc, #204]	@ (8004f3c <DMA_CalcBaseAndBitshift+0x140>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d018      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a32      	ldr	r2, [pc, #200]	@ (8004f40 <DMA_CalcBaseAndBitshift+0x144>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d013      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a30      	ldr	r2, [pc, #192]	@ (8004f44 <DMA_CalcBaseAndBitshift+0x148>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00e      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a2f      	ldr	r2, [pc, #188]	@ (8004f48 <DMA_CalcBaseAndBitshift+0x14c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d009      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a2d      	ldr	r2, [pc, #180]	@ (8004f4c <DMA_CalcBaseAndBitshift+0x150>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d004      	beq.n	8004ea4 <DMA_CalcBaseAndBitshift+0xa8>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a2c      	ldr	r2, [pc, #176]	@ (8004f50 <DMA_CalcBaseAndBitshift+0x154>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d101      	bne.n	8004ea8 <DMA_CalcBaseAndBitshift+0xac>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <DMA_CalcBaseAndBitshift+0xae>
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d024      	beq.n	8004ef8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	3b10      	subs	r3, #16
 8004eb6:	4a27      	ldr	r2, [pc, #156]	@ (8004f54 <DMA_CalcBaseAndBitshift+0x158>)
 8004eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	4a24      	ldr	r2, [pc, #144]	@ (8004f58 <DMA_CalcBaseAndBitshift+0x15c>)
 8004ec8:	5cd3      	ldrb	r3, [r2, r3]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d908      	bls.n	8004ee8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	4b1f      	ldr	r3, [pc, #124]	@ (8004f5c <DMA_CalcBaseAndBitshift+0x160>)
 8004ede:	4013      	ands	r3, r2
 8004ee0:	1d1a      	adds	r2, r3, #4
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ee6:	e00d      	b.n	8004f04 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	4b1b      	ldr	r3, [pc, #108]	@ (8004f5c <DMA_CalcBaseAndBitshift+0x160>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ef6:	e005      	b.n	8004f04 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr
 8004f14:	40020010 	.word	0x40020010
 8004f18:	40020028 	.word	0x40020028
 8004f1c:	40020040 	.word	0x40020040
 8004f20:	40020058 	.word	0x40020058
 8004f24:	40020070 	.word	0x40020070
 8004f28:	40020088 	.word	0x40020088
 8004f2c:	400200a0 	.word	0x400200a0
 8004f30:	400200b8 	.word	0x400200b8
 8004f34:	40020410 	.word	0x40020410
 8004f38:	40020428 	.word	0x40020428
 8004f3c:	40020440 	.word	0x40020440
 8004f40:	40020458 	.word	0x40020458
 8004f44:	40020470 	.word	0x40020470
 8004f48:	40020488 	.word	0x40020488
 8004f4c:	400204a0 	.word	0x400204a0
 8004f50:	400204b8 	.word	0x400204b8
 8004f54:	aaaaaaab 	.word	0xaaaaaaab
 8004f58:	0802337c 	.word	0x0802337c
 8004f5c:	fffffc00 	.word	0xfffffc00

08004f60 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d120      	bne.n	8004fb6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d858      	bhi.n	800502e <DMA_CheckFifoParam+0xce>
 8004f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <DMA_CheckFifoParam+0x24>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004f95 	.word	0x08004f95
 8004f88:	08004fa7 	.word	0x08004fa7
 8004f8c:	08004f95 	.word	0x08004f95
 8004f90:	0800502f 	.word	0x0800502f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d048      	beq.n	8005032 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fa4:	e045      	b.n	8005032 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004fae:	d142      	bne.n	8005036 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fb4:	e03f      	b.n	8005036 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fbe:	d123      	bne.n	8005008 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d838      	bhi.n	800503a <DMA_CheckFifoParam+0xda>
 8004fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd0 <DMA_CheckFifoParam+0x70>)
 8004fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fce:	bf00      	nop
 8004fd0:	08004fe1 	.word	0x08004fe1
 8004fd4:	08004fe7 	.word	0x08004fe7
 8004fd8:	08004fe1 	.word	0x08004fe1
 8004fdc:	08004ff9 	.word	0x08004ff9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
        break;
 8004fe4:	e030      	b.n	8005048 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d025      	beq.n	800503e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004ff6:	e022      	b.n	800503e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005000:	d11f      	bne.n	8005042 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005006:	e01c      	b.n	8005042 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500c:	2b02      	cmp	r3, #2
 800500e:	d902      	bls.n	8005016 <DMA_CheckFifoParam+0xb6>
 8005010:	2b03      	cmp	r3, #3
 8005012:	d003      	beq.n	800501c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005014:	e018      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
        break;
 800501a:	e015      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005020:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00e      	beq.n	8005046 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	73fb      	strb	r3, [r7, #15]
    break;
 800502c:	e00b      	b.n	8005046 <DMA_CheckFifoParam+0xe6>
        break;
 800502e:	bf00      	nop
 8005030:	e00a      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
        break;
 8005032:	bf00      	nop
 8005034:	e008      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
        break;
 8005036:	bf00      	nop
 8005038:	e006      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
        break;
 800503a:	bf00      	nop
 800503c:	e004      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
        break;
 800503e:	bf00      	nop
 8005040:	e002      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
        break;
 8005042:	bf00      	nop
 8005044:	e000      	b.n	8005048 <DMA_CheckFifoParam+0xe8>
    break;
 8005046:	bf00      	nop
    }
  }

  return status;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop

08005058 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a38      	ldr	r2, [pc, #224]	@ (800514c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d022      	beq.n	80050b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a36      	ldr	r2, [pc, #216]	@ (8005150 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01d      	beq.n	80050b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a35      	ldr	r2, [pc, #212]	@ (8005154 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d018      	beq.n	80050b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a33      	ldr	r2, [pc, #204]	@ (8005158 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d013      	beq.n	80050b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a32      	ldr	r2, [pc, #200]	@ (800515c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00e      	beq.n	80050b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a30      	ldr	r2, [pc, #192]	@ (8005160 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d009      	beq.n	80050b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2f      	ldr	r2, [pc, #188]	@ (8005164 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005168 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d101      	bne.n	80050ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80050ba:	2300      	movs	r3, #0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d01a      	beq.n	80050f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	3b08      	subs	r3, #8
 80050c8:	4a28      	ldr	r2, [pc, #160]	@ (800516c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	091b      	lsrs	r3, r3, #4
 80050d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4b26      	ldr	r3, [pc, #152]	@ (8005170 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	461a      	mov	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a24      	ldr	r2, [pc, #144]	@ (8005174 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80050e4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 031f 	and.w	r3, r3, #31
 80050ec:	2201      	movs	r2, #1
 80050ee:	409a      	lsls	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80050f4:	e024      	b.n	8005140 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	3b10      	subs	r3, #16
 80050fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005178 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005100:	fba2 2303 	umull	r2, r3, r2, r3
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4a1c      	ldr	r2, [pc, #112]	@ (800517c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d806      	bhi.n	800511e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4a1b      	ldr	r2, [pc, #108]	@ (8005180 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d902      	bls.n	800511e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3308      	adds	r3, #8
 800511c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4b18      	ldr	r3, [pc, #96]	@ (8005184 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	461a      	mov	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a16      	ldr	r2, [pc, #88]	@ (8005188 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005130:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f003 031f 	and.w	r3, r3, #31
 8005138:	2201      	movs	r2, #1
 800513a:	409a      	lsls	r2, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	58025408 	.word	0x58025408
 8005150:	5802541c 	.word	0x5802541c
 8005154:	58025430 	.word	0x58025430
 8005158:	58025444 	.word	0x58025444
 800515c:	58025458 	.word	0x58025458
 8005160:	5802546c 	.word	0x5802546c
 8005164:	58025480 	.word	0x58025480
 8005168:	58025494 	.word	0x58025494
 800516c:	cccccccd 	.word	0xcccccccd
 8005170:	16009600 	.word	0x16009600
 8005174:	58025880 	.word	0x58025880
 8005178:	aaaaaaab 	.word	0xaaaaaaab
 800517c:	400204b8 	.word	0x400204b8
 8005180:	4002040f 	.word	0x4002040f
 8005184:	10008200 	.word	0x10008200
 8005188:	40020880 	.word	0x40020880

0800518c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	b2db      	uxtb	r3, r3
 800519a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d04a      	beq.n	8005238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d847      	bhi.n	8005238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a25      	ldr	r2, [pc, #148]	@ (8005244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d022      	beq.n	80051f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a24      	ldr	r2, [pc, #144]	@ (8005248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d01d      	beq.n	80051f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a22      	ldr	r2, [pc, #136]	@ (800524c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d018      	beq.n	80051f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a21      	ldr	r2, [pc, #132]	@ (8005250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d013      	beq.n	80051f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1f      	ldr	r2, [pc, #124]	@ (8005254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00e      	beq.n	80051f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a1e      	ldr	r2, [pc, #120]	@ (8005258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d009      	beq.n	80051f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a1c      	ldr	r2, [pc, #112]	@ (800525c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d101      	bne.n	80051fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80051fc:	2300      	movs	r3, #0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4b17      	ldr	r3, [pc, #92]	@ (8005264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	461a      	mov	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a15      	ldr	r2, [pc, #84]	@ (8005268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005214:	671a      	str	r2, [r3, #112]	@ 0x70
 8005216:	e009      	b.n	800522c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	4b14      	ldr	r3, [pc, #80]	@ (800526c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	461a      	mov	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a11      	ldr	r2, [pc, #68]	@ (8005270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800522a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3b01      	subs	r3, #1
 8005230:	2201      	movs	r2, #1
 8005232:	409a      	lsls	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005238:	bf00      	nop
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	58025408 	.word	0x58025408
 8005248:	5802541c 	.word	0x5802541c
 800524c:	58025430 	.word	0x58025430
 8005250:	58025444 	.word	0x58025444
 8005254:	58025458 	.word	0x58025458
 8005258:	5802546c 	.word	0x5802546c
 800525c:	58025480 	.word	0x58025480
 8005260:	58025494 	.word	0x58025494
 8005264:	1600963f 	.word	0x1600963f
 8005268:	58025940 	.word	0x58025940
 800526c:	1000823f 	.word	0x1000823f
 8005270:	40020940 	.word	0x40020940

08005274 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b098      	sub	sp, #96	@ 0x60
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800527c:	4a84      	ldr	r2, [pc, #528]	@ (8005490 <HAL_FDCAN_Init+0x21c>)
 800527e:	f107 030c 	add.w	r3, r7, #12
 8005282:	4611      	mov	r1, r2
 8005284:	224c      	movs	r2, #76	@ 0x4c
 8005286:	4618      	mov	r0, r3
 8005288:	f01c f8e7 	bl	802145a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e1c6      	b.n	8005624 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a7e      	ldr	r2, [pc, #504]	@ (8005494 <HAL_FDCAN_Init+0x220>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d106      	bne.n	80052ae <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80052a8:	461a      	mov	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7fc f800 	bl	80012c8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699a      	ldr	r2, [r3, #24]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0210 	bic.w	r2, r2, #16
 80052d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052d8:	f7fd f80e 	bl	80022f8 <HAL_GetTick>
 80052dc:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80052de:	e014      	b.n	800530a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80052e0:	f7fd f80a 	bl	80022f8 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b0a      	cmp	r3, #10
 80052ec:	d90d      	bls.n	800530a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052f4:	f043 0201 	orr.w	r2, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2203      	movs	r2, #3
 8005302:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e18c      	b.n	8005624 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b08      	cmp	r3, #8
 8005316:	d0e3      	beq.n	80052e0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005328:	f7fc ffe6 	bl	80022f8 <HAL_GetTick>
 800532c:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800532e:	e014      	b.n	800535a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005330:	f7fc ffe2 	bl	80022f8 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b0a      	cmp	r3, #10
 800533c:	d90d      	bls.n	800535a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005344:	f043 0201 	orr.w	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2203      	movs	r2, #3
 8005352:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e164      	b.n	8005624 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d0e3      	beq.n	8005330 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0202 	orr.w	r2, r2, #2
 8005376:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	7c1b      	ldrb	r3, [r3, #16]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d108      	bne.n	8005392 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800538e:	619a      	str	r2, [r3, #24]
 8005390:	e007      	b.n	80053a2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	699a      	ldr	r2, [r3, #24]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	7c5b      	ldrb	r3, [r3, #17]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d108      	bne.n	80053bc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053b8:	619a      	str	r2, [r3, #24]
 80053ba:	e007      	b.n	80053cc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	7c9b      	ldrb	r3, [r3, #18]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d108      	bne.n	80053e6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699a      	ldr	r2, [r3, #24]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053e2:	619a      	str	r2, [r3, #24]
 80053e4:	e007      	b.n	80053f6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699a      	ldr	r2, [r3, #24]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053f4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699a      	ldr	r2, [r3, #24]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800541a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0210 	bic.w	r2, r2, #16
 800542a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d108      	bne.n	8005446 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0204 	orr.w	r2, r2, #4
 8005442:	619a      	str	r2, [r3, #24]
 8005444:	e030      	b.n	80054a8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d02c      	beq.n	80054a8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d020      	beq.n	8005498 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	699a      	ldr	r2, [r3, #24]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005464:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0210 	orr.w	r2, r2, #16
 8005474:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	2b03      	cmp	r3, #3
 800547c:	d114      	bne.n	80054a8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699a      	ldr	r2, [r3, #24]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0220 	orr.w	r2, r2, #32
 800548c:	619a      	str	r2, [r3, #24]
 800548e:	e00b      	b.n	80054a8 <HAL_FDCAN_Init+0x234>
 8005490:	08023208 	.word	0x08023208
 8005494:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f042 0220 	orr.w	r2, r2, #32
 80054a6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	3b01      	subs	r3, #1
 80054ae:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	69db      	ldr	r3, [r3, #28]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80054b8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80054c0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	3b01      	subs	r3, #1
 80054ca:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80054d0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80054d2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054dc:	d115      	bne.n	800550a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	3b01      	subs	r3, #1
 80054ea:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80054ec:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f2:	3b01      	subs	r3, #1
 80054f4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80054f6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fe:	3b01      	subs	r3, #1
 8005500:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005506:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005508:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005530:	4413      	add	r3, r2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d011      	beq.n	800555a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800553e:	f023 0107 	bic.w	r1, r3, #7
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	3360      	adds	r3, #96	@ 0x60
 800554a:	443b      	add	r3, r7
 800554c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	430a      	orrs	r2, r1
 8005556:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d011      	beq.n	8005586 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800556a:	f023 0107 	bic.w	r1, r3, #7
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	3360      	adds	r3, #96	@ 0x60
 8005576:	443b      	add	r3, r7
 8005578:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800558a:	2b00      	cmp	r3, #0
 800558c:	d012      	beq.n	80055b4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005596:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	3360      	adds	r3, #96	@ 0x60
 80055a2:	443b      	add	r3, r7
 80055a4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80055a8:	011a      	lsls	r2, r3, #4
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d012      	beq.n	80055e2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80055c4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	3360      	adds	r3, #96	@ 0x60
 80055d0:	443b      	add	r3, r7
 80055d2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80055d6:	021a      	lsls	r2, r3, #8
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a11      	ldr	r2, [pc, #68]	@ (800562c <HAL_FDCAN_Init+0x3b8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d107      	bne.n	80055fc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f022 0203 	bic.w	r2, r2, #3
 80055fa:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 fb0d 	bl	8005c34 <FDCAN_CalcultateRamBlockAddresses>
 800561a:	4603      	mov	r3, r0
 800561c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005620:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005624:	4618      	mov	r0, r3
 8005626:	3760      	adds	r7, #96	@ 0x60
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	4000a000 	.word	0x4000a000

08005630 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b096      	sub	sp, #88	@ 0x58
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8005638:	4b95      	ldr	r3, [pc, #596]	@ (8005890 <HAL_FDCAN_IRQHandler+0x260>)
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	079b      	lsls	r3, r3, #30
 800563e:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005640:	4b93      	ldr	r3, [pc, #588]	@ (8005890 <HAL_FDCAN_IRQHandler+0x260>)
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	079b      	lsls	r3, r3, #30
 8005646:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005648:	4013      	ands	r3, r2
 800564a:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005652:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005656:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800565e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005660:	4013      	ands	r3, r2
 8005662:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005676:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005678:	4013      	ands	r3, r2
 800567a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005682:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005690:	4013      	ands	r3, r2
 8005692:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800569a:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800569e:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056a8:	4013      	ands	r3, r2
 80056aa:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056b2:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80056b6:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056c0:	4013      	ands	r3, r2
 80056c2:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80056d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00f      	beq.n	80056fe <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80056de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00a      	beq.n	80056fe <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80056f2:	4b67      	ldr	r3, [pc, #412]	@ (8005890 <HAL_FDCAN_IRQHandler+0x260>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fa4f 	bl	8005b9c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80056fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005700:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01c      	beq.n	8005742 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800570e:	2b00      	cmp	r3, #0
 8005710:	d017      	beq.n	8005742 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800571a:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005726:	4013      	ands	r3, r2
 8005728:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005732:	651a      	str	r2, [r3, #80]	@ 0x50
 8005734:	4b56      	ldr	r3, [pc, #344]	@ (8005890 <HAL_FDCAN_IRQHandler+0x260>)
 8005736:	2200      	movs	r2, #0
 8005738:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800573a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 fa04 	bl	8005b4a <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00d      	beq.n	8005764 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800574e:	4b51      	ldr	r3, [pc, #324]	@ (8005894 <HAL_FDCAN_IRQHandler+0x264>)
 8005750:	400b      	ands	r3, r1
 8005752:	6513      	str	r3, [r2, #80]	@ 0x50
 8005754:	4a4e      	ldr	r2, [pc, #312]	@ (8005890 <HAL_FDCAN_IRQHandler+0x260>)
 8005756:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005758:	0f9b      	lsrs	r3, r3, #30
 800575a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800575c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f9b2 	bl	8005ac8 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005764:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00d      	beq.n	8005786 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005770:	4b48      	ldr	r3, [pc, #288]	@ (8005894 <HAL_FDCAN_IRQHandler+0x264>)
 8005772:	400b      	ands	r3, r1
 8005774:	6513      	str	r3, [r2, #80]	@ 0x50
 8005776:	4a46      	ldr	r2, [pc, #280]	@ (8005890 <HAL_FDCAN_IRQHandler+0x260>)
 8005778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800577a:	0f9b      	lsrs	r3, r3, #30
 800577c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800577e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f9ac 	bl	8005ade <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005786:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00d      	beq.n	80057a8 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005792:	4b40      	ldr	r3, [pc, #256]	@ (8005894 <HAL_FDCAN_IRQHandler+0x264>)
 8005794:	400b      	ands	r3, r1
 8005796:	6513      	str	r3, [r2, #80]	@ 0x50
 8005798:	4a3d      	ldr	r2, [pc, #244]	@ (8005890 <HAL_FDCAN_IRQHandler+0x260>)
 800579a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800579c:	0f9b      	lsrs	r3, r3, #30
 800579e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80057a0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f9a6 	bl	8005af4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80057a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00d      	beq.n	80057ca <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80057b4:	4b37      	ldr	r3, [pc, #220]	@ (8005894 <HAL_FDCAN_IRQHandler+0x264>)
 80057b6:	400b      	ands	r3, r1
 80057b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80057ba:	4a35      	ldr	r2, [pc, #212]	@ (8005890 <HAL_FDCAN_IRQHandler+0x260>)
 80057bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057be:	0f9b      	lsrs	r3, r3, #30
 80057c0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80057c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f9a0 	bl	8005b0a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80057ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00f      	beq.n	80057f4 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80057d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80057e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80057e8:	4b29      	ldr	r3, [pc, #164]	@ (8005890 <HAL_FDCAN_IRQHandler+0x260>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f996 	bl	8005b20 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80057f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01c      	beq.n	8005838 <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80057fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005800:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005804:	2b00      	cmp	r3, #0
 8005806:	d017      	beq.n	8005838 <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005810:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800581a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800581c:	4013      	ands	r3, r2
 800581e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005828:	651a      	str	r2, [r3, #80]	@ 0x50
 800582a:	4b19      	ldr	r3, [pc, #100]	@ (8005890 <HAL_FDCAN_IRQHandler+0x260>)
 800582c:	2200      	movs	r2, #0
 800582e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005830:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f97e 	bl	8005b34 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00f      	beq.n	8005862 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8005842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005844:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8005854:	651a      	str	r2, [r3, #80]	@ 0x50
 8005856:	4b0e      	ldr	r3, [pc, #56]	@ (8005890 <HAL_FDCAN_IRQHandler+0x260>)
 8005858:	2200      	movs	r2, #0
 800585a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f97f 	bl	8005b60 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d015      	beq.n	8005898 <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800586c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d010      	beq.n	8005898 <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800587e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005880:	4b03      	ldr	r3, [pc, #12]	@ (8005890 <HAL_FDCAN_IRQHandler+0x260>)
 8005882:	2200      	movs	r2, #0
 8005884:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 f974 	bl	8005b74 <HAL_FDCAN_TimestampWraparoundCallback>
 800588c:	e004      	b.n	8005898 <HAL_FDCAN_IRQHandler+0x268>
 800588e:	bf00      	nop
 8005890:	4000a800 	.word	0x4000a800
 8005894:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800589a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d00f      	beq.n	80058c2 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80058a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80058b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80058b6:	4b81      	ldr	r3, [pc, #516]	@ (8005abc <HAL_FDCAN_IRQHandler+0x48c>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f963 	bl	8005b88 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80058c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d014      	beq.n	80058f6 <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80058cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00f      	beq.n	80058f6 <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80058de:	651a      	str	r2, [r3, #80]	@ 0x50
 80058e0:	4b76      	ldr	r3, [pc, #472]	@ (8005abc <HAL_FDCAN_IRQHandler+0x48c>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80058f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00d      	beq.n	8005918 <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005902:	4b6f      	ldr	r3, [pc, #444]	@ (8005ac0 <HAL_FDCAN_IRQHandler+0x490>)
 8005904:	400b      	ands	r3, r1
 8005906:	6513      	str	r3, [r2, #80]	@ 0x50
 8005908:	4a6c      	ldr	r2, [pc, #432]	@ (8005abc <HAL_FDCAN_IRQHandler+0x48c>)
 800590a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800590c:	0f9b      	lsrs	r3, r3, #30
 800590e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005910:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f956 	bl	8005bc4 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800591a:	2b00      	cmp	r3, #0
 800591c:	d011      	beq.n	8005942 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005924:	4b66      	ldr	r3, [pc, #408]	@ (8005ac0 <HAL_FDCAN_IRQHandler+0x490>)
 8005926:	400b      	ands	r3, r1
 8005928:	6513      	str	r3, [r2, #80]	@ 0x50
 800592a:	4a64      	ldr	r2, [pc, #400]	@ (8005abc <HAL_FDCAN_IRQHandler+0x48c>)
 800592c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800592e:	0f9b      	lsrs	r3, r3, #30
 8005930:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a5f      	ldr	r2, [pc, #380]	@ (8005ac4 <HAL_FDCAN_IRQHandler+0x494>)
 8005948:	4293      	cmp	r3, r2
 800594a:	f040 80aa 	bne.w	8005aa2 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80a2 	beq.w	8005aa2 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	f003 030f 	and.w	r3, r3, #15
 8005968:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005972:	4013      	ands	r3, r2
 8005974:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005980:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800598a:	4013      	ands	r3, r2
 800598c:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005998:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a2:	4013      	ands	r3, r2
 80059a4:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 80059b0:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	6a3a      	ldr	r2, [r7, #32]
 80059ba:	4013      	ands	r3, r2
 80059bc:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80059c8:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	4013      	ands	r3, r2
 80059d4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80059e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d007      	beq.n	80059fc <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80059f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f8ef 	bl	8005bda <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80059fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d007      	beq.n	8005a12 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a08:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005a0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f8ef 	bl	8005bf0 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d019      	beq.n	8005a50 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d014      	beq.n	8005a50 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2c:	0c1b      	lsrs	r3, r3, #16
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a3c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2240      	movs	r2, #64	@ 0x40
 8005a44:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	6939      	ldr	r1, [r7, #16]
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f8db 	bl	8005c06 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005a5e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f8dc 	bl	8005c1e <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00b      	beq.n	8005a84 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	6a3a      	ldr	r2, [r7, #32]
 8005a72:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	431a      	orrs	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00b      	beq.n	8005aa2 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	69fa      	ldr	r2, [r7, #28]
 8005a90:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f87f 	bl	8005bb0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005ab2:	bf00      	nop
 8005ab4:	3758      	adds	r7, #88	@ 0x58
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	4000a800 	.word	0x4000a800
 8005ac0:	3fcfffff 	.word	0x3fcfffff
 8005ac4:	4000a000 	.word	0x4000a000

08005ac8 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005ad2:	bf00      	nop
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
 8005b52:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	60f8      	str	r0, [r7, #12]
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005c12:	bf00      	nop
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr

08005c1e <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c40:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005c4a:	4ba7      	ldr	r3, [pc, #668]	@ (8005ee8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	0091      	lsls	r1, r2, #2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	430b      	orrs	r3, r1
 8005c58:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c64:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6c:	041a      	lsls	r2, r3, #16
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	4413      	add	r3, r2
 8005c80:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005c8a:	4b97      	ldr	r3, [pc, #604]	@ (8005ee8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	0091      	lsls	r1, r2, #2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	430b      	orrs	r3, r1
 8005c98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ca4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cac:	041a      	lsls	r2, r3, #16
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005ccc:	4b86      	ldr	r3, [pc, #536]	@ (8005ee8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	0091      	lsls	r1, r2, #2
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ce6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	041a      	lsls	r2, r3, #16
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005d02:	fb02 f303 	mul.w	r3, r2, r3
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	4413      	add	r3, r2
 8005d0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005d14:	4b74      	ldr	r3, [pc, #464]	@ (8005ee8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d16:	4013      	ands	r3, r2
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	0091      	lsls	r1, r2, #2
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	6812      	ldr	r2, [r2, #0]
 8005d20:	430b      	orrs	r3, r1
 8005d22:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d2e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d36:	041a      	lsls	r2, r3, #16
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005d4a:	fb02 f303 	mul.w	r3, r2, r3
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	4413      	add	r3, r2
 8005d52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005d5c:	4b62      	ldr	r3, [pc, #392]	@ (8005ee8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d5e:	4013      	ands	r3, r2
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	0091      	lsls	r1, r2, #2
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005d88:	4b57      	ldr	r3, [pc, #348]	@ (8005ee8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	0091      	lsls	r1, r2, #2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	430b      	orrs	r3, r1
 8005d96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005da2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005daa:	041a      	lsls	r2, r3, #16
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005dca:	4b47      	ldr	r3, [pc, #284]	@ (8005ee8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	0091      	lsls	r1, r2, #2
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	430b      	orrs	r3, r1
 8005dd8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005de4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dec:	041a      	lsls	r2, r3, #16
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e00:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e08:	061a      	lsls	r2, r3, #24
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e18:	4b34      	ldr	r3, [pc, #208]	@ (8005eec <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009a      	lsls	r2, r3, #2
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	441a      	add	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	441a      	add	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005e4e:	fb01 f303 	mul.w	r3, r1, r3
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	441a      	add	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e62:	6879      	ldr	r1, [r7, #4]
 8005e64:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005e66:	fb01 f303 	mul.w	r3, r1, r3
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	441a      	add	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005e7e:	fb01 f303 	mul.w	r3, r1, r3
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	441a      	add	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	441a      	add	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005eae:	fb01 f303 	mul.w	r3, r1, r3
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	441a      	add	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005eca:	fb01 f303 	mul.w	r3, r1, r3
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	441a      	add	r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ede:	4a04      	ldr	r2, [pc, #16]	@ (8005ef0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d915      	bls.n	8005f10 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005ee4:	e006      	b.n	8005ef4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005ee6:	bf00      	nop
 8005ee8:	ffff0003 	.word	0xffff0003
 8005eec:	10002b00 	.word	0x10002b00
 8005ef0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005efa:	f043 0220 	orr.w	r2, r3, #32
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2203      	movs	r2, #3
 8005f08:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e010      	b.n	8005f32 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	e005      	b.n	8005f24 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3304      	adds	r3, #4
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d3f3      	bcc.n	8005f18 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop

08005f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b089      	sub	sp, #36	@ 0x24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005f4e:	4b89      	ldr	r3, [pc, #548]	@ (8006174 <HAL_GPIO_Init+0x234>)
 8005f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f52:	e194      	b.n	800627e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	2101      	movs	r1, #1
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f60:	4013      	ands	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 8186 	beq.w	8006278 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d005      	beq.n	8005f84 <HAL_GPIO_Init+0x44>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d130      	bne.n	8005fe6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	2203      	movs	r2, #3
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fba:	2201      	movs	r2, #1
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	091b      	lsrs	r3, r3, #4
 8005fd0:	f003 0201 	and.w	r2, r3, #1
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d017      	beq.n	8006022 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	43db      	mvns	r3, r3
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	4013      	ands	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	4313      	orrs	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d123      	bne.n	8006076 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	08da      	lsrs	r2, r3, #3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3208      	adds	r2, #8
 8006036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	220f      	movs	r2, #15
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	43db      	mvns	r3, r3
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	4013      	ands	r3, r2
 8006050:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	69fb      	ldr	r3, [r7, #28]
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	4313      	orrs	r3, r2
 8006066:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	08da      	lsrs	r2, r3, #3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3208      	adds	r2, #8
 8006070:	69b9      	ldr	r1, [r7, #24]
 8006072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	2203      	movs	r2, #3
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	43db      	mvns	r3, r3
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4013      	ands	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f003 0203 	and.w	r2, r3, #3
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 80e0 	beq.w	8006278 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006178 <HAL_GPIO_Init+0x238>)
 80060ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80060be:	4a2e      	ldr	r2, [pc, #184]	@ (8006178 <HAL_GPIO_Init+0x238>)
 80060c0:	f043 0302 	orr.w	r3, r3, #2
 80060c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80060c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006178 <HAL_GPIO_Init+0x238>)
 80060ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060d6:	4a29      	ldr	r2, [pc, #164]	@ (800617c <HAL_GPIO_Init+0x23c>)
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	089b      	lsrs	r3, r3, #2
 80060dc:	3302      	adds	r3, #2
 80060de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	220f      	movs	r2, #15
 80060ee:	fa02 f303 	lsl.w	r3, r2, r3
 80060f2:	43db      	mvns	r3, r3
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	4013      	ands	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a20      	ldr	r2, [pc, #128]	@ (8006180 <HAL_GPIO_Init+0x240>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d052      	beq.n	80061a8 <HAL_GPIO_Init+0x268>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a1f      	ldr	r2, [pc, #124]	@ (8006184 <HAL_GPIO_Init+0x244>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d031      	beq.n	800616e <HAL_GPIO_Init+0x22e>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a1e      	ldr	r2, [pc, #120]	@ (8006188 <HAL_GPIO_Init+0x248>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d02b      	beq.n	800616a <HAL_GPIO_Init+0x22a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a1d      	ldr	r2, [pc, #116]	@ (800618c <HAL_GPIO_Init+0x24c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d025      	beq.n	8006166 <HAL_GPIO_Init+0x226>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a1c      	ldr	r2, [pc, #112]	@ (8006190 <HAL_GPIO_Init+0x250>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01f      	beq.n	8006162 <HAL_GPIO_Init+0x222>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a1b      	ldr	r2, [pc, #108]	@ (8006194 <HAL_GPIO_Init+0x254>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d019      	beq.n	800615e <HAL_GPIO_Init+0x21e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a1a      	ldr	r2, [pc, #104]	@ (8006198 <HAL_GPIO_Init+0x258>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <HAL_GPIO_Init+0x21a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a19      	ldr	r2, [pc, #100]	@ (800619c <HAL_GPIO_Init+0x25c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00d      	beq.n	8006156 <HAL_GPIO_Init+0x216>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a18      	ldr	r2, [pc, #96]	@ (80061a0 <HAL_GPIO_Init+0x260>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d007      	beq.n	8006152 <HAL_GPIO_Init+0x212>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a17      	ldr	r2, [pc, #92]	@ (80061a4 <HAL_GPIO_Init+0x264>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d101      	bne.n	800614e <HAL_GPIO_Init+0x20e>
 800614a:	2309      	movs	r3, #9
 800614c:	e02d      	b.n	80061aa <HAL_GPIO_Init+0x26a>
 800614e:	230a      	movs	r3, #10
 8006150:	e02b      	b.n	80061aa <HAL_GPIO_Init+0x26a>
 8006152:	2308      	movs	r3, #8
 8006154:	e029      	b.n	80061aa <HAL_GPIO_Init+0x26a>
 8006156:	2307      	movs	r3, #7
 8006158:	e027      	b.n	80061aa <HAL_GPIO_Init+0x26a>
 800615a:	2306      	movs	r3, #6
 800615c:	e025      	b.n	80061aa <HAL_GPIO_Init+0x26a>
 800615e:	2305      	movs	r3, #5
 8006160:	e023      	b.n	80061aa <HAL_GPIO_Init+0x26a>
 8006162:	2304      	movs	r3, #4
 8006164:	e021      	b.n	80061aa <HAL_GPIO_Init+0x26a>
 8006166:	2303      	movs	r3, #3
 8006168:	e01f      	b.n	80061aa <HAL_GPIO_Init+0x26a>
 800616a:	2302      	movs	r3, #2
 800616c:	e01d      	b.n	80061aa <HAL_GPIO_Init+0x26a>
 800616e:	2301      	movs	r3, #1
 8006170:	e01b      	b.n	80061aa <HAL_GPIO_Init+0x26a>
 8006172:	bf00      	nop
 8006174:	58000080 	.word	0x58000080
 8006178:	58024400 	.word	0x58024400
 800617c:	58000400 	.word	0x58000400
 8006180:	58020000 	.word	0x58020000
 8006184:	58020400 	.word	0x58020400
 8006188:	58020800 	.word	0x58020800
 800618c:	58020c00 	.word	0x58020c00
 8006190:	58021000 	.word	0x58021000
 8006194:	58021400 	.word	0x58021400
 8006198:	58021800 	.word	0x58021800
 800619c:	58021c00 	.word	0x58021c00
 80061a0:	58022000 	.word	0x58022000
 80061a4:	58022400 	.word	0x58022400
 80061a8:	2300      	movs	r3, #0
 80061aa:	69fa      	ldr	r2, [r7, #28]
 80061ac:	f002 0203 	and.w	r2, r2, #3
 80061b0:	0092      	lsls	r2, r2, #2
 80061b2:	4093      	lsls	r3, r2
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061ba:	4938      	ldr	r1, [pc, #224]	@ (800629c <HAL_GPIO_Init+0x35c>)
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	089b      	lsrs	r3, r3, #2
 80061c0:	3302      	adds	r3, #2
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80061c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	43db      	mvns	r3, r3
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	4013      	ands	r3, r2
 80061d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80061ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80061f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	43db      	mvns	r3, r3
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	4013      	ands	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d003      	beq.n	800621c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	4313      	orrs	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800621c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	43db      	mvns	r3, r3
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	4013      	ands	r3, r2
 8006232:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	43db      	mvns	r3, r3
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	4013      	ands	r3, r2
 800625c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800626a:	69ba      	ldr	r2, [r7, #24]
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006278:	69fb      	ldr	r3, [r7, #28]
 800627a:	3301      	adds	r3, #1
 800627c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	f47f ae63 	bne.w	8005f54 <HAL_GPIO_Init+0x14>
  }
}
 800628e:	bf00      	nop
 8006290:	bf00      	nop
 8006292:	3724      	adds	r7, #36	@ 0x24
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	58000400 	.word	0x58000400

080062a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	691a      	ldr	r2, [r3, #16]
 80062b0:	887b      	ldrh	r3, [r7, #2]
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062b8:	2301      	movs	r3, #1
 80062ba:	73fb      	strb	r3, [r7, #15]
 80062bc:	e001      	b.n	80062c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062be:	2300      	movs	r3, #0
 80062c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3714      	adds	r7, #20
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	807b      	strh	r3, [r7, #2]
 80062dc:	4613      	mov	r3, r2
 80062de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062e0:	787b      	ldrb	r3, [r7, #1]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062e6:	887a      	ldrh	r2, [r7, #2]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80062ec:	e003      	b.n	80062f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80062ee:	887b      	ldrh	r3, [r7, #2]
 80062f0:	041a      	lsls	r2, r3, #16
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	619a      	str	r2, [r3, #24]
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006302:	b480      	push	{r7}
 8006304:	b085      	sub	sp, #20
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	460b      	mov	r3, r1
 800630c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006314:	887a      	ldrh	r2, [r7, #2]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4013      	ands	r3, r2
 800631a:	041a      	lsls	r2, r3, #16
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	43d9      	mvns	r1, r3
 8006320:	887b      	ldrh	r3, [r7, #2]
 8006322:	400b      	ands	r3, r1
 8006324:	431a      	orrs	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	619a      	str	r2, [r3, #24]
}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b082      	sub	sp, #8
 800633a:	af00      	add	r7, sp, #0
 800633c:	4603      	mov	r3, r0
 800633e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006344:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006350:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006354:	88fb      	ldrh	r3, [r7, #6]
 8006356:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	4618      	mov	r0, r3
 800635e:	f019 fefd 	bl	802015c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d101      	bne.n	800637e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e07f      	b.n	800647e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fb f810 	bl	80013b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2224      	movs	r2, #36	@ 0x24
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0201 	bic.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80063bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	689a      	ldr	r2, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d107      	bne.n	80063e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063e2:	609a      	str	r2, [r3, #8]
 80063e4:	e006      	b.n	80063f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689a      	ldr	r2, [r3, #8]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80063f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d104      	bne.n	8006406 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006404:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6859      	ldr	r1, [r3, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	4b1d      	ldr	r3, [pc, #116]	@ (8006488 <HAL_I2C_Init+0x11c>)
 8006412:	430b      	orrs	r3, r1
 8006414:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006424:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691a      	ldr	r2, [r3, #16]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	695b      	ldr	r3, [r3, #20]
 800642e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	430a      	orrs	r2, r1
 800643e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	69d9      	ldr	r1, [r3, #28]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a1a      	ldr	r2, [r3, #32]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0201 	orr.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	02008000 	.word	0x02008000

0800648c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b088      	sub	sp, #32
 8006490:	af02      	add	r7, sp, #8
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	4608      	mov	r0, r1
 8006496:	4611      	mov	r1, r2
 8006498:	461a      	mov	r2, r3
 800649a:	4603      	mov	r3, r0
 800649c:	817b      	strh	r3, [r7, #10]
 800649e:	460b      	mov	r3, r1
 80064a0:	813b      	strh	r3, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	f040 80f9 	bne.w	80066a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_I2C_Mem_Write+0x34>
 80064ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d105      	bne.n	80064cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064c6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e0ed      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <HAL_I2C_Mem_Write+0x4e>
 80064d6:	2302      	movs	r3, #2
 80064d8:	e0e6      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064e2:	f7fb ff09 	bl	80022f8 <HAL_GetTick>
 80064e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	2319      	movs	r3, #25
 80064ee:	2201      	movs	r2, #1
 80064f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f955 	bl	80067a4 <I2C_WaitOnFlagUntilTimeout>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	e0d1      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2221      	movs	r2, #33	@ 0x21
 8006508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	2240      	movs	r2, #64	@ 0x40
 8006510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a3a      	ldr	r2, [r7, #32]
 800651e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006524:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800652c:	88f8      	ldrh	r0, [r7, #6]
 800652e:	893a      	ldrh	r2, [r7, #8]
 8006530:	8979      	ldrh	r1, [r7, #10]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	9301      	str	r3, [sp, #4]
 8006536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006538:	9300      	str	r3, [sp, #0]
 800653a:	4603      	mov	r3, r0
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f8b9 	bl	80066b4 <I2C_RequestMemoryWrite>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e0a9      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006558:	b29b      	uxth	r3, r3
 800655a:	2bff      	cmp	r3, #255	@ 0xff
 800655c:	d90e      	bls.n	800657c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	22ff      	movs	r2, #255	@ 0xff
 8006562:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006568:	b2da      	uxtb	r2, r3
 800656a:	8979      	ldrh	r1, [r7, #10]
 800656c:	2300      	movs	r3, #0
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 facf 	bl	8006b18 <I2C_TransferConfig>
 800657a:	e00f      	b.n	800659c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800658a:	b2da      	uxtb	r2, r3
 800658c:	8979      	ldrh	r1, [r7, #10]
 800658e:	2300      	movs	r3, #0
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006596:	68f8      	ldr	r0, [r7, #12]
 8006598:	f000 fabe 	bl	8006b18 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f94e 	bl	8006842 <I2C_WaitOnTXISFlagUntilTimeout>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e07b      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b4:	781a      	ldrb	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c0:	1c5a      	adds	r2, r3, #1
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	3b01      	subs	r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065d8:	3b01      	subs	r3, #1
 80065da:	b29a      	uxth	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d034      	beq.n	8006654 <HAL_I2C_Mem_Write+0x1c8>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d130      	bne.n	8006654 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f8:	2200      	movs	r2, #0
 80065fa:	2180      	movs	r1, #128	@ 0x80
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 f8d1 	bl	80067a4 <I2C_WaitOnFlagUntilTimeout>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e04d      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006610:	b29b      	uxth	r3, r3
 8006612:	2bff      	cmp	r3, #255	@ 0xff
 8006614:	d90e      	bls.n	8006634 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	22ff      	movs	r2, #255	@ 0xff
 800661a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006620:	b2da      	uxtb	r2, r3
 8006622:	8979      	ldrh	r1, [r7, #10]
 8006624:	2300      	movs	r3, #0
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 fa73 	bl	8006b18 <I2C_TransferConfig>
 8006632:	e00f      	b.n	8006654 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006638:	b29a      	uxth	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006642:	b2da      	uxtb	r2, r3
 8006644:	8979      	ldrh	r1, [r7, #10]
 8006646:	2300      	movs	r3, #0
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 fa62 	bl	8006b18 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d19e      	bne.n	800659c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 f934 	bl	80068d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e01a      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2220      	movs	r2, #32
 8006678:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6859      	ldr	r1, [r3, #4]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	4b0a      	ldr	r3, [pc, #40]	@ (80066b0 <HAL_I2C_Mem_Write+0x224>)
 8006686:	400b      	ands	r3, r1
 8006688:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e000      	b.n	80066a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80066a6:	2302      	movs	r3, #2
  }
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3718      	adds	r7, #24
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	fe00e800 	.word	0xfe00e800

080066b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b086      	sub	sp, #24
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	4608      	mov	r0, r1
 80066be:	4611      	mov	r1, r2
 80066c0:	461a      	mov	r2, r3
 80066c2:	4603      	mov	r3, r0
 80066c4:	817b      	strh	r3, [r7, #10]
 80066c6:	460b      	mov	r3, r1
 80066c8:	813b      	strh	r3, [r7, #8]
 80066ca:	4613      	mov	r3, r2
 80066cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80066ce:	88fb      	ldrh	r3, [r7, #6]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	8979      	ldrh	r1, [r7, #10]
 80066d4:	4b20      	ldr	r3, [pc, #128]	@ (8006758 <I2C_RequestMemoryWrite+0xa4>)
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 fa1b 	bl	8006b18 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	69b9      	ldr	r1, [r7, #24]
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 f8ab 	bl	8006842 <I2C_WaitOnTXISFlagUntilTimeout>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e02c      	b.n	8006750 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066f6:	88fb      	ldrh	r3, [r7, #6]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d105      	bne.n	8006708 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80066fc:	893b      	ldrh	r3, [r7, #8]
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	629a      	str	r2, [r3, #40]	@ 0x28
 8006706:	e015      	b.n	8006734 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006708:	893b      	ldrh	r3, [r7, #8]
 800670a:	0a1b      	lsrs	r3, r3, #8
 800670c:	b29b      	uxth	r3, r3
 800670e:	b2da      	uxtb	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006716:	69fa      	ldr	r2, [r7, #28]
 8006718:	69b9      	ldr	r1, [r7, #24]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 f891 	bl	8006842 <I2C_WaitOnTXISFlagUntilTimeout>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e012      	b.n	8006750 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800672a:	893b      	ldrh	r3, [r7, #8]
 800672c:	b2da      	uxtb	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	2200      	movs	r2, #0
 800673c:	2180      	movs	r1, #128	@ 0x80
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 f830 	bl	80067a4 <I2C_WaitOnFlagUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e000      	b.n	8006750 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	80002000 	.word	0x80002000

0800675c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b02      	cmp	r3, #2
 8006770:	d103      	bne.n	800677a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2200      	movs	r2, #0
 8006778:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b01      	cmp	r3, #1
 8006786:	d007      	beq.n	8006798 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0201 	orr.w	r2, r2, #1
 8006796:	619a      	str	r2, [r3, #24]
  }
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	603b      	str	r3, [r7, #0]
 80067b0:	4613      	mov	r3, r2
 80067b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067b4:	e031      	b.n	800681a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80067bc:	d02d      	beq.n	800681a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067be:	f7fb fd9b 	bl	80022f8 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	683a      	ldr	r2, [r7, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d302      	bcc.n	80067d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d122      	bne.n	800681a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	4013      	ands	r3, r2
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	bf0c      	ite	eq
 80067e4:	2301      	moveq	r3, #1
 80067e6:	2300      	movne	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	461a      	mov	r2, r3
 80067ec:	79fb      	ldrb	r3, [r7, #7]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d113      	bne.n	800681a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f6:	f043 0220 	orr.w	r2, r3, #32
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e00f      	b.n	800683a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	699a      	ldr	r2, [r3, #24]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4013      	ands	r3, r2
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	429a      	cmp	r2, r3
 8006828:	bf0c      	ite	eq
 800682a:	2301      	moveq	r3, #1
 800682c:	2300      	movne	r3, #0
 800682e:	b2db      	uxtb	r3, r3
 8006830:	461a      	mov	r2, r3
 8006832:	79fb      	ldrb	r3, [r7, #7]
 8006834:	429a      	cmp	r2, r3
 8006836:	d0be      	beq.n	80067b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	60f8      	str	r0, [r7, #12]
 800684a:	60b9      	str	r1, [r7, #8]
 800684c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800684e:	e033      	b.n	80068b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	68b9      	ldr	r1, [r7, #8]
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f87f 	bl	8006958 <I2C_IsErrorOccurred>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e031      	b.n	80068c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800686a:	d025      	beq.n	80068b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800686c:	f7fb fd44 	bl	80022f8 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	429a      	cmp	r2, r3
 800687a:	d302      	bcc.n	8006882 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d11a      	bne.n	80068b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b02      	cmp	r3, #2
 800688e:	d013      	beq.n	80068b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006894:	f043 0220 	orr.w	r2, r3, #32
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2220      	movs	r2, #32
 80068a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e007      	b.n	80068c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d1c4      	bne.n	8006850 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068dc:	e02f      	b.n	800693e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	68b9      	ldr	r1, [r7, #8]
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 f838 	bl	8006958 <I2C_IsErrorOccurred>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e02d      	b.n	800694e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068f2:	f7fb fd01 	bl	80022f8 <HAL_GetTick>
 80068f6:	4602      	mov	r2, r0
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d302      	bcc.n	8006908 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11a      	bne.n	800693e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b20      	cmp	r3, #32
 8006914:	d013      	beq.n	800693e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800691a:	f043 0220 	orr.w	r2, r3, #32
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e007      	b.n	800694e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b20      	cmp	r3, #32
 800694a:	d1c8      	bne.n	80068de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08a      	sub	sp, #40	@ 0x28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	d068      	beq.n	8006a56 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2210      	movs	r2, #16
 800698a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800698c:	e049      	b.n	8006a22 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006994:	d045      	beq.n	8006a22 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006996:	f7fb fcaf 	bl	80022f8 <HAL_GetTick>
 800699a:	4602      	mov	r2, r0
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d302      	bcc.n	80069ac <I2C_IsErrorOccurred+0x54>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d13a      	bne.n	8006a22 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ce:	d121      	bne.n	8006a14 <I2C_IsErrorOccurred+0xbc>
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069d6:	d01d      	beq.n	8006a14 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80069d8:	7cfb      	ldrb	r3, [r7, #19]
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d01a      	beq.n	8006a14 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80069ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80069ee:	f7fb fc83 	bl	80022f8 <HAL_GetTick>
 80069f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069f4:	e00e      	b.n	8006a14 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80069f6:	f7fb fc7f 	bl	80022f8 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	2b19      	cmp	r3, #25
 8006a02:	d907      	bls.n	8006a14 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	f043 0320 	orr.w	r3, r3, #32
 8006a0a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006a12:	e006      	b.n	8006a22 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b20      	cmp	r3, #32
 8006a20:	d1e9      	bne.n	80069f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	699b      	ldr	r3, [r3, #24]
 8006a28:	f003 0320 	and.w	r3, r3, #32
 8006a2c:	2b20      	cmp	r3, #32
 8006a2e:	d003      	beq.n	8006a38 <I2C_IsErrorOccurred+0xe0>
 8006a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0aa      	beq.n	800698e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006a38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d103      	bne.n	8006a48 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2220      	movs	r2, #32
 8006a46:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	f043 0304 	orr.w	r3, r3, #4
 8006a4e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00b      	beq.n	8006a80 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	f043 0301 	orr.w	r3, r3, #1
 8006a6e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00b      	beq.n	8006aa2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f043 0308 	orr.w	r3, r3, #8
 8006a90:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	f043 0302 	orr.w	r3, r3, #2
 8006ab2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006abc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01c      	beq.n	8006b06 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f7ff fe45 	bl	800675c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6859      	ldr	r1, [r3, #4]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	4b0d      	ldr	r3, [pc, #52]	@ (8006b14 <I2C_IsErrorOccurred+0x1bc>)
 8006ade:	400b      	ands	r3, r1
 8006ae0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006b06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3728      	adds	r7, #40	@ 0x28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	fe00e800 	.word	0xfe00e800

08006b18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	607b      	str	r3, [r7, #4]
 8006b22:	460b      	mov	r3, r1
 8006b24:	817b      	strh	r3, [r7, #10]
 8006b26:	4613      	mov	r3, r2
 8006b28:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b2a:	897b      	ldrh	r3, [r7, #10]
 8006b2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b30:	7a7b      	ldrb	r3, [r7, #9]
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b38:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b46:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	0d5b      	lsrs	r3, r3, #21
 8006b52:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006b56:	4b08      	ldr	r3, [pc, #32]	@ (8006b78 <I2C_TransferConfig+0x60>)
 8006b58:	430b      	orrs	r3, r1
 8006b5a:	43db      	mvns	r3, r3
 8006b5c:	ea02 0103 	and.w	r1, r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b6a:	bf00      	nop
 8006b6c:	371c      	adds	r7, #28
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	03ff63ff 	.word	0x03ff63ff

08006b7c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b20      	cmp	r3, #32
 8006b90:	d138      	bne.n	8006c04 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d101      	bne.n	8006ba0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	e032      	b.n	8006c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2224      	movs	r2, #36	@ 0x24
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0201 	bic.w	r2, r2, #1
 8006bbe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006bce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6819      	ldr	r1, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e000      	b.n	8006c06 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006c04:	2302      	movs	r3, #2
  }
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b085      	sub	sp, #20
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
 8006c1a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d139      	bne.n	8006c9c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e033      	b.n	8006c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2224      	movs	r2, #36	@ 0x24
 8006c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f022 0201 	bic.w	r2, r2, #1
 8006c54:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c64:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	021b      	lsls	r3, r3, #8
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e000      	b.n	8006c9e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
  }
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
	...

08006cac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006cb4:	4b19      	ldr	r3, [pc, #100]	@ (8006d1c <HAL_PWREx_ConfigSupply+0x70>)
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	f003 0304 	and.w	r3, r3, #4
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d00a      	beq.n	8006cd6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006cc0:	4b16      	ldr	r3, [pc, #88]	@ (8006d1c <HAL_PWREx_ConfigSupply+0x70>)
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d001      	beq.n	8006cd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e01f      	b.n	8006d12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e01d      	b.n	8006d12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006cd6:	4b11      	ldr	r3, [pc, #68]	@ (8006d1c <HAL_PWREx_ConfigSupply+0x70>)
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	f023 0207 	bic.w	r2, r3, #7
 8006cde:	490f      	ldr	r1, [pc, #60]	@ (8006d1c <HAL_PWREx_ConfigSupply+0x70>)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006ce6:	f7fb fb07 	bl	80022f8 <HAL_GetTick>
 8006cea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006cec:	e009      	b.n	8006d02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006cee:	f7fb fb03 	bl	80022f8 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006cfc:	d901      	bls.n	8006d02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e007      	b.n	8006d12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006d02:	4b06      	ldr	r3, [pc, #24]	@ (8006d1c <HAL_PWREx_ConfigSupply+0x70>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d0e:	d1ee      	bne.n	8006cee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	58024800 	.word	0x58024800

08006d20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08c      	sub	sp, #48	@ 0x30
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d102      	bne.n	8006d34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	f000 bc48 	b.w	80075c4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	f000 8088 	beq.w	8006e52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d42:	4b99      	ldr	r3, [pc, #612]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d4c:	4b96      	ldr	r3, [pc, #600]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d007      	beq.n	8006d68 <HAL_RCC_OscConfig+0x48>
 8006d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5a:	2b18      	cmp	r3, #24
 8006d5c:	d111      	bne.n	8006d82 <HAL_RCC_OscConfig+0x62>
 8006d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d60:	f003 0303 	and.w	r3, r3, #3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d10c      	bne.n	8006d82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d68:	4b8f      	ldr	r3, [pc, #572]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d06d      	beq.n	8006e50 <HAL_RCC_OscConfig+0x130>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d169      	bne.n	8006e50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	f000 bc21 	b.w	80075c4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d8a:	d106      	bne.n	8006d9a <HAL_RCC_OscConfig+0x7a>
 8006d8c:	4b86      	ldr	r3, [pc, #536]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a85      	ldr	r2, [pc, #532]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006d92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d96:	6013      	str	r3, [r2, #0]
 8006d98:	e02e      	b.n	8006df8 <HAL_RCC_OscConfig+0xd8>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10c      	bne.n	8006dbc <HAL_RCC_OscConfig+0x9c>
 8006da2:	4b81      	ldr	r3, [pc, #516]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a80      	ldr	r2, [pc, #512]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dac:	6013      	str	r3, [r2, #0]
 8006dae:	4b7e      	ldr	r3, [pc, #504]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a7d      	ldr	r2, [pc, #500]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006db4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	e01d      	b.n	8006df8 <HAL_RCC_OscConfig+0xd8>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006dc4:	d10c      	bne.n	8006de0 <HAL_RCC_OscConfig+0xc0>
 8006dc6:	4b78      	ldr	r3, [pc, #480]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a77      	ldr	r2, [pc, #476]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006dcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006dd0:	6013      	str	r3, [r2, #0]
 8006dd2:	4b75      	ldr	r3, [pc, #468]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a74      	ldr	r2, [pc, #464]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	e00b      	b.n	8006df8 <HAL_RCC_OscConfig+0xd8>
 8006de0:	4b71      	ldr	r3, [pc, #452]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a70      	ldr	r2, [pc, #448]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006de6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	4b6e      	ldr	r3, [pc, #440]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a6d      	ldr	r2, [pc, #436]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006df2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d013      	beq.n	8006e28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e00:	f7fb fa7a 	bl	80022f8 <HAL_GetTick>
 8006e04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e06:	e008      	b.n	8006e1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e08:	f7fb fa76 	bl	80022f8 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b64      	cmp	r3, #100	@ 0x64
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e3d4      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006e1a:	4b63      	ldr	r3, [pc, #396]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0f0      	beq.n	8006e08 <HAL_RCC_OscConfig+0xe8>
 8006e26:	e014      	b.n	8006e52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e28:	f7fb fa66 	bl	80022f8 <HAL_GetTick>
 8006e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e30:	f7fb fa62 	bl	80022f8 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b64      	cmp	r3, #100	@ 0x64
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e3c0      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e42:	4b59      	ldr	r3, [pc, #356]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f0      	bne.n	8006e30 <HAL_RCC_OscConfig+0x110>
 8006e4e:	e000      	b.n	8006e52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80ca 	beq.w	8006ff4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e60:	4b51      	ldr	r3, [pc, #324]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006e62:	691b      	ldr	r3, [r3, #16]
 8006e64:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e68:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e6a:	4b4f      	ldr	r3, [pc, #316]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d007      	beq.n	8006e86 <HAL_RCC_OscConfig+0x166>
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	2b18      	cmp	r3, #24
 8006e7a:	d156      	bne.n	8006f2a <HAL_RCC_OscConfig+0x20a>
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d151      	bne.n	8006f2a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e86:	4b48      	ldr	r3, [pc, #288]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0304 	and.w	r3, r3, #4
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d005      	beq.n	8006e9e <HAL_RCC_OscConfig+0x17e>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d101      	bne.n	8006e9e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e392      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e9e:	4b42      	ldr	r3, [pc, #264]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f023 0219 	bic.w	r2, r3, #25
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	493f      	ldr	r1, [pc, #252]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb0:	f7fb fa22 	bl	80022f8 <HAL_GetTick>
 8006eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eb6:	e008      	b.n	8006eca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eb8:	f7fb fa1e 	bl	80022f8 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d901      	bls.n	8006eca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e37c      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eca:	4b37      	ldr	r3, [pc, #220]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0f0      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ed6:	f7fb fa3f 	bl	8002358 <HAL_GetREVID>
 8006eda:	4603      	mov	r3, r0
 8006edc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d817      	bhi.n	8006f14 <HAL_RCC_OscConfig+0x1f4>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	2b40      	cmp	r3, #64	@ 0x40
 8006eea:	d108      	bne.n	8006efe <HAL_RCC_OscConfig+0x1de>
 8006eec:	4b2e      	ldr	r3, [pc, #184]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006efa:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006efc:	e07a      	b.n	8006ff4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006efe:	4b2a      	ldr	r3, [pc, #168]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	031b      	lsls	r3, r3, #12
 8006f0c:	4926      	ldr	r1, [pc, #152]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f12:	e06f      	b.n	8006ff4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f14:	4b24      	ldr	r3, [pc, #144]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	061b      	lsls	r3, r3, #24
 8006f22:	4921      	ldr	r1, [pc, #132]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f28:	e064      	b.n	8006ff4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d047      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f32:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f023 0219 	bic.w	r2, r3, #25
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	491a      	ldr	r1, [pc, #104]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006f40:	4313      	orrs	r3, r2
 8006f42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f44:	f7fb f9d8 	bl	80022f8 <HAL_GetTick>
 8006f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f4c:	f7fb f9d4 	bl	80022f8 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e332      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f5e:	4b12      	ldr	r3, [pc, #72]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0304 	and.w	r3, r3, #4
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0f0      	beq.n	8006f4c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f6a:	f7fb f9f5 	bl	8002358 <HAL_GetREVID>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d819      	bhi.n	8006fac <HAL_RCC_OscConfig+0x28c>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b40      	cmp	r3, #64	@ 0x40
 8006f7e:	d108      	bne.n	8006f92 <HAL_RCC_OscConfig+0x272>
 8006f80:	4b09      	ldr	r3, [pc, #36]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006f88:	4a07      	ldr	r2, [pc, #28]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006f8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f8e:	6053      	str	r3, [r2, #4]
 8006f90:	e030      	b.n	8006ff4 <HAL_RCC_OscConfig+0x2d4>
 8006f92:	4b05      	ldr	r3, [pc, #20]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	031b      	lsls	r3, r3, #12
 8006fa0:	4901      	ldr	r1, [pc, #4]	@ (8006fa8 <HAL_RCC_OscConfig+0x288>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	604b      	str	r3, [r1, #4]
 8006fa6:	e025      	b.n	8006ff4 <HAL_RCC_OscConfig+0x2d4>
 8006fa8:	58024400 	.word	0x58024400
 8006fac:	4b9a      	ldr	r3, [pc, #616]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	061b      	lsls	r3, r3, #24
 8006fba:	4997      	ldr	r1, [pc, #604]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	604b      	str	r3, [r1, #4]
 8006fc0:	e018      	b.n	8006ff4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fc2:	4b95      	ldr	r3, [pc, #596]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a94      	ldr	r2, [pc, #592]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8006fc8:	f023 0301 	bic.w	r3, r3, #1
 8006fcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fce:	f7fb f993 	bl	80022f8 <HAL_GetTick>
 8006fd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fd4:	e008      	b.n	8006fe8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fd6:	f7fb f98f 	bl	80022f8 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fde:	1ad3      	subs	r3, r2, r3
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d901      	bls.n	8006fe8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e2ed      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fe8:	4b8b      	ldr	r3, [pc, #556]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1f0      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0310 	and.w	r3, r3, #16
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f000 80a9 	beq.w	8007154 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007002:	4b85      	ldr	r3, [pc, #532]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800700a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800700c:	4b82      	ldr	r3, [pc, #520]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	2b08      	cmp	r3, #8
 8007016:	d007      	beq.n	8007028 <HAL_RCC_OscConfig+0x308>
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	2b18      	cmp	r3, #24
 800701c:	d13a      	bne.n	8007094 <HAL_RCC_OscConfig+0x374>
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	f003 0303 	and.w	r3, r3, #3
 8007024:	2b01      	cmp	r3, #1
 8007026:	d135      	bne.n	8007094 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007028:	4b7b      	ldr	r3, [pc, #492]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <HAL_RCC_OscConfig+0x320>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	2b80      	cmp	r3, #128	@ 0x80
 800703a:	d001      	beq.n	8007040 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e2c1      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007040:	f7fb f98a 	bl	8002358 <HAL_GetREVID>
 8007044:	4603      	mov	r3, r0
 8007046:	f241 0203 	movw	r2, #4099	@ 0x1003
 800704a:	4293      	cmp	r3, r2
 800704c:	d817      	bhi.n	800707e <HAL_RCC_OscConfig+0x35e>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	2b20      	cmp	r3, #32
 8007054:	d108      	bne.n	8007068 <HAL_RCC_OscConfig+0x348>
 8007056:	4b70      	ldr	r3, [pc, #448]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800705e:	4a6e      	ldr	r2, [pc, #440]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8007060:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007064:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007066:	e075      	b.n	8007154 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007068:	4b6b      	ldr	r3, [pc, #428]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a1b      	ldr	r3, [r3, #32]
 8007074:	069b      	lsls	r3, r3, #26
 8007076:	4968      	ldr	r1, [pc, #416]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8007078:	4313      	orrs	r3, r2
 800707a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800707c:	e06a      	b.n	8007154 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800707e:	4b66      	ldr	r3, [pc, #408]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	061b      	lsls	r3, r3, #24
 800708c:	4962      	ldr	r1, [pc, #392]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 800708e:	4313      	orrs	r3, r2
 8007090:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007092:	e05f      	b.n	8007154 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d042      	beq.n	8007122 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800709c:	4b5e      	ldr	r3, [pc, #376]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a5d      	ldr	r2, [pc, #372]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 80070a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a8:	f7fb f926 	bl	80022f8 <HAL_GetTick>
 80070ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070ae:	e008      	b.n	80070c2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80070b0:	f7fb f922 	bl	80022f8 <HAL_GetTick>
 80070b4:	4602      	mov	r2, r0
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e280      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070c2:	4b55      	ldr	r3, [pc, #340]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d0f0      	beq.n	80070b0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070ce:	f7fb f943 	bl	8002358 <HAL_GetREVID>
 80070d2:	4603      	mov	r3, r0
 80070d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80070d8:	4293      	cmp	r3, r2
 80070da:	d817      	bhi.n	800710c <HAL_RCC_OscConfig+0x3ec>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d108      	bne.n	80070f6 <HAL_RCC_OscConfig+0x3d6>
 80070e4:	4b4c      	ldr	r3, [pc, #304]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80070ec:	4a4a      	ldr	r2, [pc, #296]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 80070ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070f2:	6053      	str	r3, [r2, #4]
 80070f4:	e02e      	b.n	8007154 <HAL_RCC_OscConfig+0x434>
 80070f6:	4b48      	ldr	r3, [pc, #288]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	069b      	lsls	r3, r3, #26
 8007104:	4944      	ldr	r1, [pc, #272]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8007106:	4313      	orrs	r3, r2
 8007108:	604b      	str	r3, [r1, #4]
 800710a:	e023      	b.n	8007154 <HAL_RCC_OscConfig+0x434>
 800710c:	4b42      	ldr	r3, [pc, #264]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	061b      	lsls	r3, r3, #24
 800711a:	493f      	ldr	r1, [pc, #252]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 800711c:	4313      	orrs	r3, r2
 800711e:	60cb      	str	r3, [r1, #12]
 8007120:	e018      	b.n	8007154 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007122:	4b3d      	ldr	r3, [pc, #244]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a3c      	ldr	r2, [pc, #240]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8007128:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800712c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712e:	f7fb f8e3 	bl	80022f8 <HAL_GetTick>
 8007132:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007134:	e008      	b.n	8007148 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007136:	f7fb f8df 	bl	80022f8 <HAL_GetTick>
 800713a:	4602      	mov	r2, r0
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	1ad3      	subs	r3, r2, r3
 8007140:	2b02      	cmp	r3, #2
 8007142:	d901      	bls.n	8007148 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e23d      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007148:	4b33      	ldr	r3, [pc, #204]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f0      	bne.n	8007136 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0308 	and.w	r3, r3, #8
 800715c:	2b00      	cmp	r3, #0
 800715e:	d036      	beq.n	80071ce <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d019      	beq.n	800719c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007168:	4b2b      	ldr	r3, [pc, #172]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 800716a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800716c:	4a2a      	ldr	r2, [pc, #168]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 800716e:	f043 0301 	orr.w	r3, r3, #1
 8007172:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007174:	f7fb f8c0 	bl	80022f8 <HAL_GetTick>
 8007178:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800717c:	f7fb f8bc 	bl	80022f8 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e21a      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800718e:	4b22      	ldr	r3, [pc, #136]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 8007190:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0f0      	beq.n	800717c <HAL_RCC_OscConfig+0x45c>
 800719a:	e018      	b.n	80071ce <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800719c:	4b1e      	ldr	r3, [pc, #120]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 800719e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 80071a2:	f023 0301 	bic.w	r3, r3, #1
 80071a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071a8:	f7fb f8a6 	bl	80022f8 <HAL_GetTick>
 80071ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071b0:	f7fb f8a2 	bl	80022f8 <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e200      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071c2:	4b15      	ldr	r3, [pc, #84]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 80071c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1f0      	bne.n	80071b0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d039      	beq.n	800724e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d01c      	beq.n	800721c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 80071e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80071ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071ee:	f7fb f883 	bl	80022f8 <HAL_GetTick>
 80071f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071f4:	e008      	b.n	8007208 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071f6:	f7fb f87f 	bl	80022f8 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e1dd      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007208:	4b03      	ldr	r3, [pc, #12]	@ (8007218 <HAL_RCC_OscConfig+0x4f8>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0f0      	beq.n	80071f6 <HAL_RCC_OscConfig+0x4d6>
 8007214:	e01b      	b.n	800724e <HAL_RCC_OscConfig+0x52e>
 8007216:	bf00      	nop
 8007218:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800721c:	4b9b      	ldr	r3, [pc, #620]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a9a      	ldr	r2, [pc, #616]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007222:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007226:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007228:	f7fb f866 	bl	80022f8 <HAL_GetTick>
 800722c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800722e:	e008      	b.n	8007242 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007230:	f7fb f862 	bl	80022f8 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	2b02      	cmp	r3, #2
 800723c:	d901      	bls.n	8007242 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e1c0      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007242:	4b92      	ldr	r3, [pc, #584]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1f0      	bne.n	8007230 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0304 	and.w	r3, r3, #4
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 8081 	beq.w	800735e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800725c:	4b8c      	ldr	r3, [pc, #560]	@ (8007490 <HAL_RCC_OscConfig+0x770>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a8b      	ldr	r2, [pc, #556]	@ (8007490 <HAL_RCC_OscConfig+0x770>)
 8007262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007266:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007268:	f7fb f846 	bl	80022f8 <HAL_GetTick>
 800726c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007270:	f7fb f842 	bl	80022f8 <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b64      	cmp	r3, #100	@ 0x64
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e1a0      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007282:	4b83      	ldr	r3, [pc, #524]	@ (8007490 <HAL_RCC_OscConfig+0x770>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0f0      	beq.n	8007270 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d106      	bne.n	80072a4 <HAL_RCC_OscConfig+0x584>
 8007296:	4b7d      	ldr	r3, [pc, #500]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800729a:	4a7c      	ldr	r2, [pc, #496]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 800729c:	f043 0301 	orr.w	r3, r3, #1
 80072a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80072a2:	e02d      	b.n	8007300 <HAL_RCC_OscConfig+0x5e0>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10c      	bne.n	80072c6 <HAL_RCC_OscConfig+0x5a6>
 80072ac:	4b77      	ldr	r3, [pc, #476]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80072ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b0:	4a76      	ldr	r2, [pc, #472]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80072b2:	f023 0301 	bic.w	r3, r3, #1
 80072b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80072b8:	4b74      	ldr	r3, [pc, #464]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80072ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072bc:	4a73      	ldr	r2, [pc, #460]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80072be:	f023 0304 	bic.w	r3, r3, #4
 80072c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80072c4:	e01c      	b.n	8007300 <HAL_RCC_OscConfig+0x5e0>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	2b05      	cmp	r3, #5
 80072cc:	d10c      	bne.n	80072e8 <HAL_RCC_OscConfig+0x5c8>
 80072ce:	4b6f      	ldr	r3, [pc, #444]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80072d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d2:	4a6e      	ldr	r2, [pc, #440]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80072d4:	f043 0304 	orr.w	r3, r3, #4
 80072d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80072da:	4b6c      	ldr	r3, [pc, #432]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80072dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072de:	4a6b      	ldr	r2, [pc, #428]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80072e0:	f043 0301 	orr.w	r3, r3, #1
 80072e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80072e6:	e00b      	b.n	8007300 <HAL_RCC_OscConfig+0x5e0>
 80072e8:	4b68      	ldr	r3, [pc, #416]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80072ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072ec:	4a67      	ldr	r2, [pc, #412]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80072ee:	f023 0301 	bic.w	r3, r3, #1
 80072f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80072f4:	4b65      	ldr	r3, [pc, #404]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80072f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072f8:	4a64      	ldr	r2, [pc, #400]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80072fa:	f023 0304 	bic.w	r3, r3, #4
 80072fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d015      	beq.n	8007334 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007308:	f7fa fff6 	bl	80022f8 <HAL_GetTick>
 800730c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800730e:	e00a      	b.n	8007326 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007310:	f7fa fff2 	bl	80022f8 <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800731e:	4293      	cmp	r3, r2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e14e      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007326:	4b59      	ldr	r3, [pc, #356]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0ee      	beq.n	8007310 <HAL_RCC_OscConfig+0x5f0>
 8007332:	e014      	b.n	800735e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007334:	f7fa ffe0 	bl	80022f8 <HAL_GetTick>
 8007338:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800733a:	e00a      	b.n	8007352 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800733c:	f7fa ffdc 	bl	80022f8 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	f241 3288 	movw	r2, #5000	@ 0x1388
 800734a:	4293      	cmp	r3, r2
 800734c:	d901      	bls.n	8007352 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e138      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007352:	4b4e      	ldr	r3, [pc, #312]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1ee      	bne.n	800733c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 812d 	beq.w	80075c2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007368:	4b48      	ldr	r3, [pc, #288]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007370:	2b18      	cmp	r3, #24
 8007372:	f000 80bd 	beq.w	80074f0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737a:	2b02      	cmp	r3, #2
 800737c:	f040 809e 	bne.w	80074bc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007380:	4b42      	ldr	r3, [pc, #264]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a41      	ldr	r2, [pc, #260]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007386:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800738a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800738c:	f7fa ffb4 	bl	80022f8 <HAL_GetTick>
 8007390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007392:	e008      	b.n	80073a6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007394:	f7fa ffb0 	bl	80022f8 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d901      	bls.n	80073a6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	e10e      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073a6:	4b39      	ldr	r3, [pc, #228]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1f0      	bne.n	8007394 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80073b2:	4b36      	ldr	r3, [pc, #216]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80073b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073b6:	4b37      	ldr	r3, [pc, #220]	@ (8007494 <HAL_RCC_OscConfig+0x774>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80073c2:	0112      	lsls	r2, r2, #4
 80073c4:	430a      	orrs	r2, r1
 80073c6:	4931      	ldr	r1, [pc, #196]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d0:	3b01      	subs	r3, #1
 80073d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073da:	3b01      	subs	r3, #1
 80073dc:	025b      	lsls	r3, r3, #9
 80073de:	b29b      	uxth	r3, r3
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e6:	3b01      	subs	r3, #1
 80073e8:	041b      	lsls	r3, r3, #16
 80073ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f4:	3b01      	subs	r3, #1
 80073f6:	061b      	lsls	r3, r3, #24
 80073f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073fc:	4923      	ldr	r1, [pc, #140]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007402:	4b22      	ldr	r3, [pc, #136]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007406:	4a21      	ldr	r2, [pc, #132]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007408:	f023 0301 	bic.w	r3, r3, #1
 800740c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800740e:	4b1f      	ldr	r3, [pc, #124]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007410:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007412:	4b21      	ldr	r3, [pc, #132]	@ (8007498 <HAL_RCC_OscConfig+0x778>)
 8007414:	4013      	ands	r3, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800741a:	00d2      	lsls	r2, r2, #3
 800741c:	491b      	ldr	r1, [pc, #108]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 800741e:	4313      	orrs	r3, r2
 8007420:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007422:	4b1a      	ldr	r3, [pc, #104]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007426:	f023 020c 	bic.w	r2, r3, #12
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800742e:	4917      	ldr	r1, [pc, #92]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007430:	4313      	orrs	r3, r2
 8007432:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007434:	4b15      	ldr	r3, [pc, #84]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007438:	f023 0202 	bic.w	r2, r3, #2
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007440:	4912      	ldr	r1, [pc, #72]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007442:	4313      	orrs	r3, r2
 8007444:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007446:	4b11      	ldr	r3, [pc, #68]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800744a:	4a10      	ldr	r2, [pc, #64]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 800744c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007450:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007452:	4b0e      	ldr	r3, [pc, #56]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007456:	4a0d      	ldr	r2, [pc, #52]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800745c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800745e:	4b0b      	ldr	r3, [pc, #44]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007462:	4a0a      	ldr	r2, [pc, #40]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007468:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800746a:	4b08      	ldr	r3, [pc, #32]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 800746c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746e:	4a07      	ldr	r2, [pc, #28]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007470:	f043 0301 	orr.w	r3, r3, #1
 8007474:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007476:	4b05      	ldr	r3, [pc, #20]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a04      	ldr	r2, [pc, #16]	@ (800748c <HAL_RCC_OscConfig+0x76c>)
 800747c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007482:	f7fa ff39 	bl	80022f8 <HAL_GetTick>
 8007486:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007488:	e011      	b.n	80074ae <HAL_RCC_OscConfig+0x78e>
 800748a:	bf00      	nop
 800748c:	58024400 	.word	0x58024400
 8007490:	58024800 	.word	0x58024800
 8007494:	fffffc0c 	.word	0xfffffc0c
 8007498:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800749c:	f7fa ff2c 	bl	80022f8 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e08a      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074ae:	4b47      	ldr	r3, [pc, #284]	@ (80075cc <HAL_RCC_OscConfig+0x8ac>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0f0      	beq.n	800749c <HAL_RCC_OscConfig+0x77c>
 80074ba:	e082      	b.n	80075c2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074bc:	4b43      	ldr	r3, [pc, #268]	@ (80075cc <HAL_RCC_OscConfig+0x8ac>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a42      	ldr	r2, [pc, #264]	@ (80075cc <HAL_RCC_OscConfig+0x8ac>)
 80074c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c8:	f7fa ff16 	bl	80022f8 <HAL_GetTick>
 80074cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d0:	f7fa ff12 	bl	80022f8 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e070      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074e2:	4b3a      	ldr	r3, [pc, #232]	@ (80075cc <HAL_RCC_OscConfig+0x8ac>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1f0      	bne.n	80074d0 <HAL_RCC_OscConfig+0x7b0>
 80074ee:	e068      	b.n	80075c2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80074f0:	4b36      	ldr	r3, [pc, #216]	@ (80075cc <HAL_RCC_OscConfig+0x8ac>)
 80074f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80074f6:	4b35      	ldr	r3, [pc, #212]	@ (80075cc <HAL_RCC_OscConfig+0x8ac>)
 80074f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007500:	2b01      	cmp	r3, #1
 8007502:	d031      	beq.n	8007568 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f003 0203 	and.w	r2, r3, #3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800750e:	429a      	cmp	r2, r3
 8007510:	d12a      	bne.n	8007568 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	091b      	lsrs	r3, r3, #4
 8007516:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800751e:	429a      	cmp	r2, r3
 8007520:	d122      	bne.n	8007568 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800752e:	429a      	cmp	r2, r3
 8007530:	d11a      	bne.n	8007568 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	0a5b      	lsrs	r3, r3, #9
 8007536:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800753e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007540:	429a      	cmp	r2, r3
 8007542:	d111      	bne.n	8007568 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	0c1b      	lsrs	r3, r3, #16
 8007548:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007550:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007552:	429a      	cmp	r2, r3
 8007554:	d108      	bne.n	8007568 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	0e1b      	lsrs	r3, r3, #24
 800755a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007562:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007564:	429a      	cmp	r2, r3
 8007566:	d001      	beq.n	800756c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e02b      	b.n	80075c4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800756c:	4b17      	ldr	r3, [pc, #92]	@ (80075cc <HAL_RCC_OscConfig+0x8ac>)
 800756e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007570:	08db      	lsrs	r3, r3, #3
 8007572:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007576:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	429a      	cmp	r2, r3
 8007580:	d01f      	beq.n	80075c2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007582:	4b12      	ldr	r3, [pc, #72]	@ (80075cc <HAL_RCC_OscConfig+0x8ac>)
 8007584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007586:	4a11      	ldr	r2, [pc, #68]	@ (80075cc <HAL_RCC_OscConfig+0x8ac>)
 8007588:	f023 0301 	bic.w	r3, r3, #1
 800758c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800758e:	f7fa feb3 	bl	80022f8 <HAL_GetTick>
 8007592:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007594:	bf00      	nop
 8007596:	f7fa feaf 	bl	80022f8 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759e:	4293      	cmp	r3, r2
 80075a0:	d0f9      	beq.n	8007596 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075a2:	4b0a      	ldr	r3, [pc, #40]	@ (80075cc <HAL_RCC_OscConfig+0x8ac>)
 80075a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80075a6:	4b0a      	ldr	r3, [pc, #40]	@ (80075d0 <HAL_RCC_OscConfig+0x8b0>)
 80075a8:	4013      	ands	r3, r2
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80075ae:	00d2      	lsls	r2, r2, #3
 80075b0:	4906      	ldr	r1, [pc, #24]	@ (80075cc <HAL_RCC_OscConfig+0x8ac>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80075b6:	4b05      	ldr	r3, [pc, #20]	@ (80075cc <HAL_RCC_OscConfig+0x8ac>)
 80075b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ba:	4a04      	ldr	r2, [pc, #16]	@ (80075cc <HAL_RCC_OscConfig+0x8ac>)
 80075bc:	f043 0301 	orr.w	r3, r3, #1
 80075c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3730      	adds	r7, #48	@ 0x30
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	58024400 	.word	0x58024400
 80075d0:	ffff0007 	.word	0xffff0007

080075d4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e19c      	b.n	8007922 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075e8:	4b8a      	ldr	r3, [pc, #552]	@ (8007814 <HAL_RCC_ClockConfig+0x240>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 030f 	and.w	r3, r3, #15
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d910      	bls.n	8007618 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f6:	4b87      	ldr	r3, [pc, #540]	@ (8007814 <HAL_RCC_ClockConfig+0x240>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f023 020f 	bic.w	r2, r3, #15
 80075fe:	4985      	ldr	r1, [pc, #532]	@ (8007814 <HAL_RCC_ClockConfig+0x240>)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	4313      	orrs	r3, r2
 8007604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007606:	4b83      	ldr	r3, [pc, #524]	@ (8007814 <HAL_RCC_ClockConfig+0x240>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 030f 	and.w	r3, r3, #15
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	429a      	cmp	r2, r3
 8007612:	d001      	beq.n	8007618 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007614:	2301      	movs	r3, #1
 8007616:	e184      	b.n	8007922 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d010      	beq.n	8007646 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	4b7b      	ldr	r3, [pc, #492]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007630:	429a      	cmp	r2, r3
 8007632:	d908      	bls.n	8007646 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007634:	4b78      	ldr	r3, [pc, #480]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 8007636:	699b      	ldr	r3, [r3, #24]
 8007638:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	691b      	ldr	r3, [r3, #16]
 8007640:	4975      	ldr	r1, [pc, #468]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 8007642:	4313      	orrs	r3, r2
 8007644:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0308 	and.w	r3, r3, #8
 800764e:	2b00      	cmp	r3, #0
 8007650:	d010      	beq.n	8007674 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	695a      	ldr	r2, [r3, #20]
 8007656:	4b70      	ldr	r3, [pc, #448]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 8007658:	69db      	ldr	r3, [r3, #28]
 800765a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800765e:	429a      	cmp	r2, r3
 8007660:	d908      	bls.n	8007674 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007662:	4b6d      	ldr	r3, [pc, #436]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	496a      	ldr	r1, [pc, #424]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 8007670:	4313      	orrs	r3, r2
 8007672:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0310 	and.w	r3, r3, #16
 800767c:	2b00      	cmp	r3, #0
 800767e:	d010      	beq.n	80076a2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699a      	ldr	r2, [r3, #24]
 8007684:	4b64      	ldr	r3, [pc, #400]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 8007686:	69db      	ldr	r3, [r3, #28]
 8007688:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800768c:	429a      	cmp	r2, r3
 800768e:	d908      	bls.n	80076a2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007690:	4b61      	ldr	r3, [pc, #388]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	495e      	ldr	r1, [pc, #376]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0320 	and.w	r3, r3, #32
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d010      	beq.n	80076d0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	69da      	ldr	r2, [r3, #28]
 80076b2:	4b59      	ldr	r3, [pc, #356]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d908      	bls.n	80076d0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80076be:	4b56      	ldr	r3, [pc, #344]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	4953      	ldr	r1, [pc, #332]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d010      	beq.n	80076fe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	4b4d      	ldr	r3, [pc, #308]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	f003 030f 	and.w	r3, r3, #15
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d908      	bls.n	80076fe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076ec:	4b4a      	ldr	r3, [pc, #296]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	f023 020f 	bic.w	r2, r3, #15
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	4947      	ldr	r1, [pc, #284]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d055      	beq.n	80077b6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800770a:	4b43      	ldr	r3, [pc, #268]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	4940      	ldr	r1, [pc, #256]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 8007718:	4313      	orrs	r3, r2
 800771a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	2b02      	cmp	r3, #2
 8007722:	d107      	bne.n	8007734 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007724:	4b3c      	ldr	r3, [pc, #240]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d121      	bne.n	8007774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007730:	2301      	movs	r3, #1
 8007732:	e0f6      	b.n	8007922 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2b03      	cmp	r3, #3
 800773a:	d107      	bne.n	800774c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800773c:	4b36      	ldr	r3, [pc, #216]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d115      	bne.n	8007774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	e0ea      	b.n	8007922 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d107      	bne.n	8007764 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007754:	4b30      	ldr	r3, [pc, #192]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800775c:	2b00      	cmp	r3, #0
 800775e:	d109      	bne.n	8007774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e0de      	b.n	8007922 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007764:	4b2c      	ldr	r3, [pc, #176]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e0d6      	b.n	8007922 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007774:	4b28      	ldr	r3, [pc, #160]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 8007776:	691b      	ldr	r3, [r3, #16]
 8007778:	f023 0207 	bic.w	r2, r3, #7
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	4925      	ldr	r1, [pc, #148]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 8007782:	4313      	orrs	r3, r2
 8007784:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007786:	f7fa fdb7 	bl	80022f8 <HAL_GetTick>
 800778a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800778c:	e00a      	b.n	80077a4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800778e:	f7fa fdb3 	bl	80022f8 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800779c:	4293      	cmp	r3, r2
 800779e:	d901      	bls.n	80077a4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e0be      	b.n	8007922 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 80077a6:	691b      	ldr	r3, [r3, #16]
 80077a8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d1eb      	bne.n	800778e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d010      	beq.n	80077e4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	4b14      	ldr	r3, [pc, #80]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d208      	bcs.n	80077e4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077d2:	4b11      	ldr	r3, [pc, #68]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	f023 020f 	bic.w	r2, r3, #15
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	490e      	ldr	r1, [pc, #56]	@ (8007818 <HAL_RCC_ClockConfig+0x244>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007814 <HAL_RCC_ClockConfig+0x240>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 030f 	and.w	r3, r3, #15
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d214      	bcs.n	800781c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077f2:	4b08      	ldr	r3, [pc, #32]	@ (8007814 <HAL_RCC_ClockConfig+0x240>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f023 020f 	bic.w	r2, r3, #15
 80077fa:	4906      	ldr	r1, [pc, #24]	@ (8007814 <HAL_RCC_ClockConfig+0x240>)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	4313      	orrs	r3, r2
 8007800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007802:	4b04      	ldr	r3, [pc, #16]	@ (8007814 <HAL_RCC_ClockConfig+0x240>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 030f 	and.w	r3, r3, #15
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	429a      	cmp	r2, r3
 800780e:	d005      	beq.n	800781c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e086      	b.n	8007922 <HAL_RCC_ClockConfig+0x34e>
 8007814:	52002000 	.word	0x52002000
 8007818:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b00      	cmp	r3, #0
 8007826:	d010      	beq.n	800784a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691a      	ldr	r2, [r3, #16]
 800782c:	4b3f      	ldr	r3, [pc, #252]	@ (800792c <HAL_RCC_ClockConfig+0x358>)
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007834:	429a      	cmp	r2, r3
 8007836:	d208      	bcs.n	800784a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007838:	4b3c      	ldr	r3, [pc, #240]	@ (800792c <HAL_RCC_ClockConfig+0x358>)
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	4939      	ldr	r1, [pc, #228]	@ (800792c <HAL_RCC_ClockConfig+0x358>)
 8007846:	4313      	orrs	r3, r2
 8007848:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	2b00      	cmp	r3, #0
 8007854:	d010      	beq.n	8007878 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	695a      	ldr	r2, [r3, #20]
 800785a:	4b34      	ldr	r3, [pc, #208]	@ (800792c <HAL_RCC_ClockConfig+0x358>)
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007862:	429a      	cmp	r2, r3
 8007864:	d208      	bcs.n	8007878 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007866:	4b31      	ldr	r3, [pc, #196]	@ (800792c <HAL_RCC_ClockConfig+0x358>)
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	492e      	ldr	r1, [pc, #184]	@ (800792c <HAL_RCC_ClockConfig+0x358>)
 8007874:	4313      	orrs	r3, r2
 8007876:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 0310 	and.w	r3, r3, #16
 8007880:	2b00      	cmp	r3, #0
 8007882:	d010      	beq.n	80078a6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	699a      	ldr	r2, [r3, #24]
 8007888:	4b28      	ldr	r3, [pc, #160]	@ (800792c <HAL_RCC_ClockConfig+0x358>)
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007890:	429a      	cmp	r2, r3
 8007892:	d208      	bcs.n	80078a6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007894:	4b25      	ldr	r3, [pc, #148]	@ (800792c <HAL_RCC_ClockConfig+0x358>)
 8007896:	69db      	ldr	r3, [r3, #28]
 8007898:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	4922      	ldr	r1, [pc, #136]	@ (800792c <HAL_RCC_ClockConfig+0x358>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0320 	and.w	r3, r3, #32
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d010      	beq.n	80078d4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	69da      	ldr	r2, [r3, #28]
 80078b6:	4b1d      	ldr	r3, [pc, #116]	@ (800792c <HAL_RCC_ClockConfig+0x358>)
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078be:	429a      	cmp	r2, r3
 80078c0:	d208      	bcs.n	80078d4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80078c2:	4b1a      	ldr	r3, [pc, #104]	@ (800792c <HAL_RCC_ClockConfig+0x358>)
 80078c4:	6a1b      	ldr	r3, [r3, #32]
 80078c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	4917      	ldr	r1, [pc, #92]	@ (800792c <HAL_RCC_ClockConfig+0x358>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80078d4:	f000 f834 	bl	8007940 <HAL_RCC_GetSysClockFreq>
 80078d8:	4602      	mov	r2, r0
 80078da:	4b14      	ldr	r3, [pc, #80]	@ (800792c <HAL_RCC_ClockConfig+0x358>)
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	0a1b      	lsrs	r3, r3, #8
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	4912      	ldr	r1, [pc, #72]	@ (8007930 <HAL_RCC_ClockConfig+0x35c>)
 80078e6:	5ccb      	ldrb	r3, [r1, r3]
 80078e8:	f003 031f 	and.w	r3, r3, #31
 80078ec:	fa22 f303 	lsr.w	r3, r2, r3
 80078f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078f2:	4b0e      	ldr	r3, [pc, #56]	@ (800792c <HAL_RCC_ClockConfig+0x358>)
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	f003 030f 	and.w	r3, r3, #15
 80078fa:	4a0d      	ldr	r2, [pc, #52]	@ (8007930 <HAL_RCC_ClockConfig+0x35c>)
 80078fc:	5cd3      	ldrb	r3, [r2, r3]
 80078fe:	f003 031f 	and.w	r3, r3, #31
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	fa22 f303 	lsr.w	r3, r2, r3
 8007908:	4a0a      	ldr	r2, [pc, #40]	@ (8007934 <HAL_RCC_ClockConfig+0x360>)
 800790a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800790c:	4a0a      	ldr	r2, [pc, #40]	@ (8007938 <HAL_RCC_ClockConfig+0x364>)
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007912:	4b0a      	ldr	r3, [pc, #40]	@ (800793c <HAL_RCC_ClockConfig+0x368>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4618      	mov	r0, r3
 8007918:	f7fa f9f0 	bl	8001cfc <HAL_InitTick>
 800791c:	4603      	mov	r3, r0
 800791e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007920:	7bfb      	ldrb	r3, [r7, #15]
}
 8007922:	4618      	mov	r0, r3
 8007924:	3718      	adds	r7, #24
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop
 800792c:	58024400 	.word	0x58024400
 8007930:	0802336c 	.word	0x0802336c
 8007934:	24000004 	.word	0x24000004
 8007938:	24000000 	.word	0x24000000
 800793c:	24000008 	.word	0x24000008

08007940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007940:	b480      	push	{r7}
 8007942:	b089      	sub	sp, #36	@ 0x24
 8007944:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007946:	4bb3      	ldr	r3, [pc, #716]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800794e:	2b18      	cmp	r3, #24
 8007950:	f200 8155 	bhi.w	8007bfe <HAL_RCC_GetSysClockFreq+0x2be>
 8007954:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795a:	bf00      	nop
 800795c:	080079c1 	.word	0x080079c1
 8007960:	08007bff 	.word	0x08007bff
 8007964:	08007bff 	.word	0x08007bff
 8007968:	08007bff 	.word	0x08007bff
 800796c:	08007bff 	.word	0x08007bff
 8007970:	08007bff 	.word	0x08007bff
 8007974:	08007bff 	.word	0x08007bff
 8007978:	08007bff 	.word	0x08007bff
 800797c:	080079e7 	.word	0x080079e7
 8007980:	08007bff 	.word	0x08007bff
 8007984:	08007bff 	.word	0x08007bff
 8007988:	08007bff 	.word	0x08007bff
 800798c:	08007bff 	.word	0x08007bff
 8007990:	08007bff 	.word	0x08007bff
 8007994:	08007bff 	.word	0x08007bff
 8007998:	08007bff 	.word	0x08007bff
 800799c:	080079ed 	.word	0x080079ed
 80079a0:	08007bff 	.word	0x08007bff
 80079a4:	08007bff 	.word	0x08007bff
 80079a8:	08007bff 	.word	0x08007bff
 80079ac:	08007bff 	.word	0x08007bff
 80079b0:	08007bff 	.word	0x08007bff
 80079b4:	08007bff 	.word	0x08007bff
 80079b8:	08007bff 	.word	0x08007bff
 80079bc:	080079f3 	.word	0x080079f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079c0:	4b94      	ldr	r3, [pc, #592]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d009      	beq.n	80079e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079cc:	4b91      	ldr	r3, [pc, #580]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	08db      	lsrs	r3, r3, #3
 80079d2:	f003 0303 	and.w	r3, r3, #3
 80079d6:	4a90      	ldr	r2, [pc, #576]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079d8:	fa22 f303 	lsr.w	r3, r2, r3
 80079dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80079de:	e111      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80079e0:	4b8d      	ldr	r3, [pc, #564]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079e2:	61bb      	str	r3, [r7, #24]
      break;
 80079e4:	e10e      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80079e6:	4b8d      	ldr	r3, [pc, #564]	@ (8007c1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079e8:	61bb      	str	r3, [r7, #24]
      break;
 80079ea:	e10b      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80079ec:	4b8c      	ldr	r3, [pc, #560]	@ (8007c20 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80079ee:	61bb      	str	r3, [r7, #24]
      break;
 80079f0:	e108      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079f2:	4b88      	ldr	r3, [pc, #544]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f6:	f003 0303 	and.w	r3, r3, #3
 80079fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80079fc:	4b85      	ldr	r3, [pc, #532]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a00:	091b      	lsrs	r3, r3, #4
 8007a02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a06:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a08:	4b82      	ldr	r3, [pc, #520]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007a12:	4b80      	ldr	r3, [pc, #512]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a16:	08db      	lsrs	r3, r3, #3
 8007a18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	fb02 f303 	mul.w	r3, r2, r3
 8007a22:	ee07 3a90 	vmov	s15, r3
 8007a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 80e1 	beq.w	8007bf8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	f000 8083 	beq.w	8007b44 <HAL_RCC_GetSysClockFreq+0x204>
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	f200 80a1 	bhi.w	8007b88 <HAL_RCC_GetSysClockFreq+0x248>
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <HAL_RCC_GetSysClockFreq+0x114>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d056      	beq.n	8007b00 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a52:	e099      	b.n	8007b88 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a54:	4b6f      	ldr	r3, [pc, #444]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0320 	and.w	r3, r3, #32
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d02d      	beq.n	8007abc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a60:	4b6c      	ldr	r3, [pc, #432]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	08db      	lsrs	r3, r3, #3
 8007a66:	f003 0303 	and.w	r3, r3, #3
 8007a6a:	4a6b      	ldr	r2, [pc, #428]	@ (8007c18 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a70:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	ee07 3a90 	vmov	s15, r3
 8007a78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	ee07 3a90 	vmov	s15, r3
 8007a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a8a:	4b62      	ldr	r3, [pc, #392]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a92:	ee07 3a90 	vmov	s15, r3
 8007a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a9e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ab6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007aba:	e087      	b.n	8007bcc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ac6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007c28 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ace:	4b51      	ldr	r3, [pc, #324]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ad6:	ee07 3a90 	vmov	s15, r3
 8007ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ade:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ae2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007afa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007afe:	e065      	b.n	8007bcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007c2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b12:	4b40      	ldr	r3, [pc, #256]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b1a:	ee07 3a90 	vmov	s15, r3
 8007b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b26:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b42:	e043      	b.n	8007bcc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	ee07 3a90 	vmov	s15, r3
 8007b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b4e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007c30 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b56:	4b2f      	ldr	r3, [pc, #188]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b5e:	ee07 3a90 	vmov	s15, r3
 8007b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b6a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b86:	e021      	b.n	8007bcc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	ee07 3a90 	vmov	s15, r3
 8007b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b92:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007c2c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba2:	ee07 3a90 	vmov	s15, r3
 8007ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bae:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007c24 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007bcc:	4b11      	ldr	r3, [pc, #68]	@ (8007c14 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd0:	0a5b      	lsrs	r3, r3, #9
 8007bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	ee07 3a90 	vmov	s15, r3
 8007be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007be4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bf0:	ee17 3a90 	vmov	r3, s15
 8007bf4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007bf6:	e005      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	61bb      	str	r3, [r7, #24]
      break;
 8007bfc:	e002      	b.n	8007c04 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007bfe:	4b07      	ldr	r3, [pc, #28]	@ (8007c1c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c00:	61bb      	str	r3, [r7, #24]
      break;
 8007c02:	bf00      	nop
  }

  return sysclockfreq;
 8007c04:	69bb      	ldr	r3, [r7, #24]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3724      	adds	r7, #36	@ 0x24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	58024400 	.word	0x58024400
 8007c18:	03d09000 	.word	0x03d09000
 8007c1c:	003d0900 	.word	0x003d0900
 8007c20:	017d7840 	.word	0x017d7840
 8007c24:	46000000 	.word	0x46000000
 8007c28:	4c742400 	.word	0x4c742400
 8007c2c:	4a742400 	.word	0x4a742400
 8007c30:	4bbebc20 	.word	0x4bbebc20

08007c34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c3a:	f7ff fe81 	bl	8007940 <HAL_RCC_GetSysClockFreq>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	4b10      	ldr	r3, [pc, #64]	@ (8007c84 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c42:	699b      	ldr	r3, [r3, #24]
 8007c44:	0a1b      	lsrs	r3, r3, #8
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	490f      	ldr	r1, [pc, #60]	@ (8007c88 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c4c:	5ccb      	ldrb	r3, [r1, r3]
 8007c4e:	f003 031f 	and.w	r3, r3, #31
 8007c52:	fa22 f303 	lsr.w	r3, r2, r3
 8007c56:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c58:	4b0a      	ldr	r3, [pc, #40]	@ (8007c84 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	f003 030f 	and.w	r3, r3, #15
 8007c60:	4a09      	ldr	r2, [pc, #36]	@ (8007c88 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c62:	5cd3      	ldrb	r3, [r2, r3]
 8007c64:	f003 031f 	and.w	r3, r3, #31
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c6e:	4a07      	ldr	r2, [pc, #28]	@ (8007c8c <HAL_RCC_GetHCLKFreq+0x58>)
 8007c70:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c72:	4a07      	ldr	r2, [pc, #28]	@ (8007c90 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c78:	4b04      	ldr	r3, [pc, #16]	@ (8007c8c <HAL_RCC_GetHCLKFreq+0x58>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	58024400 	.word	0x58024400
 8007c88:	0802336c 	.word	0x0802336c
 8007c8c:	24000004 	.word	0x24000004
 8007c90:	24000000 	.word	0x24000000

08007c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007c98:	f7ff ffcc 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	4b06      	ldr	r3, [pc, #24]	@ (8007cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	091b      	lsrs	r3, r3, #4
 8007ca4:	f003 0307 	and.w	r3, r3, #7
 8007ca8:	4904      	ldr	r1, [pc, #16]	@ (8007cbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8007caa:	5ccb      	ldrb	r3, [r1, r3]
 8007cac:	f003 031f 	and.w	r3, r3, #31
 8007cb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	58024400 	.word	0x58024400
 8007cbc:	0802336c 	.word	0x0802336c

08007cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007cc4:	f7ff ffb6 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	4b06      	ldr	r3, [pc, #24]	@ (8007ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	0a1b      	lsrs	r3, r3, #8
 8007cd0:	f003 0307 	and.w	r3, r3, #7
 8007cd4:	4904      	ldr	r1, [pc, #16]	@ (8007ce8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007cd6:	5ccb      	ldrb	r3, [r1, r3]
 8007cd8:	f003 031f 	and.w	r3, r3, #31
 8007cdc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	58024400 	.word	0x58024400
 8007ce8:	0802336c 	.word	0x0802336c

08007cec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	223f      	movs	r2, #63	@ 0x3f
 8007cfa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8007d68 <HAL_RCC_GetClockConfig+0x7c>)
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	f003 0207 	and.w	r2, r3, #7
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007d08:	4b17      	ldr	r3, [pc, #92]	@ (8007d68 <HAL_RCC_GetClockConfig+0x7c>)
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007d14:	4b14      	ldr	r3, [pc, #80]	@ (8007d68 <HAL_RCC_GetClockConfig+0x7c>)
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	f003 020f 	and.w	r2, r3, #15
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007d20:	4b11      	ldr	r3, [pc, #68]	@ (8007d68 <HAL_RCC_GetClockConfig+0x7c>)
 8007d22:	699b      	ldr	r3, [r3, #24]
 8007d24:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8007d68 <HAL_RCC_GetClockConfig+0x7c>)
 8007d2e:	69db      	ldr	r3, [r3, #28]
 8007d30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007d38:	4b0b      	ldr	r3, [pc, #44]	@ (8007d68 <HAL_RCC_GetClockConfig+0x7c>)
 8007d3a:	69db      	ldr	r3, [r3, #28]
 8007d3c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007d44:	4b08      	ldr	r3, [pc, #32]	@ (8007d68 <HAL_RCC_GetClockConfig+0x7c>)
 8007d46:	6a1b      	ldr	r3, [r3, #32]
 8007d48:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d50:	4b06      	ldr	r3, [pc, #24]	@ (8007d6c <HAL_RCC_GetClockConfig+0x80>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f003 020f 	and.w	r2, r3, #15
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	601a      	str	r2, [r3, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	58024400 	.word	0x58024400
 8007d6c:	52002000 	.word	0x52002000

08007d70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d74:	b0ca      	sub	sp, #296	@ 0x128
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d82:	2300      	movs	r3, #0
 8007d84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007d94:	2500      	movs	r5, #0
 8007d96:	ea54 0305 	orrs.w	r3, r4, r5
 8007d9a:	d049      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007da2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007da6:	d02f      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007da8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dac:	d828      	bhi.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007dae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007db2:	d01a      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007db4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007db8:	d822      	bhi.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d003      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007dbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dc2:	d007      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007dc4:	e01c      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dc6:	4bb8      	ldr	r3, [pc, #736]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dca:	4ab7      	ldr	r2, [pc, #732]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007dd2:	e01a      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd8:	3308      	adds	r3, #8
 8007dda:	2102      	movs	r1, #2
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f001 fc8f 	bl	8009700 <RCCEx_PLL2_Config>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007de8:	e00f      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dee:	3328      	adds	r3, #40	@ 0x28
 8007df0:	2102      	movs	r1, #2
 8007df2:	4618      	mov	r0, r3
 8007df4:	f001 fd36 	bl	8009864 <RCCEx_PLL3_Config>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007dfe:	e004      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e06:	e000      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10a      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e12:	4ba5      	ldr	r3, [pc, #660]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e16:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e20:	4aa1      	ldr	r2, [pc, #644]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e22:	430b      	orrs	r3, r1
 8007e24:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e26:	e003      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007e3c:	f04f 0900 	mov.w	r9, #0
 8007e40:	ea58 0309 	orrs.w	r3, r8, r9
 8007e44:	d047      	beq.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e4c:	2b04      	cmp	r3, #4
 8007e4e:	d82a      	bhi.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007e50:	a201      	add	r2, pc, #4	@ (adr r2, 8007e58 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e56:	bf00      	nop
 8007e58:	08007e6d 	.word	0x08007e6d
 8007e5c:	08007e7b 	.word	0x08007e7b
 8007e60:	08007e91 	.word	0x08007e91
 8007e64:	08007eaf 	.word	0x08007eaf
 8007e68:	08007eaf 	.word	0x08007eaf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e6c:	4b8e      	ldr	r3, [pc, #568]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e70:	4a8d      	ldr	r2, [pc, #564]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e78:	e01a      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7e:	3308      	adds	r3, #8
 8007e80:	2100      	movs	r1, #0
 8007e82:	4618      	mov	r0, r3
 8007e84:	f001 fc3c 	bl	8009700 <RCCEx_PLL2_Config>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e8e:	e00f      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e94:	3328      	adds	r3, #40	@ 0x28
 8007e96:	2100      	movs	r1, #0
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 fce3 	bl	8009864 <RCCEx_PLL3_Config>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ea4:	e004      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eac:	e000      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007eae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10a      	bne.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007eb8:	4b7b      	ldr	r3, [pc, #492]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ebc:	f023 0107 	bic.w	r1, r3, #7
 8007ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ec6:	4a78      	ldr	r2, [pc, #480]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	6513      	str	r3, [r2, #80]	@ 0x50
 8007ecc:	e003      	b.n	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ece:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ed2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ede:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007ee2:	f04f 0b00 	mov.w	fp, #0
 8007ee6:	ea5a 030b 	orrs.w	r3, sl, fp
 8007eea:	d04c      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ef2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ef6:	d030      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007efc:	d829      	bhi.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007efe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f00:	d02d      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007f02:	2bc0      	cmp	r3, #192	@ 0xc0
 8007f04:	d825      	bhi.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007f06:	2b80      	cmp	r3, #128	@ 0x80
 8007f08:	d018      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007f0a:	2b80      	cmp	r3, #128	@ 0x80
 8007f0c:	d821      	bhi.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007f12:	2b40      	cmp	r3, #64	@ 0x40
 8007f14:	d007      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007f16:	e01c      	b.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f18:	4b63      	ldr	r3, [pc, #396]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f1c:	4a62      	ldr	r2, [pc, #392]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f24:	e01c      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f001 fbe6 	bl	8009700 <RCCEx_PLL2_Config>
 8007f34:	4603      	mov	r3, r0
 8007f36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f3a:	e011      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f40:	3328      	adds	r3, #40	@ 0x28
 8007f42:	2100      	movs	r1, #0
 8007f44:	4618      	mov	r0, r3
 8007f46:	f001 fc8d 	bl	8009864 <RCCEx_PLL3_Config>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f50:	e006      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f58:	e002      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f5a:	bf00      	nop
 8007f5c:	e000      	b.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10a      	bne.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007f68:	4b4f      	ldr	r3, [pc, #316]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f6c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f76:	4a4c      	ldr	r2, [pc, #304]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f78:	430b      	orrs	r3, r1
 8007f7a:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f7c:	e003      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007f92:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007f96:	2300      	movs	r3, #0
 8007f98:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007f9c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	d053      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007faa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007fae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007fb2:	d035      	beq.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007fb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007fb8:	d82e      	bhi.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007fba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007fbe:	d031      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007fc0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007fc4:	d828      	bhi.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007fc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fca:	d01a      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007fcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fd0:	d822      	bhi.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007fd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fda:	d007      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007fdc:	e01c      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fde:	4b32      	ldr	r3, [pc, #200]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe2:	4a31      	ldr	r2, [pc, #196]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fe8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fea:	e01c      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ff0:	3308      	adds	r3, #8
 8007ff2:	2100      	movs	r1, #0
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f001 fb83 	bl	8009700 <RCCEx_PLL2_Config>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008000:	e011      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008006:	3328      	adds	r3, #40	@ 0x28
 8008008:	2100      	movs	r1, #0
 800800a:	4618      	mov	r0, r3
 800800c:	f001 fc2a 	bl	8009864 <RCCEx_PLL3_Config>
 8008010:	4603      	mov	r3, r0
 8008012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008016:	e006      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800801e:	e002      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008020:	bf00      	nop
 8008022:	e000      	b.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008024:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008026:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800802a:	2b00      	cmp	r3, #0
 800802c:	d10b      	bne.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800802e:	4b1e      	ldr	r3, [pc, #120]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008032:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800803e:	4a1a      	ldr	r2, [pc, #104]	@ (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008040:	430b      	orrs	r3, r1
 8008042:	6593      	str	r3, [r2, #88]	@ 0x58
 8008044:	e003      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800804a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800804e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008056:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800805a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800805e:	2300      	movs	r3, #0
 8008060:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008064:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008068:	460b      	mov	r3, r1
 800806a:	4313      	orrs	r3, r2
 800806c:	d056      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800806e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008072:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008076:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800807a:	d038      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800807c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008080:	d831      	bhi.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008082:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008086:	d034      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008088:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800808c:	d82b      	bhi.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800808e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008092:	d01d      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008094:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008098:	d825      	bhi.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800809a:	2b00      	cmp	r3, #0
 800809c:	d006      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800809e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080a2:	d00a      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80080a4:	e01f      	b.n	80080e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80080a6:	bf00      	nop
 80080a8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080ac:	4ba2      	ldr	r3, [pc, #648]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080b0:	4aa1      	ldr	r2, [pc, #644]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080b8:	e01c      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080be:	3308      	adds	r3, #8
 80080c0:	2100      	movs	r1, #0
 80080c2:	4618      	mov	r0, r3
 80080c4:	f001 fb1c 	bl	8009700 <RCCEx_PLL2_Config>
 80080c8:	4603      	mov	r3, r0
 80080ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80080ce:	e011      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d4:	3328      	adds	r3, #40	@ 0x28
 80080d6:	2100      	movs	r1, #0
 80080d8:	4618      	mov	r0, r3
 80080da:	f001 fbc3 	bl	8009864 <RCCEx_PLL3_Config>
 80080de:	4603      	mov	r3, r0
 80080e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080e4:	e006      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080ec:	e002      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80080ee:	bf00      	nop
 80080f0:	e000      	b.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80080f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10b      	bne.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80080fc:	4b8e      	ldr	r3, [pc, #568]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008100:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008108:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800810c:	4a8a      	ldr	r2, [pc, #552]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800810e:	430b      	orrs	r3, r1
 8008110:	6593      	str	r3, [r2, #88]	@ 0x58
 8008112:	e003      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008114:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008118:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800811c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008128:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800812c:	2300      	movs	r3, #0
 800812e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008132:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008136:	460b      	mov	r3, r1
 8008138:	4313      	orrs	r3, r2
 800813a:	d03a      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800813c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008142:	2b30      	cmp	r3, #48	@ 0x30
 8008144:	d01f      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008146:	2b30      	cmp	r3, #48	@ 0x30
 8008148:	d819      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800814a:	2b20      	cmp	r3, #32
 800814c:	d00c      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800814e:	2b20      	cmp	r3, #32
 8008150:	d815      	bhi.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008152:	2b00      	cmp	r3, #0
 8008154:	d019      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008156:	2b10      	cmp	r3, #16
 8008158:	d111      	bne.n	800817e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800815a:	4b77      	ldr	r3, [pc, #476]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800815c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815e:	4a76      	ldr	r2, [pc, #472]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008164:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008166:	e011      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800816c:	3308      	adds	r3, #8
 800816e:	2102      	movs	r1, #2
 8008170:	4618      	mov	r0, r3
 8008172:	f001 fac5 	bl	8009700 <RCCEx_PLL2_Config>
 8008176:	4603      	mov	r3, r0
 8008178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800817c:	e006      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008184:	e002      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008186:	bf00      	nop
 8008188:	e000      	b.n	800818c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800818a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800818c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008194:	4b68      	ldr	r3, [pc, #416]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008198:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800819c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081a2:	4a65      	ldr	r2, [pc, #404]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081a4:	430b      	orrs	r3, r1
 80081a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80081a8:	e003      	b.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80081b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80081be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80081c2:	2300      	movs	r3, #0
 80081c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80081c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80081cc:	460b      	mov	r3, r1
 80081ce:	4313      	orrs	r3, r2
 80081d0:	d051      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80081d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081dc:	d035      	beq.n	800824a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80081de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081e2:	d82e      	bhi.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80081e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081e8:	d031      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80081ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081ee:	d828      	bhi.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80081f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081f4:	d01a      	beq.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80081f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081fa:	d822      	bhi.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008200:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008204:	d007      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008206:	e01c      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008208:	4b4b      	ldr	r3, [pc, #300]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800820a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820c:	4a4a      	ldr	r2, [pc, #296]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800820e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008212:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008214:	e01c      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821a:	3308      	adds	r3, #8
 800821c:	2100      	movs	r1, #0
 800821e:	4618      	mov	r0, r3
 8008220:	f001 fa6e 	bl	8009700 <RCCEx_PLL2_Config>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800822a:	e011      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800822c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008230:	3328      	adds	r3, #40	@ 0x28
 8008232:	2100      	movs	r1, #0
 8008234:	4618      	mov	r0, r3
 8008236:	f001 fb15 	bl	8009864 <RCCEx_PLL3_Config>
 800823a:	4603      	mov	r3, r0
 800823c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008240:	e006      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008248:	e002      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800824a:	bf00      	nop
 800824c:	e000      	b.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800824e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10a      	bne.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008258:	4b37      	ldr	r3, [pc, #220]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800825a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800825c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008266:	4a34      	ldr	r2, [pc, #208]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008268:	430b      	orrs	r3, r1
 800826a:	6513      	str	r3, [r2, #80]	@ 0x50
 800826c:	e003      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800826e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008282:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008286:	2300      	movs	r3, #0
 8008288:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800828c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008290:	460b      	mov	r3, r1
 8008292:	4313      	orrs	r3, r2
 8008294:	d056      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800829a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800829c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082a0:	d033      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80082a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80082a6:	d82c      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082ac:	d02f      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80082ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80082b2:	d826      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082b8:	d02b      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80082ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082be:	d820      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082c4:	d012      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80082c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082ca:	d81a      	bhi.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d022      	beq.n	8008316 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80082d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082d4:	d115      	bne.n	8008302 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082da:	3308      	adds	r3, #8
 80082dc:	2101      	movs	r1, #1
 80082de:	4618      	mov	r0, r3
 80082e0:	f001 fa0e 	bl	8009700 <RCCEx_PLL2_Config>
 80082e4:	4603      	mov	r3, r0
 80082e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80082ea:	e015      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f0:	3328      	adds	r3, #40	@ 0x28
 80082f2:	2101      	movs	r1, #1
 80082f4:	4618      	mov	r0, r3
 80082f6:	f001 fab5 	bl	8009864 <RCCEx_PLL3_Config>
 80082fa:	4603      	mov	r3, r0
 80082fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008300:	e00a      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008308:	e006      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800830a:	bf00      	nop
 800830c:	e004      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800830e:	bf00      	nop
 8008310:	e002      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008312:	bf00      	nop
 8008314:	e000      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008316:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800831c:	2b00      	cmp	r3, #0
 800831e:	d10d      	bne.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008320:	4b05      	ldr	r3, [pc, #20]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008324:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800832e:	4a02      	ldr	r2, [pc, #8]	@ (8008338 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008330:	430b      	orrs	r3, r1
 8008332:	6513      	str	r3, [r2, #80]	@ 0x50
 8008334:	e006      	b.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008336:	bf00      	nop
 8008338:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800833c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800834c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008350:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008354:	2300      	movs	r3, #0
 8008356:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800835a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800835e:	460b      	mov	r3, r1
 8008360:	4313      	orrs	r3, r2
 8008362:	d055      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008368:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800836c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008370:	d033      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008372:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008376:	d82c      	bhi.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800837c:	d02f      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800837e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008382:	d826      	bhi.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008384:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008388:	d02b      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800838a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800838e:	d820      	bhi.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008394:	d012      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800839a:	d81a      	bhi.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800839c:	2b00      	cmp	r3, #0
 800839e:	d022      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80083a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80083a4:	d115      	bne.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083aa:	3308      	adds	r3, #8
 80083ac:	2101      	movs	r1, #1
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 f9a6 	bl	8009700 <RCCEx_PLL2_Config>
 80083b4:	4603      	mov	r3, r0
 80083b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80083ba:	e015      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c0:	3328      	adds	r3, #40	@ 0x28
 80083c2:	2101      	movs	r1, #1
 80083c4:	4618      	mov	r0, r3
 80083c6:	f001 fa4d 	bl	8009864 <RCCEx_PLL3_Config>
 80083ca:	4603      	mov	r3, r0
 80083cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80083d0:	e00a      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083d8:	e006      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083da:	bf00      	nop
 80083dc:	e004      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083de:	bf00      	nop
 80083e0:	e002      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083e2:	bf00      	nop
 80083e4:	e000      	b.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d10b      	bne.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80083f0:	4ba3      	ldr	r3, [pc, #652]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083f4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80083f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008400:	4a9f      	ldr	r2, [pc, #636]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008402:	430b      	orrs	r3, r1
 8008404:	6593      	str	r3, [r2, #88]	@ 0x58
 8008406:	e003      	b.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800840c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008418:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800841c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008420:	2300      	movs	r3, #0
 8008422:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008426:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800842a:	460b      	mov	r3, r1
 800842c:	4313      	orrs	r3, r2
 800842e:	d037      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008436:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800843a:	d00e      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800843c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008440:	d816      	bhi.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008442:	2b00      	cmp	r3, #0
 8008444:	d018      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008446:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800844a:	d111      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800844c:	4b8c      	ldr	r3, [pc, #560]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800844e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008450:	4a8b      	ldr	r2, [pc, #556]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008452:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008456:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008458:	e00f      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800845a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800845e:	3308      	adds	r3, #8
 8008460:	2101      	movs	r1, #1
 8008462:	4618      	mov	r0, r3
 8008464:	f001 f94c 	bl	8009700 <RCCEx_PLL2_Config>
 8008468:	4603      	mov	r3, r0
 800846a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800846e:	e004      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008476:	e000      	b.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800847a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10a      	bne.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008482:	4b7f      	ldr	r3, [pc, #508]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008486:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800848a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800848e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008490:	4a7b      	ldr	r2, [pc, #492]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008492:	430b      	orrs	r3, r1
 8008494:	6513      	str	r3, [r2, #80]	@ 0x50
 8008496:	e003      	b.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008498:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800849c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80084a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80084ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80084b0:	2300      	movs	r3, #0
 80084b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80084b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4313      	orrs	r3, r2
 80084be:	d039      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80084c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d81c      	bhi.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80084ca:	a201      	add	r2, pc, #4	@ (adr r2, 80084d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80084cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d0:	0800850d 	.word	0x0800850d
 80084d4:	080084e1 	.word	0x080084e1
 80084d8:	080084ef 	.word	0x080084ef
 80084dc:	0800850d 	.word	0x0800850d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084e0:	4b67      	ldr	r3, [pc, #412]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e4:	4a66      	ldr	r2, [pc, #408]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80084ec:	e00f      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084f2:	3308      	adds	r3, #8
 80084f4:	2102      	movs	r1, #2
 80084f6:	4618      	mov	r0, r3
 80084f8:	f001 f902 	bl	8009700 <RCCEx_PLL2_Config>
 80084fc:	4603      	mov	r3, r0
 80084fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008502:	e004      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800850a:	e000      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800850c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800850e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008516:	4b5a      	ldr	r3, [pc, #360]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800851a:	f023 0103 	bic.w	r1, r3, #3
 800851e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008524:	4a56      	ldr	r2, [pc, #344]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008526:	430b      	orrs	r3, r1
 8008528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800852a:	e003      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800852c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008540:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008544:	2300      	movs	r3, #0
 8008546:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800854a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800854e:	460b      	mov	r3, r1
 8008550:	4313      	orrs	r3, r2
 8008552:	f000 809f 	beq.w	8008694 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008556:	4b4b      	ldr	r3, [pc, #300]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a4a      	ldr	r2, [pc, #296]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800855c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008560:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008562:	f7f9 fec9 	bl	80022f8 <HAL_GetTick>
 8008566:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800856a:	e00b      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800856c:	f7f9 fec4 	bl	80022f8 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	2b64      	cmp	r3, #100	@ 0x64
 800857a:	d903      	bls.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008582:	e005      	b.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008584:	4b3f      	ldr	r3, [pc, #252]	@ (8008684 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800858c:	2b00      	cmp	r3, #0
 800858e:	d0ed      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008594:	2b00      	cmp	r3, #0
 8008596:	d179      	bne.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008598:	4b39      	ldr	r3, [pc, #228]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800859a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800859c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085a4:	4053      	eors	r3, r2
 80085a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d015      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085ae:	4b34      	ldr	r3, [pc, #208]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085ba:	4b31      	ldr	r3, [pc, #196]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085be:	4a30      	ldr	r2, [pc, #192]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80085c6:	4b2e      	ldr	r3, [pc, #184]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ca:	4a2d      	ldr	r2, [pc, #180]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80085d2:	4a2b      	ldr	r2, [pc, #172]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80085d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80085da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085e6:	d118      	bne.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085e8:	f7f9 fe86 	bl	80022f8 <HAL_GetTick>
 80085ec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085f0:	e00d      	b.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085f2:	f7f9 fe81 	bl	80022f8 <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80085fc:	1ad2      	subs	r2, r2, r3
 80085fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008602:	429a      	cmp	r2, r3
 8008604:	d903      	bls.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800860c:	e005      	b.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800860e:	4b1c      	ldr	r3, [pc, #112]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d0eb      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800861a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800861e:	2b00      	cmp	r3, #0
 8008620:	d129      	bne.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008626:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800862a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800862e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008632:	d10e      	bne.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008634:	4b12      	ldr	r3, [pc, #72]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800863c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008640:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008644:	091a      	lsrs	r2, r3, #4
 8008646:	4b10      	ldr	r3, [pc, #64]	@ (8008688 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008648:	4013      	ands	r3, r2
 800864a:	4a0d      	ldr	r2, [pc, #52]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800864c:	430b      	orrs	r3, r1
 800864e:	6113      	str	r3, [r2, #16]
 8008650:	e005      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008652:	4b0b      	ldr	r3, [pc, #44]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	4a0a      	ldr	r2, [pc, #40]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008658:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800865c:	6113      	str	r3, [r2, #16]
 800865e:	4b08      	ldr	r3, [pc, #32]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008660:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008666:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800866a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800866e:	4a04      	ldr	r2, [pc, #16]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008670:	430b      	orrs	r3, r1
 8008672:	6713      	str	r3, [r2, #112]	@ 0x70
 8008674:	e00e      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800867a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800867e:	e009      	b.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008680:	58024400 	.word	0x58024400
 8008684:	58024800 	.word	0x58024800
 8008688:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008690:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869c:	f002 0301 	and.w	r3, r2, #1
 80086a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086a4:	2300      	movs	r3, #0
 80086a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80086ae:	460b      	mov	r3, r1
 80086b0:	4313      	orrs	r3, r2
 80086b2:	f000 8089 	beq.w	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80086b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086bc:	2b28      	cmp	r3, #40	@ 0x28
 80086be:	d86b      	bhi.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80086c0:	a201      	add	r2, pc, #4	@ (adr r2, 80086c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c6:	bf00      	nop
 80086c8:	080087a1 	.word	0x080087a1
 80086cc:	08008799 	.word	0x08008799
 80086d0:	08008799 	.word	0x08008799
 80086d4:	08008799 	.word	0x08008799
 80086d8:	08008799 	.word	0x08008799
 80086dc:	08008799 	.word	0x08008799
 80086e0:	08008799 	.word	0x08008799
 80086e4:	08008799 	.word	0x08008799
 80086e8:	0800876d 	.word	0x0800876d
 80086ec:	08008799 	.word	0x08008799
 80086f0:	08008799 	.word	0x08008799
 80086f4:	08008799 	.word	0x08008799
 80086f8:	08008799 	.word	0x08008799
 80086fc:	08008799 	.word	0x08008799
 8008700:	08008799 	.word	0x08008799
 8008704:	08008799 	.word	0x08008799
 8008708:	08008783 	.word	0x08008783
 800870c:	08008799 	.word	0x08008799
 8008710:	08008799 	.word	0x08008799
 8008714:	08008799 	.word	0x08008799
 8008718:	08008799 	.word	0x08008799
 800871c:	08008799 	.word	0x08008799
 8008720:	08008799 	.word	0x08008799
 8008724:	08008799 	.word	0x08008799
 8008728:	080087a1 	.word	0x080087a1
 800872c:	08008799 	.word	0x08008799
 8008730:	08008799 	.word	0x08008799
 8008734:	08008799 	.word	0x08008799
 8008738:	08008799 	.word	0x08008799
 800873c:	08008799 	.word	0x08008799
 8008740:	08008799 	.word	0x08008799
 8008744:	08008799 	.word	0x08008799
 8008748:	080087a1 	.word	0x080087a1
 800874c:	08008799 	.word	0x08008799
 8008750:	08008799 	.word	0x08008799
 8008754:	08008799 	.word	0x08008799
 8008758:	08008799 	.word	0x08008799
 800875c:	08008799 	.word	0x08008799
 8008760:	08008799 	.word	0x08008799
 8008764:	08008799 	.word	0x08008799
 8008768:	080087a1 	.word	0x080087a1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800876c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008770:	3308      	adds	r3, #8
 8008772:	2101      	movs	r1, #1
 8008774:	4618      	mov	r0, r3
 8008776:	f000 ffc3 	bl	8009700 <RCCEx_PLL2_Config>
 800877a:	4603      	mov	r3, r0
 800877c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008780:	e00f      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008786:	3328      	adds	r3, #40	@ 0x28
 8008788:	2101      	movs	r1, #1
 800878a:	4618      	mov	r0, r3
 800878c:	f001 f86a 	bl	8009864 <RCCEx_PLL3_Config>
 8008790:	4603      	mov	r3, r0
 8008792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008796:	e004      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800879e:	e000      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80087a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10a      	bne.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80087aa:	4bbf      	ldr	r3, [pc, #764]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087ae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80087b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087b8:	4abb      	ldr	r2, [pc, #748]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80087ba:	430b      	orrs	r3, r1
 80087bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80087be:	e003      	b.n	80087c8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80087c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d0:	f002 0302 	and.w	r3, r2, #2
 80087d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80087d8:	2300      	movs	r3, #0
 80087da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80087de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80087e2:	460b      	mov	r3, r1
 80087e4:	4313      	orrs	r3, r2
 80087e6:	d041      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80087e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087ee:	2b05      	cmp	r3, #5
 80087f0:	d824      	bhi.n	800883c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80087f2:	a201      	add	r2, pc, #4	@ (adr r2, 80087f8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80087f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f8:	08008845 	.word	0x08008845
 80087fc:	08008811 	.word	0x08008811
 8008800:	08008827 	.word	0x08008827
 8008804:	08008845 	.word	0x08008845
 8008808:	08008845 	.word	0x08008845
 800880c:	08008845 	.word	0x08008845
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008814:	3308      	adds	r3, #8
 8008816:	2101      	movs	r1, #1
 8008818:	4618      	mov	r0, r3
 800881a:	f000 ff71 	bl	8009700 <RCCEx_PLL2_Config>
 800881e:	4603      	mov	r3, r0
 8008820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008824:	e00f      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800882a:	3328      	adds	r3, #40	@ 0x28
 800882c:	2101      	movs	r1, #1
 800882e:	4618      	mov	r0, r3
 8008830:	f001 f818 	bl	8009864 <RCCEx_PLL3_Config>
 8008834:	4603      	mov	r3, r0
 8008836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800883a:	e004      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008842:	e000      	b.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008844:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10a      	bne.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800884e:	4b96      	ldr	r3, [pc, #600]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008852:	f023 0107 	bic.w	r1, r3, #7
 8008856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800885a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800885c:	4a92      	ldr	r2, [pc, #584]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800885e:	430b      	orrs	r3, r1
 8008860:	6553      	str	r3, [r2, #84]	@ 0x54
 8008862:	e003      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008868:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800886c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008874:	f002 0304 	and.w	r3, r2, #4
 8008878:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800887c:	2300      	movs	r3, #0
 800887e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008882:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008886:	460b      	mov	r3, r1
 8008888:	4313      	orrs	r3, r2
 800888a:	d044      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800888c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008890:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008894:	2b05      	cmp	r3, #5
 8008896:	d825      	bhi.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008898:	a201      	add	r2, pc, #4	@ (adr r2, 80088a0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800889a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889e:	bf00      	nop
 80088a0:	080088ed 	.word	0x080088ed
 80088a4:	080088b9 	.word	0x080088b9
 80088a8:	080088cf 	.word	0x080088cf
 80088ac:	080088ed 	.word	0x080088ed
 80088b0:	080088ed 	.word	0x080088ed
 80088b4:	080088ed 	.word	0x080088ed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088bc:	3308      	adds	r3, #8
 80088be:	2101      	movs	r1, #1
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 ff1d 	bl	8009700 <RCCEx_PLL2_Config>
 80088c6:	4603      	mov	r3, r0
 80088c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80088cc:	e00f      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088d2:	3328      	adds	r3, #40	@ 0x28
 80088d4:	2101      	movs	r1, #1
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 ffc4 	bl	8009864 <RCCEx_PLL3_Config>
 80088dc:	4603      	mov	r3, r0
 80088de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80088e2:	e004      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088ea:	e000      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80088ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10b      	bne.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088f6:	4b6c      	ldr	r3, [pc, #432]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80088f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088fa:	f023 0107 	bic.w	r1, r3, #7
 80088fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008906:	4a68      	ldr	r2, [pc, #416]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008908:	430b      	orrs	r3, r1
 800890a:	6593      	str	r3, [r2, #88]	@ 0x58
 800890c:	e003      	b.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800890e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008912:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800891a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891e:	f002 0320 	and.w	r3, r2, #32
 8008922:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008926:	2300      	movs	r3, #0
 8008928:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800892c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008930:	460b      	mov	r3, r1
 8008932:	4313      	orrs	r3, r2
 8008934:	d055      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800893a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800893e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008942:	d033      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008944:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008948:	d82c      	bhi.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800894a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800894e:	d02f      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008954:	d826      	bhi.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008956:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800895a:	d02b      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800895c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008960:	d820      	bhi.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008962:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008966:	d012      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800896c:	d81a      	bhi.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800896e:	2b00      	cmp	r3, #0
 8008970:	d022      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008972:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008976:	d115      	bne.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800897c:	3308      	adds	r3, #8
 800897e:	2100      	movs	r1, #0
 8008980:	4618      	mov	r0, r3
 8008982:	f000 febd 	bl	8009700 <RCCEx_PLL2_Config>
 8008986:	4603      	mov	r3, r0
 8008988:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800898c:	e015      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800898e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008992:	3328      	adds	r3, #40	@ 0x28
 8008994:	2102      	movs	r1, #2
 8008996:	4618      	mov	r0, r3
 8008998:	f000 ff64 	bl	8009864 <RCCEx_PLL3_Config>
 800899c:	4603      	mov	r3, r0
 800899e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80089a2:	e00a      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089aa:	e006      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089ac:	bf00      	nop
 80089ae:	e004      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089b0:	bf00      	nop
 80089b2:	e002      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089b4:	bf00      	nop
 80089b6:	e000      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80089b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10b      	bne.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089c2:	4b39      	ldr	r3, [pc, #228]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089c6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80089ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089d2:	4a35      	ldr	r2, [pc, #212]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089d4:	430b      	orrs	r3, r1
 80089d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80089d8:	e003      	b.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80089e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80089ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80089f2:	2300      	movs	r3, #0
 80089f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80089f8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80089fc:	460b      	mov	r3, r1
 80089fe:	4313      	orrs	r3, r2
 8008a00:	d058      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a0a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008a0e:	d033      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008a10:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008a14:	d82c      	bhi.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a1a:	d02f      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008a1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a20:	d826      	bhi.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a26:	d02b      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008a28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a2c:	d820      	bhi.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a32:	d012      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a38:	d81a      	bhi.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d022      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a42:	d115      	bne.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a48:	3308      	adds	r3, #8
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 fe57 	bl	8009700 <RCCEx_PLL2_Config>
 8008a52:	4603      	mov	r3, r0
 8008a54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a58:	e015      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a5e:	3328      	adds	r3, #40	@ 0x28
 8008a60:	2102      	movs	r1, #2
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fefe 	bl	8009864 <RCCEx_PLL3_Config>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a6e:	e00a      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a76:	e006      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a78:	bf00      	nop
 8008a7a:	e004      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a7c:	bf00      	nop
 8008a7e:	e002      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a80:	bf00      	nop
 8008a82:	e000      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d10e      	bne.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a8e:	4b06      	ldr	r3, [pc, #24]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a92:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a9e:	4a02      	ldr	r2, [pc, #8]	@ (8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008aa4:	e006      	b.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008aa6:	bf00      	nop
 8008aa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ab0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008ac0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008aca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	d055      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008adc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ae0:	d033      	beq.n	8008b4a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008ae2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ae6:	d82c      	bhi.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ae8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008aec:	d02f      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008aee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008af2:	d826      	bhi.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008af4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008af8:	d02b      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008afa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008afe:	d820      	bhi.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008b00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b04:	d012      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008b06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b0a:	d81a      	bhi.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d022      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b14:	d115      	bne.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 fdee 	bl	8009700 <RCCEx_PLL2_Config>
 8008b24:	4603      	mov	r3, r0
 8008b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b2a:	e015      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b30:	3328      	adds	r3, #40	@ 0x28
 8008b32:	2102      	movs	r1, #2
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 fe95 	bl	8009864 <RCCEx_PLL3_Config>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b40:	e00a      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b48:	e006      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b4a:	bf00      	nop
 8008b4c:	e004      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b4e:	bf00      	nop
 8008b50:	e002      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b52:	bf00      	nop
 8008b54:	e000      	b.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10b      	bne.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008b60:	4ba1      	ldr	r3, [pc, #644]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b64:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b70:	4a9d      	ldr	r2, [pc, #628]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b72:	430b      	orrs	r3, r1
 8008b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b76:	e003      	b.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	f002 0308 	and.w	r3, r2, #8
 8008b8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b90:	2300      	movs	r3, #0
 8008b92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	d01e      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008ba8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bac:	d10c      	bne.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb2:	3328      	adds	r3, #40	@ 0x28
 8008bb4:	2102      	movs	r1, #2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 fe54 	bl	8009864 <RCCEx_PLL3_Config>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d002      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008bc8:	4b87      	ldr	r3, [pc, #540]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bcc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bd8:	4a83      	ldr	r2, [pc, #524]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bda:	430b      	orrs	r3, r1
 8008bdc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be6:	f002 0310 	and.w	r3, r2, #16
 8008bea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008bf4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	d01e      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c0a:	d10c      	bne.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c10:	3328      	adds	r3, #40	@ 0x28
 8008c12:	2102      	movs	r1, #2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f000 fe25 	bl	8009864 <RCCEx_PLL3_Config>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c26:	4b70      	ldr	r3, [pc, #448]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c36:	4a6c      	ldr	r2, [pc, #432]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c44:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008c48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008c56:	460b      	mov	r3, r1
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	d03e      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008c64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c68:	d022      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008c6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c6e:	d81b      	bhi.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008c74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c78:	d00b      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008c7a:	e015      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c80:	3308      	adds	r3, #8
 8008c82:	2100      	movs	r1, #0
 8008c84:	4618      	mov	r0, r3
 8008c86:	f000 fd3b 	bl	8009700 <RCCEx_PLL2_Config>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c90:	e00f      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c96:	3328      	adds	r3, #40	@ 0x28
 8008c98:	2102      	movs	r1, #2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fde2 	bl	8009864 <RCCEx_PLL3_Config>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008ca6:	e004      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cae:	e000      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10b      	bne.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cba:	4b4b      	ldr	r3, [pc, #300]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cbe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008cca:	4a47      	ldr	r2, [pc, #284]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ccc:	430b      	orrs	r3, r1
 8008cce:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cd0:	e003      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008ce6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ce8:	2300      	movs	r3, #0
 8008cea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008cec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	d03b      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d02:	d01f      	beq.n	8008d44 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008d04:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d08:	d818      	bhi.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008d0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d0e:	d003      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008d10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d14:	d007      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008d16:	e011      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d18:	4b33      	ldr	r3, [pc, #204]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1c:	4a32      	ldr	r2, [pc, #200]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d24:	e00f      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d2a:	3328      	adds	r3, #40	@ 0x28
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 fd98 	bl	8009864 <RCCEx_PLL3_Config>
 8008d34:	4603      	mov	r3, r0
 8008d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d3a:	e004      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d42:	e000      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d10b      	bne.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d4e:	4b26      	ldr	r3, [pc, #152]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d52:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d5e:	4a22      	ldr	r2, [pc, #136]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d60:	430b      	orrs	r3, r1
 8008d62:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d64:	e003      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d76:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008d7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008d84:	460b      	mov	r3, r1
 8008d86:	4313      	orrs	r3, r2
 8008d88:	d034      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d98:	d007      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008d9a:	e011      	b.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d9c:	4b12      	ldr	r3, [pc, #72]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da0:	4a11      	ldr	r2, [pc, #68]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008da2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008da6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008da8:	e00e      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dae:	3308      	adds	r3, #8
 8008db0:	2102      	movs	r1, #2
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 fca4 	bl	8009700 <RCCEx_PLL2_Config>
 8008db8:	4603      	mov	r3, r0
 8008dba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008dbe:	e003      	b.n	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008dc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d10d      	bne.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008dd0:	4b05      	ldr	r3, [pc, #20]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dd4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dde:	4a02      	ldr	r2, [pc, #8]	@ (8008de8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008de0:	430b      	orrs	r3, r1
 8008de2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008de4:	e006      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008de6:	bf00      	nop
 8008de8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008df0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008e00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e02:	2300      	movs	r3, #0
 8008e04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e06:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008e0a:	460b      	mov	r3, r1
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	d00c      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e14:	3328      	adds	r3, #40	@ 0x28
 8008e16:	2102      	movs	r1, #2
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f000 fd23 	bl	8009864 <RCCEx_PLL3_Config>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008e36:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e38:	2300      	movs	r3, #0
 8008e3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e3c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008e40:	460b      	mov	r3, r1
 8008e42:	4313      	orrs	r3, r2
 8008e44:	d038      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e52:	d018      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008e54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e58:	d811      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008e5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e5e:	d014      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e64:	d80b      	bhi.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d011      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e6e:	d106      	bne.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e70:	4bc3      	ldr	r3, [pc, #780]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e74:	4ac2      	ldr	r2, [pc, #776]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008e7c:	e008      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e84:	e004      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e86:	bf00      	nop
 8008e88:	e002      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e8a:	bf00      	nop
 8008e8c:	e000      	b.n	8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10b      	bne.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e98:	4bb9      	ldr	r3, [pc, #740]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e9c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ea8:	4ab5      	ldr	r2, [pc, #724]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eaa:	430b      	orrs	r3, r1
 8008eac:	6553      	str	r3, [r2, #84]	@ 0x54
 8008eae:	e003      	b.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008eb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008eb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008eca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008ece:	460b      	mov	r3, r1
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	d009      	beq.n	8008ee8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008ed4:	4baa      	ldr	r3, [pc, #680]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ed8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ee2:	4aa7      	ldr	r2, [pc, #668]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ee4:	430b      	orrs	r3, r1
 8008ee6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008ef4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008efa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008efe:	460b      	mov	r3, r1
 8008f00:	4313      	orrs	r3, r2
 8008f02:	d00a      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008f04:	4b9e      	ldr	r3, [pc, #632]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008f14:	4a9a      	ldr	r2, [pc, #616]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f16:	430b      	orrs	r3, r1
 8008f18:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f22:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008f26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f28:	2300      	movs	r3, #0
 8008f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f2c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008f30:	460b      	mov	r3, r1
 8008f32:	4313      	orrs	r3, r2
 8008f34:	d009      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f36:	4b92      	ldr	r3, [pc, #584]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f3a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f44:	4a8e      	ldr	r2, [pc, #568]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f46:	430b      	orrs	r3, r1
 8008f48:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f52:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008f56:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f58:	2300      	movs	r3, #0
 8008f5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f5c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008f60:	460b      	mov	r3, r1
 8008f62:	4313      	orrs	r3, r2
 8008f64:	d00e      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f66:	4b86      	ldr	r3, [pc, #536]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	4a85      	ldr	r2, [pc, #532]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f6c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f70:	6113      	str	r3, [r2, #16]
 8008f72:	4b83      	ldr	r3, [pc, #524]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f74:	6919      	ldr	r1, [r3, #16]
 8008f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008f7e:	4a80      	ldr	r2, [pc, #512]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f80:	430b      	orrs	r3, r1
 8008f82:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008f90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f92:	2300      	movs	r3, #0
 8008f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f96:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	d009      	beq.n	8008fb4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008fa0:	4b77      	ldr	r3, [pc, #476]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fa4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fae:	4a74      	ldr	r2, [pc, #464]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fb0:	430b      	orrs	r3, r1
 8008fb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fbc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008fc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fc6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008fca:	460b      	mov	r3, r1
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	d00a      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008fd0:	4b6b      	ldr	r3, [pc, #428]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fd4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fe0:	4a67      	ldr	r2, [pc, #412]	@ (8009180 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fe2:	430b      	orrs	r3, r1
 8008fe4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fee:	2100      	movs	r1, #0
 8008ff0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ff8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	4313      	orrs	r3, r2
 8009000:	d011      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009006:	3308      	adds	r3, #8
 8009008:	2100      	movs	r1, #0
 800900a:	4618      	mov	r0, r3
 800900c:	f000 fb78 	bl	8009700 <RCCEx_PLL2_Config>
 8009010:	4603      	mov	r3, r0
 8009012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800901e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902e:	2100      	movs	r1, #0
 8009030:	6239      	str	r1, [r7, #32]
 8009032:	f003 0302 	and.w	r3, r3, #2
 8009036:	627b      	str	r3, [r7, #36]	@ 0x24
 8009038:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800903c:	460b      	mov	r3, r1
 800903e:	4313      	orrs	r3, r2
 8009040:	d011      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009046:	3308      	adds	r3, #8
 8009048:	2101      	movs	r1, #1
 800904a:	4618      	mov	r0, r3
 800904c:	f000 fb58 	bl	8009700 <RCCEx_PLL2_Config>
 8009050:	4603      	mov	r3, r0
 8009052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800905e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906e:	2100      	movs	r1, #0
 8009070:	61b9      	str	r1, [r7, #24]
 8009072:	f003 0304 	and.w	r3, r3, #4
 8009076:	61fb      	str	r3, [r7, #28]
 8009078:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800907c:	460b      	mov	r3, r1
 800907e:	4313      	orrs	r3, r2
 8009080:	d011      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009086:	3308      	adds	r3, #8
 8009088:	2102      	movs	r1, #2
 800908a:	4618      	mov	r0, r3
 800908c:	f000 fb38 	bl	8009700 <RCCEx_PLL2_Config>
 8009090:	4603      	mov	r3, r0
 8009092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800909e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80090a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	2100      	movs	r1, #0
 80090b0:	6139      	str	r1, [r7, #16]
 80090b2:	f003 0308 	and.w	r3, r3, #8
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80090bc:	460b      	mov	r3, r1
 80090be:	4313      	orrs	r3, r2
 80090c0:	d011      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c6:	3328      	adds	r3, #40	@ 0x28
 80090c8:	2100      	movs	r1, #0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 fbca 	bl	8009864 <RCCEx_PLL3_Config>
 80090d0:	4603      	mov	r3, r0
 80090d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80090d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80090e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	2100      	movs	r1, #0
 80090f0:	60b9      	str	r1, [r7, #8]
 80090f2:	f003 0310 	and.w	r3, r3, #16
 80090f6:	60fb      	str	r3, [r7, #12]
 80090f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80090fc:	460b      	mov	r3, r1
 80090fe:	4313      	orrs	r3, r2
 8009100:	d011      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009106:	3328      	adds	r3, #40	@ 0x28
 8009108:	2101      	movs	r1, #1
 800910a:	4618      	mov	r0, r3
 800910c:	f000 fbaa 	bl	8009864 <RCCEx_PLL3_Config>
 8009110:	4603      	mov	r3, r0
 8009112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009116:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800911a:	2b00      	cmp	r3, #0
 800911c:	d003      	beq.n	8009126 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800911e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	2100      	movs	r1, #0
 8009130:	6039      	str	r1, [r7, #0]
 8009132:	f003 0320 	and.w	r3, r3, #32
 8009136:	607b      	str	r3, [r7, #4]
 8009138:	e9d7 1200 	ldrd	r1, r2, [r7]
 800913c:	460b      	mov	r3, r1
 800913e:	4313      	orrs	r3, r2
 8009140:	d011      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009146:	3328      	adds	r3, #40	@ 0x28
 8009148:	2102      	movs	r1, #2
 800914a:	4618      	mov	r0, r3
 800914c:	f000 fb8a 	bl	8009864 <RCCEx_PLL3_Config>
 8009150:	4603      	mov	r3, r0
 8009152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009156:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800915a:	2b00      	cmp	r3, #0
 800915c:	d003      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800915e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009162:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009166:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800916a:	2b00      	cmp	r3, #0
 800916c:	d101      	bne.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	e000      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009172:	2301      	movs	r3, #1
}
 8009174:	4618      	mov	r0, r3
 8009176:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800917a:	46bd      	mov	sp, r7
 800917c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009180:	58024400 	.word	0x58024400

08009184 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009188:	f7fe fd54 	bl	8007c34 <HAL_RCC_GetHCLKFreq>
 800918c:	4602      	mov	r2, r0
 800918e:	4b06      	ldr	r3, [pc, #24]	@ (80091a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	091b      	lsrs	r3, r3, #4
 8009194:	f003 0307 	and.w	r3, r3, #7
 8009198:	4904      	ldr	r1, [pc, #16]	@ (80091ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800919a:	5ccb      	ldrb	r3, [r1, r3]
 800919c:	f003 031f 	and.w	r3, r3, #31
 80091a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	58024400 	.word	0x58024400
 80091ac:	0802336c 	.word	0x0802336c

080091b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b089      	sub	sp, #36	@ 0x24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80091b8:	4ba1      	ldr	r3, [pc, #644]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091bc:	f003 0303 	and.w	r3, r3, #3
 80091c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80091c2:	4b9f      	ldr	r3, [pc, #636]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091c6:	0b1b      	lsrs	r3, r3, #12
 80091c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80091ce:	4b9c      	ldr	r3, [pc, #624]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091d2:	091b      	lsrs	r3, r3, #4
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80091da:	4b99      	ldr	r3, [pc, #612]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80091dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091de:	08db      	lsrs	r3, r3, #3
 80091e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	fb02 f303 	mul.w	r3, r2, r3
 80091ea:	ee07 3a90 	vmov	s15, r3
 80091ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f000 8111 	beq.w	8009420 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	2b02      	cmp	r3, #2
 8009202:	f000 8083 	beq.w	800930c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	2b02      	cmp	r3, #2
 800920a:	f200 80a1 	bhi.w	8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800920e:	69bb      	ldr	r3, [r7, #24]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d003      	beq.n	800921c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d056      	beq.n	80092c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800921a:	e099      	b.n	8009350 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800921c:	4b88      	ldr	r3, [pc, #544]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 0320 	and.w	r3, r3, #32
 8009224:	2b00      	cmp	r3, #0
 8009226:	d02d      	beq.n	8009284 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009228:	4b85      	ldr	r3, [pc, #532]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	08db      	lsrs	r3, r3, #3
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	4a84      	ldr	r2, [pc, #528]	@ (8009444 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009234:	fa22 f303 	lsr.w	r3, r2, r3
 8009238:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	ee07 3a90 	vmov	s15, r3
 8009240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	ee07 3a90 	vmov	s15, r3
 800924a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800924e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009252:	4b7b      	ldr	r3, [pc, #492]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800925a:	ee07 3a90 	vmov	s15, r3
 800925e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009262:	ed97 6a03 	vldr	s12, [r7, #12]
 8009266:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800926a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800926e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800927a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800927e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009282:	e087      	b.n	8009394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	ee07 3a90 	vmov	s15, r3
 800928a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800928e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800944c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009296:	4b6a      	ldr	r3, [pc, #424]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800929a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800929e:	ee07 3a90 	vmov	s15, r3
 80092a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80092aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80092c6:	e065      	b.n	8009394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	ee07 3a90 	vmov	s15, r3
 80092ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009450 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80092d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092da:	4b59      	ldr	r3, [pc, #356]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e2:	ee07 3a90 	vmov	s15, r3
 80092e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80092ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80092f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800930a:	e043      	b.n	8009394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	ee07 3a90 	vmov	s15, r3
 8009312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009316:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009454 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800931a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800931e:	4b48      	ldr	r3, [pc, #288]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009326:	ee07 3a90 	vmov	s15, r3
 800932a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800932e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009332:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800933a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800933e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800934a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800934e:	e021      	b.n	8009394 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	ee07 3a90 	vmov	s15, r3
 8009356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009450 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800935e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009362:	4b37      	ldr	r3, [pc, #220]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800936a:	ee07 3a90 	vmov	s15, r3
 800936e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009372:	ed97 6a03 	vldr	s12, [r7, #12]
 8009376:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009448 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800937a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800937e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800938a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800938e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009392:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009394:	4b2a      	ldr	r3, [pc, #168]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009398:	0a5b      	lsrs	r3, r3, #9
 800939a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800939e:	ee07 3a90 	vmov	s15, r3
 80093a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80093b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093ba:	ee17 2a90 	vmov	r2, s15
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80093c2:	4b1f      	ldr	r3, [pc, #124]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093c6:	0c1b      	lsrs	r3, r3, #16
 80093c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093cc:	ee07 3a90 	vmov	s15, r3
 80093d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80093dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80093e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093e8:	ee17 2a90 	vmov	r2, s15
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80093f0:	4b13      	ldr	r3, [pc, #76]	@ (8009440 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f4:	0e1b      	lsrs	r3, r3, #24
 80093f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093fa:	ee07 3a90 	vmov	s15, r3
 80093fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800940a:	edd7 6a07 	vldr	s13, [r7, #28]
 800940e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009416:	ee17 2a90 	vmov	r2, s15
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800941e:	e008      	b.n	8009432 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	609a      	str	r2, [r3, #8]
}
 8009432:	bf00      	nop
 8009434:	3724      	adds	r7, #36	@ 0x24
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr
 800943e:	bf00      	nop
 8009440:	58024400 	.word	0x58024400
 8009444:	03d09000 	.word	0x03d09000
 8009448:	46000000 	.word	0x46000000
 800944c:	4c742400 	.word	0x4c742400
 8009450:	4a742400 	.word	0x4a742400
 8009454:	4bbebc20 	.word	0x4bbebc20

08009458 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009458:	b480      	push	{r7}
 800945a:	b089      	sub	sp, #36	@ 0x24
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009460:	4ba1      	ldr	r3, [pc, #644]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009464:	f003 0303 	and.w	r3, r3, #3
 8009468:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800946a:	4b9f      	ldr	r3, [pc, #636]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800946c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800946e:	0d1b      	lsrs	r3, r3, #20
 8009470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009474:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009476:	4b9c      	ldr	r3, [pc, #624]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947a:	0a1b      	lsrs	r3, r3, #8
 800947c:	f003 0301 	and.w	r3, r3, #1
 8009480:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009482:	4b99      	ldr	r3, [pc, #612]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009486:	08db      	lsrs	r3, r3, #3
 8009488:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800948c:	693a      	ldr	r2, [r7, #16]
 800948e:	fb02 f303 	mul.w	r3, r2, r3
 8009492:	ee07 3a90 	vmov	s15, r3
 8009496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800949a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 8111 	beq.w	80096c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	f000 8083 	beq.w	80095b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	f200 80a1 	bhi.w	80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d056      	beq.n	8009570 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80094c2:	e099      	b.n	80095f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094c4:	4b88      	ldr	r3, [pc, #544]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f003 0320 	and.w	r3, r3, #32
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d02d      	beq.n	800952c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094d0:	4b85      	ldr	r3, [pc, #532]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	08db      	lsrs	r3, r3, #3
 80094d6:	f003 0303 	and.w	r3, r3, #3
 80094da:	4a84      	ldr	r2, [pc, #528]	@ (80096ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80094dc:	fa22 f303 	lsr.w	r3, r2, r3
 80094e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	ee07 3a90 	vmov	s15, r3
 80094e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	ee07 3a90 	vmov	s15, r3
 80094f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094fa:	4b7b      	ldr	r3, [pc, #492]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80094fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009502:	ee07 3a90 	vmov	s15, r3
 8009506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800950a:	ed97 6a03 	vldr	s12, [r7, #12]
 800950e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80096f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800951a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800951e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009526:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800952a:	e087      	b.n	800963c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	ee07 3a90 	vmov	s15, r3
 8009532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009536:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80096f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800953a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800953e:	4b6a      	ldr	r3, [pc, #424]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009546:	ee07 3a90 	vmov	s15, r3
 800954a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800954e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009552:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80096f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800955a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800955e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800956a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800956e:	e065      	b.n	800963c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	ee07 3a90 	vmov	s15, r3
 8009576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800957a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80096f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800957e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009582:	4b59      	ldr	r3, [pc, #356]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800958a:	ee07 3a90 	vmov	s15, r3
 800958e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009592:	ed97 6a03 	vldr	s12, [r7, #12]
 8009596:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80096f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800959a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800959e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095b2:	e043      	b.n	800963c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	ee07 3a90 	vmov	s15, r3
 80095ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80096fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80095c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095c6:	4b48      	ldr	r3, [pc, #288]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095ce:	ee07 3a90 	vmov	s15, r3
 80095d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80095da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80096f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80095f6:	e021      	b.n	800963c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	ee07 3a90 	vmov	s15, r3
 80095fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009602:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80096f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800960a:	4b37      	ldr	r3, [pc, #220]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800960c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800960e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009612:	ee07 3a90 	vmov	s15, r3
 8009616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961a:	ed97 6a03 	vldr	s12, [r7, #12]
 800961e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80096f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800962a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800962e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009636:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800963a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800963c:	4b2a      	ldr	r3, [pc, #168]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800963e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009640:	0a5b      	lsrs	r3, r3, #9
 8009642:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009646:	ee07 3a90 	vmov	s15, r3
 800964a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009652:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009656:	edd7 6a07 	vldr	s13, [r7, #28]
 800965a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800965e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009662:	ee17 2a90 	vmov	r2, s15
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800966a:	4b1f      	ldr	r3, [pc, #124]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800966c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966e:	0c1b      	lsrs	r3, r3, #16
 8009670:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009674:	ee07 3a90 	vmov	s15, r3
 8009678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800967c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009680:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009684:	edd7 6a07 	vldr	s13, [r7, #28]
 8009688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800968c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009690:	ee17 2a90 	vmov	r2, s15
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009698:	4b13      	ldr	r3, [pc, #76]	@ (80096e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800969a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969c:	0e1b      	lsrs	r3, r3, #24
 800969e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096a2:	ee07 3a90 	vmov	s15, r3
 80096a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80096b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096be:	ee17 2a90 	vmov	r2, s15
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80096c6:	e008      	b.n	80096da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	609a      	str	r2, [r3, #8]
}
 80096da:	bf00      	nop
 80096dc:	3724      	adds	r7, #36	@ 0x24
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	58024400 	.word	0x58024400
 80096ec:	03d09000 	.word	0x03d09000
 80096f0:	46000000 	.word	0x46000000
 80096f4:	4c742400 	.word	0x4c742400
 80096f8:	4a742400 	.word	0x4a742400
 80096fc:	4bbebc20 	.word	0x4bbebc20

08009700 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800970a:	2300      	movs	r3, #0
 800970c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800970e:	4b53      	ldr	r3, [pc, #332]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009712:	f003 0303 	and.w	r3, r3, #3
 8009716:	2b03      	cmp	r3, #3
 8009718:	d101      	bne.n	800971e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e099      	b.n	8009852 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800971e:	4b4f      	ldr	r3, [pc, #316]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a4e      	ldr	r2, [pc, #312]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009724:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800972a:	f7f8 fde5 	bl	80022f8 <HAL_GetTick>
 800972e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009730:	e008      	b.n	8009744 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009732:	f7f8 fde1 	bl	80022f8 <HAL_GetTick>
 8009736:	4602      	mov	r2, r0
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	1ad3      	subs	r3, r2, r3
 800973c:	2b02      	cmp	r3, #2
 800973e:	d901      	bls.n	8009744 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	e086      	b.n	8009852 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009744:	4b45      	ldr	r3, [pc, #276]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1f0      	bne.n	8009732 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009750:	4b42      	ldr	r3, [pc, #264]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009754:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	031b      	lsls	r3, r3, #12
 800975e:	493f      	ldr	r1, [pc, #252]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009760:	4313      	orrs	r3, r2
 8009762:	628b      	str	r3, [r1, #40]	@ 0x28
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	3b01      	subs	r3, #1
 800976a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	3b01      	subs	r3, #1
 8009774:	025b      	lsls	r3, r3, #9
 8009776:	b29b      	uxth	r3, r3
 8009778:	431a      	orrs	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	3b01      	subs	r3, #1
 8009780:	041b      	lsls	r3, r3, #16
 8009782:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009786:	431a      	orrs	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	3b01      	subs	r3, #1
 800978e:	061b      	lsls	r3, r3, #24
 8009790:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009794:	4931      	ldr	r1, [pc, #196]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009796:	4313      	orrs	r3, r2
 8009798:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800979a:	4b30      	ldr	r3, [pc, #192]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 800979c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800979e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	695b      	ldr	r3, [r3, #20]
 80097a6:	492d      	ldr	r1, [pc, #180]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097a8:	4313      	orrs	r3, r2
 80097aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80097ac:	4b2b      	ldr	r3, [pc, #172]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b0:	f023 0220 	bic.w	r2, r3, #32
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	699b      	ldr	r3, [r3, #24]
 80097b8:	4928      	ldr	r1, [pc, #160]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80097be:	4b27      	ldr	r3, [pc, #156]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c2:	4a26      	ldr	r2, [pc, #152]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097c4:	f023 0310 	bic.w	r3, r3, #16
 80097c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80097ca:	4b24      	ldr	r3, [pc, #144]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097ce:	4b24      	ldr	r3, [pc, #144]	@ (8009860 <RCCEx_PLL2_Config+0x160>)
 80097d0:	4013      	ands	r3, r2
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	69d2      	ldr	r2, [r2, #28]
 80097d6:	00d2      	lsls	r2, r2, #3
 80097d8:	4920      	ldr	r1, [pc, #128]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097da:	4313      	orrs	r3, r2
 80097dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80097de:	4b1f      	ldr	r3, [pc, #124]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097e2:	4a1e      	ldr	r2, [pc, #120]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097e4:	f043 0310 	orr.w	r3, r3, #16
 80097e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d106      	bne.n	80097fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80097f0:	4b1a      	ldr	r3, [pc, #104]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f4:	4a19      	ldr	r2, [pc, #100]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 80097f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80097fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80097fc:	e00f      	b.n	800981e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d106      	bne.n	8009812 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009804:	4b15      	ldr	r3, [pc, #84]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009808:	4a14      	ldr	r2, [pc, #80]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 800980a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800980e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009810:	e005      	b.n	800981e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009812:	4b12      	ldr	r3, [pc, #72]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009816:	4a11      	ldr	r2, [pc, #68]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009818:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800981c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800981e:	4b0f      	ldr	r3, [pc, #60]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a0e      	ldr	r2, [pc, #56]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009824:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800982a:	f7f8 fd65 	bl	80022f8 <HAL_GetTick>
 800982e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009830:	e008      	b.n	8009844 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009832:	f7f8 fd61 	bl	80022f8 <HAL_GetTick>
 8009836:	4602      	mov	r2, r0
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	2b02      	cmp	r3, #2
 800983e:	d901      	bls.n	8009844 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e006      	b.n	8009852 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009844:	4b05      	ldr	r3, [pc, #20]	@ (800985c <RCCEx_PLL2_Config+0x15c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d0f0      	beq.n	8009832 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	58024400 	.word	0x58024400
 8009860:	ffff0007 	.word	0xffff0007

08009864 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009872:	4b53      	ldr	r3, [pc, #332]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009876:	f003 0303 	and.w	r3, r3, #3
 800987a:	2b03      	cmp	r3, #3
 800987c:	d101      	bne.n	8009882 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e099      	b.n	80099b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009882:	4b4f      	ldr	r3, [pc, #316]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a4e      	ldr	r2, [pc, #312]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009888:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800988c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800988e:	f7f8 fd33 	bl	80022f8 <HAL_GetTick>
 8009892:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009894:	e008      	b.n	80098a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009896:	f7f8 fd2f 	bl	80022f8 <HAL_GetTick>
 800989a:	4602      	mov	r2, r0
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d901      	bls.n	80098a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80098a4:	2303      	movs	r3, #3
 80098a6:	e086      	b.n	80099b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80098a8:	4b45      	ldr	r3, [pc, #276]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1f0      	bne.n	8009896 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80098b4:	4b42      	ldr	r3, [pc, #264]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 80098b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	051b      	lsls	r3, r3, #20
 80098c2:	493f      	ldr	r1, [pc, #252]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 80098c4:	4313      	orrs	r3, r2
 80098c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	3b01      	subs	r3, #1
 80098d8:	025b      	lsls	r3, r3, #9
 80098da:	b29b      	uxth	r3, r3
 80098dc:	431a      	orrs	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	041b      	lsls	r3, r3, #16
 80098e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80098ea:	431a      	orrs	r2, r3
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	3b01      	subs	r3, #1
 80098f2:	061b      	lsls	r3, r3, #24
 80098f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80098f8:	4931      	ldr	r1, [pc, #196]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 80098fa:	4313      	orrs	r3, r2
 80098fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80098fe:	4b30      	ldr	r3, [pc, #192]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009902:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	492d      	ldr	r1, [pc, #180]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 800990c:	4313      	orrs	r3, r2
 800990e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009910:	4b2b      	ldr	r3, [pc, #172]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009914:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	699b      	ldr	r3, [r3, #24]
 800991c:	4928      	ldr	r1, [pc, #160]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 800991e:	4313      	orrs	r3, r2
 8009920:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009922:	4b27      	ldr	r3, [pc, #156]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009926:	4a26      	ldr	r2, [pc, #152]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800992c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800992e:	4b24      	ldr	r3, [pc, #144]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009930:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009932:	4b24      	ldr	r3, [pc, #144]	@ (80099c4 <RCCEx_PLL3_Config+0x160>)
 8009934:	4013      	ands	r3, r2
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	69d2      	ldr	r2, [r2, #28]
 800993a:	00d2      	lsls	r2, r2, #3
 800993c:	4920      	ldr	r1, [pc, #128]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 800993e:	4313      	orrs	r3, r2
 8009940:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009942:	4b1f      	ldr	r3, [pc, #124]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009946:	4a1e      	ldr	r2, [pc, #120]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800994c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d106      	bne.n	8009962 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009954:	4b1a      	ldr	r3, [pc, #104]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009958:	4a19      	ldr	r2, [pc, #100]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 800995a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800995e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009960:	e00f      	b.n	8009982 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d106      	bne.n	8009976 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009968:	4b15      	ldr	r3, [pc, #84]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 800996a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800996c:	4a14      	ldr	r2, [pc, #80]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 800996e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009972:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009974:	e005      	b.n	8009982 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009976:	4b12      	ldr	r3, [pc, #72]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800997a:	4a11      	ldr	r2, [pc, #68]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 800997c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009980:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009982:	4b0f      	ldr	r3, [pc, #60]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a0e      	ldr	r2, [pc, #56]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 8009988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800998c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800998e:	f7f8 fcb3 	bl	80022f8 <HAL_GetTick>
 8009992:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009994:	e008      	b.n	80099a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009996:	f7f8 fcaf 	bl	80022f8 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d901      	bls.n	80099a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e006      	b.n	80099b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80099a8:	4b05      	ldr	r3, [pc, #20]	@ (80099c0 <RCCEx_PLL3_Config+0x15c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d0f0      	beq.n	8009996 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	58024400 	.word	0x58024400
 80099c4:	ffff0007 	.word	0xffff0007

080099c8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b084      	sub	sp, #16
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d101      	bne.n	80099da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e158      	b.n	8009c8c <HAL_SPI_Init+0x2c4>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a5f      	ldr	r2, [pc, #380]	@ (8009b64 <HAL_SPI_Init+0x19c>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d00f      	beq.n	8009a0a <HAL_SPI_Init+0x42>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a5e      	ldr	r2, [pc, #376]	@ (8009b68 <HAL_SPI_Init+0x1a0>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d00a      	beq.n	8009a0a <HAL_SPI_Init+0x42>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a5c      	ldr	r2, [pc, #368]	@ (8009b6c <HAL_SPI_Init+0x1a4>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d005      	beq.n	8009a0a <HAL_SPI_Init+0x42>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	2b0f      	cmp	r3, #15
 8009a04:	d901      	bls.n	8009a0a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e140      	b.n	8009c8c <HAL_SPI_Init+0x2c4>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f001 fd30 	bl	800b470 <SPI_GetPacketSize>
 8009a10:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a53      	ldr	r2, [pc, #332]	@ (8009b64 <HAL_SPI_Init+0x19c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d00c      	beq.n	8009a36 <HAL_SPI_Init+0x6e>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a51      	ldr	r2, [pc, #324]	@ (8009b68 <HAL_SPI_Init+0x1a0>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d007      	beq.n	8009a36 <HAL_SPI_Init+0x6e>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a50      	ldr	r2, [pc, #320]	@ (8009b6c <HAL_SPI_Init+0x1a4>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d002      	beq.n	8009a36 <HAL_SPI_Init+0x6e>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2b08      	cmp	r3, #8
 8009a34:	d811      	bhi.n	8009a5a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009a3a:	4a4a      	ldr	r2, [pc, #296]	@ (8009b64 <HAL_SPI_Init+0x19c>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d009      	beq.n	8009a54 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a48      	ldr	r2, [pc, #288]	@ (8009b68 <HAL_SPI_Init+0x1a0>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d004      	beq.n	8009a54 <HAL_SPI_Init+0x8c>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a47      	ldr	r2, [pc, #284]	@ (8009b6c <HAL_SPI_Init+0x1a4>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d104      	bne.n	8009a5e <HAL_SPI_Init+0x96>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2b10      	cmp	r3, #16
 8009a58:	d901      	bls.n	8009a5e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e116      	b.n	8009c8c <HAL_SPI_Init+0x2c4>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d135      	bne.n	8009ad6 <HAL_SPI_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4a3e      	ldr	r2, [pc, #248]	@ (8009b70 <HAL_SPI_Init+0x1a8>)
 8009a76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	4a3d      	ldr	r2, [pc, #244]	@ (8009b74 <HAL_SPI_Init+0x1ac>)
 8009a7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	4a3c      	ldr	r2, [pc, #240]	@ (8009b78 <HAL_SPI_Init+0x1b0>)
 8009a86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4a3b      	ldr	r2, [pc, #236]	@ (8009b7c <HAL_SPI_Init+0x1b4>)
 8009a8e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4a3a      	ldr	r2, [pc, #232]	@ (8009b80 <HAL_SPI_Init+0x1b8>)
 8009a96:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a39      	ldr	r2, [pc, #228]	@ (8009b84 <HAL_SPI_Init+0x1bc>)
 8009a9e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	4a38      	ldr	r2, [pc, #224]	@ (8009b88 <HAL_SPI_Init+0x1c0>)
 8009aa6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a37      	ldr	r2, [pc, #220]	@ (8009b8c <HAL_SPI_Init+0x1c4>)
 8009aae:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    hspi->SuspendCallback      = HAL_SPI_SuspendCallback;      /* Legacy weak SuspendCallback      */
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a36      	ldr	r2, [pc, #216]	@ (8009b90 <HAL_SPI_Init+0x1c8>)
 8009ab6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

    if (hspi->MspInitCallback == NULL)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d103      	bne.n	8009acc <HAL_SPI_Init+0x104>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a33      	ldr	r2, [pc, #204]	@ (8009b94 <HAL_SPI_Init+0x1cc>)
 8009ac8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2202      	movs	r2, #2
 8009ada:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 0201 	bic.w	r2, r2, #1
 8009aec:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009af8:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009b02:	d119      	bne.n	8009b38 <HAL_SPI_Init+0x170>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b0c:	d103      	bne.n	8009b16 <HAL_SPI_Init+0x14e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d008      	beq.n	8009b28 <HAL_SPI_Init+0x160>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10c      	bne.n	8009b38 <HAL_SPI_Init+0x170>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009b22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b26:	d107      	bne.n	8009b38 <HAL_SPI_Init+0x170>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009b36:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d029      	beq.n	8009b98 <HAL_SPI_Init+0x1d0>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	2b06      	cmp	r3, #6
 8009b4a:	d925      	bls.n	8009b98 <HAL_SPI_Init+0x1d0>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	430a      	orrs	r2, r1
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	e021      	b.n	8009ba8 <HAL_SPI_Init+0x1e0>
 8009b64:	40013000 	.word	0x40013000
 8009b68:	40003800 	.word	0x40003800
 8009b6c:	40003c00 	.word	0x40003c00
 8009b70:	0800b001 	.word	0x0800b001
 8009b74:	0800b015 	.word	0x0800b015
 8009b78:	0800b029 	.word	0x0800b029
 8009b7c:	0800b03d 	.word	0x0800b03d
 8009b80:	0800b051 	.word	0x0800b051
 8009b84:	0800b065 	.word	0x0800b065
 8009b88:	0800b079 	.word	0x0800b079
 8009b8c:	0800b08d 	.word	0x0800b08d
 8009b90:	0800b0a1 	.word	0x0800b0a1
 8009b94:	080014d9 	.word	0x080014d9
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009ba6:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	69da      	ldr	r2, [r3, #28]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bb0:	431a      	orrs	r2, r3
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bba:	ea42 0103 	orr.w	r1, r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68da      	ldr	r2, [r3, #12]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	430a      	orrs	r2, r1
 8009bc8:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd2:	431a      	orrs	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd8:	431a      	orrs	r2, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	431a      	orrs	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	431a      	orrs	r2, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	695b      	ldr	r3, [r3, #20]
 8009bea:	431a      	orrs	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6a1b      	ldr	r3, [r3, #32]
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	431a      	orrs	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009c08:	ea42 0103 	orr.w	r1, r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	430a      	orrs	r2, r1
 8009c16:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d113      	bne.n	8009c48 <HAL_SPI_Init+0x280>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c32:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	689b      	ldr	r3, [r3, #8]
 8009c3a:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009c46:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f022 0201 	bic.w	r2, r2, #1
 8009c56:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00a      	beq.n	8009c7a <HAL_SPI_Init+0x2b2>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	430a      	orrs	r2, r1
 8009c78:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009c8a:	2300      	movs	r3, #0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <HAL_SPI_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_RegisterCallback(SPI_HandleTypeDef *hspi, HAL_SPI_CallbackIDTypeDef CallbackID,
                                           pSPI_CallbackTypeDef pCallback)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b087      	sub	sp, #28
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	607a      	str	r2, [r7, #4]
 8009ca0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d109      	bne.n	8009cc0 <HAL_SPI_RegisterCallback+0x2c>
  {
    /* Update the error code */
    hspi->ErrorCode |= HAL_SPI_ERROR_INVALID_CALLBACK;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009cb2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e09f      	b.n	8009e00 <HAL_SPI_RegisterCallback+0x16c>
  }
  /* Lock the process */
  __HAL_LOCK(hspi);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d101      	bne.n	8009cce <HAL_SPI_RegisterCallback+0x3a>
 8009cca:	2302      	movs	r3, #2
 8009ccc:	e098      	b.n	8009e00 <HAL_SPI_RegisterCallback+0x16c>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (HAL_SPI_STATE_READY == hspi->State)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d15e      	bne.n	8009da0 <HAL_SPI_RegisterCallback+0x10c>
  {
    switch (CallbackID)
 8009ce2:	7afb      	ldrb	r3, [r7, #11]
 8009ce4:	2b0a      	cmp	r3, #10
 8009ce6:	d850      	bhi.n	8009d8a <HAL_SPI_RegisterCallback+0xf6>
 8009ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf0 <HAL_SPI_RegisterCallback+0x5c>)
 8009cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cee:	bf00      	nop
 8009cf0:	08009d1d 	.word	0x08009d1d
 8009cf4:	08009d27 	.word	0x08009d27
 8009cf8:	08009d31 	.word	0x08009d31
 8009cfc:	08009d3b 	.word	0x08009d3b
 8009d00:	08009d45 	.word	0x08009d45
 8009d04:	08009d4f 	.word	0x08009d4f
 8009d08:	08009d59 	.word	0x08009d59
 8009d0c:	08009d63 	.word	0x08009d63
 8009d10:	08009d6d 	.word	0x08009d6d
 8009d14:	08009d77 	.word	0x08009d77
 8009d18:	08009d81 	.word	0x08009d81
    {
      case HAL_SPI_TX_COMPLETE_CB_ID :
        hspi->TxCpltCallback = pCallback;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8009d24:	e067      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_RX_COMPLETE_CB_ID :
        hspi->RxCpltCallback = pCallback;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8009d2e:	e062      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_TX_RX_COMPLETE_CB_ID :
        hspi->TxRxCpltCallback = pCallback;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8009d38:	e05d      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_TX_HALF_COMPLETE_CB_ID :
        hspi->TxHalfCpltCallback = pCallback;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009d42:	e058      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_RX_HALF_COMPLETE_CB_ID :
        hspi->RxHalfCpltCallback = pCallback;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009d4c:	e053      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID :
        hspi->TxRxHalfCpltCallback = pCallback;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009d56:	e04e      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_ERROR_CB_ID :
        hspi->ErrorCallback = pCallback;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009d60:	e049      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_ABORT_CB_ID :
        hspi->AbortCpltCallback = pCallback;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009d6a:	e044      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_SUSPEND_CB_ID :
        hspi->SuspendCallback = pCallback;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009d74:	e03f      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009d7e:	e03a      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009d88:	e035      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d90:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Return error status */
        status =  HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	75fb      	strb	r3, [r7, #23]
        break;
 8009d9e:	e02a      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>
    }
  }
  else if (HAL_SPI_STATE_RESET == hspi->State)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d11a      	bne.n	8009de2 <HAL_SPI_RegisterCallback+0x14e>
  {
    switch (CallbackID)
 8009dac:	7afb      	ldrb	r3, [r7, #11]
 8009dae:	2b09      	cmp	r3, #9
 8009db0:	d002      	beq.n	8009db8 <HAL_SPI_RegisterCallback+0x124>
 8009db2:	2b0a      	cmp	r3, #10
 8009db4:	d005      	beq.n	8009dc2 <HAL_SPI_RegisterCallback+0x12e>
 8009db6:	e009      	b.n	8009dcc <HAL_SPI_RegisterCallback+0x138>
    {
      case HAL_SPI_MSPINIT_CB_ID :
        hspi->MspInitCallback = pCallback;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009dc0:	e019      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>

      case HAL_SPI_MSPDEINIT_CB_ID :
        hspi->MspDeInitCallback = pCallback;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009dca:	e014      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>

      default :
        /* Update the error code */
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009dd2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Return error status */
        status =  HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	75fb      	strb	r3, [r7, #23]
        break;
 8009de0:	e009      	b.n	8009df6 <HAL_SPI_RegisterCallback+0x162>
    }
  }
  else
  {
    /* Update the error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_INVALID_CALLBACK);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009de8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return error status */
    status =  HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  return status;
 8009dfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	371c      	adds	r7, #28
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b08a      	sub	sp, #40	@ 0x28
 8009e10:	af02      	add	r7, sp, #8
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	603b      	str	r3, [r7, #0]
 8009e18:	4613      	mov	r3, r2
 8009e1a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3320      	adds	r3, #32
 8009e22:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009e24:	2300      	movs	r3, #0
 8009e26:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d101      	bne.n	8009e36 <HAL_SPI_Transmit+0x2a>
 8009e32:	2302      	movs	r3, #2
 8009e34:	e1e1      	b.n	800a1fa <HAL_SPI_Transmit+0x3ee>
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e3e:	f7f8 fa5b 	bl	80022f8 <HAL_GetTick>
 8009e42:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d007      	beq.n	8009e60 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009e50:	2302      	movs	r3, #2
 8009e52:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8009e5c:	7efb      	ldrb	r3, [r7, #27]
 8009e5e:	e1cc      	b.n	800a1fa <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <HAL_SPI_Transmit+0x60>
 8009e66:	88fb      	ldrh	r3, [r7, #6]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d107      	bne.n	8009e7c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 8009e78:	7efb      	ldrb	r3, [r7, #27]
 8009e7a:	e1be      	b.n	800a1fa <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2203      	movs	r2, #3
 8009e80:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	88fa      	ldrh	r2, [r7, #6]
 8009e96:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	88fa      	ldrh	r2, [r7, #6]
 8009e9e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009ecc:	d108      	bne.n	8009ee0 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	e009      	b.n	8009ef4 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009ef2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685a      	ldr	r2, [r3, #4]
 8009efa:	4b96      	ldr	r3, [pc, #600]	@ (800a154 <HAL_SPI_Transmit+0x348>)
 8009efc:	4013      	ands	r3, r2
 8009efe:	88f9      	ldrh	r1, [r7, #6]
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	6812      	ldr	r2, [r2, #0]
 8009f04:	430b      	orrs	r3, r1
 8009f06:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f042 0201 	orr.w	r2, r2, #1
 8009f16:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f20:	d107      	bne.n	8009f32 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	68db      	ldr	r3, [r3, #12]
 8009f36:	2b0f      	cmp	r3, #15
 8009f38:	d947      	bls.n	8009fca <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009f3a:	e03f      	b.n	8009fbc <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	f003 0302 	and.w	r3, r3, #2
 8009f46:	2b02      	cmp	r3, #2
 8009f48:	d114      	bne.n	8009f74 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6812      	ldr	r2, [r2, #0]
 8009f54:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f5a:	1d1a      	adds	r2, r3, #4
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009f72:	e023      	b.n	8009fbc <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f74:	f7f8 f9c0 	bl	80022f8 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d803      	bhi.n	8009f8c <HAL_SPI_Transmit+0x180>
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f8a:	d102      	bne.n	8009f92 <HAL_SPI_Transmit+0x186>
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d114      	bne.n	8009fbc <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009f92:	68f8      	ldr	r0, [r7, #12]
 8009f94:	f001 f99e 	bl	800b2d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fa6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e11e      	b.n	800a1fa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d1b9      	bne.n	8009f3c <HAL_SPI_Transmit+0x130>
 8009fc8:	e0f1      	b.n	800a1ae <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	2b07      	cmp	r3, #7
 8009fd0:	f240 80e6 	bls.w	800a1a0 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009fd4:	e05d      	b.n	800a092 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	f003 0302 	and.w	r3, r3, #2
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d132      	bne.n	800a04a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d918      	bls.n	800a022 <HAL_SPI_Transmit+0x216>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d014      	beq.n	800a022 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6812      	ldr	r2, [r2, #0]
 800a002:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a008:	1d1a      	adds	r2, r3, #4
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a014:	b29b      	uxth	r3, r3
 800a016:	3b02      	subs	r3, #2
 800a018:	b29a      	uxth	r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a020:	e037      	b.n	800a092 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a026:	881a      	ldrh	r2, [r3, #0]
 800a028:	69fb      	ldr	r3, [r7, #28]
 800a02a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a030:	1c9a      	adds	r2, r3, #2
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	3b01      	subs	r3, #1
 800a040:	b29a      	uxth	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a048:	e023      	b.n	800a092 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a04a:	f7f8 f955 	bl	80022f8 <HAL_GetTick>
 800a04e:	4602      	mov	r2, r0
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	1ad3      	subs	r3, r2, r3
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	429a      	cmp	r2, r3
 800a058:	d803      	bhi.n	800a062 <HAL_SPI_Transmit+0x256>
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a060:	d102      	bne.n	800a068 <HAL_SPI_Transmit+0x25c>
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d114      	bne.n	800a092 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f001 f933 	bl	800b2d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2200      	movs	r2, #0
 800a072:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a07c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e0b3      	b.n	800a1fa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a098:	b29b      	uxth	r3, r3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d19b      	bne.n	8009fd6 <HAL_SPI_Transmit+0x1ca>
 800a09e:	e086      	b.n	800a1ae <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	695b      	ldr	r3, [r3, #20]
 800a0a6:	f003 0302 	and.w	r3, r3, #2
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d154      	bne.n	800a158 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	d918      	bls.n	800a0ec <HAL_SPI_Transmit+0x2e0>
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0be:	2b40      	cmp	r3, #64	@ 0x40
 800a0c0:	d914      	bls.n	800a0ec <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	6812      	ldr	r2, [r2, #0]
 800a0cc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0d2:	1d1a      	adds	r2, r3, #4
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	3b04      	subs	r3, #4
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a0ea:	e059      	b.n	800a1a0 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d917      	bls.n	800a128 <HAL_SPI_Transmit+0x31c>
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d013      	beq.n	800a128 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a104:	881a      	ldrh	r2, [r3, #0]
 800a106:	69fb      	ldr	r3, [r7, #28]
 800a108:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a10e:	1c9a      	adds	r2, r3, #2
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a11a:	b29b      	uxth	r3, r3
 800a11c:	3b02      	subs	r3, #2
 800a11e:	b29a      	uxth	r2, r3
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a126:	e03b      	b.n	800a1a0 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	3320      	adds	r3, #32
 800a132:	7812      	ldrb	r2, [r2, #0]
 800a134:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a146:	b29b      	uxth	r3, r3
 800a148:	3b01      	subs	r3, #1
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a152:	e025      	b.n	800a1a0 <HAL_SPI_Transmit+0x394>
 800a154:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a158:	f7f8 f8ce 	bl	80022f8 <HAL_GetTick>
 800a15c:	4602      	mov	r2, r0
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	683a      	ldr	r2, [r7, #0]
 800a164:	429a      	cmp	r2, r3
 800a166:	d803      	bhi.n	800a170 <HAL_SPI_Transmit+0x364>
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a16e:	d102      	bne.n	800a176 <HAL_SPI_Transmit+0x36a>
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d114      	bne.n	800a1a0 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f001 f8ac 	bl	800b2d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a18a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e02c      	b.n	800a1fa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f47f af79 	bne.w	800a0a0 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	2108      	movs	r1, #8
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f001 f92b 	bl	800b414 <SPI_WaitOnFlagUntilTimeout>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d007      	beq.n	800a1d4 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1ca:	f043 0220 	orr.w	r2, r3, #32
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f001 f87d 	bl	800b2d4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e000      	b.n	800a1fa <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800a1f8:	7efb      	ldrb	r3, [r7, #27]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3720      	adds	r7, #32
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop

0800a204 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	603b      	str	r3, [r7, #0]
 800a210:	4613      	mov	r3, r2
 800a212:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3330      	adds	r3, #48	@ 0x30
 800a21e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a226:	2b01      	cmp	r3, #1
 800a228:	d101      	bne.n	800a22e <HAL_SPI_Receive+0x2a>
 800a22a:	2302      	movs	r3, #2
 800a22c:	e173      	b.n	800a516 <HAL_SPI_Receive+0x312>
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2201      	movs	r2, #1
 800a232:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a236:	f7f8 f85f 	bl	80022f8 <HAL_GetTick>
 800a23a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a242:	b2db      	uxtb	r3, r3
 800a244:	2b01      	cmp	r3, #1
 800a246:	d007      	beq.n	800a258 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800a248:	2302      	movs	r3, #2
 800a24a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800a254:	7ffb      	ldrb	r3, [r7, #31]
 800a256:	e15e      	b.n	800a516 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <HAL_SPI_Receive+0x60>
 800a25e:	88fb      	ldrh	r3, [r7, #6]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d107      	bne.n	800a274 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800a270:	7ffb      	ldrb	r3, [r7, #31]
 800a272:	e150      	b.n	800a516 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2204      	movs	r2, #4
 800a278:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2200      	movs	r2, #0
 800a280:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	88fa      	ldrh	r2, [r7, #6]
 800a28e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	88fa      	ldrh	r2, [r7, #6]
 800a296:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2200      	movs	r2, #0
 800a29e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a2c4:	d108      	bne.n	800a2d8 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a2d4:	601a      	str	r2, [r3, #0]
 800a2d6:	e009      	b.n	800a2ec <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a2ea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	4b8b      	ldr	r3, [pc, #556]	@ (800a520 <HAL_SPI_Receive+0x31c>)
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	88f9      	ldrh	r1, [r7, #6]
 800a2f8:	68fa      	ldr	r2, [r7, #12]
 800a2fa:	6812      	ldr	r2, [r2, #0]
 800a2fc:	430b      	orrs	r3, r1
 800a2fe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f042 0201 	orr.w	r2, r2, #1
 800a30e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a318:	d107      	bne.n	800a32a <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	681a      	ldr	r2, [r3, #0]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a328:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	2b0f      	cmp	r3, #15
 800a330:	d948      	bls.n	800a3c4 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a332:	e040      	b.n	800a3b6 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	695a      	ldr	r2, [r3, #20]
 800a33a:	f248 0308 	movw	r3, #32776	@ 0x8008
 800a33e:	4013      	ands	r3, r2
 800a340:	2b00      	cmp	r3, #0
 800a342:	d014      	beq.n	800a36e <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a34c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a34e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a354:	1d1a      	adds	r2, r3, #4
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a360:	b29b      	uxth	r3, r3
 800a362:	3b01      	subs	r3, #1
 800a364:	b29a      	uxth	r2, r3
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a36c:	e023      	b.n	800a3b6 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a36e:	f7f7 ffc3 	bl	80022f8 <HAL_GetTick>
 800a372:	4602      	mov	r2, r0
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	1ad3      	subs	r3, r2, r3
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d803      	bhi.n	800a386 <HAL_SPI_Receive+0x182>
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a384:	d102      	bne.n	800a38c <HAL_SPI_Receive+0x188>
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d114      	bne.n	800a3b6 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 ffa1 	bl	800b2d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e0af      	b.n	800a516 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1b8      	bne.n	800a334 <HAL_SPI_Receive+0x130>
 800a3c2:	e095      	b.n	800a4f0 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	2b07      	cmp	r3, #7
 800a3ca:	f240 808b 	bls.w	800a4e4 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a3ce:	e03f      	b.n	800a450 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d114      	bne.n	800a408 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3e2:	69ba      	ldr	r2, [r7, #24]
 800a3e4:	8812      	ldrh	r2, [r2, #0]
 800a3e6:	b292      	uxth	r2, r2
 800a3e8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a3ee:	1c9a      	adds	r2, r3, #2
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a406:	e023      	b.n	800a450 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a408:	f7f7 ff76 	bl	80022f8 <HAL_GetTick>
 800a40c:	4602      	mov	r2, r0
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	683a      	ldr	r2, [r7, #0]
 800a414:	429a      	cmp	r2, r3
 800a416:	d803      	bhi.n	800a420 <HAL_SPI_Receive+0x21c>
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a41e:	d102      	bne.n	800a426 <HAL_SPI_Receive+0x222>
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d114      	bne.n	800a450 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f000 ff54 	bl	800b2d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a43a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800a44c:	2303      	movs	r3, #3
 800a44e:	e062      	b.n	800a516 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a456:	b29b      	uxth	r3, r3
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1b9      	bne.n	800a3d0 <HAL_SPI_Receive+0x1cc>
 800a45c:	e048      	b.n	800a4f0 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	695b      	ldr	r3, [r3, #20]
 800a464:	f003 0301 	and.w	r3, r3, #1
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d117      	bne.n	800a49c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a478:	7812      	ldrb	r2, [r2, #0]
 800a47a:	b2d2      	uxtb	r2, r2
 800a47c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a48e:	b29b      	uxth	r3, r3
 800a490:	3b01      	subs	r3, #1
 800a492:	b29a      	uxth	r2, r3
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a49a:	e023      	b.n	800a4e4 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a49c:	f7f7 ff2c 	bl	80022f8 <HAL_GetTick>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	1ad3      	subs	r3, r2, r3
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d803      	bhi.n	800a4b4 <HAL_SPI_Receive+0x2b0>
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4b2:	d102      	bne.n	800a4ba <HAL_SPI_Receive+0x2b6>
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d114      	bne.n	800a4e4 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 ff0a 	bl	800b2d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4ce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
          return HAL_TIMEOUT;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e018      	b.n	800a516 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1b6      	bne.n	800a45e <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f000 feef 	bl	800b2d4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800a510:	2301      	movs	r3, #1
 800a512:	e000      	b.n	800a516 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800a514:	7ffb      	ldrb	r3, [r7, #31]
}
 800a516:	4618      	mov	r0, r3
 800a518:	3720      	adds	r7, #32
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	ffff0000 	.word	0xffff0000

0800a524 <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b086      	sub	sp, #24
 800a528:	af00      	add	r7, sp, #0
 800a52a:	60f8      	str	r0, [r7, #12]
 800a52c:	60b9      	str	r1, [r7, #8]
 800a52e:	4613      	mov	r3, r2
 800a530:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d101      	bne.n	800a544 <HAL_SPI_Transmit_DMA+0x20>
 800a540:	2302      	movs	r3, #2
 800a542:	e137      	b.n	800a7b4 <HAL_SPI_Transmit_DMA+0x290>
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a552:	b2db      	uxtb	r3, r3
 800a554:	2b01      	cmp	r3, #1
 800a556:	d007      	beq.n	800a568 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800a558:	2302      	movs	r3, #2
 800a55a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800a564:	7dfb      	ldrb	r3, [r7, #23]
 800a566:	e125      	b.n	800a7b4 <HAL_SPI_Transmit_DMA+0x290>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d002      	beq.n	800a574 <HAL_SPI_Transmit_DMA+0x50>
 800a56e:	88fb      	ldrh	r3, [r7, #6]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d107      	bne.n	800a584 <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800a580:	7dfb      	ldrb	r3, [r7, #23]
 800a582:	e117      	b.n	800a7b4 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2203      	movs	r2, #3
 800a588:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	88fa      	ldrh	r2, [r7, #6]
 800a59e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	88fa      	ldrh	r2, [r7, #6]
 800a5a6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxISR       = NULL;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a5d4:	d108      	bne.n	800a5e8 <HAL_SPI_Transmit_DMA+0xc4>
  {
    SPI_1LINE_TX(hspi);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	e009      	b.n	800a5fc <HAL_SPI_Transmit_DMA+0xd8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a5fa:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	2b0f      	cmp	r3, #15
 800a602:	d905      	bls.n	800a610 <HAL_SPI_Transmit_DMA+0xec>
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a608:	699b      	ldr	r3, [r3, #24]
 800a60a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a60e:	d10f      	bne.n	800a630 <HAL_SPI_Transmit_DMA+0x10c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a614:	2b07      	cmp	r3, #7
 800a616:	d913      	bls.n	800a640 <HAL_SPI_Transmit_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a622:	d00d      	beq.n	800a640 <HAL_SPI_Transmit_DMA+0x11c>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a628:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a62a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a62e:	d007      	beq.n	800a640 <HAL_SPI_Transmit_DMA+0x11c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800a630:	2301      	movs	r3, #1
 800a632:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800a63c:	7dfb      	ldrb	r3, [r7, #23]
 800a63e:	e0b9      	b.n	800a7b4 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	68db      	ldr	r3, [r3, #12]
 800a644:	2b07      	cmp	r3, #7
 800a646:	d820      	bhi.n	800a68a <HAL_SPI_Transmit_DMA+0x166>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a652:	d109      	bne.n	800a668 <HAL_SPI_Transmit_DMA+0x144>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	3301      	adds	r3, #1
 800a65e:	105b      	asrs	r3, r3, #1
 800a660:	b29a      	uxth	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a672:	d11e      	bne.n	800a6b2 <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	3303      	adds	r3, #3
 800a67e:	109b      	asrs	r3, r3, #2
 800a680:	b29a      	uxth	r2, r3
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a688:	e013      	b.n	800a6b2 <HAL_SPI_Transmit_DMA+0x18e>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	2b0f      	cmp	r3, #15
 800a690:	d80f      	bhi.n	800a6b2 <HAL_SPI_Transmit_DMA+0x18e>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a69c:	d109      	bne.n	800a6b2 <HAL_SPI_Transmit_DMA+0x18e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	105b      	asrs	r3, r3, #1
 800a6aa:	b29a      	uxth	r2, r3
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6b6:	4a41      	ldr	r2, [pc, #260]	@ (800a7bc <HAL_SPI_Transmit_DMA+0x298>)
 800a6b8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6be:	4a40      	ldr	r2, [pc, #256]	@ (800a7c0 <HAL_SPI_Transmit_DMA+0x29c>)
 800a6c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6c6:	4a3f      	ldr	r2, [pc, #252]	@ (800a7c4 <HAL_SPI_Transmit_DMA+0x2a0>)
 800a6c8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	689a      	ldr	r2, [r3, #8]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a6e0:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	3320      	adds	r3, #32
 800a6f2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a6fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a6fc:	f7f8 fa74 	bl	8002be8 <HAL_DMA_Start_IT>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d013      	beq.n	800a72e <HAL_SPI_Transmit_DMA+0x20a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a70c:	f043 0210 	orr.w	r2, r3, #16
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2201      	movs	r2, #1
 800a722:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    errorcode = HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800a72a:	7dfb      	ldrb	r3, [r7, #23]
 800a72c:	e042      	b.n	800a7b4 <HAL_SPI_Transmit_DMA+0x290>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a732:	69db      	ldr	r3, [r3, #28]
 800a734:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a738:	d108      	bne.n	800a74c <HAL_SPI_Transmit_DMA+0x228>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	6859      	ldr	r1, [r3, #4]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	4b20      	ldr	r3, [pc, #128]	@ (800a7c8 <HAL_SPI_Transmit_DMA+0x2a4>)
 800a746:	400b      	ands	r3, r1
 800a748:	6053      	str	r3, [r2, #4]
 800a74a:	e009      	b.n	800a760 <HAL_SPI_Transmit_DMA+0x23c>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	4b1d      	ldr	r3, [pc, #116]	@ (800a7c8 <HAL_SPI_Transmit_DMA+0x2a4>)
 800a754:	4013      	ands	r3, r2
 800a756:	88f9      	ldrh	r1, [r7, #6]
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	6812      	ldr	r2, [r2, #0]
 800a75c:	430b      	orrs	r3, r1
 800a75e:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	689a      	ldr	r2, [r3, #8]
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a76e:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	691a      	ldr	r2, [r3, #16]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f442 7248 	orr.w	r2, r2, #800	@ 0x320
 800a77e:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f042 0201 	orr.w	r2, r2, #1
 800a78e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a798:	d107      	bne.n	800a7aa <HAL_SPI_Transmit_DMA+0x286>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7a8:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  return errorcode;
 800a7b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3718      	adds	r7, #24
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	0800b149 	.word	0x0800b149
 800a7c0:	0800b0b5 	.word	0x0800b0b5
 800a7c4:	0800b189 	.word	0x0800b189
 800a7c8:	ffff0000 	.word	0xffff0000

0800a7cc <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d101      	bne.n	800a7ec <HAL_SPI_Receive_DMA+0x20>
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	e134      	b.n	800aa56 <HAL_SPI_Receive_DMA+0x28a>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d007      	beq.n	800a810 <HAL_SPI_Receive_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800a800:	2302      	movs	r3, #2
 800a802:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2200      	movs	r2, #0
 800a808:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800a80c:	7dfb      	ldrb	r3, [r7, #23]
 800a80e:	e122      	b.n	800aa56 <HAL_SPI_Receive_DMA+0x28a>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d002      	beq.n	800a81c <HAL_SPI_Receive_DMA+0x50>
 800a816:	88fb      	ldrh	r3, [r7, #6]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d107      	bne.n	800a82c <HAL_SPI_Receive_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800a828:	7dfb      	ldrb	r3, [r7, #23]
 800a82a:	e114      	b.n	800aa56 <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	2204      	movs	r2, #4
 800a830:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2200      	movs	r2, #0
 800a838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	88fa      	ldrh	r2, [r7, #6]
 800a846:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	88fa      	ldrh	r2, [r7, #6]
 800a84e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2200      	movs	r2, #0
 800a86a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800a876:	d108      	bne.n	800a88a <HAL_SPI_Receive_DMA+0xbe>
  {
    SPI_1LINE_RX(hspi);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a886:	601a      	str	r2, [r3, #0]
 800a888:	e009      	b.n	800a89e <HAL_SPI_Receive_DMA+0xd2>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800a89c:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	2b0f      	cmp	r3, #15
 800a8a4:	d905      	bls.n	800a8b2 <HAL_SPI_Receive_DMA+0xe6>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8aa:	699b      	ldr	r3, [r3, #24]
 800a8ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8b0:	d10f      	bne.n	800a8d2 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a8b6:	2b07      	cmp	r3, #7
 800a8b8:	d913      	bls.n	800a8e2 <HAL_SPI_Receive_DMA+0x116>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8be:	699b      	ldr	r3, [r3, #24]
 800a8c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8c4:	d00d      	beq.n	800a8e2 <HAL_SPI_Receive_DMA+0x116>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8ca:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a8cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8d0:	d007      	beq.n	800a8e2 <HAL_SPI_Receive_DMA+0x116>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    return errorcode;
 800a8de:	7dfb      	ldrb	r3, [r7, #23]
 800a8e0:	e0b9      	b.n	800aa56 <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	689a      	ldr	r2, [r3, #8]
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a8f0:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	2b07      	cmp	r3, #7
 800a8f8:	d820      	bhi.n	800a93c <HAL_SPI_Receive_DMA+0x170>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8fe:	699b      	ldr	r3, [r3, #24]
 800a900:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a904:	d109      	bne.n	800a91a <HAL_SPI_Receive_DMA+0x14e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	3301      	adds	r3, #1
 800a910:	105b      	asrs	r3, r3, #1
 800a912:	b29a      	uxth	r2, r3
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a91e:	699b      	ldr	r3, [r3, #24]
 800a920:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a924:	d11e      	bne.n	800a964 <HAL_SPI_Receive_DMA+0x198>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	3303      	adds	r3, #3
 800a930:	109b      	asrs	r3, r3, #2
 800a932:	b29a      	uxth	r2, r3
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800a93a:	e013      	b.n	800a964 <HAL_SPI_Receive_DMA+0x198>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	2b0f      	cmp	r3, #15
 800a942:	d80f      	bhi.n	800a964 <HAL_SPI_Receive_DMA+0x198>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a948:	699b      	ldr	r3, [r3, #24]
 800a94a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a94e:	d109      	bne.n	800a964 <HAL_SPI_Receive_DMA+0x198>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a956:	b29b      	uxth	r3, r3
 800a958:	3301      	adds	r3, #1
 800a95a:	105b      	asrs	r3, r3, #1
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a968:	4a3d      	ldr	r2, [pc, #244]	@ (800aa60 <HAL_SPI_Receive_DMA+0x294>)
 800a96a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a970:	4a3c      	ldr	r2, [pc, #240]	@ (800aa64 <HAL_SPI_Receive_DMA+0x298>)
 800a972:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a978:	4a3b      	ldr	r2, [pc, #236]	@ (800aa68 <HAL_SPI_Receive_DMA+0x29c>)
 800a97a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a980:	2200      	movs	r2, #0
 800a982:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3330      	adds	r3, #48	@ 0x30
 800a98e:	4619      	mov	r1, r3
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a994:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800a99c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a99e:	f7f8 f923 	bl	8002be8 <HAL_DMA_Start_IT>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d013      	beq.n	800a9d0 <HAL_SPI_Receive_DMA+0x204>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a9ae:	f043 0210 	orr.w	r2, r3, #16
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    errorcode = HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
 800a9ce:	e042      	b.n	800aa56 <HAL_SPI_Receive_DMA+0x28a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a9d4:	69db      	ldr	r3, [r3, #28]
 800a9d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9da:	d108      	bne.n	800a9ee <HAL_SPI_Receive_DMA+0x222>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	6859      	ldr	r1, [r3, #4]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	4b21      	ldr	r3, [pc, #132]	@ (800aa6c <HAL_SPI_Receive_DMA+0x2a0>)
 800a9e8:	400b      	ands	r3, r1
 800a9ea:	6053      	str	r3, [r2, #4]
 800a9ec:	e009      	b.n	800aa02 <HAL_SPI_Receive_DMA+0x236>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	685a      	ldr	r2, [r3, #4]
 800a9f4:	4b1d      	ldr	r3, [pc, #116]	@ (800aa6c <HAL_SPI_Receive_DMA+0x2a0>)
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	88f9      	ldrh	r1, [r7, #6]
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	6812      	ldr	r2, [r2, #0]
 800a9fe:	430b      	orrs	r3, r1
 800aa00:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	689a      	ldr	r2, [r3, #8]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa10:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	691a      	ldr	r2, [r3, #16]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f442 7250 	orr.w	r2, r2, #832	@ 0x340
 800aa20:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f042 0201 	orr.w	r2, r2, #1
 800aa30:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa3a:	d107      	bne.n	800aa4c <HAL_SPI_Receive_DMA+0x280>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa4a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  return errorcode;
 800aa54:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3718      	adds	r7, #24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	0800b169 	.word	0x0800b169
 800aa64:	0800b0ff 	.word	0x0800b0ff
 800aa68:	0800b189 	.word	0x0800b189
 800aa6c:	ffff0000 	.word	0xffff0000

0800aa70 <HAL_SPI_Abort>:
  *          + Set handle State to READY.
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;

  __IO uint32_t count;

  /* Lock the process */
  __HAL_LOCK(hspi);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800aa7e:	2b01      	cmp	r3, #1
 800aa80:	d101      	bne.n	800aa86 <HAL_SPI_Abort+0x16>
 800aa82:	2302      	movs	r3, #2
 800aa84:	e0d9      	b.n	800ac3a <HAL_SPI_Abort+0x1ca>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set hspi->state to aborting to avoid any interaction */
  hspi->State = HAL_SPI_STATE_ABORT;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2207      	movs	r2, #7
 800aa92:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800aa96:	2300      	movs	r3, #0
 800aa98:	73fb      	strb	r3, [r7, #15]
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800aa9a:	4b6a      	ldr	r3, [pc, #424]	@ (800ac44 <HAL_SPI_Abort+0x1d4>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a6a      	ldr	r2, [pc, #424]	@ (800ac48 <HAL_SPI_Abort+0x1d8>)
 800aaa0:	fba2 2303 	umull	r2, r3, r2, r3
 800aaa4:	0a5b      	lsrs	r3, r3, #9
 800aaa6:	2264      	movs	r2, #100	@ 0x64
 800aaa8:	fb02 f303 	mul.w	r3, r2, r3
 800aaac:	60bb      	str	r3, [r7, #8]

  /* If master communication on going, make sure current frame is done before closing the connection */
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aabc:	d15b      	bne.n	800ab76 <HAL_SPI_Abort+0x106>
  {
    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	691a      	ldr	r2, [r3, #16]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f022 0208 	bic.w	r2, r2, #8
 800aacc:	611a      	str	r2, [r3, #16]
    do
    {
      count--;
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	3b01      	subs	r3, #1
 800aad2:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d108      	bne.n	800aaec <HAL_SPI_Abort+0x7c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aae0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800aaea:	e006      	b.n	800aafa <HAL_SPI_Abort+0x8a>
      }
    }
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	f003 0308 	and.w	r3, r3, #8
 800aaf6:	2b08      	cmp	r3, #8
 800aaf8:	d0e9      	beq.n	800aace <HAL_SPI_Abort+0x5e>

    /* Request a Suspend transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ab08:	601a      	str	r2, [r3, #0]
    do
    {
      count--;
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d108      	bne.n	800ab28 <HAL_SPI_Abort+0xb8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800ab26:	e007      	b.n	800ab38 <HAL_SPI_Abort+0xc8>
      }
    }
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab36:	d0e8      	beq.n	800ab0a <HAL_SPI_Abort+0x9a>

    /* Clear SUSP flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	699a      	ldr	r2, [r3, #24]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab46:	619a      	str	r2, [r3, #24]
    do
    {
      count--;
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	3b01      	subs	r3, #1
 800ab4c:	60bb      	str	r3, [r7, #8]
      if (count == 0UL)
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d108      	bne.n	800ab66 <HAL_SPI_Abort+0xf6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800ab64:	e007      	b.n	800ab76 <HAL_SPI_Abort+0x106>
      }
    }
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab74:	d0e8      	beq.n	800ab48 <HAL_SPI_Abort+0xd8>
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab84:	d11b      	bne.n	800abbe <HAL_SPI_Abort+0x14e>
  {
    if (hspi->hdmatx != NULL)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d017      	beq.n	800abbe <HAL_SPI_Abort+0x14e>
    {
      /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmatx->XferAbortCallback = NULL;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab92:	2200      	movs	r2, #0
 800ab94:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7f8 fa8e 	bl	80030bc <HAL_DMA_Abort>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00b      	beq.n	800abbe <HAL_SPI_Abort+0x14e>
      {
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800abaa:	4618      	mov	r0, r3
 800abac:	f7f9 ff6e 	bl	8004a8c <HAL_DMA_GetError>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b20      	cmp	r3, #32
 800abb4:	d103      	bne.n	800abbe <HAL_SPI_Abort+0x14e>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2240      	movs	r2, #64	@ 0x40
 800abba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800abcc:	d11b      	bne.n	800ac06 <HAL_SPI_Abort+0x196>
  {
    if (hspi->hdmarx != NULL)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d017      	beq.n	800ac06 <HAL_SPI_Abort+0x196>
    {
      /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
      hspi->hdmarx->XferAbortCallback = NULL;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abda:	2200      	movs	r2, #0
 800abdc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abe2:	4618      	mov	r0, r3
 800abe4:	f7f8 fa6a 	bl	80030bc <HAL_DMA_Abort>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00b      	beq.n	800ac06 <HAL_SPI_Abort+0x196>
      {
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7f9 ff4a 	bl	8004a8c <HAL_DMA_GetError>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b20      	cmp	r3, #32
 800abfc:	d103      	bne.n	800ac06 <HAL_SPI_Abort+0x196>
        {
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2240      	movs	r2, #64	@ 0x40
 800ac02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
  }

  /* Proceed with abort procedure */
  SPI_AbortTransfer(hspi);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fb00 	bl	800b20c <SPI_AbortTransfer>

  /* Check error during Abort procedure */
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ac12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac16:	2b40      	cmp	r3, #64	@ 0x40
 800ac18:	d102      	bne.n	800ac20 <HAL_SPI_Abort+0x1b0>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	73fb      	strb	r3, [r7, #15]
 800ac1e:	e003      	b.n	800ac28 <HAL_SPI_Abort+0x1b8>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return errorcode;
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	24000000 	.word	0x24000000
 800ac48:	057619f1 	.word	0x057619f1

0800ac4c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b08a      	sub	sp, #40	@ 0x28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	695b      	ldr	r3, [r3, #20]
 800ac62:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800ac64:	6a3a      	ldr	r2, [r7, #32]
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	4013      	ands	r3, r2
 800ac6a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800ac74:	2300      	movs	r3, #0
 800ac76:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ac7e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3330      	adds	r3, #48	@ 0x30
 800ac86:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d012      	beq.n	800acb8 <HAL_SPI_IRQHandler+0x6c>
 800ac92:	6a3b      	ldr	r3, [r7, #32]
 800ac94:	f003 0308 	and.w	r3, r3, #8
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00d      	beq.n	800acb8 <HAL_SPI_IRQHandler+0x6c>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	699a      	ldr	r2, [r3, #24]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800acaa:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	4798      	blx	r3
#else
    HAL_SPI_SuspendCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800acb6:	e19c      	b.n	800aff2 <HAL_SPI_IRQHandler+0x3a6>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d113      	bne.n	800acea <HAL_SPI_IRQHandler+0x9e>
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	f003 0320 	and.w	r3, r3, #32
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d10e      	bne.n	800acea <HAL_SPI_IRQHandler+0x9e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d009      	beq.n	800acea <HAL_SPI_IRQHandler+0x9e>
  {
    hspi->TxISR(hspi);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	4798      	blx	r3
    hspi->RxISR(hspi);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	4798      	blx	r3
    handled = 1UL;
 800ace6:	2301      	movs	r3, #1
 800ace8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10f      	bne.n	800ad14 <HAL_SPI_IRQHandler+0xc8>
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d00a      	beq.n	800ad14 <HAL_SPI_IRQHandler+0xc8>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d105      	bne.n	800ad14 <HAL_SPI_IRQHandler+0xc8>
  {
    hspi->RxISR(hspi);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	4798      	blx	r3
    handled = 1UL;
 800ad10:	2301      	movs	r3, #1
 800ad12:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	f003 0320 	and.w	r3, r3, #32
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d10f      	bne.n	800ad3e <HAL_SPI_IRQHandler+0xf2>
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	f003 0302 	and.w	r3, r3, #2
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00a      	beq.n	800ad3e <HAL_SPI_IRQHandler+0xf2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ad28:	69bb      	ldr	r3, [r7, #24]
 800ad2a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d105      	bne.n	800ad3e <HAL_SPI_IRQHandler+0xf2>
  {
    hspi->TxISR(hspi);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	4798      	blx	r3
    handled = 1UL;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	627b      	str	r3, [r7, #36]	@ 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800ad3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f040 8151 	bne.w	800afe8 <HAL_SPI_IRQHandler+0x39c>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	f003 0308 	and.w	r3, r3, #8
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 8093 	beq.w	800ae78 <HAL_SPI_IRQHandler+0x22c>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	699a      	ldr	r2, [r3, #24]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f042 0208 	orr.w	r2, r2, #8
 800ad60:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	699a      	ldr	r2, [r3, #24]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f042 0210 	orr.w	r2, r2, #16
 800ad70:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	699a      	ldr	r2, [r3, #24]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ad80:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	691a      	ldr	r2, [r3, #16]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f022 0208 	bic.w	r2, r2, #8
 800ad90:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	689b      	ldr	r3, [r3, #8]
 800ad98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d13d      	bne.n	800ae1c <HAL_SPI_IRQHandler+0x1d0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800ada0:	e036      	b.n	800ae10 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	2b0f      	cmp	r3, #15
 800ada8:	d90b      	bls.n	800adc2 <HAL_SPI_IRQHandler+0x176>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adb2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800adb4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adba:	1d1a      	adds	r2, r3, #4
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	665a      	str	r2, [r3, #100]	@ 0x64
 800adc0:	e01d      	b.n	800adfe <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	2b07      	cmp	r3, #7
 800adc8:	d90b      	bls.n	800ade2 <HAL_SPI_IRQHandler+0x196>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	8812      	ldrh	r2, [r2, #0]
 800add2:	b292      	uxth	r2, r2
 800add4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adda:	1c9a      	adds	r2, r3, #2
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	665a      	str	r2, [r3, #100]	@ 0x64
 800ade0:	e00d      	b.n	800adfe <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adee:	7812      	ldrb	r2, [r2, #0]
 800adf0:	b2d2      	uxtb	r2, r2
 800adf2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800adf8:	1c5a      	adds	r2, r3, #1
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	3b01      	subs	r3, #1
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d1c2      	bne.n	800ada2 <HAL_SPI_IRQHandler+0x156>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f000 fa59 	bl	800b2d4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d005      	beq.n	800ae40 <HAL_SPI_IRQHandler+0x1f4>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ae3e:	e0d8      	b.n	800aff2 <HAL_SPI_IRQHandler+0x3a6>
    }

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ae40:	7cfb      	ldrb	r3, [r7, #19]
 800ae42:	2b05      	cmp	r3, #5
 800ae44:	d105      	bne.n	800ae52 <HAL_SPI_IRQHandler+0x206>
    {
      hspi->TxRxCpltCallback(hspi);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	4798      	blx	r3
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ae50:	e0cc      	b.n	800afec <HAL_SPI_IRQHandler+0x3a0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ae52:	7cfb      	ldrb	r3, [r7, #19]
 800ae54:	2b04      	cmp	r3, #4
 800ae56:	d105      	bne.n	800ae64 <HAL_SPI_IRQHandler+0x218>
      hspi->RxCpltCallback(hspi);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	4798      	blx	r3
    return;
 800ae62:	e0c3      	b.n	800afec <HAL_SPI_IRQHandler+0x3a0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ae64:	7cfb      	ldrb	r3, [r7, #19]
 800ae66:	2b03      	cmp	r3, #3
 800ae68:	f040 80c0 	bne.w	800afec <HAL_SPI_IRQHandler+0x3a0>
      hspi->TxCpltCallback(hspi);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	4798      	blx	r3
    return;
 800ae76:	e0b9      	b.n	800afec <HAL_SPI_IRQHandler+0x3a0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	f000 80b7 	beq.w	800aff2 <HAL_SPI_IRQHandler+0x3a6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ae84:	69bb      	ldr	r3, [r7, #24]
 800ae86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00f      	beq.n	800aeae <HAL_SPI_IRQHandler+0x262>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae94:	f043 0204 	orr.w	r2, r3, #4
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	699a      	ldr	r2, [r3, #24]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800aeac:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00f      	beq.n	800aed8 <HAL_SPI_IRQHandler+0x28c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aebe:	f043 0201 	orr.w	r2, r3, #1
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	699a      	ldr	r2, [r3, #24]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aed6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d00f      	beq.n	800af02 <HAL_SPI_IRQHandler+0x2b6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aee8:	f043 0208 	orr.w	r2, r3, #8
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	699a      	ldr	r2, [r3, #24]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af00:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	f003 0320 	and.w	r3, r3, #32
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d00f      	beq.n	800af2c <HAL_SPI_IRQHandler+0x2e0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af12:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	699a      	ldr	r2, [r3, #24]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f042 0220 	orr.w	r2, r2, #32
 800af2a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af32:	2b00      	cmp	r3, #0
 800af34:	d05c      	beq.n	800aff0 <HAL_SPI_IRQHandler+0x3a4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f022 0201 	bic.w	r2, r2, #1
 800af44:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	6919      	ldr	r1, [r3, #16]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	4b29      	ldr	r3, [pc, #164]	@ (800aff8 <HAL_SPI_IRQHandler+0x3ac>)
 800af52:	400b      	ands	r3, r1
 800af54:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800af5c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800af60:	d138      	bne.n	800afd4 <HAL_SPI_IRQHandler+0x388>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	689a      	ldr	r2, [r3, #8]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800af70:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af76:	2b00      	cmp	r3, #0
 800af78:	d013      	beq.n	800afa2 <HAL_SPI_IRQHandler+0x356>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af7e:	4a1f      	ldr	r2, [pc, #124]	@ (800affc <HAL_SPI_IRQHandler+0x3b0>)
 800af80:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800af86:	4618      	mov	r0, r3
 800af88:	f7f8 fbb6 	bl	80036f8 <HAL_DMA_Abort_IT>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d007      	beq.n	800afa2 <HAL_SPI_IRQHandler+0x356>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af98:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d022      	beq.n	800aff0 <HAL_SPI_IRQHandler+0x3a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800afae:	4a13      	ldr	r2, [pc, #76]	@ (800affc <HAL_SPI_IRQHandler+0x3b0>)
 800afb0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7f8 fb9e 	bl	80036f8 <HAL_DMA_Abort_IT>
 800afbc:	4603      	mov	r3, r0
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d016      	beq.n	800aff0 <HAL_SPI_IRQHandler+0x3a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afc8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800afd2:	e00d      	b.n	800aff0 <HAL_SPI_IRQHandler+0x3a4>
        hspi->State = HAL_SPI_STATE_READY;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        hspi->ErrorCallback(hspi);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	4798      	blx	r3
    return;
 800afe6:	e003      	b.n	800aff0 <HAL_SPI_IRQHandler+0x3a4>
    return;
 800afe8:	bf00      	nop
 800afea:	e002      	b.n	800aff2 <HAL_SPI_IRQHandler+0x3a6>
    return;
 800afec:	bf00      	nop
 800afee:	e000      	b.n	800aff2 <HAL_SPI_IRQHandler+0x3a6>
    return;
 800aff0:	bf00      	nop
  }
}
 800aff2:	3728      	adds	r7, #40	@ 0x28
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}
 800aff8:	fffffc94 	.word	0xfffffc94
 800affc:	0800b1d3 	.word	0x0800b1d3

0800b000 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b008:	bf00      	nop
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b014:	b480      	push	{r7}
 800b016:	b083      	sub	sp, #12
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b044:	bf00      	nop
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b080:	bf00      	nop
 800b082:	370c      	adds	r7, #12
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr

0800b08c <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0c0:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b0c8:	b2db      	uxtb	r3, r3
 800b0ca:	2b07      	cmp	r3, #7
 800b0cc:	d013      	beq.n	800b0f6 <SPI_DMATransmitCplt+0x42>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b0d2:	69db      	ldr	r3, [r3, #28]
 800b0d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0d8:	d105      	bne.n	800b0e6 <SPI_DMATransmitCplt+0x32>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	4798      	blx	r3
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800b0e4:	e007      	b.n	800b0f6 <SPI_DMATransmitCplt+0x42>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	691a      	ldr	r2, [r3, #16]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f042 0208 	orr.w	r2, r2, #8
 800b0f4:	611a      	str	r2, [r3, #16]
}
 800b0f6:	bf00      	nop
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b084      	sub	sp, #16
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b10a:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2b07      	cmp	r3, #7
 800b116:	d013      	beq.n	800b140 <SPI_DMAReceiveCplt+0x42>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b11c:	69db      	ldr	r3, [r3, #28]
 800b11e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b122:	d105      	bne.n	800b130 <SPI_DMAReceiveCplt+0x32>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b12a:	68f8      	ldr	r0, [r7, #12]
 800b12c:	4798      	blx	r3
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800b12e:	e007      	b.n	800b140 <SPI_DMAReceiveCplt+0x42>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	691a      	ldr	r2, [r3, #16]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f042 0208 	orr.w	r2, r2, #8
 800b13e:	611a      	str	r2, [r3, #16]
}
 800b140:	bf00      	nop
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b154:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b15c:	68f8      	ldr	r0, [r7, #12]
 800b15e:	4798      	blx	r3
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b160:	bf00      	nop
 800b162:	3710      	adds	r7, #16
 800b164:	46bd      	mov	sp, r7
 800b166:	bd80      	pop	{r7, pc}

0800b168 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b174:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	4798      	blx	r3
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b180:	bf00      	nop
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b194:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f7f9 fc78 	bl	8004a8c <HAL_DMA_GetError>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	d013      	beq.n	800b1ca <SPI_DMAError+0x42>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f000 f896 	bl	800b2d4 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1ae:	f043 0210 	orr.w	r2, r3, #16
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	4798      	blx	r3
#else
    HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800b1ca:	bf00      	nop
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1de:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b202:	bf00      	nop
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
	...

0800b20c <SPI_AbortTransfer>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f022 0201 	bic.w	r2, r2, #1
 800b222:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6919      	ldr	r1, [r3, #16]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	4b28      	ldr	r3, [pc, #160]	@ (800b2d0 <SPI_AbortTransfer+0xc4>)
 800b230:	400b      	ands	r3, r1
 800b232:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	699a      	ldr	r2, [r3, #24]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f042 0208 	orr.w	r2, r2, #8
 800b242:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	699a      	ldr	r2, [r3, #24]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f042 0210 	orr.w	r2, r2, #16
 800b252:	619a      	str	r2, [r3, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	689a      	ldr	r2, [r3, #8]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b262:	609a      	str	r2, [r3, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	699a      	ldr	r2, [r3, #24]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b272:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	699a      	ldr	r2, [r3, #24]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f042 0220 	orr.w	r2, r2, #32
 800b282:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	699a      	ldr	r2, [r3, #24]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b292:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	699a      	ldr	r2, [r3, #24]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	699a      	ldr	r2, [r3, #24]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b2b2:	619a      	str	r2, [r3, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b2c4:	bf00      	nop
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	fffffc90 	.word	0xfffffc90

0800b2d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	699a      	ldr	r2, [r3, #24]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f042 0208 	orr.w	r2, r2, #8
 800b2f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	699a      	ldr	r2, [r3, #24]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f042 0210 	orr.w	r2, r2, #16
 800b302:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f022 0201 	bic.w	r2, r2, #1
 800b312:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	6919      	ldr	r1, [r3, #16]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681a      	ldr	r2, [r3, #0]
 800b31e:	4b3c      	ldr	r3, [pc, #240]	@ (800b410 <SPI_CloseTransfer+0x13c>)
 800b320:	400b      	ands	r3, r1
 800b322:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	689a      	ldr	r2, [r3, #8]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b332:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	2b04      	cmp	r3, #4
 800b33e:	d014      	beq.n	800b36a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f003 0320 	and.w	r3, r3, #32
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00f      	beq.n	800b36a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b350:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	699a      	ldr	r2, [r3, #24]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f042 0220 	orr.w	r2, r2, #32
 800b368:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b370:	b2db      	uxtb	r3, r3
 800b372:	2b03      	cmp	r3, #3
 800b374:	d014      	beq.n	800b3a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d00f      	beq.n	800b3a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b386:	f043 0204 	orr.w	r2, r3, #4
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	699a      	ldr	r2, [r3, #24]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b39e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00f      	beq.n	800b3ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3b0:	f043 0201 	orr.w	r2, r3, #1
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	699a      	ldr	r2, [r3, #24]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00f      	beq.n	800b3f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3da:	f043 0208 	orr.w	r2, r3, #8
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	699a      	ldr	r2, [r3, #24]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b3f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b404:	bf00      	nop
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr
 800b410:	fffffc90 	.word	0xfffffc90

0800b414 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	603b      	str	r3, [r7, #0]
 800b420:	4613      	mov	r3, r2
 800b422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b424:	e010      	b.n	800b448 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b426:	f7f6 ff67 	bl	80022f8 <HAL_GetTick>
 800b42a:	4602      	mov	r2, r0
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	1ad3      	subs	r3, r2, r3
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	429a      	cmp	r2, r3
 800b434:	d803      	bhi.n	800b43e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b43c:	d102      	bne.n	800b444 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d101      	bne.n	800b448 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b444:	2303      	movs	r3, #3
 800b446:	e00f      	b.n	800b468 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	695a      	ldr	r2, [r3, #20]
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	4013      	ands	r3, r2
 800b452:	68ba      	ldr	r2, [r7, #8]
 800b454:	429a      	cmp	r2, r3
 800b456:	bf0c      	ite	eq
 800b458:	2301      	moveq	r3, #1
 800b45a:	2300      	movne	r3, #0
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	461a      	mov	r2, r3
 800b460:	79fb      	ldrb	r3, [r7, #7]
 800b462:	429a      	cmp	r2, r3
 800b464:	d0df      	beq.n	800b426 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b47c:	095b      	lsrs	r3, r3, #5
 800b47e:	3301      	adds	r3, #1
 800b480:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	3301      	adds	r3, #1
 800b488:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	3307      	adds	r3, #7
 800b48e:	08db      	lsrs	r3, r3, #3
 800b490:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	fb02 f303 	mul.w	r3, r2, r3
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3714      	adds	r7, #20
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b082      	sub	sp, #8
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e049      	b.n	800b54c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d106      	bne.n	800b4d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f7f6 f925 	bl	800171c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2202      	movs	r2, #2
 800b4d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	f000 fb93 	bl	800bc10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2201      	movs	r2, #1
 800b506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2201      	movs	r2, #1
 800b50e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2201      	movs	r2, #1
 800b516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2201      	movs	r2, #1
 800b51e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2201      	movs	r2, #1
 800b526:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2201      	movs	r2, #1
 800b52e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2201      	movs	r2, #1
 800b536:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2201      	movs	r2, #1
 800b53e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2201      	movs	r2, #1
 800b546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b562:	b2db      	uxtb	r3, r3
 800b564:	2b01      	cmp	r3, #1
 800b566:	d001      	beq.n	800b56c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b568:	2301      	movs	r3, #1
 800b56a:	e054      	b.n	800b616 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2202      	movs	r2, #2
 800b570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	68da      	ldr	r2, [r3, #12]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f042 0201 	orr.w	r2, r2, #1
 800b582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a26      	ldr	r2, [pc, #152]	@ (800b624 <HAL_TIM_Base_Start_IT+0xd0>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d022      	beq.n	800b5d4 <HAL_TIM_Base_Start_IT+0x80>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b596:	d01d      	beq.n	800b5d4 <HAL_TIM_Base_Start_IT+0x80>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a22      	ldr	r2, [pc, #136]	@ (800b628 <HAL_TIM_Base_Start_IT+0xd4>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d018      	beq.n	800b5d4 <HAL_TIM_Base_Start_IT+0x80>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a21      	ldr	r2, [pc, #132]	@ (800b62c <HAL_TIM_Base_Start_IT+0xd8>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d013      	beq.n	800b5d4 <HAL_TIM_Base_Start_IT+0x80>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a1f      	ldr	r2, [pc, #124]	@ (800b630 <HAL_TIM_Base_Start_IT+0xdc>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d00e      	beq.n	800b5d4 <HAL_TIM_Base_Start_IT+0x80>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b634 <HAL_TIM_Base_Start_IT+0xe0>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d009      	beq.n	800b5d4 <HAL_TIM_Base_Start_IT+0x80>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a1c      	ldr	r2, [pc, #112]	@ (800b638 <HAL_TIM_Base_Start_IT+0xe4>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d004      	beq.n	800b5d4 <HAL_TIM_Base_Start_IT+0x80>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a1b      	ldr	r2, [pc, #108]	@ (800b63c <HAL_TIM_Base_Start_IT+0xe8>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d115      	bne.n	800b600 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	689a      	ldr	r2, [r3, #8]
 800b5da:	4b19      	ldr	r3, [pc, #100]	@ (800b640 <HAL_TIM_Base_Start_IT+0xec>)
 800b5dc:	4013      	ands	r3, r2
 800b5de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2b06      	cmp	r3, #6
 800b5e4:	d015      	beq.n	800b612 <HAL_TIM_Base_Start_IT+0xbe>
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5ec:	d011      	beq.n	800b612 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f042 0201 	orr.w	r2, r2, #1
 800b5fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5fe:	e008      	b.n	800b612 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f042 0201 	orr.w	r2, r2, #1
 800b60e:	601a      	str	r2, [r3, #0]
 800b610:	e000      	b.n	800b614 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b612:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3714      	adds	r7, #20
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	40010000 	.word	0x40010000
 800b628:	40000400 	.word	0x40000400
 800b62c:	40000800 	.word	0x40000800
 800b630:	40000c00 	.word	0x40000c00
 800b634:	40010400 	.word	0x40010400
 800b638:	40001800 	.word	0x40001800
 800b63c:	40014000 	.word	0x40014000
 800b640:	00010007 	.word	0x00010007

0800b644 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d101      	bne.n	800b658 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	e08f      	b.n	800b778 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	2b00      	cmp	r3, #0
 800b662:	d106      	bne.n	800b672 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f7f6 f875 	bl	800175c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2202      	movs	r2, #2
 800b676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	6899      	ldr	r1, [r3, #8]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	4b3e      	ldr	r3, [pc, #248]	@ (800b780 <HAL_TIM_Encoder_Init+0x13c>)
 800b686:	400b      	ands	r3, r1
 800b688:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	3304      	adds	r3, #4
 800b692:	4619      	mov	r1, r3
 800b694:	4610      	mov	r0, r2
 800b696:	f000 fabb 	bl	800bc10 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	689b      	ldr	r3, [r3, #8]
 800b6a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	699b      	ldr	r3, [r3, #24]
 800b6a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	6a1b      	ldr	r3, [r3, #32]
 800b6b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	697a      	ldr	r2, [r7, #20]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b6bc:	693a      	ldr	r2, [r7, #16]
 800b6be:	4b31      	ldr	r3, [pc, #196]	@ (800b784 <HAL_TIM_Encoder_Init+0x140>)
 800b6c0:	4013      	ands	r3, r2
 800b6c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	689a      	ldr	r2, [r3, #8]
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	699b      	ldr	r3, [r3, #24]
 800b6cc:	021b      	lsls	r3, r3, #8
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	4b2b      	ldr	r3, [pc, #172]	@ (800b788 <HAL_TIM_Encoder_Init+0x144>)
 800b6da:	4013      	ands	r3, r2
 800b6dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	4b2a      	ldr	r3, [pc, #168]	@ (800b78c <HAL_TIM_Encoder_Init+0x148>)
 800b6e2:	4013      	ands	r3, r2
 800b6e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	68da      	ldr	r2, [r3, #12]
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	69db      	ldr	r3, [r3, #28]
 800b6ee:	021b      	lsls	r3, r3, #8
 800b6f0:	4313      	orrs	r3, r2
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	691b      	ldr	r3, [r3, #16]
 800b6fc:	011a      	lsls	r2, r3, #4
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	6a1b      	ldr	r3, [r3, #32]
 800b702:	031b      	lsls	r3, r3, #12
 800b704:	4313      	orrs	r3, r2
 800b706:	693a      	ldr	r2, [r7, #16]
 800b708:	4313      	orrs	r3, r2
 800b70a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b712:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b71a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	685a      	ldr	r2, [r3, #4]
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	695b      	ldr	r3, [r3, #20]
 800b724:	011b      	lsls	r3, r3, #4
 800b726:	4313      	orrs	r3, r2
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	4313      	orrs	r3, r2
 800b72c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	697a      	ldr	r2, [r7, #20]
 800b734:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	693a      	ldr	r2, [r7, #16]
 800b73c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2201      	movs	r2, #1
 800b762:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3718      	adds	r7, #24
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	fffebff8 	.word	0xfffebff8
 800b784:	fffffcfc 	.word	0xfffffcfc
 800b788:	fffff3f3 	.word	0xfffff3f3
 800b78c:	ffff0f0f 	.word	0xffff0f0f

0800b790 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	f003 0302 	and.w	r3, r3, #2
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d122      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	f003 0302 	and.w	r3, r3, #2
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d11b      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f06f 0202 	mvn.w	r2, #2
 800b7bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	f003 0303 	and.w	r3, r3, #3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 f9fe 	bl	800bbd4 <HAL_TIM_IC_CaptureCallback>
 800b7d8:	e005      	b.n	800b7e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 f9f0 	bl	800bbc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fa01 	bl	800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	f003 0304 	and.w	r3, r3, #4
 800b7f6:	2b04      	cmp	r3, #4
 800b7f8:	d122      	bne.n	800b840 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f003 0304 	and.w	r3, r3, #4
 800b804:	2b04      	cmp	r3, #4
 800b806:	d11b      	bne.n	800b840 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f06f 0204 	mvn.w	r2, #4
 800b810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2202      	movs	r2, #2
 800b816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	699b      	ldr	r3, [r3, #24]
 800b81e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b822:	2b00      	cmp	r3, #0
 800b824:	d003      	beq.n	800b82e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 f9d4 	bl	800bbd4 <HAL_TIM_IC_CaptureCallback>
 800b82c:	e005      	b.n	800b83a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f9c6 	bl	800bbc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 f9d7 	bl	800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	f003 0308 	and.w	r3, r3, #8
 800b84a:	2b08      	cmp	r3, #8
 800b84c:	d122      	bne.n	800b894 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	f003 0308 	and.w	r3, r3, #8
 800b858:	2b08      	cmp	r3, #8
 800b85a:	d11b      	bne.n	800b894 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f06f 0208 	mvn.w	r2, #8
 800b864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2204      	movs	r2, #4
 800b86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	69db      	ldr	r3, [r3, #28]
 800b872:	f003 0303 	and.w	r3, r3, #3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d003      	beq.n	800b882 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f9aa 	bl	800bbd4 <HAL_TIM_IC_CaptureCallback>
 800b880:	e005      	b.n	800b88e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f99c 	bl	800bbc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f9ad 	bl	800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	691b      	ldr	r3, [r3, #16]
 800b89a:	f003 0310 	and.w	r3, r3, #16
 800b89e:	2b10      	cmp	r3, #16
 800b8a0:	d122      	bne.n	800b8e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	f003 0310 	and.w	r3, r3, #16
 800b8ac:	2b10      	cmp	r3, #16
 800b8ae:	d11b      	bne.n	800b8e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f06f 0210 	mvn.w	r2, #16
 800b8b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2208      	movs	r2, #8
 800b8be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	69db      	ldr	r3, [r3, #28]
 800b8c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 f980 	bl	800bbd4 <HAL_TIM_IC_CaptureCallback>
 800b8d4:	e005      	b.n	800b8e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 f972 	bl	800bbc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f983 	bl	800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	691b      	ldr	r3, [r3, #16]
 800b8ee:	f003 0301 	and.w	r3, r3, #1
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d10e      	bne.n	800b914 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	f003 0301 	and.w	r3, r3, #1
 800b900:	2b01      	cmp	r3, #1
 800b902:	d107      	bne.n	800b914 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f06f 0201 	mvn.w	r2, #1
 800b90c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7f5 fca4 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b91e:	2b80      	cmp	r3, #128	@ 0x80
 800b920:	d10e      	bne.n	800b940 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b92c:	2b80      	cmp	r3, #128	@ 0x80
 800b92e:	d107      	bne.n	800b940 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fb38 	bl	800bfb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b94a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b94e:	d10e      	bne.n	800b96e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b95a:	2b80      	cmp	r3, #128	@ 0x80
 800b95c:	d107      	bne.n	800b96e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 fb2b 	bl	800bfc4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b978:	2b40      	cmp	r3, #64	@ 0x40
 800b97a:	d10e      	bne.n	800b99a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b986:	2b40      	cmp	r3, #64	@ 0x40
 800b988:	d107      	bne.n	800b99a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 f931 	bl	800bbfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	691b      	ldr	r3, [r3, #16]
 800b9a0:	f003 0320 	and.w	r3, r3, #32
 800b9a4:	2b20      	cmp	r3, #32
 800b9a6:	d10e      	bne.n	800b9c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	f003 0320 	and.w	r3, r3, #32
 800b9b2:	2b20      	cmp	r3, #32
 800b9b4:	d107      	bne.n	800b9c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f06f 0220 	mvn.w	r2, #32
 800b9be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 faeb 	bl	800bf9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b9c6:	bf00      	nop
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
	...

0800b9d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d101      	bne.n	800b9ec <HAL_TIM_ConfigClockSource+0x1c>
 800b9e8:	2302      	movs	r3, #2
 800b9ea:	e0dc      	b.n	800bba6 <HAL_TIM_ConfigClockSource+0x1d6>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2202      	movs	r2, #2
 800b9f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba04:	68ba      	ldr	r2, [r7, #8]
 800ba06:	4b6a      	ldr	r3, [pc, #424]	@ (800bbb0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800ba08:	4013      	ands	r3, r2
 800ba0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	68ba      	ldr	r2, [r7, #8]
 800ba1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a64      	ldr	r2, [pc, #400]	@ (800bbb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	f000 80a9 	beq.w	800bb7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ba28:	4a62      	ldr	r2, [pc, #392]	@ (800bbb4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	f200 80ae 	bhi.w	800bb8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ba30:	4a61      	ldr	r2, [pc, #388]	@ (800bbb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	f000 80a1 	beq.w	800bb7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ba38:	4a5f      	ldr	r2, [pc, #380]	@ (800bbb8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	f200 80a6 	bhi.w	800bb8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ba40:	4a5e      	ldr	r2, [pc, #376]	@ (800bbbc <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	f000 8099 	beq.w	800bb7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ba48:	4a5c      	ldr	r2, [pc, #368]	@ (800bbbc <HAL_TIM_ConfigClockSource+0x1ec>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	f200 809e 	bhi.w	800bb8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ba50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba54:	f000 8091 	beq.w	800bb7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ba58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ba5c:	f200 8096 	bhi.w	800bb8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ba60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba64:	f000 8089 	beq.w	800bb7a <HAL_TIM_ConfigClockSource+0x1aa>
 800ba68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba6c:	f200 808e 	bhi.w	800bb8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ba70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba74:	d03e      	beq.n	800baf4 <HAL_TIM_ConfigClockSource+0x124>
 800ba76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba7a:	f200 8087 	bhi.w	800bb8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ba7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba82:	f000 8086 	beq.w	800bb92 <HAL_TIM_ConfigClockSource+0x1c2>
 800ba86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ba8a:	d87f      	bhi.n	800bb8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ba8c:	2b70      	cmp	r3, #112	@ 0x70
 800ba8e:	d01a      	beq.n	800bac6 <HAL_TIM_ConfigClockSource+0xf6>
 800ba90:	2b70      	cmp	r3, #112	@ 0x70
 800ba92:	d87b      	bhi.n	800bb8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ba94:	2b60      	cmp	r3, #96	@ 0x60
 800ba96:	d050      	beq.n	800bb3a <HAL_TIM_ConfigClockSource+0x16a>
 800ba98:	2b60      	cmp	r3, #96	@ 0x60
 800ba9a:	d877      	bhi.n	800bb8c <HAL_TIM_ConfigClockSource+0x1bc>
 800ba9c:	2b50      	cmp	r3, #80	@ 0x50
 800ba9e:	d03c      	beq.n	800bb1a <HAL_TIM_ConfigClockSource+0x14a>
 800baa0:	2b50      	cmp	r3, #80	@ 0x50
 800baa2:	d873      	bhi.n	800bb8c <HAL_TIM_ConfigClockSource+0x1bc>
 800baa4:	2b40      	cmp	r3, #64	@ 0x40
 800baa6:	d058      	beq.n	800bb5a <HAL_TIM_ConfigClockSource+0x18a>
 800baa8:	2b40      	cmp	r3, #64	@ 0x40
 800baaa:	d86f      	bhi.n	800bb8c <HAL_TIM_ConfigClockSource+0x1bc>
 800baac:	2b30      	cmp	r3, #48	@ 0x30
 800baae:	d064      	beq.n	800bb7a <HAL_TIM_ConfigClockSource+0x1aa>
 800bab0:	2b30      	cmp	r3, #48	@ 0x30
 800bab2:	d86b      	bhi.n	800bb8c <HAL_TIM_ConfigClockSource+0x1bc>
 800bab4:	2b20      	cmp	r3, #32
 800bab6:	d060      	beq.n	800bb7a <HAL_TIM_ConfigClockSource+0x1aa>
 800bab8:	2b20      	cmp	r3, #32
 800baba:	d867      	bhi.n	800bb8c <HAL_TIM_ConfigClockSource+0x1bc>
 800babc:	2b00      	cmp	r3, #0
 800babe:	d05c      	beq.n	800bb7a <HAL_TIM_ConfigClockSource+0x1aa>
 800bac0:	2b10      	cmp	r3, #16
 800bac2:	d05a      	beq.n	800bb7a <HAL_TIM_ConfigClockSource+0x1aa>
 800bac4:	e062      	b.n	800bb8c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bad6:	f000 f9b3 	bl	800be40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	68ba      	ldr	r2, [r7, #8]
 800baf0:	609a      	str	r2, [r3, #8]
      break;
 800baf2:	e04f      	b.n	800bb94 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb04:	f000 f99c 	bl	800be40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	689a      	ldr	r2, [r3, #8]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bb16:	609a      	str	r2, [r3, #8]
      break;
 800bb18:	e03c      	b.n	800bb94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb26:	461a      	mov	r2, r3
 800bb28:	f000 f90c 	bl	800bd44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2150      	movs	r1, #80	@ 0x50
 800bb32:	4618      	mov	r0, r3
 800bb34:	f000 f966 	bl	800be04 <TIM_ITRx_SetConfig>
      break;
 800bb38:	e02c      	b.n	800bb94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb46:	461a      	mov	r2, r3
 800bb48:	f000 f92b 	bl	800bda2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2160      	movs	r1, #96	@ 0x60
 800bb52:	4618      	mov	r0, r3
 800bb54:	f000 f956 	bl	800be04 <TIM_ITRx_SetConfig>
      break;
 800bb58:	e01c      	b.n	800bb94 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb66:	461a      	mov	r2, r3
 800bb68:	f000 f8ec 	bl	800bd44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2140      	movs	r1, #64	@ 0x40
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 f946 	bl	800be04 <TIM_ITRx_SetConfig>
      break;
 800bb78:	e00c      	b.n	800bb94 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4619      	mov	r1, r3
 800bb84:	4610      	mov	r0, r2
 800bb86:	f000 f93d 	bl	800be04 <TIM_ITRx_SetConfig>
      break;
 800bb8a:	e003      	b.n	800bb94 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	73fb      	strb	r3, [r7, #15]
      break;
 800bb90:	e000      	b.n	800bb94 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bb92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop
 800bbb0:	ffceff88 	.word	0xffceff88
 800bbb4:	00100040 	.word	0x00100040
 800bbb8:	00100030 	.word	0x00100030
 800bbbc:	00100020 	.word	0x00100020

0800bbc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b083      	sub	sp, #12
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bbc8:	bf00      	nop
 800bbca:	370c      	adds	r7, #12
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b083      	sub	sp, #12
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bbdc:	bf00      	nop
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bbf0:	bf00      	nop
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc04:	bf00      	nop
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr

0800bc10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a40      	ldr	r2, [pc, #256]	@ (800bd24 <TIM_Base_SetConfig+0x114>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d013      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc2e:	d00f      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	4a3d      	ldr	r2, [pc, #244]	@ (800bd28 <TIM_Base_SetConfig+0x118>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d00b      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a3c      	ldr	r2, [pc, #240]	@ (800bd2c <TIM_Base_SetConfig+0x11c>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d007      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a3b      	ldr	r2, [pc, #236]	@ (800bd30 <TIM_Base_SetConfig+0x120>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d003      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a3a      	ldr	r2, [pc, #232]	@ (800bd34 <TIM_Base_SetConfig+0x124>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d108      	bne.n	800bc62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a2f      	ldr	r2, [pc, #188]	@ (800bd24 <TIM_Base_SetConfig+0x114>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d01f      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc70:	d01b      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4a2c      	ldr	r2, [pc, #176]	@ (800bd28 <TIM_Base_SetConfig+0x118>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d017      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a2b      	ldr	r2, [pc, #172]	@ (800bd2c <TIM_Base_SetConfig+0x11c>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d013      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a2a      	ldr	r2, [pc, #168]	@ (800bd30 <TIM_Base_SetConfig+0x120>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d00f      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a29      	ldr	r2, [pc, #164]	@ (800bd34 <TIM_Base_SetConfig+0x124>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d00b      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a28      	ldr	r2, [pc, #160]	@ (800bd38 <TIM_Base_SetConfig+0x128>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d007      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4a27      	ldr	r2, [pc, #156]	@ (800bd3c <TIM_Base_SetConfig+0x12c>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d003      	beq.n	800bcaa <TIM_Base_SetConfig+0x9a>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	4a26      	ldr	r2, [pc, #152]	@ (800bd40 <TIM_Base_SetConfig+0x130>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d108      	bne.n	800bcbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	695b      	ldr	r3, [r3, #20]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	689a      	ldr	r2, [r3, #8]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	681a      	ldr	r2, [r3, #0]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a10      	ldr	r2, [pc, #64]	@ (800bd24 <TIM_Base_SetConfig+0x114>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d00f      	beq.n	800bd08 <TIM_Base_SetConfig+0xf8>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a12      	ldr	r2, [pc, #72]	@ (800bd34 <TIM_Base_SetConfig+0x124>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d00b      	beq.n	800bd08 <TIM_Base_SetConfig+0xf8>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a11      	ldr	r2, [pc, #68]	@ (800bd38 <TIM_Base_SetConfig+0x128>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d007      	beq.n	800bd08 <TIM_Base_SetConfig+0xf8>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a10      	ldr	r2, [pc, #64]	@ (800bd3c <TIM_Base_SetConfig+0x12c>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d003      	beq.n	800bd08 <TIM_Base_SetConfig+0xf8>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a0f      	ldr	r2, [pc, #60]	@ (800bd40 <TIM_Base_SetConfig+0x130>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d103      	bne.n	800bd10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	691a      	ldr	r2, [r3, #16]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	615a      	str	r2, [r3, #20]
}
 800bd16:	bf00      	nop
 800bd18:	3714      	adds	r7, #20
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	40010000 	.word	0x40010000
 800bd28:	40000400 	.word	0x40000400
 800bd2c:	40000800 	.word	0x40000800
 800bd30:	40000c00 	.word	0x40000c00
 800bd34:	40010400 	.word	0x40010400
 800bd38:	40014000 	.word	0x40014000
 800bd3c:	40014400 	.word	0x40014400
 800bd40:	40014800 	.word	0x40014800

0800bd44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b087      	sub	sp, #28
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6a1b      	ldr	r3, [r3, #32]
 800bd54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6a1b      	ldr	r3, [r3, #32]
 800bd5a:	f023 0201 	bic.w	r2, r3, #1
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	699b      	ldr	r3, [r3, #24]
 800bd66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bd6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	011b      	lsls	r3, r3, #4
 800bd74:	693a      	ldr	r2, [r7, #16]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	f023 030a 	bic.w	r3, r3, #10
 800bd80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	693a      	ldr	r2, [r7, #16]
 800bd8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	697a      	ldr	r2, [r7, #20]
 800bd94:	621a      	str	r2, [r3, #32]
}
 800bd96:	bf00      	nop
 800bd98:	371c      	adds	r7, #28
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bda2:	b480      	push	{r7}
 800bda4:	b087      	sub	sp, #28
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	60f8      	str	r0, [r7, #12]
 800bdaa:	60b9      	str	r1, [r7, #8]
 800bdac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	6a1b      	ldr	r3, [r3, #32]
 800bdb2:	f023 0210 	bic.w	r2, r3, #16
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	699b      	ldr	r3, [r3, #24]
 800bdbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	6a1b      	ldr	r3, [r3, #32]
 800bdc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bdcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	031b      	lsls	r3, r3, #12
 800bdd2:	697a      	ldr	r2, [r7, #20]
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bdde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	011b      	lsls	r3, r3, #4
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	697a      	ldr	r2, [r7, #20]
 800bdee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	693a      	ldr	r2, [r7, #16]
 800bdf4:	621a      	str	r2, [r3, #32]
}
 800bdf6:	bf00      	nop
 800bdf8:	371c      	adds	r7, #28
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr
	...

0800be04 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	4b09      	ldr	r3, [pc, #36]	@ (800be3c <TIM_ITRx_SetConfig+0x38>)
 800be18:	4013      	ands	r3, r2
 800be1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800be1c:	683a      	ldr	r2, [r7, #0]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	4313      	orrs	r3, r2
 800be22:	f043 0307 	orr.w	r3, r3, #7
 800be26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68fa      	ldr	r2, [r7, #12]
 800be2c:	609a      	str	r2, [r3, #8]
}
 800be2e:	bf00      	nop
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop
 800be3c:	ffcfff8f 	.word	0xffcfff8f

0800be40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800be40:	b480      	push	{r7}
 800be42:	b087      	sub	sp, #28
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
 800be4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800be5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	021a      	lsls	r2, r3, #8
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	431a      	orrs	r2, r3
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	4313      	orrs	r3, r2
 800be68:	697a      	ldr	r2, [r7, #20]
 800be6a:	4313      	orrs	r3, r2
 800be6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	609a      	str	r2, [r3, #8]
}
 800be74:	bf00      	nop
 800be76:	371c      	adds	r7, #28
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be90:	2b01      	cmp	r3, #1
 800be92:	d101      	bne.n	800be98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be94:	2302      	movs	r3, #2
 800be96:	e06d      	b.n	800bf74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2201      	movs	r2, #1
 800be9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2202      	movs	r2, #2
 800bea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	689b      	ldr	r3, [r3, #8]
 800beb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a30      	ldr	r2, [pc, #192]	@ (800bf80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d004      	beq.n	800becc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a2f      	ldr	r2, [pc, #188]	@ (800bf84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d108      	bne.n	800bede <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bed2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	4313      	orrs	r3, r2
 800bedc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bee4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	4313      	orrs	r3, r2
 800beee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a20      	ldr	r2, [pc, #128]	@ (800bf80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d022      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf0a:	d01d      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4a1d      	ldr	r2, [pc, #116]	@ (800bf88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d018      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a1c      	ldr	r2, [pc, #112]	@ (800bf8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d013      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a1a      	ldr	r2, [pc, #104]	@ (800bf90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d00e      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a15      	ldr	r2, [pc, #84]	@ (800bf84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d009      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4a16      	ldr	r2, [pc, #88]	@ (800bf94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d004      	beq.n	800bf48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4a15      	ldr	r2, [pc, #84]	@ (800bf98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d10c      	bne.n	800bf62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	4313      	orrs	r3, r2
 800bf58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68ba      	ldr	r2, [r7, #8]
 800bf60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2201      	movs	r2, #1
 800bf66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3714      	adds	r7, #20
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr
 800bf80:	40010000 	.word	0x40010000
 800bf84:	40010400 	.word	0x40010400
 800bf88:	40000400 	.word	0x40000400
 800bf8c:	40000800 	.word	0x40000800
 800bf90:	40000c00 	.word	0x40000c00
 800bf94:	40001800 	.word	0x40001800
 800bf98:	40014000 	.word	0x40014000

0800bf9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b083      	sub	sp, #12
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bfa4:	bf00      	nop
 800bfa6:	370c      	adds	r7, #12
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bfb8:	bf00      	nop
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bfcc:	bf00      	nop
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d101      	bne.n	800bfea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e050      	b.n	800c08c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d114      	bne.n	800c01e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 f9fd 	bl	800d3fc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d103      	bne.n	800c014 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4a21      	ldr	r2, [pc, #132]	@ (800c094 <HAL_UART_Init+0xbc>)
 800c010:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2224      	movs	r2, #36	@ 0x24
 800c022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	f022 0201 	bic.w	r2, r2, #1
 800c034:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f001 fa32 	bl	800d4a0 <UART_SetConfig>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d101      	bne.n	800c046 <HAL_UART_Init+0x6e>
  {
    return HAL_ERROR;
 800c042:	2301      	movs	r3, #1
 800c044:	e022      	b.n	800c08c <HAL_UART_Init+0xb4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d002      	beq.n	800c054 <HAL_UART_Init+0x7c>
  {
    UART_AdvFeatureConfig(huart);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f001 ff8e 	bl	800df70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	685a      	ldr	r2, [r3, #4]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c062:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	689a      	ldr	r2, [r3, #8]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c072:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f042 0201 	orr.w	r2, r2, #1
 800c082:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f002 f815 	bl	800e0b4 <UART_CheckIdleState>
 800c08a:	4603      	mov	r3, r0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3708      	adds	r7, #8
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}
 800c094:	0800185d 	.word	0x0800185d

0800c098 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c098:	b480      	push	{r7}
 800c09a:	b087      	sub	sp, #28
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	607a      	str	r2, [r7, #4]
 800c0a4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d109      	bne.n	800c0c4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e09c      	b.n	800c1fe <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c0ca:	2b20      	cmp	r3, #32
 800c0cc:	d16c      	bne.n	800c1a8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800c0ce:	7afb      	ldrb	r3, [r7, #11]
 800c0d0:	2b0c      	cmp	r3, #12
 800c0d2:	d85e      	bhi.n	800c192 <HAL_UART_RegisterCallback+0xfa>
 800c0d4:	a201      	add	r2, pc, #4	@ (adr r2, 800c0dc <HAL_UART_RegisterCallback+0x44>)
 800c0d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0da:	bf00      	nop
 800c0dc:	0800c111 	.word	0x0800c111
 800c0e0:	0800c11b 	.word	0x0800c11b
 800c0e4:	0800c125 	.word	0x0800c125
 800c0e8:	0800c12f 	.word	0x0800c12f
 800c0ec:	0800c139 	.word	0x0800c139
 800c0f0:	0800c143 	.word	0x0800c143
 800c0f4:	0800c14d 	.word	0x0800c14d
 800c0f8:	0800c157 	.word	0x0800c157
 800c0fc:	0800c161 	.word	0x0800c161
 800c100:	0800c16b 	.word	0x0800c16b
 800c104:	0800c175 	.word	0x0800c175
 800c108:	0800c17f 	.word	0x0800c17f
 800c10c:	0800c189 	.word	0x0800c189
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c118:	e070      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c122:	e06b      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c12c:	e066      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c136:	e061      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c140:	e05c      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c14a:	e057      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c154:	e052      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c15e:	e04d      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c168:	e048      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c172:	e043      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c17c:	e03e      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c186:	e039      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c190:	e034      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c198:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	75fb      	strb	r3, [r7, #23]
        break;
 800c1a6:	e029      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d11a      	bne.n	800c1e8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800c1b2:	7afb      	ldrb	r3, [r7, #11]
 800c1b4:	2b0b      	cmp	r3, #11
 800c1b6:	d002      	beq.n	800c1be <HAL_UART_RegisterCallback+0x126>
 800c1b8:	2b0c      	cmp	r3, #12
 800c1ba:	d005      	beq.n	800c1c8 <HAL_UART_RegisterCallback+0x130>
 800c1bc:	e009      	b.n	800c1d2 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c1c6:	e019      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	687a      	ldr	r2, [r7, #4]
 800c1cc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c1d0:	e014      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	75fb      	strb	r3, [r7, #23]
        break;
 800c1e6:	e009      	b.n	800c1fc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c1ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c1fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	371c      	adds	r7, #28
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop

0800c20c <HAL_UART_RegisterRxEventCallback>:
  * @param  huart     Uart handle
  * @param  pCallback Pointer to the Rx Event Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterRxEventCallback(UART_HandleTypeDef *huart, pUART_RxEventCallbackTypeDef pCallback)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b085      	sub	sp, #20
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	73fb      	strb	r3, [r7, #15]

  if (pCallback == NULL)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d109      	bne.n	800c234 <HAL_UART_RegisterRxEventCallback+0x28>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c226:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	e023      	b.n	800c27c <HAL_UART_RegisterRxEventCallback+0x70>
  }

  /* Process locked */
  __HAL_LOCK(huart);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d101      	bne.n	800c242 <HAL_UART_RegisterRxEventCallback+0x36>
 800c23e:	2302      	movs	r3, #2
 800c240:	e01c      	b.n	800c27c <HAL_UART_RegisterRxEventCallback+0x70>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2201      	movs	r2, #1
 800c246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  if (huart->gState == HAL_UART_STATE_READY)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c250:	2b20      	cmp	r3, #32
 800c252:	d104      	bne.n	800c25e <HAL_UART_RegisterRxEventCallback+0x52>
  {
    huart->RxEventCallback = pCallback;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800c25c:	e009      	b.n	800c272 <HAL_UART_RegisterRxEventCallback+0x66>
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c264:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3714      	adds	r7, #20
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c288:	b480      	push	{r7}
 800c28a:	b091      	sub	sp, #68	@ 0x44
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	4613      	mov	r3, r2
 800c294:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c29c:	2b20      	cmp	r3, #32
 800c29e:	d178      	bne.n	800c392 <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <HAL_UART_Transmit_IT+0x24>
 800c2a6:	88fb      	ldrh	r3, [r7, #6]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d101      	bne.n	800c2b0 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e071      	b.n	800c394 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	88fa      	ldrh	r2, [r7, #6]
 800c2ba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	88fa      	ldrh	r2, [r7, #6]
 800c2c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2221      	movs	r2, #33	@ 0x21
 800c2d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c2e4:	d12a      	bne.n	800c33c <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2ee:	d107      	bne.n	800c300 <HAL_UART_Transmit_IT+0x78>
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	691b      	ldr	r3, [r3, #16]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d103      	bne.n	800c300 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	4a29      	ldr	r2, [pc, #164]	@ (800c3a0 <HAL_UART_Transmit_IT+0x118>)
 800c2fc:	679a      	str	r2, [r3, #120]	@ 0x78
 800c2fe:	e002      	b.n	800c306 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	4a28      	ldr	r2, [pc, #160]	@ (800c3a4 <HAL_UART_Transmit_IT+0x11c>)
 800c304:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	3308      	adds	r3, #8
 800c30c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c310:	e853 3f00 	ldrex	r3, [r3]
 800c314:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c318:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c31c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	3308      	adds	r3, #8
 800c324:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c326:	637a      	str	r2, [r7, #52]	@ 0x34
 800c328:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c32c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c32e:	e841 2300 	strex	r3, r2, [r1]
 800c332:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1e5      	bne.n	800c306 <HAL_UART_Transmit_IT+0x7e>
 800c33a:	e028      	b.n	800c38e <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c344:	d107      	bne.n	800c356 <HAL_UART_Transmit_IT+0xce>
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	691b      	ldr	r3, [r3, #16]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d103      	bne.n	800c356 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	4a15      	ldr	r2, [pc, #84]	@ (800c3a8 <HAL_UART_Transmit_IT+0x120>)
 800c352:	679a      	str	r2, [r3, #120]	@ 0x78
 800c354:	e002      	b.n	800c35c <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	4a14      	ldr	r2, [pc, #80]	@ (800c3ac <HAL_UART_Transmit_IT+0x124>)
 800c35a:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c362:	697b      	ldr	r3, [r7, #20]
 800c364:	e853 3f00 	ldrex	r3, [r3]
 800c368:	613b      	str	r3, [r7, #16]
   return(result);
 800c36a:	693b      	ldr	r3, [r7, #16]
 800c36c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	461a      	mov	r2, r3
 800c378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c37a:	623b      	str	r3, [r7, #32]
 800c37c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c37e:	69f9      	ldr	r1, [r7, #28]
 800c380:	6a3a      	ldr	r2, [r7, #32]
 800c382:	e841 2300 	strex	r3, r2, [r1]
 800c386:	61bb      	str	r3, [r7, #24]
   return(result);
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1e6      	bne.n	800c35c <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800c38e:	2300      	movs	r3, #0
 800c390:	e000      	b.n	800c394 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800c392:	2302      	movs	r3, #2
  }
}
 800c394:	4618      	mov	r0, r3
 800c396:	3744      	adds	r7, #68	@ 0x44
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	0800ed45 	.word	0x0800ed45
 800c3a4:	0800ec65 	.word	0x0800ec65
 800c3a8:	0800eba3 	.word	0x0800eba3
 800c3ac:	0800eaeb 	.word	0x0800eaeb

0800c3b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b08a      	sub	sp, #40	@ 0x28
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	4613      	mov	r3, r2
 800c3bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3c4:	2b20      	cmp	r3, #32
 800c3c6:	d137      	bne.n	800c438 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d002      	beq.n	800c3d4 <HAL_UART_Receive_IT+0x24>
 800c3ce:	88fb      	ldrh	r3, [r7, #6]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d101      	bne.n	800c3d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e030      	b.n	800c43a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	4a18      	ldr	r2, [pc, #96]	@ (800c444 <HAL_UART_Receive_IT+0x94>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d01f      	beq.n	800c428 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d018      	beq.n	800c428 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	e853 3f00 	ldrex	r3, [r3]
 800c402:	613b      	str	r3, [r7, #16]
   return(result);
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c40a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	461a      	mov	r2, r3
 800c412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c414:	623b      	str	r3, [r7, #32]
 800c416:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c418:	69f9      	ldr	r1, [r7, #28]
 800c41a:	6a3a      	ldr	r2, [r7, #32]
 800c41c:	e841 2300 	strex	r3, r2, [r1]
 800c420:	61bb      	str	r3, [r7, #24]
   return(result);
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1e6      	bne.n	800c3f6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c428:	88fb      	ldrh	r3, [r7, #6]
 800c42a:	461a      	mov	r2, r3
 800c42c:	68b9      	ldr	r1, [r7, #8]
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f001 ff52 	bl	800e2d8 <UART_Start_Receive_IT>
 800c434:	4603      	mov	r3, r0
 800c436:	e000      	b.n	800c43a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c438:	2302      	movs	r3, #2
  }
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3728      	adds	r7, #40	@ 0x28
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	58000c00 	.word	0x58000c00

0800c448 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b08a      	sub	sp, #40	@ 0x28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	4613      	mov	r3, r2
 800c454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c45c:	2b20      	cmp	r3, #32
 800c45e:	d167      	bne.n	800c530 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d002      	beq.n	800c46c <HAL_UART_Transmit_DMA+0x24>
 800c466:	88fb      	ldrh	r3, [r7, #6]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d101      	bne.n	800c470 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	e060      	b.n	800c532 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	88fa      	ldrh	r2, [r7, #6]
 800c47a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	88fa      	ldrh	r2, [r7, #6]
 800c482:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2200      	movs	r2, #0
 800c48a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2221      	movs	r2, #33	@ 0x21
 800c492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d028      	beq.n	800c4f0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4a2:	4a26      	ldr	r2, [pc, #152]	@ (800c53c <HAL_UART_Transmit_DMA+0xf4>)
 800c4a4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4aa:	4a25      	ldr	r2, [pc, #148]	@ (800c540 <HAL_UART_Transmit_DMA+0xf8>)
 800c4ac:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4b2:	4a24      	ldr	r2, [pc, #144]	@ (800c544 <HAL_UART_Transmit_DMA+0xfc>)
 800c4b4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	3328      	adds	r3, #40	@ 0x28
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	88fb      	ldrh	r3, [r7, #6]
 800c4d2:	f7f6 fb89 	bl	8002be8 <HAL_DMA_Start_IT>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d009      	beq.n	800c4f0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2210      	movs	r2, #16
 800c4e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2220      	movs	r2, #32
 800c4e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	e020      	b.n	800c532 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2240      	movs	r2, #64	@ 0x40
 800c4f6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	3308      	adds	r3, #8
 800c4fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	e853 3f00 	ldrex	r3, [r3]
 800c506:	613b      	str	r3, [r7, #16]
   return(result);
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c50e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	3308      	adds	r3, #8
 800c516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c518:	623a      	str	r2, [r7, #32]
 800c51a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c51c:	69f9      	ldr	r1, [r7, #28]
 800c51e:	6a3a      	ldr	r2, [r7, #32]
 800c520:	e841 2300 	strex	r3, r2, [r1]
 800c524:	61bb      	str	r3, [r7, #24]
   return(result);
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1e5      	bne.n	800c4f8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	e000      	b.n	800c532 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c530:	2302      	movs	r3, #2
  }
}
 800c532:	4618      	mov	r0, r3
 800c534:	3728      	adds	r7, #40	@ 0x28
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	0800e7b9 	.word	0x0800e7b9
 800c540:	0800e853 	.word	0x0800e853
 800c544:	0800e9e9 	.word	0x0800e9e9

0800c548 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b090      	sub	sp, #64	@ 0x40
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c55e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c56a:	2b80      	cmp	r3, #128	@ 0x80
 800c56c:	d139      	bne.n	800c5e2 <HAL_UART_DMAStop+0x9a>
 800c56e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c570:	2b21      	cmp	r3, #33	@ 0x21
 800c572:	d136      	bne.n	800c5e2 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	3308      	adds	r3, #8
 800c57a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57c:	6a3b      	ldr	r3, [r7, #32]
 800c57e:	e853 3f00 	ldrex	r3, [r3]
 800c582:	61fb      	str	r3, [r7, #28]
   return(result);
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c58a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3308      	adds	r3, #8
 800c592:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c594:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c596:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c59a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c59c:	e841 2300 	strex	r3, r2, [r1]
 800c5a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d1e5      	bne.n	800c574 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d015      	beq.n	800c5dc <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7f6 fd81 	bl	80030bc <HAL_DMA_Abort>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00d      	beq.n	800c5dc <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7f8 fa61 	bl	8004a8c <HAL_DMA_GetError>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b20      	cmp	r3, #32
 800c5ce:	d105      	bne.n	800c5dc <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2210      	movs	r2, #16
 800c5d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	e047      	b.n	800c66c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f002 f843 	bl	800e668 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ec:	2b40      	cmp	r3, #64	@ 0x40
 800c5ee:	d13c      	bne.n	800c66a <HAL_UART_DMAStop+0x122>
 800c5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f2:	2b22      	cmp	r3, #34	@ 0x22
 800c5f4:	d139      	bne.n	800c66a <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	3308      	adds	r3, #8
 800c5fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	e853 3f00 	ldrex	r3, [r3]
 800c604:	60bb      	str	r3, [r7, #8]
   return(result);
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c60c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3308      	adds	r3, #8
 800c614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c616:	61ba      	str	r2, [r7, #24]
 800c618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61a:	6979      	ldr	r1, [r7, #20]
 800c61c:	69ba      	ldr	r2, [r7, #24]
 800c61e:	e841 2300 	strex	r3, r2, [r1]
 800c622:	613b      	str	r3, [r7, #16]
   return(result);
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d1e5      	bne.n	800c5f6 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c630:	2b00      	cmp	r3, #0
 800c632:	d017      	beq.n	800c664 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c63a:	4618      	mov	r0, r3
 800c63c:	f7f6 fd3e 	bl	80030bc <HAL_DMA_Abort>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d00e      	beq.n	800c664 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7f8 fa1d 	bl	8004a8c <HAL_DMA_GetError>
 800c652:	4603      	mov	r3, r0
 800c654:	2b20      	cmp	r3, #32
 800c656:	d105      	bne.n	800c664 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2210      	movs	r2, #16
 800c65c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c660:	2303      	movs	r3, #3
 800c662:	e003      	b.n	800c66c <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f002 f841 	bl	800e6ec <UART_EndRxTransfer>
  }

  return HAL_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3740      	adds	r7, #64	@ 0x40
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}

0800c674 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b0a0      	sub	sp, #128	@ 0x80
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c684:	e853 3f00 	ldrex	r3, [r3]
 800c688:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800c68a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c68c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800c690:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	461a      	mov	r2, r3
 800c698:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c69a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c69c:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800c6a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c6a2:	e841 2300 	strex	r3, r2, [r1]
 800c6a6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800c6a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1e6      	bne.n	800c67c <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	3308      	adds	r3, #8
 800c6b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6b8:	e853 3f00 	ldrex	r3, [r3]
 800c6bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c6be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c6c0:	4b72      	ldr	r3, [pc, #456]	@ (800c88c <HAL_UART_Abort+0x218>)
 800c6c2:	4013      	ands	r3, r2
 800c6c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	3308      	adds	r3, #8
 800c6cc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c6ce:	657a      	str	r2, [r7, #84]	@ 0x54
 800c6d0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c6d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c6d6:	e841 2300 	strex	r3, r2, [r1]
 800c6da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c6dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1e5      	bne.n	800c6ae <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c6e6:	2b01      	cmp	r3, #1
 800c6e8:	d118      	bne.n	800c71c <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6f2:	e853 3f00 	ldrex	r3, [r3]
 800c6f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6fa:	f023 0310 	bic.w	r3, r3, #16
 800c6fe:	677b      	str	r3, [r7, #116]	@ 0x74
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	461a      	mov	r2, r3
 800c706:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c708:	643b      	str	r3, [r7, #64]	@ 0x40
 800c70a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c70c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c70e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c710:	e841 2300 	strex	r3, r2, [r1]
 800c714:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d1e6      	bne.n	800c6ea <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c726:	2b80      	cmp	r3, #128	@ 0x80
 800c728:	d137      	bne.n	800c79a <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	3308      	adds	r3, #8
 800c730:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c732:	6a3b      	ldr	r3, [r7, #32]
 800c734:	e853 3f00 	ldrex	r3, [r3]
 800c738:	61fb      	str	r3, [r7, #28]
   return(result);
 800c73a:	69fb      	ldr	r3, [r7, #28]
 800c73c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c740:	673b      	str	r3, [r7, #112]	@ 0x70
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	3308      	adds	r3, #8
 800c748:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c74a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c74c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c74e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c750:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c752:	e841 2300 	strex	r3, r2, [r1]
 800c756:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d1e5      	bne.n	800c72a <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c762:	2b00      	cmp	r3, #0
 800c764:	d019      	beq.n	800c79a <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c76a:	2200      	movs	r2, #0
 800c76c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c772:	4618      	mov	r0, r3
 800c774:	f7f6 fca2 	bl	80030bc <HAL_DMA_Abort>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00d      	beq.n	800c79a <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c782:	4618      	mov	r0, r3
 800c784:	f7f8 f982 	bl	8004a8c <HAL_DMA_GetError>
 800c788:	4603      	mov	r3, r0
 800c78a:	2b20      	cmp	r3, #32
 800c78c:	d105      	bne.n	800c79a <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2210      	movs	r2, #16
 800c792:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c796:	2303      	movs	r3, #3
 800c798:	e073      	b.n	800c882 <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7a4:	2b40      	cmp	r3, #64	@ 0x40
 800c7a6:	d13b      	bne.n	800c820 <HAL_UART_Abort+0x1ac>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	3308      	adds	r3, #8
 800c7ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	e853 3f00 	ldrex	r3, [r3]
 800c7b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	3308      	adds	r3, #8
 800c7c6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7c8:	61ba      	str	r2, [r7, #24]
 800c7ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7cc:	6979      	ldr	r1, [r7, #20]
 800c7ce:	69ba      	ldr	r2, [r7, #24]
 800c7d0:	e841 2300 	strex	r3, r2, [r1]
 800c7d4:	613b      	str	r3, [r7, #16]
   return(result);
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1e5      	bne.n	800c7a8 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d01c      	beq.n	800c820 <HAL_UART_Abort+0x1ac>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7f6 fc60 	bl	80030bc <HAL_DMA_Abort>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d00e      	beq.n	800c820 <HAL_UART_Abort+0x1ac>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c808:	4618      	mov	r0, r3
 800c80a:	f7f8 f93f 	bl	8004a8c <HAL_DMA_GetError>
 800c80e:	4603      	mov	r3, r0
 800c810:	2b20      	cmp	r3, #32
 800c812:	d105      	bne.n	800c820 <HAL_UART_Abort+0x1ac>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2210      	movs	r2, #16
 800c818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800c81c:	2303      	movs	r3, #3
 800c81e:	e030      	b.n	800c882 <HAL_UART_Abort+0x20e>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2200      	movs	r2, #0
 800c82c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	220f      	movs	r2, #15
 800c836:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c83c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c840:	d107      	bne.n	800c852 <HAL_UART_Abort+0x1de>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	699a      	ldr	r2, [r3, #24]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f042 0210 	orr.w	r2, r2, #16
 800c850:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	699a      	ldr	r2, [r3, #24]
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f042 0208 	orr.w	r2, r2, #8
 800c860:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2220      	movs	r2, #32
 800c866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2220      	movs	r2, #32
 800c86e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	2200      	movs	r2, #0
 800c876:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	3780      	adds	r7, #128	@ 0x80
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
 800c88a:	bf00      	nop
 800c88c:	ef7ffffe 	.word	0xef7ffffe

0800c890 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b09a      	sub	sp, #104	@ 0x68
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c8a0:	e853 3f00 	ldrex	r3, [r3]
 800c8a4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c8a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c8ac:	667b      	str	r3, [r7, #100]	@ 0x64
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	461a      	mov	r2, r3
 800c8b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c8b8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c8bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c8be:	e841 2300 	strex	r3, r2, [r1]
 800c8c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c8c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1e6      	bne.n	800c898 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	3308      	adds	r3, #8
 800c8d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8d4:	e853 3f00 	ldrex	r3, [r3]
 800c8d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c8da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8dc:	4b53      	ldr	r3, [pc, #332]	@ (800ca2c <HAL_UART_AbortReceive_IT+0x19c>)
 800c8de:	4013      	ands	r3, r2
 800c8e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3308      	adds	r3, #8
 800c8e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c8ea:	643a      	str	r2, [r7, #64]	@ 0x40
 800c8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c8f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c8f2:	e841 2300 	strex	r3, r2, [r1]
 800c8f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1e5      	bne.n	800c8ca <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c902:	2b01      	cmp	r3, #1
 800c904:	d118      	bne.n	800c938 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90c:	6a3b      	ldr	r3, [r7, #32]
 800c90e:	e853 3f00 	ldrex	r3, [r3]
 800c912:	61fb      	str	r3, [r7, #28]
   return(result);
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	f023 0310 	bic.w	r3, r3, #16
 800c91a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	461a      	mov	r2, r3
 800c922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c926:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c928:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c92a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c92c:	e841 2300 	strex	r3, r2, [r1]
 800c930:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1e6      	bne.n	800c906 <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c942:	2b40      	cmp	r3, #64	@ 0x40
 800c944:	d156      	bne.n	800c9f4 <HAL_UART_AbortReceive_IT+0x164>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	3308      	adds	r3, #8
 800c94c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	e853 3f00 	ldrex	r3, [r3]
 800c954:	60bb      	str	r3, [r7, #8]
   return(result);
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c95c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	3308      	adds	r3, #8
 800c964:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c966:	61ba      	str	r2, [r7, #24]
 800c968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c96a:	6979      	ldr	r1, [r7, #20]
 800c96c:	69ba      	ldr	r2, [r7, #24]
 800c96e:	e841 2300 	strex	r3, r2, [r1]
 800c972:	613b      	str	r3, [r7, #16]
   return(result);
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1e5      	bne.n	800c946 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c980:	2b00      	cmp	r3, #0
 800c982:	d017      	beq.n	800c9b4 <HAL_UART_AbortReceive_IT+0x124>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c98a:	4a29      	ldr	r2, [pc, #164]	@ (800ca30 <HAL_UART_AbortReceive_IT+0x1a0>)
 800c98c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c994:	4618      	mov	r0, r3
 800c996:	f7f6 feaf 	bl	80036f8 <HAL_DMA_Abort_IT>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d040      	beq.n	800ca22 <HAL_UART_AbortReceive_IT+0x192>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c9ae:	4610      	mov	r0, r2
 800c9b0:	4798      	blx	r3
 800c9b2:	e036      	b.n	800ca22 <HAL_UART_AbortReceive_IT+0x192>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	220f      	movs	r2, #15
 800c9c8:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	699a      	ldr	r2, [r3, #24]
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f042 0208 	orr.w	r2, r2, #8
 800c9d8:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2220      	movs	r2, #32
 800c9de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	4798      	blx	r3
 800c9f2:	e016      	b.n	800ca22 <HAL_UART_AbortReceive_IT+0x192>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	220f      	movs	r2, #15
 800ca08:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2220      	movs	r2, #32
 800ca0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2200      	movs	r2, #0
 800ca16:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	4798      	blx	r3
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3768      	adds	r7, #104	@ 0x68
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	effffffe 	.word	0xeffffffe
 800ca30:	0800ea9d 	.word	0x0800ea9d

0800ca34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b0ba      	sub	sp, #232	@ 0xe8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	69db      	ldr	r3, [r3, #28]
 800ca42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ca5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ca5e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ca62:	4013      	ands	r3, r2
 800ca64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ca68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d11b      	bne.n	800caa8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ca70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca74:	f003 0320 	and.w	r3, r3, #32
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d015      	beq.n	800caa8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ca7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca80:	f003 0320 	and.w	r3, r3, #32
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d105      	bne.n	800ca94 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ca88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ca8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d009      	beq.n	800caa8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	f000 8387 	beq.w	800d1ac <HAL_UART_IRQHandler+0x778>
      {
        huart->RxISR(huart);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	4798      	blx	r3
      }
      return;
 800caa6:	e381      	b.n	800d1ac <HAL_UART_IRQHandler+0x778>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800caa8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800caac:	2b00      	cmp	r3, #0
 800caae:	f000 8129 	beq.w	800cd04 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cab2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cab6:	4b90      	ldr	r3, [pc, #576]	@ (800ccf8 <HAL_UART_IRQHandler+0x2c4>)
 800cab8:	4013      	ands	r3, r2
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d106      	bne.n	800cacc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cabe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cac2:	4b8e      	ldr	r3, [pc, #568]	@ (800ccfc <HAL_UART_IRQHandler+0x2c8>)
 800cac4:	4013      	ands	r3, r2
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f000 811c 	beq.w	800cd04 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cacc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cad0:	f003 0301 	and.w	r3, r3, #1
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d011      	beq.n	800cafc <HAL_UART_IRQHandler+0xc8>
 800cad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cadc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00b      	beq.n	800cafc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2201      	movs	r2, #1
 800caea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800caf2:	f043 0201 	orr.w	r2, r3, #1
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb00:	f003 0302 	and.w	r3, r3, #2
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d011      	beq.n	800cb2c <HAL_UART_IRQHandler+0xf8>
 800cb08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb0c:	f003 0301 	and.w	r3, r3, #1
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d00b      	beq.n	800cb2c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2202      	movs	r2, #2
 800cb1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb22:	f043 0204 	orr.w	r2, r3, #4
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb30:	f003 0304 	and.w	r3, r3, #4
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d011      	beq.n	800cb5c <HAL_UART_IRQHandler+0x128>
 800cb38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cb3c:	f003 0301 	and.w	r3, r3, #1
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d00b      	beq.n	800cb5c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	2204      	movs	r2, #4
 800cb4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb52:	f043 0202 	orr.w	r2, r3, #2
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cb5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb60:	f003 0308 	and.w	r3, r3, #8
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d017      	beq.n	800cb98 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cb6c:	f003 0320 	and.w	r3, r3, #32
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d105      	bne.n	800cb80 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cb74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cb78:	4b5f      	ldr	r3, [pc, #380]	@ (800ccf8 <HAL_UART_IRQHandler+0x2c4>)
 800cb7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d00b      	beq.n	800cb98 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2208      	movs	r2, #8
 800cb86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb8e:	f043 0208 	orr.w	r2, r3, #8
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cb98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d012      	beq.n	800cbca <HAL_UART_IRQHandler+0x196>
 800cba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cba8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d00c      	beq.n	800cbca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cbb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbc0:	f043 0220 	orr.w	r2, r3, #32
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f000 82ed 	beq.w	800d1b0 <HAL_UART_IRQHandler+0x77c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cbd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cbda:	f003 0320 	and.w	r3, r3, #32
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d013      	beq.n	800cc0a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cbe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cbe6:	f003 0320 	and.w	r3, r3, #32
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d105      	bne.n	800cbfa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cbee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cbf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d007      	beq.n	800cc0a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d003      	beq.n	800cc0a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	689b      	ldr	r3, [r3, #8]
 800cc1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc1e:	2b40      	cmp	r3, #64	@ 0x40
 800cc20:	d005      	beq.n	800cc2e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cc22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cc26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d058      	beq.n	800cce0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f001 fd5c 	bl	800e6ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc3e:	2b40      	cmp	r3, #64	@ 0x40
 800cc40:	d148      	bne.n	800ccd4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	3308      	adds	r3, #8
 800cc48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cc50:	e853 3f00 	ldrex	r3, [r3]
 800cc54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cc58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cc5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	3308      	adds	r3, #8
 800cc6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cc6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cc72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cc7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cc7e:	e841 2300 	strex	r3, r2, [r1]
 800cc82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cc86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d1d9      	bne.n	800cc42 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d017      	beq.n	800ccc8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc9e:	4a18      	ldr	r2, [pc, #96]	@ (800cd00 <HAL_UART_IRQHandler+0x2cc>)
 800cca0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7f6 fd25 	bl	80036f8 <HAL_DMA_Abort_IT>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d01f      	beq.n	800ccf4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ccba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ccc2:	4610      	mov	r0, r2
 800ccc4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccc6:	e015      	b.n	800ccf4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccd2:	e00f      	b.n	800ccf4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccde:	e009      	b.n	800ccf4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ccf2:	e25d      	b.n	800d1b0 <HAL_UART_IRQHandler+0x77c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccf4:	bf00      	nop
    return;
 800ccf6:	e25b      	b.n	800d1b0 <HAL_UART_IRQHandler+0x77c>
 800ccf8:	10000001 	.word	0x10000001
 800ccfc:	04000120 	.word	0x04000120
 800cd00:	0800ea6d 	.word	0x0800ea6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	f040 81eb 	bne.w	800d0e4 <HAL_UART_IRQHandler+0x6b0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cd0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd12:	f003 0310 	and.w	r3, r3, #16
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f000 81e4 	beq.w	800d0e4 <HAL_UART_IRQHandler+0x6b0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cd1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd20:	f003 0310 	and.w	r3, r3, #16
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	f000 81dd 	beq.w	800d0e4 <HAL_UART_IRQHandler+0x6b0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2210      	movs	r2, #16
 800cd30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	689b      	ldr	r3, [r3, #8]
 800cd38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd3c:	2b40      	cmp	r3, #64	@ 0x40
 800cd3e:	f040 8153 	bne.w	800cfe8 <HAL_UART_IRQHandler+0x5b4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a97      	ldr	r2, [pc, #604]	@ (800cfa8 <HAL_UART_IRQHandler+0x574>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d068      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4a94      	ldr	r2, [pc, #592]	@ (800cfac <HAL_UART_IRQHandler+0x578>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d061      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4a92      	ldr	r2, [pc, #584]	@ (800cfb0 <HAL_UART_IRQHandler+0x57c>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d05a      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a8f      	ldr	r2, [pc, #572]	@ (800cfb4 <HAL_UART_IRQHandler+0x580>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d053      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a8d      	ldr	r2, [pc, #564]	@ (800cfb8 <HAL_UART_IRQHandler+0x584>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d04c      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	4a8a      	ldr	r2, [pc, #552]	@ (800cfbc <HAL_UART_IRQHandler+0x588>)
 800cd92:	4293      	cmp	r3, r2
 800cd94:	d045      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a88      	ldr	r2, [pc, #544]	@ (800cfc0 <HAL_UART_IRQHandler+0x58c>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d03e      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a85      	ldr	r2, [pc, #532]	@ (800cfc4 <HAL_UART_IRQHandler+0x590>)
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d037      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a83      	ldr	r2, [pc, #524]	@ (800cfc8 <HAL_UART_IRQHandler+0x594>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d030      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a80      	ldr	r2, [pc, #512]	@ (800cfcc <HAL_UART_IRQHandler+0x598>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d029      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a7e      	ldr	r2, [pc, #504]	@ (800cfd0 <HAL_UART_IRQHandler+0x59c>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d022      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	4a7b      	ldr	r2, [pc, #492]	@ (800cfd4 <HAL_UART_IRQHandler+0x5a0>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d01b      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	4a79      	ldr	r2, [pc, #484]	@ (800cfd8 <HAL_UART_IRQHandler+0x5a4>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d014      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a76      	ldr	r2, [pc, #472]	@ (800cfdc <HAL_UART_IRQHandler+0x5a8>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d00d      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a74      	ldr	r2, [pc, #464]	@ (800cfe0 <HAL_UART_IRQHandler+0x5ac>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d006      	beq.n	800ce22 <HAL_UART_IRQHandler+0x3ee>
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a71      	ldr	r2, [pc, #452]	@ (800cfe4 <HAL_UART_IRQHandler+0x5b0>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d106      	bne.n	800ce30 <HAL_UART_IRQHandler+0x3fc>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	e005      	b.n	800ce3c <HAL_UART_IRQHandler+0x408>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	685b      	ldr	r3, [r3, #4]
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ce40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	f000 81b5 	beq.w	800d1b4 <HAL_UART_IRQHandler+0x780>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ce50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce54:	429a      	cmp	r2, r3
 800ce56:	f080 81ad 	bcs.w	800d1b4 <HAL_UART_IRQHandler+0x780>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ce60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ce6a:	69db      	ldr	r3, [r3, #28]
 800ce6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce70:	f000 8087 	beq.w	800cf82 <HAL_UART_IRQHandler+0x54e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ce80:	e853 3f00 	ldrex	r3, [r3]
 800ce84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ce88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ce8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ce90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	461a      	mov	r2, r3
 800ce9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ce9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cea2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cea6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ceaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ceae:	e841 2300 	strex	r3, r2, [r1]
 800ceb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ceb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d1da      	bne.n	800ce74 <HAL_UART_IRQHandler+0x440>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	3308      	adds	r3, #8
 800cec4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cec8:	e853 3f00 	ldrex	r3, [r3]
 800cecc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cece:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ced0:	f023 0301 	bic.w	r3, r3, #1
 800ced4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	3308      	adds	r3, #8
 800cede:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cee2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cee6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ceea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ceee:	e841 2300 	strex	r3, r2, [r1]
 800cef2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d1e1      	bne.n	800cebe <HAL_UART_IRQHandler+0x48a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	3308      	adds	r3, #8
 800cf00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf04:	e853 3f00 	ldrex	r3, [r3]
 800cf08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cf0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	3308      	adds	r3, #8
 800cf1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cf1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cf20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cf26:	e841 2300 	strex	r3, r2, [r1]
 800cf2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cf2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d1e3      	bne.n	800cefa <HAL_UART_IRQHandler+0x4c6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2220      	movs	r2, #32
 800cf36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf48:	e853 3f00 	ldrex	r3, [r3]
 800cf4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cf4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cf50:	f023 0310 	bic.w	r3, r3, #16
 800cf54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf62:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cf68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cf6a:	e841 2300 	strex	r3, r2, [r1]
 800cf6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cf70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d1e4      	bne.n	800cf40 <HAL_UART_IRQHandler+0x50c>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f7f6 f89d 	bl	80030bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2202      	movs	r2, #2
 800cf86:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800cf9a:	b292      	uxth	r2, r2
 800cf9c:	1a8a      	subs	r2, r1, r2
 800cf9e:	b292      	uxth	r2, r2
 800cfa0:	4611      	mov	r1, r2
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cfa6:	e105      	b.n	800d1b4 <HAL_UART_IRQHandler+0x780>
 800cfa8:	40020010 	.word	0x40020010
 800cfac:	40020028 	.word	0x40020028
 800cfb0:	40020040 	.word	0x40020040
 800cfb4:	40020058 	.word	0x40020058
 800cfb8:	40020070 	.word	0x40020070
 800cfbc:	40020088 	.word	0x40020088
 800cfc0:	400200a0 	.word	0x400200a0
 800cfc4:	400200b8 	.word	0x400200b8
 800cfc8:	40020410 	.word	0x40020410
 800cfcc:	40020428 	.word	0x40020428
 800cfd0:	40020440 	.word	0x40020440
 800cfd4:	40020458 	.word	0x40020458
 800cfd8:	40020470 	.word	0x40020470
 800cfdc:	40020488 	.word	0x40020488
 800cfe0:	400204a0 	.word	0x400204a0
 800cfe4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	1ad3      	subs	r3, r2, r3
 800cff8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d002:	b29b      	uxth	r3, r3
 800d004:	2b00      	cmp	r3, #0
 800d006:	f000 80d7 	beq.w	800d1b8 <HAL_UART_IRQHandler+0x784>
          && (nb_rx_data > 0U))
 800d00a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d00e:	2b00      	cmp	r3, #0
 800d010:	f000 80d2 	beq.w	800d1b8 <HAL_UART_IRQHandler+0x784>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d01c:	e853 3f00 	ldrex	r3, [r3]
 800d020:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d024:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d028:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	461a      	mov	r2, r3
 800d032:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d036:	647b      	str	r3, [r7, #68]	@ 0x44
 800d038:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d03a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d03c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d03e:	e841 2300 	strex	r3, r2, [r1]
 800d042:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d046:	2b00      	cmp	r3, #0
 800d048:	d1e4      	bne.n	800d014 <HAL_UART_IRQHandler+0x5e0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	3308      	adds	r3, #8
 800d050:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d054:	e853 3f00 	ldrex	r3, [r3]
 800d058:	623b      	str	r3, [r7, #32]
   return(result);
 800d05a:	6a3a      	ldr	r2, [r7, #32]
 800d05c:	4b59      	ldr	r3, [pc, #356]	@ (800d1c4 <HAL_UART_IRQHandler+0x790>)
 800d05e:	4013      	ands	r3, r2
 800d060:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	3308      	adds	r3, #8
 800d06a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d06e:	633a      	str	r2, [r7, #48]	@ 0x30
 800d070:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d072:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d076:	e841 2300 	strex	r3, r2, [r1]
 800d07a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1e3      	bne.n	800d04a <HAL_UART_IRQHandler+0x616>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2220      	movs	r2, #32
 800d086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	e853 3f00 	ldrex	r3, [r3]
 800d0a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f023 0310 	bic.w	r3, r3, #16
 800d0aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d0b8:	61fb      	str	r3, [r7, #28]
 800d0ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0bc:	69b9      	ldr	r1, [r7, #24]
 800d0be:	69fa      	ldr	r2, [r7, #28]
 800d0c0:	e841 2300 	strex	r3, r2, [r1]
 800d0c4:	617b      	str	r3, [r7, #20]
   return(result);
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d1e4      	bne.n	800d096 <HAL_UART_IRQHandler+0x662>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d0d8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800d0dc:	4611      	mov	r1, r2
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d0e2:	e069      	b.n	800d1b8 <HAL_UART_IRQHandler+0x784>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d010      	beq.n	800d112 <HAL_UART_IRQHandler+0x6de>
 800d0f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00a      	beq.n	800d112 <HAL_UART_IRQHandler+0x6de>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d104:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d110:	e055      	b.n	800d1be <HAL_UART_IRQHandler+0x78a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d014      	beq.n	800d148 <HAL_UART_IRQHandler+0x714>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d11e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d126:	2b00      	cmp	r3, #0
 800d128:	d105      	bne.n	800d136 <HAL_UART_IRQHandler+0x702>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d12a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d12e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d132:	2b00      	cmp	r3, #0
 800d134:	d008      	beq.n	800d148 <HAL_UART_IRQHandler+0x714>
  {
    if (huart->TxISR != NULL)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d03e      	beq.n	800d1bc <HAL_UART_IRQHandler+0x788>
    {
      huart->TxISR(huart);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	4798      	blx	r3
    }
    return;
 800d146:	e039      	b.n	800d1bc <HAL_UART_IRQHandler+0x788>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d14c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d150:	2b00      	cmp	r3, #0
 800d152:	d009      	beq.n	800d168 <HAL_UART_IRQHandler+0x734>
 800d154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d003      	beq.n	800d168 <HAL_UART_IRQHandler+0x734>
  {
    UART_EndTransmit_IT(huart);
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f001 fe64 	bl	800ee2e <UART_EndTransmit_IT>
    return;
 800d166:	e02a      	b.n	800d1be <HAL_UART_IRQHandler+0x78a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d16c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d170:	2b00      	cmp	r3, #0
 800d172:	d00b      	beq.n	800d18c <HAL_UART_IRQHandler+0x758>
 800d174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d178:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d005      	beq.n	800d18c <HAL_UART_IRQHandler+0x758>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d18a:	e018      	b.n	800d1be <HAL_UART_IRQHandler+0x78a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d18c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d190:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d194:	2b00      	cmp	r3, #0
 800d196:	d012      	beq.n	800d1be <HAL_UART_IRQHandler+0x78a>
 800d198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	da0e      	bge.n	800d1be <HAL_UART_IRQHandler+0x78a>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1aa:	e008      	b.n	800d1be <HAL_UART_IRQHandler+0x78a>
      return;
 800d1ac:	bf00      	nop
 800d1ae:	e006      	b.n	800d1be <HAL_UART_IRQHandler+0x78a>
    return;
 800d1b0:	bf00      	nop
 800d1b2:	e004      	b.n	800d1be <HAL_UART_IRQHandler+0x78a>
      return;
 800d1b4:	bf00      	nop
 800d1b6:	e002      	b.n	800d1be <HAL_UART_IRQHandler+0x78a>
      return;
 800d1b8:	bf00      	nop
 800d1ba:	e000      	b.n	800d1be <HAL_UART_IRQHandler+0x78a>
    return;
 800d1bc:	bf00      	nop
  }
}
 800d1be:	37e8      	adds	r7, #232	@ 0xe8
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	effffffe 	.word	0xeffffffe

0800d1c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b083      	sub	sp, #12
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d1d0:	bf00      	nop
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d1e4:	bf00      	nop
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d1f8:	bf00      	nop
 800d1fa:	370c      	adds	r7, #12
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d20c:	bf00      	nop
 800d20e:	370c      	adds	r7, #12
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr

0800d218 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d218:	b480      	push	{r7}
 800d21a:	b083      	sub	sp, #12
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d220:	bf00      	nop
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b083      	sub	sp, #12
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800d234:	bf00      	nop
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800d240:	b480      	push	{r7}
 800d242:	b083      	sub	sp, #12
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800d248:	bf00      	nop
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr

0800d254 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d25c:	bf00      	nop
 800d25e:	370c      	adds	r7, #12
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	460b      	mov	r3, r1
 800d272:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d274:	bf00      	nop
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr

0800d280 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800d280:	b480      	push	{r7}
 800d282:	b08f      	sub	sp, #60	@ 0x3c
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d101      	bne.n	800d296 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800d292:	2302      	movs	r3, #2
 800d294:	e042      	b.n	800d31c <HAL_HalfDuplex_EnableTransmitter+0x9c>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2201      	movs	r2, #1
 800d29a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2224      	movs	r2, #36	@ 0x24
 800d2a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ac:	6a3b      	ldr	r3, [r7, #32]
 800d2ae:	e853 3f00 	ldrex	r3, [r3]
 800d2b2:	61fb      	str	r3, [r7, #28]
   return(result);
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	f023 030c 	bic.w	r3, r3, #12
 800d2ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	461a      	mov	r2, r3
 800d2c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d2c6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d2ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2cc:	e841 2300 	strex	r3, r2, [r1]
 800d2d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d1e6      	bne.n	800d2a6 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	e853 3f00 	ldrex	r3, [r3]
 800d2e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	f043 0308 	orr.w	r3, r3, #8
 800d2ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2f6:	61bb      	str	r3, [r7, #24]
 800d2f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2fa:	6979      	ldr	r1, [r7, #20]
 800d2fc:	69ba      	ldr	r2, [r7, #24]
 800d2fe:	e841 2300 	strex	r3, r2, [r1]
 800d302:	613b      	str	r3, [r7, #16]
   return(result);
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d1e6      	bne.n	800d2d8 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2220      	movs	r2, #32
 800d30e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	373c      	adds	r7, #60	@ 0x3c
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 800d328:	b480      	push	{r7}
 800d32a:	b08f      	sub	sp, #60	@ 0x3c
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d336:	2b01      	cmp	r3, #1
 800d338:	d101      	bne.n	800d33e <HAL_HalfDuplex_EnableReceiver+0x16>
 800d33a:	2302      	movs	r3, #2
 800d33c:	e042      	b.n	800d3c4 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2201      	movs	r2, #1
 800d342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2224      	movs	r2, #36	@ 0x24
 800d34a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d354:	6a3b      	ldr	r3, [r7, #32]
 800d356:	e853 3f00 	ldrex	r3, [r3]
 800d35a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d35c:	69fb      	ldr	r3, [r7, #28]
 800d35e:	f023 030c 	bic.w	r3, r3, #12
 800d362:	637b      	str	r3, [r7, #52]	@ 0x34
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	461a      	mov	r2, r3
 800d36a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d36e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d370:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d374:	e841 2300 	strex	r3, r2, [r1]
 800d378:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d1e6      	bne.n	800d34e <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	e853 3f00 	ldrex	r3, [r3]
 800d38c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	f043 0304 	orr.w	r3, r3, #4
 800d394:	633b      	str	r3, [r7, #48]	@ 0x30
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	461a      	mov	r2, r3
 800d39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d39e:	61bb      	str	r3, [r7, #24]
 800d3a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a2:	6979      	ldr	r1, [r7, #20]
 800d3a4:	69ba      	ldr	r2, [r7, #24]
 800d3a6:	e841 2300 	strex	r3, r2, [r1]
 800d3aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1e6      	bne.n	800d380 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2220      	movs	r2, #32
 800d3b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	373c      	adds	r7, #60	@ 0x3c
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b085      	sub	sp, #20
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3de:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d3e6:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	4313      	orrs	r3, r2
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3714      	adds	r7, #20
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr
	...

0800d3fc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	4a1a      	ldr	r2, [pc, #104]	@ (800d470 <UART_InitCallbacksToDefault+0x74>)
 800d408:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	4a19      	ldr	r2, [pc, #100]	@ (800d474 <UART_InitCallbacksToDefault+0x78>)
 800d410:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	4a18      	ldr	r2, [pc, #96]	@ (800d478 <UART_InitCallbacksToDefault+0x7c>)
 800d418:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4a17      	ldr	r2, [pc, #92]	@ (800d47c <UART_InitCallbacksToDefault+0x80>)
 800d420:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	4a16      	ldr	r2, [pc, #88]	@ (800d480 <UART_InitCallbacksToDefault+0x84>)
 800d428:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4a15      	ldr	r2, [pc, #84]	@ (800d484 <UART_InitCallbacksToDefault+0x88>)
 800d430:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4a14      	ldr	r2, [pc, #80]	@ (800d488 <UART_InitCallbacksToDefault+0x8c>)
 800d438:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	4a13      	ldr	r2, [pc, #76]	@ (800d48c <UART_InitCallbacksToDefault+0x90>)
 800d440:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	4a12      	ldr	r2, [pc, #72]	@ (800d490 <UART_InitCallbacksToDefault+0x94>)
 800d448:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	4a11      	ldr	r2, [pc, #68]	@ (800d494 <UART_InitCallbacksToDefault+0x98>)
 800d450:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	4a10      	ldr	r2, [pc, #64]	@ (800d498 <UART_InitCallbacksToDefault+0x9c>)
 800d458:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	4a0f      	ldr	r2, [pc, #60]	@ (800d49c <UART_InitCallbacksToDefault+0xa0>)
 800d460:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800d464:	bf00      	nop
 800d466:	370c      	adds	r7, #12
 800d468:	46bd      	mov	sp, r7
 800d46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46e:	4770      	bx	lr
 800d470:	0800d1dd 	.word	0x0800d1dd
 800d474:	0800d1c9 	.word	0x0800d1c9
 800d478:	0800d205 	.word	0x0800d205
 800d47c:	0800d1f1 	.word	0x0800d1f1
 800d480:	0800d219 	.word	0x0800d219
 800d484:	0800d22d 	.word	0x0800d22d
 800d488:	0800d241 	.word	0x0800d241
 800d48c:	0800d255 	.word	0x0800d255
 800d490:	0800f8e9 	.word	0x0800f8e9
 800d494:	0800f8fd 	.word	0x0800f8fd
 800d498:	0800f911 	.word	0x0800f911
 800d49c:	0800d269 	.word	0x0800d269

0800d4a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4a4:	b092      	sub	sp, #72	@ 0x48
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	689a      	ldr	r2, [r3, #8]
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	691b      	ldr	r3, [r3, #16]
 800d4b8:	431a      	orrs	r2, r3
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	695b      	ldr	r3, [r3, #20]
 800d4be:	431a      	orrs	r2, r3
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	69db      	ldr	r3, [r3, #28]
 800d4c4:	4313      	orrs	r3, r2
 800d4c6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	681a      	ldr	r2, [r3, #0]
 800d4ce:	4bbe      	ldr	r3, [pc, #760]	@ (800d7c8 <UART_SetConfig+0x328>)
 800d4d0:	4013      	ands	r3, r2
 800d4d2:	697a      	ldr	r2, [r7, #20]
 800d4d4:	6812      	ldr	r2, [r2, #0]
 800d4d6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d4d8:	430b      	orrs	r3, r1
 800d4da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	68da      	ldr	r2, [r3, #12]
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	430a      	orrs	r2, r1
 800d4f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	699b      	ldr	r3, [r3, #24]
 800d4f6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d4f8:	697b      	ldr	r3, [r7, #20]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4ab3      	ldr	r2, [pc, #716]	@ (800d7cc <UART_SetConfig+0x32c>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d004      	beq.n	800d50c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	6a1b      	ldr	r3, [r3, #32]
 800d506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d508:	4313      	orrs	r3, r2
 800d50a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	689a      	ldr	r2, [r3, #8]
 800d512:	4baf      	ldr	r3, [pc, #700]	@ (800d7d0 <UART_SetConfig+0x330>)
 800d514:	4013      	ands	r3, r2
 800d516:	697a      	ldr	r2, [r7, #20]
 800d518:	6812      	ldr	r2, [r2, #0]
 800d51a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d51c:	430b      	orrs	r3, r1
 800d51e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d526:	f023 010f 	bic.w	r1, r3, #15
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	430a      	orrs	r2, r1
 800d534:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	4aa6      	ldr	r2, [pc, #664]	@ (800d7d4 <UART_SetConfig+0x334>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d177      	bne.n	800d630 <UART_SetConfig+0x190>
 800d540:	4ba5      	ldr	r3, [pc, #660]	@ (800d7d8 <UART_SetConfig+0x338>)
 800d542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d544:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d548:	2b28      	cmp	r3, #40	@ 0x28
 800d54a:	d86d      	bhi.n	800d628 <UART_SetConfig+0x188>
 800d54c:	a201      	add	r2, pc, #4	@ (adr r2, 800d554 <UART_SetConfig+0xb4>)
 800d54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d552:	bf00      	nop
 800d554:	0800d5f9 	.word	0x0800d5f9
 800d558:	0800d629 	.word	0x0800d629
 800d55c:	0800d629 	.word	0x0800d629
 800d560:	0800d629 	.word	0x0800d629
 800d564:	0800d629 	.word	0x0800d629
 800d568:	0800d629 	.word	0x0800d629
 800d56c:	0800d629 	.word	0x0800d629
 800d570:	0800d629 	.word	0x0800d629
 800d574:	0800d601 	.word	0x0800d601
 800d578:	0800d629 	.word	0x0800d629
 800d57c:	0800d629 	.word	0x0800d629
 800d580:	0800d629 	.word	0x0800d629
 800d584:	0800d629 	.word	0x0800d629
 800d588:	0800d629 	.word	0x0800d629
 800d58c:	0800d629 	.word	0x0800d629
 800d590:	0800d629 	.word	0x0800d629
 800d594:	0800d609 	.word	0x0800d609
 800d598:	0800d629 	.word	0x0800d629
 800d59c:	0800d629 	.word	0x0800d629
 800d5a0:	0800d629 	.word	0x0800d629
 800d5a4:	0800d629 	.word	0x0800d629
 800d5a8:	0800d629 	.word	0x0800d629
 800d5ac:	0800d629 	.word	0x0800d629
 800d5b0:	0800d629 	.word	0x0800d629
 800d5b4:	0800d611 	.word	0x0800d611
 800d5b8:	0800d629 	.word	0x0800d629
 800d5bc:	0800d629 	.word	0x0800d629
 800d5c0:	0800d629 	.word	0x0800d629
 800d5c4:	0800d629 	.word	0x0800d629
 800d5c8:	0800d629 	.word	0x0800d629
 800d5cc:	0800d629 	.word	0x0800d629
 800d5d0:	0800d629 	.word	0x0800d629
 800d5d4:	0800d619 	.word	0x0800d619
 800d5d8:	0800d629 	.word	0x0800d629
 800d5dc:	0800d629 	.word	0x0800d629
 800d5e0:	0800d629 	.word	0x0800d629
 800d5e4:	0800d629 	.word	0x0800d629
 800d5e8:	0800d629 	.word	0x0800d629
 800d5ec:	0800d629 	.word	0x0800d629
 800d5f0:	0800d629 	.word	0x0800d629
 800d5f4:	0800d621 	.word	0x0800d621
 800d5f8:	2301      	movs	r3, #1
 800d5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d5fe:	e222      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d600:	2304      	movs	r3, #4
 800d602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d606:	e21e      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d608:	2308      	movs	r3, #8
 800d60a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d60e:	e21a      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d610:	2310      	movs	r3, #16
 800d612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d616:	e216      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d618:	2320      	movs	r3, #32
 800d61a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d61e:	e212      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d620:	2340      	movs	r3, #64	@ 0x40
 800d622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d626:	e20e      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d628:	2380      	movs	r3, #128	@ 0x80
 800d62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d62e:	e20a      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	4a69      	ldr	r2, [pc, #420]	@ (800d7dc <UART_SetConfig+0x33c>)
 800d636:	4293      	cmp	r3, r2
 800d638:	d130      	bne.n	800d69c <UART_SetConfig+0x1fc>
 800d63a:	4b67      	ldr	r3, [pc, #412]	@ (800d7d8 <UART_SetConfig+0x338>)
 800d63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d63e:	f003 0307 	and.w	r3, r3, #7
 800d642:	2b05      	cmp	r3, #5
 800d644:	d826      	bhi.n	800d694 <UART_SetConfig+0x1f4>
 800d646:	a201      	add	r2, pc, #4	@ (adr r2, 800d64c <UART_SetConfig+0x1ac>)
 800d648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d64c:	0800d665 	.word	0x0800d665
 800d650:	0800d66d 	.word	0x0800d66d
 800d654:	0800d675 	.word	0x0800d675
 800d658:	0800d67d 	.word	0x0800d67d
 800d65c:	0800d685 	.word	0x0800d685
 800d660:	0800d68d 	.word	0x0800d68d
 800d664:	2300      	movs	r3, #0
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d66a:	e1ec      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d66c:	2304      	movs	r3, #4
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d672:	e1e8      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d674:	2308      	movs	r3, #8
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d67a:	e1e4      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d67c:	2310      	movs	r3, #16
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d682:	e1e0      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d684:	2320      	movs	r3, #32
 800d686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d68a:	e1dc      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d68c:	2340      	movs	r3, #64	@ 0x40
 800d68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d692:	e1d8      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d694:	2380      	movs	r3, #128	@ 0x80
 800d696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d69a:	e1d4      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4a4f      	ldr	r2, [pc, #316]	@ (800d7e0 <UART_SetConfig+0x340>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d130      	bne.n	800d708 <UART_SetConfig+0x268>
 800d6a6:	4b4c      	ldr	r3, [pc, #304]	@ (800d7d8 <UART_SetConfig+0x338>)
 800d6a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6aa:	f003 0307 	and.w	r3, r3, #7
 800d6ae:	2b05      	cmp	r3, #5
 800d6b0:	d826      	bhi.n	800d700 <UART_SetConfig+0x260>
 800d6b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d6b8 <UART_SetConfig+0x218>)
 800d6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b8:	0800d6d1 	.word	0x0800d6d1
 800d6bc:	0800d6d9 	.word	0x0800d6d9
 800d6c0:	0800d6e1 	.word	0x0800d6e1
 800d6c4:	0800d6e9 	.word	0x0800d6e9
 800d6c8:	0800d6f1 	.word	0x0800d6f1
 800d6cc:	0800d6f9 	.word	0x0800d6f9
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6d6:	e1b6      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d6d8:	2304      	movs	r3, #4
 800d6da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6de:	e1b2      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d6e0:	2308      	movs	r3, #8
 800d6e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6e6:	e1ae      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d6e8:	2310      	movs	r3, #16
 800d6ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ee:	e1aa      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d6f0:	2320      	movs	r3, #32
 800d6f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6f6:	e1a6      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d6f8:	2340      	movs	r3, #64	@ 0x40
 800d6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6fe:	e1a2      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d700:	2380      	movs	r3, #128	@ 0x80
 800d702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d706:	e19e      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4a35      	ldr	r2, [pc, #212]	@ (800d7e4 <UART_SetConfig+0x344>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d130      	bne.n	800d774 <UART_SetConfig+0x2d4>
 800d712:	4b31      	ldr	r3, [pc, #196]	@ (800d7d8 <UART_SetConfig+0x338>)
 800d714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d716:	f003 0307 	and.w	r3, r3, #7
 800d71a:	2b05      	cmp	r3, #5
 800d71c:	d826      	bhi.n	800d76c <UART_SetConfig+0x2cc>
 800d71e:	a201      	add	r2, pc, #4	@ (adr r2, 800d724 <UART_SetConfig+0x284>)
 800d720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d724:	0800d73d 	.word	0x0800d73d
 800d728:	0800d745 	.word	0x0800d745
 800d72c:	0800d74d 	.word	0x0800d74d
 800d730:	0800d755 	.word	0x0800d755
 800d734:	0800d75d 	.word	0x0800d75d
 800d738:	0800d765 	.word	0x0800d765
 800d73c:	2300      	movs	r3, #0
 800d73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d742:	e180      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d744:	2304      	movs	r3, #4
 800d746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d74a:	e17c      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d74c:	2308      	movs	r3, #8
 800d74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d752:	e178      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d754:	2310      	movs	r3, #16
 800d756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d75a:	e174      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d75c:	2320      	movs	r3, #32
 800d75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d762:	e170      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d764:	2340      	movs	r3, #64	@ 0x40
 800d766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d76a:	e16c      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d76c:	2380      	movs	r3, #128	@ 0x80
 800d76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d772:	e168      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a1b      	ldr	r2, [pc, #108]	@ (800d7e8 <UART_SetConfig+0x348>)
 800d77a:	4293      	cmp	r3, r2
 800d77c:	d142      	bne.n	800d804 <UART_SetConfig+0x364>
 800d77e:	4b16      	ldr	r3, [pc, #88]	@ (800d7d8 <UART_SetConfig+0x338>)
 800d780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d782:	f003 0307 	and.w	r3, r3, #7
 800d786:	2b05      	cmp	r3, #5
 800d788:	d838      	bhi.n	800d7fc <UART_SetConfig+0x35c>
 800d78a:	a201      	add	r2, pc, #4	@ (adr r2, 800d790 <UART_SetConfig+0x2f0>)
 800d78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d790:	0800d7a9 	.word	0x0800d7a9
 800d794:	0800d7b1 	.word	0x0800d7b1
 800d798:	0800d7b9 	.word	0x0800d7b9
 800d79c:	0800d7c1 	.word	0x0800d7c1
 800d7a0:	0800d7ed 	.word	0x0800d7ed
 800d7a4:	0800d7f5 	.word	0x0800d7f5
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ae:	e14a      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d7b0:	2304      	movs	r3, #4
 800d7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7b6:	e146      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d7b8:	2308      	movs	r3, #8
 800d7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7be:	e142      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d7c0:	2310      	movs	r3, #16
 800d7c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7c6:	e13e      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d7c8:	cfff69f3 	.word	0xcfff69f3
 800d7cc:	58000c00 	.word	0x58000c00
 800d7d0:	11fff4ff 	.word	0x11fff4ff
 800d7d4:	40011000 	.word	0x40011000
 800d7d8:	58024400 	.word	0x58024400
 800d7dc:	40004400 	.word	0x40004400
 800d7e0:	40004800 	.word	0x40004800
 800d7e4:	40004c00 	.word	0x40004c00
 800d7e8:	40005000 	.word	0x40005000
 800d7ec:	2320      	movs	r3, #32
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7f2:	e128      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d7f4:	2340      	movs	r3, #64	@ 0x40
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7fa:	e124      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d7fc:	2380      	movs	r3, #128	@ 0x80
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d802:	e120      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	4acb      	ldr	r2, [pc, #812]	@ (800db38 <UART_SetConfig+0x698>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d176      	bne.n	800d8fc <UART_SetConfig+0x45c>
 800d80e:	4bcb      	ldr	r3, [pc, #812]	@ (800db3c <UART_SetConfig+0x69c>)
 800d810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d812:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d816:	2b28      	cmp	r3, #40	@ 0x28
 800d818:	d86c      	bhi.n	800d8f4 <UART_SetConfig+0x454>
 800d81a:	a201      	add	r2, pc, #4	@ (adr r2, 800d820 <UART_SetConfig+0x380>)
 800d81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d820:	0800d8c5 	.word	0x0800d8c5
 800d824:	0800d8f5 	.word	0x0800d8f5
 800d828:	0800d8f5 	.word	0x0800d8f5
 800d82c:	0800d8f5 	.word	0x0800d8f5
 800d830:	0800d8f5 	.word	0x0800d8f5
 800d834:	0800d8f5 	.word	0x0800d8f5
 800d838:	0800d8f5 	.word	0x0800d8f5
 800d83c:	0800d8f5 	.word	0x0800d8f5
 800d840:	0800d8cd 	.word	0x0800d8cd
 800d844:	0800d8f5 	.word	0x0800d8f5
 800d848:	0800d8f5 	.word	0x0800d8f5
 800d84c:	0800d8f5 	.word	0x0800d8f5
 800d850:	0800d8f5 	.word	0x0800d8f5
 800d854:	0800d8f5 	.word	0x0800d8f5
 800d858:	0800d8f5 	.word	0x0800d8f5
 800d85c:	0800d8f5 	.word	0x0800d8f5
 800d860:	0800d8d5 	.word	0x0800d8d5
 800d864:	0800d8f5 	.word	0x0800d8f5
 800d868:	0800d8f5 	.word	0x0800d8f5
 800d86c:	0800d8f5 	.word	0x0800d8f5
 800d870:	0800d8f5 	.word	0x0800d8f5
 800d874:	0800d8f5 	.word	0x0800d8f5
 800d878:	0800d8f5 	.word	0x0800d8f5
 800d87c:	0800d8f5 	.word	0x0800d8f5
 800d880:	0800d8dd 	.word	0x0800d8dd
 800d884:	0800d8f5 	.word	0x0800d8f5
 800d888:	0800d8f5 	.word	0x0800d8f5
 800d88c:	0800d8f5 	.word	0x0800d8f5
 800d890:	0800d8f5 	.word	0x0800d8f5
 800d894:	0800d8f5 	.word	0x0800d8f5
 800d898:	0800d8f5 	.word	0x0800d8f5
 800d89c:	0800d8f5 	.word	0x0800d8f5
 800d8a0:	0800d8e5 	.word	0x0800d8e5
 800d8a4:	0800d8f5 	.word	0x0800d8f5
 800d8a8:	0800d8f5 	.word	0x0800d8f5
 800d8ac:	0800d8f5 	.word	0x0800d8f5
 800d8b0:	0800d8f5 	.word	0x0800d8f5
 800d8b4:	0800d8f5 	.word	0x0800d8f5
 800d8b8:	0800d8f5 	.word	0x0800d8f5
 800d8bc:	0800d8f5 	.word	0x0800d8f5
 800d8c0:	0800d8ed 	.word	0x0800d8ed
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ca:	e0bc      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d8cc:	2304      	movs	r3, #4
 800d8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8d2:	e0b8      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d8d4:	2308      	movs	r3, #8
 800d8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8da:	e0b4      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d8dc:	2310      	movs	r3, #16
 800d8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8e2:	e0b0      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d8e4:	2320      	movs	r3, #32
 800d8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8ea:	e0ac      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d8ec:	2340      	movs	r3, #64	@ 0x40
 800d8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8f2:	e0a8      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d8f4:	2380      	movs	r3, #128	@ 0x80
 800d8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d8fa:	e0a4      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a8f      	ldr	r2, [pc, #572]	@ (800db40 <UART_SetConfig+0x6a0>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d130      	bne.n	800d968 <UART_SetConfig+0x4c8>
 800d906:	4b8d      	ldr	r3, [pc, #564]	@ (800db3c <UART_SetConfig+0x69c>)
 800d908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d90a:	f003 0307 	and.w	r3, r3, #7
 800d90e:	2b05      	cmp	r3, #5
 800d910:	d826      	bhi.n	800d960 <UART_SetConfig+0x4c0>
 800d912:	a201      	add	r2, pc, #4	@ (adr r2, 800d918 <UART_SetConfig+0x478>)
 800d914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d918:	0800d931 	.word	0x0800d931
 800d91c:	0800d939 	.word	0x0800d939
 800d920:	0800d941 	.word	0x0800d941
 800d924:	0800d949 	.word	0x0800d949
 800d928:	0800d951 	.word	0x0800d951
 800d92c:	0800d959 	.word	0x0800d959
 800d930:	2300      	movs	r3, #0
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d936:	e086      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d938:	2304      	movs	r3, #4
 800d93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d93e:	e082      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d940:	2308      	movs	r3, #8
 800d942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d946:	e07e      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d948:	2310      	movs	r3, #16
 800d94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d94e:	e07a      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d950:	2320      	movs	r3, #32
 800d952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d956:	e076      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d958:	2340      	movs	r3, #64	@ 0x40
 800d95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d95e:	e072      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d960:	2380      	movs	r3, #128	@ 0x80
 800d962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d966:	e06e      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	4a75      	ldr	r2, [pc, #468]	@ (800db44 <UART_SetConfig+0x6a4>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d130      	bne.n	800d9d4 <UART_SetConfig+0x534>
 800d972:	4b72      	ldr	r3, [pc, #456]	@ (800db3c <UART_SetConfig+0x69c>)
 800d974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d976:	f003 0307 	and.w	r3, r3, #7
 800d97a:	2b05      	cmp	r3, #5
 800d97c:	d826      	bhi.n	800d9cc <UART_SetConfig+0x52c>
 800d97e:	a201      	add	r2, pc, #4	@ (adr r2, 800d984 <UART_SetConfig+0x4e4>)
 800d980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d984:	0800d99d 	.word	0x0800d99d
 800d988:	0800d9a5 	.word	0x0800d9a5
 800d98c:	0800d9ad 	.word	0x0800d9ad
 800d990:	0800d9b5 	.word	0x0800d9b5
 800d994:	0800d9bd 	.word	0x0800d9bd
 800d998:	0800d9c5 	.word	0x0800d9c5
 800d99c:	2300      	movs	r3, #0
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9a2:	e050      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d9a4:	2304      	movs	r3, #4
 800d9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9aa:	e04c      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d9ac:	2308      	movs	r3, #8
 800d9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9b2:	e048      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d9b4:	2310      	movs	r3, #16
 800d9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ba:	e044      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d9bc:	2320      	movs	r3, #32
 800d9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9c2:	e040      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d9c4:	2340      	movs	r3, #64	@ 0x40
 800d9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9ca:	e03c      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d9cc:	2380      	movs	r3, #128	@ 0x80
 800d9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d9d2:	e038      	b.n	800da46 <UART_SetConfig+0x5a6>
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a5b      	ldr	r2, [pc, #364]	@ (800db48 <UART_SetConfig+0x6a8>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d130      	bne.n	800da40 <UART_SetConfig+0x5a0>
 800d9de:	4b57      	ldr	r3, [pc, #348]	@ (800db3c <UART_SetConfig+0x69c>)
 800d9e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9e2:	f003 0307 	and.w	r3, r3, #7
 800d9e6:	2b05      	cmp	r3, #5
 800d9e8:	d826      	bhi.n	800da38 <UART_SetConfig+0x598>
 800d9ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d9f0 <UART_SetConfig+0x550>)
 800d9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9f0:	0800da09 	.word	0x0800da09
 800d9f4:	0800da11 	.word	0x0800da11
 800d9f8:	0800da19 	.word	0x0800da19
 800d9fc:	0800da21 	.word	0x0800da21
 800da00:	0800da29 	.word	0x0800da29
 800da04:	0800da31 	.word	0x0800da31
 800da08:	2302      	movs	r3, #2
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da0e:	e01a      	b.n	800da46 <UART_SetConfig+0x5a6>
 800da10:	2304      	movs	r3, #4
 800da12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da16:	e016      	b.n	800da46 <UART_SetConfig+0x5a6>
 800da18:	2308      	movs	r3, #8
 800da1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da1e:	e012      	b.n	800da46 <UART_SetConfig+0x5a6>
 800da20:	2310      	movs	r3, #16
 800da22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da26:	e00e      	b.n	800da46 <UART_SetConfig+0x5a6>
 800da28:	2320      	movs	r3, #32
 800da2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da2e:	e00a      	b.n	800da46 <UART_SetConfig+0x5a6>
 800da30:	2340      	movs	r3, #64	@ 0x40
 800da32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da36:	e006      	b.n	800da46 <UART_SetConfig+0x5a6>
 800da38:	2380      	movs	r3, #128	@ 0x80
 800da3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800da3e:	e002      	b.n	800da46 <UART_SetConfig+0x5a6>
 800da40:	2380      	movs	r3, #128	@ 0x80
 800da42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da46:	697b      	ldr	r3, [r7, #20]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	4a3f      	ldr	r2, [pc, #252]	@ (800db48 <UART_SetConfig+0x6a8>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	f040 80f8 	bne.w	800dc42 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800da52:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800da56:	2b20      	cmp	r3, #32
 800da58:	dc46      	bgt.n	800dae8 <UART_SetConfig+0x648>
 800da5a:	2b02      	cmp	r3, #2
 800da5c:	f2c0 8082 	blt.w	800db64 <UART_SetConfig+0x6c4>
 800da60:	3b02      	subs	r3, #2
 800da62:	2b1e      	cmp	r3, #30
 800da64:	d87e      	bhi.n	800db64 <UART_SetConfig+0x6c4>
 800da66:	a201      	add	r2, pc, #4	@ (adr r2, 800da6c <UART_SetConfig+0x5cc>)
 800da68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da6c:	0800daef 	.word	0x0800daef
 800da70:	0800db65 	.word	0x0800db65
 800da74:	0800daf7 	.word	0x0800daf7
 800da78:	0800db65 	.word	0x0800db65
 800da7c:	0800db65 	.word	0x0800db65
 800da80:	0800db65 	.word	0x0800db65
 800da84:	0800db07 	.word	0x0800db07
 800da88:	0800db65 	.word	0x0800db65
 800da8c:	0800db65 	.word	0x0800db65
 800da90:	0800db65 	.word	0x0800db65
 800da94:	0800db65 	.word	0x0800db65
 800da98:	0800db65 	.word	0x0800db65
 800da9c:	0800db65 	.word	0x0800db65
 800daa0:	0800db65 	.word	0x0800db65
 800daa4:	0800db17 	.word	0x0800db17
 800daa8:	0800db65 	.word	0x0800db65
 800daac:	0800db65 	.word	0x0800db65
 800dab0:	0800db65 	.word	0x0800db65
 800dab4:	0800db65 	.word	0x0800db65
 800dab8:	0800db65 	.word	0x0800db65
 800dabc:	0800db65 	.word	0x0800db65
 800dac0:	0800db65 	.word	0x0800db65
 800dac4:	0800db65 	.word	0x0800db65
 800dac8:	0800db65 	.word	0x0800db65
 800dacc:	0800db65 	.word	0x0800db65
 800dad0:	0800db65 	.word	0x0800db65
 800dad4:	0800db65 	.word	0x0800db65
 800dad8:	0800db65 	.word	0x0800db65
 800dadc:	0800db65 	.word	0x0800db65
 800dae0:	0800db65 	.word	0x0800db65
 800dae4:	0800db57 	.word	0x0800db57
 800dae8:	2b40      	cmp	r3, #64	@ 0x40
 800daea:	d037      	beq.n	800db5c <UART_SetConfig+0x6bc>
 800daec:	e03a      	b.n	800db64 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800daee:	f7fb fb49 	bl	8009184 <HAL_RCCEx_GetD3PCLK1Freq>
 800daf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800daf4:	e03c      	b.n	800db70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800daf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fb fb58 	bl	80091b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db04:	e034      	b.n	800db70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db06:	f107 0318 	add.w	r3, r7, #24
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fb fca4 	bl	8009458 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db14:	e02c      	b.n	800db70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db16:	4b09      	ldr	r3, [pc, #36]	@ (800db3c <UART_SetConfig+0x69c>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f003 0320 	and.w	r3, r3, #32
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d016      	beq.n	800db50 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db22:	4b06      	ldr	r3, [pc, #24]	@ (800db3c <UART_SetConfig+0x69c>)
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	08db      	lsrs	r3, r3, #3
 800db28:	f003 0303 	and.w	r3, r3, #3
 800db2c:	4a07      	ldr	r2, [pc, #28]	@ (800db4c <UART_SetConfig+0x6ac>)
 800db2e:	fa22 f303 	lsr.w	r3, r2, r3
 800db32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db34:	e01c      	b.n	800db70 <UART_SetConfig+0x6d0>
 800db36:	bf00      	nop
 800db38:	40011400 	.word	0x40011400
 800db3c:	58024400 	.word	0x58024400
 800db40:	40007800 	.word	0x40007800
 800db44:	40007c00 	.word	0x40007c00
 800db48:	58000c00 	.word	0x58000c00
 800db4c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800db50:	4b9d      	ldr	r3, [pc, #628]	@ (800ddc8 <UART_SetConfig+0x928>)
 800db52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db54:	e00c      	b.n	800db70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db56:	4b9d      	ldr	r3, [pc, #628]	@ (800ddcc <UART_SetConfig+0x92c>)
 800db58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db5a:	e009      	b.n	800db70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800db60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db62:	e005      	b.n	800db70 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800db64:	2300      	movs	r3, #0
 800db66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800db68:	2301      	movs	r3, #1
 800db6a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800db6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800db70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db72:	2b00      	cmp	r3, #0
 800db74:	f000 81de 	beq.w	800df34 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db7c:	4a94      	ldr	r2, [pc, #592]	@ (800ddd0 <UART_SetConfig+0x930>)
 800db7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db82:	461a      	mov	r2, r3
 800db84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db86:	fbb3 f3f2 	udiv	r3, r3, r2
 800db8a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	685a      	ldr	r2, [r3, #4]
 800db90:	4613      	mov	r3, r2
 800db92:	005b      	lsls	r3, r3, #1
 800db94:	4413      	add	r3, r2
 800db96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db98:	429a      	cmp	r2, r3
 800db9a:	d305      	bcc.n	800dba8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	685b      	ldr	r3, [r3, #4]
 800dba0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dba2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dba4:	429a      	cmp	r2, r3
 800dba6:	d903      	bls.n	800dbb0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dbae:	e1c1      	b.n	800df34 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	60bb      	str	r3, [r7, #8]
 800dbb6:	60fa      	str	r2, [r7, #12]
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbbc:	4a84      	ldr	r2, [pc, #528]	@ (800ddd0 <UART_SetConfig+0x930>)
 800dbbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbc2:	b29b      	uxth	r3, r3
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	603b      	str	r3, [r7, #0]
 800dbc8:	607a      	str	r2, [r7, #4]
 800dbca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dbd2:	f7f2 fbdd 	bl	8000390 <__aeabi_uldivmod>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	460b      	mov	r3, r1
 800dbda:	4610      	mov	r0, r2
 800dbdc:	4619      	mov	r1, r3
 800dbde:	f04f 0200 	mov.w	r2, #0
 800dbe2:	f04f 0300 	mov.w	r3, #0
 800dbe6:	020b      	lsls	r3, r1, #8
 800dbe8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dbec:	0202      	lsls	r2, r0, #8
 800dbee:	6979      	ldr	r1, [r7, #20]
 800dbf0:	6849      	ldr	r1, [r1, #4]
 800dbf2:	0849      	lsrs	r1, r1, #1
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	460c      	mov	r4, r1
 800dbf8:	4605      	mov	r5, r0
 800dbfa:	eb12 0804 	adds.w	r8, r2, r4
 800dbfe:	eb43 0905 	adc.w	r9, r3, r5
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	2200      	movs	r2, #0
 800dc08:	469a      	mov	sl, r3
 800dc0a:	4693      	mov	fp, r2
 800dc0c:	4652      	mov	r2, sl
 800dc0e:	465b      	mov	r3, fp
 800dc10:	4640      	mov	r0, r8
 800dc12:	4649      	mov	r1, r9
 800dc14:	f7f2 fbbc 	bl	8000390 <__aeabi_uldivmod>
 800dc18:	4602      	mov	r2, r0
 800dc1a:	460b      	mov	r3, r1
 800dc1c:	4613      	mov	r3, r2
 800dc1e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dc26:	d308      	bcc.n	800dc3a <UART_SetConfig+0x79a>
 800dc28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc2e:	d204      	bcs.n	800dc3a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc36:	60da      	str	r2, [r3, #12]
 800dc38:	e17c      	b.n	800df34 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800dc40:	e178      	b.n	800df34 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	69db      	ldr	r3, [r3, #28]
 800dc46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc4a:	f040 80c5 	bne.w	800ddd8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dc4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dc52:	2b20      	cmp	r3, #32
 800dc54:	dc48      	bgt.n	800dce8 <UART_SetConfig+0x848>
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	db7b      	blt.n	800dd52 <UART_SetConfig+0x8b2>
 800dc5a:	2b20      	cmp	r3, #32
 800dc5c:	d879      	bhi.n	800dd52 <UART_SetConfig+0x8b2>
 800dc5e:	a201      	add	r2, pc, #4	@ (adr r2, 800dc64 <UART_SetConfig+0x7c4>)
 800dc60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc64:	0800dcef 	.word	0x0800dcef
 800dc68:	0800dcf7 	.word	0x0800dcf7
 800dc6c:	0800dd53 	.word	0x0800dd53
 800dc70:	0800dd53 	.word	0x0800dd53
 800dc74:	0800dcff 	.word	0x0800dcff
 800dc78:	0800dd53 	.word	0x0800dd53
 800dc7c:	0800dd53 	.word	0x0800dd53
 800dc80:	0800dd53 	.word	0x0800dd53
 800dc84:	0800dd0f 	.word	0x0800dd0f
 800dc88:	0800dd53 	.word	0x0800dd53
 800dc8c:	0800dd53 	.word	0x0800dd53
 800dc90:	0800dd53 	.word	0x0800dd53
 800dc94:	0800dd53 	.word	0x0800dd53
 800dc98:	0800dd53 	.word	0x0800dd53
 800dc9c:	0800dd53 	.word	0x0800dd53
 800dca0:	0800dd53 	.word	0x0800dd53
 800dca4:	0800dd1f 	.word	0x0800dd1f
 800dca8:	0800dd53 	.word	0x0800dd53
 800dcac:	0800dd53 	.word	0x0800dd53
 800dcb0:	0800dd53 	.word	0x0800dd53
 800dcb4:	0800dd53 	.word	0x0800dd53
 800dcb8:	0800dd53 	.word	0x0800dd53
 800dcbc:	0800dd53 	.word	0x0800dd53
 800dcc0:	0800dd53 	.word	0x0800dd53
 800dcc4:	0800dd53 	.word	0x0800dd53
 800dcc8:	0800dd53 	.word	0x0800dd53
 800dccc:	0800dd53 	.word	0x0800dd53
 800dcd0:	0800dd53 	.word	0x0800dd53
 800dcd4:	0800dd53 	.word	0x0800dd53
 800dcd8:	0800dd53 	.word	0x0800dd53
 800dcdc:	0800dd53 	.word	0x0800dd53
 800dce0:	0800dd53 	.word	0x0800dd53
 800dce4:	0800dd45 	.word	0x0800dd45
 800dce8:	2b40      	cmp	r3, #64	@ 0x40
 800dcea:	d02e      	beq.n	800dd4a <UART_SetConfig+0x8aa>
 800dcec:	e031      	b.n	800dd52 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dcee:	f7f9 ffd1 	bl	8007c94 <HAL_RCC_GetPCLK1Freq>
 800dcf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dcf4:	e033      	b.n	800dd5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dcf6:	f7f9 ffe3 	bl	8007cc0 <HAL_RCC_GetPCLK2Freq>
 800dcfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dcfc:	e02f      	b.n	800dd5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7fb fa54 	bl	80091b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd0c:	e027      	b.n	800dd5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd0e:	f107 0318 	add.w	r3, r7, #24
 800dd12:	4618      	mov	r0, r3
 800dd14:	f7fb fba0 	bl	8009458 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd1c:	e01f      	b.n	800dd5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd1e:	4b2d      	ldr	r3, [pc, #180]	@ (800ddd4 <UART_SetConfig+0x934>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f003 0320 	and.w	r3, r3, #32
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d009      	beq.n	800dd3e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd2a:	4b2a      	ldr	r3, [pc, #168]	@ (800ddd4 <UART_SetConfig+0x934>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	08db      	lsrs	r3, r3, #3
 800dd30:	f003 0303 	and.w	r3, r3, #3
 800dd34:	4a24      	ldr	r2, [pc, #144]	@ (800ddc8 <UART_SetConfig+0x928>)
 800dd36:	fa22 f303 	lsr.w	r3, r2, r3
 800dd3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd3c:	e00f      	b.n	800dd5e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dd3e:	4b22      	ldr	r3, [pc, #136]	@ (800ddc8 <UART_SetConfig+0x928>)
 800dd40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd42:	e00c      	b.n	800dd5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd44:	4b21      	ldr	r3, [pc, #132]	@ (800ddcc <UART_SetConfig+0x92c>)
 800dd46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd48:	e009      	b.n	800dd5e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd50:	e005      	b.n	800dd5e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dd52:	2300      	movs	r3, #0
 800dd54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dd56:	2301      	movs	r3, #1
 800dd58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dd5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	f000 80e7 	beq.w	800df34 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd6a:	4a19      	ldr	r2, [pc, #100]	@ (800ddd0 <UART_SetConfig+0x930>)
 800dd6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd70:	461a      	mov	r2, r3
 800dd72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd74:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd78:	005a      	lsls	r2, r3, #1
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	085b      	lsrs	r3, r3, #1
 800dd80:	441a      	add	r2, r3
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd8e:	2b0f      	cmp	r3, #15
 800dd90:	d916      	bls.n	800ddc0 <UART_SetConfig+0x920>
 800dd92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd98:	d212      	bcs.n	800ddc0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dd9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	f023 030f 	bic.w	r3, r3, #15
 800dda2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dda6:	085b      	lsrs	r3, r3, #1
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	f003 0307 	and.w	r3, r3, #7
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ddbc:	60da      	str	r2, [r3, #12]
 800ddbe:	e0b9      	b.n	800df34 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ddc6:	e0b5      	b.n	800df34 <UART_SetConfig+0xa94>
 800ddc8:	03d09000 	.word	0x03d09000
 800ddcc:	003d0900 	.word	0x003d0900
 800ddd0:	08023384 	.word	0x08023384
 800ddd4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ddd8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800dddc:	2b20      	cmp	r3, #32
 800ddde:	dc49      	bgt.n	800de74 <UART_SetConfig+0x9d4>
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	db7c      	blt.n	800dede <UART_SetConfig+0xa3e>
 800dde4:	2b20      	cmp	r3, #32
 800dde6:	d87a      	bhi.n	800dede <UART_SetConfig+0xa3e>
 800dde8:	a201      	add	r2, pc, #4	@ (adr r2, 800ddf0 <UART_SetConfig+0x950>)
 800ddea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddee:	bf00      	nop
 800ddf0:	0800de7b 	.word	0x0800de7b
 800ddf4:	0800de83 	.word	0x0800de83
 800ddf8:	0800dedf 	.word	0x0800dedf
 800ddfc:	0800dedf 	.word	0x0800dedf
 800de00:	0800de8b 	.word	0x0800de8b
 800de04:	0800dedf 	.word	0x0800dedf
 800de08:	0800dedf 	.word	0x0800dedf
 800de0c:	0800dedf 	.word	0x0800dedf
 800de10:	0800de9b 	.word	0x0800de9b
 800de14:	0800dedf 	.word	0x0800dedf
 800de18:	0800dedf 	.word	0x0800dedf
 800de1c:	0800dedf 	.word	0x0800dedf
 800de20:	0800dedf 	.word	0x0800dedf
 800de24:	0800dedf 	.word	0x0800dedf
 800de28:	0800dedf 	.word	0x0800dedf
 800de2c:	0800dedf 	.word	0x0800dedf
 800de30:	0800deab 	.word	0x0800deab
 800de34:	0800dedf 	.word	0x0800dedf
 800de38:	0800dedf 	.word	0x0800dedf
 800de3c:	0800dedf 	.word	0x0800dedf
 800de40:	0800dedf 	.word	0x0800dedf
 800de44:	0800dedf 	.word	0x0800dedf
 800de48:	0800dedf 	.word	0x0800dedf
 800de4c:	0800dedf 	.word	0x0800dedf
 800de50:	0800dedf 	.word	0x0800dedf
 800de54:	0800dedf 	.word	0x0800dedf
 800de58:	0800dedf 	.word	0x0800dedf
 800de5c:	0800dedf 	.word	0x0800dedf
 800de60:	0800dedf 	.word	0x0800dedf
 800de64:	0800dedf 	.word	0x0800dedf
 800de68:	0800dedf 	.word	0x0800dedf
 800de6c:	0800dedf 	.word	0x0800dedf
 800de70:	0800ded1 	.word	0x0800ded1
 800de74:	2b40      	cmp	r3, #64	@ 0x40
 800de76:	d02e      	beq.n	800ded6 <UART_SetConfig+0xa36>
 800de78:	e031      	b.n	800dede <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de7a:	f7f9 ff0b 	bl	8007c94 <HAL_RCC_GetPCLK1Freq>
 800de7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800de80:	e033      	b.n	800deea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de82:	f7f9 ff1d 	bl	8007cc0 <HAL_RCC_GetPCLK2Freq>
 800de86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800de88:	e02f      	b.n	800deea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fb f98e 	bl	80091b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de98:	e027      	b.n	800deea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de9a:	f107 0318 	add.w	r3, r7, #24
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fb fada 	bl	8009458 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dea4:	69fb      	ldr	r3, [r7, #28]
 800dea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dea8:	e01f      	b.n	800deea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800deaa:	4b2d      	ldr	r3, [pc, #180]	@ (800df60 <UART_SetConfig+0xac0>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f003 0320 	and.w	r3, r3, #32
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d009      	beq.n	800deca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800deb6:	4b2a      	ldr	r3, [pc, #168]	@ (800df60 <UART_SetConfig+0xac0>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	08db      	lsrs	r3, r3, #3
 800debc:	f003 0303 	and.w	r3, r3, #3
 800dec0:	4a28      	ldr	r2, [pc, #160]	@ (800df64 <UART_SetConfig+0xac4>)
 800dec2:	fa22 f303 	lsr.w	r3, r2, r3
 800dec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dec8:	e00f      	b.n	800deea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800deca:	4b26      	ldr	r3, [pc, #152]	@ (800df64 <UART_SetConfig+0xac4>)
 800decc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dece:	e00c      	b.n	800deea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ded0:	4b25      	ldr	r3, [pc, #148]	@ (800df68 <UART_SetConfig+0xac8>)
 800ded2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ded4:	e009      	b.n	800deea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ded6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800deda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dedc:	e005      	b.n	800deea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800dede:	2300      	movs	r3, #0
 800dee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dee2:	2301      	movs	r3, #1
 800dee4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dee8:	bf00      	nop
    }

    if (pclk != 0U)
 800deea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deec:	2b00      	cmp	r3, #0
 800deee:	d021      	beq.n	800df34 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800def4:	4a1d      	ldr	r2, [pc, #116]	@ (800df6c <UART_SetConfig+0xacc>)
 800def6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800defa:	461a      	mov	r2, r3
 800defc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800defe:	fbb3 f2f2 	udiv	r2, r3, r2
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	085b      	lsrs	r3, r3, #1
 800df08:	441a      	add	r2, r3
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800df12:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df16:	2b0f      	cmp	r3, #15
 800df18:	d909      	bls.n	800df2e <UART_SetConfig+0xa8e>
 800df1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df20:	d205      	bcs.n	800df2e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df24:	b29a      	uxth	r2, r3
 800df26:	697b      	ldr	r3, [r7, #20]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	60da      	str	r2, [r3, #12]
 800df2c:	e002      	b.n	800df34 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800df2e:	2301      	movs	r3, #1
 800df30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	2201      	movs	r2, #1
 800df38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	2201      	movs	r2, #1
 800df40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df44:	697b      	ldr	r3, [r7, #20]
 800df46:	2200      	movs	r2, #0
 800df48:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	2200      	movs	r2, #0
 800df4e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800df50:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800df54:	4618      	mov	r0, r3
 800df56:	3748      	adds	r7, #72	@ 0x48
 800df58:	46bd      	mov	sp, r7
 800df5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df5e:	bf00      	nop
 800df60:	58024400 	.word	0x58024400
 800df64:	03d09000 	.word	0x03d09000
 800df68:	003d0900 	.word	0x003d0900
 800df6c:	08023384 	.word	0x08023384

0800df70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df7c:	f003 0301 	and.w	r3, r3, #1
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00a      	beq.n	800df9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	685b      	ldr	r3, [r3, #4]
 800df8a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	430a      	orrs	r2, r1
 800df98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df9e:	f003 0302 	and.w	r3, r3, #2
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00a      	beq.n	800dfbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	430a      	orrs	r2, r1
 800dfba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfc0:	f003 0304 	and.w	r3, r3, #4
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d00a      	beq.n	800dfde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	430a      	orrs	r2, r1
 800dfdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfe2:	f003 0308 	and.w	r3, r3, #8
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d00a      	beq.n	800e000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	430a      	orrs	r2, r1
 800dffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e004:	f003 0310 	and.w	r3, r3, #16
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d00a      	beq.n	800e022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	430a      	orrs	r2, r1
 800e020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e026:	f003 0320 	and.w	r3, r3, #32
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00a      	beq.n	800e044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	430a      	orrs	r2, r1
 800e042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d01a      	beq.n	800e086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	430a      	orrs	r2, r1
 800e064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e06a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e06e:	d10a      	bne.n	800e086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	685b      	ldr	r3, [r3, #4]
 800e076:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	430a      	orrs	r2, r1
 800e084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e08a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00a      	beq.n	800e0a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	430a      	orrs	r2, r1
 800e0a6:	605a      	str	r2, [r3, #4]
  }
}
 800e0a8:	bf00      	nop
 800e0aa:	370c      	adds	r7, #12
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b098      	sub	sp, #96	@ 0x60
 800e0b8:	af02      	add	r7, sp, #8
 800e0ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e0c4:	f7f4 f918 	bl	80022f8 <HAL_GetTick>
 800e0c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f003 0308 	and.w	r3, r3, #8
 800e0d4:	2b08      	cmp	r3, #8
 800e0d6:	d12f      	bne.n	800e138 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e0d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e0dc:	9300      	str	r3, [sp, #0]
 800e0de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 f88e 	bl	800e208 <UART_WaitOnFlagUntilTimeout>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d022      	beq.n	800e138 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0fa:	e853 3f00 	ldrex	r3, [r3]
 800e0fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e106:	653b      	str	r3, [r7, #80]	@ 0x50
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	461a      	mov	r2, r3
 800e10e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e110:	647b      	str	r3, [r7, #68]	@ 0x44
 800e112:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e114:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e118:	e841 2300 	strex	r3, r2, [r1]
 800e11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e11e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e120:	2b00      	cmp	r3, #0
 800e122:	d1e6      	bne.n	800e0f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2220      	movs	r2, #32
 800e128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2200      	movs	r2, #0
 800e130:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e134:	2303      	movs	r3, #3
 800e136:	e063      	b.n	800e200 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f003 0304 	and.w	r3, r3, #4
 800e142:	2b04      	cmp	r3, #4
 800e144:	d149      	bne.n	800e1da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e146:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e14a:	9300      	str	r3, [sp, #0]
 800e14c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e14e:	2200      	movs	r2, #0
 800e150:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 f857 	bl	800e208 <UART_WaitOnFlagUntilTimeout>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d03c      	beq.n	800e1da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e168:	e853 3f00 	ldrex	r3, [r3]
 800e16c:	623b      	str	r3, [r7, #32]
   return(result);
 800e16e:	6a3b      	ldr	r3, [r7, #32]
 800e170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	461a      	mov	r2, r3
 800e17c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e17e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e180:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e182:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e186:	e841 2300 	strex	r3, r2, [r1]
 800e18a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d1e6      	bne.n	800e160 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	3308      	adds	r3, #8
 800e198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	e853 3f00 	ldrex	r3, [r3]
 800e1a0:	60fb      	str	r3, [r7, #12]
   return(result);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f023 0301 	bic.w	r3, r3, #1
 800e1a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	3308      	adds	r3, #8
 800e1b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1b2:	61fa      	str	r2, [r7, #28]
 800e1b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1b6:	69b9      	ldr	r1, [r7, #24]
 800e1b8:	69fa      	ldr	r2, [r7, #28]
 800e1ba:	e841 2300 	strex	r3, r2, [r1]
 800e1be:	617b      	str	r3, [r7, #20]
   return(result);
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d1e5      	bne.n	800e192 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2220      	movs	r2, #32
 800e1ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e1d6:	2303      	movs	r3, #3
 800e1d8:	e012      	b.n	800e200 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2220      	movs	r2, #32
 800e1de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2220      	movs	r2, #32
 800e1e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e1fe:	2300      	movs	r3, #0
}
 800e200:	4618      	mov	r0, r3
 800e202:	3758      	adds	r7, #88	@ 0x58
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b084      	sub	sp, #16
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	603b      	str	r3, [r7, #0]
 800e214:	4613      	mov	r3, r2
 800e216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e218:	e049      	b.n	800e2ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e220:	d045      	beq.n	800e2ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e222:	f7f4 f869 	bl	80022f8 <HAL_GetTick>
 800e226:	4602      	mov	r2, r0
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	1ad3      	subs	r3, r2, r3
 800e22c:	69ba      	ldr	r2, [r7, #24]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d302      	bcc.n	800e238 <UART_WaitOnFlagUntilTimeout+0x30>
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d101      	bne.n	800e23c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e238:	2303      	movs	r3, #3
 800e23a:	e048      	b.n	800e2ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f003 0304 	and.w	r3, r3, #4
 800e246:	2b00      	cmp	r3, #0
 800e248:	d031      	beq.n	800e2ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	69db      	ldr	r3, [r3, #28]
 800e250:	f003 0308 	and.w	r3, r3, #8
 800e254:	2b08      	cmp	r3, #8
 800e256:	d110      	bne.n	800e27a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2208      	movs	r2, #8
 800e25e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f000 fa43 	bl	800e6ec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2208      	movs	r2, #8
 800e26a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2200      	movs	r2, #0
 800e272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 800e276:	2301      	movs	r3, #1
 800e278:	e029      	b.n	800e2ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	69db      	ldr	r3, [r3, #28]
 800e280:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e288:	d111      	bne.n	800e2ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e292:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e294:	68f8      	ldr	r0, [r7, #12]
 800e296:	f000 fa29 	bl	800e6ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2220      	movs	r2, #32
 800e29e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e2aa:	2303      	movs	r3, #3
 800e2ac:	e00f      	b.n	800e2ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	69da      	ldr	r2, [r3, #28]
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	4013      	ands	r3, r2
 800e2b8:	68ba      	ldr	r2, [r7, #8]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	bf0c      	ite	eq
 800e2be:	2301      	moveq	r3, #1
 800e2c0:	2300      	movne	r3, #0
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	79fb      	ldrb	r3, [r7, #7]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d0a6      	beq.n	800e21a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e2cc:	2300      	movs	r3, #0
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3710      	adds	r7, #16
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
	...

0800e2d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2d8:	b480      	push	{r7}
 800e2da:	b0a3      	sub	sp, #140	@ 0x8c
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	60f8      	str	r0, [r7, #12]
 800e2e0:	60b9      	str	r1, [r7, #8]
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	68ba      	ldr	r2, [r7, #8]
 800e2ea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	88fa      	ldrh	r2, [r7, #6]
 800e2f0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	88fa      	ldrh	r2, [r7, #6]
 800e2f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2200      	movs	r2, #0
 800e300:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	689b      	ldr	r3, [r3, #8]
 800e306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e30a:	d10e      	bne.n	800e32a <UART_Start_Receive_IT+0x52>
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	691b      	ldr	r3, [r3, #16]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d105      	bne.n	800e320 <UART_Start_Receive_IT+0x48>
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800e31a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e31e:	e02d      	b.n	800e37c <UART_Start_Receive_IT+0xa4>
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	22ff      	movs	r2, #255	@ 0xff
 800e324:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e328:	e028      	b.n	800e37c <UART_Start_Receive_IT+0xa4>
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	689b      	ldr	r3, [r3, #8]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10d      	bne.n	800e34e <UART_Start_Receive_IT+0x76>
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	691b      	ldr	r3, [r3, #16]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d104      	bne.n	800e344 <UART_Start_Receive_IT+0x6c>
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	22ff      	movs	r2, #255	@ 0xff
 800e33e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e342:	e01b      	b.n	800e37c <UART_Start_Receive_IT+0xa4>
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	227f      	movs	r2, #127	@ 0x7f
 800e348:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e34c:	e016      	b.n	800e37c <UART_Start_Receive_IT+0xa4>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e356:	d10d      	bne.n	800e374 <UART_Start_Receive_IT+0x9c>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	691b      	ldr	r3, [r3, #16]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d104      	bne.n	800e36a <UART_Start_Receive_IT+0x92>
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	227f      	movs	r2, #127	@ 0x7f
 800e364:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e368:	e008      	b.n	800e37c <UART_Start_Receive_IT+0xa4>
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	223f      	movs	r2, #63	@ 0x3f
 800e36e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800e372:	e003      	b.n	800e37c <UART_Start_Receive_IT+0xa4>
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	2200      	movs	r2, #0
 800e378:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2200      	movs	r2, #0
 800e380:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2222      	movs	r2, #34	@ 0x22
 800e388:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	3308      	adds	r3, #8
 800e392:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e396:	e853 3f00 	ldrex	r3, [r3]
 800e39a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800e39c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e39e:	f043 0301 	orr.w	r3, r3, #1
 800e3a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	3308      	adds	r3, #8
 800e3ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e3b0:	673a      	str	r2, [r7, #112]	@ 0x70
 800e3b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800e3b6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e3b8:	e841 2300 	strex	r3, r2, [r1]
 800e3bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800e3be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d1e3      	bne.n	800e38c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e3cc:	d14f      	bne.n	800e46e <UART_Start_Receive_IT+0x196>
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800e3d4:	88fa      	ldrh	r2, [r7, #6]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d349      	bcc.n	800e46e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	689b      	ldr	r3, [r3, #8]
 800e3de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e3e2:	d107      	bne.n	800e3f4 <UART_Start_Receive_IT+0x11c>
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	691b      	ldr	r3, [r3, #16]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d103      	bne.n	800e3f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	4a47      	ldr	r2, [pc, #284]	@ (800e50c <UART_Start_Receive_IT+0x234>)
 800e3f0:	675a      	str	r2, [r3, #116]	@ 0x74
 800e3f2:	e002      	b.n	800e3fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	4a46      	ldr	r2, [pc, #280]	@ (800e510 <UART_Start_Receive_IT+0x238>)
 800e3f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	691b      	ldr	r3, [r3, #16]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d01a      	beq.n	800e438 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e40a:	e853 3f00 	ldrex	r3, [r3]
 800e40e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800e410:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e416:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	461a      	mov	r2, r3
 800e420:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e424:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e426:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e428:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e42a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e42c:	e841 2300 	strex	r3, r2, [r1]
 800e430:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800e432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e434:	2b00      	cmp	r3, #0
 800e436:	d1e4      	bne.n	800e402 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	3308      	adds	r3, #8
 800e43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e440:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e442:	e853 3f00 	ldrex	r3, [r3]
 800e446:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e44a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e44e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	3308      	adds	r3, #8
 800e456:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e458:	64ba      	str	r2, [r7, #72]	@ 0x48
 800e45a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e45c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e45e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e460:	e841 2300 	strex	r3, r2, [r1]
 800e464:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d1e5      	bne.n	800e438 <UART_Start_Receive_IT+0x160>
 800e46c:	e046      	b.n	800e4fc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	689b      	ldr	r3, [r3, #8]
 800e472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e476:	d107      	bne.n	800e488 <UART_Start_Receive_IT+0x1b0>
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	691b      	ldr	r3, [r3, #16]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d103      	bne.n	800e488 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	4a24      	ldr	r2, [pc, #144]	@ (800e514 <UART_Start_Receive_IT+0x23c>)
 800e484:	675a      	str	r2, [r3, #116]	@ 0x74
 800e486:	e002      	b.n	800e48e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	4a23      	ldr	r2, [pc, #140]	@ (800e518 <UART_Start_Receive_IT+0x240>)
 800e48c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	691b      	ldr	r3, [r3, #16]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d019      	beq.n	800e4ca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e49e:	e853 3f00 	ldrex	r3, [r3]
 800e4a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4a6:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800e4aa:	677b      	str	r3, [r7, #116]	@ 0x74
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	461a      	mov	r2, r3
 800e4b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e4b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e4b6:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e4ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4bc:	e841 2300 	strex	r3, r2, [r1]
 800e4c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d1e6      	bne.n	800e496 <UART_Start_Receive_IT+0x1be>
 800e4c8:	e018      	b.n	800e4fc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	e853 3f00 	ldrex	r3, [r3]
 800e4d6:	613b      	str	r3, [r7, #16]
   return(result);
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	f043 0320 	orr.w	r3, r3, #32
 800e4de:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e4e8:	623b      	str	r3, [r7, #32]
 800e4ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ec:	69f9      	ldr	r1, [r7, #28]
 800e4ee:	6a3a      	ldr	r2, [r7, #32]
 800e4f0:	e841 2300 	strex	r3, r2, [r1]
 800e4f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4f6:	69bb      	ldr	r3, [r7, #24]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d1e6      	bne.n	800e4ca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800e4fc:	2300      	movs	r3, #0
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	378c      	adds	r7, #140	@ 0x8c
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	0800f575 	.word	0x0800f575
 800e510:	0800f209 	.word	0x0800f209
 800e514:	0800f049 	.word	0x0800f049
 800e518:	0800ee89 	.word	0x0800ee89

0800e51c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b096      	sub	sp, #88	@ 0x58
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	60b9      	str	r1, [r7, #8]
 800e526:	4613      	mov	r3, r2
 800e528:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	68ba      	ldr	r2, [r7, #8]
 800e52e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	88fa      	ldrh	r2, [r7, #6]
 800e534:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2222      	movs	r2, #34	@ 0x22
 800e544:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d02d      	beq.n	800e5ae <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e558:	4a40      	ldr	r2, [pc, #256]	@ (800e65c <UART_Start_Receive_DMA+0x140>)
 800e55a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e562:	4a3f      	ldr	r2, [pc, #252]	@ (800e660 <UART_Start_Receive_DMA+0x144>)
 800e564:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e56c:	4a3d      	ldr	r2, [pc, #244]	@ (800e664 <UART_Start_Receive_DMA+0x148>)
 800e56e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e576:	2200      	movs	r2, #0
 800e578:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	3324      	adds	r3, #36	@ 0x24
 800e586:	4619      	mov	r1, r3
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e58c:	461a      	mov	r2, r3
 800e58e:	88fb      	ldrh	r3, [r7, #6]
 800e590:	f7f4 fb2a 	bl	8002be8 <HAL_DMA_Start_IT>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d009      	beq.n	800e5ae <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2210      	movs	r2, #16
 800e59e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2220      	movs	r2, #32
 800e5a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	e051      	b.n	800e652 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	691b      	ldr	r3, [r3, #16]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d018      	beq.n	800e5e8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5be:	e853 3f00 	ldrex	r3, [r3]
 800e5c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e5ca:	657b      	str	r3, [r7, #84]	@ 0x54
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e5d6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e5da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e5dc:	e841 2300 	strex	r3, r2, [r1]
 800e5e0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e5e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1e6      	bne.n	800e5b6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5f2:	e853 3f00 	ldrex	r3, [r3]
 800e5f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5fa:	f043 0301 	orr.w	r3, r3, #1
 800e5fe:	653b      	str	r3, [r7, #80]	@ 0x50
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	3308      	adds	r3, #8
 800e606:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e608:	637a      	str	r2, [r7, #52]	@ 0x34
 800e60a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e60c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e60e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e610:	e841 2300 	strex	r3, r2, [r1]
 800e614:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d1e5      	bne.n	800e5e8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	3308      	adds	r3, #8
 800e622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e624:	697b      	ldr	r3, [r7, #20]
 800e626:	e853 3f00 	ldrex	r3, [r3]
 800e62a:	613b      	str	r3, [r7, #16]
   return(result);
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	3308      	adds	r3, #8
 800e63a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e63c:	623a      	str	r2, [r7, #32]
 800e63e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e640:	69f9      	ldr	r1, [r7, #28]
 800e642:	6a3a      	ldr	r2, [r7, #32]
 800e644:	e841 2300 	strex	r3, r2, [r1]
 800e648:	61bb      	str	r3, [r7, #24]
   return(result);
 800e64a:	69bb      	ldr	r3, [r7, #24]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d1e5      	bne.n	800e61c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e650:	2300      	movs	r3, #0
}
 800e652:	4618      	mov	r0, r3
 800e654:	3758      	adds	r7, #88	@ 0x58
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	0800e873 	.word	0x0800e873
 800e660:	0800e9a3 	.word	0x0800e9a3
 800e664:	0800e9e9 	.word	0x0800e9e9

0800e668 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e668:	b480      	push	{r7}
 800e66a:	b08f      	sub	sp, #60	@ 0x3c
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e676:	6a3b      	ldr	r3, [r7, #32]
 800e678:	e853 3f00 	ldrex	r3, [r3]
 800e67c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e684:	637b      	str	r3, [r7, #52]	@ 0x34
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	461a      	mov	r2, r3
 800e68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e68e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e690:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e692:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e694:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e696:	e841 2300 	strex	r3, r2, [r1]
 800e69a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1e6      	bne.n	800e670 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	3308      	adds	r3, #8
 800e6a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	e853 3f00 	ldrex	r3, [r3]
 800e6b0:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e6b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	3308      	adds	r3, #8
 800e6c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e6c2:	61ba      	str	r2, [r7, #24]
 800e6c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c6:	6979      	ldr	r1, [r7, #20]
 800e6c8:	69ba      	ldr	r2, [r7, #24]
 800e6ca:	e841 2300 	strex	r3, r2, [r1]
 800e6ce:	613b      	str	r3, [r7, #16]
   return(result);
 800e6d0:	693b      	ldr	r3, [r7, #16]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d1e5      	bne.n	800e6a2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2220      	movs	r2, #32
 800e6da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e6de:	bf00      	nop
 800e6e0:	373c      	adds	r7, #60	@ 0x3c
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e8:	4770      	bx	lr
	...

0800e6ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b095      	sub	sp, #84	@ 0x54
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6fc:	e853 3f00 	ldrex	r3, [r3]
 800e700:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e704:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e708:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	461a      	mov	r2, r3
 800e710:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e712:	643b      	str	r3, [r7, #64]	@ 0x40
 800e714:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e716:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e718:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e71a:	e841 2300 	strex	r3, r2, [r1]
 800e71e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e722:	2b00      	cmp	r3, #0
 800e724:	d1e6      	bne.n	800e6f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	3308      	adds	r3, #8
 800e72c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e72e:	6a3b      	ldr	r3, [r7, #32]
 800e730:	e853 3f00 	ldrex	r3, [r3]
 800e734:	61fb      	str	r3, [r7, #28]
   return(result);
 800e736:	69fa      	ldr	r2, [r7, #28]
 800e738:	4b1e      	ldr	r3, [pc, #120]	@ (800e7b4 <UART_EndRxTransfer+0xc8>)
 800e73a:	4013      	ands	r3, r2
 800e73c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	3308      	adds	r3, #8
 800e744:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e748:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e74a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e74c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e74e:	e841 2300 	strex	r3, r2, [r1]
 800e752:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e756:	2b00      	cmp	r3, #0
 800e758:	d1e5      	bne.n	800e726 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d118      	bne.n	800e794 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	e853 3f00 	ldrex	r3, [r3]
 800e76e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	f023 0310 	bic.w	r3, r3, #16
 800e776:	647b      	str	r3, [r7, #68]	@ 0x44
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	461a      	mov	r2, r3
 800e77e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e780:	61bb      	str	r3, [r7, #24]
 800e782:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e784:	6979      	ldr	r1, [r7, #20]
 800e786:	69ba      	ldr	r2, [r7, #24]
 800e788:	e841 2300 	strex	r3, r2, [r1]
 800e78c:	613b      	str	r3, [r7, #16]
   return(result);
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d1e6      	bne.n	800e762 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2220      	movs	r2, #32
 800e798:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e7a8:	bf00      	nop
 800e7aa:	3754      	adds	r7, #84	@ 0x54
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b2:	4770      	bx	lr
 800e7b4:	effffffe 	.word	0xeffffffe

0800e7b8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b090      	sub	sp, #64	@ 0x40
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	69db      	ldr	r3, [r3, #28]
 800e7ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7ce:	d037      	beq.n	800e840 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e7d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e7d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	3308      	adds	r3, #8
 800e7de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e2:	e853 3f00 	ldrex	r3, [r3]
 800e7e6:	623b      	str	r3, [r7, #32]
   return(result);
 800e7e8:	6a3b      	ldr	r3, [r7, #32]
 800e7ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e7ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e7f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	3308      	adds	r3, #8
 800e7f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e7f8:	633a      	str	r2, [r7, #48]	@ 0x30
 800e7fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e7fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e800:	e841 2300 	strex	r3, r2, [r1]
 800e804:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d1e5      	bne.n	800e7d8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e80c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	e853 3f00 	ldrex	r3, [r3]
 800e818:	60fb      	str	r3, [r7, #12]
   return(result);
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e820:	637b      	str	r3, [r7, #52]	@ 0x34
 800e822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	461a      	mov	r2, r3
 800e828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e82a:	61fb      	str	r3, [r7, #28]
 800e82c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e82e:	69b9      	ldr	r1, [r7, #24]
 800e830:	69fa      	ldr	r2, [r7, #28]
 800e832:	e841 2300 	strex	r3, r2, [r1]
 800e836:	617b      	str	r3, [r7, #20]
   return(result);
 800e838:	697b      	ldr	r3, [r7, #20]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d1e6      	bne.n	800e80c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e83e:	e004      	b.n	800e84a <UART_DMATransmitCplt+0x92>
    huart->TxCpltCallback(huart);
 800e840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e846:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e848:	4798      	blx	r3
}
 800e84a:	bf00      	nop
 800e84c:	3740      	adds	r7, #64	@ 0x40
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}

0800e852 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e852:	b580      	push	{r7, lr}
 800e854:	b084      	sub	sp, #16
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e85e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e86a:	bf00      	nop
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b09c      	sub	sp, #112	@ 0x70
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e87e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	69db      	ldr	r3, [r3, #28]
 800e884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e888:	d071      	beq.n	800e96e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e88a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e88c:	2200      	movs	r2, #0
 800e88e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e89a:	e853 3f00 	ldrex	r3, [r3]
 800e89e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e8a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e8a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e8a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e8a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e8b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e8b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e8b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e8b8:	e841 2300 	strex	r3, r2, [r1]
 800e8bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e8be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d1e6      	bne.n	800e892 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	3308      	adds	r3, #8
 800e8ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ce:	e853 3f00 	ldrex	r3, [r3]
 800e8d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e8d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8d6:	f023 0301 	bic.w	r3, r3, #1
 800e8da:	667b      	str	r3, [r7, #100]	@ 0x64
 800e8dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	3308      	adds	r3, #8
 800e8e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e8e4:	647a      	str	r2, [r7, #68]	@ 0x44
 800e8e6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e8ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e8ec:	e841 2300 	strex	r3, r2, [r1]
 800e8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e8f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1e5      	bne.n	800e8c4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	3308      	adds	r3, #8
 800e8fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e902:	e853 3f00 	ldrex	r3, [r3]
 800e906:	623b      	str	r3, [r7, #32]
   return(result);
 800e908:	6a3b      	ldr	r3, [r7, #32]
 800e90a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e90e:	663b      	str	r3, [r7, #96]	@ 0x60
 800e910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	3308      	adds	r3, #8
 800e916:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e918:	633a      	str	r2, [r7, #48]	@ 0x30
 800e91a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e91c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e91e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e920:	e841 2300 	strex	r3, r2, [r1]
 800e924:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d1e5      	bne.n	800e8f8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e92c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e92e:	2220      	movs	r2, #32
 800e930:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e934:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d118      	bne.n	800e96e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e93c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	e853 3f00 	ldrex	r3, [r3]
 800e948:	60fb      	str	r3, [r7, #12]
   return(result);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f023 0310 	bic.w	r3, r3, #16
 800e950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	461a      	mov	r2, r3
 800e958:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e95a:	61fb      	str	r3, [r7, #28]
 800e95c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95e:	69b9      	ldr	r1, [r7, #24]
 800e960:	69fa      	ldr	r2, [r7, #28]
 800e962:	e841 2300 	strex	r3, r2, [r1]
 800e966:	617b      	str	r3, [r7, #20]
   return(result);
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d1e6      	bne.n	800e93c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e96e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e970:	2200      	movs	r2, #0
 800e972:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e976:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e978:	2b01      	cmp	r3, #1
 800e97a:	d109      	bne.n	800e990 <UART_DMAReceiveCplt+0x11e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800e97c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e97e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e982:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e984:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e988:	4611      	mov	r1, r2
 800e98a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e98c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e98e:	e004      	b.n	800e99a <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800e990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e992:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e996:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e998:	4798      	blx	r3
}
 800e99a:	bf00      	nop
 800e99c:	3770      	adds	r7, #112	@ 0x70
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b084      	sub	sp, #16
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9ae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e9ba:	2b01      	cmp	r3, #1
 800e9bc:	d10b      	bne.n	800e9d6 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e9ca:	0852      	lsrs	r2, r2, #1
 800e9cc:	b292      	uxth	r2, r2
 800e9ce:	4611      	mov	r1, r2
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e9d4:	e004      	b.n	800e9e0 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e9dc:	68f8      	ldr	r0, [r7, #12]
 800e9de:	4798      	blx	r3
}
 800e9e0:	bf00      	nop
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b086      	sub	sp, #24
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e9fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ea04:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	689b      	ldr	r3, [r3, #8]
 800ea0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea10:	2b80      	cmp	r3, #128	@ 0x80
 800ea12:	d109      	bne.n	800ea28 <UART_DMAError+0x40>
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	2b21      	cmp	r3, #33	@ 0x21
 800ea18:	d106      	bne.n	800ea28 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ea1a:	697b      	ldr	r3, [r7, #20]
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ea22:	6978      	ldr	r0, [r7, #20]
 800ea24:	f7ff fe20 	bl	800e668 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	689b      	ldr	r3, [r3, #8]
 800ea2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea32:	2b40      	cmp	r3, #64	@ 0x40
 800ea34:	d109      	bne.n	800ea4a <UART_DMAError+0x62>
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	2b22      	cmp	r3, #34	@ 0x22
 800ea3a:	d106      	bne.n	800ea4a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ea44:	6978      	ldr	r0, [r7, #20]
 800ea46:	f7ff fe51 	bl	800e6ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ea50:	f043 0210 	orr.w	r2, r3, #16
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ea60:	6978      	ldr	r0, [r7, #20]
 800ea62:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea64:	bf00      	nop
 800ea66:	3718      	adds	r7, #24
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2200      	movs	r2, #0
 800ea86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ea90:	68f8      	ldr	r0, [r7, #12]
 800ea92:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea94:	bf00      	nop
 800ea96:	3710      	adds	r7, #16
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b084      	sub	sp, #16
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaa8:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2200      	movs	r2, #0
 800eaae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	220f      	movs	r2, #15
 800eab8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	699a      	ldr	r2, [r3, #24]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f042 0208 	orr.w	r2, r2, #8
 800eac8:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2220      	movs	r2, #32
 800eace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Call user Abort complete callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800eade:	68f8      	ldr	r0, [r7, #12]
 800eae0:	4798      	blx	r3
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eae2:	bf00      	nop
 800eae4:	3710      	adds	r7, #16
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eaea:	b480      	push	{r7}
 800eaec:	b08f      	sub	sp, #60	@ 0x3c
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800eaf8:	2b21      	cmp	r3, #33	@ 0x21
 800eafa:	d14c      	bne.n	800eb96 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d132      	bne.n	800eb6e <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb0e:	6a3b      	ldr	r3, [r7, #32]
 800eb10:	e853 3f00 	ldrex	r3, [r3]
 800eb14:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb16:	69fb      	ldr	r3, [r7, #28]
 800eb18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	461a      	mov	r2, r3
 800eb24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eb28:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800eb2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eb2e:	e841 2300 	strex	r3, r2, [r1]
 800eb32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800eb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d1e6      	bne.n	800eb08 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	e853 3f00 	ldrex	r3, [r3]
 800eb46:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eb4e:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	461a      	mov	r2, r3
 800eb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb58:	61bb      	str	r3, [r7, #24]
 800eb5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb5c:	6979      	ldr	r1, [r7, #20]
 800eb5e:	69ba      	ldr	r2, [r7, #24]
 800eb60:	e841 2300 	strex	r3, r2, [r1]
 800eb64:	613b      	str	r3, [r7, #16]
   return(result);
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d1e6      	bne.n	800eb3a <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800eb6c:	e013      	b.n	800eb96 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb72:	781a      	ldrb	r2, [r3, #0]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb7e:	1c5a      	adds	r2, r3, #1
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	3b01      	subs	r3, #1
 800eb8e:	b29a      	uxth	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800eb96:	bf00      	nop
 800eb98:	373c      	adds	r7, #60	@ 0x3c
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr

0800eba2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800eba2:	b480      	push	{r7}
 800eba4:	b091      	sub	sp, #68	@ 0x44
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ebb0:	2b21      	cmp	r3, #33	@ 0x21
 800ebb2:	d151      	bne.n	800ec58 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ebba:	b29b      	uxth	r3, r3
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d132      	bne.n	800ec26 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc8:	e853 3f00 	ldrex	r3, [r3]
 800ebcc:	623b      	str	r3, [r7, #32]
   return(result);
 800ebce:	6a3b      	ldr	r3, [r7, #32]
 800ebd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ebd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	461a      	mov	r2, r3
 800ebdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebde:	633b      	str	r3, [r7, #48]	@ 0x30
 800ebe0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebe2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ebe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ebe6:	e841 2300 	strex	r3, r2, [r1]
 800ebea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ebec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d1e6      	bne.n	800ebc0 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	e853 3f00 	ldrex	r3, [r3]
 800ebfe:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec06:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec10:	61fb      	str	r3, [r7, #28]
 800ec12:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec14:	69b9      	ldr	r1, [r7, #24]
 800ec16:	69fa      	ldr	r2, [r7, #28]
 800ec18:	e841 2300 	strex	r3, r2, [r1]
 800ec1c:	617b      	str	r3, [r7, #20]
   return(result);
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d1e6      	bne.n	800ebf2 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800ec24:	e018      	b.n	800ec58 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ec2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec2e:	881b      	ldrh	r3, [r3, #0]
 800ec30:	461a      	mov	r2, r3
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ec3a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec40:	1c9a      	adds	r2, r3, #2
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ec4c:	b29b      	uxth	r3, r3
 800ec4e:	3b01      	subs	r3, #1
 800ec50:	b29a      	uxth	r2, r3
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800ec58:	bf00      	nop
 800ec5a:	3744      	adds	r7, #68	@ 0x44
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr

0800ec64 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b091      	sub	sp, #68	@ 0x44
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ec72:	2b21      	cmp	r3, #33	@ 0x21
 800ec74:	d160      	bne.n	800ed38 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ec7c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ec7e:	e057      	b.n	800ed30 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d133      	bne.n	800ecf4 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	3308      	adds	r3, #8
 800ec92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec96:	e853 3f00 	ldrex	r3, [r3]
 800ec9a:	623b      	str	r3, [r7, #32]
   return(result);
 800ec9c:	6a3b      	ldr	r3, [r7, #32]
 800ec9e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800eca2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	3308      	adds	r3, #8
 800ecaa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ecac:	633a      	str	r2, [r7, #48]	@ 0x30
 800ecae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ecb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ecb4:	e841 2300 	strex	r3, r2, [r1]
 800ecb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ecba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d1e5      	bne.n	800ec8c <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	e853 3f00 	ldrex	r3, [r3]
 800eccc:	60fb      	str	r3, [r7, #12]
   return(result);
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecd4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	461a      	mov	r2, r3
 800ecdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecde:	61fb      	str	r3, [r7, #28]
 800ece0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ece2:	69b9      	ldr	r1, [r7, #24]
 800ece4:	69fa      	ldr	r2, [r7, #28]
 800ece6:	e841 2300 	strex	r3, r2, [r1]
 800ecea:	617b      	str	r3, [r7, #20]
   return(result);
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d1e6      	bne.n	800ecc0 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800ecf2:	e021      	b.n	800ed38 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	69db      	ldr	r3, [r3, #28]
 800ecfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d013      	beq.n	800ed2a <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed06:	781a      	ldrb	r2, [r3, #0]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed12:	1c5a      	adds	r2, r3, #1
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	3b01      	subs	r3, #1
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ed2a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ed2c:	3b01      	subs	r3, #1
 800ed2e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ed30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d1a4      	bne.n	800ec80 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ed36:	e7ff      	b.n	800ed38 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800ed38:	bf00      	nop
 800ed3a:	3744      	adds	r7, #68	@ 0x44
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr

0800ed44 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b091      	sub	sp, #68	@ 0x44
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ed52:	2b21      	cmp	r3, #33	@ 0x21
 800ed54:	d165      	bne.n	800ee22 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ed5c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ed5e:	e05c      	b.n	800ee1a <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d133      	bne.n	800edd4 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	3308      	adds	r3, #8
 800ed72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed74:	6a3b      	ldr	r3, [r7, #32]
 800ed76:	e853 3f00 	ldrex	r3, [r3]
 800ed7a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ed7c:	69fb      	ldr	r3, [r7, #28]
 800ed7e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ed82:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	3308      	adds	r3, #8
 800ed8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ed8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ed92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed94:	e841 2300 	strex	r3, r2, [r1]
 800ed98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ed9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d1e5      	bne.n	800ed6c <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	e853 3f00 	ldrex	r3, [r3]
 800edac:	60bb      	str	r3, [r7, #8]
   return(result);
 800edae:	68bb      	ldr	r3, [r7, #8]
 800edb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800edb4:	633b      	str	r3, [r7, #48]	@ 0x30
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	461a      	mov	r2, r3
 800edbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800edbe:	61bb      	str	r3, [r7, #24]
 800edc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edc2:	6979      	ldr	r1, [r7, #20]
 800edc4:	69ba      	ldr	r2, [r7, #24]
 800edc6:	e841 2300 	strex	r3, r2, [r1]
 800edca:	613b      	str	r3, [r7, #16]
   return(result);
 800edcc:	693b      	ldr	r3, [r7, #16]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d1e6      	bne.n	800eda0 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800edd2:	e026      	b.n	800ee22 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	69db      	ldr	r3, [r3, #28]
 800edda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d018      	beq.n	800ee14 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ede6:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800ede8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800edea:	881b      	ldrh	r3, [r3, #0]
 800edec:	461a      	mov	r2, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800edf6:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edfc:	1c9a      	adds	r2, r3, #2
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	3b01      	subs	r3, #1
 800ee0c:	b29a      	uxth	r2, r3
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ee14:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ee16:	3b01      	subs	r3, #1
 800ee18:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ee1a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d19f      	bne.n	800ed60 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800ee20:	e7ff      	b.n	800ee22 <UART_TxISR_16BIT_FIFOEN+0xde>
 800ee22:	bf00      	nop
 800ee24:	3744      	adds	r7, #68	@ 0x44
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr

0800ee2e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b088      	sub	sp, #32
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	e853 3f00 	ldrex	r3, [r3]
 800ee42:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee4a:	61fb      	str	r3, [r7, #28]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	461a      	mov	r2, r3
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	61bb      	str	r3, [r7, #24]
 800ee56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee58:	6979      	ldr	r1, [r7, #20]
 800ee5a:	69ba      	ldr	r2, [r7, #24]
 800ee5c:	e841 2300 	strex	r3, r2, [r1]
 800ee60:	613b      	str	r3, [r7, #16]
   return(result);
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d1e6      	bne.n	800ee36 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2220      	movs	r2, #32
 800ee6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2200      	movs	r2, #0
 800ee74:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ee7c:	6878      	ldr	r0, [r7, #4]
 800ee7e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee80:	bf00      	nop
 800ee82:	3720      	adds	r7, #32
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b09c      	sub	sp, #112	@ 0x70
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ee96:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800eea0:	2b22      	cmp	r3, #34	@ 0x22
 800eea2:	f040 80c2 	bne.w	800f02a <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800eeb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800eeb4:	b2d9      	uxtb	r1, r3
 800eeb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800eeba:	b2da      	uxtb	r2, r3
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eec0:	400a      	ands	r2, r1
 800eec2:	b2d2      	uxtb	r2, r2
 800eec4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800eeca:	1c5a      	adds	r2, r3, #1
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eed6:	b29b      	uxth	r3, r3
 800eed8:	3b01      	subs	r3, #1
 800eeda:	b29a      	uxth	r2, r3
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	f040 80a5 	bne.w	800f03a <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eef8:	e853 3f00 	ldrex	r3, [r3]
 800eefc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800eefe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ef04:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ef0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ef10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ef14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ef16:	e841 2300 	strex	r3, r2, [r1]
 800ef1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ef1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d1e6      	bne.n	800eef0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	3308      	adds	r3, #8
 800ef28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef2c:	e853 3f00 	ldrex	r3, [r3]
 800ef30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ef32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ef34:	f023 0301 	bic.w	r3, r3, #1
 800ef38:	667b      	str	r3, [r7, #100]	@ 0x64
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	3308      	adds	r3, #8
 800ef40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ef42:	647a      	str	r2, [r7, #68]	@ 0x44
 800ef44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ef48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ef4a:	e841 2300 	strex	r3, r2, [r1]
 800ef4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ef50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d1e5      	bne.n	800ef22 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	2220      	movs	r2, #32
 800ef5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2200      	movs	r2, #0
 800ef62:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2200      	movs	r2, #0
 800ef68:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	4a35      	ldr	r2, [pc, #212]	@ (800f044 <UART_RxISR_8BIT+0x1bc>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d01f      	beq.n	800efb4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d018      	beq.n	800efb4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef8a:	e853 3f00 	ldrex	r3, [r3]
 800ef8e:	623b      	str	r3, [r7, #32]
   return(result);
 800ef90:	6a3b      	ldr	r3, [r7, #32]
 800ef92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ef96:	663b      	str	r3, [r7, #96]	@ 0x60
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800efa0:	633b      	str	r3, [r7, #48]	@ 0x30
 800efa2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efa4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800efa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800efa8:	e841 2300 	strex	r3, r2, [r1]
 800efac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800efae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d1e6      	bne.n	800ef82 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d130      	bne.n	800f01e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	2200      	movs	r2, #0
 800efc0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	e853 3f00 	ldrex	r3, [r3]
 800efce:	60fb      	str	r3, [r7, #12]
   return(result);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f023 0310 	bic.w	r3, r3, #16
 800efd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	461a      	mov	r2, r3
 800efde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800efe0:	61fb      	str	r3, [r7, #28]
 800efe2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efe4:	69b9      	ldr	r1, [r7, #24]
 800efe6:	69fa      	ldr	r2, [r7, #28]
 800efe8:	e841 2300 	strex	r3, r2, [r1]
 800efec:	617b      	str	r3, [r7, #20]
   return(result);
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d1e6      	bne.n	800efc2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	69db      	ldr	r3, [r3, #28]
 800effa:	f003 0310 	and.w	r3, r3, #16
 800effe:	2b10      	cmp	r3, #16
 800f000:	d103      	bne.n	800f00a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	2210      	movs	r2, #16
 800f008:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800f016:	4611      	mov	r1, r2
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f01c:	e00d      	b.n	800f03a <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	4798      	blx	r3
}
 800f028:	e007      	b.n	800f03a <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	699a      	ldr	r2, [r3, #24]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f042 0208 	orr.w	r2, r2, #8
 800f038:	619a      	str	r2, [r3, #24]
}
 800f03a:	bf00      	nop
 800f03c:	3770      	adds	r7, #112	@ 0x70
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	58000c00 	.word	0x58000c00

0800f048 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b09c      	sub	sp, #112	@ 0x70
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f056:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f060:	2b22      	cmp	r3, #34	@ 0x22
 800f062:	f040 80c2 	bne.w	800f1ea <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f06c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f074:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f076:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800f07a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800f07e:	4013      	ands	r3, r2
 800f080:	b29a      	uxth	r2, r3
 800f082:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800f084:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f08a:	1c9a      	adds	r2, r3, #2
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f096:	b29b      	uxth	r3, r3
 800f098:	3b01      	subs	r3, #1
 800f09a:	b29a      	uxth	r2, r3
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f0a8:	b29b      	uxth	r3, r3
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	f040 80a5 	bne.w	800f1fa <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f0b8:	e853 3f00 	ldrex	r3, [r3]
 800f0bc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f0be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f0c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f0c4:	667b      	str	r3, [r7, #100]	@ 0x64
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f0ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800f0d0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f0d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f0d6:	e841 2300 	strex	r3, r2, [r1]
 800f0da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f0dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d1e6      	bne.n	800f0b0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	3308      	adds	r3, #8
 800f0e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0ec:	e853 3f00 	ldrex	r3, [r3]
 800f0f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f0f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0f4:	f023 0301 	bic.w	r3, r3, #1
 800f0f8:	663b      	str	r3, [r7, #96]	@ 0x60
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	3308      	adds	r3, #8
 800f100:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f102:	643a      	str	r2, [r7, #64]	@ 0x40
 800f104:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f106:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f108:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f10a:	e841 2300 	strex	r3, r2, [r1]
 800f10e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f112:	2b00      	cmp	r3, #0
 800f114:	d1e5      	bne.n	800f0e2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2220      	movs	r2, #32
 800f11a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2200      	movs	r2, #0
 800f122:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2200      	movs	r2, #0
 800f128:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	4a35      	ldr	r2, [pc, #212]	@ (800f204 <UART_RxISR_16BIT+0x1bc>)
 800f130:	4293      	cmp	r3, r2
 800f132:	d01f      	beq.n	800f174 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d018      	beq.n	800f174 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f148:	6a3b      	ldr	r3, [r7, #32]
 800f14a:	e853 3f00 	ldrex	r3, [r3]
 800f14e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f150:	69fb      	ldr	r3, [r7, #28]
 800f152:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f156:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	461a      	mov	r2, r3
 800f15e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f162:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f164:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f168:	e841 2300 	strex	r3, r2, [r1]
 800f16c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f16e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f170:	2b00      	cmp	r3, #0
 800f172:	d1e6      	bne.n	800f142 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f178:	2b01      	cmp	r3, #1
 800f17a:	d130      	bne.n	800f1de <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	e853 3f00 	ldrex	r3, [r3]
 800f18e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	f023 0310 	bic.w	r3, r3, #16
 800f196:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	461a      	mov	r2, r3
 800f19e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f1a0:	61bb      	str	r3, [r7, #24]
 800f1a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a4:	6979      	ldr	r1, [r7, #20]
 800f1a6:	69ba      	ldr	r2, [r7, #24]
 800f1a8:	e841 2300 	strex	r3, r2, [r1]
 800f1ac:	613b      	str	r3, [r7, #16]
   return(result);
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d1e6      	bne.n	800f182 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	69db      	ldr	r3, [r3, #28]
 800f1ba:	f003 0310 	and.w	r3, r3, #16
 800f1be:	2b10      	cmp	r3, #16
 800f1c0:	d103      	bne.n	800f1ca <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	2210      	movs	r2, #16
 800f1c8:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800f1d6:	4611      	mov	r1, r2
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f1dc:	e00d      	b.n	800f1fa <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	4798      	blx	r3
}
 800f1e8:	e007      	b.n	800f1fa <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	699a      	ldr	r2, [r3, #24]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f042 0208 	orr.w	r2, r2, #8
 800f1f8:	619a      	str	r2, [r3, #24]
}
 800f1fa:	bf00      	nop
 800f1fc:	3770      	adds	r7, #112	@ 0x70
 800f1fe:	46bd      	mov	sp, r7
 800f200:	bd80      	pop	{r7, pc}
 800f202:	bf00      	nop
 800f204:	58000c00 	.word	0x58000c00

0800f208 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b0ac      	sub	sp, #176	@ 0xb0
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f216:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	69db      	ldr	r3, [r3, #28]
 800f220:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	689b      	ldr	r3, [r3, #8]
 800f234:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f23e:	2b22      	cmp	r3, #34	@ 0x22
 800f240:	f040 8186 	bne.w	800f550 <UART_RxISR_8BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f24a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f24e:	e129      	b.n	800f4a4 <UART_RxISR_8BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f256:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f25a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800f25e:	b2d9      	uxtb	r1, r3
 800f260:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800f264:	b2da      	uxtb	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f26a:	400a      	ands	r2, r1
 800f26c:	b2d2      	uxtb	r2, r2
 800f26e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f274:	1c5a      	adds	r2, r3, #1
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f280:	b29b      	uxth	r3, r3
 800f282:	3b01      	subs	r3, #1
 800f284:	b29a      	uxth	r2, r3
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	69db      	ldr	r3, [r3, #28]
 800f292:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f29a:	f003 0307 	and.w	r3, r3, #7
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d055      	beq.n	800f34e <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f2a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f2a6:	f003 0301 	and.w	r3, r3, #1
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d011      	beq.n	800f2d2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800f2ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f2b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d00b      	beq.n	800f2d2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	2201      	movs	r2, #1
 800f2c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2c8:	f043 0201 	orr.w	r2, r3, #1
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f2d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f2d6:	f003 0302 	and.w	r3, r3, #2
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d011      	beq.n	800f302 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f2de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f2e2:	f003 0301 	and.w	r3, r3, #1
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d00b      	beq.n	800f302 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	2202      	movs	r2, #2
 800f2f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f2f8:	f043 0204 	orr.w	r2, r3, #4
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f306:	f003 0304 	and.w	r3, r3, #4
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d011      	beq.n	800f332 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800f30e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f312:	f003 0301 	and.w	r3, r3, #1
 800f316:	2b00      	cmp	r3, #0
 800f318:	d00b      	beq.n	800f332 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2204      	movs	r2, #4
 800f320:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f328:	f043 0202 	orr.w	r2, r3, #2
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d008      	beq.n	800f34e <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2200      	movs	r2, #0
 800f34a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f354:	b29b      	uxth	r3, r3
 800f356:	2b00      	cmp	r3, #0
 800f358:	f040 80a4 	bne.w	800f4a4 <UART_RxISR_8BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f362:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f364:	e853 3f00 	ldrex	r3, [r3]
 800f368:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800f36a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f36c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f370:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	461a      	mov	r2, r3
 800f37a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f37e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f380:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f382:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800f384:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800f386:	e841 2300 	strex	r3, r2, [r1]
 800f38a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800f38c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d1e4      	bne.n	800f35c <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	3308      	adds	r3, #8
 800f398:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f39a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f39c:	e853 3f00 	ldrex	r3, [r3]
 800f3a0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f3a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f3a4:	4b70      	ldr	r3, [pc, #448]	@ (800f568 <UART_RxISR_8BIT_FIFOEN+0x360>)
 800f3a6:	4013      	ands	r3, r2
 800f3a8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	3308      	adds	r3, #8
 800f3b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f3b6:	66ba      	str	r2, [r7, #104]	@ 0x68
 800f3b8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f3bc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f3be:	e841 2300 	strex	r3, r2, [r1]
 800f3c2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f3c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d1e3      	bne.n	800f392 <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	2220      	movs	r2, #32
 800f3ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	4a62      	ldr	r2, [pc, #392]	@ (800f56c <UART_RxISR_8BIT_FIFOEN+0x364>)
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d021      	beq.n	800f42c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	685b      	ldr	r3, [r3, #4]
 800f3ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d01a      	beq.n	800f42c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f3fe:	e853 3f00 	ldrex	r3, [r3]
 800f402:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f406:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f40a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	461a      	mov	r2, r3
 800f414:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f418:	657b      	str	r3, [r7, #84]	@ 0x54
 800f41a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f41c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f41e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f420:	e841 2300 	strex	r3, r2, [r1]
 800f424:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d1e4      	bne.n	800f3f6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f430:	2b01      	cmp	r3, #1
 800f432:	d132      	bne.n	800f49a <UART_RxISR_8BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2200      	movs	r2, #0
 800f438:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f442:	e853 3f00 	ldrex	r3, [r3]
 800f446:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f44a:	f023 0310 	bic.w	r3, r3, #16
 800f44e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	461a      	mov	r2, r3
 800f458:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f45c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f45e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f460:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f462:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f464:	e841 2300 	strex	r3, r2, [r1]
 800f468:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f46a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d1e4      	bne.n	800f43a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	69db      	ldr	r3, [r3, #28]
 800f476:	f003 0310 	and.w	r3, r3, #16
 800f47a:	2b10      	cmp	r3, #16
 800f47c:	d103      	bne.n	800f486 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	2210      	movs	r2, #16
 800f484:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800f492:	4611      	mov	r1, r2
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	4798      	blx	r3
 800f498:	e004      	b.n	800f4a4 <UART_RxISR_8BIT_FIFOEN+0x29c>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f4a4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d006      	beq.n	800f4ba <UART_RxISR_8BIT_FIFOEN+0x2b2>
 800f4ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f4b0:	f003 0320 	and.w	r3, r3, #32
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	f47f aecb 	bne.w	800f250 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f4c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f4c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d049      	beq.n	800f560 <UART_RxISR_8BIT_FIFOEN+0x358>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f4d2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d242      	bcs.n	800f560 <UART_RxISR_8BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	3308      	adds	r3, #8
 800f4e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4e2:	6a3b      	ldr	r3, [r7, #32]
 800f4e4:	e853 3f00 	ldrex	r3, [r3]
 800f4e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f4ea:	69fb      	ldr	r3, [r7, #28]
 800f4ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f4f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	3308      	adds	r3, #8
 800f4fa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800f4fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f500:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f502:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f504:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f506:	e841 2300 	strex	r3, r2, [r1]
 800f50a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f50c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d1e3      	bne.n	800f4da <UART_RxISR_8BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	4a16      	ldr	r2, [pc, #88]	@ (800f570 <UART_RxISR_8BIT_FIFOEN+0x368>)
 800f516:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	e853 3f00 	ldrex	r3, [r3]
 800f524:	60bb      	str	r3, [r7, #8]
   return(result);
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	f043 0320 	orr.w	r3, r3, #32
 800f52c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	461a      	mov	r2, r3
 800f536:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f53a:	61bb      	str	r3, [r7, #24]
 800f53c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f53e:	6979      	ldr	r1, [r7, #20]
 800f540:	69ba      	ldr	r2, [r7, #24]
 800f542:	e841 2300 	strex	r3, r2, [r1]
 800f546:	613b      	str	r3, [r7, #16]
   return(result);
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d1e4      	bne.n	800f518 <UART_RxISR_8BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f54e:	e007      	b.n	800f560 <UART_RxISR_8BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	699a      	ldr	r2, [r3, #24]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f042 0208 	orr.w	r2, r2, #8
 800f55e:	619a      	str	r2, [r3, #24]
}
 800f560:	bf00      	nop
 800f562:	37b0      	adds	r7, #176	@ 0xb0
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	effffffe 	.word	0xeffffffe
 800f56c:	58000c00 	.word	0x58000c00
 800f570:	0800ee89 	.word	0x0800ee89

0800f574 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b0ae      	sub	sp, #184	@ 0xb8
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f582:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	69db      	ldr	r3, [r3, #28]
 800f58c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f5aa:	2b22      	cmp	r3, #34	@ 0x22
 800f5ac:	f040 818a 	bne.w	800f8c4 <UART_RxISR_16BIT_FIFOEN+0x350>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f5b6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f5ba:	e12d      	b.n	800f818 <UART_RxISR_16BIT_FIFOEN+0x2a4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5c2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800f5ce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800f5d2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800f5d6:	4013      	ands	r3, r2
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f5de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f5e4:	1c9a      	adds	r2, r3, #2
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f5f0:	b29b      	uxth	r3, r3
 800f5f2:	3b01      	subs	r3, #1
 800f5f4:	b29a      	uxth	r2, r3
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	69db      	ldr	r3, [r3, #28]
 800f602:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f60a:	f003 0307 	and.w	r3, r3, #7
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d055      	beq.n	800f6be <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f612:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f616:	f003 0301 	and.w	r3, r3, #1
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d011      	beq.n	800f642 <UART_RxISR_16BIT_FIFOEN+0xce>
 800f61e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f626:	2b00      	cmp	r3, #0
 800f628:	d00b      	beq.n	800f642 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	2201      	movs	r2, #1
 800f630:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f638:	f043 0201 	orr.w	r2, r3, #1
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f642:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f646:	f003 0302 	and.w	r3, r3, #2
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d011      	beq.n	800f672 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800f64e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f652:	f003 0301 	and.w	r3, r3, #1
 800f656:	2b00      	cmp	r3, #0
 800f658:	d00b      	beq.n	800f672 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	2202      	movs	r2, #2
 800f660:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f668:	f043 0204 	orr.w	r2, r3, #4
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f672:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f676:	f003 0304 	and.w	r3, r3, #4
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d011      	beq.n	800f6a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800f67e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f682:	f003 0301 	and.w	r3, r3, #1
 800f686:	2b00      	cmp	r3, #0
 800f688:	d00b      	beq.n	800f6a2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	2204      	movs	r2, #4
 800f690:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f698:	f043 0202 	orr.w	r2, r3, #2
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d008      	beq.n	800f6be <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	f040 80a6 	bne.w	800f818 <UART_RxISR_16BIT_FIFOEN+0x2a4>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f6d4:	e853 3f00 	ldrex	r3, [r3]
 800f6d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f6da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f6dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f6e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f6ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f6f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f6f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f6fa:	e841 2300 	strex	r3, r2, [r1]
 800f6fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f700:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f702:	2b00      	cmp	r3, #0
 800f704:	d1e2      	bne.n	800f6cc <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	3308      	adds	r3, #8
 800f70c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f70e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f710:	e853 3f00 	ldrex	r3, [r3]
 800f714:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f716:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f718:	4b70      	ldr	r3, [pc, #448]	@ (800f8dc <UART_RxISR_16BIT_FIFOEN+0x368>)
 800f71a:	4013      	ands	r3, r2
 800f71c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	3308      	adds	r3, #8
 800f726:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800f72a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f72c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f72e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f730:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f732:	e841 2300 	strex	r3, r2, [r1]
 800f736:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f738:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d1e3      	bne.n	800f706 <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2220      	movs	r2, #32
 800f742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2200      	movs	r2, #0
 800f74a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	4a62      	ldr	r2, [pc, #392]	@ (800f8e0 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 800f758:	4293      	cmp	r3, r2
 800f75a:	d021      	beq.n	800f7a0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f766:	2b00      	cmp	r3, #0
 800f768:	d01a      	beq.n	800f7a0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f772:	e853 3f00 	ldrex	r3, [r3]
 800f776:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f77a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f77e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	461a      	mov	r2, r3
 800f788:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800f78c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f78e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f790:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f792:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f794:	e841 2300 	strex	r3, r2, [r1]
 800f798:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f79a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d1e4      	bne.n	800f76a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f7a4:	2b01      	cmp	r3, #1
 800f7a6:	d132      	bne.n	800f80e <UART_RxISR_16BIT_FIFOEN+0x29a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b6:	e853 3f00 	ldrex	r3, [r3]
 800f7ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f7bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f7be:	f023 0310 	bic.w	r3, r3, #16
 800f7c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800f7d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f7d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f7d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f7d8:	e841 2300 	strex	r3, r2, [r1]
 800f7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d1e4      	bne.n	800f7ae <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	69db      	ldr	r3, [r3, #28]
 800f7ea:	f003 0310 	and.w	r3, r3, #16
 800f7ee:	2b10      	cmp	r3, #16
 800f7f0:	d103      	bne.n	800f7fa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2210      	movs	r2, #16
 800f7f8:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800f806:	4611      	mov	r1, r2
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	4798      	blx	r3
 800f80c:	e004      	b.n	800f818 <UART_RxISR_16BIT_FIFOEN+0x2a4>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f818:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d006      	beq.n	800f82e <UART_RxISR_16BIT_FIFOEN+0x2ba>
 800f820:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f824:	f003 0320 	and.w	r3, r3, #32
 800f828:	2b00      	cmp	r3, #0
 800f82a:	f47f aec7 	bne.w	800f5bc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f834:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800f838:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d049      	beq.n	800f8d4 <UART_RxISR_16BIT_FIFOEN+0x360>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800f846:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d242      	bcs.n	800f8d4 <UART_RxISR_16BIT_FIFOEN+0x360>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	3308      	adds	r3, #8
 800f854:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f858:	e853 3f00 	ldrex	r3, [r3]
 800f85c:	623b      	str	r3, [r7, #32]
   return(result);
 800f85e:	6a3b      	ldr	r3, [r7, #32]
 800f860:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f864:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	3308      	adds	r3, #8
 800f86e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f872:	633a      	str	r2, [r7, #48]	@ 0x30
 800f874:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f87a:	e841 2300 	strex	r3, r2, [r1]
 800f87e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f882:	2b00      	cmp	r3, #0
 800f884:	d1e3      	bne.n	800f84e <UART_RxISR_16BIT_FIFOEN+0x2da>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	4a16      	ldr	r2, [pc, #88]	@ (800f8e4 <UART_RxISR_16BIT_FIFOEN+0x370>)
 800f88a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f892:	693b      	ldr	r3, [r7, #16]
 800f894:	e853 3f00 	ldrex	r3, [r3]
 800f898:	60fb      	str	r3, [r7, #12]
   return(result);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	f043 0320 	orr.w	r3, r3, #32
 800f8a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	461a      	mov	r2, r3
 800f8aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f8ae:	61fb      	str	r3, [r7, #28]
 800f8b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b2:	69b9      	ldr	r1, [r7, #24]
 800f8b4:	69fa      	ldr	r2, [r7, #28]
 800f8b6:	e841 2300 	strex	r3, r2, [r1]
 800f8ba:	617b      	str	r3, [r7, #20]
   return(result);
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d1e4      	bne.n	800f88c <UART_RxISR_16BIT_FIFOEN+0x318>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f8c2:	e007      	b.n	800f8d4 <UART_RxISR_16BIT_FIFOEN+0x360>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	699a      	ldr	r2, [r3, #24]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f042 0208 	orr.w	r2, r2, #8
 800f8d2:	619a      	str	r2, [r3, #24]
}
 800f8d4:	bf00      	nop
 800f8d6:	37b8      	adds	r7, #184	@ 0xb8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	effffffe 	.word	0xeffffffe
 800f8e0:	58000c00 	.word	0x58000c00
 800f8e4:	0800f049 	.word	0x0800f049

0800f8e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f8f0:	bf00      	nop
 800f8f2:	370c      	adds	r7, #12
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr

0800f8fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f904:	bf00      	nop
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f918:	bf00      	nop
 800f91a:	370c      	adds	r7, #12
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f924:	b480      	push	{r7}
 800f926:	b085      	sub	sp, #20
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f932:	2b01      	cmp	r3, #1
 800f934:	d101      	bne.n	800f93a <HAL_UARTEx_DisableFifoMode+0x16>
 800f936:	2302      	movs	r3, #2
 800f938:	e027      	b.n	800f98a <HAL_UARTEx_DisableFifoMode+0x66>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2201      	movs	r2, #1
 800f93e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2224      	movs	r2, #36	@ 0x24
 800f946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f022 0201 	bic.w	r2, r2, #1
 800f960:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800f968:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2200      	movs	r2, #0
 800f96e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	68fa      	ldr	r2, [r7, #12]
 800f976:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2220      	movs	r2, #32
 800f97c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2200      	movs	r2, #0
 800f984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f988:	2300      	movs	r3, #0
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3714      	adds	r7, #20
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr

0800f996 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f996:	b580      	push	{r7, lr}
 800f998:	b084      	sub	sp, #16
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
 800f99e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800f9a6:	2b01      	cmp	r3, #1
 800f9a8:	d101      	bne.n	800f9ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f9aa:	2302      	movs	r3, #2
 800f9ac:	e02d      	b.n	800fa0a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2224      	movs	r2, #36	@ 0x24
 800f9ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	f022 0201 	bic.w	r2, r2, #1
 800f9d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	689b      	ldr	r3, [r3, #8]
 800f9dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	683a      	ldr	r2, [r7, #0]
 800f9e6:	430a      	orrs	r2, r1
 800f9e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f000 f8a4 	bl	800fb38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2220      	movs	r2, #32
 800f9fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	2200      	movs	r2, #0
 800fa04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa08:	2300      	movs	r3, #0
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3710      	adds	r7, #16
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}

0800fa12 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fa12:	b580      	push	{r7, lr}
 800fa14:	b084      	sub	sp, #16
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	6078      	str	r0, [r7, #4]
 800fa1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d101      	bne.n	800fa2a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fa26:	2302      	movs	r3, #2
 800fa28:	e02d      	b.n	800fa86 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2224      	movs	r2, #36	@ 0x24
 800fa36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	681a      	ldr	r2, [r3, #0]
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f022 0201 	bic.w	r2, r2, #1
 800fa50:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	689b      	ldr	r3, [r3, #8]
 800fa58:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	683a      	ldr	r2, [r7, #0]
 800fa62:	430a      	orrs	r2, r1
 800fa64:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 f866 	bl	800fb38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	68fa      	ldr	r2, [r7, #12]
 800fa72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2220      	movs	r2, #32
 800fa78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa84:	2300      	movs	r3, #0
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3710      	adds	r7, #16
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}

0800fa8e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa8e:	b580      	push	{r7, lr}
 800fa90:	b08c      	sub	sp, #48	@ 0x30
 800fa92:	af00      	add	r7, sp, #0
 800fa94:	60f8      	str	r0, [r7, #12]
 800fa96:	60b9      	str	r1, [r7, #8]
 800fa98:	4613      	mov	r3, r2
 800fa9a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800faa2:	2b20      	cmp	r3, #32
 800faa4:	d142      	bne.n	800fb2c <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d002      	beq.n	800fab2 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800faac:	88fb      	ldrh	r3, [r7, #6]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d101      	bne.n	800fab6 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800fab2:	2301      	movs	r3, #1
 800fab4:	e03b      	b.n	800fb2e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2201      	movs	r2, #1
 800faba:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	2200      	movs	r2, #0
 800fac0:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800fac2:	88fb      	ldrh	r3, [r7, #6]
 800fac4:	461a      	mov	r2, r3
 800fac6:	68b9      	ldr	r1, [r7, #8]
 800fac8:	68f8      	ldr	r0, [r7, #12]
 800faca:	f7fe fd27 	bl	800e51c <UART_Start_Receive_DMA>
 800face:	4603      	mov	r3, r0
 800fad0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800fad4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d124      	bne.n	800fb26 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d11d      	bne.n	800fb20 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	2210      	movs	r2, #16
 800faea:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faf2:	69bb      	ldr	r3, [r7, #24]
 800faf4:	e853 3f00 	ldrex	r3, [r3]
 800faf8:	617b      	str	r3, [r7, #20]
   return(result);
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	f043 0310 	orr.w	r3, r3, #16
 800fb00:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	461a      	mov	r2, r3
 800fb08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb0c:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb0e:	6a39      	ldr	r1, [r7, #32]
 800fb10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb12:	e841 2300 	strex	r3, r2, [r1]
 800fb16:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb18:	69fb      	ldr	r3, [r7, #28]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d1e6      	bne.n	800faec <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800fb1e:	e002      	b.n	800fb26 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800fb20:	2301      	movs	r3, #1
 800fb22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800fb26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fb2a:	e000      	b.n	800fb2e <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800fb2c:	2302      	movs	r3, #2
  }
}
 800fb2e:	4618      	mov	r0, r3
 800fb30:	3730      	adds	r7, #48	@ 0x30
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bd80      	pop	{r7, pc}
	...

0800fb38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b085      	sub	sp, #20
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d108      	bne.n	800fb5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2201      	movs	r2, #1
 800fb54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fb58:	e031      	b.n	800fbbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fb5a:	2310      	movs	r3, #16
 800fb5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fb5e:	2310      	movs	r3, #16
 800fb60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	689b      	ldr	r3, [r3, #8]
 800fb68:	0e5b      	lsrs	r3, r3, #25
 800fb6a:	b2db      	uxtb	r3, r3
 800fb6c:	f003 0307 	and.w	r3, r3, #7
 800fb70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	689b      	ldr	r3, [r3, #8]
 800fb78:	0f5b      	lsrs	r3, r3, #29
 800fb7a:	b2db      	uxtb	r3, r3
 800fb7c:	f003 0307 	and.w	r3, r3, #7
 800fb80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb82:	7bbb      	ldrb	r3, [r7, #14]
 800fb84:	7b3a      	ldrb	r2, [r7, #12]
 800fb86:	4911      	ldr	r1, [pc, #68]	@ (800fbcc <UARTEx_SetNbDataToProcess+0x94>)
 800fb88:	5c8a      	ldrb	r2, [r1, r2]
 800fb8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fb8e:	7b3a      	ldrb	r2, [r7, #12]
 800fb90:	490f      	ldr	r1, [pc, #60]	@ (800fbd0 <UARTEx_SetNbDataToProcess+0x98>)
 800fb92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fb94:	fb93 f3f2 	sdiv	r3, r3, r2
 800fb98:	b29a      	uxth	r2, r3
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fba0:	7bfb      	ldrb	r3, [r7, #15]
 800fba2:	7b7a      	ldrb	r2, [r7, #13]
 800fba4:	4909      	ldr	r1, [pc, #36]	@ (800fbcc <UARTEx_SetNbDataToProcess+0x94>)
 800fba6:	5c8a      	ldrb	r2, [r1, r2]
 800fba8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fbac:	7b7a      	ldrb	r2, [r7, #13]
 800fbae:	4908      	ldr	r1, [pc, #32]	@ (800fbd0 <UARTEx_SetNbDataToProcess+0x98>)
 800fbb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fbb2:	fb93 f3f2 	sdiv	r3, r3, r2
 800fbb6:	b29a      	uxth	r2, r3
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800fbbe:	bf00      	nop
 800fbc0:	3714      	adds	r7, #20
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop
 800fbcc:	0802339c 	.word	0x0802339c
 800fbd0:	080233a4 	.word	0x080233a4

0800fbd4 <__NVIC_SetPriority>:
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b083      	sub	sp, #12
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	4603      	mov	r3, r0
 800fbdc:	6039      	str	r1, [r7, #0]
 800fbde:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800fbe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	db0a      	blt.n	800fbfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	b2da      	uxtb	r2, r3
 800fbec:	490c      	ldr	r1, [pc, #48]	@ (800fc20 <__NVIC_SetPriority+0x4c>)
 800fbee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fbf2:	0112      	lsls	r2, r2, #4
 800fbf4:	b2d2      	uxtb	r2, r2
 800fbf6:	440b      	add	r3, r1
 800fbf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800fbfc:	e00a      	b.n	800fc14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	b2da      	uxtb	r2, r3
 800fc02:	4908      	ldr	r1, [pc, #32]	@ (800fc24 <__NVIC_SetPriority+0x50>)
 800fc04:	88fb      	ldrh	r3, [r7, #6]
 800fc06:	f003 030f 	and.w	r3, r3, #15
 800fc0a:	3b04      	subs	r3, #4
 800fc0c:	0112      	lsls	r2, r2, #4
 800fc0e:	b2d2      	uxtb	r2, r2
 800fc10:	440b      	add	r3, r1
 800fc12:	761a      	strb	r2, [r3, #24]
}
 800fc14:	bf00      	nop
 800fc16:	370c      	adds	r7, #12
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr
 800fc20:	e000e100 	.word	0xe000e100
 800fc24:	e000ed00 	.word	0xe000ed00

0800fc28 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800fc2c:	4b05      	ldr	r3, [pc, #20]	@ (800fc44 <SysTick_Handler+0x1c>)
 800fc2e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800fc30:	f002 fce0 	bl	80125f4 <xTaskGetSchedulerState>
 800fc34:	4603      	mov	r3, r0
 800fc36:	2b01      	cmp	r3, #1
 800fc38:	d001      	beq.n	800fc3e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800fc3a:	f003 ff25 	bl	8013a88 <xPortSysTickHandler>
  }
}
 800fc3e:	bf00      	nop
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	e000e010 	.word	0xe000e010

0800fc48 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fc4c:	2100      	movs	r1, #0
 800fc4e:	f06f 0004 	mvn.w	r0, #4
 800fc52:	f7ff ffbf 	bl	800fbd4 <__NVIC_SetPriority>
#endif
}
 800fc56:	bf00      	nop
 800fc58:	bd80      	pop	{r7, pc}
	...

0800fc5c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fc5c:	b480      	push	{r7}
 800fc5e:	b083      	sub	sp, #12
 800fc60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc62:	f3ef 8305 	mrs	r3, IPSR
 800fc66:	603b      	str	r3, [r7, #0]
  return(result);
 800fc68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d003      	beq.n	800fc76 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fc6e:	f06f 0305 	mvn.w	r3, #5
 800fc72:	607b      	str	r3, [r7, #4]
 800fc74:	e00c      	b.n	800fc90 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fc76:	4b0a      	ldr	r3, [pc, #40]	@ (800fca0 <osKernelInitialize+0x44>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d105      	bne.n	800fc8a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fc7e:	4b08      	ldr	r3, [pc, #32]	@ (800fca0 <osKernelInitialize+0x44>)
 800fc80:	2201      	movs	r2, #1
 800fc82:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fc84:	2300      	movs	r3, #0
 800fc86:	607b      	str	r3, [r7, #4]
 800fc88:	e002      	b.n	800fc90 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fc8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fc8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fc90:	687b      	ldr	r3, [r7, #4]
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	370c      	adds	r7, #12
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr
 800fc9e:	bf00      	nop
 800fca0:	24000c78 	.word	0x24000c78

0800fca4 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b082      	sub	sp, #8
 800fca8:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800fcaa:	f002 fca3 	bl	80125f4 <xTaskGetSchedulerState>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d004      	beq.n	800fcbe <osKernelGetState+0x1a>
 800fcb4:	2b02      	cmp	r3, #2
 800fcb6:	d105      	bne.n	800fcc4 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800fcb8:	2302      	movs	r3, #2
 800fcba:	607b      	str	r3, [r7, #4]
      break;
 800fcbc:	e00c      	b.n	800fcd8 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800fcbe:	2303      	movs	r3, #3
 800fcc0:	607b      	str	r3, [r7, #4]
      break;
 800fcc2:	e009      	b.n	800fcd8 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800fcc4:	4b07      	ldr	r3, [pc, #28]	@ (800fce4 <osKernelGetState+0x40>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d102      	bne.n	800fcd2 <osKernelGetState+0x2e>
        state = osKernelReady;
 800fccc:	2301      	movs	r3, #1
 800fcce:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800fcd0:	e001      	b.n	800fcd6 <osKernelGetState+0x32>
        state = osKernelInactive;
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	607b      	str	r3, [r7, #4]
      break;
 800fcd6:	bf00      	nop
  }

  return (state);
 800fcd8:	687b      	ldr	r3, [r7, #4]
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3708      	adds	r7, #8
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}
 800fce2:	bf00      	nop
 800fce4:	24000c78 	.word	0x24000c78

0800fce8 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fcee:	f3ef 8305 	mrs	r3, IPSR
 800fcf2:	603b      	str	r3, [r7, #0]
  return(result);
 800fcf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d003      	beq.n	800fd02 <osKernelStart+0x1a>
    stat = osErrorISR;
 800fcfa:	f06f 0305 	mvn.w	r3, #5
 800fcfe:	607b      	str	r3, [r7, #4]
 800fd00:	e010      	b.n	800fd24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fd02:	4b0b      	ldr	r3, [pc, #44]	@ (800fd30 <osKernelStart+0x48>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d109      	bne.n	800fd1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fd0a:	f7ff ff9d 	bl	800fc48 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fd0e:	4b08      	ldr	r3, [pc, #32]	@ (800fd30 <osKernelStart+0x48>)
 800fd10:	2202      	movs	r2, #2
 800fd12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fd14:	f001 ffe8 	bl	8011ce8 <vTaskStartScheduler>
      stat = osOK;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	607b      	str	r3, [r7, #4]
 800fd1c:	e002      	b.n	800fd24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fd1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fd22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fd24:	687b      	ldr	r3, [r7, #4]
}
 800fd26:	4618      	mov	r0, r3
 800fd28:	3708      	adds	r7, #8
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	bd80      	pop	{r7, pc}
 800fd2e:	bf00      	nop
 800fd30:	24000c78 	.word	0x24000c78

0800fd34 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd3a:	f3ef 8305 	mrs	r3, IPSR
 800fd3e:	603b      	str	r3, [r7, #0]
  return(result);
 800fd40:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d003      	beq.n	800fd4e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800fd46:	f002 f8fb 	bl	8011f40 <xTaskGetTickCountFromISR>
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	e002      	b.n	800fd54 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800fd4e:	f002 f8e7 	bl	8011f20 <xTaskGetTickCount>
 800fd52:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800fd54:	687b      	ldr	r3, [r7, #4]
}
 800fd56:	4618      	mov	r0, r3
 800fd58:	3708      	adds	r7, #8
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}

0800fd5e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fd5e:	b580      	push	{r7, lr}
 800fd60:	b08e      	sub	sp, #56	@ 0x38
 800fd62:	af04      	add	r7, sp, #16
 800fd64:	60f8      	str	r0, [r7, #12]
 800fd66:	60b9      	str	r1, [r7, #8]
 800fd68:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd6e:	f3ef 8305 	mrs	r3, IPSR
 800fd72:	617b      	str	r3, [r7, #20]
  return(result);
 800fd74:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d17e      	bne.n	800fe78 <osThreadNew+0x11a>
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d07b      	beq.n	800fe78 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fd80:	2380      	movs	r3, #128	@ 0x80
 800fd82:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fd84:	2318      	movs	r3, #24
 800fd86:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800fd8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fd90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d045      	beq.n	800fe24 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d002      	beq.n	800fda6 <osThreadNew+0x48>
        name = attr->name;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	699b      	ldr	r3, [r3, #24]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d002      	beq.n	800fdb4 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	699b      	ldr	r3, [r3, #24]
 800fdb2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fdb4:	69fb      	ldr	r3, [r7, #28]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d008      	beq.n	800fdcc <osThreadNew+0x6e>
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	2b38      	cmp	r3, #56	@ 0x38
 800fdbe:	d805      	bhi.n	800fdcc <osThreadNew+0x6e>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	f003 0301 	and.w	r3, r3, #1
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d001      	beq.n	800fdd0 <osThreadNew+0x72>
        return (NULL);
 800fdcc:	2300      	movs	r3, #0
 800fdce:	e054      	b.n	800fe7a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	695b      	ldr	r3, [r3, #20]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d003      	beq.n	800fde0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	695b      	ldr	r3, [r3, #20]
 800fddc:	089b      	lsrs	r3, r3, #2
 800fdde:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	689b      	ldr	r3, [r3, #8]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d00e      	beq.n	800fe06 <osThreadNew+0xa8>
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	2ba7      	cmp	r3, #167	@ 0xa7
 800fdee:	d90a      	bls.n	800fe06 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d006      	beq.n	800fe06 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	695b      	ldr	r3, [r3, #20]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d002      	beq.n	800fe06 <osThreadNew+0xa8>
        mem = 1;
 800fe00:	2301      	movs	r3, #1
 800fe02:	61bb      	str	r3, [r7, #24]
 800fe04:	e010      	b.n	800fe28 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	689b      	ldr	r3, [r3, #8]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d10c      	bne.n	800fe28 <osThreadNew+0xca>
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	68db      	ldr	r3, [r3, #12]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d108      	bne.n	800fe28 <osThreadNew+0xca>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	691b      	ldr	r3, [r3, #16]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d104      	bne.n	800fe28 <osThreadNew+0xca>
          mem = 0;
 800fe1e:	2300      	movs	r3, #0
 800fe20:	61bb      	str	r3, [r7, #24]
 800fe22:	e001      	b.n	800fe28 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fe24:	2300      	movs	r3, #0
 800fe26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fe28:	69bb      	ldr	r3, [r7, #24]
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d110      	bne.n	800fe50 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fe32:	687a      	ldr	r2, [r7, #4]
 800fe34:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fe36:	9202      	str	r2, [sp, #8]
 800fe38:	9301      	str	r3, [sp, #4]
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	9300      	str	r3, [sp, #0]
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	6a3a      	ldr	r2, [r7, #32]
 800fe42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fe44:	68f8      	ldr	r0, [r7, #12]
 800fe46:	f001 fc67 	bl	8011718 <xTaskCreateStatic>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	613b      	str	r3, [r7, #16]
 800fe4e:	e013      	b.n	800fe78 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d110      	bne.n	800fe78 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fe56:	6a3b      	ldr	r3, [r7, #32]
 800fe58:	b29a      	uxth	r2, r3
 800fe5a:	f107 0310 	add.w	r3, r7, #16
 800fe5e:	9301      	str	r3, [sp, #4]
 800fe60:	69fb      	ldr	r3, [r7, #28]
 800fe62:	9300      	str	r3, [sp, #0]
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f001 fcb5 	bl	80117d8 <xTaskCreate>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d001      	beq.n	800fe78 <osThreadNew+0x11a>
            hTask = NULL;
 800fe74:	2300      	movs	r3, #0
 800fe76:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fe78:	693b      	ldr	r3, [r7, #16]
}
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	3728      	adds	r7, #40	@ 0x28
 800fe7e:	46bd      	mov	sp, r7
 800fe80:	bd80      	pop	{r7, pc}

0800fe82 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 800fe82:	b580      	push	{r7, lr}
 800fe84:	b082      	sub	sp, #8
 800fe86:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800fe88:	f002 fba4 	bl	80125d4 <xTaskGetCurrentTaskHandle>
 800fe8c:	6078      	str	r0, [r7, #4]

  return (id);
 800fe8e:	687b      	ldr	r3, [r7, #4]
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3708      	adds	r7, #8
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b084      	sub	sp, #16
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fea0:	f3ef 8305 	mrs	r3, IPSR
 800fea4:	60bb      	str	r3, [r7, #8]
  return(result);
 800fea6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d003      	beq.n	800feb4 <osDelay+0x1c>
    stat = osErrorISR;
 800feac:	f06f 0305 	mvn.w	r3, #5
 800feb0:	60fb      	str	r3, [r7, #12]
 800feb2:	e007      	b.n	800fec4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800feb4:	2300      	movs	r3, #0
 800feb6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d002      	beq.n	800fec4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f001 fedc 	bl	8011c7c <vTaskDelay>
    }
  }

  return (stat);
 800fec4:	68fb      	ldr	r3, [r7, #12]
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3710      	adds	r7, #16
 800feca:	46bd      	mov	sp, r7
 800fecc:	bd80      	pop	{r7, pc}

0800fece <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800fece:	b580      	push	{r7, lr}
 800fed0:	b086      	sub	sp, #24
 800fed2:	af00      	add	r7, sp, #0
 800fed4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fed6:	f3ef 8305 	mrs	r3, IPSR
 800feda:	60fb      	str	r3, [r7, #12]
  return(result);
 800fedc:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d003      	beq.n	800feea <osDelayUntil+0x1c>
    stat = osErrorISR;
 800fee2:	f06f 0305 	mvn.w	r3, #5
 800fee6:	617b      	str	r3, [r7, #20]
 800fee8:	e019      	b.n	800ff1e <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800feea:	2300      	movs	r3, #0
 800feec:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800feee:	f002 f817 	bl	8011f20 <xTaskGetTickCount>
 800fef2:	4603      	mov	r3, r0
 800fef4:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	687a      	ldr	r2, [r7, #4]
 800fefa:	1ad3      	subs	r3, r2, r3
 800fefc:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800fefe:	693b      	ldr	r3, [r7, #16]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d009      	beq.n	800ff18 <osDelayUntil+0x4a>
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	db06      	blt.n	800ff18 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800ff0a:	f107 0308 	add.w	r3, r7, #8
 800ff0e:	6939      	ldr	r1, [r7, #16]
 800ff10:	4618      	mov	r0, r3
 800ff12:	f001 fe33 	bl	8011b7c <vTaskDelayUntil>
 800ff16:	e002      	b.n	800ff1e <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800ff18:	f06f 0303 	mvn.w	r3, #3
 800ff1c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ff1e:	697b      	ldr	r3, [r7, #20]
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3718      	adds	r7, #24
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}

0800ff28 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b084      	sub	sp, #16
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f003 fbc3 	bl	80136bc <pvTimerGetTimerID>
 800ff36:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d005      	beq.n	800ff4a <TimerCallback+0x22>
    callb->func (callb->arg);
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	6852      	ldr	r2, [r2, #4]
 800ff46:	4610      	mov	r0, r2
 800ff48:	4798      	blx	r3
  }
}
 800ff4a:	bf00      	nop
 800ff4c:	3710      	adds	r7, #16
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
	...

0800ff54 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b08c      	sub	sp, #48	@ 0x30
 800ff58:	af02      	add	r7, sp, #8
 800ff5a:	60f8      	str	r0, [r7, #12]
 800ff5c:	607a      	str	r2, [r7, #4]
 800ff5e:	603b      	str	r3, [r7, #0]
 800ff60:	460b      	mov	r3, r1
 800ff62:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800ff64:	2300      	movs	r3, #0
 800ff66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff68:	f3ef 8305 	mrs	r3, IPSR
 800ff6c:	613b      	str	r3, [r7, #16]
  return(result);
 800ff6e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d163      	bne.n	801003c <osTimerNew+0xe8>
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d060      	beq.n	801003c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800ff7a:	2008      	movs	r0, #8
 800ff7c:	f003 fe16 	bl	8013bac <pvPortMalloc>
 800ff80:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d059      	beq.n	801003c <osTimerNew+0xe8>
      callb->func = func;
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	68fa      	ldr	r2, [r7, #12]
 800ff8c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800ff8e:	697b      	ldr	r3, [r7, #20]
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800ff94:	7afb      	ldrb	r3, [r7, #11]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d102      	bne.n	800ffa0 <osTimerNew+0x4c>
        reload = pdFALSE;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	61fb      	str	r3, [r7, #28]
 800ff9e:	e001      	b.n	800ffa4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800ffa4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ffa8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d01c      	beq.n	800ffee <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d002      	beq.n	800ffc2 <osTimerNew+0x6e>
          name = attr->name;
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	689b      	ldr	r3, [r3, #8]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d006      	beq.n	800ffd8 <osTimerNew+0x84>
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	68db      	ldr	r3, [r3, #12]
 800ffce:	2b2b      	cmp	r3, #43	@ 0x2b
 800ffd0:	d902      	bls.n	800ffd8 <osTimerNew+0x84>
          mem = 1;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	61bb      	str	r3, [r7, #24]
 800ffd6:	e00c      	b.n	800fff2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	689b      	ldr	r3, [r3, #8]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d108      	bne.n	800fff2 <osTimerNew+0x9e>
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d104      	bne.n	800fff2 <osTimerNew+0x9e>
            mem = 0;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	61bb      	str	r3, [r7, #24]
 800ffec:	e001      	b.n	800fff2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800ffee:	2300      	movs	r3, #0
 800fff0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d10c      	bne.n	8010012 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	689b      	ldr	r3, [r3, #8]
 800fffc:	9301      	str	r3, [sp, #4]
 800fffe:	4b12      	ldr	r3, [pc, #72]	@ (8010048 <osTimerNew+0xf4>)
 8010000:	9300      	str	r3, [sp, #0]
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	69fa      	ldr	r2, [r7, #28]
 8010006:	2101      	movs	r1, #1
 8010008:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801000a:	f002 ffca 	bl	8012fa2 <xTimerCreateStatic>
 801000e:	6238      	str	r0, [r7, #32]
 8010010:	e00b      	b.n	801002a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8010012:	69bb      	ldr	r3, [r7, #24]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d108      	bne.n	801002a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8010018:	4b0b      	ldr	r3, [pc, #44]	@ (8010048 <osTimerNew+0xf4>)
 801001a:	9300      	str	r3, [sp, #0]
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	69fa      	ldr	r2, [r7, #28]
 8010020:	2101      	movs	r1, #1
 8010022:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010024:	f002 ff9c 	bl	8012f60 <xTimerCreate>
 8010028:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 801002a:	6a3b      	ldr	r3, [r7, #32]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d105      	bne.n	801003c <osTimerNew+0xe8>
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	2b00      	cmp	r3, #0
 8010034:	d002      	beq.n	801003c <osTimerNew+0xe8>
        vPortFree (callb);
 8010036:	6978      	ldr	r0, [r7, #20]
 8010038:	f003 fe86 	bl	8013d48 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 801003c:	6a3b      	ldr	r3, [r7, #32]
}
 801003e:	4618      	mov	r0, r3
 8010040:	3728      	adds	r7, #40	@ 0x28
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}
 8010046:	bf00      	nop
 8010048:	0800ff29 	.word	0x0800ff29

0801004c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801004c:	b580      	push	{r7, lr}
 801004e:	b08a      	sub	sp, #40	@ 0x28
 8010050:	af02      	add	r7, sp, #8
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010058:	2300      	movs	r3, #0
 801005a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801005c:	f3ef 8305 	mrs	r3, IPSR
 8010060:	613b      	str	r3, [r7, #16]
  return(result);
 8010062:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010064:	2b00      	cmp	r3, #0
 8010066:	d175      	bne.n	8010154 <osSemaphoreNew+0x108>
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d072      	beq.n	8010154 <osSemaphoreNew+0x108>
 801006e:	68ba      	ldr	r2, [r7, #8]
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	429a      	cmp	r2, r3
 8010074:	d86e      	bhi.n	8010154 <osSemaphoreNew+0x108>
    mem = -1;
 8010076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801007a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d015      	beq.n	80100ae <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	689b      	ldr	r3, [r3, #8]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d006      	beq.n	8010098 <osSemaphoreNew+0x4c>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	68db      	ldr	r3, [r3, #12]
 801008e:	2b4f      	cmp	r3, #79	@ 0x4f
 8010090:	d902      	bls.n	8010098 <osSemaphoreNew+0x4c>
        mem = 1;
 8010092:	2301      	movs	r3, #1
 8010094:	61bb      	str	r3, [r7, #24]
 8010096:	e00c      	b.n	80100b2 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	689b      	ldr	r3, [r3, #8]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d108      	bne.n	80100b2 <osSemaphoreNew+0x66>
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d104      	bne.n	80100b2 <osSemaphoreNew+0x66>
          mem = 0;
 80100a8:	2300      	movs	r3, #0
 80100aa:	61bb      	str	r3, [r7, #24]
 80100ac:	e001      	b.n	80100b2 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80100ae:	2300      	movs	r3, #0
 80100b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80100b2:	69bb      	ldr	r3, [r7, #24]
 80100b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80100b8:	d04c      	beq.n	8010154 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d128      	bne.n	8010112 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80100c0:	69bb      	ldr	r3, [r7, #24]
 80100c2:	2b01      	cmp	r3, #1
 80100c4:	d10a      	bne.n	80100dc <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	689b      	ldr	r3, [r3, #8]
 80100ca:	2203      	movs	r2, #3
 80100cc:	9200      	str	r2, [sp, #0]
 80100ce:	2200      	movs	r2, #0
 80100d0:	2100      	movs	r1, #0
 80100d2:	2001      	movs	r0, #1
 80100d4:	f000 fb5e 	bl	8010794 <xQueueGenericCreateStatic>
 80100d8:	61f8      	str	r0, [r7, #28]
 80100da:	e005      	b.n	80100e8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80100dc:	2203      	movs	r2, #3
 80100de:	2100      	movs	r1, #0
 80100e0:	2001      	movs	r0, #1
 80100e2:	f000 fbd4 	bl	801088e <xQueueGenericCreate>
 80100e6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d022      	beq.n	8010134 <osSemaphoreNew+0xe8>
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d01f      	beq.n	8010134 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80100f4:	2300      	movs	r3, #0
 80100f6:	2200      	movs	r2, #0
 80100f8:	2100      	movs	r1, #0
 80100fa:	69f8      	ldr	r0, [r7, #28]
 80100fc:	f000 fc94 	bl	8010a28 <xQueueGenericSend>
 8010100:	4603      	mov	r3, r0
 8010102:	2b01      	cmp	r3, #1
 8010104:	d016      	beq.n	8010134 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8010106:	69f8      	ldr	r0, [r7, #28]
 8010108:	f001 f932 	bl	8011370 <vQueueDelete>
            hSemaphore = NULL;
 801010c:	2300      	movs	r3, #0
 801010e:	61fb      	str	r3, [r7, #28]
 8010110:	e010      	b.n	8010134 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	2b01      	cmp	r3, #1
 8010116:	d108      	bne.n	801012a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	689b      	ldr	r3, [r3, #8]
 801011c:	461a      	mov	r2, r3
 801011e:	68b9      	ldr	r1, [r7, #8]
 8010120:	68f8      	ldr	r0, [r7, #12]
 8010122:	f000 fc12 	bl	801094a <xQueueCreateCountingSemaphoreStatic>
 8010126:	61f8      	str	r0, [r7, #28]
 8010128:	e004      	b.n	8010134 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801012a:	68b9      	ldr	r1, [r7, #8]
 801012c:	68f8      	ldr	r0, [r7, #12]
 801012e:	f000 fc45 	bl	80109bc <xQueueCreateCountingSemaphore>
 8010132:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010134:	69fb      	ldr	r3, [r7, #28]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d00c      	beq.n	8010154 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d003      	beq.n	8010148 <osSemaphoreNew+0xfc>
          name = attr->name;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	617b      	str	r3, [r7, #20]
 8010146:	e001      	b.n	801014c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8010148:	2300      	movs	r3, #0
 801014a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801014c:	6979      	ldr	r1, [r7, #20]
 801014e:	69f8      	ldr	r0, [r7, #28]
 8010150:	f001 fa5a 	bl	8011608 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010154:	69fb      	ldr	r3, [r7, #28]
}
 8010156:	4618      	mov	r0, r3
 8010158:	3720      	adds	r7, #32
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}
	...

08010160 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010160:	b580      	push	{r7, lr}
 8010162:	b086      	sub	sp, #24
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801016e:	2300      	movs	r3, #0
 8010170:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d103      	bne.n	8010180 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010178:	f06f 0303 	mvn.w	r3, #3
 801017c:	617b      	str	r3, [r7, #20]
 801017e:	e039      	b.n	80101f4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010180:	f3ef 8305 	mrs	r3, IPSR
 8010184:	60fb      	str	r3, [r7, #12]
  return(result);
 8010186:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010188:	2b00      	cmp	r3, #0
 801018a:	d022      	beq.n	80101d2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d003      	beq.n	801019a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8010192:	f06f 0303 	mvn.w	r3, #3
 8010196:	617b      	str	r3, [r7, #20]
 8010198:	e02c      	b.n	80101f4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801019a:	2300      	movs	r3, #0
 801019c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801019e:	f107 0308 	add.w	r3, r7, #8
 80101a2:	461a      	mov	r2, r3
 80101a4:	2100      	movs	r1, #0
 80101a6:	6938      	ldr	r0, [r7, #16]
 80101a8:	f001 f860 	bl	801126c <xQueueReceiveFromISR>
 80101ac:	4603      	mov	r3, r0
 80101ae:	2b01      	cmp	r3, #1
 80101b0:	d003      	beq.n	80101ba <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80101b2:	f06f 0302 	mvn.w	r3, #2
 80101b6:	617b      	str	r3, [r7, #20]
 80101b8:	e01c      	b.n	80101f4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d019      	beq.n	80101f4 <osSemaphoreAcquire+0x94>
 80101c0:	4b0f      	ldr	r3, [pc, #60]	@ (8010200 <osSemaphoreAcquire+0xa0>)
 80101c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80101c6:	601a      	str	r2, [r3, #0]
 80101c8:	f3bf 8f4f 	dsb	sy
 80101cc:	f3bf 8f6f 	isb	sy
 80101d0:	e010      	b.n	80101f4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80101d2:	6839      	ldr	r1, [r7, #0]
 80101d4:	6938      	ldr	r0, [r7, #16]
 80101d6:	f000 ff39 	bl	801104c <xQueueSemaphoreTake>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d009      	beq.n	80101f4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d003      	beq.n	80101ee <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80101e6:	f06f 0301 	mvn.w	r3, #1
 80101ea:	617b      	str	r3, [r7, #20]
 80101ec:	e002      	b.n	80101f4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80101ee:	f06f 0302 	mvn.w	r3, #2
 80101f2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80101f4:	697b      	ldr	r3, [r7, #20]
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3718      	adds	r7, #24
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
 80101fe:	bf00      	nop
 8010200:	e000ed04 	.word	0xe000ed04

08010204 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010204:	b580      	push	{r7, lr}
 8010206:	b086      	sub	sp, #24
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010210:	2300      	movs	r3, #0
 8010212:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d103      	bne.n	8010222 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801021a:	f06f 0303 	mvn.w	r3, #3
 801021e:	617b      	str	r3, [r7, #20]
 8010220:	e02c      	b.n	801027c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010222:	f3ef 8305 	mrs	r3, IPSR
 8010226:	60fb      	str	r3, [r7, #12]
  return(result);
 8010228:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801022a:	2b00      	cmp	r3, #0
 801022c:	d01a      	beq.n	8010264 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801022e:	2300      	movs	r3, #0
 8010230:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010232:	f107 0308 	add.w	r3, r7, #8
 8010236:	4619      	mov	r1, r3
 8010238:	6938      	ldr	r0, [r7, #16]
 801023a:	f000 fd95 	bl	8010d68 <xQueueGiveFromISR>
 801023e:	4603      	mov	r3, r0
 8010240:	2b01      	cmp	r3, #1
 8010242:	d003      	beq.n	801024c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8010244:	f06f 0302 	mvn.w	r3, #2
 8010248:	617b      	str	r3, [r7, #20]
 801024a:	e017      	b.n	801027c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d014      	beq.n	801027c <osSemaphoreRelease+0x78>
 8010252:	4b0d      	ldr	r3, [pc, #52]	@ (8010288 <osSemaphoreRelease+0x84>)
 8010254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010258:	601a      	str	r2, [r3, #0]
 801025a:	f3bf 8f4f 	dsb	sy
 801025e:	f3bf 8f6f 	isb	sy
 8010262:	e00b      	b.n	801027c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010264:	2300      	movs	r3, #0
 8010266:	2200      	movs	r2, #0
 8010268:	2100      	movs	r1, #0
 801026a:	6938      	ldr	r0, [r7, #16]
 801026c:	f000 fbdc 	bl	8010a28 <xQueueGenericSend>
 8010270:	4603      	mov	r3, r0
 8010272:	2b01      	cmp	r3, #1
 8010274:	d002      	beq.n	801027c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8010276:	f06f 0302 	mvn.w	r3, #2
 801027a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801027c:	697b      	ldr	r3, [r7, #20]
}
 801027e:	4618      	mov	r0, r3
 8010280:	3718      	adds	r7, #24
 8010282:	46bd      	mov	sp, r7
 8010284:	bd80      	pop	{r7, pc}
 8010286:	bf00      	nop
 8010288:	e000ed04 	.word	0xe000ed04

0801028c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801028c:	b580      	push	{r7, lr}
 801028e:	b08a      	sub	sp, #40	@ 0x28
 8010290:	af02      	add	r7, sp, #8
 8010292:	60f8      	str	r0, [r7, #12]
 8010294:	60b9      	str	r1, [r7, #8]
 8010296:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010298:	2300      	movs	r3, #0
 801029a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801029c:	f3ef 8305 	mrs	r3, IPSR
 80102a0:	613b      	str	r3, [r7, #16]
  return(result);
 80102a2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d15f      	bne.n	8010368 <osMessageQueueNew+0xdc>
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d05c      	beq.n	8010368 <osMessageQueueNew+0xdc>
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d059      	beq.n	8010368 <osMessageQueueNew+0xdc>
    mem = -1;
 80102b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80102b8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d029      	beq.n	8010314 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	689b      	ldr	r3, [r3, #8]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d012      	beq.n	80102ee <osMessageQueueNew+0x62>
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	2b4f      	cmp	r3, #79	@ 0x4f
 80102ce:	d90e      	bls.n	80102ee <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d00a      	beq.n	80102ee <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	695a      	ldr	r2, [r3, #20]
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	68b9      	ldr	r1, [r7, #8]
 80102e0:	fb01 f303 	mul.w	r3, r1, r3
 80102e4:	429a      	cmp	r2, r3
 80102e6:	d302      	bcc.n	80102ee <osMessageQueueNew+0x62>
        mem = 1;
 80102e8:	2301      	movs	r3, #1
 80102ea:	61bb      	str	r3, [r7, #24]
 80102ec:	e014      	b.n	8010318 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	689b      	ldr	r3, [r3, #8]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d110      	bne.n	8010318 <osMessageQueueNew+0x8c>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	68db      	ldr	r3, [r3, #12]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d10c      	bne.n	8010318 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8010302:	2b00      	cmp	r3, #0
 8010304:	d108      	bne.n	8010318 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	695b      	ldr	r3, [r3, #20]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d104      	bne.n	8010318 <osMessageQueueNew+0x8c>
          mem = 0;
 801030e:	2300      	movs	r3, #0
 8010310:	61bb      	str	r3, [r7, #24]
 8010312:	e001      	b.n	8010318 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8010314:	2300      	movs	r3, #0
 8010316:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010318:	69bb      	ldr	r3, [r7, #24]
 801031a:	2b01      	cmp	r3, #1
 801031c:	d10b      	bne.n	8010336 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	691a      	ldr	r2, [r3, #16]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	689b      	ldr	r3, [r3, #8]
 8010326:	2100      	movs	r1, #0
 8010328:	9100      	str	r1, [sp, #0]
 801032a:	68b9      	ldr	r1, [r7, #8]
 801032c:	68f8      	ldr	r0, [r7, #12]
 801032e:	f000 fa31 	bl	8010794 <xQueueGenericCreateStatic>
 8010332:	61f8      	str	r0, [r7, #28]
 8010334:	e008      	b.n	8010348 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8010336:	69bb      	ldr	r3, [r7, #24]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d105      	bne.n	8010348 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 801033c:	2200      	movs	r2, #0
 801033e:	68b9      	ldr	r1, [r7, #8]
 8010340:	68f8      	ldr	r0, [r7, #12]
 8010342:	f000 faa4 	bl	801088e <xQueueGenericCreate>
 8010346:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d00c      	beq.n	8010368 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d003      	beq.n	801035c <osMessageQueueNew+0xd0>
        name = attr->name;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	617b      	str	r3, [r7, #20]
 801035a:	e001      	b.n	8010360 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 801035c:	2300      	movs	r3, #0
 801035e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8010360:	6979      	ldr	r1, [r7, #20]
 8010362:	69f8      	ldr	r0, [r7, #28]
 8010364:	f001 f950 	bl	8011608 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8010368:	69fb      	ldr	r3, [r7, #28]
}
 801036a:	4618      	mov	r0, r3
 801036c:	3720      	adds	r7, #32
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}
	...

08010374 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010374:	b580      	push	{r7, lr}
 8010376:	b088      	sub	sp, #32
 8010378:	af00      	add	r7, sp, #0
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	603b      	str	r3, [r7, #0]
 8010380:	4613      	mov	r3, r2
 8010382:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010388:	2300      	movs	r3, #0
 801038a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801038c:	f3ef 8305 	mrs	r3, IPSR
 8010390:	617b      	str	r3, [r7, #20]
  return(result);
 8010392:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010394:	2b00      	cmp	r3, #0
 8010396:	d028      	beq.n	80103ea <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010398:	69bb      	ldr	r3, [r7, #24]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d005      	beq.n	80103aa <osMessageQueuePut+0x36>
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d002      	beq.n	80103aa <osMessageQueuePut+0x36>
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d003      	beq.n	80103b2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80103aa:	f06f 0303 	mvn.w	r3, #3
 80103ae:	61fb      	str	r3, [r7, #28]
 80103b0:	e038      	b.n	8010424 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80103b2:	2300      	movs	r3, #0
 80103b4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80103b6:	f107 0210 	add.w	r2, r7, #16
 80103ba:	2300      	movs	r3, #0
 80103bc:	68b9      	ldr	r1, [r7, #8]
 80103be:	69b8      	ldr	r0, [r7, #24]
 80103c0:	f000 fc34 	bl	8010c2c <xQueueGenericSendFromISR>
 80103c4:	4603      	mov	r3, r0
 80103c6:	2b01      	cmp	r3, #1
 80103c8:	d003      	beq.n	80103d2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80103ca:	f06f 0302 	mvn.w	r3, #2
 80103ce:	61fb      	str	r3, [r7, #28]
 80103d0:	e028      	b.n	8010424 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d025      	beq.n	8010424 <osMessageQueuePut+0xb0>
 80103d8:	4b15      	ldr	r3, [pc, #84]	@ (8010430 <osMessageQueuePut+0xbc>)
 80103da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103de:	601a      	str	r2, [r3, #0]
 80103e0:	f3bf 8f4f 	dsb	sy
 80103e4:	f3bf 8f6f 	isb	sy
 80103e8:	e01c      	b.n	8010424 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80103ea:	69bb      	ldr	r3, [r7, #24]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d002      	beq.n	80103f6 <osMessageQueuePut+0x82>
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d103      	bne.n	80103fe <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80103f6:	f06f 0303 	mvn.w	r3, #3
 80103fa:	61fb      	str	r3, [r7, #28]
 80103fc:	e012      	b.n	8010424 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80103fe:	2300      	movs	r3, #0
 8010400:	683a      	ldr	r2, [r7, #0]
 8010402:	68b9      	ldr	r1, [r7, #8]
 8010404:	69b8      	ldr	r0, [r7, #24]
 8010406:	f000 fb0f 	bl	8010a28 <xQueueGenericSend>
 801040a:	4603      	mov	r3, r0
 801040c:	2b01      	cmp	r3, #1
 801040e:	d009      	beq.n	8010424 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d003      	beq.n	801041e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8010416:	f06f 0301 	mvn.w	r3, #1
 801041a:	61fb      	str	r3, [r7, #28]
 801041c:	e002      	b.n	8010424 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 801041e:	f06f 0302 	mvn.w	r3, #2
 8010422:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8010424:	69fb      	ldr	r3, [r7, #28]
}
 8010426:	4618      	mov	r0, r3
 8010428:	3720      	adds	r7, #32
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	e000ed04 	.word	0xe000ed04

08010434 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8010434:	b580      	push	{r7, lr}
 8010436:	b088      	sub	sp, #32
 8010438:	af00      	add	r7, sp, #0
 801043a:	60f8      	str	r0, [r7, #12]
 801043c:	60b9      	str	r1, [r7, #8]
 801043e:	607a      	str	r2, [r7, #4]
 8010440:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010446:	2300      	movs	r3, #0
 8010448:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801044a:	f3ef 8305 	mrs	r3, IPSR
 801044e:	617b      	str	r3, [r7, #20]
  return(result);
 8010450:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010452:	2b00      	cmp	r3, #0
 8010454:	d028      	beq.n	80104a8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010456:	69bb      	ldr	r3, [r7, #24]
 8010458:	2b00      	cmp	r3, #0
 801045a:	d005      	beq.n	8010468 <osMessageQueueGet+0x34>
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d002      	beq.n	8010468 <osMessageQueueGet+0x34>
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d003      	beq.n	8010470 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8010468:	f06f 0303 	mvn.w	r3, #3
 801046c:	61fb      	str	r3, [r7, #28]
 801046e:	e037      	b.n	80104e0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8010470:	2300      	movs	r3, #0
 8010472:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010474:	f107 0310 	add.w	r3, r7, #16
 8010478:	461a      	mov	r2, r3
 801047a:	68b9      	ldr	r1, [r7, #8]
 801047c:	69b8      	ldr	r0, [r7, #24]
 801047e:	f000 fef5 	bl	801126c <xQueueReceiveFromISR>
 8010482:	4603      	mov	r3, r0
 8010484:	2b01      	cmp	r3, #1
 8010486:	d003      	beq.n	8010490 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010488:	f06f 0302 	mvn.w	r3, #2
 801048c:	61fb      	str	r3, [r7, #28]
 801048e:	e027      	b.n	80104e0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d024      	beq.n	80104e0 <osMessageQueueGet+0xac>
 8010496:	4b15      	ldr	r3, [pc, #84]	@ (80104ec <osMessageQueueGet+0xb8>)
 8010498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801049c:	601a      	str	r2, [r3, #0]
 801049e:	f3bf 8f4f 	dsb	sy
 80104a2:	f3bf 8f6f 	isb	sy
 80104a6:	e01b      	b.n	80104e0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80104a8:	69bb      	ldr	r3, [r7, #24]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d002      	beq.n	80104b4 <osMessageQueueGet+0x80>
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d103      	bne.n	80104bc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80104b4:	f06f 0303 	mvn.w	r3, #3
 80104b8:	61fb      	str	r3, [r7, #28]
 80104ba:	e011      	b.n	80104e0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80104bc:	683a      	ldr	r2, [r7, #0]
 80104be:	68b9      	ldr	r1, [r7, #8]
 80104c0:	69b8      	ldr	r0, [r7, #24]
 80104c2:	f000 fce1 	bl	8010e88 <xQueueReceive>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d009      	beq.n	80104e0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80104cc:	683b      	ldr	r3, [r7, #0]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d003      	beq.n	80104da <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80104d2:	f06f 0301 	mvn.w	r3, #1
 80104d6:	61fb      	str	r3, [r7, #28]
 80104d8:	e002      	b.n	80104e0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80104da:	f06f 0302 	mvn.w	r3, #2
 80104de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80104e0:	69fb      	ldr	r3, [r7, #28]
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3720      	adds	r7, #32
 80104e6:	46bd      	mov	sp, r7
 80104e8:	bd80      	pop	{r7, pc}
 80104ea:	bf00      	nop
 80104ec:	e000ed04 	.word	0xe000ed04

080104f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80104f0:	b480      	push	{r7}
 80104f2:	b085      	sub	sp, #20
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	60f8      	str	r0, [r7, #12]
 80104f8:	60b9      	str	r1, [r7, #8]
 80104fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	4a07      	ldr	r2, [pc, #28]	@ (801051c <vApplicationGetIdleTaskMemory+0x2c>)
 8010500:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	4a06      	ldr	r2, [pc, #24]	@ (8010520 <vApplicationGetIdleTaskMemory+0x30>)
 8010506:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2280      	movs	r2, #128	@ 0x80
 801050c:	601a      	str	r2, [r3, #0]
}
 801050e:	bf00      	nop
 8010510:	3714      	adds	r7, #20
 8010512:	46bd      	mov	sp, r7
 8010514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010518:	4770      	bx	lr
 801051a:	bf00      	nop
 801051c:	24000c7c 	.word	0x24000c7c
 8010520:	24000d24 	.word	0x24000d24

08010524 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010524:	b480      	push	{r7}
 8010526:	b085      	sub	sp, #20
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	60b9      	str	r1, [r7, #8]
 801052e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	4a07      	ldr	r2, [pc, #28]	@ (8010550 <vApplicationGetTimerTaskMemory+0x2c>)
 8010534:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	4a06      	ldr	r2, [pc, #24]	@ (8010554 <vApplicationGetTimerTaskMemory+0x30>)
 801053a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010542:	601a      	str	r2, [r3, #0]
}
 8010544:	bf00      	nop
 8010546:	3714      	adds	r7, #20
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr
 8010550:	24000f24 	.word	0x24000f24
 8010554:	24000fcc 	.word	0x24000fcc

08010558 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010558:	b480      	push	{r7}
 801055a:	b083      	sub	sp, #12
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f103 0208 	add.w	r2, r3, #8
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010570:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f103 0208 	add.w	r2, r3, #8
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f103 0208 	add.w	r2, r3, #8
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2200      	movs	r2, #0
 801058a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801058c:	bf00      	nop
 801058e:	370c      	adds	r7, #12
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr

08010598 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010598:	b480      	push	{r7}
 801059a:	b083      	sub	sp, #12
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2200      	movs	r2, #0
 80105a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80105a6:	bf00      	nop
 80105a8:	370c      	adds	r7, #12
 80105aa:	46bd      	mov	sp, r7
 80105ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b0:	4770      	bx	lr

080105b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80105b2:	b480      	push	{r7}
 80105b4:	b085      	sub	sp, #20
 80105b6:	af00      	add	r7, sp, #0
 80105b8:	6078      	str	r0, [r7, #4]
 80105ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	685b      	ldr	r3, [r3, #4]
 80105c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	68fa      	ldr	r2, [r7, #12]
 80105c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	689a      	ldr	r2, [r3, #8]
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	689b      	ldr	r3, [r3, #8]
 80105d4:	683a      	ldr	r2, [r7, #0]
 80105d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	683a      	ldr	r2, [r7, #0]
 80105dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	687a      	ldr	r2, [r7, #4]
 80105e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	1c5a      	adds	r2, r3, #1
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	601a      	str	r2, [r3, #0]
}
 80105ee:	bf00      	nop
 80105f0:	3714      	adds	r7, #20
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr

080105fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80105fa:	b480      	push	{r7}
 80105fc:	b085      	sub	sp, #20
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
 8010602:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010610:	d103      	bne.n	801061a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	691b      	ldr	r3, [r3, #16]
 8010616:	60fb      	str	r3, [r7, #12]
 8010618:	e00c      	b.n	8010634 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	3308      	adds	r3, #8
 801061e:	60fb      	str	r3, [r7, #12]
 8010620:	e002      	b.n	8010628 <vListInsert+0x2e>
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	60fb      	str	r3, [r7, #12]
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	68ba      	ldr	r2, [r7, #8]
 8010630:	429a      	cmp	r2, r3
 8010632:	d2f6      	bcs.n	8010622 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	685a      	ldr	r2, [r3, #4]
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	685b      	ldr	r3, [r3, #4]
 8010640:	683a      	ldr	r2, [r7, #0]
 8010642:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	68fa      	ldr	r2, [r7, #12]
 8010648:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	683a      	ldr	r2, [r7, #0]
 801064e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	687a      	ldr	r2, [r7, #4]
 8010654:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	1c5a      	adds	r2, r3, #1
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	601a      	str	r2, [r3, #0]
}
 8010660:	bf00      	nop
 8010662:	3714      	adds	r7, #20
 8010664:	46bd      	mov	sp, r7
 8010666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066a:	4770      	bx	lr

0801066c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801066c:	b480      	push	{r7}
 801066e:	b085      	sub	sp, #20
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	691b      	ldr	r3, [r3, #16]
 8010678:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	685b      	ldr	r3, [r3, #4]
 801067e:	687a      	ldr	r2, [r7, #4]
 8010680:	6892      	ldr	r2, [r2, #8]
 8010682:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	689b      	ldr	r3, [r3, #8]
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	6852      	ldr	r2, [r2, #4]
 801068c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	685b      	ldr	r3, [r3, #4]
 8010692:	687a      	ldr	r2, [r7, #4]
 8010694:	429a      	cmp	r2, r3
 8010696:	d103      	bne.n	80106a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	689a      	ldr	r2, [r3, #8]
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2200      	movs	r2, #0
 80106a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	1e5a      	subs	r2, r3, #1
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	681b      	ldr	r3, [r3, #0]
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3714      	adds	r7, #20
 80106b8:	46bd      	mov	sp, r7
 80106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106be:	4770      	bx	lr

080106c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b084      	sub	sp, #16
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d10b      	bne.n	80106ec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80106d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106d8:	f383 8811 	msr	BASEPRI, r3
 80106dc:	f3bf 8f6f 	isb	sy
 80106e0:	f3bf 8f4f 	dsb	sy
 80106e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80106e6:	bf00      	nop
 80106e8:	bf00      	nop
 80106ea:	e7fd      	b.n	80106e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80106ec:	f003 f93c 	bl	8013968 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106f8:	68f9      	ldr	r1, [r7, #12]
 80106fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80106fc:	fb01 f303 	mul.w	r3, r1, r3
 8010700:	441a      	add	r2, r3
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2200      	movs	r2, #0
 801070a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681a      	ldr	r2, [r3, #0]
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801071c:	3b01      	subs	r3, #1
 801071e:	68f9      	ldr	r1, [r7, #12]
 8010720:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010722:	fb01 f303 	mul.w	r3, r1, r3
 8010726:	441a      	add	r2, r3
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	22ff      	movs	r2, #255	@ 0xff
 8010730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	22ff      	movs	r2, #255	@ 0xff
 8010738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d114      	bne.n	801076c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	691b      	ldr	r3, [r3, #16]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d01a      	beq.n	8010780 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	3310      	adds	r3, #16
 801074e:	4618      	mov	r0, r3
 8010750:	f001 fd7a 	bl	8012248 <xTaskRemoveFromEventList>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d012      	beq.n	8010780 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801075a:	4b0d      	ldr	r3, [pc, #52]	@ (8010790 <xQueueGenericReset+0xd0>)
 801075c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010760:	601a      	str	r2, [r3, #0]
 8010762:	f3bf 8f4f 	dsb	sy
 8010766:	f3bf 8f6f 	isb	sy
 801076a:	e009      	b.n	8010780 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	3310      	adds	r3, #16
 8010770:	4618      	mov	r0, r3
 8010772:	f7ff fef1 	bl	8010558 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	3324      	adds	r3, #36	@ 0x24
 801077a:	4618      	mov	r0, r3
 801077c:	f7ff feec 	bl	8010558 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010780:	f003 f924 	bl	80139cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010784:	2301      	movs	r3, #1
}
 8010786:	4618      	mov	r0, r3
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	e000ed04 	.word	0xe000ed04

08010794 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010794:	b580      	push	{r7, lr}
 8010796:	b08e      	sub	sp, #56	@ 0x38
 8010798:	af02      	add	r7, sp, #8
 801079a:	60f8      	str	r0, [r7, #12]
 801079c:	60b9      	str	r1, [r7, #8]
 801079e:	607a      	str	r2, [r7, #4]
 80107a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d10b      	bne.n	80107c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80107a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107ac:	f383 8811 	msr	BASEPRI, r3
 80107b0:	f3bf 8f6f 	isb	sy
 80107b4:	f3bf 8f4f 	dsb	sy
 80107b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80107ba:	bf00      	nop
 80107bc:	bf00      	nop
 80107be:	e7fd      	b.n	80107bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d10b      	bne.n	80107de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80107c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107ca:	f383 8811 	msr	BASEPRI, r3
 80107ce:	f3bf 8f6f 	isb	sy
 80107d2:	f3bf 8f4f 	dsb	sy
 80107d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80107d8:	bf00      	nop
 80107da:	bf00      	nop
 80107dc:	e7fd      	b.n	80107da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d002      	beq.n	80107ea <xQueueGenericCreateStatic+0x56>
 80107e4:	68bb      	ldr	r3, [r7, #8]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d001      	beq.n	80107ee <xQueueGenericCreateStatic+0x5a>
 80107ea:	2301      	movs	r3, #1
 80107ec:	e000      	b.n	80107f0 <xQueueGenericCreateStatic+0x5c>
 80107ee:	2300      	movs	r3, #0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d10b      	bne.n	801080c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80107f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107f8:	f383 8811 	msr	BASEPRI, r3
 80107fc:	f3bf 8f6f 	isb	sy
 8010800:	f3bf 8f4f 	dsb	sy
 8010804:	623b      	str	r3, [r7, #32]
}
 8010806:	bf00      	nop
 8010808:	bf00      	nop
 801080a:	e7fd      	b.n	8010808 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d102      	bne.n	8010818 <xQueueGenericCreateStatic+0x84>
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d101      	bne.n	801081c <xQueueGenericCreateStatic+0x88>
 8010818:	2301      	movs	r3, #1
 801081a:	e000      	b.n	801081e <xQueueGenericCreateStatic+0x8a>
 801081c:	2300      	movs	r3, #0
 801081e:	2b00      	cmp	r3, #0
 8010820:	d10b      	bne.n	801083a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8010822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010826:	f383 8811 	msr	BASEPRI, r3
 801082a:	f3bf 8f6f 	isb	sy
 801082e:	f3bf 8f4f 	dsb	sy
 8010832:	61fb      	str	r3, [r7, #28]
}
 8010834:	bf00      	nop
 8010836:	bf00      	nop
 8010838:	e7fd      	b.n	8010836 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801083a:	2350      	movs	r3, #80	@ 0x50
 801083c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	2b50      	cmp	r3, #80	@ 0x50
 8010842:	d00b      	beq.n	801085c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8010844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010848:	f383 8811 	msr	BASEPRI, r3
 801084c:	f3bf 8f6f 	isb	sy
 8010850:	f3bf 8f4f 	dsb	sy
 8010854:	61bb      	str	r3, [r7, #24]
}
 8010856:	bf00      	nop
 8010858:	bf00      	nop
 801085a:	e7fd      	b.n	8010858 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801085c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8010862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010864:	2b00      	cmp	r3, #0
 8010866:	d00d      	beq.n	8010884 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801086a:	2201      	movs	r2, #1
 801086c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010870:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8010874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010876:	9300      	str	r3, [sp, #0]
 8010878:	4613      	mov	r3, r2
 801087a:	687a      	ldr	r2, [r7, #4]
 801087c:	68b9      	ldr	r1, [r7, #8]
 801087e:	68f8      	ldr	r0, [r7, #12]
 8010880:	f000 f840 	bl	8010904 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8010886:	4618      	mov	r0, r3
 8010888:	3730      	adds	r7, #48	@ 0x30
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}

0801088e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801088e:	b580      	push	{r7, lr}
 8010890:	b08a      	sub	sp, #40	@ 0x28
 8010892:	af02      	add	r7, sp, #8
 8010894:	60f8      	str	r0, [r7, #12]
 8010896:	60b9      	str	r1, [r7, #8]
 8010898:	4613      	mov	r3, r2
 801089a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d10b      	bne.n	80108ba <xQueueGenericCreate+0x2c>
	__asm volatile
 80108a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108a6:	f383 8811 	msr	BASEPRI, r3
 80108aa:	f3bf 8f6f 	isb	sy
 80108ae:	f3bf 8f4f 	dsb	sy
 80108b2:	613b      	str	r3, [r7, #16]
}
 80108b4:	bf00      	nop
 80108b6:	bf00      	nop
 80108b8:	e7fd      	b.n	80108b6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	68ba      	ldr	r2, [r7, #8]
 80108be:	fb02 f303 	mul.w	r3, r2, r3
 80108c2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	3350      	adds	r3, #80	@ 0x50
 80108c8:	4618      	mov	r0, r3
 80108ca:	f003 f96f 	bl	8013bac <pvPortMalloc>
 80108ce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80108d0:	69bb      	ldr	r3, [r7, #24]
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d011      	beq.n	80108fa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80108d6:	69bb      	ldr	r3, [r7, #24]
 80108d8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80108da:	697b      	ldr	r3, [r7, #20]
 80108dc:	3350      	adds	r3, #80	@ 0x50
 80108de:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80108e0:	69bb      	ldr	r3, [r7, #24]
 80108e2:	2200      	movs	r2, #0
 80108e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80108e8:	79fa      	ldrb	r2, [r7, #7]
 80108ea:	69bb      	ldr	r3, [r7, #24]
 80108ec:	9300      	str	r3, [sp, #0]
 80108ee:	4613      	mov	r3, r2
 80108f0:	697a      	ldr	r2, [r7, #20]
 80108f2:	68b9      	ldr	r1, [r7, #8]
 80108f4:	68f8      	ldr	r0, [r7, #12]
 80108f6:	f000 f805 	bl	8010904 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80108fa:	69bb      	ldr	r3, [r7, #24]
	}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3720      	adds	r7, #32
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b084      	sub	sp, #16
 8010908:	af00      	add	r7, sp, #0
 801090a:	60f8      	str	r0, [r7, #12]
 801090c:	60b9      	str	r1, [r7, #8]
 801090e:	607a      	str	r2, [r7, #4]
 8010910:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d103      	bne.n	8010920 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010918:	69bb      	ldr	r3, [r7, #24]
 801091a:	69ba      	ldr	r2, [r7, #24]
 801091c:	601a      	str	r2, [r3, #0]
 801091e:	e002      	b.n	8010926 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010920:	69bb      	ldr	r3, [r7, #24]
 8010922:	687a      	ldr	r2, [r7, #4]
 8010924:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010926:	69bb      	ldr	r3, [r7, #24]
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801092c:	69bb      	ldr	r3, [r7, #24]
 801092e:	68ba      	ldr	r2, [r7, #8]
 8010930:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010932:	2101      	movs	r1, #1
 8010934:	69b8      	ldr	r0, [r7, #24]
 8010936:	f7ff fec3 	bl	80106c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	78fa      	ldrb	r2, [r7, #3]
 801093e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010942:	bf00      	nop
 8010944:	3710      	adds	r7, #16
 8010946:	46bd      	mov	sp, r7
 8010948:	bd80      	pop	{r7, pc}

0801094a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801094a:	b580      	push	{r7, lr}
 801094c:	b08a      	sub	sp, #40	@ 0x28
 801094e:	af02      	add	r7, sp, #8
 8010950:	60f8      	str	r0, [r7, #12]
 8010952:	60b9      	str	r1, [r7, #8]
 8010954:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d10b      	bne.n	8010974 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 801095c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010960:	f383 8811 	msr	BASEPRI, r3
 8010964:	f3bf 8f6f 	isb	sy
 8010968:	f3bf 8f4f 	dsb	sy
 801096c:	61bb      	str	r3, [r7, #24]
}
 801096e:	bf00      	nop
 8010970:	bf00      	nop
 8010972:	e7fd      	b.n	8010970 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010974:	68ba      	ldr	r2, [r7, #8]
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	429a      	cmp	r2, r3
 801097a:	d90b      	bls.n	8010994 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 801097c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010980:	f383 8811 	msr	BASEPRI, r3
 8010984:	f3bf 8f6f 	isb	sy
 8010988:	f3bf 8f4f 	dsb	sy
 801098c:	617b      	str	r3, [r7, #20]
}
 801098e:	bf00      	nop
 8010990:	bf00      	nop
 8010992:	e7fd      	b.n	8010990 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010994:	2302      	movs	r3, #2
 8010996:	9300      	str	r3, [sp, #0]
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2200      	movs	r2, #0
 801099c:	2100      	movs	r1, #0
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	f7ff fef8 	bl	8010794 <xQueueGenericCreateStatic>
 80109a4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80109a6:	69fb      	ldr	r3, [r7, #28]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d002      	beq.n	80109b2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	68ba      	ldr	r2, [r7, #8]
 80109b0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80109b2:	69fb      	ldr	r3, [r7, #28]
	}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3720      	adds	r7, #32
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}

080109bc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b086      	sub	sp, #24
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d10b      	bne.n	80109e4 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 80109cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109d0:	f383 8811 	msr	BASEPRI, r3
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	f3bf 8f4f 	dsb	sy
 80109dc:	613b      	str	r3, [r7, #16]
}
 80109de:	bf00      	nop
 80109e0:	bf00      	nop
 80109e2:	e7fd      	b.n	80109e0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80109e4:	683a      	ldr	r2, [r7, #0]
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d90b      	bls.n	8010a04 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 80109ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109f0:	f383 8811 	msr	BASEPRI, r3
 80109f4:	f3bf 8f6f 	isb	sy
 80109f8:	f3bf 8f4f 	dsb	sy
 80109fc:	60fb      	str	r3, [r7, #12]
}
 80109fe:	bf00      	nop
 8010a00:	bf00      	nop
 8010a02:	e7fd      	b.n	8010a00 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010a04:	2202      	movs	r2, #2
 8010a06:	2100      	movs	r1, #0
 8010a08:	6878      	ldr	r0, [r7, #4]
 8010a0a:	f7ff ff40 	bl	801088e <xQueueGenericCreate>
 8010a0e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d002      	beq.n	8010a1c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	683a      	ldr	r2, [r7, #0]
 8010a1a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010a1c:	697b      	ldr	r3, [r7, #20]
	}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3718      	adds	r7, #24
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
	...

08010a28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b08e      	sub	sp, #56	@ 0x38
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	60f8      	str	r0, [r7, #12]
 8010a30:	60b9      	str	r1, [r7, #8]
 8010a32:	607a      	str	r2, [r7, #4]
 8010a34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010a36:	2300      	movs	r3, #0
 8010a38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d10b      	bne.n	8010a5c <xQueueGenericSend+0x34>
	__asm volatile
 8010a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a48:	f383 8811 	msr	BASEPRI, r3
 8010a4c:	f3bf 8f6f 	isb	sy
 8010a50:	f3bf 8f4f 	dsb	sy
 8010a54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010a56:	bf00      	nop
 8010a58:	bf00      	nop
 8010a5a:	e7fd      	b.n	8010a58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d103      	bne.n	8010a6a <xQueueGenericSend+0x42>
 8010a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d101      	bne.n	8010a6e <xQueueGenericSend+0x46>
 8010a6a:	2301      	movs	r3, #1
 8010a6c:	e000      	b.n	8010a70 <xQueueGenericSend+0x48>
 8010a6e:	2300      	movs	r3, #0
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d10b      	bne.n	8010a8c <xQueueGenericSend+0x64>
	__asm volatile
 8010a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a78:	f383 8811 	msr	BASEPRI, r3
 8010a7c:	f3bf 8f6f 	isb	sy
 8010a80:	f3bf 8f4f 	dsb	sy
 8010a84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010a86:	bf00      	nop
 8010a88:	bf00      	nop
 8010a8a:	e7fd      	b.n	8010a88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010a8c:	683b      	ldr	r3, [r7, #0]
 8010a8e:	2b02      	cmp	r3, #2
 8010a90:	d103      	bne.n	8010a9a <xQueueGenericSend+0x72>
 8010a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010a96:	2b01      	cmp	r3, #1
 8010a98:	d101      	bne.n	8010a9e <xQueueGenericSend+0x76>
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	e000      	b.n	8010aa0 <xQueueGenericSend+0x78>
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d10b      	bne.n	8010abc <xQueueGenericSend+0x94>
	__asm volatile
 8010aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aa8:	f383 8811 	msr	BASEPRI, r3
 8010aac:	f3bf 8f6f 	isb	sy
 8010ab0:	f3bf 8f4f 	dsb	sy
 8010ab4:	623b      	str	r3, [r7, #32]
}
 8010ab6:	bf00      	nop
 8010ab8:	bf00      	nop
 8010aba:	e7fd      	b.n	8010ab8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010abc:	f001 fd9a 	bl	80125f4 <xTaskGetSchedulerState>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d102      	bne.n	8010acc <xQueueGenericSend+0xa4>
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d101      	bne.n	8010ad0 <xQueueGenericSend+0xa8>
 8010acc:	2301      	movs	r3, #1
 8010ace:	e000      	b.n	8010ad2 <xQueueGenericSend+0xaa>
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d10b      	bne.n	8010aee <xQueueGenericSend+0xc6>
	__asm volatile
 8010ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ada:	f383 8811 	msr	BASEPRI, r3
 8010ade:	f3bf 8f6f 	isb	sy
 8010ae2:	f3bf 8f4f 	dsb	sy
 8010ae6:	61fb      	str	r3, [r7, #28]
}
 8010ae8:	bf00      	nop
 8010aea:	bf00      	nop
 8010aec:	e7fd      	b.n	8010aea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010aee:	f002 ff3b 	bl	8013968 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010af4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010af8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d302      	bcc.n	8010b04 <xQueueGenericSend+0xdc>
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	2b02      	cmp	r3, #2
 8010b02:	d129      	bne.n	8010b58 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b04:	683a      	ldr	r2, [r7, #0]
 8010b06:	68b9      	ldr	r1, [r7, #8]
 8010b08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010b0a:	f000 fc6d 	bl	80113e8 <prvCopyDataToQueue>
 8010b0e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d010      	beq.n	8010b3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b1a:	3324      	adds	r3, #36	@ 0x24
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f001 fb93 	bl	8012248 <xTaskRemoveFromEventList>
 8010b22:	4603      	mov	r3, r0
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d013      	beq.n	8010b50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010b28:	4b3f      	ldr	r3, [pc, #252]	@ (8010c28 <xQueueGenericSend+0x200>)
 8010b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b2e:	601a      	str	r2, [r3, #0]
 8010b30:	f3bf 8f4f 	dsb	sy
 8010b34:	f3bf 8f6f 	isb	sy
 8010b38:	e00a      	b.n	8010b50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d007      	beq.n	8010b50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010b40:	4b39      	ldr	r3, [pc, #228]	@ (8010c28 <xQueueGenericSend+0x200>)
 8010b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b46:	601a      	str	r2, [r3, #0]
 8010b48:	f3bf 8f4f 	dsb	sy
 8010b4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010b50:	f002 ff3c 	bl	80139cc <vPortExitCritical>
				return pdPASS;
 8010b54:	2301      	movs	r3, #1
 8010b56:	e063      	b.n	8010c20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d103      	bne.n	8010b66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010b5e:	f002 ff35 	bl	80139cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010b62:	2300      	movs	r3, #0
 8010b64:	e05c      	b.n	8010c20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d106      	bne.n	8010b7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b6c:	f107 0314 	add.w	r3, r7, #20
 8010b70:	4618      	mov	r0, r3
 8010b72:	f001 fbcd 	bl	8012310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b76:	2301      	movs	r3, #1
 8010b78:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b7a:	f002 ff27 	bl	80139cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b7e:	f001 f923 	bl	8011dc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b82:	f002 fef1 	bl	8013968 <vPortEnterCritical>
 8010b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010b8c:	b25b      	sxtb	r3, r3
 8010b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010b92:	d103      	bne.n	8010b9c <xQueueGenericSend+0x174>
 8010b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b96:	2200      	movs	r2, #0
 8010b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010ba2:	b25b      	sxtb	r3, r3
 8010ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010ba8:	d103      	bne.n	8010bb2 <xQueueGenericSend+0x18a>
 8010baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bac:	2200      	movs	r2, #0
 8010bae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010bb2:	f002 ff0b 	bl	80139cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010bb6:	1d3a      	adds	r2, r7, #4
 8010bb8:	f107 0314 	add.w	r3, r7, #20
 8010bbc:	4611      	mov	r1, r2
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f001 fbbc 	bl	801233c <xTaskCheckForTimeOut>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d124      	bne.n	8010c14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010bca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010bcc:	f000 fd04 	bl	80115d8 <prvIsQueueFull>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d018      	beq.n	8010c08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bd8:	3310      	adds	r3, #16
 8010bda:	687a      	ldr	r2, [r7, #4]
 8010bdc:	4611      	mov	r1, r2
 8010bde:	4618      	mov	r0, r3
 8010be0:	f001 fae0 	bl	80121a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010be4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010be6:	f000 fc8f 	bl	8011508 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010bea:	f001 f8fb 	bl	8011de4 <xTaskResumeAll>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	f47f af7c 	bne.w	8010aee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8010bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8010c28 <xQueueGenericSend+0x200>)
 8010bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bfc:	601a      	str	r2, [r3, #0]
 8010bfe:	f3bf 8f4f 	dsb	sy
 8010c02:	f3bf 8f6f 	isb	sy
 8010c06:	e772      	b.n	8010aee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010c08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c0a:	f000 fc7d 	bl	8011508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c0e:	f001 f8e9 	bl	8011de4 <xTaskResumeAll>
 8010c12:	e76c      	b.n	8010aee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010c14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c16:	f000 fc77 	bl	8011508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c1a:	f001 f8e3 	bl	8011de4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010c1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010c20:	4618      	mov	r0, r3
 8010c22:	3738      	adds	r7, #56	@ 0x38
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}
 8010c28:	e000ed04 	.word	0xe000ed04

08010c2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b090      	sub	sp, #64	@ 0x40
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	60f8      	str	r0, [r7, #12]
 8010c34:	60b9      	str	r1, [r7, #8]
 8010c36:	607a      	str	r2, [r7, #4]
 8010c38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8010c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d10b      	bne.n	8010c5c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8010c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c48:	f383 8811 	msr	BASEPRI, r3
 8010c4c:	f3bf 8f6f 	isb	sy
 8010c50:	f3bf 8f4f 	dsb	sy
 8010c54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010c56:	bf00      	nop
 8010c58:	bf00      	nop
 8010c5a:	e7fd      	b.n	8010c58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c5c:	68bb      	ldr	r3, [r7, #8]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d103      	bne.n	8010c6a <xQueueGenericSendFromISR+0x3e>
 8010c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d101      	bne.n	8010c6e <xQueueGenericSendFromISR+0x42>
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	e000      	b.n	8010c70 <xQueueGenericSendFromISR+0x44>
 8010c6e:	2300      	movs	r3, #0
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d10b      	bne.n	8010c8c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8010c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c78:	f383 8811 	msr	BASEPRI, r3
 8010c7c:	f3bf 8f6f 	isb	sy
 8010c80:	f3bf 8f4f 	dsb	sy
 8010c84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010c86:	bf00      	nop
 8010c88:	bf00      	nop
 8010c8a:	e7fd      	b.n	8010c88 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	2b02      	cmp	r3, #2
 8010c90:	d103      	bne.n	8010c9a <xQueueGenericSendFromISR+0x6e>
 8010c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010c96:	2b01      	cmp	r3, #1
 8010c98:	d101      	bne.n	8010c9e <xQueueGenericSendFromISR+0x72>
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	e000      	b.n	8010ca0 <xQueueGenericSendFromISR+0x74>
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10b      	bne.n	8010cbc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8010ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ca8:	f383 8811 	msr	BASEPRI, r3
 8010cac:	f3bf 8f6f 	isb	sy
 8010cb0:	f3bf 8f4f 	dsb	sy
 8010cb4:	623b      	str	r3, [r7, #32]
}
 8010cb6:	bf00      	nop
 8010cb8:	bf00      	nop
 8010cba:	e7fd      	b.n	8010cb8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cbc:	f002 ff34 	bl	8013b28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010cc0:	f3ef 8211 	mrs	r2, BASEPRI
 8010cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cc8:	f383 8811 	msr	BASEPRI, r3
 8010ccc:	f3bf 8f6f 	isb	sy
 8010cd0:	f3bf 8f4f 	dsb	sy
 8010cd4:	61fa      	str	r2, [r7, #28]
 8010cd6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010cd8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010cda:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d302      	bcc.n	8010cee <xQueueGenericSendFromISR+0xc2>
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	2b02      	cmp	r3, #2
 8010cec:	d12f      	bne.n	8010d4e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010cf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010cfe:	683a      	ldr	r2, [r7, #0]
 8010d00:	68b9      	ldr	r1, [r7, #8]
 8010d02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010d04:	f000 fb70 	bl	80113e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010d08:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8010d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010d10:	d112      	bne.n	8010d38 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d016      	beq.n	8010d48 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1c:	3324      	adds	r3, #36	@ 0x24
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f001 fa92 	bl	8012248 <xTaskRemoveFromEventList>
 8010d24:	4603      	mov	r3, r0
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d00e      	beq.n	8010d48 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d00b      	beq.n	8010d48 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2201      	movs	r2, #1
 8010d34:	601a      	str	r2, [r3, #0]
 8010d36:	e007      	b.n	8010d48 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010d38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010d3c:	3301      	adds	r3, #1
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	b25a      	sxtb	r2, r3
 8010d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010d48:	2301      	movs	r3, #1
 8010d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8010d4c:	e001      	b.n	8010d52 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d54:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010d5c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3740      	adds	r7, #64	@ 0x40
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}

08010d68 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	b08e      	sub	sp, #56	@ 0x38
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d10b      	bne.n	8010d94 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d80:	f383 8811 	msr	BASEPRI, r3
 8010d84:	f3bf 8f6f 	isb	sy
 8010d88:	f3bf 8f4f 	dsb	sy
 8010d8c:	623b      	str	r3, [r7, #32]
}
 8010d8e:	bf00      	nop
 8010d90:	bf00      	nop
 8010d92:	e7fd      	b.n	8010d90 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d00b      	beq.n	8010db4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8010d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010da0:	f383 8811 	msr	BASEPRI, r3
 8010da4:	f3bf 8f6f 	isb	sy
 8010da8:	f3bf 8f4f 	dsb	sy
 8010dac:	61fb      	str	r3, [r7, #28]
}
 8010dae:	bf00      	nop
 8010db0:	bf00      	nop
 8010db2:	e7fd      	b.n	8010db0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d103      	bne.n	8010dc4 <xQueueGiveFromISR+0x5c>
 8010dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dbe:	689b      	ldr	r3, [r3, #8]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d101      	bne.n	8010dc8 <xQueueGiveFromISR+0x60>
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	e000      	b.n	8010dca <xQueueGiveFromISR+0x62>
 8010dc8:	2300      	movs	r3, #0
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d10b      	bne.n	8010de6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8010dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dd2:	f383 8811 	msr	BASEPRI, r3
 8010dd6:	f3bf 8f6f 	isb	sy
 8010dda:	f3bf 8f4f 	dsb	sy
 8010dde:	61bb      	str	r3, [r7, #24]
}
 8010de0:	bf00      	nop
 8010de2:	bf00      	nop
 8010de4:	e7fd      	b.n	8010de2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010de6:	f002 fe9f 	bl	8013b28 <vPortValidateInterruptPriority>
	__asm volatile
 8010dea:	f3ef 8211 	mrs	r2, BASEPRI
 8010dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010df2:	f383 8811 	msr	BASEPRI, r3
 8010df6:	f3bf 8f6f 	isb	sy
 8010dfa:	f3bf 8f4f 	dsb	sy
 8010dfe:	617a      	str	r2, [r7, #20]
 8010e00:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010e02:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010e0a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010e12:	429a      	cmp	r2, r3
 8010e14:	d22b      	bcs.n	8010e6e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010e1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e22:	1c5a      	adds	r2, r3, #1
 8010e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e26:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010e28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010e30:	d112      	bne.n	8010e58 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d016      	beq.n	8010e68 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e3c:	3324      	adds	r3, #36	@ 0x24
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f001 fa02 	bl	8012248 <xTaskRemoveFromEventList>
 8010e44:	4603      	mov	r3, r0
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d00e      	beq.n	8010e68 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d00b      	beq.n	8010e68 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	2201      	movs	r2, #1
 8010e54:	601a      	str	r2, [r3, #0]
 8010e56:	e007      	b.n	8010e68 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010e58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010e5c:	3301      	adds	r3, #1
 8010e5e:	b2db      	uxtb	r3, r3
 8010e60:	b25a      	sxtb	r2, r3
 8010e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010e68:	2301      	movs	r3, #1
 8010e6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e6c:	e001      	b.n	8010e72 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010e6e:	2300      	movs	r3, #0
 8010e70:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e74:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	f383 8811 	msr	BASEPRI, r3
}
 8010e7c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3738      	adds	r7, #56	@ 0x38
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b08c      	sub	sp, #48	@ 0x30
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	60f8      	str	r0, [r7, #12]
 8010e90:	60b9      	str	r1, [r7, #8]
 8010e92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010e94:	2300      	movs	r3, #0
 8010e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d10b      	bne.n	8010eba <xQueueReceive+0x32>
	__asm volatile
 8010ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ea6:	f383 8811 	msr	BASEPRI, r3
 8010eaa:	f3bf 8f6f 	isb	sy
 8010eae:	f3bf 8f4f 	dsb	sy
 8010eb2:	623b      	str	r3, [r7, #32]
}
 8010eb4:	bf00      	nop
 8010eb6:	bf00      	nop
 8010eb8:	e7fd      	b.n	8010eb6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d103      	bne.n	8010ec8 <xQueueReceive+0x40>
 8010ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d101      	bne.n	8010ecc <xQueueReceive+0x44>
 8010ec8:	2301      	movs	r3, #1
 8010eca:	e000      	b.n	8010ece <xQueueReceive+0x46>
 8010ecc:	2300      	movs	r3, #0
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d10b      	bne.n	8010eea <xQueueReceive+0x62>
	__asm volatile
 8010ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ed6:	f383 8811 	msr	BASEPRI, r3
 8010eda:	f3bf 8f6f 	isb	sy
 8010ede:	f3bf 8f4f 	dsb	sy
 8010ee2:	61fb      	str	r3, [r7, #28]
}
 8010ee4:	bf00      	nop
 8010ee6:	bf00      	nop
 8010ee8:	e7fd      	b.n	8010ee6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010eea:	f001 fb83 	bl	80125f4 <xTaskGetSchedulerState>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d102      	bne.n	8010efa <xQueueReceive+0x72>
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d101      	bne.n	8010efe <xQueueReceive+0x76>
 8010efa:	2301      	movs	r3, #1
 8010efc:	e000      	b.n	8010f00 <xQueueReceive+0x78>
 8010efe:	2300      	movs	r3, #0
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d10b      	bne.n	8010f1c <xQueueReceive+0x94>
	__asm volatile
 8010f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f08:	f383 8811 	msr	BASEPRI, r3
 8010f0c:	f3bf 8f6f 	isb	sy
 8010f10:	f3bf 8f4f 	dsb	sy
 8010f14:	61bb      	str	r3, [r7, #24]
}
 8010f16:	bf00      	nop
 8010f18:	bf00      	nop
 8010f1a:	e7fd      	b.n	8010f18 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f1c:	f002 fd24 	bl	8013968 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010f24:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d01f      	beq.n	8010f6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f2c:	68b9      	ldr	r1, [r7, #8]
 8010f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010f30:	f000 fac4 	bl	80114bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f36:	1e5a      	subs	r2, r3, #1
 8010f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f3a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f3e:	691b      	ldr	r3, [r3, #16]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d00f      	beq.n	8010f64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f46:	3310      	adds	r3, #16
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f001 f97d 	bl	8012248 <xTaskRemoveFromEventList>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d007      	beq.n	8010f64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010f54:	4b3c      	ldr	r3, [pc, #240]	@ (8011048 <xQueueReceive+0x1c0>)
 8010f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f5a:	601a      	str	r2, [r3, #0]
 8010f5c:	f3bf 8f4f 	dsb	sy
 8010f60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010f64:	f002 fd32 	bl	80139cc <vPortExitCritical>
				return pdPASS;
 8010f68:	2301      	movs	r3, #1
 8010f6a:	e069      	b.n	8011040 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d103      	bne.n	8010f7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010f72:	f002 fd2b 	bl	80139cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010f76:	2300      	movs	r3, #0
 8010f78:	e062      	b.n	8011040 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d106      	bne.n	8010f8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010f80:	f107 0310 	add.w	r3, r7, #16
 8010f84:	4618      	mov	r0, r3
 8010f86:	f001 f9c3 	bl	8012310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010f8a:	2301      	movs	r3, #1
 8010f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010f8e:	f002 fd1d 	bl	80139cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010f92:	f000 ff19 	bl	8011dc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010f96:	f002 fce7 	bl	8013968 <vPortEnterCritical>
 8010f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010fa0:	b25b      	sxtb	r3, r3
 8010fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010fa6:	d103      	bne.n	8010fb0 <xQueueReceive+0x128>
 8010fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010faa:	2200      	movs	r2, #0
 8010fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010fb6:	b25b      	sxtb	r3, r3
 8010fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010fbc:	d103      	bne.n	8010fc6 <xQueueReceive+0x13e>
 8010fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010fc6:	f002 fd01 	bl	80139cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010fca:	1d3a      	adds	r2, r7, #4
 8010fcc:	f107 0310 	add.w	r3, r7, #16
 8010fd0:	4611      	mov	r1, r2
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f001 f9b2 	bl	801233c <xTaskCheckForTimeOut>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d123      	bne.n	8011026 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010fde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010fe0:	f000 fae4 	bl	80115ac <prvIsQueueEmpty>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d017      	beq.n	801101a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fec:	3324      	adds	r3, #36	@ 0x24
 8010fee:	687a      	ldr	r2, [r7, #4]
 8010ff0:	4611      	mov	r1, r2
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f001 f8d6 	bl	80121a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010ff8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ffa:	f000 fa85 	bl	8011508 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010ffe:	f000 fef1 	bl	8011de4 <xTaskResumeAll>
 8011002:	4603      	mov	r3, r0
 8011004:	2b00      	cmp	r3, #0
 8011006:	d189      	bne.n	8010f1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011008:	4b0f      	ldr	r3, [pc, #60]	@ (8011048 <xQueueReceive+0x1c0>)
 801100a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801100e:	601a      	str	r2, [r3, #0]
 8011010:	f3bf 8f4f 	dsb	sy
 8011014:	f3bf 8f6f 	isb	sy
 8011018:	e780      	b.n	8010f1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801101a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801101c:	f000 fa74 	bl	8011508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011020:	f000 fee0 	bl	8011de4 <xTaskResumeAll>
 8011024:	e77a      	b.n	8010f1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011028:	f000 fa6e 	bl	8011508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801102c:	f000 feda 	bl	8011de4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011030:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011032:	f000 fabb 	bl	80115ac <prvIsQueueEmpty>
 8011036:	4603      	mov	r3, r0
 8011038:	2b00      	cmp	r3, #0
 801103a:	f43f af6f 	beq.w	8010f1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801103e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011040:	4618      	mov	r0, r3
 8011042:	3730      	adds	r7, #48	@ 0x30
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}
 8011048:	e000ed04 	.word	0xe000ed04

0801104c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b08e      	sub	sp, #56	@ 0x38
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
 8011054:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011056:	2300      	movs	r3, #0
 8011058:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801105e:	2300      	movs	r3, #0
 8011060:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011064:	2b00      	cmp	r3, #0
 8011066:	d10b      	bne.n	8011080 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8011068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801106c:	f383 8811 	msr	BASEPRI, r3
 8011070:	f3bf 8f6f 	isb	sy
 8011074:	f3bf 8f4f 	dsb	sy
 8011078:	623b      	str	r3, [r7, #32]
}
 801107a:	bf00      	nop
 801107c:	bf00      	nop
 801107e:	e7fd      	b.n	801107c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011084:	2b00      	cmp	r3, #0
 8011086:	d00b      	beq.n	80110a0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8011088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801108c:	f383 8811 	msr	BASEPRI, r3
 8011090:	f3bf 8f6f 	isb	sy
 8011094:	f3bf 8f4f 	dsb	sy
 8011098:	61fb      	str	r3, [r7, #28]
}
 801109a:	bf00      	nop
 801109c:	bf00      	nop
 801109e:	e7fd      	b.n	801109c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80110a0:	f001 faa8 	bl	80125f4 <xTaskGetSchedulerState>
 80110a4:	4603      	mov	r3, r0
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d102      	bne.n	80110b0 <xQueueSemaphoreTake+0x64>
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d101      	bne.n	80110b4 <xQueueSemaphoreTake+0x68>
 80110b0:	2301      	movs	r3, #1
 80110b2:	e000      	b.n	80110b6 <xQueueSemaphoreTake+0x6a>
 80110b4:	2300      	movs	r3, #0
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d10b      	bne.n	80110d2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80110ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110be:	f383 8811 	msr	BASEPRI, r3
 80110c2:	f3bf 8f6f 	isb	sy
 80110c6:	f3bf 8f4f 	dsb	sy
 80110ca:	61bb      	str	r3, [r7, #24]
}
 80110cc:	bf00      	nop
 80110ce:	bf00      	nop
 80110d0:	e7fd      	b.n	80110ce <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80110d2:	f002 fc49 	bl	8013968 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80110d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110da:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80110dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d024      	beq.n	801112c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80110e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110e4:	1e5a      	subs	r2, r3, #1
 80110e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110e8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80110ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d104      	bne.n	80110fc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80110f2:	f001 fbf9 	bl	80128e8 <pvTaskIncrementMutexHeldCount>
 80110f6:	4602      	mov	r2, r0
 80110f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80110fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110fe:	691b      	ldr	r3, [r3, #16]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d00f      	beq.n	8011124 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011106:	3310      	adds	r3, #16
 8011108:	4618      	mov	r0, r3
 801110a:	f001 f89d 	bl	8012248 <xTaskRemoveFromEventList>
 801110e:	4603      	mov	r3, r0
 8011110:	2b00      	cmp	r3, #0
 8011112:	d007      	beq.n	8011124 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011114:	4b54      	ldr	r3, [pc, #336]	@ (8011268 <xQueueSemaphoreTake+0x21c>)
 8011116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801111a:	601a      	str	r2, [r3, #0]
 801111c:	f3bf 8f4f 	dsb	sy
 8011120:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011124:	f002 fc52 	bl	80139cc <vPortExitCritical>
				return pdPASS;
 8011128:	2301      	movs	r3, #1
 801112a:	e098      	b.n	801125e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d112      	bne.n	8011158 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011134:	2b00      	cmp	r3, #0
 8011136:	d00b      	beq.n	8011150 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8011138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801113c:	f383 8811 	msr	BASEPRI, r3
 8011140:	f3bf 8f6f 	isb	sy
 8011144:	f3bf 8f4f 	dsb	sy
 8011148:	617b      	str	r3, [r7, #20]
}
 801114a:	bf00      	nop
 801114c:	bf00      	nop
 801114e:	e7fd      	b.n	801114c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011150:	f002 fc3c 	bl	80139cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011154:	2300      	movs	r3, #0
 8011156:	e082      	b.n	801125e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801115a:	2b00      	cmp	r3, #0
 801115c:	d106      	bne.n	801116c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801115e:	f107 030c 	add.w	r3, r7, #12
 8011162:	4618      	mov	r0, r3
 8011164:	f001 f8d4 	bl	8012310 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011168:	2301      	movs	r3, #1
 801116a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801116c:	f002 fc2e 	bl	80139cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011170:	f000 fe2a 	bl	8011dc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011174:	f002 fbf8 	bl	8013968 <vPortEnterCritical>
 8011178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801117a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801117e:	b25b      	sxtb	r3, r3
 8011180:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011184:	d103      	bne.n	801118e <xQueueSemaphoreTake+0x142>
 8011186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011188:	2200      	movs	r2, #0
 801118a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801118e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011190:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011194:	b25b      	sxtb	r3, r3
 8011196:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801119a:	d103      	bne.n	80111a4 <xQueueSemaphoreTake+0x158>
 801119c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801119e:	2200      	movs	r2, #0
 80111a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80111a4:	f002 fc12 	bl	80139cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80111a8:	463a      	mov	r2, r7
 80111aa:	f107 030c 	add.w	r3, r7, #12
 80111ae:	4611      	mov	r1, r2
 80111b0:	4618      	mov	r0, r3
 80111b2:	f001 f8c3 	bl	801233c <xTaskCheckForTimeOut>
 80111b6:	4603      	mov	r3, r0
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d132      	bne.n	8011222 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80111bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80111be:	f000 f9f5 	bl	80115ac <prvIsQueueEmpty>
 80111c2:	4603      	mov	r3, r0
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d026      	beq.n	8011216 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80111c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d109      	bne.n	80111e4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80111d0:	f002 fbca 	bl	8013968 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80111d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111d6:	689b      	ldr	r3, [r3, #8]
 80111d8:	4618      	mov	r0, r3
 80111da:	f001 fa29 	bl	8012630 <xTaskPriorityInherit>
 80111de:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80111e0:	f002 fbf4 	bl	80139cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80111e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111e6:	3324      	adds	r3, #36	@ 0x24
 80111e8:	683a      	ldr	r2, [r7, #0]
 80111ea:	4611      	mov	r1, r2
 80111ec:	4618      	mov	r0, r3
 80111ee:	f000 ffd9 	bl	80121a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80111f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80111f4:	f000 f988 	bl	8011508 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80111f8:	f000 fdf4 	bl	8011de4 <xTaskResumeAll>
 80111fc:	4603      	mov	r3, r0
 80111fe:	2b00      	cmp	r3, #0
 8011200:	f47f af67 	bne.w	80110d2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8011204:	4b18      	ldr	r3, [pc, #96]	@ (8011268 <xQueueSemaphoreTake+0x21c>)
 8011206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801120a:	601a      	str	r2, [r3, #0]
 801120c:	f3bf 8f4f 	dsb	sy
 8011210:	f3bf 8f6f 	isb	sy
 8011214:	e75d      	b.n	80110d2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011216:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011218:	f000 f976 	bl	8011508 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801121c:	f000 fde2 	bl	8011de4 <xTaskResumeAll>
 8011220:	e757      	b.n	80110d2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011222:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011224:	f000 f970 	bl	8011508 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011228:	f000 fddc 	bl	8011de4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801122c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801122e:	f000 f9bd 	bl	80115ac <prvIsQueueEmpty>
 8011232:	4603      	mov	r3, r0
 8011234:	2b00      	cmp	r3, #0
 8011236:	f43f af4c 	beq.w	80110d2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801123a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801123c:	2b00      	cmp	r3, #0
 801123e:	d00d      	beq.n	801125c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8011240:	f002 fb92 	bl	8013968 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011244:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011246:	f000 f8b7 	bl	80113b8 <prvGetDisinheritPriorityAfterTimeout>
 801124a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801124c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801124e:	689b      	ldr	r3, [r3, #8]
 8011250:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011252:	4618      	mov	r0, r3
 8011254:	f001 fac4 	bl	80127e0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011258:	f002 fbb8 	bl	80139cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801125c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801125e:	4618      	mov	r0, r3
 8011260:	3738      	adds	r7, #56	@ 0x38
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	e000ed04 	.word	0xe000ed04

0801126c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b08e      	sub	sp, #56	@ 0x38
 8011270:	af00      	add	r7, sp, #0
 8011272:	60f8      	str	r0, [r7, #12]
 8011274:	60b9      	str	r1, [r7, #8]
 8011276:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801127c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801127e:	2b00      	cmp	r3, #0
 8011280:	d10b      	bne.n	801129a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8011282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011286:	f383 8811 	msr	BASEPRI, r3
 801128a:	f3bf 8f6f 	isb	sy
 801128e:	f3bf 8f4f 	dsb	sy
 8011292:	623b      	str	r3, [r7, #32]
}
 8011294:	bf00      	nop
 8011296:	bf00      	nop
 8011298:	e7fd      	b.n	8011296 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d103      	bne.n	80112a8 <xQueueReceiveFromISR+0x3c>
 80112a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d101      	bne.n	80112ac <xQueueReceiveFromISR+0x40>
 80112a8:	2301      	movs	r3, #1
 80112aa:	e000      	b.n	80112ae <xQueueReceiveFromISR+0x42>
 80112ac:	2300      	movs	r3, #0
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d10b      	bne.n	80112ca <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80112b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112b6:	f383 8811 	msr	BASEPRI, r3
 80112ba:	f3bf 8f6f 	isb	sy
 80112be:	f3bf 8f4f 	dsb	sy
 80112c2:	61fb      	str	r3, [r7, #28]
}
 80112c4:	bf00      	nop
 80112c6:	bf00      	nop
 80112c8:	e7fd      	b.n	80112c6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112ca:	f002 fc2d 	bl	8013b28 <vPortValidateInterruptPriority>
	__asm volatile
 80112ce:	f3ef 8211 	mrs	r2, BASEPRI
 80112d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112d6:	f383 8811 	msr	BASEPRI, r3
 80112da:	f3bf 8f6f 	isb	sy
 80112de:	f3bf 8f4f 	dsb	sy
 80112e2:	61ba      	str	r2, [r7, #24]
 80112e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80112e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80112e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112ee:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80112f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d02f      	beq.n	8011356 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80112f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80112fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011300:	68b9      	ldr	r1, [r7, #8]
 8011302:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011304:	f000 f8da 	bl	80114bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801130a:	1e5a      	subs	r2, r3, #1
 801130c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801130e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011310:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011314:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011318:	d112      	bne.n	8011340 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801131a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801131c:	691b      	ldr	r3, [r3, #16]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d016      	beq.n	8011350 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011324:	3310      	adds	r3, #16
 8011326:	4618      	mov	r0, r3
 8011328:	f000 ff8e 	bl	8012248 <xTaskRemoveFromEventList>
 801132c:	4603      	mov	r3, r0
 801132e:	2b00      	cmp	r3, #0
 8011330:	d00e      	beq.n	8011350 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d00b      	beq.n	8011350 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2201      	movs	r2, #1
 801133c:	601a      	str	r2, [r3, #0]
 801133e:	e007      	b.n	8011350 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011340:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011344:	3301      	adds	r3, #1
 8011346:	b2db      	uxtb	r3, r3
 8011348:	b25a      	sxtb	r2, r3
 801134a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801134c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8011350:	2301      	movs	r3, #1
 8011352:	637b      	str	r3, [r7, #52]	@ 0x34
 8011354:	e001      	b.n	801135a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8011356:	2300      	movs	r3, #0
 8011358:	637b      	str	r3, [r7, #52]	@ 0x34
 801135a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801135c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	f383 8811 	msr	BASEPRI, r3
}
 8011364:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011368:	4618      	mov	r0, r3
 801136a:	3738      	adds	r7, #56	@ 0x38
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}

08011370 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b084      	sub	sp, #16
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d10b      	bne.n	801139a <vQueueDelete+0x2a>
	__asm volatile
 8011382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011386:	f383 8811 	msr	BASEPRI, r3
 801138a:	f3bf 8f6f 	isb	sy
 801138e:	f3bf 8f4f 	dsb	sy
 8011392:	60bb      	str	r3, [r7, #8]
}
 8011394:	bf00      	nop
 8011396:	bf00      	nop
 8011398:	e7fd      	b.n	8011396 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801139a:	68f8      	ldr	r0, [r7, #12]
 801139c:	f000 f95e 	bl	801165c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d102      	bne.n	80113b0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80113aa:	68f8      	ldr	r0, [r7, #12]
 80113ac:	f002 fccc 	bl	8013d48 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80113b0:	bf00      	nop
 80113b2:	3710      	adds	r7, #16
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}

080113b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80113b8:	b480      	push	{r7}
 80113ba:	b085      	sub	sp, #20
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d006      	beq.n	80113d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80113d2:	60fb      	str	r3, [r7, #12]
 80113d4:	e001      	b.n	80113da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80113d6:	2300      	movs	r3, #0
 80113d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80113da:	68fb      	ldr	r3, [r7, #12]
	}
 80113dc:	4618      	mov	r0, r3
 80113de:	3714      	adds	r7, #20
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr

080113e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b086      	sub	sp, #24
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	60f8      	str	r0, [r7, #12]
 80113f0:	60b9      	str	r1, [r7, #8]
 80113f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80113f4:	2300      	movs	r3, #0
 80113f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011402:	2b00      	cmp	r3, #0
 8011404:	d10d      	bne.n	8011422 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d14d      	bne.n	80114aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	689b      	ldr	r3, [r3, #8]
 8011412:	4618      	mov	r0, r3
 8011414:	f001 f974 	bl	8012700 <xTaskPriorityDisinherit>
 8011418:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	2200      	movs	r2, #0
 801141e:	609a      	str	r2, [r3, #8]
 8011420:	e043      	b.n	80114aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d119      	bne.n	801145c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	6858      	ldr	r0, [r3, #4]
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011430:	461a      	mov	r2, r3
 8011432:	68b9      	ldr	r1, [r7, #8]
 8011434:	f010 f811 	bl	802145a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	685a      	ldr	r2, [r3, #4]
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011440:	441a      	add	r2, r3
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011446:	68fb      	ldr	r3, [r7, #12]
 8011448:	685a      	ldr	r2, [r3, #4]
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	689b      	ldr	r3, [r3, #8]
 801144e:	429a      	cmp	r2, r3
 8011450:	d32b      	bcc.n	80114aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681a      	ldr	r2, [r3, #0]
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	605a      	str	r2, [r3, #4]
 801145a:	e026      	b.n	80114aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	68d8      	ldr	r0, [r3, #12]
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011464:	461a      	mov	r2, r3
 8011466:	68b9      	ldr	r1, [r7, #8]
 8011468:	f00f fff7 	bl	802145a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	68da      	ldr	r2, [r3, #12]
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011474:	425b      	negs	r3, r3
 8011476:	441a      	add	r2, r3
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	68da      	ldr	r2, [r3, #12]
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	429a      	cmp	r2, r3
 8011486:	d207      	bcs.n	8011498 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	689a      	ldr	r2, [r3, #8]
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011490:	425b      	negs	r3, r3
 8011492:	441a      	add	r2, r3
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2b02      	cmp	r3, #2
 801149c:	d105      	bne.n	80114aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d002      	beq.n	80114aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80114a4:	693b      	ldr	r3, [r7, #16]
 80114a6:	3b01      	subs	r3, #1
 80114a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	1c5a      	adds	r2, r3, #1
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80114b2:	697b      	ldr	r3, [r7, #20]
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3718      	adds	r7, #24
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b082      	sub	sp, #8
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d018      	beq.n	8011500 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	68da      	ldr	r2, [r3, #12]
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114d6:	441a      	add	r2, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	68da      	ldr	r2, [r3, #12]
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	689b      	ldr	r3, [r3, #8]
 80114e4:	429a      	cmp	r2, r3
 80114e6:	d303      	bcc.n	80114f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	681a      	ldr	r2, [r3, #0]
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	68d9      	ldr	r1, [r3, #12]
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114f8:	461a      	mov	r2, r3
 80114fa:	6838      	ldr	r0, [r7, #0]
 80114fc:	f00f ffad 	bl	802145a <memcpy>
	}
}
 8011500:	bf00      	nop
 8011502:	3708      	adds	r7, #8
 8011504:	46bd      	mov	sp, r7
 8011506:	bd80      	pop	{r7, pc}

08011508 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b084      	sub	sp, #16
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011510:	f002 fa2a 	bl	8013968 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801151a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801151c:	e011      	b.n	8011542 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011522:	2b00      	cmp	r3, #0
 8011524:	d012      	beq.n	801154c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	3324      	adds	r3, #36	@ 0x24
 801152a:	4618      	mov	r0, r3
 801152c:	f000 fe8c 	bl	8012248 <xTaskRemoveFromEventList>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d001      	beq.n	801153a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011536:	f000 ff65 	bl	8012404 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801153a:	7bfb      	ldrb	r3, [r7, #15]
 801153c:	3b01      	subs	r3, #1
 801153e:	b2db      	uxtb	r3, r3
 8011540:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011546:	2b00      	cmp	r3, #0
 8011548:	dce9      	bgt.n	801151e <prvUnlockQueue+0x16>
 801154a:	e000      	b.n	801154e <prvUnlockQueue+0x46>
					break;
 801154c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	22ff      	movs	r2, #255	@ 0xff
 8011552:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8011556:	f002 fa39 	bl	80139cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801155a:	f002 fa05 	bl	8013968 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011564:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011566:	e011      	b.n	801158c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	691b      	ldr	r3, [r3, #16]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d012      	beq.n	8011596 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	3310      	adds	r3, #16
 8011574:	4618      	mov	r0, r3
 8011576:	f000 fe67 	bl	8012248 <xTaskRemoveFromEventList>
 801157a:	4603      	mov	r3, r0
 801157c:	2b00      	cmp	r3, #0
 801157e:	d001      	beq.n	8011584 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011580:	f000 ff40 	bl	8012404 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011584:	7bbb      	ldrb	r3, [r7, #14]
 8011586:	3b01      	subs	r3, #1
 8011588:	b2db      	uxtb	r3, r3
 801158a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801158c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011590:	2b00      	cmp	r3, #0
 8011592:	dce9      	bgt.n	8011568 <prvUnlockQueue+0x60>
 8011594:	e000      	b.n	8011598 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011596:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	22ff      	movs	r2, #255	@ 0xff
 801159c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80115a0:	f002 fa14 	bl	80139cc <vPortExitCritical>
}
 80115a4:	bf00      	nop
 80115a6:	3710      	adds	r7, #16
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}

080115ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b084      	sub	sp, #16
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80115b4:	f002 f9d8 	bl	8013968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d102      	bne.n	80115c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80115c0:	2301      	movs	r3, #1
 80115c2:	60fb      	str	r3, [r7, #12]
 80115c4:	e001      	b.n	80115ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80115c6:	2300      	movs	r3, #0
 80115c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80115ca:	f002 f9ff 	bl	80139cc <vPortExitCritical>

	return xReturn;
 80115ce:	68fb      	ldr	r3, [r7, #12]
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3710      	adds	r7, #16
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}

080115d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b084      	sub	sp, #16
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80115e0:	f002 f9c2 	bl	8013968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80115ec:	429a      	cmp	r2, r3
 80115ee:	d102      	bne.n	80115f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80115f0:	2301      	movs	r3, #1
 80115f2:	60fb      	str	r3, [r7, #12]
 80115f4:	e001      	b.n	80115fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80115f6:	2300      	movs	r3, #0
 80115f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80115fa:	f002 f9e7 	bl	80139cc <vPortExitCritical>

	return xReturn;
 80115fe:	68fb      	ldr	r3, [r7, #12]
}
 8011600:	4618      	mov	r0, r3
 8011602:	3710      	adds	r7, #16
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}

08011608 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011608:	b480      	push	{r7}
 801160a:	b085      	sub	sp, #20
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011612:	2300      	movs	r3, #0
 8011614:	60fb      	str	r3, [r7, #12]
 8011616:	e014      	b.n	8011642 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011618:	4a0f      	ldr	r2, [pc, #60]	@ (8011658 <vQueueAddToRegistry+0x50>)
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d10b      	bne.n	801163c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011624:	490c      	ldr	r1, [pc, #48]	@ (8011658 <vQueueAddToRegistry+0x50>)
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	683a      	ldr	r2, [r7, #0]
 801162a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801162e:	4a0a      	ldr	r2, [pc, #40]	@ (8011658 <vQueueAddToRegistry+0x50>)
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	00db      	lsls	r3, r3, #3
 8011634:	4413      	add	r3, r2
 8011636:	687a      	ldr	r2, [r7, #4]
 8011638:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801163a:	e006      	b.n	801164a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	3301      	adds	r3, #1
 8011640:	60fb      	str	r3, [r7, #12]
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	2b07      	cmp	r3, #7
 8011646:	d9e7      	bls.n	8011618 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011648:	bf00      	nop
 801164a:	bf00      	nop
 801164c:	3714      	adds	r7, #20
 801164e:	46bd      	mov	sp, r7
 8011650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011654:	4770      	bx	lr
 8011656:	bf00      	nop
 8011658:	240013cc 	.word	0x240013cc

0801165c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801165c:	b480      	push	{r7}
 801165e:	b085      	sub	sp, #20
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011664:	2300      	movs	r3, #0
 8011666:	60fb      	str	r3, [r7, #12]
 8011668:	e016      	b.n	8011698 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801166a:	4a10      	ldr	r2, [pc, #64]	@ (80116ac <vQueueUnregisterQueue+0x50>)
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	00db      	lsls	r3, r3, #3
 8011670:	4413      	add	r3, r2
 8011672:	685b      	ldr	r3, [r3, #4]
 8011674:	687a      	ldr	r2, [r7, #4]
 8011676:	429a      	cmp	r2, r3
 8011678:	d10b      	bne.n	8011692 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801167a:	4a0c      	ldr	r2, [pc, #48]	@ (80116ac <vQueueUnregisterQueue+0x50>)
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2100      	movs	r1, #0
 8011680:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011684:	4a09      	ldr	r2, [pc, #36]	@ (80116ac <vQueueUnregisterQueue+0x50>)
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	00db      	lsls	r3, r3, #3
 801168a:	4413      	add	r3, r2
 801168c:	2200      	movs	r2, #0
 801168e:	605a      	str	r2, [r3, #4]
				break;
 8011690:	e006      	b.n	80116a0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	3301      	adds	r3, #1
 8011696:	60fb      	str	r3, [r7, #12]
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2b07      	cmp	r3, #7
 801169c:	d9e5      	bls.n	801166a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801169e:	bf00      	nop
 80116a0:	bf00      	nop
 80116a2:	3714      	adds	r7, #20
 80116a4:	46bd      	mov	sp, r7
 80116a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116aa:	4770      	bx	lr
 80116ac:	240013cc 	.word	0x240013cc

080116b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b086      	sub	sp, #24
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	60b9      	str	r1, [r7, #8]
 80116ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80116c0:	f002 f952 	bl	8013968 <vPortEnterCritical>
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80116ca:	b25b      	sxtb	r3, r3
 80116cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80116d0:	d103      	bne.n	80116da <vQueueWaitForMessageRestricted+0x2a>
 80116d2:	697b      	ldr	r3, [r7, #20]
 80116d4:	2200      	movs	r2, #0
 80116d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80116e0:	b25b      	sxtb	r3, r3
 80116e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80116e6:	d103      	bne.n	80116f0 <vQueueWaitForMessageRestricted+0x40>
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	2200      	movs	r2, #0
 80116ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80116f0:	f002 f96c 	bl	80139cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80116f4:	697b      	ldr	r3, [r7, #20]
 80116f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d106      	bne.n	801170a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	3324      	adds	r3, #36	@ 0x24
 8011700:	687a      	ldr	r2, [r7, #4]
 8011702:	68b9      	ldr	r1, [r7, #8]
 8011704:	4618      	mov	r0, r3
 8011706:	f000 fd73 	bl	80121f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801170a:	6978      	ldr	r0, [r7, #20]
 801170c:	f7ff fefc 	bl	8011508 <prvUnlockQueue>
	}
 8011710:	bf00      	nop
 8011712:	3718      	adds	r7, #24
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}

08011718 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011718:	b580      	push	{r7, lr}
 801171a:	b08e      	sub	sp, #56	@ 0x38
 801171c:	af04      	add	r7, sp, #16
 801171e:	60f8      	str	r0, [r7, #12]
 8011720:	60b9      	str	r1, [r7, #8]
 8011722:	607a      	str	r2, [r7, #4]
 8011724:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011728:	2b00      	cmp	r3, #0
 801172a:	d10b      	bne.n	8011744 <xTaskCreateStatic+0x2c>
	__asm volatile
 801172c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011730:	f383 8811 	msr	BASEPRI, r3
 8011734:	f3bf 8f6f 	isb	sy
 8011738:	f3bf 8f4f 	dsb	sy
 801173c:	623b      	str	r3, [r7, #32]
}
 801173e:	bf00      	nop
 8011740:	bf00      	nop
 8011742:	e7fd      	b.n	8011740 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011746:	2b00      	cmp	r3, #0
 8011748:	d10b      	bne.n	8011762 <xTaskCreateStatic+0x4a>
	__asm volatile
 801174a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801174e:	f383 8811 	msr	BASEPRI, r3
 8011752:	f3bf 8f6f 	isb	sy
 8011756:	f3bf 8f4f 	dsb	sy
 801175a:	61fb      	str	r3, [r7, #28]
}
 801175c:	bf00      	nop
 801175e:	bf00      	nop
 8011760:	e7fd      	b.n	801175e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011762:	23a8      	movs	r3, #168	@ 0xa8
 8011764:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	2ba8      	cmp	r3, #168	@ 0xa8
 801176a:	d00b      	beq.n	8011784 <xTaskCreateStatic+0x6c>
	__asm volatile
 801176c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011770:	f383 8811 	msr	BASEPRI, r3
 8011774:	f3bf 8f6f 	isb	sy
 8011778:	f3bf 8f4f 	dsb	sy
 801177c:	61bb      	str	r3, [r7, #24]
}
 801177e:	bf00      	nop
 8011780:	bf00      	nop
 8011782:	e7fd      	b.n	8011780 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011784:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011788:	2b00      	cmp	r3, #0
 801178a:	d01e      	beq.n	80117ca <xTaskCreateStatic+0xb2>
 801178c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801178e:	2b00      	cmp	r3, #0
 8011790:	d01b      	beq.n	80117ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011794:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011798:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801179a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801179c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801179e:	2202      	movs	r2, #2
 80117a0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80117a4:	2300      	movs	r3, #0
 80117a6:	9303      	str	r3, [sp, #12]
 80117a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117aa:	9302      	str	r3, [sp, #8]
 80117ac:	f107 0314 	add.w	r3, r7, #20
 80117b0:	9301      	str	r3, [sp, #4]
 80117b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117b4:	9300      	str	r3, [sp, #0]
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	687a      	ldr	r2, [r7, #4]
 80117ba:	68b9      	ldr	r1, [r7, #8]
 80117bc:	68f8      	ldr	r0, [r7, #12]
 80117be:	f000 f851 	bl	8011864 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80117c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80117c4:	f000 f8f6 	bl	80119b4 <prvAddNewTaskToReadyList>
 80117c8:	e001      	b.n	80117ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80117ca:	2300      	movs	r3, #0
 80117cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80117ce:	697b      	ldr	r3, [r7, #20]
	}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3728      	adds	r7, #40	@ 0x28
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b08c      	sub	sp, #48	@ 0x30
 80117dc:	af04      	add	r7, sp, #16
 80117de:	60f8      	str	r0, [r7, #12]
 80117e0:	60b9      	str	r1, [r7, #8]
 80117e2:	603b      	str	r3, [r7, #0]
 80117e4:	4613      	mov	r3, r2
 80117e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80117e8:	88fb      	ldrh	r3, [r7, #6]
 80117ea:	009b      	lsls	r3, r3, #2
 80117ec:	4618      	mov	r0, r3
 80117ee:	f002 f9dd 	bl	8013bac <pvPortMalloc>
 80117f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d00e      	beq.n	8011818 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80117fa:	20a8      	movs	r0, #168	@ 0xa8
 80117fc:	f002 f9d6 	bl	8013bac <pvPortMalloc>
 8011800:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011802:	69fb      	ldr	r3, [r7, #28]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d003      	beq.n	8011810 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011808:	69fb      	ldr	r3, [r7, #28]
 801180a:	697a      	ldr	r2, [r7, #20]
 801180c:	631a      	str	r2, [r3, #48]	@ 0x30
 801180e:	e005      	b.n	801181c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011810:	6978      	ldr	r0, [r7, #20]
 8011812:	f002 fa99 	bl	8013d48 <vPortFree>
 8011816:	e001      	b.n	801181c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011818:	2300      	movs	r3, #0
 801181a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801181c:	69fb      	ldr	r3, [r7, #28]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d017      	beq.n	8011852 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011822:	69fb      	ldr	r3, [r7, #28]
 8011824:	2200      	movs	r2, #0
 8011826:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801182a:	88fa      	ldrh	r2, [r7, #6]
 801182c:	2300      	movs	r3, #0
 801182e:	9303      	str	r3, [sp, #12]
 8011830:	69fb      	ldr	r3, [r7, #28]
 8011832:	9302      	str	r3, [sp, #8]
 8011834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011836:	9301      	str	r3, [sp, #4]
 8011838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801183a:	9300      	str	r3, [sp, #0]
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	68b9      	ldr	r1, [r7, #8]
 8011840:	68f8      	ldr	r0, [r7, #12]
 8011842:	f000 f80f 	bl	8011864 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011846:	69f8      	ldr	r0, [r7, #28]
 8011848:	f000 f8b4 	bl	80119b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801184c:	2301      	movs	r3, #1
 801184e:	61bb      	str	r3, [r7, #24]
 8011850:	e002      	b.n	8011858 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011852:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011856:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011858:	69bb      	ldr	r3, [r7, #24]
	}
 801185a:	4618      	mov	r0, r3
 801185c:	3720      	adds	r7, #32
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
	...

08011864 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b088      	sub	sp, #32
 8011868:	af00      	add	r7, sp, #0
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	60b9      	str	r1, [r7, #8]
 801186e:	607a      	str	r2, [r7, #4]
 8011870:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011874:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	009b      	lsls	r3, r3, #2
 801187a:	461a      	mov	r2, r3
 801187c:	21a5      	movs	r1, #165	@ 0xa5
 801187e:	f00f fd5d 	bl	802133c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011884:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011886:	6879      	ldr	r1, [r7, #4]
 8011888:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801188c:	440b      	add	r3, r1
 801188e:	009b      	lsls	r3, r3, #2
 8011890:	4413      	add	r3, r2
 8011892:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011894:	69bb      	ldr	r3, [r7, #24]
 8011896:	f023 0307 	bic.w	r3, r3, #7
 801189a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801189c:	69bb      	ldr	r3, [r7, #24]
 801189e:	f003 0307 	and.w	r3, r3, #7
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d00b      	beq.n	80118be <prvInitialiseNewTask+0x5a>
	__asm volatile
 80118a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118aa:	f383 8811 	msr	BASEPRI, r3
 80118ae:	f3bf 8f6f 	isb	sy
 80118b2:	f3bf 8f4f 	dsb	sy
 80118b6:	617b      	str	r3, [r7, #20]
}
 80118b8:	bf00      	nop
 80118ba:	bf00      	nop
 80118bc:	e7fd      	b.n	80118ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d01f      	beq.n	8011904 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80118c4:	2300      	movs	r3, #0
 80118c6:	61fb      	str	r3, [r7, #28]
 80118c8:	e012      	b.n	80118f0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80118ca:	68ba      	ldr	r2, [r7, #8]
 80118cc:	69fb      	ldr	r3, [r7, #28]
 80118ce:	4413      	add	r3, r2
 80118d0:	7819      	ldrb	r1, [r3, #0]
 80118d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118d4:	69fb      	ldr	r3, [r7, #28]
 80118d6:	4413      	add	r3, r2
 80118d8:	3334      	adds	r3, #52	@ 0x34
 80118da:	460a      	mov	r2, r1
 80118dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80118de:	68ba      	ldr	r2, [r7, #8]
 80118e0:	69fb      	ldr	r3, [r7, #28]
 80118e2:	4413      	add	r3, r2
 80118e4:	781b      	ldrb	r3, [r3, #0]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d006      	beq.n	80118f8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80118ea:	69fb      	ldr	r3, [r7, #28]
 80118ec:	3301      	adds	r3, #1
 80118ee:	61fb      	str	r3, [r7, #28]
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	2b0f      	cmp	r3, #15
 80118f4:	d9e9      	bls.n	80118ca <prvInitialiseNewTask+0x66>
 80118f6:	e000      	b.n	80118fa <prvInitialiseNewTask+0x96>
			{
				break;
 80118f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80118fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118fc:	2200      	movs	r2, #0
 80118fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011902:	e003      	b.n	801190c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011906:	2200      	movs	r2, #0
 8011908:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801190c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801190e:	2b37      	cmp	r3, #55	@ 0x37
 8011910:	d901      	bls.n	8011916 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011912:	2337      	movs	r3, #55	@ 0x37
 8011914:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011918:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801191a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801191c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801191e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011920:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011924:	2200      	movs	r2, #0
 8011926:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801192a:	3304      	adds	r3, #4
 801192c:	4618      	mov	r0, r3
 801192e:	f7fe fe33 	bl	8010598 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011934:	3318      	adds	r3, #24
 8011936:	4618      	mov	r0, r3
 8011938:	f7fe fe2e 	bl	8010598 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801193c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801193e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011940:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011944:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801194a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801194c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801194e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011950:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011954:	2200      	movs	r2, #0
 8011956:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801195a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801195c:	2200      	movs	r2, #0
 801195e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011964:	3354      	adds	r3, #84	@ 0x54
 8011966:	224c      	movs	r2, #76	@ 0x4c
 8011968:	2100      	movs	r1, #0
 801196a:	4618      	mov	r0, r3
 801196c:	f00f fce6 	bl	802133c <memset>
 8011970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011972:	4a0d      	ldr	r2, [pc, #52]	@ (80119a8 <prvInitialiseNewTask+0x144>)
 8011974:	659a      	str	r2, [r3, #88]	@ 0x58
 8011976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011978:	4a0c      	ldr	r2, [pc, #48]	@ (80119ac <prvInitialiseNewTask+0x148>)
 801197a:	65da      	str	r2, [r3, #92]	@ 0x5c
 801197c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801197e:	4a0c      	ldr	r2, [pc, #48]	@ (80119b0 <prvInitialiseNewTask+0x14c>)
 8011980:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011982:	683a      	ldr	r2, [r7, #0]
 8011984:	68f9      	ldr	r1, [r7, #12]
 8011986:	69b8      	ldr	r0, [r7, #24]
 8011988:	f001 feba 	bl	8013700 <pxPortInitialiseStack>
 801198c:	4602      	mov	r2, r0
 801198e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011990:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011994:	2b00      	cmp	r3, #0
 8011996:	d002      	beq.n	801199e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801199a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801199c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801199e:	bf00      	nop
 80119a0:	3720      	adds	r7, #32
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}
 80119a6:	bf00      	nop
 80119a8:	2401e36c 	.word	0x2401e36c
 80119ac:	2401e3d4 	.word	0x2401e3d4
 80119b0:	2401e43c 	.word	0x2401e43c

080119b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80119bc:	f001 ffd4 	bl	8013968 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80119c0:	4b2d      	ldr	r3, [pc, #180]	@ (8011a78 <prvAddNewTaskToReadyList+0xc4>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	3301      	adds	r3, #1
 80119c6:	4a2c      	ldr	r2, [pc, #176]	@ (8011a78 <prvAddNewTaskToReadyList+0xc4>)
 80119c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80119ca:	4b2c      	ldr	r3, [pc, #176]	@ (8011a7c <prvAddNewTaskToReadyList+0xc8>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d109      	bne.n	80119e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80119d2:	4a2a      	ldr	r2, [pc, #168]	@ (8011a7c <prvAddNewTaskToReadyList+0xc8>)
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80119d8:	4b27      	ldr	r3, [pc, #156]	@ (8011a78 <prvAddNewTaskToReadyList+0xc4>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	2b01      	cmp	r3, #1
 80119de:	d110      	bne.n	8011a02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80119e0:	f000 fd34 	bl	801244c <prvInitialiseTaskLists>
 80119e4:	e00d      	b.n	8011a02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80119e6:	4b26      	ldr	r3, [pc, #152]	@ (8011a80 <prvAddNewTaskToReadyList+0xcc>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d109      	bne.n	8011a02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80119ee:	4b23      	ldr	r3, [pc, #140]	@ (8011a7c <prvAddNewTaskToReadyList+0xc8>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119f8:	429a      	cmp	r2, r3
 80119fa:	d802      	bhi.n	8011a02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80119fc:	4a1f      	ldr	r2, [pc, #124]	@ (8011a7c <prvAddNewTaskToReadyList+0xc8>)
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011a02:	4b20      	ldr	r3, [pc, #128]	@ (8011a84 <prvAddNewTaskToReadyList+0xd0>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	3301      	adds	r3, #1
 8011a08:	4a1e      	ldr	r2, [pc, #120]	@ (8011a84 <prvAddNewTaskToReadyList+0xd0>)
 8011a0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8011a84 <prvAddNewTaskToReadyList+0xd0>)
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a18:	4b1b      	ldr	r3, [pc, #108]	@ (8011a88 <prvAddNewTaskToReadyList+0xd4>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d903      	bls.n	8011a28 <prvAddNewTaskToReadyList+0x74>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a24:	4a18      	ldr	r2, [pc, #96]	@ (8011a88 <prvAddNewTaskToReadyList+0xd4>)
 8011a26:	6013      	str	r3, [r2, #0]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a2c:	4613      	mov	r3, r2
 8011a2e:	009b      	lsls	r3, r3, #2
 8011a30:	4413      	add	r3, r2
 8011a32:	009b      	lsls	r3, r3, #2
 8011a34:	4a15      	ldr	r2, [pc, #84]	@ (8011a8c <prvAddNewTaskToReadyList+0xd8>)
 8011a36:	441a      	add	r2, r3
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	3304      	adds	r3, #4
 8011a3c:	4619      	mov	r1, r3
 8011a3e:	4610      	mov	r0, r2
 8011a40:	f7fe fdb7 	bl	80105b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011a44:	f001 ffc2 	bl	80139cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011a48:	4b0d      	ldr	r3, [pc, #52]	@ (8011a80 <prvAddNewTaskToReadyList+0xcc>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d00e      	beq.n	8011a6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011a50:	4b0a      	ldr	r3, [pc, #40]	@ (8011a7c <prvAddNewTaskToReadyList+0xc8>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a5a:	429a      	cmp	r2, r3
 8011a5c:	d207      	bcs.n	8011a6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8011a90 <prvAddNewTaskToReadyList+0xdc>)
 8011a60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a64:	601a      	str	r2, [r3, #0]
 8011a66:	f3bf 8f4f 	dsb	sy
 8011a6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a6e:	bf00      	nop
 8011a70:	3708      	adds	r7, #8
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}
 8011a76:	bf00      	nop
 8011a78:	240018e0 	.word	0x240018e0
 8011a7c:	2400140c 	.word	0x2400140c
 8011a80:	240018ec 	.word	0x240018ec
 8011a84:	240018fc 	.word	0x240018fc
 8011a88:	240018e8 	.word	0x240018e8
 8011a8c:	24001410 	.word	0x24001410
 8011a90:	e000ed04 	.word	0xe000ed04

08011a94 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b084      	sub	sp, #16
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011a9c:	f001 ff64 	bl	8013968 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d102      	bne.n	8011aac <vTaskDelete+0x18>
 8011aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8011b5c <vTaskDelete+0xc8>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	e000      	b.n	8011aae <vTaskDelete+0x1a>
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	3304      	adds	r3, #4
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7fe fdd9 	bl	801066c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d004      	beq.n	8011acc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	3318      	adds	r3, #24
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7fe fdd0 	bl	801066c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8011acc:	4b24      	ldr	r3, [pc, #144]	@ (8011b60 <vTaskDelete+0xcc>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	4a23      	ldr	r2, [pc, #140]	@ (8011b60 <vTaskDelete+0xcc>)
 8011ad4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8011ad6:	4b21      	ldr	r3, [pc, #132]	@ (8011b5c <vTaskDelete+0xc8>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	68fa      	ldr	r2, [r7, #12]
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d10b      	bne.n	8011af8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	3304      	adds	r3, #4
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	481f      	ldr	r0, [pc, #124]	@ (8011b64 <vTaskDelete+0xd0>)
 8011ae8:	f7fe fd63 	bl	80105b2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8011aec:	4b1e      	ldr	r3, [pc, #120]	@ (8011b68 <vTaskDelete+0xd4>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	3301      	adds	r3, #1
 8011af2:	4a1d      	ldr	r2, [pc, #116]	@ (8011b68 <vTaskDelete+0xd4>)
 8011af4:	6013      	str	r3, [r2, #0]
 8011af6:	e009      	b.n	8011b0c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8011af8:	4b1c      	ldr	r3, [pc, #112]	@ (8011b6c <vTaskDelete+0xd8>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	3b01      	subs	r3, #1
 8011afe:	4a1b      	ldr	r2, [pc, #108]	@ (8011b6c <vTaskDelete+0xd8>)
 8011b00:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8011b02:	68f8      	ldr	r0, [r7, #12]
 8011b04:	f000 fd10 	bl	8012528 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8011b08:	f000 fd44 	bl	8012594 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8011b0c:	f001 ff5e 	bl	80139cc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8011b10:	4b17      	ldr	r3, [pc, #92]	@ (8011b70 <vTaskDelete+0xdc>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d01c      	beq.n	8011b52 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8011b18:	4b10      	ldr	r3, [pc, #64]	@ (8011b5c <vTaskDelete+0xc8>)
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	68fa      	ldr	r2, [r7, #12]
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d117      	bne.n	8011b52 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8011b22:	4b14      	ldr	r3, [pc, #80]	@ (8011b74 <vTaskDelete+0xe0>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d00b      	beq.n	8011b42 <vTaskDelete+0xae>
	__asm volatile
 8011b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b2e:	f383 8811 	msr	BASEPRI, r3
 8011b32:	f3bf 8f6f 	isb	sy
 8011b36:	f3bf 8f4f 	dsb	sy
 8011b3a:	60bb      	str	r3, [r7, #8]
}
 8011b3c:	bf00      	nop
 8011b3e:	bf00      	nop
 8011b40:	e7fd      	b.n	8011b3e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8011b42:	4b0d      	ldr	r3, [pc, #52]	@ (8011b78 <vTaskDelete+0xe4>)
 8011b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b48:	601a      	str	r2, [r3, #0]
 8011b4a:	f3bf 8f4f 	dsb	sy
 8011b4e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011b52:	bf00      	nop
 8011b54:	3710      	adds	r7, #16
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}
 8011b5a:	bf00      	nop
 8011b5c:	2400140c 	.word	0x2400140c
 8011b60:	240018fc 	.word	0x240018fc
 8011b64:	240018b4 	.word	0x240018b4
 8011b68:	240018c8 	.word	0x240018c8
 8011b6c:	240018e0 	.word	0x240018e0
 8011b70:	240018ec 	.word	0x240018ec
 8011b74:	24001908 	.word	0x24001908
 8011b78:	e000ed04 	.word	0xe000ed04

08011b7c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b08a      	sub	sp, #40	@ 0x28
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
 8011b84:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8011b86:	2300      	movs	r3, #0
 8011b88:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d10b      	bne.n	8011ba8 <vTaskDelayUntil+0x2c>
	__asm volatile
 8011b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b94:	f383 8811 	msr	BASEPRI, r3
 8011b98:	f3bf 8f6f 	isb	sy
 8011b9c:	f3bf 8f4f 	dsb	sy
 8011ba0:	617b      	str	r3, [r7, #20]
}
 8011ba2:	bf00      	nop
 8011ba4:	bf00      	nop
 8011ba6:	e7fd      	b.n	8011ba4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d10b      	bne.n	8011bc6 <vTaskDelayUntil+0x4a>
	__asm volatile
 8011bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bb2:	f383 8811 	msr	BASEPRI, r3
 8011bb6:	f3bf 8f6f 	isb	sy
 8011bba:	f3bf 8f4f 	dsb	sy
 8011bbe:	613b      	str	r3, [r7, #16]
}
 8011bc0:	bf00      	nop
 8011bc2:	bf00      	nop
 8011bc4:	e7fd      	b.n	8011bc2 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8011bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8011c70 <vTaskDelayUntil+0xf4>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d00b      	beq.n	8011be6 <vTaskDelayUntil+0x6a>
	__asm volatile
 8011bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bd2:	f383 8811 	msr	BASEPRI, r3
 8011bd6:	f3bf 8f6f 	isb	sy
 8011bda:	f3bf 8f4f 	dsb	sy
 8011bde:	60fb      	str	r3, [r7, #12]
}
 8011be0:	bf00      	nop
 8011be2:	bf00      	nop
 8011be4:	e7fd      	b.n	8011be2 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8011be6:	f000 f8ef 	bl	8011dc8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8011bea:	4b22      	ldr	r3, [pc, #136]	@ (8011c74 <vTaskDelayUntil+0xf8>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	683a      	ldr	r2, [r7, #0]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	6a3a      	ldr	r2, [r7, #32]
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d20b      	bcs.n	8011c1c <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	69fa      	ldr	r2, [r7, #28]
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	d211      	bcs.n	8011c32 <vTaskDelayUntil+0xb6>
 8011c0e:	69fa      	ldr	r2, [r7, #28]
 8011c10:	6a3b      	ldr	r3, [r7, #32]
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d90d      	bls.n	8011c32 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8011c16:	2301      	movs	r3, #1
 8011c18:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c1a:	e00a      	b.n	8011c32 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	69fa      	ldr	r2, [r7, #28]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d303      	bcc.n	8011c2e <vTaskDelayUntil+0xb2>
 8011c26:	69fa      	ldr	r2, [r7, #28]
 8011c28:	6a3b      	ldr	r3, [r7, #32]
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d901      	bls.n	8011c32 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8011c2e:	2301      	movs	r3, #1
 8011c30:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	69fa      	ldr	r2, [r7, #28]
 8011c36:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8011c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d006      	beq.n	8011c4c <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8011c3e:	69fa      	ldr	r2, [r7, #28]
 8011c40:	6a3b      	ldr	r3, [r7, #32]
 8011c42:	1ad3      	subs	r3, r2, r3
 8011c44:	2100      	movs	r1, #0
 8011c46:	4618      	mov	r0, r3
 8011c48:	f001 f8ec 	bl	8012e24 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8011c4c:	f000 f8ca 	bl	8011de4 <xTaskResumeAll>
 8011c50:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011c52:	69bb      	ldr	r3, [r7, #24]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d107      	bne.n	8011c68 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8011c58:	4b07      	ldr	r3, [pc, #28]	@ (8011c78 <vTaskDelayUntil+0xfc>)
 8011c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c5e:	601a      	str	r2, [r3, #0]
 8011c60:	f3bf 8f4f 	dsb	sy
 8011c64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011c68:	bf00      	nop
 8011c6a:	3728      	adds	r7, #40	@ 0x28
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	24001908 	.word	0x24001908
 8011c74:	240018e4 	.word	0x240018e4
 8011c78:	e000ed04 	.word	0xe000ed04

08011c7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b084      	sub	sp, #16
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011c84:	2300      	movs	r3, #0
 8011c86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d018      	beq.n	8011cc0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011c8e:	4b14      	ldr	r3, [pc, #80]	@ (8011ce0 <vTaskDelay+0x64>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d00b      	beq.n	8011cae <vTaskDelay+0x32>
	__asm volatile
 8011c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c9a:	f383 8811 	msr	BASEPRI, r3
 8011c9e:	f3bf 8f6f 	isb	sy
 8011ca2:	f3bf 8f4f 	dsb	sy
 8011ca6:	60bb      	str	r3, [r7, #8]
}
 8011ca8:	bf00      	nop
 8011caa:	bf00      	nop
 8011cac:	e7fd      	b.n	8011caa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011cae:	f000 f88b 	bl	8011dc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011cb2:	2100      	movs	r1, #0
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f001 f8b5 	bl	8012e24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011cba:	f000 f893 	bl	8011de4 <xTaskResumeAll>
 8011cbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d107      	bne.n	8011cd6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8011cc6:	4b07      	ldr	r3, [pc, #28]	@ (8011ce4 <vTaskDelay+0x68>)
 8011cc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ccc:	601a      	str	r2, [r3, #0]
 8011cce:	f3bf 8f4f 	dsb	sy
 8011cd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011cd6:	bf00      	nop
 8011cd8:	3710      	adds	r7, #16
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}
 8011cde:	bf00      	nop
 8011ce0:	24001908 	.word	0x24001908
 8011ce4:	e000ed04 	.word	0xe000ed04

08011ce8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b08a      	sub	sp, #40	@ 0x28
 8011cec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011cf6:	463a      	mov	r2, r7
 8011cf8:	1d39      	adds	r1, r7, #4
 8011cfa:	f107 0308 	add.w	r3, r7, #8
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f7fe fbf6 	bl	80104f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011d04:	6839      	ldr	r1, [r7, #0]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	68ba      	ldr	r2, [r7, #8]
 8011d0a:	9202      	str	r2, [sp, #8]
 8011d0c:	9301      	str	r3, [sp, #4]
 8011d0e:	2300      	movs	r3, #0
 8011d10:	9300      	str	r3, [sp, #0]
 8011d12:	2300      	movs	r3, #0
 8011d14:	460a      	mov	r2, r1
 8011d16:	4924      	ldr	r1, [pc, #144]	@ (8011da8 <vTaskStartScheduler+0xc0>)
 8011d18:	4824      	ldr	r0, [pc, #144]	@ (8011dac <vTaskStartScheduler+0xc4>)
 8011d1a:	f7ff fcfd 	bl	8011718 <xTaskCreateStatic>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	4a23      	ldr	r2, [pc, #140]	@ (8011db0 <vTaskStartScheduler+0xc8>)
 8011d22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011d24:	4b22      	ldr	r3, [pc, #136]	@ (8011db0 <vTaskStartScheduler+0xc8>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d002      	beq.n	8011d32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	617b      	str	r3, [r7, #20]
 8011d30:	e001      	b.n	8011d36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011d32:	2300      	movs	r3, #0
 8011d34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011d36:	697b      	ldr	r3, [r7, #20]
 8011d38:	2b01      	cmp	r3, #1
 8011d3a:	d102      	bne.n	8011d42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011d3c:	f001 f8c6 	bl	8012ecc <xTimerCreateTimerTask>
 8011d40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	2b01      	cmp	r3, #1
 8011d46:	d11b      	bne.n	8011d80 <vTaskStartScheduler+0x98>
	__asm volatile
 8011d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d4c:	f383 8811 	msr	BASEPRI, r3
 8011d50:	f3bf 8f6f 	isb	sy
 8011d54:	f3bf 8f4f 	dsb	sy
 8011d58:	613b      	str	r3, [r7, #16]
}
 8011d5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011d5c:	4b15      	ldr	r3, [pc, #84]	@ (8011db4 <vTaskStartScheduler+0xcc>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	3354      	adds	r3, #84	@ 0x54
 8011d62:	4a15      	ldr	r2, [pc, #84]	@ (8011db8 <vTaskStartScheduler+0xd0>)
 8011d64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011d66:	4b15      	ldr	r3, [pc, #84]	@ (8011dbc <vTaskStartScheduler+0xd4>)
 8011d68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011d6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011d6e:	4b14      	ldr	r3, [pc, #80]	@ (8011dc0 <vTaskStartScheduler+0xd8>)
 8011d70:	2201      	movs	r2, #1
 8011d72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011d74:	4b13      	ldr	r3, [pc, #76]	@ (8011dc4 <vTaskStartScheduler+0xdc>)
 8011d76:	2200      	movs	r2, #0
 8011d78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011d7a:	f001 fd51 	bl	8013820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011d7e:	e00f      	b.n	8011da0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011d86:	d10b      	bne.n	8011da0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8011d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d8c:	f383 8811 	msr	BASEPRI, r3
 8011d90:	f3bf 8f6f 	isb	sy
 8011d94:	f3bf 8f4f 	dsb	sy
 8011d98:	60fb      	str	r3, [r7, #12]
}
 8011d9a:	bf00      	nop
 8011d9c:	bf00      	nop
 8011d9e:	e7fd      	b.n	8011d9c <vTaskStartScheduler+0xb4>
}
 8011da0:	bf00      	nop
 8011da2:	3718      	adds	r7, #24
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}
 8011da8:	08023254 	.word	0x08023254
 8011dac:	0801241d 	.word	0x0801241d
 8011db0:	24001904 	.word	0x24001904
 8011db4:	2400140c 	.word	0x2400140c
 8011db8:	24000068 	.word	0x24000068
 8011dbc:	24001900 	.word	0x24001900
 8011dc0:	240018ec 	.word	0x240018ec
 8011dc4:	240018e4 	.word	0x240018e4

08011dc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011dc8:	b480      	push	{r7}
 8011dca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011dcc:	4b04      	ldr	r3, [pc, #16]	@ (8011de0 <vTaskSuspendAll+0x18>)
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	4a03      	ldr	r2, [pc, #12]	@ (8011de0 <vTaskSuspendAll+0x18>)
 8011dd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8011dd6:	bf00      	nop
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dde:	4770      	bx	lr
 8011de0:	24001908 	.word	0x24001908

08011de4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011dea:	2300      	movs	r3, #0
 8011dec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011dee:	2300      	movs	r3, #0
 8011df0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011df2:	4b42      	ldr	r3, [pc, #264]	@ (8011efc <xTaskResumeAll+0x118>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d10b      	bne.n	8011e12 <xTaskResumeAll+0x2e>
	__asm volatile
 8011dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011dfe:	f383 8811 	msr	BASEPRI, r3
 8011e02:	f3bf 8f6f 	isb	sy
 8011e06:	f3bf 8f4f 	dsb	sy
 8011e0a:	603b      	str	r3, [r7, #0]
}
 8011e0c:	bf00      	nop
 8011e0e:	bf00      	nop
 8011e10:	e7fd      	b.n	8011e0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011e12:	f001 fda9 	bl	8013968 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011e16:	4b39      	ldr	r3, [pc, #228]	@ (8011efc <xTaskResumeAll+0x118>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	3b01      	subs	r3, #1
 8011e1c:	4a37      	ldr	r2, [pc, #220]	@ (8011efc <xTaskResumeAll+0x118>)
 8011e1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e20:	4b36      	ldr	r3, [pc, #216]	@ (8011efc <xTaskResumeAll+0x118>)
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d162      	bne.n	8011eee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011e28:	4b35      	ldr	r3, [pc, #212]	@ (8011f00 <xTaskResumeAll+0x11c>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d05e      	beq.n	8011eee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011e30:	e02f      	b.n	8011e92 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e32:	4b34      	ldr	r3, [pc, #208]	@ (8011f04 <xTaskResumeAll+0x120>)
 8011e34:	68db      	ldr	r3, [r3, #12]
 8011e36:	68db      	ldr	r3, [r3, #12]
 8011e38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	3318      	adds	r3, #24
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7fe fc14 	bl	801066c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	3304      	adds	r3, #4
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f7fe fc0f 	bl	801066c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e52:	4b2d      	ldr	r3, [pc, #180]	@ (8011f08 <xTaskResumeAll+0x124>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d903      	bls.n	8011e62 <xTaskResumeAll+0x7e>
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8011f08 <xTaskResumeAll+0x124>)
 8011e60:	6013      	str	r3, [r2, #0]
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e66:	4613      	mov	r3, r2
 8011e68:	009b      	lsls	r3, r3, #2
 8011e6a:	4413      	add	r3, r2
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	4a27      	ldr	r2, [pc, #156]	@ (8011f0c <xTaskResumeAll+0x128>)
 8011e70:	441a      	add	r2, r3
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	3304      	adds	r3, #4
 8011e76:	4619      	mov	r1, r3
 8011e78:	4610      	mov	r0, r2
 8011e7a:	f7fe fb9a 	bl	80105b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e82:	4b23      	ldr	r3, [pc, #140]	@ (8011f10 <xTaskResumeAll+0x12c>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e88:	429a      	cmp	r2, r3
 8011e8a:	d302      	bcc.n	8011e92 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011e8c:	4b21      	ldr	r3, [pc, #132]	@ (8011f14 <xTaskResumeAll+0x130>)
 8011e8e:	2201      	movs	r2, #1
 8011e90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011e92:	4b1c      	ldr	r3, [pc, #112]	@ (8011f04 <xTaskResumeAll+0x120>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d1cb      	bne.n	8011e32 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d001      	beq.n	8011ea4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011ea0:	f000 fb78 	bl	8012594 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011ea4:	4b1c      	ldr	r3, [pc, #112]	@ (8011f18 <xTaskResumeAll+0x134>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d010      	beq.n	8011ed2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011eb0:	f000 f858 	bl	8011f64 <xTaskIncrementTick>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d002      	beq.n	8011ec0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8011eba:	4b16      	ldr	r3, [pc, #88]	@ (8011f14 <xTaskResumeAll+0x130>)
 8011ebc:	2201      	movs	r2, #1
 8011ebe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	3b01      	subs	r3, #1
 8011ec4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d1f1      	bne.n	8011eb0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8011ecc:	4b12      	ldr	r3, [pc, #72]	@ (8011f18 <xTaskResumeAll+0x134>)
 8011ece:	2200      	movs	r2, #0
 8011ed0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011ed2:	4b10      	ldr	r3, [pc, #64]	@ (8011f14 <xTaskResumeAll+0x130>)
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d009      	beq.n	8011eee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011eda:	2301      	movs	r3, #1
 8011edc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011ede:	4b0f      	ldr	r3, [pc, #60]	@ (8011f1c <xTaskResumeAll+0x138>)
 8011ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ee4:	601a      	str	r2, [r3, #0]
 8011ee6:	f3bf 8f4f 	dsb	sy
 8011eea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011eee:	f001 fd6d 	bl	80139cc <vPortExitCritical>

	return xAlreadyYielded;
 8011ef2:	68bb      	ldr	r3, [r7, #8]
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3710      	adds	r7, #16
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	24001908 	.word	0x24001908
 8011f00:	240018e0 	.word	0x240018e0
 8011f04:	240018a0 	.word	0x240018a0
 8011f08:	240018e8 	.word	0x240018e8
 8011f0c:	24001410 	.word	0x24001410
 8011f10:	2400140c 	.word	0x2400140c
 8011f14:	240018f4 	.word	0x240018f4
 8011f18:	240018f0 	.word	0x240018f0
 8011f1c:	e000ed04 	.word	0xe000ed04

08011f20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011f20:	b480      	push	{r7}
 8011f22:	b083      	sub	sp, #12
 8011f24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011f26:	4b05      	ldr	r3, [pc, #20]	@ (8011f3c <xTaskGetTickCount+0x1c>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011f2c:	687b      	ldr	r3, [r7, #4]
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	370c      	adds	r7, #12
 8011f32:	46bd      	mov	sp, r7
 8011f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f38:	4770      	bx	lr
 8011f3a:	bf00      	nop
 8011f3c:	240018e4 	.word	0x240018e4

08011f40 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b082      	sub	sp, #8
 8011f44:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f46:	f001 fdef 	bl	8013b28 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011f4a:	2300      	movs	r3, #0
 8011f4c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011f4e:	4b04      	ldr	r3, [pc, #16]	@ (8011f60 <xTaskGetTickCountFromISR+0x20>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011f54:	683b      	ldr	r3, [r7, #0]
}
 8011f56:	4618      	mov	r0, r3
 8011f58:	3708      	adds	r7, #8
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	bd80      	pop	{r7, pc}
 8011f5e:	bf00      	nop
 8011f60:	240018e4 	.word	0x240018e4

08011f64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b086      	sub	sp, #24
 8011f68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f6e:	4b4f      	ldr	r3, [pc, #316]	@ (80120ac <xTaskIncrementTick+0x148>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	f040 8090 	bne.w	8012098 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011f78:	4b4d      	ldr	r3, [pc, #308]	@ (80120b0 <xTaskIncrementTick+0x14c>)
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	3301      	adds	r3, #1
 8011f7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011f80:	4a4b      	ldr	r2, [pc, #300]	@ (80120b0 <xTaskIncrementTick+0x14c>)
 8011f82:	693b      	ldr	r3, [r7, #16]
 8011f84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011f86:	693b      	ldr	r3, [r7, #16]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d121      	bne.n	8011fd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011f8c:	4b49      	ldr	r3, [pc, #292]	@ (80120b4 <xTaskIncrementTick+0x150>)
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d00b      	beq.n	8011fae <xTaskIncrementTick+0x4a>
	__asm volatile
 8011f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f9a:	f383 8811 	msr	BASEPRI, r3
 8011f9e:	f3bf 8f6f 	isb	sy
 8011fa2:	f3bf 8f4f 	dsb	sy
 8011fa6:	603b      	str	r3, [r7, #0]
}
 8011fa8:	bf00      	nop
 8011faa:	bf00      	nop
 8011fac:	e7fd      	b.n	8011faa <xTaskIncrementTick+0x46>
 8011fae:	4b41      	ldr	r3, [pc, #260]	@ (80120b4 <xTaskIncrementTick+0x150>)
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	60fb      	str	r3, [r7, #12]
 8011fb4:	4b40      	ldr	r3, [pc, #256]	@ (80120b8 <xTaskIncrementTick+0x154>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	4a3e      	ldr	r2, [pc, #248]	@ (80120b4 <xTaskIncrementTick+0x150>)
 8011fba:	6013      	str	r3, [r2, #0]
 8011fbc:	4a3e      	ldr	r2, [pc, #248]	@ (80120b8 <xTaskIncrementTick+0x154>)
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	6013      	str	r3, [r2, #0]
 8011fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80120bc <xTaskIncrementTick+0x158>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	4a3c      	ldr	r2, [pc, #240]	@ (80120bc <xTaskIncrementTick+0x158>)
 8011fca:	6013      	str	r3, [r2, #0]
 8011fcc:	f000 fae2 	bl	8012594 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80120c0 <xTaskIncrementTick+0x15c>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	693a      	ldr	r2, [r7, #16]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d349      	bcc.n	801206e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011fda:	4b36      	ldr	r3, [pc, #216]	@ (80120b4 <xTaskIncrementTick+0x150>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d104      	bne.n	8011fee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fe4:	4b36      	ldr	r3, [pc, #216]	@ (80120c0 <xTaskIncrementTick+0x15c>)
 8011fe6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011fea:	601a      	str	r2, [r3, #0]
					break;
 8011fec:	e03f      	b.n	801206e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fee:	4b31      	ldr	r3, [pc, #196]	@ (80120b4 <xTaskIncrementTick+0x150>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	68db      	ldr	r3, [r3, #12]
 8011ff4:	68db      	ldr	r3, [r3, #12]
 8011ff6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	685b      	ldr	r3, [r3, #4]
 8011ffc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011ffe:	693a      	ldr	r2, [r7, #16]
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	429a      	cmp	r2, r3
 8012004:	d203      	bcs.n	801200e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012006:	4a2e      	ldr	r2, [pc, #184]	@ (80120c0 <xTaskIncrementTick+0x15c>)
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801200c:	e02f      	b.n	801206e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	3304      	adds	r3, #4
 8012012:	4618      	mov	r0, r3
 8012014:	f7fe fb2a 	bl	801066c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012018:	68bb      	ldr	r3, [r7, #8]
 801201a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801201c:	2b00      	cmp	r3, #0
 801201e:	d004      	beq.n	801202a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012020:	68bb      	ldr	r3, [r7, #8]
 8012022:	3318      	adds	r3, #24
 8012024:	4618      	mov	r0, r3
 8012026:	f7fe fb21 	bl	801066c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801202e:	4b25      	ldr	r3, [pc, #148]	@ (80120c4 <xTaskIncrementTick+0x160>)
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	429a      	cmp	r2, r3
 8012034:	d903      	bls.n	801203e <xTaskIncrementTick+0xda>
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801203a:	4a22      	ldr	r2, [pc, #136]	@ (80120c4 <xTaskIncrementTick+0x160>)
 801203c:	6013      	str	r3, [r2, #0]
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012042:	4613      	mov	r3, r2
 8012044:	009b      	lsls	r3, r3, #2
 8012046:	4413      	add	r3, r2
 8012048:	009b      	lsls	r3, r3, #2
 801204a:	4a1f      	ldr	r2, [pc, #124]	@ (80120c8 <xTaskIncrementTick+0x164>)
 801204c:	441a      	add	r2, r3
 801204e:	68bb      	ldr	r3, [r7, #8]
 8012050:	3304      	adds	r3, #4
 8012052:	4619      	mov	r1, r3
 8012054:	4610      	mov	r0, r2
 8012056:	f7fe faac 	bl	80105b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801205e:	4b1b      	ldr	r3, [pc, #108]	@ (80120cc <xTaskIncrementTick+0x168>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012064:	429a      	cmp	r2, r3
 8012066:	d3b8      	bcc.n	8011fda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012068:	2301      	movs	r3, #1
 801206a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801206c:	e7b5      	b.n	8011fda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801206e:	4b17      	ldr	r3, [pc, #92]	@ (80120cc <xTaskIncrementTick+0x168>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012074:	4914      	ldr	r1, [pc, #80]	@ (80120c8 <xTaskIncrementTick+0x164>)
 8012076:	4613      	mov	r3, r2
 8012078:	009b      	lsls	r3, r3, #2
 801207a:	4413      	add	r3, r2
 801207c:	009b      	lsls	r3, r3, #2
 801207e:	440b      	add	r3, r1
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	2b01      	cmp	r3, #1
 8012084:	d901      	bls.n	801208a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8012086:	2301      	movs	r3, #1
 8012088:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801208a:	4b11      	ldr	r3, [pc, #68]	@ (80120d0 <xTaskIncrementTick+0x16c>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d007      	beq.n	80120a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8012092:	2301      	movs	r3, #1
 8012094:	617b      	str	r3, [r7, #20]
 8012096:	e004      	b.n	80120a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012098:	4b0e      	ldr	r3, [pc, #56]	@ (80120d4 <xTaskIncrementTick+0x170>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	3301      	adds	r3, #1
 801209e:	4a0d      	ldr	r2, [pc, #52]	@ (80120d4 <xTaskIncrementTick+0x170>)
 80120a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80120a2:	697b      	ldr	r3, [r7, #20]
}
 80120a4:	4618      	mov	r0, r3
 80120a6:	3718      	adds	r7, #24
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}
 80120ac:	24001908 	.word	0x24001908
 80120b0:	240018e4 	.word	0x240018e4
 80120b4:	24001898 	.word	0x24001898
 80120b8:	2400189c 	.word	0x2400189c
 80120bc:	240018f8 	.word	0x240018f8
 80120c0:	24001900 	.word	0x24001900
 80120c4:	240018e8 	.word	0x240018e8
 80120c8:	24001410 	.word	0x24001410
 80120cc:	2400140c 	.word	0x2400140c
 80120d0:	240018f4 	.word	0x240018f4
 80120d4:	240018f0 	.word	0x240018f0

080120d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80120d8:	b480      	push	{r7}
 80120da:	b085      	sub	sp, #20
 80120dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80120de:	4b2b      	ldr	r3, [pc, #172]	@ (801218c <vTaskSwitchContext+0xb4>)
 80120e0:	681b      	ldr	r3, [r3, #0]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d003      	beq.n	80120ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80120e6:	4b2a      	ldr	r3, [pc, #168]	@ (8012190 <vTaskSwitchContext+0xb8>)
 80120e8:	2201      	movs	r2, #1
 80120ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80120ec:	e047      	b.n	801217e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80120ee:	4b28      	ldr	r3, [pc, #160]	@ (8012190 <vTaskSwitchContext+0xb8>)
 80120f0:	2200      	movs	r2, #0
 80120f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120f4:	4b27      	ldr	r3, [pc, #156]	@ (8012194 <vTaskSwitchContext+0xbc>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	60fb      	str	r3, [r7, #12]
 80120fa:	e011      	b.n	8012120 <vTaskSwitchContext+0x48>
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d10b      	bne.n	801211a <vTaskSwitchContext+0x42>
	__asm volatile
 8012102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012106:	f383 8811 	msr	BASEPRI, r3
 801210a:	f3bf 8f6f 	isb	sy
 801210e:	f3bf 8f4f 	dsb	sy
 8012112:	607b      	str	r3, [r7, #4]
}
 8012114:	bf00      	nop
 8012116:	bf00      	nop
 8012118:	e7fd      	b.n	8012116 <vTaskSwitchContext+0x3e>
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	3b01      	subs	r3, #1
 801211e:	60fb      	str	r3, [r7, #12]
 8012120:	491d      	ldr	r1, [pc, #116]	@ (8012198 <vTaskSwitchContext+0xc0>)
 8012122:	68fa      	ldr	r2, [r7, #12]
 8012124:	4613      	mov	r3, r2
 8012126:	009b      	lsls	r3, r3, #2
 8012128:	4413      	add	r3, r2
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	440b      	add	r3, r1
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d0e3      	beq.n	80120fc <vTaskSwitchContext+0x24>
 8012134:	68fa      	ldr	r2, [r7, #12]
 8012136:	4613      	mov	r3, r2
 8012138:	009b      	lsls	r3, r3, #2
 801213a:	4413      	add	r3, r2
 801213c:	009b      	lsls	r3, r3, #2
 801213e:	4a16      	ldr	r2, [pc, #88]	@ (8012198 <vTaskSwitchContext+0xc0>)
 8012140:	4413      	add	r3, r2
 8012142:	60bb      	str	r3, [r7, #8]
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	685a      	ldr	r2, [r3, #4]
 801214a:	68bb      	ldr	r3, [r7, #8]
 801214c:	605a      	str	r2, [r3, #4]
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	685a      	ldr	r2, [r3, #4]
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	3308      	adds	r3, #8
 8012156:	429a      	cmp	r2, r3
 8012158:	d104      	bne.n	8012164 <vTaskSwitchContext+0x8c>
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	685a      	ldr	r2, [r3, #4]
 8012160:	68bb      	ldr	r3, [r7, #8]
 8012162:	605a      	str	r2, [r3, #4]
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	685b      	ldr	r3, [r3, #4]
 8012168:	68db      	ldr	r3, [r3, #12]
 801216a:	4a0c      	ldr	r2, [pc, #48]	@ (801219c <vTaskSwitchContext+0xc4>)
 801216c:	6013      	str	r3, [r2, #0]
 801216e:	4a09      	ldr	r2, [pc, #36]	@ (8012194 <vTaskSwitchContext+0xbc>)
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012174:	4b09      	ldr	r3, [pc, #36]	@ (801219c <vTaskSwitchContext+0xc4>)
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	3354      	adds	r3, #84	@ 0x54
 801217a:	4a09      	ldr	r2, [pc, #36]	@ (80121a0 <vTaskSwitchContext+0xc8>)
 801217c:	6013      	str	r3, [r2, #0]
}
 801217e:	bf00      	nop
 8012180:	3714      	adds	r7, #20
 8012182:	46bd      	mov	sp, r7
 8012184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012188:	4770      	bx	lr
 801218a:	bf00      	nop
 801218c:	24001908 	.word	0x24001908
 8012190:	240018f4 	.word	0x240018f4
 8012194:	240018e8 	.word	0x240018e8
 8012198:	24001410 	.word	0x24001410
 801219c:	2400140c 	.word	0x2400140c
 80121a0:	24000068 	.word	0x24000068

080121a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b084      	sub	sp, #16
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d10b      	bne.n	80121cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80121b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121b8:	f383 8811 	msr	BASEPRI, r3
 80121bc:	f3bf 8f6f 	isb	sy
 80121c0:	f3bf 8f4f 	dsb	sy
 80121c4:	60fb      	str	r3, [r7, #12]
}
 80121c6:	bf00      	nop
 80121c8:	bf00      	nop
 80121ca:	e7fd      	b.n	80121c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80121cc:	4b07      	ldr	r3, [pc, #28]	@ (80121ec <vTaskPlaceOnEventList+0x48>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	3318      	adds	r3, #24
 80121d2:	4619      	mov	r1, r3
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f7fe fa10 	bl	80105fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80121da:	2101      	movs	r1, #1
 80121dc:	6838      	ldr	r0, [r7, #0]
 80121de:	f000 fe21 	bl	8012e24 <prvAddCurrentTaskToDelayedList>
}
 80121e2:	bf00      	nop
 80121e4:	3710      	adds	r7, #16
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
 80121ea:	bf00      	nop
 80121ec:	2400140c 	.word	0x2400140c

080121f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b086      	sub	sp, #24
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	60f8      	str	r0, [r7, #12]
 80121f8:	60b9      	str	r1, [r7, #8]
 80121fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d10b      	bne.n	801221a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8012202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012206:	f383 8811 	msr	BASEPRI, r3
 801220a:	f3bf 8f6f 	isb	sy
 801220e:	f3bf 8f4f 	dsb	sy
 8012212:	617b      	str	r3, [r7, #20]
}
 8012214:	bf00      	nop
 8012216:	bf00      	nop
 8012218:	e7fd      	b.n	8012216 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801221a:	4b0a      	ldr	r3, [pc, #40]	@ (8012244 <vTaskPlaceOnEventListRestricted+0x54>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	3318      	adds	r3, #24
 8012220:	4619      	mov	r1, r3
 8012222:	68f8      	ldr	r0, [r7, #12]
 8012224:	f7fe f9c5 	bl	80105b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d002      	beq.n	8012234 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801222e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012232:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8012234:	6879      	ldr	r1, [r7, #4]
 8012236:	68b8      	ldr	r0, [r7, #8]
 8012238:	f000 fdf4 	bl	8012e24 <prvAddCurrentTaskToDelayedList>
	}
 801223c:	bf00      	nop
 801223e:	3718      	adds	r7, #24
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	2400140c 	.word	0x2400140c

08012248 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b086      	sub	sp, #24
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	68db      	ldr	r3, [r3, #12]
 8012254:	68db      	ldr	r3, [r3, #12]
 8012256:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d10b      	bne.n	8012276 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801225e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012262:	f383 8811 	msr	BASEPRI, r3
 8012266:	f3bf 8f6f 	isb	sy
 801226a:	f3bf 8f4f 	dsb	sy
 801226e:	60fb      	str	r3, [r7, #12]
}
 8012270:	bf00      	nop
 8012272:	bf00      	nop
 8012274:	e7fd      	b.n	8012272 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	3318      	adds	r3, #24
 801227a:	4618      	mov	r0, r3
 801227c:	f7fe f9f6 	bl	801066c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012280:	4b1d      	ldr	r3, [pc, #116]	@ (80122f8 <xTaskRemoveFromEventList+0xb0>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d11d      	bne.n	80122c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	3304      	adds	r3, #4
 801228c:	4618      	mov	r0, r3
 801228e:	f7fe f9ed 	bl	801066c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012292:	693b      	ldr	r3, [r7, #16]
 8012294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012296:	4b19      	ldr	r3, [pc, #100]	@ (80122fc <xTaskRemoveFromEventList+0xb4>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	429a      	cmp	r2, r3
 801229c:	d903      	bls.n	80122a6 <xTaskRemoveFromEventList+0x5e>
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122a2:	4a16      	ldr	r2, [pc, #88]	@ (80122fc <xTaskRemoveFromEventList+0xb4>)
 80122a4:	6013      	str	r3, [r2, #0]
 80122a6:	693b      	ldr	r3, [r7, #16]
 80122a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80122aa:	4613      	mov	r3, r2
 80122ac:	009b      	lsls	r3, r3, #2
 80122ae:	4413      	add	r3, r2
 80122b0:	009b      	lsls	r3, r3, #2
 80122b2:	4a13      	ldr	r2, [pc, #76]	@ (8012300 <xTaskRemoveFromEventList+0xb8>)
 80122b4:	441a      	add	r2, r3
 80122b6:	693b      	ldr	r3, [r7, #16]
 80122b8:	3304      	adds	r3, #4
 80122ba:	4619      	mov	r1, r3
 80122bc:	4610      	mov	r0, r2
 80122be:	f7fe f978 	bl	80105b2 <vListInsertEnd>
 80122c2:	e005      	b.n	80122d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	3318      	adds	r3, #24
 80122c8:	4619      	mov	r1, r3
 80122ca:	480e      	ldr	r0, [pc, #56]	@ (8012304 <xTaskRemoveFromEventList+0xbc>)
 80122cc:	f7fe f971 	bl	80105b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80122d4:	4b0c      	ldr	r3, [pc, #48]	@ (8012308 <xTaskRemoveFromEventList+0xc0>)
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80122da:	429a      	cmp	r2, r3
 80122dc:	d905      	bls.n	80122ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80122de:	2301      	movs	r3, #1
 80122e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80122e2:	4b0a      	ldr	r3, [pc, #40]	@ (801230c <xTaskRemoveFromEventList+0xc4>)
 80122e4:	2201      	movs	r2, #1
 80122e6:	601a      	str	r2, [r3, #0]
 80122e8:	e001      	b.n	80122ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80122ea:	2300      	movs	r3, #0
 80122ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80122ee:	697b      	ldr	r3, [r7, #20]
}
 80122f0:	4618      	mov	r0, r3
 80122f2:	3718      	adds	r7, #24
 80122f4:	46bd      	mov	sp, r7
 80122f6:	bd80      	pop	{r7, pc}
 80122f8:	24001908 	.word	0x24001908
 80122fc:	240018e8 	.word	0x240018e8
 8012300:	24001410 	.word	0x24001410
 8012304:	240018a0 	.word	0x240018a0
 8012308:	2400140c 	.word	0x2400140c
 801230c:	240018f4 	.word	0x240018f4

08012310 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012310:	b480      	push	{r7}
 8012312:	b083      	sub	sp, #12
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012318:	4b06      	ldr	r3, [pc, #24]	@ (8012334 <vTaskInternalSetTimeOutState+0x24>)
 801231a:	681a      	ldr	r2, [r3, #0]
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012320:	4b05      	ldr	r3, [pc, #20]	@ (8012338 <vTaskInternalSetTimeOutState+0x28>)
 8012322:	681a      	ldr	r2, [r3, #0]
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	605a      	str	r2, [r3, #4]
}
 8012328:	bf00      	nop
 801232a:	370c      	adds	r7, #12
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr
 8012334:	240018f8 	.word	0x240018f8
 8012338:	240018e4 	.word	0x240018e4

0801233c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b088      	sub	sp, #32
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d10b      	bne.n	8012364 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801234c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012350:	f383 8811 	msr	BASEPRI, r3
 8012354:	f3bf 8f6f 	isb	sy
 8012358:	f3bf 8f4f 	dsb	sy
 801235c:	613b      	str	r3, [r7, #16]
}
 801235e:	bf00      	nop
 8012360:	bf00      	nop
 8012362:	e7fd      	b.n	8012360 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012364:	683b      	ldr	r3, [r7, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d10b      	bne.n	8012382 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801236a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801236e:	f383 8811 	msr	BASEPRI, r3
 8012372:	f3bf 8f6f 	isb	sy
 8012376:	f3bf 8f4f 	dsb	sy
 801237a:	60fb      	str	r3, [r7, #12]
}
 801237c:	bf00      	nop
 801237e:	bf00      	nop
 8012380:	e7fd      	b.n	801237e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8012382:	f001 faf1 	bl	8013968 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012386:	4b1d      	ldr	r3, [pc, #116]	@ (80123fc <xTaskCheckForTimeOut+0xc0>)
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	685b      	ldr	r3, [r3, #4]
 8012390:	69ba      	ldr	r2, [r7, #24]
 8012392:	1ad3      	subs	r3, r2, r3
 8012394:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801239e:	d102      	bne.n	80123a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80123a0:	2300      	movs	r3, #0
 80123a2:	61fb      	str	r3, [r7, #28]
 80123a4:	e023      	b.n	80123ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681a      	ldr	r2, [r3, #0]
 80123aa:	4b15      	ldr	r3, [pc, #84]	@ (8012400 <xTaskCheckForTimeOut+0xc4>)
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	429a      	cmp	r2, r3
 80123b0:	d007      	beq.n	80123c2 <xTaskCheckForTimeOut+0x86>
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	685b      	ldr	r3, [r3, #4]
 80123b6:	69ba      	ldr	r2, [r7, #24]
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d302      	bcc.n	80123c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80123bc:	2301      	movs	r3, #1
 80123be:	61fb      	str	r3, [r7, #28]
 80123c0:	e015      	b.n	80123ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	697a      	ldr	r2, [r7, #20]
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d20b      	bcs.n	80123e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80123cc:	683b      	ldr	r3, [r7, #0]
 80123ce:	681a      	ldr	r2, [r3, #0]
 80123d0:	697b      	ldr	r3, [r7, #20]
 80123d2:	1ad2      	subs	r2, r2, r3
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f7ff ff99 	bl	8012310 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80123de:	2300      	movs	r3, #0
 80123e0:	61fb      	str	r3, [r7, #28]
 80123e2:	e004      	b.n	80123ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	2200      	movs	r2, #0
 80123e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80123ea:	2301      	movs	r3, #1
 80123ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80123ee:	f001 faed 	bl	80139cc <vPortExitCritical>

	return xReturn;
 80123f2:	69fb      	ldr	r3, [r7, #28]
}
 80123f4:	4618      	mov	r0, r3
 80123f6:	3720      	adds	r7, #32
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bd80      	pop	{r7, pc}
 80123fc:	240018e4 	.word	0x240018e4
 8012400:	240018f8 	.word	0x240018f8

08012404 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012404:	b480      	push	{r7}
 8012406:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012408:	4b03      	ldr	r3, [pc, #12]	@ (8012418 <vTaskMissedYield+0x14>)
 801240a:	2201      	movs	r2, #1
 801240c:	601a      	str	r2, [r3, #0]
}
 801240e:	bf00      	nop
 8012410:	46bd      	mov	sp, r7
 8012412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012416:	4770      	bx	lr
 8012418:	240018f4 	.word	0x240018f4

0801241c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b082      	sub	sp, #8
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012424:	f000 f852 	bl	80124cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012428:	4b06      	ldr	r3, [pc, #24]	@ (8012444 <prvIdleTask+0x28>)
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	2b01      	cmp	r3, #1
 801242e:	d9f9      	bls.n	8012424 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012430:	4b05      	ldr	r3, [pc, #20]	@ (8012448 <prvIdleTask+0x2c>)
 8012432:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012436:	601a      	str	r2, [r3, #0]
 8012438:	f3bf 8f4f 	dsb	sy
 801243c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012440:	e7f0      	b.n	8012424 <prvIdleTask+0x8>
 8012442:	bf00      	nop
 8012444:	24001410 	.word	0x24001410
 8012448:	e000ed04 	.word	0xe000ed04

0801244c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012452:	2300      	movs	r3, #0
 8012454:	607b      	str	r3, [r7, #4]
 8012456:	e00c      	b.n	8012472 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012458:	687a      	ldr	r2, [r7, #4]
 801245a:	4613      	mov	r3, r2
 801245c:	009b      	lsls	r3, r3, #2
 801245e:	4413      	add	r3, r2
 8012460:	009b      	lsls	r3, r3, #2
 8012462:	4a12      	ldr	r2, [pc, #72]	@ (80124ac <prvInitialiseTaskLists+0x60>)
 8012464:	4413      	add	r3, r2
 8012466:	4618      	mov	r0, r3
 8012468:	f7fe f876 	bl	8010558 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	3301      	adds	r3, #1
 8012470:	607b      	str	r3, [r7, #4]
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2b37      	cmp	r3, #55	@ 0x37
 8012476:	d9ef      	bls.n	8012458 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012478:	480d      	ldr	r0, [pc, #52]	@ (80124b0 <prvInitialiseTaskLists+0x64>)
 801247a:	f7fe f86d 	bl	8010558 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801247e:	480d      	ldr	r0, [pc, #52]	@ (80124b4 <prvInitialiseTaskLists+0x68>)
 8012480:	f7fe f86a 	bl	8010558 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012484:	480c      	ldr	r0, [pc, #48]	@ (80124b8 <prvInitialiseTaskLists+0x6c>)
 8012486:	f7fe f867 	bl	8010558 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801248a:	480c      	ldr	r0, [pc, #48]	@ (80124bc <prvInitialiseTaskLists+0x70>)
 801248c:	f7fe f864 	bl	8010558 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012490:	480b      	ldr	r0, [pc, #44]	@ (80124c0 <prvInitialiseTaskLists+0x74>)
 8012492:	f7fe f861 	bl	8010558 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012496:	4b0b      	ldr	r3, [pc, #44]	@ (80124c4 <prvInitialiseTaskLists+0x78>)
 8012498:	4a05      	ldr	r2, [pc, #20]	@ (80124b0 <prvInitialiseTaskLists+0x64>)
 801249a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801249c:	4b0a      	ldr	r3, [pc, #40]	@ (80124c8 <prvInitialiseTaskLists+0x7c>)
 801249e:	4a05      	ldr	r2, [pc, #20]	@ (80124b4 <prvInitialiseTaskLists+0x68>)
 80124a0:	601a      	str	r2, [r3, #0]
}
 80124a2:	bf00      	nop
 80124a4:	3708      	adds	r7, #8
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}
 80124aa:	bf00      	nop
 80124ac:	24001410 	.word	0x24001410
 80124b0:	24001870 	.word	0x24001870
 80124b4:	24001884 	.word	0x24001884
 80124b8:	240018a0 	.word	0x240018a0
 80124bc:	240018b4 	.word	0x240018b4
 80124c0:	240018cc 	.word	0x240018cc
 80124c4:	24001898 	.word	0x24001898
 80124c8:	2400189c 	.word	0x2400189c

080124cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b082      	sub	sp, #8
 80124d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80124d2:	e019      	b.n	8012508 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80124d4:	f001 fa48 	bl	8013968 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80124d8:	4b10      	ldr	r3, [pc, #64]	@ (801251c <prvCheckTasksWaitingTermination+0x50>)
 80124da:	68db      	ldr	r3, [r3, #12]
 80124dc:	68db      	ldr	r3, [r3, #12]
 80124de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	3304      	adds	r3, #4
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7fe f8c1 	bl	801066c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80124ea:	4b0d      	ldr	r3, [pc, #52]	@ (8012520 <prvCheckTasksWaitingTermination+0x54>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	3b01      	subs	r3, #1
 80124f0:	4a0b      	ldr	r2, [pc, #44]	@ (8012520 <prvCheckTasksWaitingTermination+0x54>)
 80124f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80124f4:	4b0b      	ldr	r3, [pc, #44]	@ (8012524 <prvCheckTasksWaitingTermination+0x58>)
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	3b01      	subs	r3, #1
 80124fa:	4a0a      	ldr	r2, [pc, #40]	@ (8012524 <prvCheckTasksWaitingTermination+0x58>)
 80124fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80124fe:	f001 fa65 	bl	80139cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	f000 f810 	bl	8012528 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012508:	4b06      	ldr	r3, [pc, #24]	@ (8012524 <prvCheckTasksWaitingTermination+0x58>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d1e1      	bne.n	80124d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012510:	bf00      	nop
 8012512:	bf00      	nop
 8012514:	3708      	adds	r7, #8
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
 801251a:	bf00      	nop
 801251c:	240018b4 	.word	0x240018b4
 8012520:	240018e0 	.word	0x240018e0
 8012524:	240018c8 	.word	0x240018c8

08012528 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012528:	b580      	push	{r7, lr}
 801252a:	b084      	sub	sp, #16
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	3354      	adds	r3, #84	@ 0x54
 8012534:	4618      	mov	r0, r3
 8012536:	f00e ff0d 	bl	8021354 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8012540:	2b00      	cmp	r3, #0
 8012542:	d108      	bne.n	8012556 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012548:	4618      	mov	r0, r3
 801254a:	f001 fbfd 	bl	8013d48 <vPortFree>
				vPortFree( pxTCB );
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f001 fbfa 	bl	8013d48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012554:	e019      	b.n	801258a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801255c:	2b01      	cmp	r3, #1
 801255e:	d103      	bne.n	8012568 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f001 fbf1 	bl	8013d48 <vPortFree>
	}
 8012566:	e010      	b.n	801258a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801256e:	2b02      	cmp	r3, #2
 8012570:	d00b      	beq.n	801258a <prvDeleteTCB+0x62>
	__asm volatile
 8012572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012576:	f383 8811 	msr	BASEPRI, r3
 801257a:	f3bf 8f6f 	isb	sy
 801257e:	f3bf 8f4f 	dsb	sy
 8012582:	60fb      	str	r3, [r7, #12]
}
 8012584:	bf00      	nop
 8012586:	bf00      	nop
 8012588:	e7fd      	b.n	8012586 <prvDeleteTCB+0x5e>
	}
 801258a:	bf00      	nop
 801258c:	3710      	adds	r7, #16
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}
	...

08012594 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012594:	b480      	push	{r7}
 8012596:	b083      	sub	sp, #12
 8012598:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801259a:	4b0c      	ldr	r3, [pc, #48]	@ (80125cc <prvResetNextTaskUnblockTime+0x38>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d104      	bne.n	80125ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80125a4:	4b0a      	ldr	r3, [pc, #40]	@ (80125d0 <prvResetNextTaskUnblockTime+0x3c>)
 80125a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80125aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80125ac:	e008      	b.n	80125c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125ae:	4b07      	ldr	r3, [pc, #28]	@ (80125cc <prvResetNextTaskUnblockTime+0x38>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	68db      	ldr	r3, [r3, #12]
 80125b4:	68db      	ldr	r3, [r3, #12]
 80125b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	4a04      	ldr	r2, [pc, #16]	@ (80125d0 <prvResetNextTaskUnblockTime+0x3c>)
 80125be:	6013      	str	r3, [r2, #0]
}
 80125c0:	bf00      	nop
 80125c2:	370c      	adds	r7, #12
 80125c4:	46bd      	mov	sp, r7
 80125c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ca:	4770      	bx	lr
 80125cc:	24001898 	.word	0x24001898
 80125d0:	24001900 	.word	0x24001900

080125d4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80125d4:	b480      	push	{r7}
 80125d6:	b083      	sub	sp, #12
 80125d8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80125da:	4b05      	ldr	r3, [pc, #20]	@ (80125f0 <xTaskGetCurrentTaskHandle+0x1c>)
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	607b      	str	r3, [r7, #4]

		return xReturn;
 80125e0:	687b      	ldr	r3, [r7, #4]
	}
 80125e2:	4618      	mov	r0, r3
 80125e4:	370c      	adds	r7, #12
 80125e6:	46bd      	mov	sp, r7
 80125e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop
 80125f0:	2400140c 	.word	0x2400140c

080125f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80125f4:	b480      	push	{r7}
 80125f6:	b083      	sub	sp, #12
 80125f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80125fa:	4b0b      	ldr	r3, [pc, #44]	@ (8012628 <xTaskGetSchedulerState+0x34>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d102      	bne.n	8012608 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012602:	2301      	movs	r3, #1
 8012604:	607b      	str	r3, [r7, #4]
 8012606:	e008      	b.n	801261a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012608:	4b08      	ldr	r3, [pc, #32]	@ (801262c <xTaskGetSchedulerState+0x38>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d102      	bne.n	8012616 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012610:	2302      	movs	r3, #2
 8012612:	607b      	str	r3, [r7, #4]
 8012614:	e001      	b.n	801261a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012616:	2300      	movs	r3, #0
 8012618:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801261a:	687b      	ldr	r3, [r7, #4]
	}
 801261c:	4618      	mov	r0, r3
 801261e:	370c      	adds	r7, #12
 8012620:	46bd      	mov	sp, r7
 8012622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012626:	4770      	bx	lr
 8012628:	240018ec 	.word	0x240018ec
 801262c:	24001908 	.word	0x24001908

08012630 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012630:	b580      	push	{r7, lr}
 8012632:	b084      	sub	sp, #16
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801263c:	2300      	movs	r3, #0
 801263e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d051      	beq.n	80126ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801264a:	4b2a      	ldr	r3, [pc, #168]	@ (80126f4 <xTaskPriorityInherit+0xc4>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012650:	429a      	cmp	r2, r3
 8012652:	d241      	bcs.n	80126d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	699b      	ldr	r3, [r3, #24]
 8012658:	2b00      	cmp	r3, #0
 801265a:	db06      	blt.n	801266a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801265c:	4b25      	ldr	r3, [pc, #148]	@ (80126f4 <xTaskPriorityInherit+0xc4>)
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012662:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801266a:	68bb      	ldr	r3, [r7, #8]
 801266c:	6959      	ldr	r1, [r3, #20]
 801266e:	68bb      	ldr	r3, [r7, #8]
 8012670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012672:	4613      	mov	r3, r2
 8012674:	009b      	lsls	r3, r3, #2
 8012676:	4413      	add	r3, r2
 8012678:	009b      	lsls	r3, r3, #2
 801267a:	4a1f      	ldr	r2, [pc, #124]	@ (80126f8 <xTaskPriorityInherit+0xc8>)
 801267c:	4413      	add	r3, r2
 801267e:	4299      	cmp	r1, r3
 8012680:	d122      	bne.n	80126c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012682:	68bb      	ldr	r3, [r7, #8]
 8012684:	3304      	adds	r3, #4
 8012686:	4618      	mov	r0, r3
 8012688:	f7fd fff0 	bl	801066c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801268c:	4b19      	ldr	r3, [pc, #100]	@ (80126f4 <xTaskPriorityInherit+0xc4>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801269a:	4b18      	ldr	r3, [pc, #96]	@ (80126fc <xTaskPriorityInherit+0xcc>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	429a      	cmp	r2, r3
 80126a0:	d903      	bls.n	80126aa <xTaskPriorityInherit+0x7a>
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126a6:	4a15      	ldr	r2, [pc, #84]	@ (80126fc <xTaskPriorityInherit+0xcc>)
 80126a8:	6013      	str	r3, [r2, #0]
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80126ae:	4613      	mov	r3, r2
 80126b0:	009b      	lsls	r3, r3, #2
 80126b2:	4413      	add	r3, r2
 80126b4:	009b      	lsls	r3, r3, #2
 80126b6:	4a10      	ldr	r2, [pc, #64]	@ (80126f8 <xTaskPriorityInherit+0xc8>)
 80126b8:	441a      	add	r2, r3
 80126ba:	68bb      	ldr	r3, [r7, #8]
 80126bc:	3304      	adds	r3, #4
 80126be:	4619      	mov	r1, r3
 80126c0:	4610      	mov	r0, r2
 80126c2:	f7fd ff76 	bl	80105b2 <vListInsertEnd>
 80126c6:	e004      	b.n	80126d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80126c8:	4b0a      	ldr	r3, [pc, #40]	@ (80126f4 <xTaskPriorityInherit+0xc4>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80126ce:	68bb      	ldr	r3, [r7, #8]
 80126d0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80126d2:	2301      	movs	r3, #1
 80126d4:	60fb      	str	r3, [r7, #12]
 80126d6:	e008      	b.n	80126ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80126d8:	68bb      	ldr	r3, [r7, #8]
 80126da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80126dc:	4b05      	ldr	r3, [pc, #20]	@ (80126f4 <xTaskPriorityInherit+0xc4>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d201      	bcs.n	80126ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80126e6:	2301      	movs	r3, #1
 80126e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80126ea:	68fb      	ldr	r3, [r7, #12]
	}
 80126ec:	4618      	mov	r0, r3
 80126ee:	3710      	adds	r7, #16
 80126f0:	46bd      	mov	sp, r7
 80126f2:	bd80      	pop	{r7, pc}
 80126f4:	2400140c 	.word	0x2400140c
 80126f8:	24001410 	.word	0x24001410
 80126fc:	240018e8 	.word	0x240018e8

08012700 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012700:	b580      	push	{r7, lr}
 8012702:	b086      	sub	sp, #24
 8012704:	af00      	add	r7, sp, #0
 8012706:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801270c:	2300      	movs	r3, #0
 801270e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d058      	beq.n	80127c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012716:	4b2f      	ldr	r3, [pc, #188]	@ (80127d4 <xTaskPriorityDisinherit+0xd4>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	693a      	ldr	r2, [r7, #16]
 801271c:	429a      	cmp	r2, r3
 801271e:	d00b      	beq.n	8012738 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8012720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012724:	f383 8811 	msr	BASEPRI, r3
 8012728:	f3bf 8f6f 	isb	sy
 801272c:	f3bf 8f4f 	dsb	sy
 8012730:	60fb      	str	r3, [r7, #12]
}
 8012732:	bf00      	nop
 8012734:	bf00      	nop
 8012736:	e7fd      	b.n	8012734 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801273c:	2b00      	cmp	r3, #0
 801273e:	d10b      	bne.n	8012758 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8012740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012744:	f383 8811 	msr	BASEPRI, r3
 8012748:	f3bf 8f6f 	isb	sy
 801274c:	f3bf 8f4f 	dsb	sy
 8012750:	60bb      	str	r3, [r7, #8]
}
 8012752:	bf00      	nop
 8012754:	bf00      	nop
 8012756:	e7fd      	b.n	8012754 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8012758:	693b      	ldr	r3, [r7, #16]
 801275a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801275c:	1e5a      	subs	r2, r3, #1
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012762:	693b      	ldr	r3, [r7, #16]
 8012764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801276a:	429a      	cmp	r2, r3
 801276c:	d02c      	beq.n	80127c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801276e:	693b      	ldr	r3, [r7, #16]
 8012770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012772:	2b00      	cmp	r3, #0
 8012774:	d128      	bne.n	80127c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012776:	693b      	ldr	r3, [r7, #16]
 8012778:	3304      	adds	r3, #4
 801277a:	4618      	mov	r0, r3
 801277c:	f7fd ff76 	bl	801066c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801278c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012794:	693b      	ldr	r3, [r7, #16]
 8012796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012798:	4b0f      	ldr	r3, [pc, #60]	@ (80127d8 <xTaskPriorityDisinherit+0xd8>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	429a      	cmp	r2, r3
 801279e:	d903      	bls.n	80127a8 <xTaskPriorityDisinherit+0xa8>
 80127a0:	693b      	ldr	r3, [r7, #16]
 80127a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80127a4:	4a0c      	ldr	r2, [pc, #48]	@ (80127d8 <xTaskPriorityDisinherit+0xd8>)
 80127a6:	6013      	str	r3, [r2, #0]
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127ac:	4613      	mov	r3, r2
 80127ae:	009b      	lsls	r3, r3, #2
 80127b0:	4413      	add	r3, r2
 80127b2:	009b      	lsls	r3, r3, #2
 80127b4:	4a09      	ldr	r2, [pc, #36]	@ (80127dc <xTaskPriorityDisinherit+0xdc>)
 80127b6:	441a      	add	r2, r3
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	3304      	adds	r3, #4
 80127bc:	4619      	mov	r1, r3
 80127be:	4610      	mov	r0, r2
 80127c0:	f7fd fef7 	bl	80105b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80127c4:	2301      	movs	r3, #1
 80127c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80127c8:	697b      	ldr	r3, [r7, #20]
	}
 80127ca:	4618      	mov	r0, r3
 80127cc:	3718      	adds	r7, #24
 80127ce:	46bd      	mov	sp, r7
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	bf00      	nop
 80127d4:	2400140c 	.word	0x2400140c
 80127d8:	240018e8 	.word	0x240018e8
 80127dc:	24001410 	.word	0x24001410

080127e0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b088      	sub	sp, #32
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
 80127e8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80127ee:	2301      	movs	r3, #1
 80127f0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d06c      	beq.n	80128d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80127f8:	69bb      	ldr	r3, [r7, #24]
 80127fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d10b      	bne.n	8012818 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8012800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012804:	f383 8811 	msr	BASEPRI, r3
 8012808:	f3bf 8f6f 	isb	sy
 801280c:	f3bf 8f4f 	dsb	sy
 8012810:	60fb      	str	r3, [r7, #12]
}
 8012812:	bf00      	nop
 8012814:	bf00      	nop
 8012816:	e7fd      	b.n	8012814 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012818:	69bb      	ldr	r3, [r7, #24]
 801281a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801281c:	683a      	ldr	r2, [r7, #0]
 801281e:	429a      	cmp	r2, r3
 8012820:	d902      	bls.n	8012828 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	61fb      	str	r3, [r7, #28]
 8012826:	e002      	b.n	801282e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012828:	69bb      	ldr	r3, [r7, #24]
 801282a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801282c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801282e:	69bb      	ldr	r3, [r7, #24]
 8012830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012832:	69fa      	ldr	r2, [r7, #28]
 8012834:	429a      	cmp	r2, r3
 8012836:	d04c      	beq.n	80128d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012838:	69bb      	ldr	r3, [r7, #24]
 801283a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801283c:	697a      	ldr	r2, [r7, #20]
 801283e:	429a      	cmp	r2, r3
 8012840:	d147      	bne.n	80128d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012842:	4b26      	ldr	r3, [pc, #152]	@ (80128dc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	69ba      	ldr	r2, [r7, #24]
 8012848:	429a      	cmp	r2, r3
 801284a:	d10b      	bne.n	8012864 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 801284c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012850:	f383 8811 	msr	BASEPRI, r3
 8012854:	f3bf 8f6f 	isb	sy
 8012858:	f3bf 8f4f 	dsb	sy
 801285c:	60bb      	str	r3, [r7, #8]
}
 801285e:	bf00      	nop
 8012860:	bf00      	nop
 8012862:	e7fd      	b.n	8012860 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012864:	69bb      	ldr	r3, [r7, #24]
 8012866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012868:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801286a:	69bb      	ldr	r3, [r7, #24]
 801286c:	69fa      	ldr	r2, [r7, #28]
 801286e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012870:	69bb      	ldr	r3, [r7, #24]
 8012872:	699b      	ldr	r3, [r3, #24]
 8012874:	2b00      	cmp	r3, #0
 8012876:	db04      	blt.n	8012882 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012878:	69fb      	ldr	r3, [r7, #28]
 801287a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801287e:	69bb      	ldr	r3, [r7, #24]
 8012880:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012882:	69bb      	ldr	r3, [r7, #24]
 8012884:	6959      	ldr	r1, [r3, #20]
 8012886:	693a      	ldr	r2, [r7, #16]
 8012888:	4613      	mov	r3, r2
 801288a:	009b      	lsls	r3, r3, #2
 801288c:	4413      	add	r3, r2
 801288e:	009b      	lsls	r3, r3, #2
 8012890:	4a13      	ldr	r2, [pc, #76]	@ (80128e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8012892:	4413      	add	r3, r2
 8012894:	4299      	cmp	r1, r3
 8012896:	d11c      	bne.n	80128d2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012898:	69bb      	ldr	r3, [r7, #24]
 801289a:	3304      	adds	r3, #4
 801289c:	4618      	mov	r0, r3
 801289e:	f7fd fee5 	bl	801066c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80128a2:	69bb      	ldr	r3, [r7, #24]
 80128a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128a6:	4b0f      	ldr	r3, [pc, #60]	@ (80128e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	429a      	cmp	r2, r3
 80128ac:	d903      	bls.n	80128b6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80128ae:	69bb      	ldr	r3, [r7, #24]
 80128b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128b2:	4a0c      	ldr	r2, [pc, #48]	@ (80128e4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80128b4:	6013      	str	r3, [r2, #0]
 80128b6:	69bb      	ldr	r3, [r7, #24]
 80128b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128ba:	4613      	mov	r3, r2
 80128bc:	009b      	lsls	r3, r3, #2
 80128be:	4413      	add	r3, r2
 80128c0:	009b      	lsls	r3, r3, #2
 80128c2:	4a07      	ldr	r2, [pc, #28]	@ (80128e0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80128c4:	441a      	add	r2, r3
 80128c6:	69bb      	ldr	r3, [r7, #24]
 80128c8:	3304      	adds	r3, #4
 80128ca:	4619      	mov	r1, r3
 80128cc:	4610      	mov	r0, r2
 80128ce:	f7fd fe70 	bl	80105b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80128d2:	bf00      	nop
 80128d4:	3720      	adds	r7, #32
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}
 80128da:	bf00      	nop
 80128dc:	2400140c 	.word	0x2400140c
 80128e0:	24001410 	.word	0x24001410
 80128e4:	240018e8 	.word	0x240018e8

080128e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80128e8:	b480      	push	{r7}
 80128ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80128ec:	4b07      	ldr	r3, [pc, #28]	@ (801290c <pvTaskIncrementMutexHeldCount+0x24>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d004      	beq.n	80128fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80128f4:	4b05      	ldr	r3, [pc, #20]	@ (801290c <pvTaskIncrementMutexHeldCount+0x24>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80128fa:	3201      	adds	r2, #1
 80128fc:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80128fe:	4b03      	ldr	r3, [pc, #12]	@ (801290c <pvTaskIncrementMutexHeldCount+0x24>)
 8012900:	681b      	ldr	r3, [r3, #0]
	}
 8012902:	4618      	mov	r0, r3
 8012904:	46bd      	mov	sp, r7
 8012906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801290a:	4770      	bx	lr
 801290c:	2400140c 	.word	0x2400140c

08012910 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801291a:	f001 f825 	bl	8013968 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 801291e:	4b20      	ldr	r3, [pc, #128]	@ (80129a0 <ulTaskNotifyTake+0x90>)
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012926:	2b00      	cmp	r3, #0
 8012928:	d113      	bne.n	8012952 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801292a:	4b1d      	ldr	r3, [pc, #116]	@ (80129a0 <ulTaskNotifyTake+0x90>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	2201      	movs	r2, #1
 8012930:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d00b      	beq.n	8012952 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801293a:	2101      	movs	r1, #1
 801293c:	6838      	ldr	r0, [r7, #0]
 801293e:	f000 fa71 	bl	8012e24 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8012942:	4b18      	ldr	r3, [pc, #96]	@ (80129a4 <ulTaskNotifyTake+0x94>)
 8012944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012948:	601a      	str	r2, [r3, #0]
 801294a:	f3bf 8f4f 	dsb	sy
 801294e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012952:	f001 f83b 	bl	80139cc <vPortExitCritical>

		taskENTER_CRITICAL();
 8012956:	f001 f807 	bl	8013968 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801295a:	4b11      	ldr	r3, [pc, #68]	@ (80129a0 <ulTaskNotifyTake+0x90>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012962:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d00e      	beq.n	8012988 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d005      	beq.n	801297c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8012970:	4b0b      	ldr	r3, [pc, #44]	@ (80129a0 <ulTaskNotifyTake+0x90>)
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	2200      	movs	r2, #0
 8012976:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 801297a:	e005      	b.n	8012988 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801297c:	4b08      	ldr	r3, [pc, #32]	@ (80129a0 <ulTaskNotifyTake+0x90>)
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	68fa      	ldr	r2, [r7, #12]
 8012982:	3a01      	subs	r2, #1
 8012984:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012988:	4b05      	ldr	r3, [pc, #20]	@ (80129a0 <ulTaskNotifyTake+0x90>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	2200      	movs	r2, #0
 801298e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8012992:	f001 f81b 	bl	80139cc <vPortExitCritical>

		return ulReturn;
 8012996:	68fb      	ldr	r3, [r7, #12]
	}
 8012998:	4618      	mov	r0, r3
 801299a:	3710      	adds	r7, #16
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}
 80129a0:	2400140c 	.word	0x2400140c
 80129a4:	e000ed04 	.word	0xe000ed04

080129a8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b08a      	sub	sp, #40	@ 0x28
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	60f8      	str	r0, [r7, #12]
 80129b0:	60b9      	str	r1, [r7, #8]
 80129b2:	603b      	str	r3, [r7, #0]
 80129b4:	4613      	mov	r3, r2
 80129b6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80129b8:	2301      	movs	r3, #1
 80129ba:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d10b      	bne.n	80129da <xTaskGenericNotify+0x32>
	__asm volatile
 80129c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129c6:	f383 8811 	msr	BASEPRI, r3
 80129ca:	f3bf 8f6f 	isb	sy
 80129ce:	f3bf 8f4f 	dsb	sy
 80129d2:	61bb      	str	r3, [r7, #24]
}
 80129d4:	bf00      	nop
 80129d6:	bf00      	nop
 80129d8:	e7fd      	b.n	80129d6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80129de:	f000 ffc3 	bl	8013968 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80129e2:	683b      	ldr	r3, [r7, #0]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d004      	beq.n	80129f2 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80129e8:	6a3b      	ldr	r3, [r7, #32]
 80129ea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80129ee:	683b      	ldr	r3, [r7, #0]
 80129f0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80129f2:	6a3b      	ldr	r3, [r7, #32]
 80129f4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80129f8:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80129fa:	6a3b      	ldr	r3, [r7, #32]
 80129fc:	2202      	movs	r2, #2
 80129fe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8012a02:	79fb      	ldrb	r3, [r7, #7]
 8012a04:	2b04      	cmp	r3, #4
 8012a06:	d82e      	bhi.n	8012a66 <xTaskGenericNotify+0xbe>
 8012a08:	a201      	add	r2, pc, #4	@ (adr r2, 8012a10 <xTaskGenericNotify+0x68>)
 8012a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a0e:	bf00      	nop
 8012a10:	08012a8b 	.word	0x08012a8b
 8012a14:	08012a25 	.word	0x08012a25
 8012a18:	08012a37 	.word	0x08012a37
 8012a1c:	08012a47 	.word	0x08012a47
 8012a20:	08012a51 	.word	0x08012a51
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012a24:	6a3b      	ldr	r3, [r7, #32]
 8012a26:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8012a2a:	68bb      	ldr	r3, [r7, #8]
 8012a2c:	431a      	orrs	r2, r3
 8012a2e:	6a3b      	ldr	r3, [r7, #32]
 8012a30:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8012a34:	e02c      	b.n	8012a90 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012a36:	6a3b      	ldr	r3, [r7, #32]
 8012a38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012a3c:	1c5a      	adds	r2, r3, #1
 8012a3e:	6a3b      	ldr	r3, [r7, #32]
 8012a40:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8012a44:	e024      	b.n	8012a90 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012a46:	6a3b      	ldr	r3, [r7, #32]
 8012a48:	68ba      	ldr	r2, [r7, #8]
 8012a4a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8012a4e:	e01f      	b.n	8012a90 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012a50:	7ffb      	ldrb	r3, [r7, #31]
 8012a52:	2b02      	cmp	r3, #2
 8012a54:	d004      	beq.n	8012a60 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012a56:	6a3b      	ldr	r3, [r7, #32]
 8012a58:	68ba      	ldr	r2, [r7, #8]
 8012a5a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012a5e:	e017      	b.n	8012a90 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8012a60:	2300      	movs	r3, #0
 8012a62:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8012a64:	e014      	b.n	8012a90 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012a66:	6a3b      	ldr	r3, [r7, #32]
 8012a68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012a70:	d00d      	beq.n	8012a8e <xTaskGenericNotify+0xe6>
	__asm volatile
 8012a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a76:	f383 8811 	msr	BASEPRI, r3
 8012a7a:	f3bf 8f6f 	isb	sy
 8012a7e:	f3bf 8f4f 	dsb	sy
 8012a82:	617b      	str	r3, [r7, #20]
}
 8012a84:	bf00      	nop
 8012a86:	bf00      	nop
 8012a88:	e7fd      	b.n	8012a86 <xTaskGenericNotify+0xde>
					break;
 8012a8a:	bf00      	nop
 8012a8c:	e000      	b.n	8012a90 <xTaskGenericNotify+0xe8>

					break;
 8012a8e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012a90:	7ffb      	ldrb	r3, [r7, #31]
 8012a92:	2b01      	cmp	r3, #1
 8012a94:	d13b      	bne.n	8012b0e <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a96:	6a3b      	ldr	r3, [r7, #32]
 8012a98:	3304      	adds	r3, #4
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7fd fde6 	bl	801066c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8012aa0:	6a3b      	ldr	r3, [r7, #32]
 8012aa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8012b1c <xTaskGenericNotify+0x174>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d903      	bls.n	8012ab4 <xTaskGenericNotify+0x10c>
 8012aac:	6a3b      	ldr	r3, [r7, #32]
 8012aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012ab0:	4a1a      	ldr	r2, [pc, #104]	@ (8012b1c <xTaskGenericNotify+0x174>)
 8012ab2:	6013      	str	r3, [r2, #0]
 8012ab4:	6a3b      	ldr	r3, [r7, #32]
 8012ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ab8:	4613      	mov	r3, r2
 8012aba:	009b      	lsls	r3, r3, #2
 8012abc:	4413      	add	r3, r2
 8012abe:	009b      	lsls	r3, r3, #2
 8012ac0:	4a17      	ldr	r2, [pc, #92]	@ (8012b20 <xTaskGenericNotify+0x178>)
 8012ac2:	441a      	add	r2, r3
 8012ac4:	6a3b      	ldr	r3, [r7, #32]
 8012ac6:	3304      	adds	r3, #4
 8012ac8:	4619      	mov	r1, r3
 8012aca:	4610      	mov	r0, r2
 8012acc:	f7fd fd71 	bl	80105b2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012ad0:	6a3b      	ldr	r3, [r7, #32]
 8012ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d00b      	beq.n	8012af0 <xTaskGenericNotify+0x148>
	__asm volatile
 8012ad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012adc:	f383 8811 	msr	BASEPRI, r3
 8012ae0:	f3bf 8f6f 	isb	sy
 8012ae4:	f3bf 8f4f 	dsb	sy
 8012ae8:	613b      	str	r3, [r7, #16]
}
 8012aea:	bf00      	nop
 8012aec:	bf00      	nop
 8012aee:	e7fd      	b.n	8012aec <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012af0:	6a3b      	ldr	r3, [r7, #32]
 8012af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012af4:	4b0b      	ldr	r3, [pc, #44]	@ (8012b24 <xTaskGenericNotify+0x17c>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d907      	bls.n	8012b0e <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012afe:	4b0a      	ldr	r3, [pc, #40]	@ (8012b28 <xTaskGenericNotify+0x180>)
 8012b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b04:	601a      	str	r2, [r3, #0]
 8012b06:	f3bf 8f4f 	dsb	sy
 8012b0a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012b0e:	f000 ff5d 	bl	80139cc <vPortExitCritical>

		return xReturn;
 8012b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3728      	adds	r7, #40	@ 0x28
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}
 8012b1c:	240018e8 	.word	0x240018e8
 8012b20:	24001410 	.word	0x24001410
 8012b24:	2400140c 	.word	0x2400140c
 8012b28:	e000ed04 	.word	0xe000ed04

08012b2c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b08e      	sub	sp, #56	@ 0x38
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	60f8      	str	r0, [r7, #12]
 8012b34:	60b9      	str	r1, [r7, #8]
 8012b36:	603b      	str	r3, [r7, #0]
 8012b38:	4613      	mov	r3, r2
 8012b3a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d10b      	bne.n	8012b5e <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8012b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b4a:	f383 8811 	msr	BASEPRI, r3
 8012b4e:	f3bf 8f6f 	isb	sy
 8012b52:	f3bf 8f4f 	dsb	sy
 8012b56:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012b58:	bf00      	nop
 8012b5a:	bf00      	nop
 8012b5c:	e7fd      	b.n	8012b5a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b5e:	f000 ffe3 	bl	8013b28 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8012b66:	f3ef 8211 	mrs	r2, BASEPRI
 8012b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b6e:	f383 8811 	msr	BASEPRI, r3
 8012b72:	f3bf 8f6f 	isb	sy
 8012b76:	f3bf 8f4f 	dsb	sy
 8012b7a:	623a      	str	r2, [r7, #32]
 8012b7c:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8012b7e:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8012b82:	683b      	ldr	r3, [r7, #0]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d004      	beq.n	8012b92 <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b8a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b94:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8012b98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b9e:	2202      	movs	r2, #2
 8012ba0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8012ba4:	79fb      	ldrb	r3, [r7, #7]
 8012ba6:	2b04      	cmp	r3, #4
 8012ba8:	d82e      	bhi.n	8012c08 <xTaskGenericNotifyFromISR+0xdc>
 8012baa:	a201      	add	r2, pc, #4	@ (adr r2, 8012bb0 <xTaskGenericNotifyFromISR+0x84>)
 8012bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bb0:	08012c2d 	.word	0x08012c2d
 8012bb4:	08012bc5 	.word	0x08012bc5
 8012bb8:	08012bd7 	.word	0x08012bd7
 8012bbc:	08012be7 	.word	0x08012be7
 8012bc0:	08012bf1 	.word	0x08012bf1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bc6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8012bca:	68bb      	ldr	r3, [r7, #8]
 8012bcc:	431a      	orrs	r2, r3
 8012bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bd0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8012bd4:	e02d      	b.n	8012c32 <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012bdc:	1c5a      	adds	r2, r3, #1
 8012bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012be0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8012be4:	e025      	b.n	8012c32 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012be8:	68ba      	ldr	r2, [r7, #8]
 8012bea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8012bee:	e020      	b.n	8012c32 <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012bf0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8012bf4:	2b02      	cmp	r3, #2
 8012bf6:	d004      	beq.n	8012c02 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bfa:	68ba      	ldr	r2, [r7, #8]
 8012bfc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012c00:	e017      	b.n	8012c32 <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8012c02:	2300      	movs	r3, #0
 8012c04:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8012c06:	e014      	b.n	8012c32 <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012c12:	d00d      	beq.n	8012c30 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8012c14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c18:	f383 8811 	msr	BASEPRI, r3
 8012c1c:	f3bf 8f6f 	isb	sy
 8012c20:	f3bf 8f4f 	dsb	sy
 8012c24:	61bb      	str	r3, [r7, #24]
}
 8012c26:	bf00      	nop
 8012c28:	bf00      	nop
 8012c2a:	e7fd      	b.n	8012c28 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8012c2c:	bf00      	nop
 8012c2e:	e000      	b.n	8012c32 <xTaskGenericNotifyFromISR+0x106>
					break;
 8012c30:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012c32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8012c36:	2b01      	cmp	r3, #1
 8012c38:	d147      	bne.n	8012cca <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d00b      	beq.n	8012c5a <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8012c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c46:	f383 8811 	msr	BASEPRI, r3
 8012c4a:	f3bf 8f6f 	isb	sy
 8012c4e:	f3bf 8f4f 	dsb	sy
 8012c52:	617b      	str	r3, [r7, #20]
}
 8012c54:	bf00      	nop
 8012c56:	bf00      	nop
 8012c58:	e7fd      	b.n	8012c56 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012c5a:	4b21      	ldr	r3, [pc, #132]	@ (8012ce0 <xTaskGenericNotifyFromISR+0x1b4>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d11d      	bne.n	8012c9e <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c64:	3304      	adds	r3, #4
 8012c66:	4618      	mov	r0, r3
 8012c68:	f7fd fd00 	bl	801066c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c70:	4b1c      	ldr	r3, [pc, #112]	@ (8012ce4 <xTaskGenericNotifyFromISR+0x1b8>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d903      	bls.n	8012c80 <xTaskGenericNotifyFromISR+0x154>
 8012c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c7c:	4a19      	ldr	r2, [pc, #100]	@ (8012ce4 <xTaskGenericNotifyFromISR+0x1b8>)
 8012c7e:	6013      	str	r3, [r2, #0]
 8012c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c84:	4613      	mov	r3, r2
 8012c86:	009b      	lsls	r3, r3, #2
 8012c88:	4413      	add	r3, r2
 8012c8a:	009b      	lsls	r3, r3, #2
 8012c8c:	4a16      	ldr	r2, [pc, #88]	@ (8012ce8 <xTaskGenericNotifyFromISR+0x1bc>)
 8012c8e:	441a      	add	r2, r3
 8012c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c92:	3304      	adds	r3, #4
 8012c94:	4619      	mov	r1, r3
 8012c96:	4610      	mov	r0, r2
 8012c98:	f7fd fc8b 	bl	80105b2 <vListInsertEnd>
 8012c9c:	e005      	b.n	8012caa <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ca0:	3318      	adds	r3, #24
 8012ca2:	4619      	mov	r1, r3
 8012ca4:	4811      	ldr	r0, [pc, #68]	@ (8012cec <xTaskGenericNotifyFromISR+0x1c0>)
 8012ca6:	f7fd fc84 	bl	80105b2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012cae:	4b10      	ldr	r3, [pc, #64]	@ (8012cf0 <xTaskGenericNotifyFromISR+0x1c4>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cb4:	429a      	cmp	r2, r3
 8012cb6:	d908      	bls.n	8012cca <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8012cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d002      	beq.n	8012cc4 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8012cbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012cc0:	2201      	movs	r2, #1
 8012cc2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8012cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8012cf4 <xTaskGenericNotifyFromISR+0x1c8>)
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	601a      	str	r2, [r3, #0]
 8012cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ccc:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012cce:	693b      	ldr	r3, [r7, #16]
 8012cd0:	f383 8811 	msr	BASEPRI, r3
}
 8012cd4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8012cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8012cd8:	4618      	mov	r0, r3
 8012cda:	3738      	adds	r7, #56	@ 0x38
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	bd80      	pop	{r7, pc}
 8012ce0:	24001908 	.word	0x24001908
 8012ce4:	240018e8 	.word	0x240018e8
 8012ce8:	24001410 	.word	0x24001410
 8012cec:	240018a0 	.word	0x240018a0
 8012cf0:	2400140c 	.word	0x2400140c
 8012cf4:	240018f4 	.word	0x240018f4

08012cf8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b08a      	sub	sp, #40	@ 0x28
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
 8012d00:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d10b      	bne.n	8012d20 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8012d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d0c:	f383 8811 	msr	BASEPRI, r3
 8012d10:	f3bf 8f6f 	isb	sy
 8012d14:	f3bf 8f4f 	dsb	sy
 8012d18:	61bb      	str	r3, [r7, #24]
}
 8012d1a:	bf00      	nop
 8012d1c:	bf00      	nop
 8012d1e:	e7fd      	b.n	8012d1c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012d20:	f000 ff02 	bl	8013b28 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8012d28:	f3ef 8211 	mrs	r2, BASEPRI
 8012d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d30:	f383 8811 	msr	BASEPRI, r3
 8012d34:	f3bf 8f6f 	isb	sy
 8012d38:	f3bf 8f4f 	dsb	sy
 8012d3c:	617a      	str	r2, [r7, #20]
 8012d3e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012d40:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012d42:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d46:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8012d4a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d4e:	2202      	movs	r2, #2
 8012d50:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8012d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012d5a:	1c5a      	adds	r2, r3, #1
 8012d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d5e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012d62:	7ffb      	ldrb	r3, [r7, #31]
 8012d64:	2b01      	cmp	r3, #1
 8012d66:	d147      	bne.n	8012df8 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d00b      	beq.n	8012d88 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8012d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d74:	f383 8811 	msr	BASEPRI, r3
 8012d78:	f3bf 8f6f 	isb	sy
 8012d7c:	f3bf 8f4f 	dsb	sy
 8012d80:	60fb      	str	r3, [r7, #12]
}
 8012d82:	bf00      	nop
 8012d84:	bf00      	nop
 8012d86:	e7fd      	b.n	8012d84 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d88:	4b20      	ldr	r3, [pc, #128]	@ (8012e0c <vTaskNotifyGiveFromISR+0x114>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d11d      	bne.n	8012dcc <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d92:	3304      	adds	r3, #4
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7fd fc69 	bl	801066c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8012e10 <vTaskNotifyGiveFromISR+0x118>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	429a      	cmp	r2, r3
 8012da4:	d903      	bls.n	8012dae <vTaskNotifyGiveFromISR+0xb6>
 8012da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012daa:	4a19      	ldr	r2, [pc, #100]	@ (8012e10 <vTaskNotifyGiveFromISR+0x118>)
 8012dac:	6013      	str	r3, [r2, #0]
 8012dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012db2:	4613      	mov	r3, r2
 8012db4:	009b      	lsls	r3, r3, #2
 8012db6:	4413      	add	r3, r2
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	4a16      	ldr	r2, [pc, #88]	@ (8012e14 <vTaskNotifyGiveFromISR+0x11c>)
 8012dbc:	441a      	add	r2, r3
 8012dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dc0:	3304      	adds	r3, #4
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	4610      	mov	r0, r2
 8012dc6:	f7fd fbf4 	bl	80105b2 <vListInsertEnd>
 8012dca:	e005      	b.n	8012dd8 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8012dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dce:	3318      	adds	r3, #24
 8012dd0:	4619      	mov	r1, r3
 8012dd2:	4811      	ldr	r0, [pc, #68]	@ (8012e18 <vTaskNotifyGiveFromISR+0x120>)
 8012dd4:	f7fd fbed 	bl	80105b2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8012e1c <vTaskNotifyGiveFromISR+0x124>)
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012de2:	429a      	cmp	r2, r3
 8012de4:	d908      	bls.n	8012df8 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d002      	beq.n	8012df2 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8012dec:	683b      	ldr	r3, [r7, #0]
 8012dee:	2201      	movs	r2, #1
 8012df0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8012df2:	4b0b      	ldr	r3, [pc, #44]	@ (8012e20 <vTaskNotifyGiveFromISR+0x128>)
 8012df4:	2201      	movs	r2, #1
 8012df6:	601a      	str	r2, [r3, #0]
 8012df8:	6a3b      	ldr	r3, [r7, #32]
 8012dfa:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	f383 8811 	msr	BASEPRI, r3
}
 8012e02:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8012e04:	bf00      	nop
 8012e06:	3728      	adds	r7, #40	@ 0x28
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}
 8012e0c:	24001908 	.word	0x24001908
 8012e10:	240018e8 	.word	0x240018e8
 8012e14:	24001410 	.word	0x24001410
 8012e18:	240018a0 	.word	0x240018a0
 8012e1c:	2400140c 	.word	0x2400140c
 8012e20:	240018f4 	.word	0x240018f4

08012e24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b084      	sub	sp, #16
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012e2e:	4b21      	ldr	r3, [pc, #132]	@ (8012eb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012e34:	4b20      	ldr	r3, [pc, #128]	@ (8012eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	3304      	adds	r3, #4
 8012e3a:	4618      	mov	r0, r3
 8012e3c:	f7fd fc16 	bl	801066c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012e46:	d10a      	bne.n	8012e5e <prvAddCurrentTaskToDelayedList+0x3a>
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d007      	beq.n	8012e5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8012eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	3304      	adds	r3, #4
 8012e54:	4619      	mov	r1, r3
 8012e56:	4819      	ldr	r0, [pc, #100]	@ (8012ebc <prvAddCurrentTaskToDelayedList+0x98>)
 8012e58:	f7fd fbab 	bl	80105b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012e5c:	e026      	b.n	8012eac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012e5e:	68fa      	ldr	r2, [r7, #12]
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	4413      	add	r3, r2
 8012e64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012e66:	4b14      	ldr	r3, [pc, #80]	@ (8012eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	68ba      	ldr	r2, [r7, #8]
 8012e6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012e6e:	68ba      	ldr	r2, [r7, #8]
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d209      	bcs.n	8012e8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012e76:	4b12      	ldr	r3, [pc, #72]	@ (8012ec0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012e78:	681a      	ldr	r2, [r3, #0]
 8012e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8012eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	3304      	adds	r3, #4
 8012e80:	4619      	mov	r1, r3
 8012e82:	4610      	mov	r0, r2
 8012e84:	f7fd fbb9 	bl	80105fa <vListInsert>
}
 8012e88:	e010      	b.n	8012eac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8012ec4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8012eb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	3304      	adds	r3, #4
 8012e94:	4619      	mov	r1, r3
 8012e96:	4610      	mov	r0, r2
 8012e98:	f7fd fbaf 	bl	80105fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8012ec8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	68ba      	ldr	r2, [r7, #8]
 8012ea2:	429a      	cmp	r2, r3
 8012ea4:	d202      	bcs.n	8012eac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8012ea6:	4a08      	ldr	r2, [pc, #32]	@ (8012ec8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	6013      	str	r3, [r2, #0]
}
 8012eac:	bf00      	nop
 8012eae:	3710      	adds	r7, #16
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}
 8012eb4:	240018e4 	.word	0x240018e4
 8012eb8:	2400140c 	.word	0x2400140c
 8012ebc:	240018cc 	.word	0x240018cc
 8012ec0:	2400189c 	.word	0x2400189c
 8012ec4:	24001898 	.word	0x24001898
 8012ec8:	24001900 	.word	0x24001900

08012ecc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b08a      	sub	sp, #40	@ 0x28
 8012ed0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012ed6:	f000 fbb1 	bl	801363c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8012eda:	4b1d      	ldr	r3, [pc, #116]	@ (8012f50 <xTimerCreateTimerTask+0x84>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d021      	beq.n	8012f26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8012eea:	1d3a      	adds	r2, r7, #4
 8012eec:	f107 0108 	add.w	r1, r7, #8
 8012ef0:	f107 030c 	add.w	r3, r7, #12
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7fd fb15 	bl	8010524 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8012efa:	6879      	ldr	r1, [r7, #4]
 8012efc:	68bb      	ldr	r3, [r7, #8]
 8012efe:	68fa      	ldr	r2, [r7, #12]
 8012f00:	9202      	str	r2, [sp, #8]
 8012f02:	9301      	str	r3, [sp, #4]
 8012f04:	2302      	movs	r3, #2
 8012f06:	9300      	str	r3, [sp, #0]
 8012f08:	2300      	movs	r3, #0
 8012f0a:	460a      	mov	r2, r1
 8012f0c:	4911      	ldr	r1, [pc, #68]	@ (8012f54 <xTimerCreateTimerTask+0x88>)
 8012f0e:	4812      	ldr	r0, [pc, #72]	@ (8012f58 <xTimerCreateTimerTask+0x8c>)
 8012f10:	f7fe fc02 	bl	8011718 <xTaskCreateStatic>
 8012f14:	4603      	mov	r3, r0
 8012f16:	4a11      	ldr	r2, [pc, #68]	@ (8012f5c <xTimerCreateTimerTask+0x90>)
 8012f18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012f1a:	4b10      	ldr	r3, [pc, #64]	@ (8012f5c <xTimerCreateTimerTask+0x90>)
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d001      	beq.n	8012f26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012f22:	2301      	movs	r3, #1
 8012f24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012f26:	697b      	ldr	r3, [r7, #20]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d10b      	bne.n	8012f44 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8012f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f30:	f383 8811 	msr	BASEPRI, r3
 8012f34:	f3bf 8f6f 	isb	sy
 8012f38:	f3bf 8f4f 	dsb	sy
 8012f3c:	613b      	str	r3, [r7, #16]
}
 8012f3e:	bf00      	nop
 8012f40:	bf00      	nop
 8012f42:	e7fd      	b.n	8012f40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012f44:	697b      	ldr	r3, [r7, #20]
}
 8012f46:	4618      	mov	r0, r3
 8012f48:	3718      	adds	r7, #24
 8012f4a:	46bd      	mov	sp, r7
 8012f4c:	bd80      	pop	{r7, pc}
 8012f4e:	bf00      	nop
 8012f50:	2400193c 	.word	0x2400193c
 8012f54:	0802325c 	.word	0x0802325c
 8012f58:	080131d5 	.word	0x080131d5
 8012f5c:	24001940 	.word	0x24001940

08012f60 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b088      	sub	sp, #32
 8012f64:	af02      	add	r7, sp, #8
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	607a      	str	r2, [r7, #4]
 8012f6c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8012f6e:	202c      	movs	r0, #44	@ 0x2c
 8012f70:	f000 fe1c 	bl	8013bac <pvPortMalloc>
 8012f74:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d00d      	beq.n	8012f98 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	9301      	str	r3, [sp, #4]
 8012f88:	6a3b      	ldr	r3, [r7, #32]
 8012f8a:	9300      	str	r3, [sp, #0]
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	68b9      	ldr	r1, [r7, #8]
 8012f92:	68f8      	ldr	r0, [r7, #12]
 8012f94:	f000 f845 	bl	8013022 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8012f98:	697b      	ldr	r3, [r7, #20]
	}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3718      	adds	r7, #24
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}

08012fa2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8012fa2:	b580      	push	{r7, lr}
 8012fa4:	b08a      	sub	sp, #40	@ 0x28
 8012fa6:	af02      	add	r7, sp, #8
 8012fa8:	60f8      	str	r0, [r7, #12]
 8012faa:	60b9      	str	r1, [r7, #8]
 8012fac:	607a      	str	r2, [r7, #4]
 8012fae:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012fb0:	232c      	movs	r3, #44	@ 0x2c
 8012fb2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8012fb4:	693b      	ldr	r3, [r7, #16]
 8012fb6:	2b2c      	cmp	r3, #44	@ 0x2c
 8012fb8:	d00b      	beq.n	8012fd2 <xTimerCreateStatic+0x30>
	__asm volatile
 8012fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fbe:	f383 8811 	msr	BASEPRI, r3
 8012fc2:	f3bf 8f6f 	isb	sy
 8012fc6:	f3bf 8f4f 	dsb	sy
 8012fca:	61bb      	str	r3, [r7, #24]
}
 8012fcc:	bf00      	nop
 8012fce:	bf00      	nop
 8012fd0:	e7fd      	b.n	8012fce <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012fd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8012fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d10b      	bne.n	8012ff2 <xTimerCreateStatic+0x50>
	__asm volatile
 8012fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fde:	f383 8811 	msr	BASEPRI, r3
 8012fe2:	f3bf 8f6f 	isb	sy
 8012fe6:	f3bf 8f4f 	dsb	sy
 8012fea:	617b      	str	r3, [r7, #20]
}
 8012fec:	bf00      	nop
 8012fee:	bf00      	nop
 8012ff0:	e7fd      	b.n	8012fee <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8012ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ff4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8012ff6:	69fb      	ldr	r3, [r7, #28]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d00d      	beq.n	8013018 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8012ffc:	69fb      	ldr	r3, [r7, #28]
 8012ffe:	2202      	movs	r2, #2
 8013000:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8013004:	69fb      	ldr	r3, [r7, #28]
 8013006:	9301      	str	r3, [sp, #4]
 8013008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801300a:	9300      	str	r3, [sp, #0]
 801300c:	683b      	ldr	r3, [r7, #0]
 801300e:	687a      	ldr	r2, [r7, #4]
 8013010:	68b9      	ldr	r1, [r7, #8]
 8013012:	68f8      	ldr	r0, [r7, #12]
 8013014:	f000 f805 	bl	8013022 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8013018:	69fb      	ldr	r3, [r7, #28]
	}
 801301a:	4618      	mov	r0, r3
 801301c:	3720      	adds	r7, #32
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}

08013022 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8013022:	b580      	push	{r7, lr}
 8013024:	b086      	sub	sp, #24
 8013026:	af00      	add	r7, sp, #0
 8013028:	60f8      	str	r0, [r7, #12]
 801302a:	60b9      	str	r1, [r7, #8]
 801302c:	607a      	str	r2, [r7, #4]
 801302e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8013030:	68bb      	ldr	r3, [r7, #8]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d10b      	bne.n	801304e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8013036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801303a:	f383 8811 	msr	BASEPRI, r3
 801303e:	f3bf 8f6f 	isb	sy
 8013042:	f3bf 8f4f 	dsb	sy
 8013046:	617b      	str	r3, [r7, #20]
}
 8013048:	bf00      	nop
 801304a:	bf00      	nop
 801304c:	e7fd      	b.n	801304a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 801304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013050:	2b00      	cmp	r3, #0
 8013052:	d01e      	beq.n	8013092 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8013054:	f000 faf2 	bl	801363c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8013058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801305a:	68fa      	ldr	r2, [r7, #12]
 801305c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 801305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013060:	68ba      	ldr	r2, [r7, #8]
 8013062:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8013064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013066:	683a      	ldr	r2, [r7, #0]
 8013068:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801306c:	6a3a      	ldr	r2, [r7, #32]
 801306e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8013070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013072:	3304      	adds	r3, #4
 8013074:	4618      	mov	r0, r3
 8013076:	f7fd fa8f 	bl	8010598 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d008      	beq.n	8013092 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8013080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013082:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013086:	f043 0304 	orr.w	r3, r3, #4
 801308a:	b2da      	uxtb	r2, r3
 801308c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801308e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8013092:	bf00      	nop
 8013094:	3718      	adds	r7, #24
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}
	...

0801309c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b08a      	sub	sp, #40	@ 0x28
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	60f8      	str	r0, [r7, #12]
 80130a4:	60b9      	str	r1, [r7, #8]
 80130a6:	607a      	str	r2, [r7, #4]
 80130a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80130aa:	2300      	movs	r3, #0
 80130ac:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d10b      	bne.n	80130cc <xTimerGenericCommand+0x30>
	__asm volatile
 80130b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130b8:	f383 8811 	msr	BASEPRI, r3
 80130bc:	f3bf 8f6f 	isb	sy
 80130c0:	f3bf 8f4f 	dsb	sy
 80130c4:	623b      	str	r3, [r7, #32]
}
 80130c6:	bf00      	nop
 80130c8:	bf00      	nop
 80130ca:	e7fd      	b.n	80130c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80130cc:	4b19      	ldr	r3, [pc, #100]	@ (8013134 <xTimerGenericCommand+0x98>)
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d02a      	beq.n	801312a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80130d4:	68bb      	ldr	r3, [r7, #8]
 80130d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	2b05      	cmp	r3, #5
 80130e4:	dc18      	bgt.n	8013118 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80130e6:	f7ff fa85 	bl	80125f4 <xTaskGetSchedulerState>
 80130ea:	4603      	mov	r3, r0
 80130ec:	2b02      	cmp	r3, #2
 80130ee:	d109      	bne.n	8013104 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80130f0:	4b10      	ldr	r3, [pc, #64]	@ (8013134 <xTimerGenericCommand+0x98>)
 80130f2:	6818      	ldr	r0, [r3, #0]
 80130f4:	f107 0110 	add.w	r1, r7, #16
 80130f8:	2300      	movs	r3, #0
 80130fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80130fc:	f7fd fc94 	bl	8010a28 <xQueueGenericSend>
 8013100:	6278      	str	r0, [r7, #36]	@ 0x24
 8013102:	e012      	b.n	801312a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013104:	4b0b      	ldr	r3, [pc, #44]	@ (8013134 <xTimerGenericCommand+0x98>)
 8013106:	6818      	ldr	r0, [r3, #0]
 8013108:	f107 0110 	add.w	r1, r7, #16
 801310c:	2300      	movs	r3, #0
 801310e:	2200      	movs	r2, #0
 8013110:	f7fd fc8a 	bl	8010a28 <xQueueGenericSend>
 8013114:	6278      	str	r0, [r7, #36]	@ 0x24
 8013116:	e008      	b.n	801312a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013118:	4b06      	ldr	r3, [pc, #24]	@ (8013134 <xTimerGenericCommand+0x98>)
 801311a:	6818      	ldr	r0, [r3, #0]
 801311c:	f107 0110 	add.w	r1, r7, #16
 8013120:	2300      	movs	r3, #0
 8013122:	683a      	ldr	r2, [r7, #0]
 8013124:	f7fd fd82 	bl	8010c2c <xQueueGenericSendFromISR>
 8013128:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801312c:	4618      	mov	r0, r3
 801312e:	3728      	adds	r7, #40	@ 0x28
 8013130:	46bd      	mov	sp, r7
 8013132:	bd80      	pop	{r7, pc}
 8013134:	2400193c 	.word	0x2400193c

08013138 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b088      	sub	sp, #32
 801313c:	af02      	add	r7, sp, #8
 801313e:	6078      	str	r0, [r7, #4]
 8013140:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013142:	4b23      	ldr	r3, [pc, #140]	@ (80131d0 <prvProcessExpiredTimer+0x98>)
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	68db      	ldr	r3, [r3, #12]
 8013148:	68db      	ldr	r3, [r3, #12]
 801314a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	3304      	adds	r3, #4
 8013150:	4618      	mov	r0, r3
 8013152:	f7fd fa8b 	bl	801066c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801315c:	f003 0304 	and.w	r3, r3, #4
 8013160:	2b00      	cmp	r3, #0
 8013162:	d023      	beq.n	80131ac <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013164:	697b      	ldr	r3, [r7, #20]
 8013166:	699a      	ldr	r2, [r3, #24]
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	18d1      	adds	r1, r2, r3
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	683a      	ldr	r2, [r7, #0]
 8013170:	6978      	ldr	r0, [r7, #20]
 8013172:	f000 f8d5 	bl	8013320 <prvInsertTimerInActiveList>
 8013176:	4603      	mov	r3, r0
 8013178:	2b00      	cmp	r3, #0
 801317a:	d020      	beq.n	80131be <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801317c:	2300      	movs	r3, #0
 801317e:	9300      	str	r3, [sp, #0]
 8013180:	2300      	movs	r3, #0
 8013182:	687a      	ldr	r2, [r7, #4]
 8013184:	2100      	movs	r1, #0
 8013186:	6978      	ldr	r0, [r7, #20]
 8013188:	f7ff ff88 	bl	801309c <xTimerGenericCommand>
 801318c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801318e:	693b      	ldr	r3, [r7, #16]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d114      	bne.n	80131be <prvProcessExpiredTimer+0x86>
	__asm volatile
 8013194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013198:	f383 8811 	msr	BASEPRI, r3
 801319c:	f3bf 8f6f 	isb	sy
 80131a0:	f3bf 8f4f 	dsb	sy
 80131a4:	60fb      	str	r3, [r7, #12]
}
 80131a6:	bf00      	nop
 80131a8:	bf00      	nop
 80131aa:	e7fd      	b.n	80131a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80131b2:	f023 0301 	bic.w	r3, r3, #1
 80131b6:	b2da      	uxtb	r2, r3
 80131b8:	697b      	ldr	r3, [r7, #20]
 80131ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	6a1b      	ldr	r3, [r3, #32]
 80131c2:	6978      	ldr	r0, [r7, #20]
 80131c4:	4798      	blx	r3
}
 80131c6:	bf00      	nop
 80131c8:	3718      	adds	r7, #24
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}
 80131ce:	bf00      	nop
 80131d0:	24001934 	.word	0x24001934

080131d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b084      	sub	sp, #16
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80131dc:	f107 0308 	add.w	r3, r7, #8
 80131e0:	4618      	mov	r0, r3
 80131e2:	f000 f859 	bl	8013298 <prvGetNextExpireTime>
 80131e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	4619      	mov	r1, r3
 80131ec:	68f8      	ldr	r0, [r7, #12]
 80131ee:	f000 f805 	bl	80131fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80131f2:	f000 f8d7 	bl	80133a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80131f6:	bf00      	nop
 80131f8:	e7f0      	b.n	80131dc <prvTimerTask+0x8>
	...

080131fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80131fc:	b580      	push	{r7, lr}
 80131fe:	b084      	sub	sp, #16
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013206:	f7fe fddf 	bl	8011dc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801320a:	f107 0308 	add.w	r3, r7, #8
 801320e:	4618      	mov	r0, r3
 8013210:	f000 f866 	bl	80132e0 <prvSampleTimeNow>
 8013214:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013216:	68bb      	ldr	r3, [r7, #8]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d130      	bne.n	801327e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d10a      	bne.n	8013238 <prvProcessTimerOrBlockTask+0x3c>
 8013222:	687a      	ldr	r2, [r7, #4]
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	429a      	cmp	r2, r3
 8013228:	d806      	bhi.n	8013238 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801322a:	f7fe fddb 	bl	8011de4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801322e:	68f9      	ldr	r1, [r7, #12]
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f7ff ff81 	bl	8013138 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013236:	e024      	b.n	8013282 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d008      	beq.n	8013250 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801323e:	4b13      	ldr	r3, [pc, #76]	@ (801328c <prvProcessTimerOrBlockTask+0x90>)
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d101      	bne.n	801324c <prvProcessTimerOrBlockTask+0x50>
 8013248:	2301      	movs	r3, #1
 801324a:	e000      	b.n	801324e <prvProcessTimerOrBlockTask+0x52>
 801324c:	2300      	movs	r3, #0
 801324e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013250:	4b0f      	ldr	r3, [pc, #60]	@ (8013290 <prvProcessTimerOrBlockTask+0x94>)
 8013252:	6818      	ldr	r0, [r3, #0]
 8013254:	687a      	ldr	r2, [r7, #4]
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	1ad3      	subs	r3, r2, r3
 801325a:	683a      	ldr	r2, [r7, #0]
 801325c:	4619      	mov	r1, r3
 801325e:	f7fe fa27 	bl	80116b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013262:	f7fe fdbf 	bl	8011de4 <xTaskResumeAll>
 8013266:	4603      	mov	r3, r0
 8013268:	2b00      	cmp	r3, #0
 801326a:	d10a      	bne.n	8013282 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801326c:	4b09      	ldr	r3, [pc, #36]	@ (8013294 <prvProcessTimerOrBlockTask+0x98>)
 801326e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013272:	601a      	str	r2, [r3, #0]
 8013274:	f3bf 8f4f 	dsb	sy
 8013278:	f3bf 8f6f 	isb	sy
}
 801327c:	e001      	b.n	8013282 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801327e:	f7fe fdb1 	bl	8011de4 <xTaskResumeAll>
}
 8013282:	bf00      	nop
 8013284:	3710      	adds	r7, #16
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}
 801328a:	bf00      	nop
 801328c:	24001938 	.word	0x24001938
 8013290:	2400193c 	.word	0x2400193c
 8013294:	e000ed04 	.word	0xe000ed04

08013298 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013298:	b480      	push	{r7}
 801329a:	b085      	sub	sp, #20
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80132a0:	4b0e      	ldr	r3, [pc, #56]	@ (80132dc <prvGetNextExpireTime+0x44>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d101      	bne.n	80132ae <prvGetNextExpireTime+0x16>
 80132aa:	2201      	movs	r2, #1
 80132ac:	e000      	b.n	80132b0 <prvGetNextExpireTime+0x18>
 80132ae:	2200      	movs	r2, #0
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d105      	bne.n	80132c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80132bc:	4b07      	ldr	r3, [pc, #28]	@ (80132dc <prvGetNextExpireTime+0x44>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	68db      	ldr	r3, [r3, #12]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	60fb      	str	r3, [r7, #12]
 80132c6:	e001      	b.n	80132cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80132c8:	2300      	movs	r3, #0
 80132ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80132cc:	68fb      	ldr	r3, [r7, #12]
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3714      	adds	r7, #20
 80132d2:	46bd      	mov	sp, r7
 80132d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d8:	4770      	bx	lr
 80132da:	bf00      	nop
 80132dc:	24001934 	.word	0x24001934

080132e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b084      	sub	sp, #16
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80132e8:	f7fe fe1a 	bl	8011f20 <xTaskGetTickCount>
 80132ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80132ee:	4b0b      	ldr	r3, [pc, #44]	@ (801331c <prvSampleTimeNow+0x3c>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	68fa      	ldr	r2, [r7, #12]
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d205      	bcs.n	8013304 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80132f8:	f000 f93a 	bl	8013570 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2201      	movs	r2, #1
 8013300:	601a      	str	r2, [r3, #0]
 8013302:	e002      	b.n	801330a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	2200      	movs	r2, #0
 8013308:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801330a:	4a04      	ldr	r2, [pc, #16]	@ (801331c <prvSampleTimeNow+0x3c>)
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013310:	68fb      	ldr	r3, [r7, #12]
}
 8013312:	4618      	mov	r0, r3
 8013314:	3710      	adds	r7, #16
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	24001944 	.word	0x24001944

08013320 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b086      	sub	sp, #24
 8013324:	af00      	add	r7, sp, #0
 8013326:	60f8      	str	r0, [r7, #12]
 8013328:	60b9      	str	r1, [r7, #8]
 801332a:	607a      	str	r2, [r7, #4]
 801332c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801332e:	2300      	movs	r3, #0
 8013330:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	68ba      	ldr	r2, [r7, #8]
 8013336:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	68fa      	ldr	r2, [r7, #12]
 801333c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801333e:	68ba      	ldr	r2, [r7, #8]
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	429a      	cmp	r2, r3
 8013344:	d812      	bhi.n	801336c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013346:	687a      	ldr	r2, [r7, #4]
 8013348:	683b      	ldr	r3, [r7, #0]
 801334a:	1ad2      	subs	r2, r2, r3
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	699b      	ldr	r3, [r3, #24]
 8013350:	429a      	cmp	r2, r3
 8013352:	d302      	bcc.n	801335a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013354:	2301      	movs	r3, #1
 8013356:	617b      	str	r3, [r7, #20]
 8013358:	e01b      	b.n	8013392 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801335a:	4b10      	ldr	r3, [pc, #64]	@ (801339c <prvInsertTimerInActiveList+0x7c>)
 801335c:	681a      	ldr	r2, [r3, #0]
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	3304      	adds	r3, #4
 8013362:	4619      	mov	r1, r3
 8013364:	4610      	mov	r0, r2
 8013366:	f7fd f948 	bl	80105fa <vListInsert>
 801336a:	e012      	b.n	8013392 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801336c:	687a      	ldr	r2, [r7, #4]
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	429a      	cmp	r2, r3
 8013372:	d206      	bcs.n	8013382 <prvInsertTimerInActiveList+0x62>
 8013374:	68ba      	ldr	r2, [r7, #8]
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	429a      	cmp	r2, r3
 801337a:	d302      	bcc.n	8013382 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801337c:	2301      	movs	r3, #1
 801337e:	617b      	str	r3, [r7, #20]
 8013380:	e007      	b.n	8013392 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013382:	4b07      	ldr	r3, [pc, #28]	@ (80133a0 <prvInsertTimerInActiveList+0x80>)
 8013384:	681a      	ldr	r2, [r3, #0]
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	3304      	adds	r3, #4
 801338a:	4619      	mov	r1, r3
 801338c:	4610      	mov	r0, r2
 801338e:	f7fd f934 	bl	80105fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013392:	697b      	ldr	r3, [r7, #20]
}
 8013394:	4618      	mov	r0, r3
 8013396:	3718      	adds	r7, #24
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}
 801339c:	24001938 	.word	0x24001938
 80133a0:	24001934 	.word	0x24001934

080133a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b08e      	sub	sp, #56	@ 0x38
 80133a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80133aa:	e0ce      	b.n	801354a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	da19      	bge.n	80133e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80133b2:	1d3b      	adds	r3, r7, #4
 80133b4:	3304      	adds	r3, #4
 80133b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80133b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d10b      	bne.n	80133d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80133be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133c2:	f383 8811 	msr	BASEPRI, r3
 80133c6:	f3bf 8f6f 	isb	sy
 80133ca:	f3bf 8f4f 	dsb	sy
 80133ce:	61fb      	str	r3, [r7, #28]
}
 80133d0:	bf00      	nop
 80133d2:	bf00      	nop
 80133d4:	e7fd      	b.n	80133d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80133d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80133dc:	6850      	ldr	r0, [r2, #4]
 80133de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80133e0:	6892      	ldr	r2, [r2, #8]
 80133e2:	4611      	mov	r1, r2
 80133e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	f2c0 80ae 	blt.w	801354a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80133f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133f4:	695b      	ldr	r3, [r3, #20]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d004      	beq.n	8013404 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80133fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133fc:	3304      	adds	r3, #4
 80133fe:	4618      	mov	r0, r3
 8013400:	f7fd f934 	bl	801066c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013404:	463b      	mov	r3, r7
 8013406:	4618      	mov	r0, r3
 8013408:	f7ff ff6a 	bl	80132e0 <prvSampleTimeNow>
 801340c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	2b09      	cmp	r3, #9
 8013412:	f200 8097 	bhi.w	8013544 <prvProcessReceivedCommands+0x1a0>
 8013416:	a201      	add	r2, pc, #4	@ (adr r2, 801341c <prvProcessReceivedCommands+0x78>)
 8013418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801341c:	08013445 	.word	0x08013445
 8013420:	08013445 	.word	0x08013445
 8013424:	08013445 	.word	0x08013445
 8013428:	080134bb 	.word	0x080134bb
 801342c:	080134cf 	.word	0x080134cf
 8013430:	0801351b 	.word	0x0801351b
 8013434:	08013445 	.word	0x08013445
 8013438:	08013445 	.word	0x08013445
 801343c:	080134bb 	.word	0x080134bb
 8013440:	080134cf 	.word	0x080134cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013446:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801344a:	f043 0301 	orr.w	r3, r3, #1
 801344e:	b2da      	uxtb	r2, r3
 8013450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013452:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013456:	68ba      	ldr	r2, [r7, #8]
 8013458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801345a:	699b      	ldr	r3, [r3, #24]
 801345c:	18d1      	adds	r1, r2, r3
 801345e:	68bb      	ldr	r3, [r7, #8]
 8013460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013464:	f7ff ff5c 	bl	8013320 <prvInsertTimerInActiveList>
 8013468:	4603      	mov	r3, r0
 801346a:	2b00      	cmp	r3, #0
 801346c:	d06c      	beq.n	8013548 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801346e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013470:	6a1b      	ldr	r3, [r3, #32]
 8013472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013474:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013478:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801347c:	f003 0304 	and.w	r3, r3, #4
 8013480:	2b00      	cmp	r3, #0
 8013482:	d061      	beq.n	8013548 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013484:	68ba      	ldr	r2, [r7, #8]
 8013486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013488:	699b      	ldr	r3, [r3, #24]
 801348a:	441a      	add	r2, r3
 801348c:	2300      	movs	r3, #0
 801348e:	9300      	str	r3, [sp, #0]
 8013490:	2300      	movs	r3, #0
 8013492:	2100      	movs	r1, #0
 8013494:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013496:	f7ff fe01 	bl	801309c <xTimerGenericCommand>
 801349a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801349c:	6a3b      	ldr	r3, [r7, #32]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d152      	bne.n	8013548 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80134a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134a6:	f383 8811 	msr	BASEPRI, r3
 80134aa:	f3bf 8f6f 	isb	sy
 80134ae:	f3bf 8f4f 	dsb	sy
 80134b2:	61bb      	str	r3, [r7, #24]
}
 80134b4:	bf00      	nop
 80134b6:	bf00      	nop
 80134b8:	e7fd      	b.n	80134b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80134ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80134c0:	f023 0301 	bic.w	r3, r3, #1
 80134c4:	b2da      	uxtb	r2, r3
 80134c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80134cc:	e03d      	b.n	801354a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80134ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80134d4:	f043 0301 	orr.w	r3, r3, #1
 80134d8:	b2da      	uxtb	r2, r3
 80134da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80134e0:	68ba      	ldr	r2, [r7, #8]
 80134e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80134e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134e8:	699b      	ldr	r3, [r3, #24]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d10b      	bne.n	8013506 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80134ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134f2:	f383 8811 	msr	BASEPRI, r3
 80134f6:	f3bf 8f6f 	isb	sy
 80134fa:	f3bf 8f4f 	dsb	sy
 80134fe:	617b      	str	r3, [r7, #20]
}
 8013500:	bf00      	nop
 8013502:	bf00      	nop
 8013504:	e7fd      	b.n	8013502 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013508:	699a      	ldr	r2, [r3, #24]
 801350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801350c:	18d1      	adds	r1, r2, r3
 801350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013514:	f7ff ff04 	bl	8013320 <prvInsertTimerInActiveList>
					break;
 8013518:	e017      	b.n	801354a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801351a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801351c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013520:	f003 0302 	and.w	r3, r3, #2
 8013524:	2b00      	cmp	r3, #0
 8013526:	d103      	bne.n	8013530 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8013528:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801352a:	f000 fc0d 	bl	8013d48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801352e:	e00c      	b.n	801354a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013532:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013536:	f023 0301 	bic.w	r3, r3, #1
 801353a:	b2da      	uxtb	r2, r3
 801353c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801353e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8013542:	e002      	b.n	801354a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8013544:	bf00      	nop
 8013546:	e000      	b.n	801354a <prvProcessReceivedCommands+0x1a6>
					break;
 8013548:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801354a:	4b08      	ldr	r3, [pc, #32]	@ (801356c <prvProcessReceivedCommands+0x1c8>)
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	1d39      	adds	r1, r7, #4
 8013550:	2200      	movs	r2, #0
 8013552:	4618      	mov	r0, r3
 8013554:	f7fd fc98 	bl	8010e88 <xQueueReceive>
 8013558:	4603      	mov	r3, r0
 801355a:	2b00      	cmp	r3, #0
 801355c:	f47f af26 	bne.w	80133ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8013560:	bf00      	nop
 8013562:	bf00      	nop
 8013564:	3730      	adds	r7, #48	@ 0x30
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
 801356a:	bf00      	nop
 801356c:	2400193c 	.word	0x2400193c

08013570 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b088      	sub	sp, #32
 8013574:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013576:	e049      	b.n	801360c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013578:	4b2e      	ldr	r3, [pc, #184]	@ (8013634 <prvSwitchTimerLists+0xc4>)
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	68db      	ldr	r3, [r3, #12]
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013582:	4b2c      	ldr	r3, [pc, #176]	@ (8013634 <prvSwitchTimerLists+0xc4>)
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	68db      	ldr	r3, [r3, #12]
 8013588:	68db      	ldr	r3, [r3, #12]
 801358a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801358c:	68fb      	ldr	r3, [r7, #12]
 801358e:	3304      	adds	r3, #4
 8013590:	4618      	mov	r0, r3
 8013592:	f7fd f86b 	bl	801066c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	6a1b      	ldr	r3, [r3, #32]
 801359a:	68f8      	ldr	r0, [r7, #12]
 801359c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80135a4:	f003 0304 	and.w	r3, r3, #4
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d02f      	beq.n	801360c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	699b      	ldr	r3, [r3, #24]
 80135b0:	693a      	ldr	r2, [r7, #16]
 80135b2:	4413      	add	r3, r2
 80135b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80135b6:	68ba      	ldr	r2, [r7, #8]
 80135b8:	693b      	ldr	r3, [r7, #16]
 80135ba:	429a      	cmp	r2, r3
 80135bc:	d90e      	bls.n	80135dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	68ba      	ldr	r2, [r7, #8]
 80135c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	68fa      	ldr	r2, [r7, #12]
 80135c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80135ca:	4b1a      	ldr	r3, [pc, #104]	@ (8013634 <prvSwitchTimerLists+0xc4>)
 80135cc:	681a      	ldr	r2, [r3, #0]
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	3304      	adds	r3, #4
 80135d2:	4619      	mov	r1, r3
 80135d4:	4610      	mov	r0, r2
 80135d6:	f7fd f810 	bl	80105fa <vListInsert>
 80135da:	e017      	b.n	801360c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80135dc:	2300      	movs	r3, #0
 80135de:	9300      	str	r3, [sp, #0]
 80135e0:	2300      	movs	r3, #0
 80135e2:	693a      	ldr	r2, [r7, #16]
 80135e4:	2100      	movs	r1, #0
 80135e6:	68f8      	ldr	r0, [r7, #12]
 80135e8:	f7ff fd58 	bl	801309c <xTimerGenericCommand>
 80135ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d10b      	bne.n	801360c <prvSwitchTimerLists+0x9c>
	__asm volatile
 80135f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80135f8:	f383 8811 	msr	BASEPRI, r3
 80135fc:	f3bf 8f6f 	isb	sy
 8013600:	f3bf 8f4f 	dsb	sy
 8013604:	603b      	str	r3, [r7, #0]
}
 8013606:	bf00      	nop
 8013608:	bf00      	nop
 801360a:	e7fd      	b.n	8013608 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801360c:	4b09      	ldr	r3, [pc, #36]	@ (8013634 <prvSwitchTimerLists+0xc4>)
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d1b0      	bne.n	8013578 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013616:	4b07      	ldr	r3, [pc, #28]	@ (8013634 <prvSwitchTimerLists+0xc4>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801361c:	4b06      	ldr	r3, [pc, #24]	@ (8013638 <prvSwitchTimerLists+0xc8>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	4a04      	ldr	r2, [pc, #16]	@ (8013634 <prvSwitchTimerLists+0xc4>)
 8013622:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013624:	4a04      	ldr	r2, [pc, #16]	@ (8013638 <prvSwitchTimerLists+0xc8>)
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	6013      	str	r3, [r2, #0]
}
 801362a:	bf00      	nop
 801362c:	3718      	adds	r7, #24
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}
 8013632:	bf00      	nop
 8013634:	24001934 	.word	0x24001934
 8013638:	24001938 	.word	0x24001938

0801363c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b082      	sub	sp, #8
 8013640:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013642:	f000 f991 	bl	8013968 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013646:	4b15      	ldr	r3, [pc, #84]	@ (801369c <prvCheckForValidListAndQueue+0x60>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d120      	bne.n	8013690 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801364e:	4814      	ldr	r0, [pc, #80]	@ (80136a0 <prvCheckForValidListAndQueue+0x64>)
 8013650:	f7fc ff82 	bl	8010558 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013654:	4813      	ldr	r0, [pc, #76]	@ (80136a4 <prvCheckForValidListAndQueue+0x68>)
 8013656:	f7fc ff7f 	bl	8010558 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801365a:	4b13      	ldr	r3, [pc, #76]	@ (80136a8 <prvCheckForValidListAndQueue+0x6c>)
 801365c:	4a10      	ldr	r2, [pc, #64]	@ (80136a0 <prvCheckForValidListAndQueue+0x64>)
 801365e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013660:	4b12      	ldr	r3, [pc, #72]	@ (80136ac <prvCheckForValidListAndQueue+0x70>)
 8013662:	4a10      	ldr	r2, [pc, #64]	@ (80136a4 <prvCheckForValidListAndQueue+0x68>)
 8013664:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013666:	2300      	movs	r3, #0
 8013668:	9300      	str	r3, [sp, #0]
 801366a:	4b11      	ldr	r3, [pc, #68]	@ (80136b0 <prvCheckForValidListAndQueue+0x74>)
 801366c:	4a11      	ldr	r2, [pc, #68]	@ (80136b4 <prvCheckForValidListAndQueue+0x78>)
 801366e:	2110      	movs	r1, #16
 8013670:	200a      	movs	r0, #10
 8013672:	f7fd f88f 	bl	8010794 <xQueueGenericCreateStatic>
 8013676:	4603      	mov	r3, r0
 8013678:	4a08      	ldr	r2, [pc, #32]	@ (801369c <prvCheckForValidListAndQueue+0x60>)
 801367a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801367c:	4b07      	ldr	r3, [pc, #28]	@ (801369c <prvCheckForValidListAndQueue+0x60>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d005      	beq.n	8013690 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013684:	4b05      	ldr	r3, [pc, #20]	@ (801369c <prvCheckForValidListAndQueue+0x60>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	490b      	ldr	r1, [pc, #44]	@ (80136b8 <prvCheckForValidListAndQueue+0x7c>)
 801368a:	4618      	mov	r0, r3
 801368c:	f7fd ffbc 	bl	8011608 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013690:	f000 f99c 	bl	80139cc <vPortExitCritical>
}
 8013694:	bf00      	nop
 8013696:	46bd      	mov	sp, r7
 8013698:	bd80      	pop	{r7, pc}
 801369a:	bf00      	nop
 801369c:	2400193c 	.word	0x2400193c
 80136a0:	2400190c 	.word	0x2400190c
 80136a4:	24001920 	.word	0x24001920
 80136a8:	24001934 	.word	0x24001934
 80136ac:	24001938 	.word	0x24001938
 80136b0:	240019e8 	.word	0x240019e8
 80136b4:	24001948 	.word	0x24001948
 80136b8:	08023264 	.word	0x08023264

080136bc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b086      	sub	sp, #24
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d10b      	bne.n	80136e6 <pvTimerGetTimerID+0x2a>
	__asm volatile
 80136ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80136d2:	f383 8811 	msr	BASEPRI, r3
 80136d6:	f3bf 8f6f 	isb	sy
 80136da:	f3bf 8f4f 	dsb	sy
 80136de:	60fb      	str	r3, [r7, #12]
}
 80136e0:	bf00      	nop
 80136e2:	bf00      	nop
 80136e4:	e7fd      	b.n	80136e2 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80136e6:	f000 f93f 	bl	8013968 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80136ea:	697b      	ldr	r3, [r7, #20]
 80136ec:	69db      	ldr	r3, [r3, #28]
 80136ee:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80136f0:	f000 f96c 	bl	80139cc <vPortExitCritical>

	return pvReturn;
 80136f4:	693b      	ldr	r3, [r7, #16]
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3718      	adds	r7, #24
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
	...

08013700 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013700:	b480      	push	{r7}
 8013702:	b085      	sub	sp, #20
 8013704:	af00      	add	r7, sp, #0
 8013706:	60f8      	str	r0, [r7, #12]
 8013708:	60b9      	str	r1, [r7, #8]
 801370a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	3b04      	subs	r3, #4
 8013710:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8013718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801371a:	68fb      	ldr	r3, [r7, #12]
 801371c:	3b04      	subs	r3, #4
 801371e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	f023 0201 	bic.w	r2, r3, #1
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	3b04      	subs	r3, #4
 801372e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013730:	4a0c      	ldr	r2, [pc, #48]	@ (8013764 <pxPortInitialiseStack+0x64>)
 8013732:	68fb      	ldr	r3, [r7, #12]
 8013734:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	3b14      	subs	r3, #20
 801373a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801373c:	687a      	ldr	r2, [r7, #4]
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	3b04      	subs	r3, #4
 8013746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	f06f 0202 	mvn.w	r2, #2
 801374e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	3b20      	subs	r3, #32
 8013754:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013756:	68fb      	ldr	r3, [r7, #12]
}
 8013758:	4618      	mov	r0, r3
 801375a:	3714      	adds	r7, #20
 801375c:	46bd      	mov	sp, r7
 801375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013762:	4770      	bx	lr
 8013764:	08013769 	.word	0x08013769

08013768 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013768:	b480      	push	{r7}
 801376a:	b085      	sub	sp, #20
 801376c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801376e:	2300      	movs	r3, #0
 8013770:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013772:	4b13      	ldr	r3, [pc, #76]	@ (80137c0 <prvTaskExitError+0x58>)
 8013774:	681b      	ldr	r3, [r3, #0]
 8013776:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801377a:	d00b      	beq.n	8013794 <prvTaskExitError+0x2c>
	__asm volatile
 801377c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013780:	f383 8811 	msr	BASEPRI, r3
 8013784:	f3bf 8f6f 	isb	sy
 8013788:	f3bf 8f4f 	dsb	sy
 801378c:	60fb      	str	r3, [r7, #12]
}
 801378e:	bf00      	nop
 8013790:	bf00      	nop
 8013792:	e7fd      	b.n	8013790 <prvTaskExitError+0x28>
	__asm volatile
 8013794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013798:	f383 8811 	msr	BASEPRI, r3
 801379c:	f3bf 8f6f 	isb	sy
 80137a0:	f3bf 8f4f 	dsb	sy
 80137a4:	60bb      	str	r3, [r7, #8]
}
 80137a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80137a8:	bf00      	nop
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d0fc      	beq.n	80137aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80137b0:	bf00      	nop
 80137b2:	bf00      	nop
 80137b4:	3714      	adds	r7, #20
 80137b6:	46bd      	mov	sp, r7
 80137b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137bc:	4770      	bx	lr
 80137be:	bf00      	nop
 80137c0:	24000010 	.word	0x24000010
	...

080137d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80137d0:	4b07      	ldr	r3, [pc, #28]	@ (80137f0 <pxCurrentTCBConst2>)
 80137d2:	6819      	ldr	r1, [r3, #0]
 80137d4:	6808      	ldr	r0, [r1, #0]
 80137d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137da:	f380 8809 	msr	PSP, r0
 80137de:	f3bf 8f6f 	isb	sy
 80137e2:	f04f 0000 	mov.w	r0, #0
 80137e6:	f380 8811 	msr	BASEPRI, r0
 80137ea:	4770      	bx	lr
 80137ec:	f3af 8000 	nop.w

080137f0 <pxCurrentTCBConst2>:
 80137f0:	2400140c 	.word	0x2400140c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80137f4:	bf00      	nop
 80137f6:	bf00      	nop

080137f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80137f8:	4808      	ldr	r0, [pc, #32]	@ (801381c <prvPortStartFirstTask+0x24>)
 80137fa:	6800      	ldr	r0, [r0, #0]
 80137fc:	6800      	ldr	r0, [r0, #0]
 80137fe:	f380 8808 	msr	MSP, r0
 8013802:	f04f 0000 	mov.w	r0, #0
 8013806:	f380 8814 	msr	CONTROL, r0
 801380a:	b662      	cpsie	i
 801380c:	b661      	cpsie	f
 801380e:	f3bf 8f4f 	dsb	sy
 8013812:	f3bf 8f6f 	isb	sy
 8013816:	df00      	svc	0
 8013818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801381a:	bf00      	nop
 801381c:	e000ed08 	.word	0xe000ed08

08013820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b086      	sub	sp, #24
 8013824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013826:	4b47      	ldr	r3, [pc, #284]	@ (8013944 <xPortStartScheduler+0x124>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	4a47      	ldr	r2, [pc, #284]	@ (8013948 <xPortStartScheduler+0x128>)
 801382c:	4293      	cmp	r3, r2
 801382e:	d10b      	bne.n	8013848 <xPortStartScheduler+0x28>
	__asm volatile
 8013830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013834:	f383 8811 	msr	BASEPRI, r3
 8013838:	f3bf 8f6f 	isb	sy
 801383c:	f3bf 8f4f 	dsb	sy
 8013840:	613b      	str	r3, [r7, #16]
}
 8013842:	bf00      	nop
 8013844:	bf00      	nop
 8013846:	e7fd      	b.n	8013844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013848:	4b3e      	ldr	r3, [pc, #248]	@ (8013944 <xPortStartScheduler+0x124>)
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	4a3f      	ldr	r2, [pc, #252]	@ (801394c <xPortStartScheduler+0x12c>)
 801384e:	4293      	cmp	r3, r2
 8013850:	d10b      	bne.n	801386a <xPortStartScheduler+0x4a>
	__asm volatile
 8013852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013856:	f383 8811 	msr	BASEPRI, r3
 801385a:	f3bf 8f6f 	isb	sy
 801385e:	f3bf 8f4f 	dsb	sy
 8013862:	60fb      	str	r3, [r7, #12]
}
 8013864:	bf00      	nop
 8013866:	bf00      	nop
 8013868:	e7fd      	b.n	8013866 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801386a:	4b39      	ldr	r3, [pc, #228]	@ (8013950 <xPortStartScheduler+0x130>)
 801386c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801386e:	697b      	ldr	r3, [r7, #20]
 8013870:	781b      	ldrb	r3, [r3, #0]
 8013872:	b2db      	uxtb	r3, r3
 8013874:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	22ff      	movs	r2, #255	@ 0xff
 801387a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	781b      	ldrb	r3, [r3, #0]
 8013880:	b2db      	uxtb	r3, r3
 8013882:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013884:	78fb      	ldrb	r3, [r7, #3]
 8013886:	b2db      	uxtb	r3, r3
 8013888:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801388c:	b2da      	uxtb	r2, r3
 801388e:	4b31      	ldr	r3, [pc, #196]	@ (8013954 <xPortStartScheduler+0x134>)
 8013890:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013892:	4b31      	ldr	r3, [pc, #196]	@ (8013958 <xPortStartScheduler+0x138>)
 8013894:	2207      	movs	r2, #7
 8013896:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013898:	e009      	b.n	80138ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801389a:	4b2f      	ldr	r3, [pc, #188]	@ (8013958 <xPortStartScheduler+0x138>)
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	3b01      	subs	r3, #1
 80138a0:	4a2d      	ldr	r2, [pc, #180]	@ (8013958 <xPortStartScheduler+0x138>)
 80138a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80138a4:	78fb      	ldrb	r3, [r7, #3]
 80138a6:	b2db      	uxtb	r3, r3
 80138a8:	005b      	lsls	r3, r3, #1
 80138aa:	b2db      	uxtb	r3, r3
 80138ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80138ae:	78fb      	ldrb	r3, [r7, #3]
 80138b0:	b2db      	uxtb	r3, r3
 80138b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80138b6:	2b80      	cmp	r3, #128	@ 0x80
 80138b8:	d0ef      	beq.n	801389a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80138ba:	4b27      	ldr	r3, [pc, #156]	@ (8013958 <xPortStartScheduler+0x138>)
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	f1c3 0307 	rsb	r3, r3, #7
 80138c2:	2b04      	cmp	r3, #4
 80138c4:	d00b      	beq.n	80138de <xPortStartScheduler+0xbe>
	__asm volatile
 80138c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138ca:	f383 8811 	msr	BASEPRI, r3
 80138ce:	f3bf 8f6f 	isb	sy
 80138d2:	f3bf 8f4f 	dsb	sy
 80138d6:	60bb      	str	r3, [r7, #8]
}
 80138d8:	bf00      	nop
 80138da:	bf00      	nop
 80138dc:	e7fd      	b.n	80138da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80138de:	4b1e      	ldr	r3, [pc, #120]	@ (8013958 <xPortStartScheduler+0x138>)
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	021b      	lsls	r3, r3, #8
 80138e4:	4a1c      	ldr	r2, [pc, #112]	@ (8013958 <xPortStartScheduler+0x138>)
 80138e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80138e8:	4b1b      	ldr	r3, [pc, #108]	@ (8013958 <xPortStartScheduler+0x138>)
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80138f0:	4a19      	ldr	r2, [pc, #100]	@ (8013958 <xPortStartScheduler+0x138>)
 80138f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	b2da      	uxtb	r2, r3
 80138f8:	697b      	ldr	r3, [r7, #20]
 80138fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80138fc:	4b17      	ldr	r3, [pc, #92]	@ (801395c <xPortStartScheduler+0x13c>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	4a16      	ldr	r2, [pc, #88]	@ (801395c <xPortStartScheduler+0x13c>)
 8013902:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013906:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013908:	4b14      	ldr	r3, [pc, #80]	@ (801395c <xPortStartScheduler+0x13c>)
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	4a13      	ldr	r2, [pc, #76]	@ (801395c <xPortStartScheduler+0x13c>)
 801390e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013912:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013914:	f000 f8da 	bl	8013acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013918:	4b11      	ldr	r3, [pc, #68]	@ (8013960 <xPortStartScheduler+0x140>)
 801391a:	2200      	movs	r2, #0
 801391c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801391e:	f000 f8f9 	bl	8013b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013922:	4b10      	ldr	r3, [pc, #64]	@ (8013964 <xPortStartScheduler+0x144>)
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	4a0f      	ldr	r2, [pc, #60]	@ (8013964 <xPortStartScheduler+0x144>)
 8013928:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801392c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801392e:	f7ff ff63 	bl	80137f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013932:	f7fe fbd1 	bl	80120d8 <vTaskSwitchContext>
	prvTaskExitError();
 8013936:	f7ff ff17 	bl	8013768 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801393a:	2300      	movs	r3, #0
}
 801393c:	4618      	mov	r0, r3
 801393e:	3718      	adds	r7, #24
 8013940:	46bd      	mov	sp, r7
 8013942:	bd80      	pop	{r7, pc}
 8013944:	e000ed00 	.word	0xe000ed00
 8013948:	410fc271 	.word	0x410fc271
 801394c:	410fc270 	.word	0x410fc270
 8013950:	e000e400 	.word	0xe000e400
 8013954:	24001a38 	.word	0x24001a38
 8013958:	24001a3c 	.word	0x24001a3c
 801395c:	e000ed20 	.word	0xe000ed20
 8013960:	24000010 	.word	0x24000010
 8013964:	e000ef34 	.word	0xe000ef34

08013968 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013968:	b480      	push	{r7}
 801396a:	b083      	sub	sp, #12
 801396c:	af00      	add	r7, sp, #0
	__asm volatile
 801396e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013972:	f383 8811 	msr	BASEPRI, r3
 8013976:	f3bf 8f6f 	isb	sy
 801397a:	f3bf 8f4f 	dsb	sy
 801397e:	607b      	str	r3, [r7, #4]
}
 8013980:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013982:	4b10      	ldr	r3, [pc, #64]	@ (80139c4 <vPortEnterCritical+0x5c>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	3301      	adds	r3, #1
 8013988:	4a0e      	ldr	r2, [pc, #56]	@ (80139c4 <vPortEnterCritical+0x5c>)
 801398a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801398c:	4b0d      	ldr	r3, [pc, #52]	@ (80139c4 <vPortEnterCritical+0x5c>)
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	2b01      	cmp	r3, #1
 8013992:	d110      	bne.n	80139b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013994:	4b0c      	ldr	r3, [pc, #48]	@ (80139c8 <vPortEnterCritical+0x60>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	b2db      	uxtb	r3, r3
 801399a:	2b00      	cmp	r3, #0
 801399c:	d00b      	beq.n	80139b6 <vPortEnterCritical+0x4e>
	__asm volatile
 801399e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139a2:	f383 8811 	msr	BASEPRI, r3
 80139a6:	f3bf 8f6f 	isb	sy
 80139aa:	f3bf 8f4f 	dsb	sy
 80139ae:	603b      	str	r3, [r7, #0]
}
 80139b0:	bf00      	nop
 80139b2:	bf00      	nop
 80139b4:	e7fd      	b.n	80139b2 <vPortEnterCritical+0x4a>
	}
}
 80139b6:	bf00      	nop
 80139b8:	370c      	adds	r7, #12
 80139ba:	46bd      	mov	sp, r7
 80139bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c0:	4770      	bx	lr
 80139c2:	bf00      	nop
 80139c4:	24000010 	.word	0x24000010
 80139c8:	e000ed04 	.word	0xe000ed04

080139cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80139cc:	b480      	push	{r7}
 80139ce:	b083      	sub	sp, #12
 80139d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80139d2:	4b12      	ldr	r3, [pc, #72]	@ (8013a1c <vPortExitCritical+0x50>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d10b      	bne.n	80139f2 <vPortExitCritical+0x26>
	__asm volatile
 80139da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139de:	f383 8811 	msr	BASEPRI, r3
 80139e2:	f3bf 8f6f 	isb	sy
 80139e6:	f3bf 8f4f 	dsb	sy
 80139ea:	607b      	str	r3, [r7, #4]
}
 80139ec:	bf00      	nop
 80139ee:	bf00      	nop
 80139f0:	e7fd      	b.n	80139ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80139f2:	4b0a      	ldr	r3, [pc, #40]	@ (8013a1c <vPortExitCritical+0x50>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	3b01      	subs	r3, #1
 80139f8:	4a08      	ldr	r2, [pc, #32]	@ (8013a1c <vPortExitCritical+0x50>)
 80139fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80139fc:	4b07      	ldr	r3, [pc, #28]	@ (8013a1c <vPortExitCritical+0x50>)
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d105      	bne.n	8013a10 <vPortExitCritical+0x44>
 8013a04:	2300      	movs	r3, #0
 8013a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	f383 8811 	msr	BASEPRI, r3
}
 8013a0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013a10:	bf00      	nop
 8013a12:	370c      	adds	r7, #12
 8013a14:	46bd      	mov	sp, r7
 8013a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1a:	4770      	bx	lr
 8013a1c:	24000010 	.word	0x24000010

08013a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013a20:	f3ef 8009 	mrs	r0, PSP
 8013a24:	f3bf 8f6f 	isb	sy
 8013a28:	4b15      	ldr	r3, [pc, #84]	@ (8013a80 <pxCurrentTCBConst>)
 8013a2a:	681a      	ldr	r2, [r3, #0]
 8013a2c:	f01e 0f10 	tst.w	lr, #16
 8013a30:	bf08      	it	eq
 8013a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a3a:	6010      	str	r0, [r2, #0]
 8013a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013a40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8013a44:	f380 8811 	msr	BASEPRI, r0
 8013a48:	f3bf 8f4f 	dsb	sy
 8013a4c:	f3bf 8f6f 	isb	sy
 8013a50:	f7fe fb42 	bl	80120d8 <vTaskSwitchContext>
 8013a54:	f04f 0000 	mov.w	r0, #0
 8013a58:	f380 8811 	msr	BASEPRI, r0
 8013a5c:	bc09      	pop	{r0, r3}
 8013a5e:	6819      	ldr	r1, [r3, #0]
 8013a60:	6808      	ldr	r0, [r1, #0]
 8013a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a66:	f01e 0f10 	tst.w	lr, #16
 8013a6a:	bf08      	it	eq
 8013a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013a70:	f380 8809 	msr	PSP, r0
 8013a74:	f3bf 8f6f 	isb	sy
 8013a78:	4770      	bx	lr
 8013a7a:	bf00      	nop
 8013a7c:	f3af 8000 	nop.w

08013a80 <pxCurrentTCBConst>:
 8013a80:	2400140c 	.word	0x2400140c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013a84:	bf00      	nop
 8013a86:	bf00      	nop

08013a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b082      	sub	sp, #8
 8013a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8013a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a92:	f383 8811 	msr	BASEPRI, r3
 8013a96:	f3bf 8f6f 	isb	sy
 8013a9a:	f3bf 8f4f 	dsb	sy
 8013a9e:	607b      	str	r3, [r7, #4]
}
 8013aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013aa2:	f7fe fa5f 	bl	8011f64 <xTaskIncrementTick>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d003      	beq.n	8013ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013aac:	4b06      	ldr	r3, [pc, #24]	@ (8013ac8 <xPortSysTickHandler+0x40>)
 8013aae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013ab2:	601a      	str	r2, [r3, #0]
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013ab8:	683b      	ldr	r3, [r7, #0]
 8013aba:	f383 8811 	msr	BASEPRI, r3
}
 8013abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013ac0:	bf00      	nop
 8013ac2:	3708      	adds	r7, #8
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	e000ed04 	.word	0xe000ed04

08013acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013acc:	b480      	push	{r7}
 8013ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8013b00 <vPortSetupTimerInterrupt+0x34>)
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8013b04 <vPortSetupTimerInterrupt+0x38>)
 8013ad8:	2200      	movs	r2, #0
 8013ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013adc:	4b0a      	ldr	r3, [pc, #40]	@ (8013b08 <vPortSetupTimerInterrupt+0x3c>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8013b0c <vPortSetupTimerInterrupt+0x40>)
 8013ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8013ae6:	099b      	lsrs	r3, r3, #6
 8013ae8:	4a09      	ldr	r2, [pc, #36]	@ (8013b10 <vPortSetupTimerInterrupt+0x44>)
 8013aea:	3b01      	subs	r3, #1
 8013aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013aee:	4b04      	ldr	r3, [pc, #16]	@ (8013b00 <vPortSetupTimerInterrupt+0x34>)
 8013af0:	2207      	movs	r2, #7
 8013af2:	601a      	str	r2, [r3, #0]
}
 8013af4:	bf00      	nop
 8013af6:	46bd      	mov	sp, r7
 8013af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afc:	4770      	bx	lr
 8013afe:	bf00      	nop
 8013b00:	e000e010 	.word	0xe000e010
 8013b04:	e000e018 	.word	0xe000e018
 8013b08:	24000000 	.word	0x24000000
 8013b0c:	10624dd3 	.word	0x10624dd3
 8013b10:	e000e014 	.word	0xe000e014

08013b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013b14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013b24 <vPortEnableVFP+0x10>
 8013b18:	6801      	ldr	r1, [r0, #0]
 8013b1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8013b1e:	6001      	str	r1, [r0, #0]
 8013b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013b22:	bf00      	nop
 8013b24:	e000ed88 	.word	0xe000ed88

08013b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013b28:	b480      	push	{r7}
 8013b2a:	b085      	sub	sp, #20
 8013b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013b2e:	f3ef 8305 	mrs	r3, IPSR
 8013b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	2b0f      	cmp	r3, #15
 8013b38:	d915      	bls.n	8013b66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013b3a:	4a18      	ldr	r2, [pc, #96]	@ (8013b9c <vPortValidateInterruptPriority+0x74>)
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	4413      	add	r3, r2
 8013b40:	781b      	ldrb	r3, [r3, #0]
 8013b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013b44:	4b16      	ldr	r3, [pc, #88]	@ (8013ba0 <vPortValidateInterruptPriority+0x78>)
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	7afa      	ldrb	r2, [r7, #11]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d20b      	bcs.n	8013b66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8013b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b52:	f383 8811 	msr	BASEPRI, r3
 8013b56:	f3bf 8f6f 	isb	sy
 8013b5a:	f3bf 8f4f 	dsb	sy
 8013b5e:	607b      	str	r3, [r7, #4]
}
 8013b60:	bf00      	nop
 8013b62:	bf00      	nop
 8013b64:	e7fd      	b.n	8013b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013b66:	4b0f      	ldr	r3, [pc, #60]	@ (8013ba4 <vPortValidateInterruptPriority+0x7c>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8013b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8013ba8 <vPortValidateInterruptPriority+0x80>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	429a      	cmp	r2, r3
 8013b74:	d90b      	bls.n	8013b8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8013b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013b7a:	f383 8811 	msr	BASEPRI, r3
 8013b7e:	f3bf 8f6f 	isb	sy
 8013b82:	f3bf 8f4f 	dsb	sy
 8013b86:	603b      	str	r3, [r7, #0]
}
 8013b88:	bf00      	nop
 8013b8a:	bf00      	nop
 8013b8c:	e7fd      	b.n	8013b8a <vPortValidateInterruptPriority+0x62>
	}
 8013b8e:	bf00      	nop
 8013b90:	3714      	adds	r7, #20
 8013b92:	46bd      	mov	sp, r7
 8013b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b98:	4770      	bx	lr
 8013b9a:	bf00      	nop
 8013b9c:	e000e3f0 	.word	0xe000e3f0
 8013ba0:	24001a38 	.word	0x24001a38
 8013ba4:	e000ed0c 	.word	0xe000ed0c
 8013ba8:	24001a3c 	.word	0x24001a3c

08013bac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b08a      	sub	sp, #40	@ 0x28
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013bb8:	f7fe f906 	bl	8011dc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013bbc:	4b5c      	ldr	r3, [pc, #368]	@ (8013d30 <pvPortMalloc+0x184>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d101      	bne.n	8013bc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013bc4:	f000 f924 	bl	8013e10 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013bc8:	4b5a      	ldr	r3, [pc, #360]	@ (8013d34 <pvPortMalloc+0x188>)
 8013bca:	681a      	ldr	r2, [r3, #0]
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	4013      	ands	r3, r2
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	f040 8095 	bne.w	8013d00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d01e      	beq.n	8013c1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8013bdc:	2208      	movs	r2, #8
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	4413      	add	r3, r2
 8013be2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f003 0307 	and.w	r3, r3, #7
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d015      	beq.n	8013c1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	f023 0307 	bic.w	r3, r3, #7
 8013bf4:	3308      	adds	r3, #8
 8013bf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f003 0307 	and.w	r3, r3, #7
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d00b      	beq.n	8013c1a <pvPortMalloc+0x6e>
	__asm volatile
 8013c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c06:	f383 8811 	msr	BASEPRI, r3
 8013c0a:	f3bf 8f6f 	isb	sy
 8013c0e:	f3bf 8f4f 	dsb	sy
 8013c12:	617b      	str	r3, [r7, #20]
}
 8013c14:	bf00      	nop
 8013c16:	bf00      	nop
 8013c18:	e7fd      	b.n	8013c16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d06f      	beq.n	8013d00 <pvPortMalloc+0x154>
 8013c20:	4b45      	ldr	r3, [pc, #276]	@ (8013d38 <pvPortMalloc+0x18c>)
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	687a      	ldr	r2, [r7, #4]
 8013c26:	429a      	cmp	r2, r3
 8013c28:	d86a      	bhi.n	8013d00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013c2a:	4b44      	ldr	r3, [pc, #272]	@ (8013d3c <pvPortMalloc+0x190>)
 8013c2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013c2e:	4b43      	ldr	r3, [pc, #268]	@ (8013d3c <pvPortMalloc+0x190>)
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013c34:	e004      	b.n	8013c40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c42:	685b      	ldr	r3, [r3, #4]
 8013c44:	687a      	ldr	r2, [r7, #4]
 8013c46:	429a      	cmp	r2, r3
 8013c48:	d903      	bls.n	8013c52 <pvPortMalloc+0xa6>
 8013c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d1f1      	bne.n	8013c36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013c52:	4b37      	ldr	r3, [pc, #220]	@ (8013d30 <pvPortMalloc+0x184>)
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d051      	beq.n	8013d00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013c5c:	6a3b      	ldr	r3, [r7, #32]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	2208      	movs	r2, #8
 8013c62:	4413      	add	r3, r2
 8013c64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c68:	681a      	ldr	r2, [r3, #0]
 8013c6a:	6a3b      	ldr	r3, [r7, #32]
 8013c6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c70:	685a      	ldr	r2, [r3, #4]
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	1ad2      	subs	r2, r2, r3
 8013c76:	2308      	movs	r3, #8
 8013c78:	005b      	lsls	r3, r3, #1
 8013c7a:	429a      	cmp	r2, r3
 8013c7c:	d920      	bls.n	8013cc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	4413      	add	r3, r2
 8013c84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013c86:	69bb      	ldr	r3, [r7, #24]
 8013c88:	f003 0307 	and.w	r3, r3, #7
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d00b      	beq.n	8013ca8 <pvPortMalloc+0xfc>
	__asm volatile
 8013c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c94:	f383 8811 	msr	BASEPRI, r3
 8013c98:	f3bf 8f6f 	isb	sy
 8013c9c:	f3bf 8f4f 	dsb	sy
 8013ca0:	613b      	str	r3, [r7, #16]
}
 8013ca2:	bf00      	nop
 8013ca4:	bf00      	nop
 8013ca6:	e7fd      	b.n	8013ca4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013caa:	685a      	ldr	r2, [r3, #4]
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	1ad2      	subs	r2, r2, r3
 8013cb0:	69bb      	ldr	r3, [r7, #24]
 8013cb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cb6:	687a      	ldr	r2, [r7, #4]
 8013cb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013cba:	69b8      	ldr	r0, [r7, #24]
 8013cbc:	f000 f90c 	bl	8013ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8013d38 <pvPortMalloc+0x18c>)
 8013cc2:	681a      	ldr	r2, [r3, #0]
 8013cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cc6:	685b      	ldr	r3, [r3, #4]
 8013cc8:	1ad3      	subs	r3, r2, r3
 8013cca:	4a1b      	ldr	r2, [pc, #108]	@ (8013d38 <pvPortMalloc+0x18c>)
 8013ccc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013cce:	4b1a      	ldr	r3, [pc, #104]	@ (8013d38 <pvPortMalloc+0x18c>)
 8013cd0:	681a      	ldr	r2, [r3, #0]
 8013cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8013d40 <pvPortMalloc+0x194>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d203      	bcs.n	8013ce2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013cda:	4b17      	ldr	r3, [pc, #92]	@ (8013d38 <pvPortMalloc+0x18c>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	4a18      	ldr	r2, [pc, #96]	@ (8013d40 <pvPortMalloc+0x194>)
 8013ce0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ce4:	685a      	ldr	r2, [r3, #4]
 8013ce6:	4b13      	ldr	r3, [pc, #76]	@ (8013d34 <pvPortMalloc+0x188>)
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	431a      	orrs	r2, r3
 8013cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013cf6:	4b13      	ldr	r3, [pc, #76]	@ (8013d44 <pvPortMalloc+0x198>)
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	3301      	adds	r3, #1
 8013cfc:	4a11      	ldr	r2, [pc, #68]	@ (8013d44 <pvPortMalloc+0x198>)
 8013cfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013d00:	f7fe f870 	bl	8011de4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013d04:	69fb      	ldr	r3, [r7, #28]
 8013d06:	f003 0307 	and.w	r3, r3, #7
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d00b      	beq.n	8013d26 <pvPortMalloc+0x17a>
	__asm volatile
 8013d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d12:	f383 8811 	msr	BASEPRI, r3
 8013d16:	f3bf 8f6f 	isb	sy
 8013d1a:	f3bf 8f4f 	dsb	sy
 8013d1e:	60fb      	str	r3, [r7, #12]
}
 8013d20:	bf00      	nop
 8013d22:	bf00      	nop
 8013d24:	e7fd      	b.n	8013d22 <pvPortMalloc+0x176>
	return pvReturn;
 8013d26:	69fb      	ldr	r3, [r7, #28]
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3728      	adds	r7, #40	@ 0x28
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}
 8013d30:	240152c8 	.word	0x240152c8
 8013d34:	240152dc 	.word	0x240152dc
 8013d38:	240152cc 	.word	0x240152cc
 8013d3c:	240152c0 	.word	0x240152c0
 8013d40:	240152d0 	.word	0x240152d0
 8013d44:	240152d4 	.word	0x240152d4

08013d48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b086      	sub	sp, #24
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d04f      	beq.n	8013dfa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013d5a:	2308      	movs	r3, #8
 8013d5c:	425b      	negs	r3, r3
 8013d5e:	697a      	ldr	r2, [r7, #20]
 8013d60:	4413      	add	r3, r2
 8013d62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	685a      	ldr	r2, [r3, #4]
 8013d6c:	4b25      	ldr	r3, [pc, #148]	@ (8013e04 <vPortFree+0xbc>)
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	4013      	ands	r3, r2
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d10b      	bne.n	8013d8e <vPortFree+0x46>
	__asm volatile
 8013d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d7a:	f383 8811 	msr	BASEPRI, r3
 8013d7e:	f3bf 8f6f 	isb	sy
 8013d82:	f3bf 8f4f 	dsb	sy
 8013d86:	60fb      	str	r3, [r7, #12]
}
 8013d88:	bf00      	nop
 8013d8a:	bf00      	nop
 8013d8c:	e7fd      	b.n	8013d8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013d8e:	693b      	ldr	r3, [r7, #16]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d00b      	beq.n	8013dae <vPortFree+0x66>
	__asm volatile
 8013d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d9a:	f383 8811 	msr	BASEPRI, r3
 8013d9e:	f3bf 8f6f 	isb	sy
 8013da2:	f3bf 8f4f 	dsb	sy
 8013da6:	60bb      	str	r3, [r7, #8]
}
 8013da8:	bf00      	nop
 8013daa:	bf00      	nop
 8013dac:	e7fd      	b.n	8013daa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013dae:	693b      	ldr	r3, [r7, #16]
 8013db0:	685a      	ldr	r2, [r3, #4]
 8013db2:	4b14      	ldr	r3, [pc, #80]	@ (8013e04 <vPortFree+0xbc>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	4013      	ands	r3, r2
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d01e      	beq.n	8013dfa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013dbc:	693b      	ldr	r3, [r7, #16]
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d11a      	bne.n	8013dfa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013dc4:	693b      	ldr	r3, [r7, #16]
 8013dc6:	685a      	ldr	r2, [r3, #4]
 8013dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8013e04 <vPortFree+0xbc>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	43db      	mvns	r3, r3
 8013dce:	401a      	ands	r2, r3
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013dd4:	f7fd fff8 	bl	8011dc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013dd8:	693b      	ldr	r3, [r7, #16]
 8013dda:	685a      	ldr	r2, [r3, #4]
 8013ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8013e08 <vPortFree+0xc0>)
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	4413      	add	r3, r2
 8013de2:	4a09      	ldr	r2, [pc, #36]	@ (8013e08 <vPortFree+0xc0>)
 8013de4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013de6:	6938      	ldr	r0, [r7, #16]
 8013de8:	f000 f876 	bl	8013ed8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013dec:	4b07      	ldr	r3, [pc, #28]	@ (8013e0c <vPortFree+0xc4>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	3301      	adds	r3, #1
 8013df2:	4a06      	ldr	r2, [pc, #24]	@ (8013e0c <vPortFree+0xc4>)
 8013df4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013df6:	f7fd fff5 	bl	8011de4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013dfa:	bf00      	nop
 8013dfc:	3718      	adds	r7, #24
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	240152dc 	.word	0x240152dc
 8013e08:	240152cc 	.word	0x240152cc
 8013e0c:	240152d8 	.word	0x240152d8

08013e10 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013e10:	b480      	push	{r7}
 8013e12:	b085      	sub	sp, #20
 8013e14:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013e16:	4b29      	ldr	r3, [pc, #164]	@ (8013ebc <prvHeapInit+0xac>)
 8013e18:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013e1a:	4b29      	ldr	r3, [pc, #164]	@ (8013ec0 <prvHeapInit+0xb0>)
 8013e1c:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	f003 0307 	and.w	r3, r3, #7
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d00c      	beq.n	8013e42 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	3307      	adds	r3, #7
 8013e2c:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	f023 0307 	bic.w	r3, r3, #7
 8013e34:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013e36:	68ba      	ldr	r2, [r7, #8]
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	1ad3      	subs	r3, r2, r3
 8013e3c:	4a20      	ldr	r2, [pc, #128]	@ (8013ec0 <prvHeapInit+0xb0>)
 8013e3e:	4413      	add	r3, r2
 8013e40:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013e46:	4a1f      	ldr	r2, [pc, #124]	@ (8013ec4 <prvHeapInit+0xb4>)
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013e4c:	4b1d      	ldr	r3, [pc, #116]	@ (8013ec4 <prvHeapInit+0xb4>)
 8013e4e:	2200      	movs	r2, #0
 8013e50:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	68ba      	ldr	r2, [r7, #8]
 8013e56:	4413      	add	r3, r2
 8013e58:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013e5a:	2208      	movs	r2, #8
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	1a9b      	subs	r3, r3, r2
 8013e60:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	f023 0307 	bic.w	r3, r3, #7
 8013e68:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	4a16      	ldr	r2, [pc, #88]	@ (8013ec8 <prvHeapInit+0xb8>)
 8013e6e:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013e70:	4b15      	ldr	r3, [pc, #84]	@ (8013ec8 <prvHeapInit+0xb8>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	2200      	movs	r2, #0
 8013e76:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013e78:	4b13      	ldr	r3, [pc, #76]	@ (8013ec8 <prvHeapInit+0xb8>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	68fa      	ldr	r2, [r7, #12]
 8013e88:	1ad2      	subs	r2, r2, r3
 8013e8a:	683b      	ldr	r3, [r7, #0]
 8013e8c:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8013ec8 <prvHeapInit+0xb8>)
 8013e90:	681a      	ldr	r2, [r3, #0]
 8013e92:	683b      	ldr	r3, [r7, #0]
 8013e94:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013e96:	683b      	ldr	r3, [r7, #0]
 8013e98:	685b      	ldr	r3, [r3, #4]
 8013e9a:	4a0c      	ldr	r2, [pc, #48]	@ (8013ecc <prvHeapInit+0xbc>)
 8013e9c:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013e9e:	683b      	ldr	r3, [r7, #0]
 8013ea0:	685b      	ldr	r3, [r3, #4]
 8013ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8013ed0 <prvHeapInit+0xc0>)
 8013ea4:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8013ed4 <prvHeapInit+0xc4>)
 8013ea8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8013eac:	601a      	str	r2, [r3, #0]
}
 8013eae:	bf00      	nop
 8013eb0:	3714      	adds	r7, #20
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb8:	4770      	bx	lr
 8013eba:	bf00      	nop
 8013ebc:	00013880 	.word	0x00013880
 8013ec0:	24001a40 	.word	0x24001a40
 8013ec4:	240152c0 	.word	0x240152c0
 8013ec8:	240152c8 	.word	0x240152c8
 8013ecc:	240152d0 	.word	0x240152d0
 8013ed0:	240152cc 	.word	0x240152cc
 8013ed4:	240152dc 	.word	0x240152dc

08013ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013ed8:	b480      	push	{r7}
 8013eda:	b085      	sub	sp, #20
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013ee0:	4b28      	ldr	r3, [pc, #160]	@ (8013f84 <prvInsertBlockIntoFreeList+0xac>)
 8013ee2:	60fb      	str	r3, [r7, #12]
 8013ee4:	e002      	b.n	8013eec <prvInsertBlockIntoFreeList+0x14>
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	60fb      	str	r3, [r7, #12]
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	687a      	ldr	r2, [r7, #4]
 8013ef2:	429a      	cmp	r2, r3
 8013ef4:	d8f7      	bhi.n	8013ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	685b      	ldr	r3, [r3, #4]
 8013efe:	68ba      	ldr	r2, [r7, #8]
 8013f00:	4413      	add	r3, r2
 8013f02:	687a      	ldr	r2, [r7, #4]
 8013f04:	429a      	cmp	r2, r3
 8013f06:	d108      	bne.n	8013f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	685a      	ldr	r2, [r3, #4]
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	685b      	ldr	r3, [r3, #4]
 8013f10:	441a      	add	r2, r3
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	685b      	ldr	r3, [r3, #4]
 8013f22:	68ba      	ldr	r2, [r7, #8]
 8013f24:	441a      	add	r2, r3
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	429a      	cmp	r2, r3
 8013f2c:	d118      	bne.n	8013f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	681a      	ldr	r2, [r3, #0]
 8013f32:	4b15      	ldr	r3, [pc, #84]	@ (8013f88 <prvInsertBlockIntoFreeList+0xb0>)
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	429a      	cmp	r2, r3
 8013f38:	d00d      	beq.n	8013f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	685a      	ldr	r2, [r3, #4]
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	685b      	ldr	r3, [r3, #4]
 8013f44:	441a      	add	r2, r3
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	681a      	ldr	r2, [r3, #0]
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	601a      	str	r2, [r3, #0]
 8013f54:	e008      	b.n	8013f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013f56:	4b0c      	ldr	r3, [pc, #48]	@ (8013f88 <prvInsertBlockIntoFreeList+0xb0>)
 8013f58:	681a      	ldr	r2, [r3, #0]
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	601a      	str	r2, [r3, #0]
 8013f5e:	e003      	b.n	8013f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	681a      	ldr	r2, [r3, #0]
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013f68:	68fa      	ldr	r2, [r7, #12]
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	d002      	beq.n	8013f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	687a      	ldr	r2, [r7, #4]
 8013f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013f76:	bf00      	nop
 8013f78:	3714      	adds	r7, #20
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f80:	4770      	bx	lr
 8013f82:	bf00      	nop
 8013f84:	240152c0 	.word	0x240152c0
 8013f88:	240152c8 	.word	0x240152c8

08013f8c <_ZN8CallbackC1Ev>:
#include "stdint.h"
#include "core_utils_functionpointer.h"

class Callback {
public:
	Callback(){
 8013f8c:	b480      	push	{r7}
 8013f8e:	b083      	sub	sp, #12
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	6078      	str	r0, [r7, #4]
 8013f94:	4a04      	ldr	r2, [pc, #16]	@ (8013fa8 <_ZN8CallbackC1Ev+0x1c>)
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	601a      	str	r2, [r3, #0]

	}
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	370c      	adds	r7, #12
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa6:	4770      	bx	lr
 8013fa8:	080233d4 	.word	0x080233d4

08013fac <_ZN8Callback4callEv>:

	virtual void call(){
 8013fac:	b480      	push	{r7}
 8013fae:	b083      	sub	sp, #12
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]

	}
 8013fb4:	bf00      	nop
 8013fb6:	370c      	adds	r7, #12
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fbe:	4770      	bx	lr

08013fc0 <_ZN8Callback4callEPv>:

	virtual void call(void* argument){
 8013fc0:	b480      	push	{r7}
 8013fc2:	b083      	sub	sp, #12
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
 8013fc8:	6039      	str	r1, [r7, #0]

	}
 8013fca:	bf00      	nop
 8013fcc:	370c      	adds	r7, #12
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fd4:	4770      	bx	lr

08013fd6 <_ZN8CallbackaSERKS_>:
class Callback {
 8013fd6:	b480      	push	{r7}
 8013fd8:	b083      	sub	sp, #12
 8013fda:	af00      	add	r7, sp, #0
 8013fdc:	6078      	str	r0, [r7, #4]
 8013fde:	6039      	str	r1, [r7, #0]
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	370c      	adds	r7, #12
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fec:	4770      	bx	lr

08013fee <_ZN26twipr_spi_comm_callbacks_tC1Ev>:

typedef enum twipr_spi_comm_callback_id_t {
	TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX, TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
} twipr_spi_comm_callback_id_t;

typedef struct twipr_spi_comm_callbacks_t {
 8013fee:	b580      	push	{r7, lr}
 8013ff0:	b082      	sub	sp, #8
 8013ff2:	af00      	add	r7, sp, #0
 8013ff4:	6078      	str	r0, [r7, #4]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f000 f96d 	bl	80142d8 <_ZN19core_utils_CallbackIvtEC1Ev>
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	3320      	adds	r3, #32
 8014002:	4618      	mov	r0, r3
 8014004:	f000 f968 	bl	80142d8 <_ZN19core_utils_CallbackIvtEC1Ev>
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	4618      	mov	r0, r3
 801400c:	3708      	adds	r7, #8
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}

08014012 <_ZN23TWIPR_SPI_CommunicationC1Ev>:

#include "twipr_spi_communication.h"
//
//static uint8_t tx_cmd_buf[4] = { 0x55, 0x00, 0x00, 10};

TWIPR_SPI_Communication::TWIPR_SPI_Communication() {
 8014012:	b580      	push	{r7, lr}
 8014014:	b082      	sub	sp, #8
 8014016:	af00      	add	r7, sp, #0
 8014018:	6078      	str	r0, [r7, #4]
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2200      	movs	r2, #0
 801401e:	751a      	strb	r2, [r3, #20]
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	331c      	adds	r3, #28
 8014024:	4618      	mov	r0, r3
 8014026:	f00a fb22 	bl	801e66e <_ZN23core_hardware_SPI_slaveC1Ev>
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	3388      	adds	r3, #136	@ 0x88
 801402e:	4618      	mov	r0, r3
 8014030:	f7ff ffdd 	bl	8013fee <_ZN26twipr_spi_comm_callbacks_tC1Ev>

}
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	4618      	mov	r0, r3
 8014038:	3708      	adds	r7, #8
 801403a:	46bd      	mov	sp, r7
 801403c:	bd80      	pop	{r7, pc}
	...

08014040 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t>:

/* =============================================================== */
void TWIPR_SPI_Communication::init(twipr_spi_comm_config_t config) {
 8014040:	b084      	sub	sp, #16
 8014042:	b5b0      	push	{r4, r5, r7, lr}
 8014044:	b09a      	sub	sp, #104	@ 0x68
 8014046:	af00      	add	r7, sp, #0
 8014048:	6078      	str	r0, [r7, #4]
 801404a:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 801404e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	461d      	mov	r5, r3
 8014056:	f107 047c 	add.w	r4, r7, #124	@ 0x7c
 801405a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801405c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801405e:	6823      	ldr	r3, [r4, #0]
 8014060:	602b      	str	r3, [r5, #0]

	core_hardware_spi_config_t spi_config = { .hspi = this->config.hspi,
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	681b      	ldr	r3, [r3, #0]
			.rx_buffer = (uint8_t*) this->config.trajectory_buffer, .tx_buffer =
					(uint8_t*) this->config.sample_buffer, };
 8014066:	60bb      	str	r3, [r7, #8]
			.rx_buffer = (uint8_t*) this->config.trajectory_buffer, .tx_buffer =
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	68db      	ldr	r3, [r3, #12]
					(uint8_t*) this->config.sample_buffer, };
 801406c:	60fb      	str	r3, [r7, #12]
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	685b      	ldr	r3, [r3, #4]
 8014072:	613b      	str	r3, [r7, #16]

	this->spi_slave.init(spi_config);
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f103 001c 	add.w	r0, r3, #28
 801407a:	f107 0308 	add.w	r3, r7, #8
 801407e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8014080:	f00a fb04 	bl	801e68c <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_RX,
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f103 041c 	add.w	r4, r3, #28
			core_utils_Callback<void, void>(this,
 801408a:	4b1b      	ldr	r3, [pc, #108]	@ (80140f8 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t+0xb8>)
 801408c:	637b      	str	r3, [r7, #52]	@ 0x34
 801408e:	2300      	movs	r3, #0
 8014090:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014092:	f107 0014 	add.w	r0, r7, #20
 8014096:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801409a:	cb0c      	ldmia	r3, {r2, r3}
 801409c:	6879      	ldr	r1, [r7, #4]
 801409e:	f000 f939 	bl	8014314 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_RX,
 80140a2:	f107 0314 	add.w	r3, r7, #20
 80140a6:	461a      	mov	r2, r3
 80140a8:	2100      	movs	r1, #0
 80140aa:	4620      	mov	r0, r4
 80140ac:	f00a fb5a 	bl	801e764 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>
					&TWIPR_SPI_Communication::rx_cmplt_function));

	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_TX,
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f103 041c 	add.w	r4, r3, #28
			core_utils_Callback<void, void>(this,
 80140b6:	4b11      	ldr	r3, [pc, #68]	@ (80140fc <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t+0xbc>)
 80140b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80140ba:	2300      	movs	r3, #0
 80140bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80140be:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80140c2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80140c6:	cb0c      	ldmia	r3, {r2, r3}
 80140c8:	6879      	ldr	r1, [r7, #4]
 80140ca:	f000 f923 	bl	8014314 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_TX,
 80140ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80140d2:	461a      	mov	r2, r3
 80140d4:	2101      	movs	r1, #1
 80140d6:	4620      	mov	r0, r4
 80140d8:	f00a fb44 	bl	801e764 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>

//	this->spi_slave.registerCallback(CORE_HARDWARE_SPI_CALLBACK_RXTX,
//			core_utils_Callback<void, void>(this,
//					&TWIPR_SPI_Communication::rxtx_cmplt_function));

	uint8_t trajectory_size = sizeof(twipr_control_trajectory_input_t);
 80140dc:	230c      	movs	r3, #12
 80140de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint8_t sample_size = sizeof(twipr_logging_sample_t);
 80140e2:	235c      	movs	r3, #92	@ 0x5c
 80140e4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66

//	tx_cmd_buf[1] = trajectory_size;
//	tx_cmd_buf[2] =	sample_size;

}
 80140e8:	bf00      	nop
 80140ea:	3768      	adds	r7, #104	@ 0x68
 80140ec:	46bd      	mov	sp, r7
 80140ee:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80140f2:	b004      	add	sp, #16
 80140f4:	4770      	bx	lr
 80140f6:	bf00      	nop
 80140f8:	08014247 	.word	0x08014247
 80140fc:	08014273 	.word	0x08014273

08014100 <_ZN23TWIPR_SPI_Communication5startEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::start() {
 8014100:	b580      	push	{r7, lr}
 8014102:	b082      	sub	sp, #8
 8014104:	af00      	add	r7, sp, #0
 8014106:	6078      	str	r0, [r7, #4]
	this->spi_slave.start();
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	331c      	adds	r3, #28
 801410c:	4618      	mov	r0, r3
 801410e:	f00a fafb 	bl	801e708 <_ZN23core_hardware_SPI_slave5startEv>
	this->provideSampleData();
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f000 f852 	bl	80141bc <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 8014118:	bf00      	nop
 801411a:	3708      	adds	r7, #8
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}

08014120 <_ZN19core_utils_CallbackIvtEaSERKS0_>:
private:

};

template<typename R, typename A>
class core_utils_Callback: public Callback {
 8014120:	b5b0      	push	{r4, r5, r7, lr}
 8014122:	b082      	sub	sp, #8
 8014124:	af00      	add	r7, sp, #0
 8014126:	6078      	str	r0, [r7, #4]
 8014128:	6039      	str	r1, [r7, #0]
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	683a      	ldr	r2, [r7, #0]
 801412e:	4611      	mov	r1, r2
 8014130:	4618      	mov	r0, r3
 8014132:	f7ff ff50 	bl	8013fd6 <_ZN8CallbackaSERKS_>
 8014136:	683b      	ldr	r3, [r7, #0]
 8014138:	791a      	ldrb	r2, [r3, #4]
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	711a      	strb	r2, [r3, #4]
 801413e:	687a      	ldr	r2, [r7, #4]
 8014140:	683b      	ldr	r3, [r7, #0]
 8014142:	f102 0408 	add.w	r4, r2, #8
 8014146:	f103 0508 	add.w	r5, r3, #8
 801414a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801414c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801414e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014152:	e884 0003 	stmia.w	r4, {r0, r1}
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	4618      	mov	r0, r3
 801415a:	3708      	adds	r7, #8
 801415c:	46bd      	mov	sp, r7
 801415e:	bdb0      	pop	{r4, r5, r7, pc}

08014160 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>:
/* =============================================================== */
void TWIPR_SPI_Communication::registerCallback(
		twipr_spi_comm_callback_id_t callback_id,
		core_utils_Callback<void, uint16_t> callback) {
 8014160:	b580      	push	{r7, lr}
 8014162:	b084      	sub	sp, #16
 8014164:	af00      	add	r7, sp, #0
 8014166:	60f8      	str	r0, [r7, #12]
 8014168:	460b      	mov	r3, r1
 801416a:	607a      	str	r2, [r7, #4]
 801416c:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 801416e:	7afb      	ldrb	r3, [r7, #11]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d008      	beq.n	8014186 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x26>
 8014174:	2b01      	cmp	r3, #1
 8014176:	d10d      	bne.n	8014194 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x34>
	case TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX: {
		this->callbacks.sample_tx_callback = callback;
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	33a8      	adds	r3, #168	@ 0xa8
 801417c:	6879      	ldr	r1, [r7, #4]
 801417e:	4618      	mov	r0, r3
 8014180:	f7ff ffce 	bl	8014120 <_ZN19core_utils_CallbackIvtEaSERKS0_>
		break;
 8014184:	e006      	b.n	8014194 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE+0x34>
	}
	case TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX: {
		this->callbacks.trajectory_rx_callback = callback;
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	3388      	adds	r3, #136	@ 0x88
 801418a:	6879      	ldr	r1, [r7, #4]
 801418c:	4618      	mov	r0, r3
 801418e:	f7ff ffc7 	bl	8014120 <_ZN19core_utils_CallbackIvtEaSERKS0_>
		break;
 8014192:	bf00      	nop
	}
	}
}
 8014194:	bf00      	nop
 8014196:	3710      	adds	r7, #16
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}

0801419c <_ZN23TWIPR_SPI_Communication17receiveTrajectoryEv>:
//	TWIPR_SPI_COMMAND_MESSAGE_LENGTH);
//}


/* =============================================================== */
void TWIPR_SPI_Communication::receiveTrajectory(){
 801419c:	b580      	push	{r7, lr}
 801419e:	b082      	sub	sp, #8
 80141a0:	af00      	add	r7, sp, #0
 80141a2:	6078      	str	r0, [r7, #4]
	this->receiveTrajectory(this->config.trajectory_buffer, this->config.len_trajectory_buffer);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	68d9      	ldr	r1, [r3, #12]
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	8a1b      	ldrh	r3, [r3, #16]
 80141ac:	461a      	mov	r2, r3
 80141ae:	6878      	ldr	r0, [r7, #4]
 80141b0:	f000 f814 	bl	80141dc <_ZN23TWIPR_SPI_Communication17receiveTrajectoryEP32twipr_control_trajectory_input_tt>
}
 80141b4:	bf00      	nop
 80141b6:	3708      	adds	r7, #8
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}

080141bc <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::provideSampleData(){
 80141bc:	b580      	push	{r7, lr}
 80141be:	b082      	sub	sp, #8
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
	this->provideSampleData(this->config.sample_buffer, this->config.len_sample_buffer);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	6859      	ldr	r1, [r3, #4]
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	891b      	ldrh	r3, [r3, #8]
 80141cc:	461a      	mov	r2, r3
 80141ce:	6878      	ldr	r0, [r7, #4]
 80141d0:	f000 f81c 	bl	801420c <_ZN23TWIPR_SPI_Communication17provideSampleDataEP22twipr_logging_sample_tt>
}
 80141d4:	bf00      	nop
 80141d6:	3708      	adds	r7, #8
 80141d8:	46bd      	mov	sp, r7
 80141da:	bd80      	pop	{r7, pc}

080141dc <_ZN23TWIPR_SPI_Communication17receiveTrajectoryEP32twipr_control_trajectory_input_tt>:

/* =============================================================== */
void TWIPR_SPI_Communication::receiveTrajectory(
		twipr_control_trajectory_input_t *trajectory_buffer, uint16_t len) {
 80141dc:	b580      	push	{r7, lr}
 80141de:	b084      	sub	sp, #16
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	60f8      	str	r0, [r7, #12]
 80141e4:	60b9      	str	r1, [r7, #8]
 80141e6:	4613      	mov	r3, r2
 80141e8:	80fb      	strh	r3, [r7, #6]
	this->spi_slave.receiveData((uint8_t*) trajectory_buffer,  sizeof(twipr_control_trajectory_input_t) * len);
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	f103 001c 	add.w	r0, r3, #28
 80141f0:	88fb      	ldrh	r3, [r7, #6]
 80141f2:	461a      	mov	r2, r3
 80141f4:	0052      	lsls	r2, r2, #1
 80141f6:	4413      	add	r3, r2
 80141f8:	009b      	lsls	r3, r3, #2
 80141fa:	b29b      	uxth	r3, r3
 80141fc:	461a      	mov	r2, r3
 80141fe:	68b9      	ldr	r1, [r7, #8]
 8014200:	f00a fa8c 	bl	801e71c <_ZN23core_hardware_SPI_slave11receiveDataEPht>
}
 8014204:	bf00      	nop
 8014206:	3710      	adds	r7, #16
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}

0801420c <_ZN23TWIPR_SPI_Communication17provideSampleDataEP22twipr_logging_sample_tt>:

/* =============================================================== */
void TWIPR_SPI_Communication::provideSampleData(
		twipr_logging_sample_t *sample_buffer, uint16_t len) {
 801420c:	b580      	push	{r7, lr}
 801420e:	b084      	sub	sp, #16
 8014210:	af00      	add	r7, sp, #0
 8014212:	60f8      	str	r0, [r7, #12]
 8014214:	60b9      	str	r1, [r7, #8]
 8014216:	4613      	mov	r3, r2
 8014218:	80fb      	strh	r3, [r7, #6]

	this->mode = TWIPR_SPI_COMM_MODE_TX;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	2202      	movs	r2, #2
 801421e:	751a      	strb	r2, [r3, #20]
	this->spi_slave.provideData((uint8_t*) sample_buffer, sizeof(twipr_logging_sample_t) * len);
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	f103 001c 	add.w	r0, r3, #28
 8014226:	88fb      	ldrh	r3, [r7, #6]
 8014228:	461a      	mov	r2, r3
 801422a:	0052      	lsls	r2, r2, #1
 801422c:	441a      	add	r2, r3
 801422e:	00d2      	lsls	r2, r2, #3
 8014230:	1ad3      	subs	r3, r2, r3
 8014232:	009b      	lsls	r3, r3, #2
 8014234:	b29b      	uxth	r3, r3
 8014236:	461a      	mov	r2, r3
 8014238:	68b9      	ldr	r1, [r7, #8]
 801423a:	f00a fa81 	bl	801e740 <_ZN23core_hardware_SPI_slave11provideDataEPht>
}
 801423e:	bf00      	nop
 8014240:	3710      	adds	r7, #16
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}

08014246 <_ZN23TWIPR_SPI_Communication17rx_cmplt_functionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::rx_cmplt_function() {
 8014246:	b580      	push	{r7, lr}
 8014248:	b082      	sub	sp, #8
 801424a:	af00      	add	r7, sp, #0
 801424c:	6078      	str	r0, [r7, #4]
	if (this->callbacks.trajectory_rx_callback.registered) {
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 8014254:	2b00      	cmp	r3, #0
 8014256:	d008      	beq.n	801426a <_ZN23TWIPR_SPI_Communication17rx_cmplt_functionEv+0x24>
		this->callbacks.trajectory_rx_callback.call(this->config.len_trajectory_buffer);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	f103 0288 	add.w	r2, r3, #136	@ 0x88
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	8a1b      	ldrh	r3, [r3, #16]
 8014262:	4619      	mov	r1, r3
 8014264:	4610      	mov	r0, r2
 8014266:	f000 f889 	bl	801437c <_ZN19core_utils_CallbackIvtE4callEt>
	}
}
 801426a:	bf00      	nop
 801426c:	3708      	adds	r7, #8
 801426e:	46bd      	mov	sp, r7
 8014270:	bd80      	pop	{r7, pc}

08014272 <_ZN23TWIPR_SPI_Communication17tx_cmplt_functionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::tx_cmplt_function() {
 8014272:	b580      	push	{r7, lr}
 8014274:	b082      	sub	sp, #8
 8014276:	af00      	add	r7, sp, #0
 8014278:	6078      	str	r0, [r7, #4]

	// Execute the TX Callback, if registered
	if (this->callbacks.sample_tx_callback.registered) {
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 8014280:	2b00      	cmp	r3, #0
 8014282:	d008      	beq.n	8014296 <_ZN23TWIPR_SPI_Communication17tx_cmplt_functionEv+0x24>
		this->callbacks.sample_tx_callback.call(this->_len);
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	f103 02a8 	add.w	r2, r3, #168	@ 0xa8
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	8b5b      	ldrh	r3, [r3, #26]
 801428e:	4619      	mov	r1, r3
 8014290:	4610      	mov	r0, r2
 8014292:	f000 f873 	bl	801437c <_ZN19core_utils_CallbackIvtE4callEt>
	}
	this->provideSampleData();
 8014296:	6878      	ldr	r0, [r7, #4]
 8014298:	f7ff ff90 	bl	80141bc <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 801429c:	bf00      	nop
 801429e:	3708      	adds	r7, #8
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}

080142a4 <_ZN23TWIPR_SPI_Communication16stopTransmissionEv>:
/* =============================================================== */
void TWIPR_SPI_Communication::stopTransmission(){
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b082      	sub	sp, #8
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
	HAL_SPI_Abort(this->config.hspi);
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	681b      	ldr	r3, [r3, #0]
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7f6 fbdd 	bl	800aa70 <HAL_SPI_Abort>
}
 80142b6:	bf00      	nop
 80142b8:	3708      	adds	r7, #8
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}

080142be <_ZN19core_utils_CallbackIvvE4callEv>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
		_fp = core_utils_FunctionPointer<R,void>(object, member);
		this->registered = 1;
	}

	R call() {
 80142be:	b580      	push	{r7, lr}
 80142c0:	b082      	sub	sp, #8
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
		return this->_fp();
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	3308      	adds	r3, #8
 80142ca:	4618      	mov	r0, r3
 80142cc:	f000 f875 	bl	80143ba <_ZN26core_utils_FunctionPointerIvvEclEv>
 80142d0:	bf00      	nop
	}
 80142d2:	3708      	adds	r7, #8
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd80      	pop	{r7, pc}

080142d8 <_ZN19core_utils_CallbackIvtEC1Ev>:
	core_utils_Callback() {
 80142d8:	b580      	push	{r7, lr}
 80142da:	b082      	sub	sp, #8
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	4618      	mov	r0, r3
 80142e4:	f7ff fe52 	bl	8013f8c <_ZN8CallbackC1Ev>
 80142e8:	4a09      	ldr	r2, [pc, #36]	@ (8014310 <_ZN19core_utils_CallbackIvtEC1Ev+0x38>)
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	601a      	str	r2, [r3, #0]
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	2200      	movs	r2, #0
 80142f2:	711a      	strb	r2, [r3, #4]
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	3308      	adds	r3, #8
 80142f8:	2100      	movs	r1, #0
 80142fa:	4618      	mov	r0, r3
 80142fc:	f000 f868 	bl	80143d0 <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>
		this->registered = 0;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2200      	movs	r2, #0
 8014304:	711a      	strb	r2, [r3, #4]
	}
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	4618      	mov	r0, r3
 801430a:	3708      	adds	r7, #8
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}
 8014310:	080233b4 	.word	0x080233b4

08014314 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
 8014314:	b5b0      	push	{r4, r5, r7, lr}
 8014316:	b08a      	sub	sp, #40	@ 0x28
 8014318:	af00      	add	r7, sp, #0
 801431a:	60f8      	str	r0, [r7, #12]
 801431c:	60b9      	str	r1, [r7, #8]
 801431e:	4639      	mov	r1, r7
 8014320:	e881 000c 	stmia.w	r1, {r2, r3}
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	4618      	mov	r0, r3
 8014328:	f7ff fe30 	bl	8013f8c <_ZN8CallbackC1Ev>
 801432c:	4a12      	ldr	r2, [pc, #72]	@ (8014378 <_ZN19core_utils_CallbackIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE+0x64>)
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	601a      	str	r2, [r3, #0]
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	2200      	movs	r2, #0
 8014336:	711a      	strb	r2, [r3, #4]
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	3308      	adds	r3, #8
 801433c:	2100      	movs	r1, #0
 801433e:	4618      	mov	r0, r3
 8014340:	f000 f82d 	bl	801439e <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<R,void>(object, member);
 8014344:	f107 0010 	add.w	r0, r7, #16
 8014348:	463b      	mov	r3, r7
 801434a:	cb0c      	ldmia	r3, {r2, r3}
 801434c:	68b9      	ldr	r1, [r7, #8]
 801434e:	f000 f84d 	bl	80143ec <_ZN26core_utils_FunctionPointerIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	f103 0408 	add.w	r4, r3, #8
 8014358:	f107 0510 	add.w	r5, r7, #16
 801435c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801435e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014360:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014364:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	2201      	movs	r2, #1
 801436c:	711a      	strb	r2, [r3, #4]
	}
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	4618      	mov	r0, r3
 8014372:	3728      	adds	r7, #40	@ 0x28
 8014374:	46bd      	mov	sp, r7
 8014376:	bdb0      	pop	{r4, r5, r7, pc}
 8014378:	080233c4 	.word	0x080233c4

0801437c <_ZN19core_utils_CallbackIvtE4callEt>:
	R call(A argument){
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
 8014382:	6078      	str	r0, [r7, #4]
 8014384:	460b      	mov	r3, r1
 8014386:	807b      	strh	r3, [r7, #2]
		return this->_fp(argument);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	3308      	adds	r3, #8
 801438c:	887a      	ldrh	r2, [r7, #2]
 801438e:	4611      	mov	r1, r2
 8014390:	4618      	mov	r0, r3
 8014392:	f000 f83e 	bl	8014412 <_ZN26core_utils_FunctionPointerIvtEclEt>
 8014396:	bf00      	nop
	}
 8014398:	3708      	adds	r7, #8
 801439a:	46bd      	mov	sp, r7
 801439c:	bd80      	pop	{r7, pc}

0801439e <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>:
public:
    /** Create a FunctionPointer, attaching a static function
     *
     *  @param function The static function to attach (default is none)
     */
	core_utils_FunctionPointer(R (*function)(void) = 0) {
 801439e:	b580      	push	{r7, lr}
 80143a0:	b082      	sub	sp, #8
 80143a2:	af00      	add	r7, sp, #0
 80143a4:	6078      	str	r0, [r7, #4]
 80143a6:	6039      	str	r1, [r7, #0]
        attach(function);
 80143a8:	6839      	ldr	r1, [r7, #0]
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f000 f840 	bl	8014430 <_ZN26core_utils_FunctionPointerIvvE6attachEPFvvE>
    }
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	4618      	mov	r0, r3
 80143b4:	3708      	adds	r7, #8
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd80      	pop	{r7, pc}

080143ba <_ZN26core_utils_FunctionPointerIvvEclEv>:
    R(*get_function())() {
        return _membercaller ? (R(*)())0 : (R(*)())_p.function;
    }

#ifdef MBED_OPERATORS
    R operator ()(void) {
 80143ba:	b580      	push	{r7, lr}
 80143bc:	b082      	sub	sp, #8
 80143be:	af00      	add	r7, sp, #0
 80143c0:	6078      	str	r0, [r7, #4]
        return call();
 80143c2:	6878      	ldr	r0, [r7, #4]
 80143c4:	f000 f845 	bl	8014452 <_ZN26core_utils_FunctionPointerIvvE4callEv>
 80143c8:	bf00      	nop
    }
 80143ca:	3708      	adds	r7, #8
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bd80      	pop	{r7, pc}

080143d0 <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
 80143d8:	6039      	str	r1, [r7, #0]
        attach(function);
 80143da:	6839      	ldr	r1, [r7, #0]
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f000 f85d 	bl	801449c <_ZN26core_utils_FunctionPointerIvtE6attachEPFvtE>
    }
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	4618      	mov	r0, r3
 80143e6:	3708      	adds	r7, #8
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}

080143ec <_ZN26core_utils_FunctionPointerIvvEC1I23TWIPR_SPI_CommunicationEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b084      	sub	sp, #16
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	60f8      	str	r0, [r7, #12]
 80143f4:	60b9      	str	r1, [r7, #8]
 80143f6:	4639      	mov	r1, r7
 80143f8:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 80143fc:	463b      	mov	r3, r7
 80143fe:	cb0c      	ldmia	r3, {r2, r3}
 8014400:	68b9      	ldr	r1, [r7, #8]
 8014402:	68f8      	ldr	r0, [r7, #12]
 8014404:	f000 f85c 	bl	80144c0 <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE>
    }
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	4618      	mov	r0, r3
 801440c:	3710      	adds	r7, #16
 801440e:	46bd      	mov	sp, r7
 8014410:	bd80      	pop	{r7, pc}

08014412 <_ZN26core_utils_FunctionPointerIvtEclEt>:
    R operator ()(A1 a) {
 8014412:	b580      	push	{r7, lr}
 8014414:	b082      	sub	sp, #8
 8014416:	af00      	add	r7, sp, #0
 8014418:	6078      	str	r0, [r7, #4]
 801441a:	460b      	mov	r3, r1
 801441c:	807b      	strh	r3, [r7, #2]
        return call(a);
 801441e:	887b      	ldrh	r3, [r7, #2]
 8014420:	4619      	mov	r1, r3
 8014422:	6878      	ldr	r0, [r7, #4]
 8014424:	f000 f86a 	bl	80144fc <_ZN26core_utils_FunctionPointerIvtE4callEt>
 8014428:	bf00      	nop
    }
 801442a:	3708      	adds	r7, #8
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}

08014430 <_ZN26core_utils_FunctionPointerIvvE6attachEPFvvE>:
    void attach(R (*function)(void)) {
 8014430:	b480      	push	{r7}
 8014432:	b083      	sub	sp, #12
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	683a      	ldr	r2, [r7, #0]
 801443e:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	2200      	movs	r2, #0
 8014444:	615a      	str	r2, [r3, #20]
    }
 8014446:	bf00      	nop
 8014448:	370c      	adds	r7, #12
 801444a:	46bd      	mov	sp, r7
 801444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014450:	4770      	bx	lr

08014452 <_ZN26core_utils_FunctionPointerIvvE4callEv>:
    R call(){
 8014452:	b580      	push	{r7, lr}
 8014454:	b082      	sub	sp, #8
 8014456:	af00      	add	r7, sp, #0
 8014458:	6078      	str	r0, [r7, #4]
        if (_membercaller == 0 && _p.function) {
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	695b      	ldr	r3, [r3, #20]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d107      	bne.n	8014472 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x20>
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d003      	beq.n	8014472 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x20>
            return _p.function();
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	4798      	blx	r3
 8014470:	e011      	b.n	8014496 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x44>
        } else if (_membercaller && _p.object) {
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	695b      	ldr	r3, [r3, #20]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d00c      	beq.n	8014494 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x42>
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d008      	beq.n	8014494 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x42>
            return _membercaller(_p.object, _member);
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	695b      	ldr	r3, [r3, #20]
 8014486:	687a      	ldr	r2, [r7, #4]
 8014488:	6810      	ldr	r0, [r2, #0]
 801448a:	687a      	ldr	r2, [r7, #4]
 801448c:	3204      	adds	r2, #4
 801448e:	4611      	mov	r1, r2
 8014490:	4798      	blx	r3
 8014492:	e000      	b.n	8014496 <_ZN26core_utils_FunctionPointerIvvE4callEv+0x44>
        return (R)0;
 8014494:	bf00      	nop
    }
 8014496:	3708      	adds	r7, #8
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}

0801449c <_ZN26core_utils_FunctionPointerIvtE6attachEPFvtE>:
    void attach(R (*function)(A1)) {
 801449c:	b480      	push	{r7}
 801449e:	b083      	sub	sp, #12
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
 80144a4:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	683a      	ldr	r2, [r7, #0]
 80144aa:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2200      	movs	r2, #0
 80144b0:	615a      	str	r2, [r3, #20]
    }
 80144b2:	bf00      	nop
 80144b4:	370c      	adds	r7, #12
 80144b6:	46bd      	mov	sp, r7
 80144b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144bc:	4770      	bx	lr
	...

080144c0 <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 80144c0:	b480      	push	{r7}
 80144c2:	b085      	sub	sp, #20
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	60f8      	str	r0, [r7, #12]
 80144c8:	60b9      	str	r1, [r7, #8]
 80144ca:	4639      	mov	r1, r7
 80144cc:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	68ba      	ldr	r2, [r7, #8]
 80144d4:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	3304      	adds	r3, #4
 80144da:	461a      	mov	r2, r3
 80144dc:	463b      	mov	r3, r7
 80144de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80144e2:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	4a03      	ldr	r2, [pc, #12]	@ (80144f8 <_ZN26core_utils_FunctionPointerIvvE6attachI23TWIPR_SPI_CommunicationEEvPT_MS3_FvvE+0x38>)
 80144ea:	615a      	str	r2, [r3, #20]
    }
 80144ec:	bf00      	nop
 80144ee:	3714      	adds	r7, #20
 80144f0:	46bd      	mov	sp, r7
 80144f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f6:	4770      	bx	lr
 80144f8:	0801454f 	.word	0x0801454f

080144fc <_ZN26core_utils_FunctionPointerIvtE4callEt>:
    R call(A1 a) {
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b082      	sub	sp, #8
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
 8014504:	460b      	mov	r3, r1
 8014506:	807b      	strh	r3, [r7, #2]
        if (_membercaller == 0 && _p.function) {
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	695b      	ldr	r3, [r3, #20]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d109      	bne.n	8014524 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x28>
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	2b00      	cmp	r3, #0
 8014516:	d005      	beq.n	8014524 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x28>
           return _p.function(a);
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	887a      	ldrh	r2, [r7, #2]
 801451e:	4610      	mov	r0, r2
 8014520:	4798      	blx	r3
 8014522:	e011      	b.n	8014548 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4c>
        } else if (_membercaller && _p.object) {
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	695b      	ldr	r3, [r3, #20]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d00c      	beq.n	8014546 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4a>
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d008      	beq.n	8014546 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4a>
           return _membercaller(_p.object, _member, a);
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	695b      	ldr	r3, [r3, #20]
 8014538:	687a      	ldr	r2, [r7, #4]
 801453a:	6810      	ldr	r0, [r2, #0]
 801453c:	687a      	ldr	r2, [r7, #4]
 801453e:	1d11      	adds	r1, r2, #4
 8014540:	887a      	ldrh	r2, [r7, #2]
 8014542:	4798      	blx	r3
 8014544:	e000      	b.n	8014548 <_ZN26core_utils_FunctionPointerIvtE4callEt+0x4c>
        return (R)0;
 8014546:	bf00      	nop
    }
 8014548:	3708      	adds	r7, #8
 801454a:	46bd      	mov	sp, r7
 801454c:	bd80      	pop	{r7, pc}

0801454e <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj>:
    }
#endif

private:
    template<typename T>
    static R membercaller(void *object, uintptr_t *member) {
 801454e:	b580      	push	{r7, lr}
 8014550:	b084      	sub	sp, #16
 8014552:	af00      	add	r7, sp, #0
 8014554:	6078      	str	r0, [r7, #4]
 8014556:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	685b      	ldr	r3, [r3, #4]
 8014564:	105b      	asrs	r3, r3, #1
 8014566:	461a      	mov	r2, r3
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	1899      	adds	r1, r3, r2
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	685b      	ldr	r3, [r3, #4]
 8014570:	f003 0301 	and.w	r3, r3, #1
 8014574:	2b00      	cmp	r3, #0
 8014576:	d00b      	beq.n	8014590 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj+0x42>
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	685b      	ldr	r3, [r3, #4]
 801457c:	105b      	asrs	r3, r3, #1
 801457e:	461a      	mov	r2, r3
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	4413      	add	r3, r2
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	68ba      	ldr	r2, [r7, #8]
 8014588:	6812      	ldr	r2, [r2, #0]
 801458a:	4413      	add	r3, r2
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	e001      	b.n	8014594 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23TWIPR_SPI_CommunicationEEvPvPj+0x46>
 8014590:	68bb      	ldr	r3, [r7, #8]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	4608      	mov	r0, r1
 8014596:	4798      	blx	r3
 8014598:	bf00      	nop
    }
 801459a:	3710      	adds	r7, #16
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}

080145a0 <_ZN6BufferC1Ev>:
#include "stdint.h"
#include "../core_default_config.h"

class Buffer {
public:
	Buffer() {
 80145a0:	b480      	push	{r7}
 80145a2:	b083      	sub	sp, #12
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	2200      	movs	r2, #0
 80145ac:	809a      	strh	r2, [r3, #4]

	}
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	4618      	mov	r0, r3
 80145b2:	370c      	adds	r7, #12
 80145b4:	46bd      	mov	sp, r7
 80145b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ba:	4770      	bx	lr

080145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>:
class core_utils_Callback<R, void>: public Callback {
 80145bc:	b5b0      	push	{r4, r5, r7, lr}
 80145be:	b082      	sub	sp, #8
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	6039      	str	r1, [r7, #0]
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	683a      	ldr	r2, [r7, #0]
 80145ca:	4611      	mov	r1, r2
 80145cc:	4618      	mov	r0, r3
 80145ce:	f7ff fd02 	bl	8013fd6 <_ZN8CallbackaSERKS_>
 80145d2:	683b      	ldr	r3, [r7, #0]
 80145d4:	791a      	ldrb	r2, [r3, #4]
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	711a      	strb	r2, [r3, #4]
 80145da:	687a      	ldr	r2, [r7, #4]
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	f102 0408 	add.w	r4, r2, #8
 80145e2:	f103 0508 	add.w	r5, r3, #8
 80145e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80145e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80145ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80145ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	4618      	mov	r0, r3
 80145f6:	3708      	adds	r7, #8
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bdb0      	pop	{r4, r5, r7, pc}

080145fc <_Z3nopv>:
#include "core_utils_RingBuffer.h"
#include "core_utils_functionpointer.h"
#include "core_utils_registermap.h"


inline void nop(){
 80145fc:	b480      	push	{r7}
 80145fe:	af00      	add	r7, sp, #0

}
 8014600:	bf00      	nop
 8014602:	46bd      	mov	sp, r7
 8014604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014608:	4770      	bx	lr
	...

0801460c <_ZN4UARTC1Ev>:
extern core_hardware_UART_config core_hardware_uart_std_config;
extern uint8_t num_uarts;
/* =========================================================================== */
class UART {
public:
	UART() {
 801460c:	b480      	push	{r7}
 801460e:	b083      	sub	sp, #12
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
 8014614:	4a04      	ldr	r2, [pc, #16]	@ (8014628 <_ZN4UARTC1Ev+0x1c>)
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	601a      	str	r2, [r3, #0]

	}
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	4618      	mov	r0, r3
 801461e:	370c      	adds	r7, #12
 8014620:	46bd      	mov	sp, r7
 8014622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014626:	4770      	bx	lr
 8014628:	08023460 	.word	0x08023460

0801462c <_ZN4UART10rxFunctionEt>:

	virtual void rxFunction(uint16_t len) {
 801462c:	b480      	push	{r7}
 801462e:	b083      	sub	sp, #12
 8014630:	af00      	add	r7, sp, #0
 8014632:	6078      	str	r0, [r7, #4]
 8014634:	460b      	mov	r3, r1
 8014636:	807b      	strh	r3, [r7, #2]

	}
 8014638:	bf00      	nop
 801463a:	370c      	adds	r7, #12
 801463c:	46bd      	mov	sp, r7
 801463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014642:	4770      	bx	lr

08014644 <_ZN4UART9get_huartEv>:

	virtual UART_HandleTypeDef* get_huart() {
 8014644:	b480      	push	{r7}
 8014646:	b083      	sub	sp, #12
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
		return NULL;
 801464c:	2300      	movs	r3, #0
	}
 801464e:	4618      	mov	r0, r3
 8014650:	370c      	adds	r7, #12
 8014652:	46bd      	mov	sp, r7
 8014654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014658:	4770      	bx	lr
	...

0801465c <_ZN13UartInterfaceC1Ev>:
extern core_hardware_UART_config std_hardware_uart_config;
extern core_comm_UartInterface_config_t std_uart_config;
/* ---------------------------------------------------------- */
class UartInterface {
public:
	UartInterface() {
 801465c:	b480      	push	{r7}
 801465e:	b083      	sub	sp, #12
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
 8014664:	4a06      	ldr	r2, [pc, #24]	@ (8014680 <_ZN13UartInterfaceC1Ev+0x24>)
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	601a      	str	r2, [r3, #0]
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	2200      	movs	r2, #0
 801466e:	711a      	strb	r2, [r3, #4]

	}
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	4618      	mov	r0, r3
 8014674:	370c      	adds	r7, #12
 8014676:	46bd      	mov	sp, r7
 8014678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467c:	4770      	bx	lr
 801467e:	bf00      	nop
 8014680:	0802342c 	.word	0x0802342c

08014684 <_ZN13UartInterface11rx_functionEv>:
	virtual uint8_t rx_function() {
 8014684:	b480      	push	{r7}
 8014686:	b083      	sub	sp, #12
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
		return 0;
 801468c:	2300      	movs	r3, #0
	}
 801468e:	4618      	mov	r0, r3
 8014690:	370c      	adds	r7, #12
 8014692:	46bd      	mov	sp, r7
 8014694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014698:	4770      	bx	lr

0801469a <_ZN13UartInterface9setTaskIDEP19tskTaskControlBlock>:
	virtual void setTaskID(TaskHandle_t task) {
 801469a:	b480      	push	{r7}
 801469c:	b083      	sub	sp, #12
 801469e:	af00      	add	r7, sp, #0
 80146a0:	6078      	str	r0, [r7, #4]
 80146a2:	6039      	str	r1, [r7, #0]

	}
 80146a4:	bf00      	nop
 80146a6:	370c      	adds	r7, #12
 80146a8:	46bd      	mov	sp, r7
 80146aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ae:	4770      	bx	lr

080146b0 <_ZN13UartInterface9getTaskIDEv>:
	virtual TaskHandle_t getTaskID() {
 80146b0:	b480      	push	{r7}
 80146b2:	b083      	sub	sp, #12
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
		return NULL;
 80146b8:	2300      	movs	r3, #0
	}
 80146ba:	4618      	mov	r0, r3
 80146bc:	370c      	adds	r7, #12
 80146be:	46bd      	mov	sp, r7
 80146c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146c4:	4770      	bx	lr

080146c6 <_Z20twipr_uart_comm_taskPv>:

static core_comm_SerialMessage_memory<128> incoming_msg;
static core_comm_SerialMessage_memory<128> outgoing_msg;

/* =========================================================================== */
void twipr_uart_comm_task(void *argument) {
 80146c6:	b580      	push	{r7, lr}
 80146c8:	b084      	sub	sp, #16
 80146ca:	af00      	add	r7, sp, #0
 80146cc:	6078      	str	r0, [r7, #4]

	TWIPR_UART_Communication *comm = (TWIPR_UART_Communication*) argument;
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	60fb      	str	r3, [r7, #12]
	comm->task = xTaskGetCurrentTaskHandle();
 80146d2:	f7fd ff7f 	bl	80125d4 <xTaskGetCurrentTaskHandle>
 80146d6:	4602      	mov	r2, r0
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	601a      	str	r2, [r3, #0]
	comm->taskFunction();
 80146dc:	68f8      	ldr	r0, [r7, #12]
 80146de:	f000 f8f9 	bl	80148d4 <_ZN24TWIPR_UART_Communication12taskFunctionEv>
}
 80146e2:	bf00      	nop
 80146e4:	3710      	adds	r7, #16
 80146e6:	46bd      	mov	sp, r7
 80146e8:	bd80      	pop	{r7, pc}

080146ea <_ZN27twipr_uart_comm_callbacks_tC1Ev>:
	TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
	TWIPR_UART_COMM_CALLBACK_MSG_READ,
	TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
} twipr_uart_comm_callback_id_t;

typedef struct twipr_uart_comm_callbacks_t {
 80146ea:	b580      	push	{r7, lr}
 80146ec:	b082      	sub	sp, #8
 80146ee:	af00      	add	r7, sp, #0
 80146f0:	6078      	str	r0, [r7, #4]
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	4618      	mov	r0, r3
 80146f6:	f000 fa55 	bl	8014ba4 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	3320      	adds	r3, #32
 80146fe:	4618      	mov	r0, r3
 8014700:	f000 fa50 	bl	8014ba4 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	3340      	adds	r3, #64	@ 0x40
 8014708:	4618      	mov	r0, r3
 801470a:	f000 fa4b 	bl	8014ba4 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	3360      	adds	r3, #96	@ 0x60
 8014712:	4618      	mov	r0, r3
 8014714:	f000 fa46 	bl	8014ba4 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	4618      	mov	r0, r3
 801471c:	3708      	adds	r7, #8
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}

08014722 <_ZN24TWIPR_UART_CommunicationC1Ev>:

/* =========================================================================== */
TWIPR_UART_Communication::TWIPR_UART_Communication() {
 8014722:	b580      	push	{r7, lr}
 8014724:	b082      	sub	sp, #8
 8014726:	af00      	add	r7, sp, #0
 8014728:	6078      	str	r0, [r7, #4]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	2200      	movs	r2, #0
 801472e:	605a      	str	r2, [r3, #4]
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	330c      	adds	r3, #12
 8014734:	4618      	mov	r0, r3
 8014736:	f000 f9f7 	bl	8014b28 <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev>
 801473a:	687a      	ldr	r2, [r7, #4]
 801473c:	f241 339c 	movw	r3, #5020	@ 0x139c
 8014740:	4413      	add	r3, r2
 8014742:	4618      	mov	r0, r3
 8014744:	f7ff ffd1 	bl	80146ea <_ZN27twipr_uart_comm_callbacks_tC1Ev>

}
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	4618      	mov	r0, r3
 801474c:	3708      	adds	r7, #8
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}
	...

08014754 <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t>:

/* =========================================================================== */
void TWIPR_UART_Communication::init(twipr_uart_comm_config_t config) {
 8014754:	b590      	push	{r4, r7, lr}
 8014756:	b08d      	sub	sp, #52	@ 0x34
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	6039      	str	r1, [r7, #0]

	// Initialize the UART interface to the Raspberry Pi
	this->_uart_cm4.init(config.huart,
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	f103 000c 	add.w	r0, r3, #12
 8014764:	6839      	ldr	r1, [r7, #0]
 8014766:	4b0f      	ldr	r3, [pc, #60]	@ (80147a4 <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t+0x50>)
 8014768:	cb0c      	ldmia	r3, {r2, r3}
 801476a:	f000 fa39 	bl	8014be0 <_ZN23core_comm_UartInterfaceILi10ELi128EE4initEP20__UART_HandleTypeDef32core_comm_UartInterface_config_t>
			twipr_communication_uart_cm4_interface_config);

	this->_uart_cm4.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX,
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	f103 040c 	add.w	r4, r3, #12
			core_utils_Callback<void, void*>(this,
 8014774:	4b0c      	ldr	r3, [pc, #48]	@ (80147a8 <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t+0x54>)
 8014776:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014778:	2300      	movs	r3, #0
 801477a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801477c:	f107 0008 	add.w	r0, r7, #8
 8014780:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8014784:	cb0c      	ldmia	r3, {r2, r3}
 8014786:	6879      	ldr	r1, [r7, #4]
 8014788:	f000 fa64 	bl	8014c54 <_ZN19core_utils_CallbackIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E>
	this->_uart_cm4.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX,
 801478c:	f107 0308 	add.w	r3, r7, #8
 8014790:	461a      	mov	r2, r3
 8014792:	2100      	movs	r1, #0
 8014794:	4620      	mov	r0, r4
 8014796:	f000 fab1 	bl	8014cfc <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE>
					&TWIPR_UART_Communication::_rx_callback));
}
 801479a:	bf00      	nop
 801479c:	3734      	adds	r7, #52	@ 0x34
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd90      	pop	{r4, r7, pc}
 80147a2:	bf00      	nop
 80147a4:	24000014 	.word	0x24000014
 80147a8:	08014a09 	.word	0x08014a09

080147ac <_ZN24TWIPR_UART_Communication5startEv>:

/* =========================================================================== */
void TWIPR_UART_Communication::start() {
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b082      	sub	sp, #8
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	6078      	str	r0, [r7, #4]

	// Start the UART interfaces
	this->_uart_cm4.start();
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	330c      	adds	r3, #12
 80147b8:	4618      	mov	r0, r3
 80147ba:	f000 fac2 	bl	8014d42 <_ZN23core_comm_UartInterfaceILi10ELi128EE5startEv>

	// Start the task
	this->_thread = osThreadNew(twipr_uart_comm_task, this, &task_attributes);
 80147be:	4a06      	ldr	r2, [pc, #24]	@ (80147d8 <_ZN24TWIPR_UART_Communication5startEv+0x2c>)
 80147c0:	6879      	ldr	r1, [r7, #4]
 80147c2:	4806      	ldr	r0, [pc, #24]	@ (80147dc <_ZN24TWIPR_UART_Communication5startEv+0x30>)
 80147c4:	f7fb facb 	bl	800fd5e <osThreadNew>
 80147c8:	4602      	mov	r2, r0
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	609a      	str	r2, [r3, #8]
}
 80147ce:	bf00      	nop
 80147d0:	3708      	adds	r7, #8
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}
 80147d6:	bf00      	nop
 80147d8:	080233dc 	.word	0x080233dc
 80147dc:	080146c7 	.word	0x080146c7

080147e0 <_ZN24TWIPR_UART_Communication5resetEv>:
/* =========================================================================== */
void TWIPR_UART_Communication::reset(){
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b082      	sub	sp, #8
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
	this->_uart_cm4.reset();
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	330c      	adds	r3, #12
 80147ec:	4618      	mov	r0, r3
 80147ee:	f000 fabc 	bl	8014d6a <_ZN23core_comm_UartInterfaceILi10ELi128EE5resetEv>
}
 80147f2:	bf00      	nop
 80147f4:	3708      	adds	r7, #8
 80147f6:	46bd      	mov	sp, r7
 80147f8:	bd80      	pop	{r7, pc}

080147fa <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>:
	outgoing_msg.len = len;
	this->send(&outgoing_msg);
}

/* =========================================================================== */
void TWIPR_UART_Communication::send(core_comm_SerialMessage *msg) {
 80147fa:	b580      	push	{r7, lr}
 80147fc:	b082      	sub	sp, #8
 80147fe:	af00      	add	r7, sp, #0
 8014800:	6078      	str	r0, [r7, #4]
 8014802:	6039      	str	r1, [r7, #0]

	// Check the message
	this->_uart_cm4.send(msg);
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	330c      	adds	r3, #12
 8014808:	6839      	ldr	r1, [r7, #0]
 801480a:	4618      	mov	r0, r3
 801480c:	f000 fabb 	bl	8014d86 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEP23core_comm_SerialMessage>
}
 8014810:	bf00      	nop
 8014812:	3708      	adds	r7, #8
 8014814:	46bd      	mov	sp, r7
 8014816:	bd80      	pop	{r7, pc}

08014818 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>:
class core_utils_Callback: public Callback {
 8014818:	b5b0      	push	{r4, r5, r7, lr}
 801481a:	b082      	sub	sp, #8
 801481c:	af00      	add	r7, sp, #0
 801481e:	6078      	str	r0, [r7, #4]
 8014820:	6039      	str	r1, [r7, #0]
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	683a      	ldr	r2, [r7, #0]
 8014826:	4611      	mov	r1, r2
 8014828:	4618      	mov	r0, r3
 801482a:	f7ff fbd4 	bl	8013fd6 <_ZN8CallbackaSERKS_>
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	791a      	ldrb	r2, [r3, #4]
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	711a      	strb	r2, [r3, #4]
 8014836:	687a      	ldr	r2, [r7, #4]
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	f102 0408 	add.w	r4, r2, #8
 801483e:	f103 0508 	add.w	r5, r3, #8
 8014842:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014844:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014846:	e895 0003 	ldmia.w	r5, {r0, r1}
 801484a:	e884 0003 	stmia.w	r4, {r0, r1}
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	4618      	mov	r0, r3
 8014852:	3708      	adds	r7, #8
 8014854:	46bd      	mov	sp, r7
 8014856:	bdb0      	pop	{r4, r5, r7, pc}

08014858 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>:

/* =========================================================================== */
void TWIPR_UART_Communication::registerCallback(
		twipr_uart_comm_callback_id_t callback_id,
		core_utils_Callback<void, core_comm_SerialMessage*> callback) {
 8014858:	b580      	push	{r7, lr}
 801485a:	b084      	sub	sp, #16
 801485c:	af00      	add	r7, sp, #0
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	460b      	mov	r3, r1
 8014862:	607a      	str	r2, [r7, #4]
 8014864:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 8014866:	7afb      	ldrb	r3, [r7, #11]
 8014868:	2b03      	cmp	r3, #3
 801486a:	d82f      	bhi.n	80148cc <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
 801486c:	a201      	add	r2, pc, #4	@ (adr r2, 8014874 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x1c>)
 801486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014872:	bf00      	nop
 8014874:	08014885 	.word	0x08014885
 8014878:	08014897 	.word	0x08014897
 801487c:	080148a9 	.word	0x080148a9
 8014880:	080148bb 	.word	0x080148bb
	case TWIPR_UART_COMM_CALLBACK_RX_MSG: {
		this->_callbacks.rx_msg = callback;
 8014884:	68fa      	ldr	r2, [r7, #12]
 8014886:	f241 339c 	movw	r3, #5020	@ 0x139c
 801488a:	4413      	add	r3, r2
 801488c:	6879      	ldr	r1, [r7, #4]
 801488e:	4618      	mov	r0, r3
 8014890:	f7ff ffc2 	bl	8014818 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 8014894:	e01a      	b.n	80148cc <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_WRITE: {
		this->_callbacks.write_msg = callback;
 8014896:	68fa      	ldr	r2, [r7, #12]
 8014898:	f241 33bc 	movw	r3, #5052	@ 0x13bc
 801489c:	4413      	add	r3, r2
 801489e:	6879      	ldr	r1, [r7, #4]
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7ff ffb9 	bl	8014818 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 80148a6:	e011      	b.n	80148cc <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_READ: {
		this->_callbacks.read_msg = callback;
 80148a8:	68fa      	ldr	r2, [r7, #12]
 80148aa:	f241 33dc 	movw	r3, #5084	@ 0x13dc
 80148ae:	4413      	add	r3, r2
 80148b0:	6879      	ldr	r1, [r7, #4]
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7ff ffb0 	bl	8014818 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 80148b8:	e008      	b.n	80148cc <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE+0x74>
	}
	case TWIPR_UART_COMM_CALLBACK_MSG_FUNC: {
		this->_callbacks.func_msg = callback;
 80148ba:	68fa      	ldr	r2, [r7, #12]
 80148bc:	f241 33fc 	movw	r3, #5116	@ 0x13fc
 80148c0:	4413      	add	r3, r2
 80148c2:	6879      	ldr	r1, [r7, #4]
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7ff ffa7 	bl	8014818 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEaSERKS2_>
		break;
 80148ca:	bf00      	nop
	}
	}

}
 80148cc:	bf00      	nop
 80148ce:	3710      	adds	r7, #16
 80148d0:	46bd      	mov	sp, r7
 80148d2:	bd80      	pop	{r7, pc}

080148d4 <_ZN24TWIPR_UART_Communication12taskFunctionEv>:

/* =========================================================================== */
void TWIPR_UART_Communication::taskFunction() {
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
	//	uint32_t kernel_ticks = 0;
	while (true) {
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80148dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80148e0:	2001      	movs	r0, #1
 80148e2:	f7fe f815 	bl	8012910 <ulTaskNotifyTake>
		if (this->_uart_cm4.rx_queue.available()) {
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	3318      	adds	r3, #24
 80148ea:	4618      	mov	r0, r3
 80148ec:	f000 fa68 	bl	8014dc0 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 80148f0:	4603      	mov	r3, r0
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	bf14      	ite	ne
 80148f6:	2301      	movne	r3, #1
 80148f8:	2300      	moveq	r3, #0
 80148fa:	b2db      	uxtb	r3, r3
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d0ed      	beq.n	80148dc <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x8>
			this->_handleIncomingMessages();
 8014900:	6878      	ldr	r0, [r7, #4]
 8014902:	f000 f801 	bl	8014908 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8014906:	e7e9      	b.n	80148dc <_ZN24TWIPR_UART_Communication12taskFunctionEv+0x8>

08014908 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv>:
		}
	}
}

/* =========================================================================== */
void TWIPR_UART_Communication::_handleIncomingMessages() {
 8014908:	b580      	push	{r7, lr}
 801490a:	b082      	sub	sp, #8
 801490c:	af00      	add	r7, sp, #0
 801490e:	6078      	str	r0, [r7, #4]
	// Loop through all the messages in the rx queue
	while (this->_uart_cm4.rx_queue.available()) {
 8014910:	e065      	b.n	80149de <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xd6>
		this->_uart_cm4.rx_queue.read(&incoming_msg);
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	3318      	adds	r3, #24
 8014916:	493b      	ldr	r1, [pc, #236]	@ (8014a04 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8014918:	4618      	mov	r0, r3
 801491a:	f000 fa70 	bl	8014dfe <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage>
		// TODO

		// Handle the different addresses

		// Handle the different commands
		switch (incoming_msg.cmd) {
 801491e:	4b39      	ldr	r3, [pc, #228]	@ (8014a04 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8014920:	781b      	ldrb	r3, [r3, #0]
 8014922:	3b01      	subs	r3, #1
 8014924:	2b07      	cmp	r3, #7
 8014926:	d859      	bhi.n	80149dc <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xd4>
 8014928:	a201      	add	r2, pc, #4	@ (adr r2, 8014930 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0x28>)
 801492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801492e:	bf00      	nop
 8014930:	08014951 	.word	0x08014951
 8014934:	08014971 	.word	0x08014971
 8014938:	080149dd 	.word	0x080149dd
 801493c:	080149dd 	.word	0x080149dd
 8014940:	08014991 	.word	0x08014991
 8014944:	08014997 	.word	0x08014997
 8014948:	0801499d 	.word	0x0801499d
 801494c:	080149bd 	.word	0x080149bd
		case MSG_COMMAND_WRITE: {
//			this->_handleMessage_write(&incoming_msg);
			if (this->_callbacks.write_msg.registered) {
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014956:	f893 33c0 	ldrb.w	r3, [r3, #960]	@ 0x3c0
 801495a:	2b00      	cmp	r3, #0
 801495c:	d033      	beq.n	80149c6 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xbe>
				this->_callbacks.write_msg.call(&incoming_msg);
 801495e:	687a      	ldr	r2, [r7, #4]
 8014960:	f241 33bc 	movw	r3, #5052	@ 0x13bc
 8014964:	4413      	add	r3, r2
 8014966:	4927      	ldr	r1, [pc, #156]	@ (8014a04 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8014968:	4618      	mov	r0, r3
 801496a:	f000 fad5 	bl	8014f18 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
			break;
 801496e:	e02a      	b.n	80149c6 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xbe>
		}
		case MSG_COMMAND_READ: {
			if (this->_callbacks.read_msg.registered) {
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014976:	f893 33e0 	ldrb.w	r3, [r3, #992]	@ 0x3e0
 801497a:	2b00      	cmp	r3, #0
 801497c:	d025      	beq.n	80149ca <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc2>
				this->_callbacks.read_msg.call(&incoming_msg);
 801497e:	687a      	ldr	r2, [r7, #4]
 8014980:	f241 33dc 	movw	r3, #5084	@ 0x13dc
 8014984:	4413      	add	r3, r2
 8014986:	491f      	ldr	r1, [pc, #124]	@ (8014a04 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 8014988:	4618      	mov	r0, r3
 801498a:	f000 fac5 	bl	8014f18 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
//			this->_handleMessage_read(&incoming_msg);
			break;
 801498e:	e01c      	b.n	80149ca <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc2>
		}
		case MSG_COMMAND_EVENT: {
			nop();
 8014990:	f7ff fe34 	bl	80145fc <_Z3nopv>
			break;
 8014994:	e01c      	b.n	80149d0 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
		}
		case MSG_COMMAND_MSG: {
			nop();
 8014996:	f7ff fe31 	bl	80145fc <_Z3nopv>
			break;
 801499a:	e019      	b.n	80149d0 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
		}
		case MSG_COMMAND_FCT: {
			if (this->_callbacks.func_msg.registered) {
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80149a2:	f893 3400 	ldrb.w	r3, [r3, #1024]	@ 0x400
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d011      	beq.n	80149ce <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc6>
				this->_callbacks.func_msg.call(&incoming_msg);
 80149aa:	687a      	ldr	r2, [r7, #4]
 80149ac:	f241 33fc 	movw	r3, #5116	@ 0x13fc
 80149b0:	4413      	add	r3, r2
 80149b2:	4914      	ldr	r1, [pc, #80]	@ (8014a04 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 80149b4:	4618      	mov	r0, r3
 80149b6:	f000 faaf 	bl	8014f18 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
			}
//			this->_handleMessage_function(&incoming_msg);
			break;
 80149ba:	e008      	b.n	80149ce <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc6>
		}
		case MSG_COMMAND_ECHO: {
			this->send(&incoming_msg);
 80149bc:	4911      	ldr	r1, [pc, #68]	@ (8014a04 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xfc>)
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f7ff ff1b 	bl	80147fa <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
			break;
 80149c4:	e004      	b.n	80149d0 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
			break;
 80149c6:	bf00      	nop
 80149c8:	e002      	b.n	80149d0 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
			break;
 80149ca:	bf00      	nop
 80149cc:	e000      	b.n	80149d0 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xc8>
			break;
 80149ce:	bf00      	nop
		default: {
			continue;
			break;
		}
		}
		this->last_received_message_tick = osKernelGetTickCount();
 80149d0:	f7fb f9b0 	bl	800fd34 <osKernelGetTickCount>
 80149d4:	4602      	mov	r2, r0
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	605a      	str	r2, [r3, #4]
 80149da:	e000      	b.n	80149de <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xd6>
			continue;
 80149dc:	bf00      	nop
	while (this->_uart_cm4.rx_queue.available()) {
 80149de:	687b      	ldr	r3, [r7, #4]
 80149e0:	3318      	adds	r3, #24
 80149e2:	4618      	mov	r0, r3
 80149e4:	f000 f9ec 	bl	8014dc0 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 80149e8:	4603      	mov	r3, r0
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	bf14      	ite	ne
 80149ee:	2301      	movne	r3, #1
 80149f0:	2300      	moveq	r3, #0
 80149f2:	b2db      	uxtb	r3, r3
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d18c      	bne.n	8014912 <_ZN24TWIPR_UART_Communication23_handleIncomingMessagesEv+0xa>
	}
}
 80149f8:	bf00      	nop
 80149fa:	bf00      	nop
 80149fc:	3708      	adds	r7, #8
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop
 8014a04:	240152e0 	.word	0x240152e0

08014a08 <_ZN24TWIPR_UART_Communication12_rx_callbackEPv>:
		this->send(&outgoing_msg);
	}
}

/* =========================================================================== */
void TWIPR_UART_Communication::_rx_callback(void *argument) {
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b082      	sub	sp, #8
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
 8014a10:	6039      	str	r1, [r7, #0]
	if (this->task != NULL) {
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d006      	beq.n	8014a28 <_ZN24TWIPR_UART_Communication12_rx_callbackEPv+0x20>
		xTaskNotifyGive(this->task);
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	6818      	ldr	r0, [r3, #0]
 8014a1e:	2300      	movs	r3, #0
 8014a20:	2202      	movs	r2, #2
 8014a22:	2100      	movs	r1, #0
 8014a24:	f7fd ffc0 	bl	80129a8 <xTaskGenericNotify>
	}
}
 8014a28:	bf00      	nop
 8014a2a:	3708      	adds	r7, #8
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	bd80      	pop	{r7, pc}

08014a30 <_ZN19core_utils_CallbackIvvEC1Ev>:
	core_utils_Callback() {
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b082      	sub	sp, #8
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	6078      	str	r0, [r7, #4]
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	f7ff faa6 	bl	8013f8c <_ZN8CallbackC1Ev>
 8014a40:	4a09      	ldr	r2, [pc, #36]	@ (8014a68 <_ZN19core_utils_CallbackIvvEC1Ev+0x38>)
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	601a      	str	r2, [r3, #0]
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	2200      	movs	r2, #0
 8014a4a:	711a      	strb	r2, [r3, #4]
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	3308      	adds	r3, #8
 8014a50:	2100      	movs	r1, #0
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7ff fca3 	bl	801439e <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		this->registered = 0;
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	711a      	strb	r2, [r3, #4]
	}
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	4618      	mov	r0, r3
 8014a62:	3708      	adds	r7, #8
 8014a64:	46bd      	mov	sp, r7
 8014a66:	bd80      	pop	{r7, pc}
 8014a68:	080233c4 	.word	0x080233c4

08014a6c <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>:
};

template <int size>
class core_comm_SerialMessage_memory: public core_comm_SerialMessage {
public:
	core_comm_SerialMessage_memory(){
 8014a6c:	b480      	push	{r7}
 8014a6e:	b083      	sub	sp, #12
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
		this->data_ptr = data;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	f103 0210 	add.w	r2, r3, #16
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	609a      	str	r2, [r3, #8]
	}
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	4618      	mov	r0, r3
 8014a82:	370c      	adds	r7, #12
 8014a84:	46bd      	mov	sp, r7
 8014a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8a:	4770      	bx	lr

08014a8c <_ZN25core_hardware_UART_configC1Ev>:
typedef struct core_hardware_UART_config {
 8014a8c:	b480      	push	{r7}
 8014a8e:	b083      	sub	sp, #12
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2202      	movs	r2, #2
 8014a98:	701a      	strb	r2, [r3, #0]
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	2201      	movs	r2, #1
 8014a9e:	705a      	strb	r2, [r3, #1]
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2201      	movs	r2, #1
 8014aa4:	709a      	strb	r2, [r3, #2]
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	2201      	movs	r2, #1
 8014aaa:	70da      	strb	r2, [r3, #3]
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	4618      	mov	r0, r3
 8014ab0:	370c      	adds	r7, #12
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab8:	4770      	bx	lr

08014aba <_ZN32core_comm_UartInterface_config_tC1Ev>:
typedef struct core_comm_UartInterface_config_t {
 8014aba:	b580      	push	{r7, lr}
 8014abc:	b082      	sub	sp, #8
 8014abe:	af00      	add	r7, sp, #0
 8014ac0:	6078      	str	r0, [r7, #4]
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f7ff ffe1 	bl	8014a8c <_ZN25core_hardware_UART_configC1Ev>
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	4618      	mov	r0, r3
 8014ace:	3708      	adds	r7, #8
 8014ad0:	46bd      	mov	sp, r7
 8014ad2:	bd80      	pop	{r7, pc}

08014ad4 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev>:
#define CORE_COMMUNICATION_SERIAL_SOCKET_CORE_COMM_MESSAGEQUEUE_H_

#include <communication/uart_interface/core_comm_SerialProtocol.h>

template<int num_messages, int buf_size>
class core_comm_MessageQueue {
 8014ad4:	b5b0      	push	{r4, r5, r7, lr}
 8014ad6:	b082      	sub	sp, #8
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	2409      	movs	r4, #9
 8014ae0:	461d      	mov	r5, r3
 8014ae2:	e004      	b.n	8014aee <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev+0x1a>
 8014ae4:	4628      	mov	r0, r5
 8014ae6:	f7ff ffc1 	bl	8014a6c <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
 8014aea:	3c01      	subs	r4, #1
 8014aec:	3590      	adds	r5, #144	@ 0x90
 8014aee:	2c00      	cmp	r4, #0
 8014af0:	daf8      	bge.n	8014ae4 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev+0x10>
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	220a      	movs	r2, #10
 8014af6:	f883 25a3 	strb.w	r2, [r3, #1443]	@ 0x5a3
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	4618      	mov	r0, r3
 8014afe:	3708      	adds	r7, #8
 8014b00:	46bd      	mov	sp, r7
 8014b02:	bdb0      	pop	{r4, r5, r7, pc}

08014b04 <_ZN35core_comm_UartInterface_callbacks_tC1Ev>:
typedef struct core_comm_UartInterface_callbacks_t {
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b082      	sub	sp, #8
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f000 fa56 	bl	8014fc0 <_ZN19core_utils_CallbackIvPvEC1Ev>
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	3320      	adds	r3, #32
 8014b18:	4618      	mov	r0, r3
 8014b1a:	f000 f843 	bl	8014ba4 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	4618      	mov	r0, r3
 8014b22:	3708      	adds	r7, #8
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}

08014b28 <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev>:
	core_comm_UartInterface_config_t config;
	core_comm_UartInterface_status_t status;
	core_comm_MessageQueue<uart_buffers, uart_buffer_size> rx_queue;

	/* ------------------------------------------------------------- */
	core_comm_UartInterface() {
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	b082      	sub	sp, #8
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7ff fd92 	bl	801465c <_ZN13UartInterfaceC1Ev>
 8014b38:	4a19      	ldr	r2, [pc, #100]	@ (8014ba0 <_ZN23core_comm_UartInterfaceILi10ELi128EEC1Ev+0x78>)
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	601a      	str	r2, [r3, #0]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	3305      	adds	r3, #5
 8014b42:	4618      	mov	r0, r3
 8014b44:	f7ff ffb9 	bl	8014aba <_ZN32core_comm_UartInterface_config_tC1Ev>
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	330c      	adds	r3, #12
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7ff ffc1 	bl	8014ad4 <_ZN22core_comm_MessageQueueILi10ELi128EEC1Ev>
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f000 f9f9 	bl	8014f50 <_ZN18core_hardware_UARTILi10ELi128EEC1Ev>
 8014b5e:	687a      	ldr	r2, [r7, #4]
 8014b60:	f241 3344 	movw	r3, #4932	@ 0x1344
 8014b64:	4413      	add	r3, r2
 8014b66:	4618      	mov	r0, r3
 8014b68:	f7ff ffcc 	bl	8014b04 <_ZN35core_comm_UartInterface_callbacks_tC1Ev>
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014b72:	461a      	mov	r2, r3
 8014b74:	2300      	movs	r3, #0
 8014b76:	f8c2 3384 	str.w	r3, [r2, #900]	@ 0x384
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8014b80:	461a      	mov	r2, r3
 8014b82:	2300      	movs	r3, #0
 8014b84:	f8c2 3388 	str.w	r3, [r2, #904]	@ 0x388
		this->status = CORE_COMM_SERIAL_SOCKET_STATE_NONE;
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	72da      	strb	r2, [r3, #11]
		this->exit = 0;
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	2200      	movs	r2, #0
 8014b92:	711a      	strb	r2, [r3, #4]
	}
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	4618      	mov	r0, r3
 8014b98:	3708      	adds	r7, #8
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}
 8014b9e:	bf00      	nop
 8014ba0:	08023408 	.word	0x08023408

08014ba4 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev>:
	core_utils_Callback() {
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b082      	sub	sp, #8
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7ff f9ec 	bl	8013f8c <_ZN8CallbackC1Ev>
 8014bb4:	4a09      	ldr	r2, [pc, #36]	@ (8014bdc <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1Ev+0x38>)
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	601a      	str	r2, [r3, #0]
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	711a      	strb	r2, [r3, #4]
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	3308      	adds	r3, #8
 8014bc4:	2100      	movs	r1, #0
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f000 fa18 	bl	8014ffc <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>
		this->registered = 0;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2200      	movs	r2, #0
 8014bd0:	711a      	strb	r2, [r3, #4]
	}
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	3708      	adds	r7, #8
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	bd80      	pop	{r7, pc}
 8014bdc:	08023440 	.word	0x08023440

08014be0 <_ZN23core_comm_UartInterfaceILi10ELi128EE4initEP20__UART_HandleTypeDef32core_comm_UartInterface_config_t>:
	/* ------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart) {
		this->init(huart, std_uart_config);
	}
	/* ------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart,
 8014be0:	b590      	push	{r4, r7, lr}
 8014be2:	b08f      	sub	sp, #60	@ 0x3c
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	60f8      	str	r0, [r7, #12]
 8014be8:	60b9      	str	r1, [r7, #8]
 8014bea:	4639      	mov	r1, r7
 8014bec:	e881 000c 	stmia.w	r1, {r2, r3}
			core_comm_UartInterface_config_t config) {

		this->config = config;
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	3305      	adds	r3, #5
 8014bf4:	463a      	mov	r2, r7
 8014bf6:	6810      	ldr	r0, [r2, #0]
 8014bf8:	6018      	str	r0, [r3, #0]
 8014bfa:	8892      	ldrh	r2, [r2, #4]
 8014bfc:	809a      	strh	r2, [r3, #4]
		this->_uart.init(huart, this->config.uart);
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	f503 60b8 	add.w	r0, r3, #1472	@ 0x5c0
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8014c0a:	4613      	mov	r3, r2
 8014c0c:	461a      	mov	r2, r3
 8014c0e:	68b9      	ldr	r1, [r7, #8]
 8014c10:	f000 fa02 	bl	8015018 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config>

		// Add the rx callback to the UARTs
		this->_uart.registerCallback(CORE_HARDWARE_UART_CB_RX,
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	f503 64b8 	add.w	r4, r3, #1472	@ 0x5c0
				core_utils_Callback<void, void>(this,
 8014c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8014c50 <_ZN23core_comm_UartInterfaceILi10ELi128EE4initEP20__UART_HandleTypeDef32core_comm_UartInterface_config_t+0x70>)
 8014c1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8014c1e:	2300      	movs	r3, #0
 8014c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8014c22:	f107 0010 	add.w	r0, r7, #16
 8014c26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8014c2a:	cb0c      	ldmia	r3, {r2, r3}
 8014c2c:	68f9      	ldr	r1, [r7, #12]
 8014c2e:	f000 fb0f 	bl	8015250 <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>
		this->_uart.registerCallback(CORE_HARDWARE_UART_CB_RX,
 8014c32:	f107 0310 	add.w	r3, r7, #16
 8014c36:	461a      	mov	r2, r3
 8014c38:	2100      	movs	r1, #0
 8014c3a:	4620      	mov	r0, r4
 8014c3c:	f000 fb3c 	bl	80152b8 <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE>
						&core_comm_UartInterface<uart_buffers, uart_buffer_size>::_rxNotify_callback));

		this->status = CORE_COMM_SERIAL_SOCKET_STATE_INIT;
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	2201      	movs	r2, #1
 8014c44:	72da      	strb	r2, [r3, #11]
	}
 8014c46:	bf00      	nop
 8014c48:	373c      	adds	r7, #60	@ 0x3c
 8014c4a:	46bd      	mov	sp, r7
 8014c4c:	bd90      	pop	{r4, r7, pc}
 8014c4e:	bf00      	nop
 8014c50:	080151fd 	.word	0x080151fd

08014c54 <_ZN19core_utils_CallbackIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 8014c54:	b5b0      	push	{r4, r5, r7, lr}
 8014c56:	b08a      	sub	sp, #40	@ 0x28
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	60f8      	str	r0, [r7, #12]
 8014c5c:	60b9      	str	r1, [r7, #8]
 8014c5e:	4639      	mov	r1, r7
 8014c60:	e881 000c 	stmia.w	r1, {r2, r3}
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	4618      	mov	r0, r3
 8014c68:	f7ff f990 	bl	8013f8c <_ZN8CallbackC1Ev>
 8014c6c:	4a12      	ldr	r2, [pc, #72]	@ (8014cb8 <_ZN19core_utils_CallbackIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E+0x64>)
 8014c6e:	68fb      	ldr	r3, [r7, #12]
 8014c70:	601a      	str	r2, [r3, #0]
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	2200      	movs	r2, #0
 8014c76:	711a      	strb	r2, [r3, #4]
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	3308      	adds	r3, #8
 8014c7c:	2100      	movs	r1, #0
 8014c7e:	4618      	mov	r0, r3
 8014c80:	f000 fb2f 	bl	80152e2 <_ZN26core_utils_FunctionPointerIvPvEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8014c84:	f107 0010 	add.w	r0, r7, #16
 8014c88:	463b      	mov	r3, r7
 8014c8a:	cb0c      	ldmia	r3, {r2, r3}
 8014c8c:	68b9      	ldr	r1, [r7, #8]
 8014c8e:	f000 fb36 	bl	80152fe <_ZN26core_utils_FunctionPointerIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E>
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	f103 0408 	add.w	r4, r3, #8
 8014c98:	f107 0510 	add.w	r5, r7, #16
 8014c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ca0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014ca4:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	2201      	movs	r2, #1
 8014cac:	711a      	strb	r2, [r3, #4]
	}
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	3728      	adds	r7, #40	@ 0x28
 8014cb4:	46bd      	mov	sp, r7
 8014cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8014cb8:	08023450 	.word	0x08023450

08014cbc <_ZN19core_utils_CallbackIvPvEaSERKS1_>:
class core_utils_Callback: public Callback {
 8014cbc:	b5b0      	push	{r4, r5, r7, lr}
 8014cbe:	b082      	sub	sp, #8
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
 8014cc4:	6039      	str	r1, [r7, #0]
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	683a      	ldr	r2, [r7, #0]
 8014cca:	4611      	mov	r1, r2
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f7ff f982 	bl	8013fd6 <_ZN8CallbackaSERKS_>
 8014cd2:	683b      	ldr	r3, [r7, #0]
 8014cd4:	791a      	ldrb	r2, [r3, #4]
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	711a      	strb	r2, [r3, #4]
 8014cda:	687a      	ldr	r2, [r7, #4]
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	f102 0408 	add.w	r4, r2, #8
 8014ce2:	f103 0508 	add.w	r5, r3, #8
 8014ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014cea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014cee:	e884 0003 	stmia.w	r4, {r0, r1}
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3708      	adds	r7, #8
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bdb0      	pop	{r4, r5, r7, pc}

08014cfc <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE>:
	/* ------------------------------------------------------------- */
	core_comm_SerialMessage* getMessagePointer() {
		return this->rx_queue.readPointer();
	}
	/* ------------------------------------------------------------- */
	void registerCallback(core_comm_UartInterface_callback_id_t callback_id,
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b084      	sub	sp, #16
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	60f8      	str	r0, [r7, #12]
 8014d04:	460b      	mov	r3, r1
 8014d06:	607a      	str	r2, [r7, #4]
 8014d08:	72fb      	strb	r3, [r7, #11]
			core_utils_Callback<void, void*> callback) {
		switch (callback_id) {
 8014d0a:	7afb      	ldrb	r3, [r7, #11]
 8014d0c:	2b02      	cmp	r3, #2
 8014d0e:	d013      	beq.n	8014d38 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3c>
 8014d10:	2b02      	cmp	r3, #2
 8014d12:	dc12      	bgt.n	8014d3a <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3e>
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d002      	beq.n	8014d1e <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x22>
 8014d18:	2b01      	cmp	r3, #1
 8014d1a:	d009      	beq.n	8014d30 <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x34>
		}
		case CORE_COMM_SERIAL_SOCKET_CB_ERROR: {
			break;
		}
		}
	}
 8014d1c:	e00d      	b.n	8014d3a <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3e>
			this->_callbacks.rx = callback;
 8014d1e:	68fa      	ldr	r2, [r7, #12]
 8014d20:	f241 3344 	movw	r3, #4932	@ 0x1344
 8014d24:	4413      	add	r3, r2
 8014d26:	6879      	ldr	r1, [r7, #4]
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7ff ffc7 	bl	8014cbc <_ZN19core_utils_CallbackIvPvEaSERKS1_>
			break;
 8014d2e:	e004      	b.n	8014d3a <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3e>
			core_ErrorHandler(0x00);
 8014d30:	2000      	movs	r0, #0
 8014d32:	f00b f878 	bl	801fe26 <_Z17core_ErrorHandleri>
			break;
 8014d36:	e000      	b.n	8014d3a <_ZN23core_comm_UartInterfaceILi10ELi128EE16registerCallbackE37core_comm_UartInterface_callback_id_t19core_utils_CallbackIvPvE+0x3e>
			break;
 8014d38:	bf00      	nop
	}
 8014d3a:	bf00      	nop
 8014d3c:	3710      	adds	r7, #16
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}

08014d42 <_ZN23core_comm_UartInterfaceILi10ELi128EE5startEv>:
	void start() {
 8014d42:	b580      	push	{r7, lr}
 8014d44:	b082      	sub	sp, #8
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	6078      	str	r0, [r7, #4]
		this->_uart.start();
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 8014d50:	4618      	mov	r0, r3
 8014d52:	f000 fae7 	bl	8015324 <_ZN18core_hardware_UARTILi10ELi128EE5startEv>
		this->status = CORE_COMM_SERIAL_SOCKET_STATE_RUN;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	2202      	movs	r2, #2
 8014d5a:	72da      	strb	r2, [r3, #11]
		this->_startRTOS();
 8014d5c:	6878      	ldr	r0, [r7, #4]
 8014d5e:	f000 faff 	bl	8015360 <_ZN23core_comm_UartInterfaceILi10ELi128EE10_startRTOSEv>
	}
 8014d62:	bf00      	nop
 8014d64:	3708      	adds	r7, #8
 8014d66:	46bd      	mov	sp, r7
 8014d68:	bd80      	pop	{r7, pc}

08014d6a <_ZN23core_comm_UartInterfaceILi10ELi128EE5resetEv>:
	void reset(){
 8014d6a:	b580      	push	{r7, lr}
 8014d6c:	b082      	sub	sp, #8
 8014d6e:	af00      	add	r7, sp, #0
 8014d70:	6078      	str	r0, [r7, #4]
		this->_uart.reset();
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f000 fb19 	bl	80153b0 <_ZN18core_hardware_UARTILi10ELi128EE5resetEv>
	}
 8014d7e:	bf00      	nop
 8014d80:	3708      	adds	r7, #8
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd80      	pop	{r7, pc}

08014d86 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEP23core_comm_SerialMessage>:
	void send(core_comm_SerialMessage *message) {
 8014d86:	b580      	push	{r7, lr}
 8014d88:	b084      	sub	sp, #16
 8014d8a:	af00      	add	r7, sp, #0
 8014d8c:	6078      	str	r0, [r7, #4]
 8014d8e:	6039      	str	r1, [r7, #0]
		uint8_t len = message->encode(this->_tx_buf);
 8014d90:	687a      	ldr	r2, [r7, #4]
 8014d92:	f241 23c4 	movw	r3, #4804	@ 0x12c4
 8014d96:	4413      	add	r3, r2
 8014d98:	4619      	mov	r1, r3
 8014d9a:	6838      	ldr	r0, [r7, #0]
 8014d9c:	f008 fe4e 	bl	801da3c <_ZN23core_comm_SerialMessage6encodeEPh>
 8014da0:	4603      	mov	r3, r0
 8014da2:	73fb      	strb	r3, [r7, #15]
		this->send(this->_tx_buf, len);
 8014da4:	687a      	ldr	r2, [r7, #4]
 8014da6:	f241 23c4 	movw	r3, #4804	@ 0x12c4
 8014daa:	4413      	add	r3, r2
 8014dac:	7bfa      	ldrb	r2, [r7, #15]
 8014dae:	b292      	uxth	r2, r2
 8014db0:	4619      	mov	r1, r3
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	f000 fb0f 	bl	80153d6 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht>
	}
 8014db8:	bf00      	nop
 8014dba:	3710      	adds	r7, #16
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bd80      	pop	{r7, pc}

08014dc0 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>:
		core_comm_SerialMessage *msg = &this->messages[this->idx_read];
		this->inc_read();
		return msg;
	}

	uint8_t available() {
 8014dc0:	b480      	push	{r7}
 8014dc2:	b085      	sub	sp, #20
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
		int8_t available_msg = this->idx_write - this->idx_read;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	f893 25a1 	ldrb.w	r2, [r3, #1441]	@ 0x5a1
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8014dd4:	1ad3      	subs	r3, r2, r3
 8014dd6:	b2db      	uxtb	r3, r3
 8014dd8:	73fb      	strb	r3, [r7, #15]
		if (available_msg < 0) {
 8014dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	da06      	bge.n	8014df0 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv+0x30>
			available_msg += this->len;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	f893 25a3 	ldrb.w	r2, [r3, #1443]	@ 0x5a3
 8014de8:	7bfb      	ldrb	r3, [r7, #15]
 8014dea:	4413      	add	r3, r2
 8014dec:	b2db      	uxtb	r3, r3
 8014dee:	73fb      	strb	r3, [r7, #15]
		}
		return available_msg;
 8014df0:	7bfb      	ldrb	r3, [r7, #15]
	}
 8014df2:	4618      	mov	r0, r3
 8014df4:	3714      	adds	r7, #20
 8014df6:	46bd      	mov	sp, r7
 8014df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfc:	4770      	bx	lr

08014dfe <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage>:
	uint8_t read(core_comm_SerialMessage *message) {
 8014dfe:	b580      	push	{r7, lr}
 8014e00:	b084      	sub	sp, #16
 8014e02:	af00      	add	r7, sp, #0
 8014e04:	6078      	str	r0, [r7, #4]
 8014e06:	6039      	str	r1, [r7, #0]
		if (this->available() < 1) {
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	f7ff ffd9 	bl	8014dc0 <_ZN22core_comm_MessageQueueILi10ELi128EE9availableEv>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	bf0c      	ite	eq
 8014e14:	2301      	moveq	r3, #1
 8014e16:	2300      	movne	r3, #0
 8014e18:	b2db      	uxtb	r3, r3
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d001      	beq.n	8014e22 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0x24>
			return 0;
 8014e1e:	2300      	movs	r3, #0
 8014e20:	e076      	b.n	8014f10 <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0x112>
		message->address_1 = this->messages[this->idx_read].address_1;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8014e28:	4619      	mov	r1, r3
 8014e2a:	687a      	ldr	r2, [r7, #4]
 8014e2c:	460b      	mov	r3, r1
 8014e2e:	00db      	lsls	r3, r3, #3
 8014e30:	440b      	add	r3, r1
 8014e32:	011b      	lsls	r3, r3, #4
 8014e34:	4413      	add	r3, r2
 8014e36:	3301      	adds	r3, #1
 8014e38:	781a      	ldrb	r2, [r3, #0]
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	705a      	strb	r2, [r3, #1]
		message->address_2 = this->messages[this->idx_read].address_2;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8014e44:	4619      	mov	r1, r3
 8014e46:	687a      	ldr	r2, [r7, #4]
 8014e48:	460b      	mov	r3, r1
 8014e4a:	00db      	lsls	r3, r3, #3
 8014e4c:	440b      	add	r3, r1
 8014e4e:	011b      	lsls	r3, r3, #4
 8014e50:	4413      	add	r3, r2
 8014e52:	3302      	adds	r3, #2
 8014e54:	781a      	ldrb	r2, [r3, #0]
 8014e56:	683b      	ldr	r3, [r7, #0]
 8014e58:	709a      	strb	r2, [r3, #2]
		message->address_3 = this->messages[this->idx_read].address_3;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8014e60:	4619      	mov	r1, r3
 8014e62:	687a      	ldr	r2, [r7, #4]
 8014e64:	460b      	mov	r3, r1
 8014e66:	00db      	lsls	r3, r3, #3
 8014e68:	440b      	add	r3, r1
 8014e6a:	011b      	lsls	r3, r3, #4
 8014e6c:	4413      	add	r3, r2
 8014e6e:	3303      	adds	r3, #3
 8014e70:	781a      	ldrb	r2, [r3, #0]
 8014e72:	683b      	ldr	r3, [r7, #0]
 8014e74:	70da      	strb	r2, [r3, #3]
		message->flag = this->messages[this->idx_read].flag;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8014e7c:	4619      	mov	r1, r3
 8014e7e:	687a      	ldr	r2, [r7, #4]
 8014e80:	460b      	mov	r3, r1
 8014e82:	00db      	lsls	r3, r3, #3
 8014e84:	440b      	add	r3, r1
 8014e86:	011b      	lsls	r3, r3, #4
 8014e88:	4413      	add	r3, r2
 8014e8a:	3304      	adds	r3, #4
 8014e8c:	781a      	ldrb	r2, [r3, #0]
 8014e8e:	683b      	ldr	r3, [r7, #0]
 8014e90:	711a      	strb	r2, [r3, #4]
		message->cmd = this->messages[this->idx_read].cmd;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8014e98:	4619      	mov	r1, r3
 8014e9a:	687a      	ldr	r2, [r7, #4]
 8014e9c:	460b      	mov	r3, r1
 8014e9e:	00db      	lsls	r3, r3, #3
 8014ea0:	440b      	add	r3, r1
 8014ea2:	011b      	lsls	r3, r3, #4
 8014ea4:	4413      	add	r3, r2
 8014ea6:	781a      	ldrb	r2, [r3, #0]
 8014ea8:	683b      	ldr	r3, [r7, #0]
 8014eaa:	701a      	strb	r2, [r3, #0]
		message->len = this->messages[this->idx_read].len;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8014eb2:	4619      	mov	r1, r3
 8014eb4:	687a      	ldr	r2, [r7, #4]
 8014eb6:	460b      	mov	r3, r1
 8014eb8:	00db      	lsls	r3, r3, #3
 8014eba:	440b      	add	r3, r1
 8014ebc:	011b      	lsls	r3, r3, #4
 8014ebe:	4413      	add	r3, r2
 8014ec0:	330c      	adds	r3, #12
 8014ec2:	881a      	ldrh	r2, [r3, #0]
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	819a      	strh	r2, [r3, #12]
		for (int i = 0; i<message->len; i++){
 8014ec8:	2300      	movs	r3, #0
 8014eca:	60fb      	str	r3, [r7, #12]
 8014ecc:	e016      	b.n	8014efc <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0xfe>
			message->data_ptr[i] = this->messages[this->idx_read].data_ptr[i];
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8014ed4:	4619      	mov	r1, r3
 8014ed6:	687a      	ldr	r2, [r7, #4]
 8014ed8:	460b      	mov	r3, r1
 8014eda:	00db      	lsls	r3, r3, #3
 8014edc:	440b      	add	r3, r1
 8014ede:	011b      	lsls	r3, r3, #4
 8014ee0:	4413      	add	r3, r2
 8014ee2:	3308      	adds	r3, #8
 8014ee4:	681a      	ldr	r2, [r3, #0]
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	441a      	add	r2, r3
 8014eea:	683b      	ldr	r3, [r7, #0]
 8014eec:	6899      	ldr	r1, [r3, #8]
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	440b      	add	r3, r1
 8014ef2:	7812      	ldrb	r2, [r2, #0]
 8014ef4:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i<message->len; i++){
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	3301      	adds	r3, #1
 8014efa:	60fb      	str	r3, [r7, #12]
 8014efc:	683b      	ldr	r3, [r7, #0]
 8014efe:	899b      	ldrh	r3, [r3, #12]
 8014f00:	461a      	mov	r2, r3
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	4293      	cmp	r3, r2
 8014f06:	dbe2      	blt.n	8014ece <_ZN22core_comm_MessageQueueILi10ELi128EE4readEP23core_comm_SerialMessage+0xd0>
		this->inc_read();
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	f000 fa7e 	bl	801540a <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv>
		return 1;
 8014f0e:	2301      	movs	r3, #1
	}
 8014f10:	4618      	mov	r0, r3
 8014f12:	3710      	adds	r7, #16
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}

08014f18 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>:
	R call(A argument){
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	6039      	str	r1, [r7, #0]
		return this->_fp(argument);
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	3308      	adds	r3, #8
 8014f26:	6839      	ldr	r1, [r7, #0]
 8014f28:	4618      	mov	r0, r3
 8014f2a:	f000 fa8f 	bl	801544c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEclES1_>
 8014f2e:	bf00      	nop
	}
 8014f30:	3708      	adds	r7, #8
 8014f32:	46bd      	mov	sp, r7
 8014f34:	bd80      	pop	{r7, pc}

08014f36 <_ZN30core_hardware_UART_callbacks_tC1Ev>:
typedef struct core_hardware_UART_callbacks_t {
 8014f36:	b580      	push	{r7, lr}
 8014f38:	b082      	sub	sp, #8
 8014f3a:	af00      	add	r7, sp, #0
 8014f3c:	6078      	str	r0, [r7, #4]
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	4618      	mov	r0, r3
 8014f42:	f7ff fd75 	bl	8014a30 <_ZN19core_utils_CallbackIvvEC1Ev>
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	4618      	mov	r0, r3
 8014f4a:	3708      	adds	r7, #8
 8014f4c:	46bd      	mov	sp, r7
 8014f4e:	bd80      	pop	{r7, pc}

08014f50 <_ZN18core_hardware_UARTILi10ELi128EEC1Ev>:

template<int num_buffers, int size_buffers>
class core_hardware_UART: public UART {
public:

	core_hardware_UART() {
 8014f50:	b580      	push	{r7, lr}
 8014f52:	b082      	sub	sp, #8
 8014f54:	af00      	add	r7, sp, #0
 8014f56:	6078      	str	r0, [r7, #4]
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	f7ff fb56 	bl	801460c <_ZN4UARTC1Ev>
 8014f60:	4a16      	ldr	r2, [pc, #88]	@ (8014fbc <_ZN18core_hardware_UARTILi10ELi128EEC1Ev+0x6c>)
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	601a      	str	r2, [r3, #0]
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	2200      	movs	r2, #0
 8014f6a:	711a      	strb	r2, [r3, #4]
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	3305      	adds	r3, #5
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7ff fd8b 	bl	8014a8c <_ZN25core_hardware_UART_configC1Ev>
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	3310      	adds	r3, #16
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f000 fa73 	bl	8015466 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8014f86:	4618      	mov	r0, r3
 8014f88:	f000 fa6d 	bl	8015466 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f503 632c 	add.w	r3, r3, #2752	@ 0xac0
 8014f92:	4618      	mov	r0, r3
 8014f94:	f7ff ffcf 	bl	8014f36 <_ZN30core_hardware_UART_callbacks_tC1Ev>
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f603 33f4 	addw	r3, r3, #3060	@ 0xbf4
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f000 fa85 	bl	80154ae <_ZN17core_utils_BufferILi128EEC1Ev>
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	f603 437c 	addw	r3, r3, #3196	@ 0xc7c
 8014faa:	4618      	mov	r0, r3
 8014fac:	f000 fa7f 	bl	80154ae <_ZN17core_utils_BufferILi128EEC1Ev>

	}
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	3708      	adds	r7, #8
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}
 8014fba:	bf00      	nop
 8014fbc:	0802341c 	.word	0x0802341c

08014fc0 <_ZN19core_utils_CallbackIvPvEC1Ev>:
	core_utils_Callback() {
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	4618      	mov	r0, r3
 8014fcc:	f7fe ffde 	bl	8013f8c <_ZN8CallbackC1Ev>
 8014fd0:	4a09      	ldr	r2, [pc, #36]	@ (8014ff8 <_ZN19core_utils_CallbackIvPvEC1Ev+0x38>)
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	601a      	str	r2, [r3, #0]
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	2200      	movs	r2, #0
 8014fda:	711a      	strb	r2, [r3, #4]
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	3308      	adds	r3, #8
 8014fe0:	2100      	movs	r1, #0
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f000 f97d 	bl	80152e2 <_ZN26core_utils_FunctionPointerIvPvEC1EPFvS0_E>
		this->registered = 0;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2200      	movs	r2, #0
 8014fec:	711a      	strb	r2, [r3, #4]
	}
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	3708      	adds	r7, #8
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}
 8014ff8:	08023450 	.word	0x08023450

08014ffc <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b082      	sub	sp, #8
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
 8015004:	6039      	str	r1, [r7, #0]
        attach(function);
 8015006:	6839      	ldr	r1, [r7, #0]
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f000 fa68 	bl	80154de <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachEPFvS1_E>
    }
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	4618      	mov	r0, r3
 8015012:	3708      	adds	r7, #8
 8015014:	46bd      	mov	sp, r7
 8015016:	bd80      	pop	{r7, pc}

08015018 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config>:
	void init(UART_HandleTypeDef *huart) {
		this->init(huart, core_hardware_uart_std_config);
	}

	/* ------------------------------------------------------------------------- */
	void init(UART_HandleTypeDef *huart, core_hardware_UART_config config) {
 8015018:	b580      	push	{r7, lr}
 801501a:	b084      	sub	sp, #16
 801501c:	af00      	add	r7, sp, #0
 801501e:	60f8      	str	r0, [r7, #12]
 8015020:	60b9      	str	r1, [r7, #8]
 8015022:	607a      	str	r2, [r7, #4]

		this->huart = huart;
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	68ba      	ldr	r2, [r7, #8]
 8015028:	60da      	str	r2, [r3, #12]

		this->config = config;
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	3305      	adds	r3, #5
 801502e:	1d3a      	adds	r2, r7, #4
 8015030:	6810      	ldr	r0, [r2, #0]
 8015032:	6018      	str	r0, [r3, #0]
		if (this->huart == NULL) {
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	68db      	ldr	r3, [r3, #12]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d102      	bne.n	8015042 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x2a>
			core_ErrorHandler(1);
 801503c:	2001      	movs	r0, #1
 801503e:	f00a fef2 	bl	801fe26 <_Z17core_ErrorHandleri>
		}
		HAL_UART_RegisterRxEventCallback(this->huart, uartRxCmpltDMA_callback);
 8015042:	68fb      	ldr	r3, [r7, #12]
 8015044:	68db      	ldr	r3, [r3, #12]
 8015046:	495a      	ldr	r1, [pc, #360]	@ (80151b0 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x198>)
 8015048:	4618      	mov	r0, r3
 801504a:	f7f7 f8df 	bl	800c20c <HAL_UART_RegisterRxEventCallback>
		__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	68db      	ldr	r3, [r3, #12]
 8015052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	4a56      	ldr	r2, [pc, #344]	@ (80151b4 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x19c>)
 801505a:	4293      	cmp	r3, r2
 801505c:	d077      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	68db      	ldr	r3, [r3, #12]
 8015062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	4a53      	ldr	r2, [pc, #332]	@ (80151b8 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a0>)
 801506a:	4293      	cmp	r3, r2
 801506c:	d06f      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	68db      	ldr	r3, [r3, #12]
 8015072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	4a50      	ldr	r2, [pc, #320]	@ (80151bc <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a4>)
 801507a:	4293      	cmp	r3, r2
 801507c:	d067      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	68db      	ldr	r3, [r3, #12]
 8015082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	4a4d      	ldr	r2, [pc, #308]	@ (80151c0 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1a8>)
 801508a:	4293      	cmp	r3, r2
 801508c:	d05f      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	68db      	ldr	r3, [r3, #12]
 8015092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	4a4a      	ldr	r2, [pc, #296]	@ (80151c4 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1ac>)
 801509a:	4293      	cmp	r3, r2
 801509c:	d057      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	68db      	ldr	r3, [r3, #12]
 80150a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	4a47      	ldr	r2, [pc, #284]	@ (80151c8 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b0>)
 80150aa:	4293      	cmp	r3, r2
 80150ac:	d04f      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	68db      	ldr	r3, [r3, #12]
 80150b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80150b6:	681b      	ldr	r3, [r3, #0]
 80150b8:	4a44      	ldr	r2, [pc, #272]	@ (80151cc <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b4>)
 80150ba:	4293      	cmp	r3, r2
 80150bc:	d047      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	68db      	ldr	r3, [r3, #12]
 80150c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	4a41      	ldr	r2, [pc, #260]	@ (80151d0 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1b8>)
 80150ca:	4293      	cmp	r3, r2
 80150cc:	d03f      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	68db      	ldr	r3, [r3, #12]
 80150d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	4a3e      	ldr	r2, [pc, #248]	@ (80151d4 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1bc>)
 80150da:	4293      	cmp	r3, r2
 80150dc:	d037      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	68db      	ldr	r3, [r3, #12]
 80150e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	4a3b      	ldr	r2, [pc, #236]	@ (80151d8 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c0>)
 80150ea:	4293      	cmp	r3, r2
 80150ec:	d02f      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	68db      	ldr	r3, [r3, #12]
 80150f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	4a38      	ldr	r2, [pc, #224]	@ (80151dc <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c4>)
 80150fa:	4293      	cmp	r3, r2
 80150fc:	d027      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	68db      	ldr	r3, [r3, #12]
 8015102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	4a35      	ldr	r2, [pc, #212]	@ (80151e0 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1c8>)
 801510a:	4293      	cmp	r3, r2
 801510c:	d01f      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	68db      	ldr	r3, [r3, #12]
 8015112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	4a32      	ldr	r2, [pc, #200]	@ (80151e4 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1cc>)
 801511a:	4293      	cmp	r3, r2
 801511c:	d017      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	68db      	ldr	r3, [r3, #12]
 8015122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	4a2f      	ldr	r2, [pc, #188]	@ (80151e8 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d0>)
 801512a:	4293      	cmp	r3, r2
 801512c:	d00f      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	68db      	ldr	r3, [r3, #12]
 8015132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	4a2c      	ldr	r2, [pc, #176]	@ (80151ec <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d4>)
 801513a:	4293      	cmp	r3, r2
 801513c:	d007      	beq.n	801514e <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x136>
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	68db      	ldr	r3, [r3, #12]
 8015142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015146:	681b      	ldr	r3, [r3, #0]
 8015148:	4a29      	ldr	r2, [pc, #164]	@ (80151f0 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1d8>)
 801514a:	4293      	cmp	r3, r2
 801514c:	d10e      	bne.n	801516c <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x154>
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	68db      	ldr	r3, [r3, #12]
 8015152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	681a      	ldr	r2, [r3, #0]
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	68db      	ldr	r3, [r3, #12]
 801515e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	f022 0208 	bic.w	r2, r2, #8
 8015168:	601a      	str	r2, [r3, #0]
 801516a:	e00d      	b.n	8015188 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x170>
 801516c:	68fb      	ldr	r3, [r7, #12]
 801516e:	68db      	ldr	r3, [r3, #12]
 8015170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	681a      	ldr	r2, [r3, #0]
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	68db      	ldr	r3, [r3, #12]
 801517c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	f022 0204 	bic.w	r2, r2, #4
 8015186:	601a      	str	r2, [r3, #0]

		this->state = CORE_HARDWARE_UART_STATE_INIT;
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	2201      	movs	r2, #1
 801518c:	711a      	strb	r2, [r3, #4]

		uarts[num_uarts] = this;
 801518e:	4b19      	ldr	r3, [pc, #100]	@ (80151f4 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 8015190:	781b      	ldrb	r3, [r3, #0]
 8015192:	4619      	mov	r1, r3
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	4a18      	ldr	r2, [pc, #96]	@ (80151f8 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1e0>)
 8015198:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		num_uarts++;
 801519c:	4b15      	ldr	r3, [pc, #84]	@ (80151f4 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 801519e:	781b      	ldrb	r3, [r3, #0]
 80151a0:	3301      	adds	r3, #1
 80151a2:	b2da      	uxtb	r2, r3
 80151a4:	4b13      	ldr	r3, [pc, #76]	@ (80151f4 <_ZN18core_hardware_UARTILi10ELi128EE4initEP20__UART_HandleTypeDef25core_hardware_UART_config+0x1dc>)
 80151a6:	701a      	strb	r2, [r3, #0]
	}
 80151a8:	bf00      	nop
 80151aa:	3710      	adds	r7, #16
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd80      	pop	{r7, pc}
 80151b0:	0801e825 	.word	0x0801e825
 80151b4:	40020010 	.word	0x40020010
 80151b8:	40020028 	.word	0x40020028
 80151bc:	40020040 	.word	0x40020040
 80151c0:	40020058 	.word	0x40020058
 80151c4:	40020070 	.word	0x40020070
 80151c8:	40020088 	.word	0x40020088
 80151cc:	400200a0 	.word	0x400200a0
 80151d0:	400200b8 	.word	0x400200b8
 80151d4:	40020410 	.word	0x40020410
 80151d8:	40020428 	.word	0x40020428
 80151dc:	40020440 	.word	0x40020440
 80151e0:	40020458 	.word	0x40020458
 80151e4:	40020470 	.word	0x40020470
 80151e8:	40020488 	.word	0x40020488
 80151ec:	400204a0 	.word	0x400204a0
 80151f0:	400204b8 	.word	0x400204b8
 80151f4:	2401e068 	.word	0x2401e068
 80151f8:	2401e054 	.word	0x2401e054

080151fc <_ZN23core_comm_UartInterfaceILi10ELi128EE18_rxNotify_callbackEv>:

		this->_thread_id = osThreadNew(core_comm_SerialSocket_RTOS_Task, this,
				&task_attributes);
	}
	/* ------------------------------------------------------------- */
	void _rxNotify_callback() {
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b084      	sub	sp, #16
 8015200:	af00      	add	r7, sp, #0
 8015202:	6078      	str	r0, [r7, #4]
		if (this->_task_id != NULL) {
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801520a:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 801520e:	2b00      	cmp	r3, #0
 8015210:	d017      	beq.n	8015242 <_ZN23core_comm_UartInterfaceILi10ELi128EE18_rxNotify_callbackEv+0x46>
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8015212:	2300      	movs	r3, #0
 8015214:	60fb      	str	r3, [r7, #12]
			vTaskNotifyGiveFromISR(this->_task_id, &xHigherPriorityTaskWoken);
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801521c:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
 8015220:	f107 020c 	add.w	r2, r7, #12
 8015224:	4611      	mov	r1, r2
 8015226:	4618      	mov	r0, r3
 8015228:	f7fd fd66 	bl	8012cf8 <vTaskNotifyGiveFromISR>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	2b00      	cmp	r3, #0
 8015230:	d007      	beq.n	8015242 <_ZN23core_comm_UartInterfaceILi10ELi128EE18_rxNotify_callbackEv+0x46>
 8015232:	4b06      	ldr	r3, [pc, #24]	@ (801524c <_ZN23core_comm_UartInterfaceILi10ELi128EE18_rxNotify_callbackEv+0x50>)
 8015234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015238:	601a      	str	r2, [r3, #0]
 801523a:	f3bf 8f4f 	dsb	sy
 801523e:	f3bf 8f6f 	isb	sy
		}
	}
 8015242:	bf00      	nop
 8015244:	3710      	adds	r7, #16
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}
 801524a:	bf00      	nop
 801524c:	e000ed04 	.word	0xe000ed04

08015250 <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
 8015250:	b5b0      	push	{r4, r5, r7, lr}
 8015252:	b08a      	sub	sp, #40	@ 0x28
 8015254:	af00      	add	r7, sp, #0
 8015256:	60f8      	str	r0, [r7, #12]
 8015258:	60b9      	str	r1, [r7, #8]
 801525a:	4639      	mov	r1, r7
 801525c:	e881 000c 	stmia.w	r1, {r2, r3}
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	4618      	mov	r0, r3
 8015264:	f7fe fe92 	bl	8013f8c <_ZN8CallbackC1Ev>
 8015268:	4a12      	ldr	r2, [pc, #72]	@ (80152b4 <_ZN19core_utils_CallbackIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE+0x64>)
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	601a      	str	r2, [r3, #0]
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	2200      	movs	r2, #0
 8015272:	711a      	strb	r2, [r3, #4]
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	3308      	adds	r3, #8
 8015278:	2100      	movs	r1, #0
 801527a:	4618      	mov	r0, r3
 801527c:	f7ff f88f 	bl	801439e <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<R,void>(object, member);
 8015280:	f107 0010 	add.w	r0, r7, #16
 8015284:	463b      	mov	r3, r7
 8015286:	cb0c      	ldmia	r3, {r2, r3}
 8015288:	68b9      	ldr	r1, [r7, #8]
 801528a:	f000 f939 	bl	8015500 <_ZN26core_utils_FunctionPointerIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	f103 0408 	add.w	r4, r3, #8
 8015294:	f107 0510 	add.w	r5, r7, #16
 8015298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801529a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801529c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80152a0:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	2201      	movs	r2, #1
 80152a8:	711a      	strb	r2, [r3, #4]
	}
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	4618      	mov	r0, r3
 80152ae:	3728      	adds	r7, #40	@ 0x28
 80152b0:	46bd      	mov	sp, r7
 80152b2:	bdb0      	pop	{r4, r5, r7, pc}
 80152b4:	080233c4 	.word	0x080233c4

080152b8 <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE>:

		this->startReceiveDMA();
	}

	/* ------------------------------------------------------------------------- */
	void registerCallback(core_hardware_UART_CB_ID callback_id,
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b084      	sub	sp, #16
 80152bc:	af00      	add	r7, sp, #0
 80152be:	60f8      	str	r0, [r7, #12]
 80152c0:	460b      	mov	r3, r1
 80152c2:	607a      	str	r2, [r7, #4]
 80152c4:	72fb      	strb	r3, [r7, #11]
			core_utils_Callback<void, void> callback) {
		if (callback_id == CORE_HARDWARE_UART_CB_RX) {
 80152c6:	7afb      	ldrb	r3, [r7, #11]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d106      	bne.n	80152da <_ZN18core_hardware_UARTILi10ELi128EE16registerCallbackE24core_hardware_UART_CB_ID19core_utils_CallbackIvvE+0x22>
			this->_callbacks.rx = callback;
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	f503 632c 	add.w	r3, r3, #2752	@ 0xac0
 80152d2:	6879      	ldr	r1, [r7, #4]
 80152d4:	4618      	mov	r0, r3
 80152d6:	f7ff f971 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		}
	}
 80152da:	bf00      	nop
 80152dc:	3710      	adds	r7, #16
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}

080152e2 <_ZN26core_utils_FunctionPointerIvPvEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 80152e2:	b580      	push	{r7, lr}
 80152e4:	b082      	sub	sp, #8
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	6078      	str	r0, [r7, #4]
 80152ea:	6039      	str	r1, [r7, #0]
        attach(function);
 80152ec:	6839      	ldr	r1, [r7, #0]
 80152ee:	6878      	ldr	r0, [r7, #4]
 80152f0:	f000 f919 	bl	8015526 <_ZN26core_utils_FunctionPointerIvPvE6attachEPFvS0_E>
    }
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	4618      	mov	r0, r3
 80152f8:	3708      	adds	r7, #8
 80152fa:	46bd      	mov	sp, r7
 80152fc:	bd80      	pop	{r7, pc}

080152fe <_ZN26core_utils_FunctionPointerIvPvEC1I24TWIPR_UART_CommunicationEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 80152fe:	b580      	push	{r7, lr}
 8015300:	b084      	sub	sp, #16
 8015302:	af00      	add	r7, sp, #0
 8015304:	60f8      	str	r0, [r7, #12]
 8015306:	60b9      	str	r1, [r7, #8]
 8015308:	4639      	mov	r1, r7
 801530a:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 801530e:	463b      	mov	r3, r7
 8015310:	cb0c      	ldmia	r3, {r2, r3}
 8015312:	68b9      	ldr	r1, [r7, #8]
 8015314:	68f8      	ldr	r0, [r7, #12]
 8015316:	f000 f917 	bl	8015548 <_ZN26core_utils_FunctionPointerIvPvE6attachI24TWIPR_UART_CommunicationEEvPT_MS4_FvS0_E>
    }
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	4618      	mov	r0, r3
 801531e:	3710      	adds	r7, #16
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}

08015324 <_ZN18core_hardware_UARTILi10ELi128EE5startEv>:
	void start() {
 8015324:	b580      	push	{r7, lr}
 8015326:	b082      	sub	sp, #8
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
		if (this->state != CORE_HARDWARE_UART_STATE_INIT) {
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	791b      	ldrb	r3, [r3, #4]
 8015330:	2b01      	cmp	r3, #1
 8015332:	d002      	beq.n	801533a <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x16>
			core_ErrorHandler(2);
 8015334:	2002      	movs	r0, #2
 8015336:	f00a fd76 	bl	801fe26 <_Z17core_ErrorHandleri>
		if (this->config.mode == CORE_HARDWARE_UART_MODE_DMA) {
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	795b      	ldrb	r3, [r3, #5]
 801533e:	2b02      	cmp	r3, #2
 8015340:	d103      	bne.n	801534a <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x26>
			this->startReceiveDMA();
 8015342:	6878      	ldr	r0, [r7, #4]
 8015344:	f000 f91e 	bl	8015584 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>
 8015348:	e002      	b.n	8015350 <_ZN18core_hardware_UARTILi10ELi128EE5startEv+0x2c>
			core_ErrorHandler(3);
 801534a:	2003      	movs	r0, #3
 801534c:	f00a fd6b 	bl	801fe26 <_Z17core_ErrorHandleri>
		this->state = CORE_HARDWARE_UART_STATE_RUN;
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	2202      	movs	r2, #2
 8015354:	711a      	strb	r2, [r3, #4]
	}
 8015356:	bf00      	nop
 8015358:	3708      	adds	r7, #8
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}
	...

08015360 <_ZN23core_comm_UartInterfaceILi10ELi128EE10_startRTOSEv>:
	void _startRTOS() {
 8015360:	b580      	push	{r7, lr}
 8015362:	b08c      	sub	sp, #48	@ 0x30
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
		const osThreadAttr_t task_attributes =
 8015368:	f107 030c 	add.w	r3, r7, #12
 801536c:	2224      	movs	r2, #36	@ 0x24
 801536e:	2100      	movs	r1, #0
 8015370:	4618      	mov	r0, r3
 8015372:	f00b ffe3 	bl	802133c <memset>
 8015376:	4b0c      	ldr	r3, [pc, #48]	@ (80153a8 <_ZN23core_comm_UartInterfaceILi10ELi128EE10_startRTOSEv+0x48>)
 8015378:	60fb      	str	r3, [r7, #12]
 801537a:	f241 0310 	movw	r3, #4112	@ 0x1010
 801537e:	623b      	str	r3, [r7, #32]
 8015380:	232c      	movs	r3, #44	@ 0x2c
 8015382:	627b      	str	r3, [r7, #36]	@ 0x24
		this->_thread_id = osThreadNew(core_comm_SerialSocket_RTOS_Task, this,
 8015384:	f107 030c 	add.w	r3, r7, #12
 8015388:	461a      	mov	r2, r3
 801538a:	6879      	ldr	r1, [r7, #4]
 801538c:	4807      	ldr	r0, [pc, #28]	@ (80153ac <_ZN23core_comm_UartInterfaceILi10ELi128EE10_startRTOSEv+0x4c>)
 801538e:	f7fa fce6 	bl	800fd5e <osThreadNew>
 8015392:	4602      	mov	r2, r0
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801539a:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
	}
 801539e:	bf00      	nop
 80153a0:	3730      	adds	r7, #48	@ 0x30
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}
 80153a6:	bf00      	nop
 80153a8:	08023284 	.word	0x08023284
 80153ac:	0801dc0b 	.word	0x0801dc0b

080153b0 <_ZN18core_hardware_UARTILi10ELi128EE5resetEv>:
	void reset() {
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b082      	sub	sp, #8
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
		HAL_UART_Abort(this->huart);
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	68db      	ldr	r3, [r3, #12]
 80153bc:	4618      	mov	r0, r3
 80153be:	f7f7 f959 	bl	800c674 <HAL_UART_Abort>
		this->state = CORE_HARDWARE_UART_STATE_INIT;
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	2201      	movs	r2, #1
 80153c6:	711a      	strb	r2, [r3, #4]
		this->start();
 80153c8:	6878      	ldr	r0, [r7, #4]
 80153ca:	f7ff ffab 	bl	8015324 <_ZN18core_hardware_UARTILi10ELi128EE5startEv>
	}
 80153ce:	bf00      	nop
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}

080153d6 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht>:
	void send(uint8_t *buffer, uint16_t len) {
 80153d6:	b580      	push	{r7, lr}
 80153d8:	b084      	sub	sp, #16
 80153da:	af00      	add	r7, sp, #0
 80153dc:	60f8      	str	r0, [r7, #12]
 80153de:	60b9      	str	r1, [r7, #8]
 80153e0:	4613      	mov	r3, r2
 80153e2:	80fb      	strh	r3, [r7, #6]
		if (this->status != CORE_COMM_SERIAL_SOCKET_STATE_RUN) {
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	7adb      	ldrb	r3, [r3, #11]
 80153e8:	2b02      	cmp	r3, #2
 80153ea:	d002      	beq.n	80153f2 <_ZN23core_comm_UartInterfaceILi10ELi128EE4sendEPht+0x1c>
			core_ErrorHandler(1);
 80153ec:	2001      	movs	r0, #1
 80153ee:	f00a fd1a 	bl	801fe26 <_Z17core_ErrorHandleri>
		this->_uart.send(buffer, len);
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 80153f8:	88fa      	ldrh	r2, [r7, #6]
 80153fa:	68b9      	ldr	r1, [r7, #8]
 80153fc:	4618      	mov	r0, r3
 80153fe:	f000 f999 	bl	8015734 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht>
	}
 8015402:	bf00      	nop
 8015404:	3710      	adds	r7, #16
 8015406:	46bd      	mov	sp, r7
 8015408:	bd80      	pop	{r7, pc}

0801540a <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv>:
	uint8_t inc_read() {
 801540a:	b480      	push	{r7}
 801540c:	b083      	sub	sp, #12
 801540e:	af00      	add	r7, sp, #0
 8015410:	6078      	str	r0, [r7, #4]
		this->idx_read++;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
 8015418:	3301      	adds	r3, #1
 801541a:	b2da      	uxtb	r2, r3
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	f883 25a0 	strb.w	r2, [r3, #1440]	@ 0x5a0
		if (this->idx_read == this->len) {
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	f893 25a0 	ldrb.w	r2, [r3, #1440]	@ 0x5a0
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	f893 35a3 	ldrb.w	r3, [r3, #1443]	@ 0x5a3
 801542e:	429a      	cmp	r2, r3
 8015430:	d103      	bne.n	801543a <_ZN22core_comm_MessageQueueILi10ELi128EE8inc_readEv+0x30>
			this->idx_read = 0;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	2200      	movs	r2, #0
 8015436:	f883 25a0 	strb.w	r2, [r3, #1440]	@ 0x5a0
		return this->idx_read;
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	f893 35a0 	ldrb.w	r3, [r3, #1440]	@ 0x5a0
	}
 8015440:	4618      	mov	r0, r3
 8015442:	370c      	adds	r7, #12
 8015444:	46bd      	mov	sp, r7
 8015446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544a:	4770      	bx	lr

0801544c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEclES1_>:
    R operator ()(A1 a) {
 801544c:	b580      	push	{r7, lr}
 801544e:	b082      	sub	sp, #8
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
 8015454:	6039      	str	r1, [r7, #0]
        return call(a);
 8015456:	6839      	ldr	r1, [r7, #0]
 8015458:	6878      	ldr	r0, [r7, #4]
 801545a:	f000 f9bb 	bl	80157d4 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_>
 801545e:	bf00      	nop
    }
 8015460:	3708      	adds	r7, #8
 8015462:	46bd      	mov	sp, r7
 8015464:	bd80      	pop	{r7, pc}

08015466 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev>:
};

template<int num, int size>
class core_utils_BufferQueue {
public:
	core_utils_BufferQueue() {
 8015466:	b5b0      	push	{r4, r5, r7, lr}
 8015468:	b082      	sub	sp, #8
 801546a:	af00      	add	r7, sp, #0
 801546c:	6078      	str	r0, [r7, #4]
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	3304      	adds	r3, #4
 8015472:	2409      	movs	r4, #9
 8015474:	461d      	mov	r5, r3
 8015476:	e004      	b.n	8015482 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev+0x1c>
 8015478:	4628      	mov	r0, r5
 801547a:	f000 f818 	bl	80154ae <_ZN17core_utils_BufferILi128EEC1Ev>
 801547e:	3c01      	subs	r4, #1
 8015480:	3588      	adds	r5, #136	@ 0x88
 8015482:	2c00      	cmp	r4, #0
 8015484:	daf8      	bge.n	8015478 <_ZN22core_utils_BufferQueueILi10ELi128EEC1Ev+0x12>
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	220a      	movs	r2, #10
 801548a:	f883 2554 	strb.w	r2, [r3, #1364]	@ 0x554
		this->idx_read = 0;
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	2200      	movs	r2, #0
 8015492:	f883 2556 	strb.w	r2, [r3, #1366]	@ 0x556
		this->idx_write = 0;
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	2200      	movs	r2, #0
 801549a:	f883 2555 	strb.w	r2, [r3, #1365]	@ 0x555
		this->overflow = 0;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	2200      	movs	r2, #0
 80154a2:	701a      	strb	r2, [r3, #0]
	}
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	4618      	mov	r0, r3
 80154a8:	3708      	adds	r7, #8
 80154aa:	46bd      	mov	sp, r7
 80154ac:	bdb0      	pop	{r4, r5, r7, pc}

080154ae <_ZN17core_utils_BufferILi128EEC1Ev>:
	core_utils_Buffer<size>(){
 80154ae:	b580      	push	{r7, lr}
 80154b0:	b082      	sub	sp, #8
 80154b2:	af00      	add	r7, sp, #0
 80154b4:	6078      	str	r0, [r7, #4]
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	4618      	mov	r0, r3
 80154ba:	f7ff f871 	bl	80145a0 <_ZN6BufferC1Ev>
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	3306      	adds	r3, #6
 80154c2:	2280      	movs	r2, #128	@ 0x80
 80154c4:	2100      	movs	r1, #0
 80154c6:	4618      	mov	r0, r3
 80154c8:	f00b ff38 	bl	802133c <memset>
		this->data_ptr = this->buffer;
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	1d9a      	adds	r2, r3, #6
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	601a      	str	r2, [r3, #0]
	}
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	4618      	mov	r0, r3
 80154d8:	3708      	adds	r7, #8
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}

080154de <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachEPFvS1_E>:
    void attach(R (*function)(A1)) {
 80154de:	b480      	push	{r7}
 80154e0:	b083      	sub	sp, #12
 80154e2:	af00      	add	r7, sp, #0
 80154e4:	6078      	str	r0, [r7, #4]
 80154e6:	6039      	str	r1, [r7, #0]
        _p.function = function;
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	683a      	ldr	r2, [r7, #0]
 80154ec:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	2200      	movs	r2, #0
 80154f2:	615a      	str	r2, [r3, #20]
    }
 80154f4:	bf00      	nop
 80154f6:	370c      	adds	r7, #12
 80154f8:	46bd      	mov	sp, r7
 80154fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fe:	4770      	bx	lr

08015500 <_ZN26core_utils_FunctionPointerIvvEC1I23core_comm_UartInterfaceILi10ELi128EEEEPT_MS4_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8015500:	b580      	push	{r7, lr}
 8015502:	b084      	sub	sp, #16
 8015504:	af00      	add	r7, sp, #0
 8015506:	60f8      	str	r0, [r7, #12]
 8015508:	60b9      	str	r1, [r7, #8]
 801550a:	4639      	mov	r1, r7
 801550c:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8015510:	463b      	mov	r3, r7
 8015512:	cb0c      	ldmia	r3, {r2, r3}
 8015514:	68b9      	ldr	r1, [r7, #8]
 8015516:	68f8      	ldr	r0, [r7, #12]
 8015518:	f000 f984 	bl	8015824 <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE>
    }
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	4618      	mov	r0, r3
 8015520:	3710      	adds	r7, #16
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}

08015526 <_ZN26core_utils_FunctionPointerIvPvE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 8015526:	b480      	push	{r7}
 8015528:	b083      	sub	sp, #12
 801552a:	af00      	add	r7, sp, #0
 801552c:	6078      	str	r0, [r7, #4]
 801552e:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	683a      	ldr	r2, [r7, #0]
 8015534:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2200      	movs	r2, #0
 801553a:	615a      	str	r2, [r3, #20]
    }
 801553c:	bf00      	nop
 801553e:	370c      	adds	r7, #12
 8015540:	46bd      	mov	sp, r7
 8015542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015546:	4770      	bx	lr

08015548 <_ZN26core_utils_FunctionPointerIvPvE6attachI24TWIPR_UART_CommunicationEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 8015548:	b480      	push	{r7}
 801554a:	b085      	sub	sp, #20
 801554c:	af00      	add	r7, sp, #0
 801554e:	60f8      	str	r0, [r7, #12]
 8015550:	60b9      	str	r1, [r7, #8]
 8015552:	4639      	mov	r1, r7
 8015554:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	68ba      	ldr	r2, [r7, #8]
 801555c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	3304      	adds	r3, #4
 8015562:	461a      	mov	r2, r3
 8015564:	463b      	mov	r3, r7
 8015566:	e893 0003 	ldmia.w	r3, {r0, r1}
 801556a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	4a03      	ldr	r2, [pc, #12]	@ (8015580 <_ZN26core_utils_FunctionPointerIvPvE6attachI24TWIPR_UART_CommunicationEEvPT_MS4_FvS0_E+0x38>)
 8015572:	615a      	str	r2, [r3, #20]
    }
 8015574:	bf00      	nop
 8015576:	3714      	adds	r7, #20
 8015578:	46bd      	mov	sp, r7
 801557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557e:	4770      	bx	lr
 8015580:	08015861 	.word	0x08015861

08015584 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>:
	void startReceiveDMA() {
 8015584:	b580      	push	{r7, lr}
 8015586:	b082      	sub	sp, #8
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
		if (this->config.queues) {
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	7a1b      	ldrb	r3, [r3, #8]
 8015590:	2b00      	cmp	r3, #0
 8015592:	f000 80a7 	beq.w	80156e4 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x160>
			HAL_UARTEx_ReceiveToIdle_DMA(this->huart,
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	68d8      	ldr	r0, [r3, #12]
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	f603 33fa 	addw	r3, r3, #3066	@ 0xbfa
 80155a0:	2280      	movs	r2, #128	@ 0x80
 80155a2:	4619      	mov	r1, r3
 80155a4:	f7fa fa73 	bl	800fa8e <HAL_UARTEx_ReceiveToIdle_DMA>
			__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	68db      	ldr	r3, [r3, #12]
 80155ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	4a50      	ldr	r2, [pc, #320]	@ (80156f4 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x170>)
 80155b4:	4293      	cmp	r3, r2
 80155b6:	d077      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	68db      	ldr	r3, [r3, #12]
 80155bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	4a4d      	ldr	r2, [pc, #308]	@ (80156f8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x174>)
 80155c4:	4293      	cmp	r3, r2
 80155c6:	d06f      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	68db      	ldr	r3, [r3, #12]
 80155cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	4a4a      	ldr	r2, [pc, #296]	@ (80156fc <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x178>)
 80155d4:	4293      	cmp	r3, r2
 80155d6:	d067      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	68db      	ldr	r3, [r3, #12]
 80155dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	4a47      	ldr	r2, [pc, #284]	@ (8015700 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x17c>)
 80155e4:	4293      	cmp	r3, r2
 80155e6:	d05f      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	68db      	ldr	r3, [r3, #12]
 80155ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	4a44      	ldr	r2, [pc, #272]	@ (8015704 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x180>)
 80155f4:	4293      	cmp	r3, r2
 80155f6:	d057      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	68db      	ldr	r3, [r3, #12]
 80155fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	4a41      	ldr	r2, [pc, #260]	@ (8015708 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x184>)
 8015604:	4293      	cmp	r3, r2
 8015606:	d04f      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	68db      	ldr	r3, [r3, #12]
 801560c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	4a3e      	ldr	r2, [pc, #248]	@ (801570c <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x188>)
 8015614:	4293      	cmp	r3, r2
 8015616:	d047      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	68db      	ldr	r3, [r3, #12]
 801561c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	4a3b      	ldr	r2, [pc, #236]	@ (8015710 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x18c>)
 8015624:	4293      	cmp	r3, r2
 8015626:	d03f      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	68db      	ldr	r3, [r3, #12]
 801562c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	4a38      	ldr	r2, [pc, #224]	@ (8015714 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x190>)
 8015634:	4293      	cmp	r3, r2
 8015636:	d037      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	68db      	ldr	r3, [r3, #12]
 801563c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	4a35      	ldr	r2, [pc, #212]	@ (8015718 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x194>)
 8015644:	4293      	cmp	r3, r2
 8015646:	d02f      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	68db      	ldr	r3, [r3, #12]
 801564c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	4a32      	ldr	r2, [pc, #200]	@ (801571c <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x198>)
 8015654:	4293      	cmp	r3, r2
 8015656:	d027      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	68db      	ldr	r3, [r3, #12]
 801565c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	4a2f      	ldr	r2, [pc, #188]	@ (8015720 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x19c>)
 8015664:	4293      	cmp	r3, r2
 8015666:	d01f      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	68db      	ldr	r3, [r3, #12]
 801566c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	4a2c      	ldr	r2, [pc, #176]	@ (8015724 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a0>)
 8015674:	4293      	cmp	r3, r2
 8015676:	d017      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	68db      	ldr	r3, [r3, #12]
 801567c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	4a29      	ldr	r2, [pc, #164]	@ (8015728 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a4>)
 8015684:	4293      	cmp	r3, r2
 8015686:	d00f      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	68db      	ldr	r3, [r3, #12]
 801568c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8015690:	681b      	ldr	r3, [r3, #0]
 8015692:	4a26      	ldr	r2, [pc, #152]	@ (801572c <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1a8>)
 8015694:	4293      	cmp	r3, r2
 8015696:	d007      	beq.n	80156a8 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x124>
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	68db      	ldr	r3, [r3, #12]
 801569c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	4a23      	ldr	r2, [pc, #140]	@ (8015730 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x1ac>)
 80156a4:	4293      	cmp	r3, r2
 80156a6:	d10e      	bne.n	80156c6 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x142>
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	68db      	ldr	r3, [r3, #12]
 80156ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	681a      	ldr	r2, [r3, #0]
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	68db      	ldr	r3, [r3, #12]
 80156b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80156bc:	681b      	ldr	r3, [r3, #0]
 80156be:	f022 0208 	bic.w	r2, r2, #8
 80156c2:	601a      	str	r2, [r3, #0]
	}
 80156c4:	e011      	b.n	80156ea <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x166>
			__HAL_DMA_DISABLE_IT(this->huart->hdmarx, DMA_IT_HT);
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	68db      	ldr	r3, [r3, #12]
 80156ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	681a      	ldr	r2, [r3, #0]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	68db      	ldr	r3, [r3, #12]
 80156d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80156da:	681b      	ldr	r3, [r3, #0]
 80156dc:	f022 0204 	bic.w	r2, r2, #4
 80156e0:	601a      	str	r2, [r3, #0]
	}
 80156e2:	e002      	b.n	80156ea <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv+0x166>
			core_ErrorHandler(CORE_ERROR_NOT_IMPLEMENTED);
 80156e4:	2005      	movs	r0, #5
 80156e6:	f00a fb9e 	bl	801fe26 <_Z17core_ErrorHandleri>
	}
 80156ea:	bf00      	nop
 80156ec:	3708      	adds	r7, #8
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}
 80156f2:	bf00      	nop
 80156f4:	40020010 	.word	0x40020010
 80156f8:	40020028 	.word	0x40020028
 80156fc:	40020040 	.word	0x40020040
 8015700:	40020058 	.word	0x40020058
 8015704:	40020070 	.word	0x40020070
 8015708:	40020088 	.word	0x40020088
 801570c:	400200a0 	.word	0x400200a0
 8015710:	400200b8 	.word	0x400200b8
 8015714:	40020410 	.word	0x40020410
 8015718:	40020428 	.word	0x40020428
 801571c:	40020440 	.word	0x40020440
 8015720:	40020458 	.word	0x40020458
 8015724:	40020470 	.word	0x40020470
 8015728:	40020488 	.word	0x40020488
 801572c:	400204a0 	.word	0x400204a0
 8015730:	400204b8 	.word	0x400204b8

08015734 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht>:
	void send(uint8_t *data, uint16_t len) {
 8015734:	b580      	push	{r7, lr}
 8015736:	b086      	sub	sp, #24
 8015738:	af00      	add	r7, sp, #0
 801573a:	60f8      	str	r0, [r7, #12]
 801573c:	60b9      	str	r1, [r7, #8]
 801573e:	4613      	mov	r3, r2
 8015740:	80fb      	strh	r3, [r7, #6]
		if (this->state != CORE_HARDWARE_UART_STATE_RUN) {
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	791b      	ldrb	r3, [r3, #4]
 8015746:	2b02      	cmp	r3, #2
 8015748:	d002      	beq.n	8015750 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x1c>
			core_ErrorHandler(4);
 801574a:	2004      	movs	r0, #4
 801574c:	f00a fb6b 	bl	801fe26 <_Z17core_ErrorHandleri>
		if (this->config.mode != CORE_HARDWARE_UART_MODE_DMA
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	795b      	ldrb	r3, [r3, #5]
 8015754:	2b02      	cmp	r3, #2
 8015756:	d006      	beq.n	8015766 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x32>
				&& this->config.queues != 1) {
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	7a1b      	ldrb	r3, [r3, #8]
 801575c:	2b01      	cmp	r3, #1
 801575e:	d002      	beq.n	8015766 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x32>
			core_ErrorHandler(5);
 8015760:	2005      	movs	r0, #5
 8015762:	f00a fb60 	bl	801fe26 <_Z17core_ErrorHandleri>
		if (this->config.cobs_encode_tx) {
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	79db      	ldrb	r3, [r3, #7]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d022      	beq.n	80157b4 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x80>
			uint8_t len_encode = cobsEncode(data, len, this->_tx_buffer.buffer);
 801576e:	88fb      	ldrh	r3, [r7, #6]
 8015770:	b2d9      	uxtb	r1, r3
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	f603 4382 	addw	r3, r3, #3202	@ 0xc82
 8015778:	461a      	mov	r2, r3
 801577a:	68b8      	ldr	r0, [r7, #8]
 801577c:	f00a fa69 	bl	801fc52 <_Z10cobsEncodePhhS_>
 8015780:	4603      	mov	r3, r0
 8015782:	75fb      	strb	r3, [r7, #23]
			this->_tx_buffer.buffer[len_encode] = 0x00;
 8015784:	7dfb      	ldrb	r3, [r7, #23]
 8015786:	68fa      	ldr	r2, [r7, #12]
 8015788:	4413      	add	r3, r2
 801578a:	2200      	movs	r2, #0
 801578c:	f883 2c82 	strb.w	r2, [r3, #3202]	@ 0xc82
			this->_tx_buffer.len = len_encode + 1;
 8015790:	7dfb      	ldrb	r3, [r7, #23]
 8015792:	b29b      	uxth	r3, r3
 8015794:	3301      	adds	r3, #1
 8015796:	b29a      	uxth	r2, r3
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	f8a3 2c80 	strh.w	r2, [r3, #3200]	@ 0xc80
			this->tx_queue.write(&this->_tx_buffer);
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	f503 62ad 	add.w	r2, r3, #1384	@ 0x568
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	f603 437c 	addw	r3, r3, #3196	@ 0xc7c
 80157aa:	4619      	mov	r1, r3
 80157ac:	4610      	mov	r0, r2
 80157ae:	f000 f881 	bl	80158b4 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>
 80157b2:	e008      	b.n	80157c6 <_ZN18core_hardware_UARTILi10ELi128EE4sendEPht+0x92>
			this->tx_queue.write(data, (uint8_t) len);
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 80157ba:	88fa      	ldrh	r2, [r7, #6]
 80157bc:	b2d2      	uxtb	r2, r2
 80157be:	68b9      	ldr	r1, [r7, #8]
 80157c0:	4618      	mov	r0, r3
 80157c2:	f000 f8b3 	bl	801592c <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht>
		this->flushTx();
 80157c6:	68f8      	ldr	r0, [r7, #12]
 80157c8:	f000 f8e9 	bl	801599e <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv>
	}
 80157cc:	bf00      	nop
 80157ce:	3718      	adds	r7, #24
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}

080157d4 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_>:
    R call(A1 a) {
 80157d4:	b580      	push	{r7, lr}
 80157d6:	b082      	sub	sp, #8
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
 80157dc:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	695b      	ldr	r3, [r3, #20]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d108      	bne.n	80157f8 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x24>
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d004      	beq.n	80157f8 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x24>
           return _p.function(a);
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	6838      	ldr	r0, [r7, #0]
 80157f4:	4798      	blx	r3
 80157f6:	e011      	b.n	801581c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x48>
        } else if (_membercaller && _p.object) {
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	695b      	ldr	r3, [r3, #20]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d00c      	beq.n	801581a <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x46>
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d008      	beq.n	801581a <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x46>
           return _membercaller(_p.object, _member, a);
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	695b      	ldr	r3, [r3, #20]
 801580c:	687a      	ldr	r2, [r7, #4]
 801580e:	6810      	ldr	r0, [r2, #0]
 8015810:	687a      	ldr	r2, [r7, #4]
 8015812:	1d11      	adds	r1, r2, #4
 8015814:	683a      	ldr	r2, [r7, #0]
 8015816:	4798      	blx	r3
 8015818:	e000      	b.n	801581c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE4callES1_+0x48>
        return (R)0;
 801581a:	bf00      	nop
    }
 801581c:	3708      	adds	r7, #8
 801581e:	46bd      	mov	sp, r7
 8015820:	bd80      	pop	{r7, pc}
	...

08015824 <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 8015824:	b480      	push	{r7}
 8015826:	b085      	sub	sp, #20
 8015828:	af00      	add	r7, sp, #0
 801582a:	60f8      	str	r0, [r7, #12]
 801582c:	60b9      	str	r1, [r7, #8]
 801582e:	4639      	mov	r1, r7
 8015830:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	68ba      	ldr	r2, [r7, #8]
 8015838:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 801583a:	68fb      	ldr	r3, [r7, #12]
 801583c:	3304      	adds	r3, #4
 801583e:	461a      	mov	r2, r3
 8015840:	463b      	mov	r3, r7
 8015842:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015846:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	4a03      	ldr	r2, [pc, #12]	@ (801585c <_ZN26core_utils_FunctionPointerIvvE6attachI23core_comm_UartInterfaceILi10ELi128EEEEvPT_MS4_FvvE+0x38>)
 801584e:	615a      	str	r2, [r3, #20]
    }
 8015850:	bf00      	nop
 8015852:	3714      	adds	r7, #20
 8015854:	46bd      	mov	sp, r7
 8015856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801585a:	4770      	bx	lr
 801585c:	080159cd 	.word	0x080159cd

08015860 <_ZN26core_utils_FunctionPointerIvPvE12membercallerI24TWIPR_UART_CommunicationEEvS0_PjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8015860:	b580      	push	{r7, lr}
 8015862:	b086      	sub	sp, #24
 8015864:	af00      	add	r7, sp, #0
 8015866:	60f8      	str	r0, [r7, #12]
 8015868:	60b9      	str	r1, [r7, #8]
 801586a:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8015870:	68bb      	ldr	r3, [r7, #8]
 8015872:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8015874:	693b      	ldr	r3, [r7, #16]
 8015876:	685b      	ldr	r3, [r3, #4]
 8015878:	105b      	asrs	r3, r3, #1
 801587a:	461a      	mov	r2, r3
 801587c:	697b      	ldr	r3, [r7, #20]
 801587e:	1898      	adds	r0, r3, r2
 8015880:	693b      	ldr	r3, [r7, #16]
 8015882:	685b      	ldr	r3, [r3, #4]
 8015884:	f003 0301 	and.w	r3, r3, #1
 8015888:	2b00      	cmp	r3, #0
 801588a:	d00b      	beq.n	80158a4 <_ZN26core_utils_FunctionPointerIvPvE12membercallerI24TWIPR_UART_CommunicationEEvS0_PjS0_+0x44>
 801588c:	693b      	ldr	r3, [r7, #16]
 801588e:	685b      	ldr	r3, [r3, #4]
 8015890:	105b      	asrs	r3, r3, #1
 8015892:	461a      	mov	r2, r3
 8015894:	697b      	ldr	r3, [r7, #20]
 8015896:	4413      	add	r3, r2
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	693a      	ldr	r2, [r7, #16]
 801589c:	6812      	ldr	r2, [r2, #0]
 801589e:	4413      	add	r3, r2
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	e001      	b.n	80158a8 <_ZN26core_utils_FunctionPointerIvPvE12membercallerI24TWIPR_UART_CommunicationEEvS0_PjS0_+0x48>
 80158a4:	693b      	ldr	r3, [r7, #16]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	6879      	ldr	r1, [r7, #4]
 80158aa:	4798      	blx	r3
 80158ac:	bf00      	nop
    }
 80158ae:	3718      	adds	r7, #24
 80158b0:	46bd      	mov	sp, r7
 80158b2:	bd80      	pop	{r7, pc}

080158b4 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>:

	uint8_t overflow;

	uint8_t write(Buffer *buffer) {
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b084      	sub	sp, #16
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	6078      	str	r0, [r7, #4]
 80158bc:	6039      	str	r1, [r7, #0]
		for (int i = 0; i < buffer->len; i++) {
 80158be:	2300      	movs	r3, #0
 80158c0:	60fb      	str	r3, [r7, #12]
 80158c2:	e016      	b.n	80158f2 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer+0x3e>
			this->buffers[this->idx_write].data_ptr[i] = buffer->data_ptr[i];
 80158c4:	683b      	ldr	r3, [r7, #0]
 80158c6:	681a      	ldr	r2, [r3, #0]
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	441a      	add	r2, r3
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 80158d2:	4618      	mov	r0, r3
 80158d4:	6879      	ldr	r1, [r7, #4]
 80158d6:	4603      	mov	r3, r0
 80158d8:	011b      	lsls	r3, r3, #4
 80158da:	4403      	add	r3, r0
 80158dc:	00db      	lsls	r3, r3, #3
 80158de:	440b      	add	r3, r1
 80158e0:	3304      	adds	r3, #4
 80158e2:	6819      	ldr	r1, [r3, #0]
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	440b      	add	r3, r1
 80158e8:	7812      	ldrb	r2, [r2, #0]
 80158ea:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < buffer->len; i++) {
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	3301      	adds	r3, #1
 80158f0:	60fb      	str	r3, [r7, #12]
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	889b      	ldrh	r3, [r3, #4]
 80158f6:	461a      	mov	r2, r3
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	4293      	cmp	r3, r2
 80158fc:	dbe2      	blt.n	80158c4 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer+0x10>
		}

		this->buffers[this->idx_write].len = buffer->len;
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 8015904:	4619      	mov	r1, r3
 8015906:	683b      	ldr	r3, [r7, #0]
 8015908:	8898      	ldrh	r0, [r3, #4]
 801590a:	687a      	ldr	r2, [r7, #4]
 801590c:	460b      	mov	r3, r1
 801590e:	011b      	lsls	r3, r3, #4
 8015910:	440b      	add	r3, r1
 8015912:	00db      	lsls	r3, r3, #3
 8015914:	4413      	add	r3, r2
 8015916:	3308      	adds	r3, #8
 8015918:	4602      	mov	r2, r0
 801591a:	801a      	strh	r2, [r3, #0]
		return this->inc_write();
 801591c:	6878      	ldr	r0, [r7, #4]
 801591e:	f000 f87e 	bl	8015a1e <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>
 8015922:	4603      	mov	r3, r0
	}
 8015924:	4618      	mov	r0, r3
 8015926:	3710      	adds	r7, #16
 8015928:	46bd      	mov	sp, r7
 801592a:	bd80      	pop	{r7, pc}

0801592c <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht>:

	uint8_t write(uint8_t *buffer, uint16_t len) {
 801592c:	b580      	push	{r7, lr}
 801592e:	b086      	sub	sp, #24
 8015930:	af00      	add	r7, sp, #0
 8015932:	60f8      	str	r0, [r7, #12]
 8015934:	60b9      	str	r1, [r7, #8]
 8015936:	4613      	mov	r3, r2
 8015938:	80fb      	strh	r3, [r7, #6]
		for (int i = 0; i < len; i++) {
 801593a:	2300      	movs	r3, #0
 801593c:	617b      	str	r3, [r7, #20]
 801593e:	e015      	b.n	801596c <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht+0x40>
			this->buffers[this->idx_write].data_ptr[i] = buffer[i];
 8015940:	697b      	ldr	r3, [r7, #20]
 8015942:	68ba      	ldr	r2, [r7, #8]
 8015944:	441a      	add	r2, r3
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 801594c:	4618      	mov	r0, r3
 801594e:	68f9      	ldr	r1, [r7, #12]
 8015950:	4603      	mov	r3, r0
 8015952:	011b      	lsls	r3, r3, #4
 8015954:	4403      	add	r3, r0
 8015956:	00db      	lsls	r3, r3, #3
 8015958:	440b      	add	r3, r1
 801595a:	3304      	adds	r3, #4
 801595c:	6819      	ldr	r1, [r3, #0]
 801595e:	697b      	ldr	r3, [r7, #20]
 8015960:	440b      	add	r3, r1
 8015962:	7812      	ldrb	r2, [r2, #0]
 8015964:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < len; i++) {
 8015966:	697b      	ldr	r3, [r7, #20]
 8015968:	3301      	adds	r3, #1
 801596a:	617b      	str	r3, [r7, #20]
 801596c:	88fb      	ldrh	r3, [r7, #6]
 801596e:	697a      	ldr	r2, [r7, #20]
 8015970:	429a      	cmp	r2, r3
 8015972:	dbe5      	blt.n	8015940 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEPht+0x14>
		}
		this->buffers[this->idx_write].len = len;
 8015974:	68fb      	ldr	r3, [r7, #12]
 8015976:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 801597a:	4619      	mov	r1, r3
 801597c:	68fa      	ldr	r2, [r7, #12]
 801597e:	460b      	mov	r3, r1
 8015980:	011b      	lsls	r3, r3, #4
 8015982:	440b      	add	r3, r1
 8015984:	00db      	lsls	r3, r3, #3
 8015986:	4413      	add	r3, r2
 8015988:	3308      	adds	r3, #8
 801598a:	88fa      	ldrh	r2, [r7, #6]
 801598c:	801a      	strh	r2, [r3, #0]
		return this->inc_write();
 801598e:	68f8      	ldr	r0, [r7, #12]
 8015990:	f000 f845 	bl	8015a1e <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>
 8015994:	4603      	mov	r3, r0
	}
 8015996:	4618      	mov	r0, r3
 8015998:	3718      	adds	r7, #24
 801599a:	46bd      	mov	sp, r7
 801599c:	bd80      	pop	{r7, pc}

0801599e <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv>:
	uint8_t _tx_encode_buf[size_buffers + 10];
	core_utils_Buffer<size_buffers> _rx_buffer;
	core_utils_Buffer<size_buffers> _tx_buffer;

	/* ------------------------------------------------------------------------- */
	void flushTx() {
 801599e:	b580      	push	{r7, lr}
 80159a0:	b082      	sub	sp, #8
 80159a2:	af00      	add	r7, sp, #0
 80159a4:	6078      	str	r0, [r7, #4]
		while (!(this->huart->gState == HAL_UART_STATE_READY)) {
 80159a6:	bf00      	nop
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	68db      	ldr	r3, [r3, #12]
 80159ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80159b0:	2b20      	cmp	r3, #32
 80159b2:	bf14      	ite	ne
 80159b4:	2301      	movne	r3, #1
 80159b6:	2300      	moveq	r3, #0
 80159b8:	b2db      	uxtb	r3, r3
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d1f4      	bne.n	80159a8 <_ZN18core_hardware_UARTILi10ELi128EE7flushTxEv+0xa>

		}
		this->sendNextBuffer();
 80159be:	6878      	ldr	r0, [r7, #4]
 80159c0:	f000 f859 	bl	8015a76 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv>
	}
 80159c4:	bf00      	nop
 80159c6:	3708      	adds	r7, #8
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bd80      	pop	{r7, pc}

080159cc <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b084      	sub	sp, #16
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
 80159d4:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 80159da:	683b      	ldr	r3, [r7, #0]
 80159dc:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	685b      	ldr	r3, [r3, #4]
 80159e2:	105b      	asrs	r3, r3, #1
 80159e4:	461a      	mov	r2, r3
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	1899      	adds	r1, r3, r2
 80159ea:	68bb      	ldr	r3, [r7, #8]
 80159ec:	685b      	ldr	r3, [r3, #4]
 80159ee:	f003 0301 	and.w	r3, r3, #1
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d00b      	beq.n	8015a0e <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj+0x42>
 80159f6:	68bb      	ldr	r3, [r7, #8]
 80159f8:	685b      	ldr	r3, [r3, #4]
 80159fa:	105b      	asrs	r3, r3, #1
 80159fc:	461a      	mov	r2, r3
 80159fe:	68fb      	ldr	r3, [r7, #12]
 8015a00:	4413      	add	r3, r2
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	68ba      	ldr	r2, [r7, #8]
 8015a06:	6812      	ldr	r2, [r2, #0]
 8015a08:	4413      	add	r3, r2
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	e001      	b.n	8015a12 <_ZN26core_utils_FunctionPointerIvvE12membercallerI23core_comm_UartInterfaceILi10ELi128EEEEvPvPj+0x46>
 8015a0e:	68bb      	ldr	r3, [r7, #8]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	4608      	mov	r0, r1
 8015a14:	4798      	blx	r3
 8015a16:	bf00      	nop
    }
 8015a18:	3710      	adds	r7, #16
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}

08015a1e <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv>:
	core_utils_Buffer<size> buffers[num];  // Array of buffers
	const uint8_t num_buffers = num; // Number of buffers for the queue
	uint8_t idx_write;
	uint8_t idx_read;

	uint8_t inc_write() {
 8015a1e:	b480      	push	{r7}
 8015a20:	b083      	sub	sp, #12
 8015a22:	af00      	add	r7, sp, #0
 8015a24:	6078      	str	r0, [r7, #4]
		this->idx_write++;
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	f893 3555 	ldrb.w	r3, [r3, #1365]	@ 0x555
 8015a2c:	3301      	adds	r3, #1
 8015a2e:	b2da      	uxtb	r2, r3
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	f883 2555 	strb.w	r2, [r3, #1365]	@ 0x555

		if (this->idx_write == this->num_buffers) {
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	f893 2555 	ldrb.w	r2, [r3, #1365]	@ 0x555
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	f893 3554 	ldrb.w	r3, [r3, #1364]	@ 0x554
 8015a42:	429a      	cmp	r2, r3
 8015a44:	d103      	bne.n	8015a4e <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x30>
			this->idx_write = 0;
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	2200      	movs	r2, #0
 8015a4a:	f883 2555 	strb.w	r2, [r3, #1365]	@ 0x555
		}
		if (this->idx_write == this->idx_read) {
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f893 2555 	ldrb.w	r2, [r3, #1365]	@ 0x555
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 8015a5a:	429a      	cmp	r2, r3
 8015a5c:	d104      	bne.n	8015a68 <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x4a>
			this->overflow = 1;
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	2201      	movs	r2, #1
 8015a62:	701a      	strb	r2, [r3, #0]
			return 0;
 8015a64:	2300      	movs	r3, #0
 8015a66:	e000      	b.n	8015a6a <_ZN22core_utils_BufferQueueILi10ELi128EE9inc_writeEv+0x4c>
		} else {
			return 1;
 8015a68:	2301      	movs	r3, #1
		}
	}
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	370c      	adds	r7, #12
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a74:	4770      	bx	lr

08015a76 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv>:

	/* ------------------------------------------------------------------------- */
	void sendNextBuffer() {
 8015a76:	b580      	push	{r7, lr}
 8015a78:	b084      	sub	sp, #16
 8015a7a:	af00      	add	r7, sp, #0
 8015a7c:	6078      	str	r0, [r7, #4]
		if (!this->tx_queue.available()) {
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8015a84:	4618      	mov	r0, r3
 8015a86:	f000 f82f 	bl	8015ae8 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	bf0c      	ite	eq
 8015a90:	2301      	moveq	r3, #1
 8015a92:	2300      	movne	r3, #0
 8015a94:	b2db      	uxtb	r3, r3
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d120      	bne.n	8015adc <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x66>
			return;
		}

		if (this->huart->gState != HAL_UART_STATE_READY) {
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	68db      	ldr	r3, [r3, #12]
 8015a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015aa2:	2b20      	cmp	r3, #32
 8015aa4:	bf14      	ite	ne
 8015aa6:	2301      	movne	r3, #1
 8015aa8:	2300      	moveq	r3, #0
 8015aaa:	b2db      	uxtb	r3, r3
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d117      	bne.n	8015ae0 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6a>
			return;
		}

		uint8_t *buffer = NULL;
 8015ab0:	2300      	movs	r3, #0
 8015ab2:	60bb      	str	r3, [r7, #8]
		uint8_t len = this->tx_queue.read(&buffer);
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	f503 63ad 	add.w	r3, r3, #1384	@ 0x568
 8015aba:	f107 0208 	add.w	r2, r7, #8
 8015abe:	4611      	mov	r1, r2
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f000 f838 	bl	8015b36 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit_DMA(this->huart, buffer, len);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	68db      	ldr	r3, [r3, #12]
 8015ace:	68b9      	ldr	r1, [r7, #8]
 8015ad0:	7bfa      	ldrb	r2, [r7, #15]
 8015ad2:	b292      	uxth	r2, r2
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f7f6 fcb7 	bl	800c448 <HAL_UART_Transmit_DMA>
 8015ada:	e002      	b.n	8015ae2 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6c>
			return;
 8015adc:	bf00      	nop
 8015ade:	e000      	b.n	8015ae2 <_ZN18core_hardware_UARTILi10ELi128EE14sendNextBufferEv+0x6c>
			return;
 8015ae0:	bf00      	nop
	}
 8015ae2:	3710      	adds	r7, #16
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	bd80      	pop	{r7, pc}

08015ae8 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>:
	int8_t available() {
 8015ae8:	b480      	push	{r7}
 8015aea:	b085      	sub	sp, #20
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
		if (this->overflow) {
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	781b      	ldrb	r3, [r3, #0]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d002      	beq.n	8015afe <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x16>
			return -1;
 8015af8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015afc:	e015      	b.n	8015b2a <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x42>
		int8_t available = this->idx_write - this->idx_read;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	f893 2555 	ldrb.w	r2, [r3, #1365]	@ 0x555
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 8015b0a:	1ad3      	subs	r3, r2, r3
 8015b0c:	b2db      	uxtb	r3, r3
 8015b0e:	73fb      	strb	r3, [r7, #15]
		if (available < 0) {
 8015b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	da06      	bge.n	8015b26 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv+0x3e>
			available += this->num_buffers;
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	f893 2554 	ldrb.w	r2, [r3, #1364]	@ 0x554
 8015b1e:	7bfb      	ldrb	r3, [r7, #15]
 8015b20:	4413      	add	r3, r2
 8015b22:	b2db      	uxtb	r3, r3
 8015b24:	73fb      	strb	r3, [r7, #15]
		return available;
 8015b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
	}
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	3714      	adds	r7, #20
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b34:	4770      	bx	lr

08015b36 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh>:
	uint8_t read(uint8_t **buffer) {
 8015b36:	b580      	push	{r7, lr}
 8015b38:	b084      	sub	sp, #16
 8015b3a:	af00      	add	r7, sp, #0
 8015b3c:	6078      	str	r0, [r7, #4]
 8015b3e:	6039      	str	r1, [r7, #0]
		if (this->available() < 1) {
 8015b40:	6878      	ldr	r0, [r7, #4]
 8015b42:	f7ff ffd1 	bl	8015ae8 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 8015b46:	4603      	mov	r3, r0
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	bfd4      	ite	le
 8015b4c:	2301      	movle	r3, #1
 8015b4e:	2300      	movgt	r3, #0
 8015b50:	b2db      	uxtb	r3, r3
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d001      	beq.n	8015b5a <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh+0x24>
			return 0;
 8015b56:	2300      	movs	r3, #0
 8015b58:	e01e      	b.n	8015b98 <_ZN22core_utils_BufferQueueILi10ELi128EE4readEPPh+0x62>
		*buffer = &this->buffers[this->idx_read].data_ptr[0];
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 8015b60:	4619      	mov	r1, r3
 8015b62:	687a      	ldr	r2, [r7, #4]
 8015b64:	460b      	mov	r3, r1
 8015b66:	011b      	lsls	r3, r3, #4
 8015b68:	440b      	add	r3, r1
 8015b6a:	00db      	lsls	r3, r3, #3
 8015b6c:	4413      	add	r3, r2
 8015b6e:	3304      	adds	r3, #4
 8015b70:	681a      	ldr	r2, [r3, #0]
 8015b72:	683b      	ldr	r3, [r7, #0]
 8015b74:	601a      	str	r2, [r3, #0]
		uint8_t len = this->buffers[this->idx_read].len;
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 8015b7c:	4619      	mov	r1, r3
 8015b7e:	687a      	ldr	r2, [r7, #4]
 8015b80:	460b      	mov	r3, r1
 8015b82:	011b      	lsls	r3, r3, #4
 8015b84:	440b      	add	r3, r1
 8015b86:	00db      	lsls	r3, r3, #3
 8015b88:	4413      	add	r3, r2
 8015b8a:	3308      	adds	r3, #8
 8015b8c:	881b      	ldrh	r3, [r3, #0]
 8015b8e:	73fb      	strb	r3, [r7, #15]
		this->inc_read();
 8015b90:	6878      	ldr	r0, [r7, #4]
 8015b92:	f000 f805 	bl	8015ba0 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>
		return len;
 8015b96:	7bfb      	ldrb	r3, [r7, #15]
	}
 8015b98:	4618      	mov	r0, r3
 8015b9a:	3710      	adds	r7, #16
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bd80      	pop	{r7, pc}

08015ba0 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>:
	uint8_t inc_read() {
 8015ba0:	b480      	push	{r7}
 8015ba2:	b083      	sub	sp, #12
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
		this->idx_read++;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 8015bae:	3301      	adds	r3, #1
 8015bb0:	b2da      	uxtb	r2, r3
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	f883 2556 	strb.w	r2, [r3, #1366]	@ 0x556

		if (this->idx_read == this->num_buffers) {
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f893 2556 	ldrb.w	r2, [r3, #1366]	@ 0x556
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	f893 3554 	ldrb.w	r3, [r3, #1364]	@ 0x554
 8015bc4:	429a      	cmp	r2, r3
 8015bc6:	d103      	bne.n	8015bd0 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv+0x30>
			this->idx_read = 0;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	2200      	movs	r2, #0
 8015bcc:	f883 2556 	strb.w	r2, [r3, #1366]	@ 0x556
		}
		return 1;
 8015bd0:	2301      	movs	r3, #1
	}
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	370c      	adds	r7, #12
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bdc:	4770      	bx	lr
	...

08015be0 <_Z41__static_initialization_and_destruction_0ii>:
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b082      	sub	sp, #8
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	6039      	str	r1, [r7, #0]
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	2b01      	cmp	r3, #1
 8015bee:	d10a      	bne.n	8015c06 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015bf6:	4293      	cmp	r3, r2
 8015bf8:	d105      	bne.n	8015c06 <_Z41__static_initialization_and_destruction_0ii+0x26>
static core_comm_SerialMessage_memory<128> incoming_msg;
 8015bfa:	4805      	ldr	r0, [pc, #20]	@ (8015c10 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8015bfc:	f7fe ff36 	bl	8014a6c <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
static core_comm_SerialMessage_memory<128> outgoing_msg;
 8015c00:	4804      	ldr	r0, [pc, #16]	@ (8015c14 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8015c02:	f7fe ff33 	bl	8014a6c <_ZN30core_comm_SerialMessage_memoryILi128EEC1Ev>
}
 8015c06:	bf00      	nop
 8015c08:	3708      	adds	r7, #8
 8015c0a:	46bd      	mov	sp, r7
 8015c0c:	bd80      	pop	{r7, pc}
 8015c0e:	bf00      	nop
 8015c10:	240152e0 	.word	0x240152e0
 8015c14:	24015370 	.word	0x24015370

08015c18 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv>:
	uint8_t rx_function() {
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b086      	sub	sp, #24
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
		uint8_t num_messages = 0;
 8015c20:	2300      	movs	r3, #0
 8015c22:	75fb      	strb	r3, [r7, #23]
		while (this->_uart.available() > 0) {
 8015c24:	e04e      	b.n	8015cc4 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xac>
			Buffer *buffer = this->_uart.rx_queue.read();
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	f503 63ba 	add.w	r3, r3, #1488	@ 0x5d0
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	f000 f8e5 	bl	8015dfc <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv>
 8015c32:	6138      	str	r0, [r7, #16]
			if (this->config.use_protocol) {
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	7a5b      	ldrb	r3, [r3, #9]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d03b      	beq.n	8015cb4 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x9c>
				uint8_t correct_message = this->_rx_msg.decode(buffer);
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 8015c42:	6939      	ldr	r1, [r7, #16]
 8015c44:	4618      	mov	r0, r3
 8015c46:	f007 ffce 	bl	801dbe6 <_ZN23core_comm_SerialMessage6decodeEP6Buffer>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	73fb      	strb	r3, [r7, #15]
				if (!correct_message) {
 8015c4e:	7bfb      	ldrb	r3, [r7, #15]
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d036      	beq.n	8015cc2 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xaa>
				if (this->config.use_queue) {
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	7a9b      	ldrb	r3, [r3, #10]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d009      	beq.n	8015c70 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x58>
					this->rx_queue.write(&_rx_msg);
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f103 020c 	add.w	r2, r3, #12
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	f503 63b6 	add.w	r3, r3, #1456	@ 0x5b0
 8015c68:	4619      	mov	r1, r3
 8015c6a:	4610      	mov	r0, r2
 8015c6c:	f000 f8eb 	bl	8015e46 <_ZN22core_comm_MessageQueueILi10ELi128EE5writeEP23core_comm_SerialMessage>
				if (this->_callbacks.rx.registered) {
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015c76:	f893 3348 	ldrb.w	r3, [r3, #840]	@ 0x348
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d007      	beq.n	8015c8e <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x76>
					this->_callbacks.rx.call(this);
 8015c7e:	687a      	ldr	r2, [r7, #4]
 8015c80:	f241 3344 	movw	r3, #4932	@ 0x1344
 8015c84:	4413      	add	r3, r2
 8015c86:	6879      	ldr	r1, [r7, #4]
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f000 f89a 	bl	8015dc2 <_ZN19core_utils_CallbackIvPvE4callES0_>
				if (this->_callbacks.rx_msg.registered) {
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015c94:	f893 3368 	ldrb.w	r3, [r3, #872]	@ 0x368
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d00e      	beq.n	8015cba <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xa2>
					this->_callbacks.rx_msg.call(&_rx_msg);
 8015c9c:	687a      	ldr	r2, [r7, #4]
 8015c9e:	f241 3364 	movw	r3, #4964	@ 0x1364
 8015ca2:	4413      	add	r3, r2
 8015ca4:	687a      	ldr	r2, [r7, #4]
 8015ca6:	f502 62b6 	add.w	r2, r2, #1456	@ 0x5b0
 8015caa:	4611      	mov	r1, r2
 8015cac:	4618      	mov	r0, r3
 8015cae:	f7ff f933 	bl	8014f18 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageE4callES1_>
 8015cb2:	e002      	b.n	8015cba <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xa2>
					nop();
 8015cb4:	f7fe fca2 	bl	80145fc <_Z3nopv>
 8015cb8:	e7fc      	b.n	8015cb4 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0x9c>
			num_messages++;
 8015cba:	7dfb      	ldrb	r3, [r7, #23]
 8015cbc:	3301      	adds	r3, #1
 8015cbe:	75fb      	strb	r3, [r7, #23]
 8015cc0:	e000      	b.n	8015cc4 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xac>
					continue;
 8015cc2:	bf00      	nop
		while (this->_uart.available() > 0) {
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	f503 63b8 	add.w	r3, r3, #1472	@ 0x5c0
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f000 f888 	bl	8015de0 <_ZN18core_hardware_UARTILi10ELi128EE9availableEv>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	bfcc      	ite	gt
 8015cd6:	2301      	movgt	r3, #1
 8015cd8:	2300      	movle	r3, #0
 8015cda:	b2db      	uxtb	r3, r3
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d1a2      	bne.n	8015c26 <_ZN23core_comm_UartInterfaceILi10ELi128EE11rx_functionEv+0xe>
		return num_messages;
 8015ce0:	7dfb      	ldrb	r3, [r7, #23]
	}
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	3718      	adds	r7, #24
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	bd80      	pop	{r7, pc}

08015cea <_ZN23core_comm_UartInterfaceILi10ELi128EE9setTaskIDEP19tskTaskControlBlock>:
	void setTaskID(TaskHandle_t task) {
 8015cea:	b480      	push	{r7}
 8015cec:	b083      	sub	sp, #12
 8015cee:	af00      	add	r7, sp, #0
 8015cf0:	6078      	str	r0, [r7, #4]
 8015cf2:	6039      	str	r1, [r7, #0]
		this->_task_id = task;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015cfa:	461a      	mov	r2, r3
 8015cfc:	683b      	ldr	r3, [r7, #0]
 8015cfe:	f8c2 3388 	str.w	r3, [r2, #904]	@ 0x388
	}
 8015d02:	bf00      	nop
 8015d04:	370c      	adds	r7, #12
 8015d06:	46bd      	mov	sp, r7
 8015d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0c:	4770      	bx	lr

08015d0e <_ZN23core_comm_UartInterfaceILi10ELi128EE9getTaskIDEv>:
	TaskHandle_t getTaskID() {
 8015d0e:	b480      	push	{r7}
 8015d10:	b083      	sub	sp, #12
 8015d12:	af00      	add	r7, sp, #0
 8015d14:	6078      	str	r0, [r7, #4]
		return this->_task_id;
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8015d1c:	f8d3 3388 	ldr.w	r3, [r3, #904]	@ 0x388
	}
 8015d20:	4618      	mov	r0, r3
 8015d22:	370c      	adds	r7, #12
 8015d24:	46bd      	mov	sp, r7
 8015d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2a:	4770      	bx	lr

08015d2c <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt>:
	void rxFunction(uint16_t len) {
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b082      	sub	sp, #8
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
 8015d34:	460b      	mov	r3, r1
 8015d36:	807b      	strh	r3, [r7, #2]
		if (len == 0) {
 8015d38:	887b      	ldrh	r3, [r7, #2]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d031      	beq.n	8015da2 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x76>
		if (this->config.cobs_encode_rx) {
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	799b      	ldrb	r3, [r3, #6]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d00c      	beq.n	8015d60 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x34>
			len = cobsDecodeInPlace(this->_rx_buffer.buffer, len - 1);
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	f603 32fa 	addw	r2, r3, #3066	@ 0xbfa
 8015d4c:	887b      	ldrh	r3, [r7, #2]
 8015d4e:	b2db      	uxtb	r3, r3
 8015d50:	3b01      	subs	r3, #1
 8015d52:	b2db      	uxtb	r3, r3
 8015d54:	4619      	mov	r1, r3
 8015d56:	4610      	mov	r0, r2
 8015d58:	f00a f810 	bl	801fd7c <_Z17cobsDecodeInPlacePhh>
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	807b      	strh	r3, [r7, #2]
		this->_rx_buffer.len = len;
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	887a      	ldrh	r2, [r7, #2]
 8015d64:	f8a3 2bf8 	strh.w	r2, [r3, #3064]	@ 0xbf8
		if (this->config.queues) {
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	7a1b      	ldrb	r3, [r3, #8]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d009      	beq.n	8015d84 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x58>
			this->rx_queue.write(&this->_rx_buffer);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	f103 0210 	add.w	r2, r3, #16
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	f603 33f4 	addw	r3, r3, #3060	@ 0xbf4
 8015d7c:	4619      	mov	r1, r3
 8015d7e:	4610      	mov	r0, r2
 8015d80:	f7ff fd98 	bl	80158b4 <_ZN22core_utils_BufferQueueILi10ELi128EE5writeEP6Buffer>
		if (this->_callbacks.rx.registered) {
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	f893 3ac4 	ldrb.w	r3, [r3, #2756]	@ 0xac4
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d005      	beq.n	8015d9a <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x6e>
			this->_callbacks.rx.call();
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	f503 632c 	add.w	r3, r3, #2752	@ 0xac0
 8015d94:	4618      	mov	r0, r3
 8015d96:	f7fe fa92 	bl	80142be <_ZN19core_utils_CallbackIvvE4callEv>
		this->startReceiveDMA();
 8015d9a:	6878      	ldr	r0, [r7, #4]
 8015d9c:	f7ff fbf2 	bl	8015584 <_ZN18core_hardware_UARTILi10ELi128EE15startReceiveDMAEv>
 8015da0:	e000      	b.n	8015da4 <_ZN18core_hardware_UARTILi10ELi128EE10rxFunctionEt+0x78>
			return;
 8015da2:	bf00      	nop
	}
 8015da4:	3708      	adds	r7, #8
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd80      	pop	{r7, pc}

08015daa <_ZN18core_hardware_UARTILi10ELi128EE9get_huartEv>:
	UART_HandleTypeDef* get_huart() {
 8015daa:	b480      	push	{r7}
 8015dac:	b083      	sub	sp, #12
 8015dae:	af00      	add	r7, sp, #0
 8015db0:	6078      	str	r0, [r7, #4]
		return this->huart;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	68db      	ldr	r3, [r3, #12]
	}
 8015db6:	4618      	mov	r0, r3
 8015db8:	370c      	adds	r7, #12
 8015dba:	46bd      	mov	sp, r7
 8015dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc0:	4770      	bx	lr

08015dc2 <_ZN19core_utils_CallbackIvPvE4callES0_>:
	R call(A argument){
 8015dc2:	b580      	push	{r7, lr}
 8015dc4:	b082      	sub	sp, #8
 8015dc6:	af00      	add	r7, sp, #0
 8015dc8:	6078      	str	r0, [r7, #4]
 8015dca:	6039      	str	r1, [r7, #0]
		return this->_fp(argument);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	3308      	adds	r3, #8
 8015dd0:	6839      	ldr	r1, [r7, #0]
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f000 f852 	bl	8015e7c <_ZN26core_utils_FunctionPointerIvPvEclES0_>
 8015dd8:	bf00      	nop
	}
 8015dda:	3708      	adds	r7, #8
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bd80      	pop	{r7, pc}

08015de0 <_ZN18core_hardware_UARTILi10ELi128EE9availableEv>:
	int8_t available() {
 8015de0:	b580      	push	{r7, lr}
 8015de2:	b082      	sub	sp, #8
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
		return this->rx_queue.available();
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	3310      	adds	r3, #16
 8015dec:	4618      	mov	r0, r3
 8015dee:	f7ff fe7b 	bl	8015ae8 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 8015df2:	4603      	mov	r3, r0
	}
 8015df4:	4618      	mov	r0, r3
 8015df6:	3708      	adds	r7, #8
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	bd80      	pop	{r7, pc}

08015dfc <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv>:
	Buffer* read() {
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b084      	sub	sp, #16
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]
		if (this->available() < 1) {
 8015e04:	6878      	ldr	r0, [r7, #4]
 8015e06:	f7ff fe6f 	bl	8015ae8 <_ZN22core_utils_BufferQueueILi10ELi128EE9availableEv>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	bfd4      	ite	le
 8015e10:	2301      	movle	r3, #1
 8015e12:	2300      	movgt	r3, #0
 8015e14:	b2db      	uxtb	r3, r3
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d001      	beq.n	8015e1e <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv+0x22>
			return 0;
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	e00f      	b.n	8015e3e <_ZN22core_utils_BufferQueueILi10ELi128EE4readEv+0x42>
		Buffer *buffer = &this->buffers[this->idx_read];
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	f893 3556 	ldrb.w	r3, [r3, #1366]	@ 0x556
 8015e24:	461a      	mov	r2, r3
 8015e26:	4613      	mov	r3, r2
 8015e28:	011b      	lsls	r3, r3, #4
 8015e2a:	4413      	add	r3, r2
 8015e2c:	00db      	lsls	r3, r3, #3
 8015e2e:	687a      	ldr	r2, [r7, #4]
 8015e30:	4413      	add	r3, r2
 8015e32:	3304      	adds	r3, #4
 8015e34:	60fb      	str	r3, [r7, #12]
		this->inc_read();
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f7ff feb2 	bl	8015ba0 <_ZN22core_utils_BufferQueueILi10ELi128EE8inc_readEv>
		return buffer;
 8015e3c:	68fb      	ldr	r3, [r7, #12]
	}
 8015e3e:	4618      	mov	r0, r3
 8015e40:	3710      	adds	r7, #16
 8015e42:	46bd      	mov	sp, r7
 8015e44:	bd80      	pop	{r7, pc}

08015e46 <_ZN22core_comm_MessageQueueILi10ELi128EE5writeEP23core_comm_SerialMessage>:
	uint8_t write(core_comm_SerialMessage *message) {
 8015e46:	b580      	push	{r7, lr}
 8015e48:	b082      	sub	sp, #8
 8015e4a:	af00      	add	r7, sp, #0
 8015e4c:	6078      	str	r0, [r7, #4]
 8015e4e:	6039      	str	r1, [r7, #0]
		message->copyTo(&this->messages[this->idx_write]);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f893 35a1 	ldrb.w	r3, [r3, #1441]	@ 0x5a1
 8015e56:	461a      	mov	r2, r3
 8015e58:	4613      	mov	r3, r2
 8015e5a:	00db      	lsls	r3, r3, #3
 8015e5c:	4413      	add	r3, r2
 8015e5e:	011b      	lsls	r3, r3, #4
 8015e60:	687a      	ldr	r2, [r7, #4]
 8015e62:	4413      	add	r3, r2
 8015e64:	4619      	mov	r1, r3
 8015e66:	6838      	ldr	r0, [r7, #0]
 8015e68:	f007 fdb2 	bl	801d9d0 <_ZN23core_comm_SerialMessage6copyToEPS_>
		return this->inc_write();
 8015e6c:	6878      	ldr	r0, [r7, #4]
 8015e6e:	f000 f812 	bl	8015e96 <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv>
 8015e72:	4603      	mov	r3, r0
	}
 8015e74:	4618      	mov	r0, r3
 8015e76:	3708      	adds	r7, #8
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	bd80      	pop	{r7, pc}

08015e7c <_ZN26core_utils_FunctionPointerIvPvEclES0_>:
    R operator ()(A1 a) {
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	b082      	sub	sp, #8
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
 8015e84:	6039      	str	r1, [r7, #0]
        return call(a);
 8015e86:	6839      	ldr	r1, [r7, #0]
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f000 f825 	bl	8015ed8 <_ZN26core_utils_FunctionPointerIvPvE4callES0_>
 8015e8e:	bf00      	nop
    }
 8015e90:	3708      	adds	r7, #8
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}

08015e96 <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv>:
	uint8_t inc_write() {
 8015e96:	b480      	push	{r7}
 8015e98:	b083      	sub	sp, #12
 8015e9a:	af00      	add	r7, sp, #0
 8015e9c:	6078      	str	r0, [r7, #4]
		this->idx_write++;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	f893 35a1 	ldrb.w	r3, [r3, #1441]	@ 0x5a1
 8015ea4:	3301      	adds	r3, #1
 8015ea6:	b2da      	uxtb	r2, r3
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	f883 25a1 	strb.w	r2, [r3, #1441]	@ 0x5a1
		if (this->idx_write == this->len) {
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	f893 25a1 	ldrb.w	r2, [r3, #1441]	@ 0x5a1
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f893 35a3 	ldrb.w	r3, [r3, #1443]	@ 0x5a3
 8015eba:	429a      	cmp	r2, r3
 8015ebc:	d103      	bne.n	8015ec6 <_ZN22core_comm_MessageQueueILi10ELi128EE9inc_writeEv+0x30>
			this->idx_write = 0;
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	f883 25a1 	strb.w	r2, [r3, #1441]	@ 0x5a1
		return this->idx_write;
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	f893 35a1 	ldrb.w	r3, [r3, #1441]	@ 0x5a1
	}
 8015ecc:	4618      	mov	r0, r3
 8015ece:	370c      	adds	r7, #12
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed6:	4770      	bx	lr

08015ed8 <_ZN26core_utils_FunctionPointerIvPvE4callES0_>:
    R call(A1 a) {
 8015ed8:	b580      	push	{r7, lr}
 8015eda:	b082      	sub	sp, #8
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
 8015ee0:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	695b      	ldr	r3, [r3, #20]
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d108      	bne.n	8015efc <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x24>
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d004      	beq.n	8015efc <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x24>
           return _p.function(a);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	6838      	ldr	r0, [r7, #0]
 8015ef8:	4798      	blx	r3
 8015efa:	e011      	b.n	8015f20 <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x48>
        } else if (_membercaller && _p.object) {
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	695b      	ldr	r3, [r3, #20]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d00c      	beq.n	8015f1e <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x46>
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	681b      	ldr	r3, [r3, #0]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d008      	beq.n	8015f1e <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x46>
           return _membercaller(_p.object, _member, a);
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	695b      	ldr	r3, [r3, #20]
 8015f10:	687a      	ldr	r2, [r7, #4]
 8015f12:	6810      	ldr	r0, [r2, #0]
 8015f14:	687a      	ldr	r2, [r7, #4]
 8015f16:	1d11      	adds	r1, r2, #4
 8015f18:	683a      	ldr	r2, [r7, #0]
 8015f1a:	4798      	blx	r3
 8015f1c:	e000      	b.n	8015f20 <_ZN26core_utils_FunctionPointerIvPvE4callES0_+0x48>
        return (R)0;
 8015f1e:	bf00      	nop
    }
 8015f20:	3708      	adds	r7, #8
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}

08015f26 <_GLOBAL__sub_I__Z20twipr_uart_comm_taskPv>:
 8015f26:	b580      	push	{r7, lr}
 8015f28:	af00      	add	r7, sp, #0
 8015f2a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015f2e:	2001      	movs	r0, #1
 8015f30:	f7ff fe56 	bl	8015be0 <_Z41__static_initialization_and_destruction_0ii>
 8015f34:	bd80      	pop	{r7, pc}

08015f36 <_ZN15core_utils_GPIOC1Ev>:
void core_utils_gpio_registerExtiCallback(uint16_t line, void (* function) (void));


class core_utils_GPIO {
public:
	core_utils_GPIO(){
 8015f36:	b480      	push	{r7}
 8015f38:	b083      	sub	sp, #12
 8015f3a:	af00      	add	r7, sp, #0
 8015f3c:	6078      	str	r0, [r7, #4]

	}
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	4618      	mov	r0, r3
 8015f42:	370c      	adds	r7, #12
 8015f44:	46bd      	mov	sp, r7
 8015f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4a:	4770      	bx	lr

08015f4c <_ZN28twipr_communication_config_tC1Ev>:

typedef struct twipr_communication_callbacks_t {
	core_utils_Callback<void, uint16_t> new_trajectory;
}twipr_communication_callbacks_t;

typedef struct twipr_communication_config_t {
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b082      	sub	sp, #8
 8015f50:	af00      	add	r7, sp, #0
 8015f52:	6078      	str	r0, [r7, #4]
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	3308      	adds	r3, #8
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f7ff ffec 	bl	8015f36 <_ZN15core_utils_GPIOC1Ev>
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	4618      	mov	r0, r3
 8015f62:	3708      	adds	r7, #8
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}

08015f68 <_ZN31twipr_communication_callbacks_tC1Ev>:
typedef struct twipr_communication_callbacks_t {
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b082      	sub	sp, #8
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7fe f9b0 	bl	80142d8 <_ZN19core_utils_CallbackIvtEC1Ev>
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	3708      	adds	r7, #8
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bd80      	pop	{r7, pc}

08015f82 <_ZN26TWIPR_CommunicationManagerC1Ev>:

void sample_dma_transfer_cmplt_callback(DMA_HandleTypeDef *hdma);

TWIPR_CommunicationManager* active_manager = NULL;

TWIPR_CommunicationManager::TWIPR_CommunicationManager() {
 8015f82:	b580      	push	{r7, lr}
 8015f84:	b082      	sub	sp, #8
 8015f86:	af00      	add	r7, sp, #0
 8015f88:	6078      	str	r0, [r7, #4]
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	f7ff ffdd 	bl	8015f4c <_ZN28twipr_communication_config_tC1Ev>
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	332c      	adds	r3, #44	@ 0x2c
 8015f96:	4618      	mov	r0, r3
 8015f98:	f7fe fbc3 	bl	8014722 <_ZN24TWIPR_UART_CommunicationC1Ev>
 8015f9c:	687a      	ldr	r2, [r7, #4]
 8015f9e:	f241 4348 	movw	r3, #5192	@ 0x1448
 8015fa2:	4413      	add	r3, r2
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	f7fe f834 	bl	8014012 <_ZN23TWIPR_SPI_CommunicationC1Ev>
 8015faa:	687a      	ldr	r2, [r7, #4]
 8015fac:	f241 5314 	movw	r3, #5396	@ 0x1514
 8015fb0:	4413      	add	r3, r2
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	f7ff ffd8 	bl	8015f68 <_ZN31twipr_communication_callbacks_tC1Ev>

}
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	4618      	mov	r0, r3
 8015fbc:	3708      	adds	r7, #8
 8015fbe:	46bd      	mov	sp, r7
 8015fc0:	bd80      	pop	{r7, pc}
	...

08015fc4 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t>:

/* ====================================================================== */
void TWIPR_CommunicationManager::init(twipr_communication_config_t config) {
 8015fc4:	b084      	sub	sp, #16
 8015fc6:	b5b0      	push	{r4, r5, r7, lr}
 8015fc8:	b0da      	sub	sp, #360	@ 0x168
 8015fca:	af02      	add	r7, sp, #8
 8015fcc:	f507 74b0 	add.w	r4, r7, #352	@ 0x160
 8015fd0:	f5a4 74ae 	sub.w	r4, r4, #348	@ 0x15c
 8015fd4:	6020      	str	r0, [r4, #0]
 8015fd6:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8015fda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 8015fde:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8015fe2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	461d      	mov	r5, r3
 8015fea:	f507 74ba 	add.w	r4, r7, #372	@ 0x174
 8015fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015ff2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015ff4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015ff6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8015ffa:	e885 0007 	stmia.w	r5, {r0, r1, r2}

	active_manager = this;
 8015ffe:	4acb      	ldr	r2, [pc, #812]	@ (801632c <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x368>)
 8016000:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016004:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	6013      	str	r3, [r2, #0]

	// Initialize the UART CM4 Interface
	twipr_uart_comm_config_t uart_config = { .huart = this->config.huart };
 801600c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016010:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	681a      	ldr	r2, [r3, #0]
 8016018:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801601c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8016020:	601a      	str	r2, [r3, #0]
	this->uart_interface.init(uart_config);
 8016022:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016026:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8016030:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016034:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8016038:	6819      	ldr	r1, [r3, #0]
 801603a:	4610      	mov	r0, r2
 801603c:	f7fe fb8a 	bl	8014754 <_ZN24TWIPR_UART_Communication4initE24twipr_uart_comm_config_t>

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
 8016040:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016044:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 801604e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016052:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8016056:	4ab6      	ldr	r2, [pc, #728]	@ (8016330 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x36c>)
 8016058:	601a      	str	r2, [r3, #0]
 801605a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801605e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8016062:	2200      	movs	r2, #0
 8016064:	605a      	str	r2, [r3, #4]
 8016066:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801606a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801606e:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8016072:	f5a2 71ae 	sub.w	r1, r2, #348	@ 0x15c
 8016076:	f107 0020 	add.w	r0, r7, #32
 801607a:	cb0c      	ldmia	r3, {r2, r3}
 801607c:	6809      	ldr	r1, [r1, #0]
 801607e:	f000 fcbd 	bl	80169fc <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_WRITE,
 8016082:	f107 0320 	add.w	r3, r7, #32
 8016086:	461a      	mov	r2, r3
 8016088:	2101      	movs	r1, #1
 801608a:	4620      	mov	r0, r4
 801608c:	f7fe fbe4 	bl	8014858 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_write_callback));

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_READ,
 8016090:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016094:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 801609e:	4ba5      	ldr	r3, [pc, #660]	@ (8016334 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x370>)
 80160a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80160a2:	2300      	movs	r3, #0
 80160a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80160a6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80160aa:	f5a3 71ae 	sub.w	r1, r3, #348	@ 0x15c
 80160ae:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 80160b2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80160b6:	cb0c      	ldmia	r3, {r2, r3}
 80160b8:	6809      	ldr	r1, [r1, #0]
 80160ba:	f000 fc9f 	bl	80169fc <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_READ,
 80160be:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80160c2:	461a      	mov	r2, r3
 80160c4:	2102      	movs	r1, #2
 80160c6:	4620      	mov	r0, r4
 80160c8:	f7fe fbc6 	bl	8014858 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_read_callback));

	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
 80160cc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80160d0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
			core_utils_Callback<void, core_comm_SerialMessage*>(this,
 80160da:	4b97      	ldr	r3, [pc, #604]	@ (8016338 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x374>)
 80160dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80160e0:	2300      	movs	r3, #0
 80160e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80160e6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80160ea:	f5a3 71ae 	sub.w	r1, r3, #348	@ 0x15c
 80160ee:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80160f2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80160f6:	cb0c      	ldmia	r3, {r2, r3}
 80160f8:	6809      	ldr	r1, [r1, #0]
 80160fa:	f000 fc7f 	bl	80169fc <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
	this->uart_interface.registerCallback(TWIPR_UART_COMM_CALLBACK_MSG_FUNC,
 80160fe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8016102:	461a      	mov	r2, r3
 8016104:	2103      	movs	r1, #3
 8016106:	4620      	mov	r0, r4
 8016108:	f7fe fba6 	bl	8014858 <_ZN24TWIPR_UART_Communication16registerCallbackE29twipr_uart_comm_callback_id_t19core_utils_CallbackIvP23core_comm_SerialMessageE>
					&TWIPR_CommunicationManager::_uart_handleMsg_func_callback));


	core_utils_gpio_registerExtiCallback(this->config.reset_uart_exti,
 801610c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016110:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	8bdc      	ldrh	r4, [r3, #30]
			core_utils_Callback<void, void>(this,
 8016118:	4b88      	ldr	r3, [pc, #544]	@ (801633c <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x378>)
 801611a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801611e:	2300      	movs	r3, #0
 8016120:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8016124:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016128:	f5a3 71ae 	sub.w	r1, r3, #348	@ 0x15c
 801612c:	f107 0098 	add.w	r0, r7, #152	@ 0x98
 8016130:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8016134:	cb0c      	ldmia	r3, {r2, r3}
 8016136:	6809      	ldr	r1, [r1, #0]
 8016138:	f000 fc94 	bl	8016a64 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>
	core_utils_gpio_registerExtiCallback(this->config.reset_uart_exti,
 801613c:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8016140:	4619      	mov	r1, r3
 8016142:	4620      	mov	r0, r4
 8016144:	f009 fefa 	bl	801ff3c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE>
					&TWIPR_CommunicationManager::resetUART));

	// Initialize the SPI Interface
	twipr_spi_comm_config_t spi_config = { .hspi = this->config.hspi,
 8016148:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801614c:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8016150:	461a      	mov	r2, r3
 8016152:	2300      	movs	r3, #0
 8016154:	6013      	str	r3, [r2, #0]
 8016156:	6053      	str	r3, [r2, #4]
 8016158:	6093      	str	r3, [r2, #8]
 801615a:	60d3      	str	r3, [r2, #12]
 801615c:	6113      	str	r3, [r2, #16]
 801615e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016162:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8016166:	220a      	movs	r2, #10
 8016168:	811a      	strh	r2, [r3, #8]
 801616a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801616e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	685a      	ldr	r2, [r3, #4]
			.sample_buffer = this->_sample_buffer_tx, .len_sample_buffer =
					TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE, .trajectory_buffer =
					this->config.trajectory_rx_buffer, .len_trajectory_buffer =
					this->config.len_trajectory_buffer };
 8016176:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801617a:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 801617e:	601a      	str	r2, [r3, #0]
			.sample_buffer = this->_sample_buffer_tx, .len_sample_buffer =
 8016180:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016184:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8016188:	681a      	ldr	r2, [r3, #0]
 801618a:	f641 03cc 	movw	r3, #6348	@ 0x18cc
 801618e:	4413      	add	r3, r2
					this->config.len_trajectory_buffer };
 8016190:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8016194:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8016198:	6053      	str	r3, [r2, #4]
					this->config.trajectory_rx_buffer, .len_trajectory_buffer =
 801619a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801619e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	699a      	ldr	r2, [r3, #24]
					this->config.len_trajectory_buffer };
 80161a6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80161aa:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80161ae:	60da      	str	r2, [r3, #12]
 80161b0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80161b4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	8b9a      	ldrh	r2, [r3, #28]
 80161bc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80161c0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80161c4:	821a      	strh	r2, [r3, #16]
	this->spi_interface.init(spi_config);
 80161c6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80161ca:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	f241 4448 	movw	r4, #5192	@ 0x1448
 80161d4:	441c      	add	r4, r3
 80161d6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80161da:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80161de:	466d      	mov	r5, sp
 80161e0:	f103 020c 	add.w	r2, r3, #12
 80161e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80161e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80161ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80161ee:	4620      	mov	r0, r4
 80161f0:	f7fd ff26 	bl	8014040 <_ZN23TWIPR_SPI_Communication4initE23twipr_spi_comm_config_t>

	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX,
 80161f4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80161f8:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	f241 4448 	movw	r4, #5192	@ 0x1448
 8016202:	441c      	add	r4, r3
			core_utils_Callback<void, uint16_t>(this,
 8016204:	4b4e      	ldr	r3, [pc, #312]	@ (8016340 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x37c>)
 8016206:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801620a:	2300      	movs	r3, #0
 801620c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8016210:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016214:	f5a3 71ae 	sub.w	r1, r3, #348	@ 0x15c
 8016218:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 801621c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8016220:	cb0c      	ldmia	r3, {r2, r3}
 8016222:	6809      	ldr	r1, [r1, #0]
 8016224:	f000 fc52 	bl	8016acc <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_TRAJECTORY_RX,
 8016228:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 801622c:	461a      	mov	r2, r3
 801622e:	2100      	movs	r1, #0
 8016230:	4620      	mov	r0, r4
 8016232:	f7fd ff95 	bl	8014160 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>
					&TWIPR_CommunicationManager::_spi_rxTrajectory_callback));
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
 8016236:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801623a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	f241 4448 	movw	r4, #5192	@ 0x1448
 8016244:	441c      	add	r4, r3
			core_utils_Callback<void, uint16_t>(this,
 8016246:	4b3f      	ldr	r3, [pc, #252]	@ (8016344 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x380>)
 8016248:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801624c:	2300      	movs	r3, #0
 801624e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8016252:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016256:	f5a3 71ae 	sub.w	r1, r3, #348	@ 0x15c
 801625a:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 801625e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016262:	cb0c      	ldmia	r3, {r2, r3}
 8016264:	6809      	ldr	r1, [r1, #0]
 8016266:	f000 fc31 	bl	8016acc <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
	this->spi_interface.registerCallback(TWIPR_SPI_COMM_CALLBACK_SAMPLE_TX,
 801626a:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 801626e:	461a      	mov	r2, r3
 8016270:	2101      	movs	r1, #1
 8016272:	4620      	mov	r0, r4
 8016274:	f7fd ff74 	bl	8014160 <_ZN23TWIPR_SPI_Communication16registerCallbackE28twipr_spi_comm_callback_id_t19core_utils_CallbackIvtE>
					&TWIPR_CommunicationManager::_spi_txSamples_callback));


	core_utils_gpio_registerExtiCallback(CM4_SPI_READY_PIN,
			core_utils_Callback<void, void>(this,
 8016278:	4b33      	ldr	r3, [pc, #204]	@ (8016348 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x384>)
 801627a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 801627e:	2300      	movs	r3, #0
 8016280:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8016284:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8016288:	f5a3 71ae 	sub.w	r1, r3, #348	@ 0x15c
 801628c:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8016290:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8016294:	cb0c      	ldmia	r3, {r2, r3}
 8016296:	6809      	ldr	r1, [r1, #0]
 8016298:	f000 fbe4 	bl	8016a64 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>
	core_utils_gpio_registerExtiCallback(CM4_SPI_READY_PIN,
 801629c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80162a0:	4619      	mov	r1, r3
 80162a2:	2004      	movs	r0, #4
 80162a4:	f009 fe4a 	bl	801ff3c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE>
					&TWIPR_CommunicationManager::spi_pin_callback));


	HAL_DMA_RegisterCallback(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
 80162a8:	4a28      	ldr	r2, [pc, #160]	@ (801634c <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x388>)
 80162aa:	2100      	movs	r1, #0
 80162ac:	4828      	ldr	r0, [pc, #160]	@ (8016350 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x38c>)
 80162ae:	f7ee fb93 	bl	80049d8 <HAL_DMA_RegisterCallback>
			HAL_DMA_XFER_CPLT_CB_ID, sample_dma_transfer_cmplt_callback);

	// Register the Control Step Callback to fill the sample buffer
	this->config.control->registerCallback(TWIPR_CONTROL_CALLBACK_STEP,
 80162b2:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80162b6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	6a1c      	ldr	r4, [r3, #32]
			core_utils_Callback<void, uint32_t>(this,
 80162be:	4b25      	ldr	r3, [pc, #148]	@ (8016354 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t+0x390>)
 80162c0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80162c4:	2300      	movs	r3, #0
 80162c6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80162ca:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80162ce:	f5a3 71ae 	sub.w	r1, r3, #348	@ 0x15c
 80162d2:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 80162d6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80162da:	cb0c      	ldmia	r3, {r2, r3}
 80162dc:	6809      	ldr	r1, [r1, #0]
 80162de:	f000 fc29 	bl	8016b34 <_ZN19core_utils_CallbackIvmEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvmE>
	this->config.control->registerCallback(TWIPR_CONTROL_CALLBACK_STEP,
 80162e2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80162e6:	461a      	mov	r2, r3
 80162e8:	2103      	movs	r1, #3
 80162ea:	4620      	mov	r0, r4
 80162ec:	f001 ff78 	bl	80181e0 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE>
					&TWIPR_CommunicationManager::_controlStep_callback));

	// Reset the sample buffer index to zero, so that the communication starts here
	this->_sample_buffer_index = 0;
 80162f0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80162f4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80162f8:	681b      	ldr	r3, [r3, #0]
 80162fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80162fe:	461a      	mov	r2, r3
 8016300:	2300      	movs	r3, #0
 8016302:	f8c2 3c64 	str.w	r3, [r2, #3172]	@ 0xc64

	this->tick = 0;
 8016306:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 801630a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016314:	461a      	mov	r2, r3
 8016316:	2300      	movs	r3, #0
 8016318:	f8c2 3510 	str.w	r3, [r2, #1296]	@ 0x510
}
 801631c:	bf00      	nop
 801631e:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8016322:	46bd      	mov	sp, r7
 8016324:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8016328:	b004      	add	sp, #16
 801632a:	4770      	bx	lr
 801632c:	24015410 	.word	0x24015410
 8016330:	0801639d 	.word	0x0801639d
 8016334:	080164e9 	.word	0x080164e9
 8016338:	08016605 	.word	0x08016605
 801633c:	08016381 	.word	0x08016381
 8016340:	0801678d 	.word	0x0801678d
 8016344:	08016805 	.word	0x08016805
 8016348:	08016825 	.word	0x08016825
 801634c:	080169dd 	.word	0x080169dd
 8016350:	24000ba4 	.word	0x24000ba4
 8016354:	0801686d 	.word	0x0801686d

08016358 <_ZN26TWIPR_CommunicationManager5startEv>:
/* ====================================================================== */
void TWIPR_CommunicationManager::start() {
 8016358:	b580      	push	{r7, lr}
 801635a:	b082      	sub	sp, #8
 801635c:	af00      	add	r7, sp, #0
 801635e:	6078      	str	r0, [r7, #4]

	// Start the UART Interface
	this->uart_interface.start();
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	332c      	adds	r3, #44	@ 0x2c
 8016364:	4618      	mov	r0, r3
 8016366:	f7fe fa21 	bl	80147ac <_ZN24TWIPR_UART_Communication5startEv>

	// Start the SPI Interface
	this->spi_interface.start();
 801636a:	687a      	ldr	r2, [r7, #4]
 801636c:	f241 4348 	movw	r3, #5192	@ 0x1448
 8016370:	4413      	add	r3, r2
 8016372:	4618      	mov	r0, r3
 8016374:	f7fd fec4 	bl	8014100 <_ZN23TWIPR_SPI_Communication5startEv>
}
 8016378:	bf00      	nop
 801637a:	3708      	adds	r7, #8
 801637c:	46bd      	mov	sp, r7
 801637e:	bd80      	pop	{r7, pc}

08016380 <_ZN26TWIPR_CommunicationManager9resetUARTEv>:
	}
	}
}

/* ====================================================================== */
void TWIPR_CommunicationManager::resetUART(){
 8016380:	b580      	push	{r7, lr}
 8016382:	b082      	sub	sp, #8
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
	this->uart_interface.reset();
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	332c      	adds	r3, #44	@ 0x2c
 801638c:	4618      	mov	r0, r3
 801638e:	f7fe fa27 	bl	80147e0 <_ZN24TWIPR_UART_Communication5resetEv>
}
 8016392:	bf00      	nop
 8016394:	3708      	adds	r7, #8
 8016396:	46bd      	mov	sp, r7
 8016398:	bd80      	pop	{r7, pc}
	...

0801639c <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_write_callback(
		core_comm_SerialMessage *msg) {
 801639c:	b580      	push	{r7, lr}
 801639e:	b084      	sub	sp, #16
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
 80163a4:	6039      	str	r1, [r7, #0]

	RegisterMap *reg_map;

	switch (msg->address_1) {
 80163a6:	683b      	ldr	r3, [r7, #0]
 80163a8:	785b      	ldrb	r3, [r3, #1]
 80163aa:	2b01      	cmp	r3, #1
 80163ac:	d002      	beq.n	80163b4 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x18>
 80163ae:	2b02      	cmp	r3, #2
 80163b0:	d004      	beq.n	80163bc <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x20>
 80163b2:	e007      	b.n	80163c4 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x28>
	case TWIPR_FIRMWARE_REGISTER_MAP_GENERAL: {
		reg_map = this->config.reg_map_general;
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	695b      	ldr	r3, [r3, #20]
 80163b8:	60fb      	str	r3, [r7, #12]
		break;
 80163ba:	e009      	b.n	80163d0 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x34>
	}
	case TWIPR_FIRMWARE_REGISTER_MAP_CONTROL: {
		reg_map = this->config.reg_map_control;
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	691b      	ldr	r3, [r3, #16]
 80163c0:	60fb      	str	r3, [r7, #12]
		break;
 80163c2:	e005      	b.n	80163d0 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x34>
	}
	default: {
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 80163c4:	2202      	movs	r2, #2
 80163c6:	6839      	ldr	r1, [r7, #0]
 80163c8:	6878      	ldr	r0, [r7, #4]
 80163ca:	f000 f9b3 	bl	8016734 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 80163ce:	e086      	b.n	80164de <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
		break;
	}
	}

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 80163d0:	683b      	ldr	r3, [r7, #0]
 80163d2:	789a      	ldrb	r2, [r3, #2]
 80163d4:	683b      	ldr	r3, [r7, #0]
 80163d6:	78db      	ldrb	r3, [r3, #3]
 80163d8:	4619      	mov	r1, r3
 80163da:	4610      	mov	r0, r2
 80163dc:	f009 fcf6 	bl	801fdcc <_Z15uint8_to_uint16hh>
 80163e0:	4603      	mov	r3, r0
 80163e2:	817b      	strh	r3, [r7, #10]
	if (!reg_map->hasEntry(address)){
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	330c      	adds	r3, #12
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	897a      	ldrh	r2, [r7, #10]
 80163ee:	4611      	mov	r1, r2
 80163f0:	68f8      	ldr	r0, [r7, #12]
 80163f2:	4798      	blx	r3
 80163f4:	4603      	mov	r3, r0
 80163f6:	f083 0301 	eor.w	r3, r3, #1
 80163fa:	b2db      	uxtb	r3, r3
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d005      	beq.n	801640c <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x70>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 8016400:	2202      	movs	r2, #2
 8016402:	6839      	ldr	r1, [r7, #0]
 8016404:	6878      	ldr	r0, [r7, #4]
 8016406:	f000 f995 	bl	8016734 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 801640a:	e068      	b.n	80164de <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
	}
	if (reg_map->getSize(address) != msg->len) {
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	3314      	adds	r3, #20
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	897a      	ldrh	r2, [r7, #10]
 8016416:	4611      	mov	r1, r2
 8016418:	68f8      	ldr	r0, [r7, #12]
 801641a:	4798      	blx	r3
 801641c:	4603      	mov	r3, r0
 801641e:	461a      	mov	r2, r3
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	899b      	ldrh	r3, [r3, #12]
 8016424:	429a      	cmp	r2, r3
 8016426:	bf14      	ite	ne
 8016428:	2301      	movne	r3, #1
 801642a:	2300      	moveq	r3, #0
 801642c:	b2db      	uxtb	r3, r3
 801642e:	2b00      	cmp	r3, #0
 8016430:	d005      	beq.n	801643e <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xa2>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_LEN);
 8016432:	2205      	movs	r2, #5
 8016434:	6839      	ldr	r1, [r7, #0]
 8016436:	6878      	ldr	r0, [r7, #4]
 8016438:	f000 f97c 	bl	8016734 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 801643c:	e04f      	b.n	80164de <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
	}
	if (reg_map->getType(address) != REGISTER_ENTRY_DATA) {
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	681b      	ldr	r3, [r3, #0]
 8016442:	3318      	adds	r3, #24
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	897a      	ldrh	r2, [r7, #10]
 8016448:	4611      	mov	r1, r2
 801644a:	68f8      	ldr	r0, [r7, #12]
 801644c:	4798      	blx	r3
 801644e:	4603      	mov	r3, r0
 8016450:	2b01      	cmp	r3, #1
 8016452:	bf14      	ite	ne
 8016454:	2301      	movne	r3, #1
 8016456:	2300      	moveq	r3, #0
 8016458:	b2db      	uxtb	r3, r3
 801645a:	2b00      	cmp	r3, #0
 801645c:	d005      	beq.n	801646a <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xce>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 801645e:	2206      	movs	r2, #6
 8016460:	6839      	ldr	r1, [r7, #0]
 8016462:	6878      	ldr	r0, [r7, #4]
 8016464:	f000 f966 	bl	8016734 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8016468:	e039      	b.n	80164de <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
	}
	if (reg_map->getReadWriteSetting(address) == REGISTER_ENTRY_READ) {
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	331c      	adds	r3, #28
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	897a      	ldrh	r2, [r7, #10]
 8016474:	4611      	mov	r1, r2
 8016476:	68f8      	ldr	r0, [r7, #12]
 8016478:	4798      	blx	r3
 801647a:	4603      	mov	r3, r0
 801647c:	2b00      	cmp	r3, #0
 801647e:	bf0c      	ite	eq
 8016480:	2301      	moveq	r3, #1
 8016482:	2300      	movne	r3, #0
 8016484:	b2db      	uxtb	r3, r3
 8016486:	2b00      	cmp	r3, #0
 8016488:	d005      	beq.n	8016496 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0xfa>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRITE);
 801648a:	2203      	movs	r2, #3
 801648c:	6839      	ldr	r1, [r7, #0]
 801648e:	6878      	ldr	r0, [r7, #4]
 8016490:	f000 f950 	bl	8016734 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8016494:	e023      	b.n	80164de <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x142>
	}

	reg_map->write(address, msg->data_ptr);
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	3304      	adds	r3, #4
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	683a      	ldr	r2, [r7, #0]
 80164a0:	6892      	ldr	r2, [r2, #8]
 80164a2:	8979      	ldrh	r1, [r7, #10]
 80164a4:	68f8      	ldr	r0, [r7, #12]
 80164a6:	4798      	blx	r3

	outgoing_msg.address_1 = msg->address_1;
 80164a8:	683b      	ldr	r3, [r7, #0]
 80164aa:	785a      	ldrb	r2, [r3, #1]
 80164ac:	4b0d      	ldr	r3, [pc, #52]	@ (80164e4 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 80164ae:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_1 = msg->address_2;
 80164b0:	683b      	ldr	r3, [r7, #0]
 80164b2:	789a      	ldrb	r2, [r3, #2]
 80164b4:	4b0b      	ldr	r3, [pc, #44]	@ (80164e4 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 80164b6:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_1 = msg->address_3;
 80164b8:	683b      	ldr	r3, [r7, #0]
 80164ba:	78da      	ldrb	r2, [r3, #3]
 80164bc:	4b09      	ldr	r3, [pc, #36]	@ (80164e4 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 80164be:	705a      	strb	r2, [r3, #1]
	outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 80164c0:	4b08      	ldr	r3, [pc, #32]	@ (80164e4 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 80164c2:	2203      	movs	r2, #3
 80164c4:	701a      	strb	r2, [r3, #0]
	outgoing_msg.flag = 1;
 80164c6:	4b07      	ldr	r3, [pc, #28]	@ (80164e4 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 80164c8:	2201      	movs	r2, #1
 80164ca:	711a      	strb	r2, [r3, #4]
	outgoing_msg.len = 0;
 80164cc:	4b05      	ldr	r3, [pc, #20]	@ (80164e4 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 80164ce:	2200      	movs	r2, #0
 80164d0:	819a      	strh	r2, [r3, #12]

	this->uart_interface.send(&outgoing_msg);
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	332c      	adds	r3, #44	@ 0x2c
 80164d6:	4903      	ldr	r1, [pc, #12]	@ (80164e4 <_ZN26TWIPR_CommunicationManager30_uart_handleMsg_write_callbackEP23core_comm_SerialMessage+0x148>)
 80164d8:	4618      	mov	r0, r3
 80164da:	f7fe f98e 	bl	80147fa <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>

}
 80164de:	3710      	adds	r7, #16
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd80      	pop	{r7, pc}
 80164e4:	24015400 	.word	0x24015400

080164e8 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_read_callback(
		core_comm_SerialMessage *msg) {
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b084      	sub	sp, #16
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
 80164f0:	6039      	str	r1, [r7, #0]

	RegisterMap *reg_map;

	switch (msg->address_1) {
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	785b      	ldrb	r3, [r3, #1]
 80164f6:	2b01      	cmp	r3, #1
 80164f8:	d002      	beq.n	8016500 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x18>
 80164fa:	2b02      	cmp	r3, #2
 80164fc:	d004      	beq.n	8016508 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x20>
 80164fe:	e007      	b.n	8016510 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x28>
	case TWIPR_FIRMWARE_REGISTER_MAP_GENERAL: {
		reg_map = this->config.reg_map_general;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	695b      	ldr	r3, [r3, #20]
 8016504:	60fb      	str	r3, [r7, #12]
		break;
 8016506:	e009      	b.n	801651c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x34>
	}
	case TWIPR_FIRMWARE_REGISTER_MAP_CONTROL: {
		reg_map = this->config.reg_map_control;
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	691b      	ldr	r3, [r3, #16]
 801650c:	60fb      	str	r3, [r7, #12]
		break;
 801650e:	e005      	b.n	801651c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x34>
	}
	default: {
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 8016510:	2202      	movs	r2, #2
 8016512:	6839      	ldr	r1, [r7, #0]
 8016514:	6878      	ldr	r0, [r7, #4]
 8016516:	f000 f90d 	bl	8016734 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 801651a:	e06e      	b.n	80165fa <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x112>
		break;
	}
	}

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 801651c:	683b      	ldr	r3, [r7, #0]
 801651e:	789a      	ldrb	r2, [r3, #2]
 8016520:	683b      	ldr	r3, [r7, #0]
 8016522:	78db      	ldrb	r3, [r3, #3]
 8016524:	4619      	mov	r1, r3
 8016526:	4610      	mov	r0, r2
 8016528:	f009 fc50 	bl	801fdcc <_Z15uint8_to_uint16hh>
 801652c:	4603      	mov	r3, r0
 801652e:	817b      	strh	r3, [r7, #10]

	if (!reg_map->hasEntry(address)){
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	330c      	adds	r3, #12
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	897a      	ldrh	r2, [r7, #10]
 801653a:	4611      	mov	r1, r2
 801653c:	68f8      	ldr	r0, [r7, #12]
 801653e:	4798      	blx	r3
 8016540:	4603      	mov	r3, r0
 8016542:	f083 0301 	eor.w	r3, r3, #1
 8016546:	b2db      	uxtb	r3, r3
 8016548:	2b00      	cmp	r3, #0
 801654a:	d005      	beq.n	8016558 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x70>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 801654c:	2202      	movs	r2, #2
 801654e:	6839      	ldr	r1, [r7, #0]
 8016550:	6878      	ldr	r0, [r7, #4]
 8016552:	f000 f8ef 	bl	8016734 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8016556:	e050      	b.n	80165fa <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x112>
	}
	if (reg_map->getType(address) != REGISTER_ENTRY_DATA) {
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	3318      	adds	r3, #24
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	897a      	ldrh	r2, [r7, #10]
 8016562:	4611      	mov	r1, r2
 8016564:	68f8      	ldr	r0, [r7, #12]
 8016566:	4798      	blx	r3
 8016568:	4603      	mov	r3, r0
 801656a:	2b01      	cmp	r3, #1
 801656c:	bf14      	ite	ne
 801656e:	2301      	movne	r3, #1
 8016570:	2300      	moveq	r3, #0
 8016572:	b2db      	uxtb	r3, r3
 8016574:	2b00      	cmp	r3, #0
 8016576:	d005      	beq.n	8016584 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x9c>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 8016578:	2206      	movs	r2, #6
 801657a:	6839      	ldr	r1, [r7, #0]
 801657c:	6878      	ldr	r0, [r7, #4]
 801657e:	f000 f8d9 	bl	8016734 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8016582:	e03a      	b.n	80165fa <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x112>
	}
	if (reg_map->getReadWriteSetting(address) == REGISTER_ENTRY_WRITE) {
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	681b      	ldr	r3, [r3, #0]
 8016588:	331c      	adds	r3, #28
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	897a      	ldrh	r2, [r7, #10]
 801658e:	4611      	mov	r1, r2
 8016590:	68f8      	ldr	r0, [r7, #12]
 8016592:	4798      	blx	r3
 8016594:	4603      	mov	r3, r0
 8016596:	2b01      	cmp	r3, #1
 8016598:	bf0c      	ite	eq
 801659a:	2301      	moveq	r3, #1
 801659c:	2300      	movne	r3, #0
 801659e:	b2db      	uxtb	r3, r3
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d005      	beq.n	80165b0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0xc8>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_READ);
 80165a4:	2204      	movs	r2, #4
 80165a6:	6839      	ldr	r1, [r7, #0]
 80165a8:	6878      	ldr	r0, [r7, #4]
 80165aa:	f000 f8c3 	bl	8016734 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 80165ae:	e024      	b.n	80165fa <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x112>
	}

	// Read the entry into the outgoing message
	outgoing_msg.len = reg_map->read(address, outgoing_msg.data_ptr);
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	3310      	adds	r3, #16
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	4a11      	ldr	r2, [pc, #68]	@ (8016600 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 80165ba:	6892      	ldr	r2, [r2, #8]
 80165bc:	8979      	ldrh	r1, [r7, #10]
 80165be:	68f8      	ldr	r0, [r7, #12]
 80165c0:	4798      	blx	r3
 80165c2:	4603      	mov	r3, r0
 80165c4:	461a      	mov	r2, r3
 80165c6:	4b0e      	ldr	r3, [pc, #56]	@ (8016600 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 80165c8:	819a      	strh	r2, [r3, #12]

	// Construct the outgoing message
	outgoing_msg.address_1 = msg->address_1;
 80165ca:	683b      	ldr	r3, [r7, #0]
 80165cc:	785a      	ldrb	r2, [r3, #1]
 80165ce:	4b0c      	ldr	r3, [pc, #48]	@ (8016600 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 80165d0:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_2 = msg->address_2;
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	789a      	ldrb	r2, [r3, #2]
 80165d6:	4b0a      	ldr	r3, [pc, #40]	@ (8016600 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 80165d8:	709a      	strb	r2, [r3, #2]
	outgoing_msg.address_3 = msg->address_3;
 80165da:	683b      	ldr	r3, [r7, #0]
 80165dc:	78da      	ldrb	r2, [r3, #3]
 80165de:	4b08      	ldr	r3, [pc, #32]	@ (8016600 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 80165e0:	70da      	strb	r2, [r3, #3]
	outgoing_msg.flag = 1;
 80165e2:	4b07      	ldr	r3, [pc, #28]	@ (8016600 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 80165e4:	2201      	movs	r2, #1
 80165e6:	711a      	strb	r2, [r3, #4]
	outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 80165e8:	4b05      	ldr	r3, [pc, #20]	@ (8016600 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 80165ea:	2203      	movs	r2, #3
 80165ec:	701a      	strb	r2, [r3, #0]

	this->uart_interface.send(&outgoing_msg);
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	332c      	adds	r3, #44	@ 0x2c
 80165f2:	4903      	ldr	r1, [pc, #12]	@ (8016600 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_read_callbackEP23core_comm_SerialMessage+0x118>)
 80165f4:	4618      	mov	r0, r3
 80165f6:	f7fe f900 	bl	80147fa <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
}
 80165fa:	3710      	adds	r7, #16
 80165fc:	46bd      	mov	sp, r7
 80165fe:	bd80      	pop	{r7, pc}
 8016600:	24015400 	.word	0x24015400

08016604 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uart_handleMsg_func_callback(
		core_comm_SerialMessage *msg) {
 8016604:	b590      	push	{r4, r7, lr}
 8016606:	b085      	sub	sp, #20
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
 801660c:	6039      	str	r1, [r7, #0]
	RegisterMap *reg_map;

	switch (msg->address_1) {
 801660e:	683b      	ldr	r3, [r7, #0]
 8016610:	785b      	ldrb	r3, [r3, #1]
 8016612:	2b01      	cmp	r3, #1
 8016614:	d002      	beq.n	801661c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x18>
 8016616:	2b02      	cmp	r3, #2
 8016618:	d004      	beq.n	8016624 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x20>
 801661a:	e007      	b.n	801662c <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x28>
	case TWIPR_FIRMWARE_REGISTER_MAP_GENERAL: {
		reg_map = this->config.reg_map_general;
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	695b      	ldr	r3, [r3, #20]
 8016620:	60fb      	str	r3, [r7, #12]
		break;
 8016622:	e009      	b.n	8016638 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x34>
	}
	case TWIPR_FIRMWARE_REGISTER_MAP_CONTROL: {
		reg_map = this->config.reg_map_control;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	691b      	ldr	r3, [r3, #16]
 8016628:	60fb      	str	r3, [r7, #12]
		break;
 801662a:	e005      	b.n	8016638 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x34>
	}
	default: {
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 801662c:	2202      	movs	r2, #2
 801662e:	6839      	ldr	r1, [r7, #0]
 8016630:	6878      	ldr	r0, [r7, #4]
 8016632:	f000 f87f 	bl	8016734 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8016636:	e077      	b.n	8016728 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x124>
		break;
	}
	}

	uint16_t address = uint8_to_uint16(msg->address_2, msg->address_3);
 8016638:	683b      	ldr	r3, [r7, #0]
 801663a:	789a      	ldrb	r2, [r3, #2]
 801663c:	683b      	ldr	r3, [r7, #0]
 801663e:	78db      	ldrb	r3, [r3, #3]
 8016640:	4619      	mov	r1, r3
 8016642:	4610      	mov	r0, r2
 8016644:	f009 fbc2 	bl	801fdcc <_Z15uint8_to_uint16hh>
 8016648:	4603      	mov	r3, r0
 801664a:	817b      	strh	r3, [r7, #10]
	if (!reg_map->hasEntry(address)){
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	330c      	adds	r3, #12
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	897a      	ldrh	r2, [r7, #10]
 8016656:	4611      	mov	r1, r2
 8016658:	68f8      	ldr	r0, [r7, #12]
 801665a:	4798      	blx	r3
 801665c:	4603      	mov	r3, r0
 801665e:	f083 0301 	eor.w	r3, r3, #1
 8016662:	b2db      	uxtb	r3, r3
 8016664:	2b00      	cmp	r3, #0
 8016666:	d005      	beq.n	8016674 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x70>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_WRONG_ADDRESS);
 8016668:	2202      	movs	r2, #2
 801666a:	6839      	ldr	r1, [r7, #0]
 801666c:	6878      	ldr	r0, [r7, #4]
 801666e:	f000 f861 	bl	8016734 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 8016672:	e059      	b.n	8016728 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x124>
	}
	if (reg_map->getSize(address) != msg->len) {
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	3314      	adds	r3, #20
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	897a      	ldrh	r2, [r7, #10]
 801667e:	4611      	mov	r1, r2
 8016680:	68f8      	ldr	r0, [r7, #12]
 8016682:	4798      	blx	r3
 8016684:	4603      	mov	r3, r0
 8016686:	461a      	mov	r2, r3
 8016688:	683b      	ldr	r3, [r7, #0]
 801668a:	899b      	ldrh	r3, [r3, #12]
 801668c:	429a      	cmp	r2, r3
 801668e:	bf14      	ite	ne
 8016690:	2301      	movne	r3, #1
 8016692:	2300      	moveq	r3, #0
 8016694:	b2db      	uxtb	r3, r3
 8016696:	2b00      	cmp	r3, #0
 8016698:	d005      	beq.n	80166a6 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xa2>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_LEN);
 801669a:	2205      	movs	r2, #5
 801669c:	6839      	ldr	r1, [r7, #0]
 801669e:	6878      	ldr	r0, [r7, #4]
 80166a0:	f000 f848 	bl	8016734 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
		return;
 80166a4:	e040      	b.n	8016728 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x124>
	}
	if (reg_map->getType(address) != REGISTER_ENTRY_FUNCTION) {
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	3318      	adds	r3, #24
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	897a      	ldrh	r2, [r7, #10]
 80166b0:	4611      	mov	r1, r2
 80166b2:	68f8      	ldr	r0, [r7, #12]
 80166b4:	4798      	blx	r3
 80166b6:	4603      	mov	r3, r0
 80166b8:	2b02      	cmp	r3, #2
 80166ba:	bf14      	ite	ne
 80166bc:	2301      	movne	r3, #1
 80166be:	2300      	moveq	r3, #0
 80166c0:	b2db      	uxtb	r3, r3
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d004      	beq.n	80166d0 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0xcc>
		this->_uartResponseError(msg, TWIPR_COMM_ERROR_FLAG_MSG_TYPE);
 80166c6:	2206      	movs	r2, #6
 80166c8:	6839      	ldr	r1, [r7, #0]
 80166ca:	6878      	ldr	r0, [r7, #4]
 80166cc:	f000 f832 	bl	8016734 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>
	}

	// Execute the function and store the data
	uint8_t ret_size = reg_map->execute(address, msg->data_ptr,
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	3320      	adds	r3, #32
 80166d6:	681c      	ldr	r4, [r3, #0]
 80166d8:	683b      	ldr	r3, [r7, #0]
 80166da:	689a      	ldr	r2, [r3, #8]
 80166dc:	4b14      	ldr	r3, [pc, #80]	@ (8016730 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 80166de:	689b      	ldr	r3, [r3, #8]
 80166e0:	8979      	ldrh	r1, [r7, #10]
 80166e2:	68f8      	ldr	r0, [r7, #12]
 80166e4:	47a0      	blx	r4
 80166e6:	4603      	mov	r3, r0
 80166e8:	727b      	strb	r3, [r7, #9]
			outgoing_msg.data_ptr);

	// Send back a message if the function returns something
	if (ret_size > 0) {
 80166ea:	7a7b      	ldrb	r3, [r7, #9]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d01b      	beq.n	8016728 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x124>
		outgoing_msg.address_1 = msg->address_1;
 80166f0:	683b      	ldr	r3, [r7, #0]
 80166f2:	785a      	ldrb	r2, [r3, #1]
 80166f4:	4b0e      	ldr	r3, [pc, #56]	@ (8016730 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 80166f6:	705a      	strb	r2, [r3, #1]
		outgoing_msg.address_2 = msg->address_2;
 80166f8:	683b      	ldr	r3, [r7, #0]
 80166fa:	789a      	ldrb	r2, [r3, #2]
 80166fc:	4b0c      	ldr	r3, [pc, #48]	@ (8016730 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 80166fe:	709a      	strb	r2, [r3, #2]
		outgoing_msg.address_3 = msg->address_3;
 8016700:	683b      	ldr	r3, [r7, #0]
 8016702:	78da      	ldrb	r2, [r3, #3]
 8016704:	4b0a      	ldr	r3, [pc, #40]	@ (8016730 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 8016706:	70da      	strb	r2, [r3, #3]
		outgoing_msg.flag = 1;
 8016708:	4b09      	ldr	r3, [pc, #36]	@ (8016730 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 801670a:	2201      	movs	r2, #1
 801670c:	711a      	strb	r2, [r3, #4]
		outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 801670e:	4b08      	ldr	r3, [pc, #32]	@ (8016730 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 8016710:	2203      	movs	r2, #3
 8016712:	701a      	strb	r2, [r3, #0]
		outgoing_msg.len = ret_size;
 8016714:	7a7b      	ldrb	r3, [r7, #9]
 8016716:	b29a      	uxth	r2, r3
 8016718:	4b05      	ldr	r3, [pc, #20]	@ (8016730 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 801671a:	819a      	strh	r2, [r3, #12]
		this->uart_interface.send(&outgoing_msg);
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	332c      	adds	r3, #44	@ 0x2c
 8016720:	4903      	ldr	r1, [pc, #12]	@ (8016730 <_ZN26TWIPR_CommunicationManager29_uart_handleMsg_func_callbackEP23core_comm_SerialMessage+0x12c>)
 8016722:	4618      	mov	r0, r3
 8016724:	f7fe f869 	bl	80147fa <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
	}
}
 8016728:	3714      	adds	r7, #20
 801672a:	46bd      	mov	sp, r7
 801672c:	bd90      	pop	{r4, r7, pc}
 801672e:	bf00      	nop
 8016730:	24015400 	.word	0x24015400

08016734 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh>:

/* ====================================================================== */
void TWIPR_CommunicationManager::_uartResponseError(core_comm_SerialMessage* incoming_message, uint8_t error_code){
 8016734:	b580      	push	{r7, lr}
 8016736:	b084      	sub	sp, #16
 8016738:	af00      	add	r7, sp, #0
 801673a:	60f8      	str	r0, [r7, #12]
 801673c:	60b9      	str	r1, [r7, #8]
 801673e:	4613      	mov	r3, r2
 8016740:	71fb      	strb	r3, [r7, #7]
	outgoing_msg.address_1 = incoming_message->address_1;
 8016742:	68bb      	ldr	r3, [r7, #8]
 8016744:	785a      	ldrb	r2, [r3, #1]
 8016746:	4b10      	ldr	r3, [pc, #64]	@ (8016788 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8016748:	705a      	strb	r2, [r3, #1]
	outgoing_msg.address_2 = incoming_message->address_2;
 801674a:	68bb      	ldr	r3, [r7, #8]
 801674c:	789a      	ldrb	r2, [r3, #2]
 801674e:	4b0e      	ldr	r3, [pc, #56]	@ (8016788 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8016750:	709a      	strb	r2, [r3, #2]
	outgoing_msg.address_3 = incoming_message->address_3;
 8016752:	68bb      	ldr	r3, [r7, #8]
 8016754:	78da      	ldrb	r2, [r3, #3]
 8016756:	4b0c      	ldr	r3, [pc, #48]	@ (8016788 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8016758:	70da      	strb	r2, [r3, #3]
	outgoing_msg.cmd = MSG_COMMAND_ANSWER;
 801675a:	4b0b      	ldr	r3, [pc, #44]	@ (8016788 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 801675c:	2203      	movs	r2, #3
 801675e:	701a      	strb	r2, [r3, #0]
	outgoing_msg.flag = 0;
 8016760:	4b09      	ldr	r3, [pc, #36]	@ (8016788 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8016762:	2200      	movs	r2, #0
 8016764:	711a      	strb	r2, [r3, #4]
	outgoing_msg.len = 1;
 8016766:	4b08      	ldr	r3, [pc, #32]	@ (8016788 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 8016768:	2201      	movs	r2, #1
 801676a:	819a      	strh	r2, [r3, #12]
	outgoing_msg.data_ptr[0] = error_code;
 801676c:	4b06      	ldr	r3, [pc, #24]	@ (8016788 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 801676e:	689b      	ldr	r3, [r3, #8]
 8016770:	79fa      	ldrb	r2, [r7, #7]
 8016772:	701a      	strb	r2, [r3, #0]
	this->uart_interface.send(&outgoing_msg);
 8016774:	68fb      	ldr	r3, [r7, #12]
 8016776:	332c      	adds	r3, #44	@ 0x2c
 8016778:	4903      	ldr	r1, [pc, #12]	@ (8016788 <_ZN26TWIPR_CommunicationManager18_uartResponseErrorEP23core_comm_SerialMessageh+0x54>)
 801677a:	4618      	mov	r0, r3
 801677c:	f7fe f83d 	bl	80147fa <_ZN24TWIPR_UART_Communication4sendEP23core_comm_SerialMessage>
}
 8016780:	bf00      	nop
 8016782:	3710      	adds	r7, #16
 8016784:	46bd      	mov	sp, r7
 8016786:	bd80      	pop	{r7, pc}
 8016788:	24015400 	.word	0x24015400

0801678c <_ZN26TWIPR_CommunicationManager26_spi_rxTrajectory_callbackEt>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_spi_rxTrajectory_callback(uint16_t len) {
 801678c:	b580      	push	{r7, lr}
 801678e:	b082      	sub	sp, #8
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
 8016794:	460b      	mov	r3, r1
 8016796:	807b      	strh	r3, [r7, #2]
	// We have received a new trajectory by the CM4
	if (this->_callbacks.new_trajectory.registered){
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801679e:	f893 3518 	ldrb.w	r3, [r3, #1304]	@ 0x518
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d008      	beq.n	80167b8 <_ZN26TWIPR_CommunicationManager26_spi_rxTrajectory_callbackEt+0x2c>
		this->_callbacks.new_trajectory.call(len);
 80167a6:	687a      	ldr	r2, [r7, #4]
 80167a8:	f241 5314 	movw	r3, #5396	@ 0x1514
 80167ac:	4413      	add	r3, r2
 80167ae:	887a      	ldrh	r2, [r7, #2]
 80167b0:	4611      	mov	r1, r2
 80167b2:	4618      	mov	r0, r3
 80167b4:	f7fd fde2 	bl	801437c <_ZN19core_utils_CallbackIvtE4callEt>
	}
	this->spi_interface.provideSampleData();
 80167b8:	687a      	ldr	r2, [r7, #4]
 80167ba:	f241 4348 	movw	r3, #5192	@ 0x1448
 80167be:	4413      	add	r3, r2
 80167c0:	4618      	mov	r0, r3
 80167c2:	f7fd fcfb 	bl	80141bc <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
}
 80167c6:	bf00      	nop
 80167c8:	3708      	adds	r7, #8
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd80      	pop	{r7, pc}

080167ce <_ZN26TWIPR_CommunicationManager16sampleBufferFullEv>:
/* ====================================================================== */
void TWIPR_CommunicationManager::sampleBufferFull(){
 80167ce:	b580      	push	{r7, lr}
 80167d0:	b082      	sub	sp, #8
 80167d2:	af00      	add	r7, sp, #0
 80167d4:	6078      	str	r0, [r7, #4]
	this->spi_interface.stopTransmission();
 80167d6:	687a      	ldr	r2, [r7, #4]
 80167d8:	f241 4348 	movw	r3, #5192	@ 0x1448
 80167dc:	4413      	add	r3, r2
 80167de:	4618      	mov	r0, r3
 80167e0:	f7fd fd60 	bl	80142a4 <_ZN23TWIPR_SPI_Communication16stopTransmissionEv>

	this->spi_interface.provideSampleData();
 80167e4:	687a      	ldr	r2, [r7, #4]
 80167e6:	f241 4348 	movw	r3, #5192	@ 0x1448
 80167ea:	4413      	add	r3, r2
 80167ec:	4618      	mov	r0, r3
 80167ee:	f7fd fce5 	bl	80141bc <_ZN23TWIPR_SPI_Communication17provideSampleDataEv>
	this->config.notification_gpio_tx.toggle();
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	3308      	adds	r3, #8
 80167f6:	4618      	mov	r0, r3
 80167f8:	f009 fb90 	bl	801ff1c <_ZN15core_utils_GPIO6toggleEv>
//	this->config.notification_gpio_tx.write(0);
////	// Notify the CM4 that the sample buffer is full by writing a HIGH to the communication pin
//	this->config.notification_gpio_tx.write(1);

}
 80167fc:	bf00      	nop
 80167fe:	3708      	adds	r7, #8
 8016800:	46bd      	mov	sp, r7
 8016802:	bd80      	pop	{r7, pc}

08016804 <_ZN26TWIPR_CommunicationManager23_spi_txSamples_callbackEt>:
/* ====================================================================== */
void TWIPR_CommunicationManager::_spi_txSamples_callback(uint16_t len) {
 8016804:	b580      	push	{r7, lr}
 8016806:	b082      	sub	sp, #8
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
 801680c:	460b      	mov	r3, r1
 801680e:	807b      	strh	r3, [r7, #2]
	this->config.notification_gpio_tx.write(0);
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	3308      	adds	r3, #8
 8016814:	2100      	movs	r1, #0
 8016816:	4618      	mov	r0, r3
 8016818:	f009 fb62 	bl	801fee0 <_ZN15core_utils_GPIO5writeEh>
}
 801681c:	bf00      	nop
 801681e:	3708      	adds	r7, #8
 8016820:	46bd      	mov	sp, r7
 8016822:	bd80      	pop	{r7, pc}

08016824 <_ZN26TWIPR_CommunicationManager16spi_pin_callbackEv>:


/* ====================================================================== */
void TWIPR_CommunicationManager::spi_pin_callback() {
 8016824:	b580      	push	{r7, lr}
 8016826:	b084      	sub	sp, #16
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
	GPIO_PinState pin_state = HAL_GPIO_ReadPin(SPI_PIN_GPIOx, SPI_PIN_PIN);
 801682c:	2104      	movs	r1, #4
 801682e:	480e      	ldr	r0, [pc, #56]	@ (8016868 <_ZN26TWIPR_CommunicationManager16spi_pin_callbackEv+0x44>)
 8016830:	f7ef fd36 	bl	80062a0 <HAL_GPIO_ReadPin>
 8016834:	4603      	mov	r3, r0
 8016836:	73fb      	strb	r3, [r7, #15]

	if (pin_state == GPIO_PIN_SET){ // Trajectory Mode
 8016838:	7bfb      	ldrb	r3, [r7, #15]
 801683a:	2b01      	cmp	r3, #1
 801683c:	d10e      	bne.n	801685c <_ZN26TWIPR_CommunicationManager16spi_pin_callbackEv+0x38>
		this->spi_interface.stopTransmission();
 801683e:	687a      	ldr	r2, [r7, #4]
 8016840:	f241 4348 	movw	r3, #5192	@ 0x1448
 8016844:	4413      	add	r3, r2
 8016846:	4618      	mov	r0, r3
 8016848:	f7fd fd2c 	bl	80142a4 <_ZN23TWIPR_SPI_Communication16stopTransmissionEv>
		this->spi_interface.receiveTrajectory();
 801684c:	687a      	ldr	r2, [r7, #4]
 801684e:	f241 4348 	movw	r3, #5192	@ 0x1448
 8016852:	4413      	add	r3, r2
 8016854:	4618      	mov	r0, r3
 8016856:	f7fd fca1 	bl	801419c <_ZN23TWIPR_SPI_Communication17receiveTrajectoryEv>
	} else { // Sample Mode
		nop();
	}
}
 801685a:	e001      	b.n	8016860 <_ZN26TWIPR_CommunicationManager16spi_pin_callbackEv+0x3c>
		nop();
 801685c:	f7fd fece 	bl	80145fc <_Z3nopv>
}
 8016860:	bf00      	nop
 8016862:	3710      	adds	r7, #16
 8016864:	46bd      	mov	sp, r7
 8016866:	bd80      	pop	{r7, pc}
 8016868:	58020400 	.word	0x58020400

0801686c <_ZN26TWIPR_CommunicationManager21_controlStep_callbackEm>:


/* ====================================================================== */
void TWIPR_CommunicationManager::_controlStep_callback(uint32_t tick){
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
 8016874:	6039      	str	r1, [r7, #0]
	this->tick = tick;
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801687c:	461a      	mov	r2, r3
 801687e:	683b      	ldr	r3, [r7, #0]
 8016880:	f8c2 3510 	str.w	r3, [r2, #1296]	@ 0x510
	this->_collectSampleData();
 8016884:	6878      	ldr	r0, [r7, #4]
 8016886:	f000 f805 	bl	8016894 <_ZN26TWIPR_CommunicationManager18_collectSampleDataEv>
}
 801688a:	bf00      	nop
 801688c:	3708      	adds	r7, #8
 801688e:	46bd      	mov	sp, r7
 8016890:	bd80      	pop	{r7, pc}
	...

08016894 <_ZN26TWIPR_CommunicationManager18_collectSampleDataEv>:


/* ======================================================================*/
void TWIPR_CommunicationManager::_collectSampleData(){
 8016894:	b5b0      	push	{r4, r5, r7, lr}
 8016896:	b08a      	sub	sp, #40	@ 0x28
 8016898:	af00      	add	r7, sp, #0
 801689a:	6278      	str	r0, [r7, #36]	@ 0x24
		// Build the sample
		this->_sample_buffer[this->_sample_buffer_index].general.tick = this->tick;
 801689c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801689e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80168a2:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	@ 0xc64
 80168a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80168a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80168ac:	f8d2 2510 	ldr.w	r2, [r2, #1296]	@ 0x510
 80168b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80168b2:	205c      	movs	r0, #92	@ 0x5c
 80168b4:	fb00 f303 	mul.w	r3, r0, r3
 80168b8:	4419      	add	r1, r3
 80168ba:	f241 5334 	movw	r3, #5428	@ 0x1534
 80168be:	440b      	add	r3, r1
 80168c0:	601a      	str	r2, [r3, #0]
		this->_sample_buffer[this->_sample_buffer_index].general.status = 1;
 80168c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80168c8:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	@ 0xc64
 80168cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80168ce:	215c      	movs	r1, #92	@ 0x5c
 80168d0:	fb01 f303 	mul.w	r3, r1, r3
 80168d4:	441a      	add	r2, r3
 80168d6:	f241 5338 	movw	r3, #5432	@ 0x1538
 80168da:	4413      	add	r3, r2
 80168dc:	2201      	movs	r2, #1
 80168de:	701a      	strb	r2, [r3, #0]


		this->_sample_buffer[this->_sample_buffer_index].control =
				this->config.control->getSample();
 80168e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168e2:	6a19      	ldr	r1, [r3, #32]
		this->_sample_buffer[this->_sample_buffer_index].control =
 80168e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80168ea:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	@ 0xc64
				this->config.control->getSample();
 80168ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80168f0:	205c      	movs	r0, #92	@ 0x5c
 80168f2:	fb00 f303 	mul.w	r3, r0, r3
 80168f6:	4413      	add	r3, r2
 80168f8:	f241 5438 	movw	r4, #5432	@ 0x1538
 80168fc:	441c      	add	r4, r3
 80168fe:	463b      	mov	r3, r7
 8016900:	4618      	mov	r0, r3
 8016902:	f001 fccc 	bl	801829e <_ZN20TWIPR_ControlManager9getSampleEv>
 8016906:	3404      	adds	r4, #4
 8016908:	463d      	mov	r5, r7
 801690a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801690c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801690e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8016912:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		this->_sample_buffer[this->_sample_buffer_index].estimation =
				this->config.estimation->getSample();
 8016916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016918:	6a59      	ldr	r1, [r3, #36]	@ 0x24
		this->_sample_buffer[this->_sample_buffer_index].estimation =
 801691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801691c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016920:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	@ 0xc64
				this->config.estimation->getSample();
 8016924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016926:	205c      	movs	r0, #92	@ 0x5c
 8016928:	fb00 f303 	mul.w	r3, r0, r3
 801692c:	4413      	add	r3, r2
 801692e:	f241 5450 	movw	r4, #5456	@ 0x1550
 8016932:	441c      	add	r4, r3
 8016934:	463b      	mov	r3, r7
 8016936:	4618      	mov	r0, r3
 8016938:	f004 f93c 	bl	801abb4 <_ZN16TWIPR_Estimation9getSampleEv>
 801693c:	3408      	adds	r4, #8
 801693e:	463d      	mov	r5, r7
 8016940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016944:	682b      	ldr	r3, [r5, #0]
 8016946:	6023      	str	r3, [r4, #0]

		this->_sample_buffer[this->_sample_buffer_index].sensors =
				this->config.sensors->getData();
 8016948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801694a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
		this->_sample_buffer[this->_sample_buffer_index].sensors =
 801694c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801694e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016952:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	@ 0xc64
				this->config.sensors->getData();
 8016956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016958:	205c      	movs	r0, #92	@ 0x5c
 801695a:	fb00 f303 	mul.w	r3, r0, r3
 801695e:	4413      	add	r3, r2
 8016960:	f241 5468 	movw	r4, #5480	@ 0x1568
 8016964:	441c      	add	r4, r3
 8016966:	463b      	mov	r3, r7
 8016968:	4618      	mov	r0, r3
 801696a:	f004 f9c7 	bl	801acfc <_ZN13TWIPR_Sensors7getDataEv>
 801696e:	3404      	adds	r4, #4
 8016970:	463d      	mov	r5, r7
 8016972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801697a:	682b      	ldr	r3, [r5, #0]
 801697c:	6023      	str	r3, [r4, #0]

		this->_sample_buffer_index++;
 801697e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8016984:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	@ 0xc64
 8016988:	3301      	adds	r3, #1
 801698a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801698c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8016990:	f8c2 3c64 	str.w	r3, [r2, #3172]	@ 0xc64

		if (this->_sample_buffer_index == TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE) {
 8016994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016996:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801699a:	f8d3 3c64 	ldr.w	r3, [r3, #3172]	@ 0xc64
 801699e:	2b0a      	cmp	r3, #10
 80169a0:	d115      	bne.n	80169ce <_ZN26TWIPR_CommunicationManager18_collectSampleDataEv+0x13a>
			// Copy the sample buffer to the outgoing buffer
			HAL_DMA_Start_IT(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
					(uint32_t) &this->_sample_buffer,
 80169a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80169a4:	f241 5334 	movw	r3, #5428	@ 0x1534
 80169a8:	4413      	add	r3, r2
			HAL_DMA_Start_IT(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
 80169aa:	4619      	mov	r1, r3
					(uint32_t) &this->_sample_buffer_tx,
 80169ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80169ae:	f641 03cc 	movw	r3, #6348	@ 0x18cc
 80169b2:	4413      	add	r3, r2
			HAL_DMA_Start_IT(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
 80169b4:	461a      	mov	r2, r3
 80169b6:	f44f 7366 	mov.w	r3, #920	@ 0x398
 80169ba:	4807      	ldr	r0, [pc, #28]	@ (80169d8 <_ZN26TWIPR_CommunicationManager18_collectSampleDataEv+0x144>)
 80169bc:	f7ec f914 	bl	8002be8 <HAL_DMA_Start_IT>
					TWIPR_FIRMWARE_SAMPLE_BUFFER_SIZE
							* sizeof(twipr_logging_sample_t));
			this->_sample_buffer_index = 0;
 80169c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80169c6:	461a      	mov	r2, r3
 80169c8:	2300      	movs	r3, #0
 80169ca:	f8c2 3c64 	str.w	r3, [r2, #3172]	@ 0xc64
		} else {
	//		osSemaphoreRelease(sem);
		}
}
 80169ce:	bf00      	nop
 80169d0:	3728      	adds	r7, #40	@ 0x28
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bdb0      	pop	{r4, r5, r7, pc}
 80169d6:	bf00      	nop
 80169d8:	24000ba4 	.word	0x24000ba4

080169dc <_Z34sample_dma_transfer_cmplt_callbackP19__DMA_HandleTypeDef>:

/* ======================================================================*/
void sample_dma_transfer_cmplt_callback(DMA_HandleTypeDef *hdma) {
 80169dc:	b580      	push	{r7, lr}
 80169de:	b082      	sub	sp, #8
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
	active_manager->sampleBufferFull();
 80169e4:	4b04      	ldr	r3, [pc, #16]	@ (80169f8 <_Z34sample_dma_transfer_cmplt_callbackP19__DMA_HandleTypeDef+0x1c>)
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	4618      	mov	r0, r3
 80169ea:	f7ff fef0 	bl	80167ce <_ZN26TWIPR_CommunicationManager16sampleBufferFullEv>
}
 80169ee:	bf00      	nop
 80169f0:	3708      	adds	r7, #8
 80169f2:	46bd      	mov	sp, r7
 80169f4:	bd80      	pop	{r7, pc}
 80169f6:	bf00      	nop
 80169f8:	24015410 	.word	0x24015410

080169fc <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 80169fc:	b5b0      	push	{r4, r5, r7, lr}
 80169fe:	b08a      	sub	sp, #40	@ 0x28
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	60f8      	str	r0, [r7, #12]
 8016a04:	60b9      	str	r1, [r7, #8]
 8016a06:	4639      	mov	r1, r7
 8016a08:	e881 000c 	stmia.w	r1, {r2, r3}
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	4618      	mov	r0, r3
 8016a10:	f7fd fabc 	bl	8013f8c <_ZN8CallbackC1Ev>
 8016a14:	4a12      	ldr	r2, [pc, #72]	@ (8016a60 <_ZN19core_utils_CallbackIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E+0x64>)
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	601a      	str	r2, [r3, #0]
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	711a      	strb	r2, [r3, #4]
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	3308      	adds	r3, #8
 8016a24:	2100      	movs	r1, #0
 8016a26:	4618      	mov	r0, r3
 8016a28:	f7fe fae8 	bl	8014ffc <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1EPFvS1_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8016a2c:	f107 0010 	add.w	r0, r7, #16
 8016a30:	463b      	mov	r3, r7
 8016a32:	cb0c      	ldmia	r3, {r2, r3}
 8016a34:	68b9      	ldr	r1, [r7, #8]
 8016a36:	f000 f8b1 	bl	8016b9c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	f103 0408 	add.w	r4, r3, #8
 8016a40:	f107 0510 	add.w	r5, r7, #16
 8016a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016a48:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016a4c:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	2201      	movs	r2, #1
 8016a54:	711a      	strb	r2, [r3, #4]
	}
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	4618      	mov	r0, r3
 8016a5a:	3728      	adds	r7, #40	@ 0x28
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8016a60:	08023440 	.word	0x08023440

08016a64 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
 8016a64:	b5b0      	push	{r4, r5, r7, lr}
 8016a66:	b08a      	sub	sp, #40	@ 0x28
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	60f8      	str	r0, [r7, #12]
 8016a6c:	60b9      	str	r1, [r7, #8]
 8016a6e:	4639      	mov	r1, r7
 8016a70:	e881 000c 	stmia.w	r1, {r2, r3}
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	4618      	mov	r0, r3
 8016a78:	f7fd fa88 	bl	8013f8c <_ZN8CallbackC1Ev>
 8016a7c:	4a12      	ldr	r2, [pc, #72]	@ (8016ac8 <_ZN19core_utils_CallbackIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE+0x64>)
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	601a      	str	r2, [r3, #0]
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	2200      	movs	r2, #0
 8016a86:	711a      	strb	r2, [r3, #4]
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	3308      	adds	r3, #8
 8016a8c:	2100      	movs	r1, #0
 8016a8e:	4618      	mov	r0, r3
 8016a90:	f7fd fc85 	bl	801439e <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<R,void>(object, member);
 8016a94:	f107 0010 	add.w	r0, r7, #16
 8016a98:	463b      	mov	r3, r7
 8016a9a:	cb0c      	ldmia	r3, {r2, r3}
 8016a9c:	68b9      	ldr	r1, [r7, #8]
 8016a9e:	f000 f890 	bl	8016bc2 <_ZN26core_utils_FunctionPointerIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	f103 0408 	add.w	r4, r3, #8
 8016aa8:	f107 0510 	add.w	r5, r7, #16
 8016aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016ab0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016ab4:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	2201      	movs	r2, #1
 8016abc:	711a      	strb	r2, [r3, #4]
	}
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	3728      	adds	r7, #40	@ 0x28
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8016ac8:	080233c4 	.word	0x080233c4

08016acc <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 8016acc:	b5b0      	push	{r4, r5, r7, lr}
 8016ace:	b08a      	sub	sp, #40	@ 0x28
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	60f8      	str	r0, [r7, #12]
 8016ad4:	60b9      	str	r1, [r7, #8]
 8016ad6:	4639      	mov	r1, r7
 8016ad8:	e881 000c 	stmia.w	r1, {r2, r3}
 8016adc:	68fb      	ldr	r3, [r7, #12]
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f7fd fa54 	bl	8013f8c <_ZN8CallbackC1Ev>
 8016ae4:	4a12      	ldr	r2, [pc, #72]	@ (8016b30 <_ZN19core_utils_CallbackIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE+0x64>)
 8016ae6:	68fb      	ldr	r3, [r7, #12]
 8016ae8:	601a      	str	r2, [r3, #0]
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	2200      	movs	r2, #0
 8016aee:	711a      	strb	r2, [r3, #4]
 8016af0:	68fb      	ldr	r3, [r7, #12]
 8016af2:	3308      	adds	r3, #8
 8016af4:	2100      	movs	r1, #0
 8016af6:	4618      	mov	r0, r3
 8016af8:	f7fd fc6a 	bl	80143d0 <_ZN26core_utils_FunctionPointerIvtEC1EPFvtE>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8016afc:	f107 0010 	add.w	r0, r7, #16
 8016b00:	463b      	mov	r3, r7
 8016b02:	cb0c      	ldmia	r3, {r2, r3}
 8016b04:	68b9      	ldr	r1, [r7, #8]
 8016b06:	f000 f86f 	bl	8016be8 <_ZN26core_utils_FunctionPointerIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	f103 0408 	add.w	r4, r3, #8
 8016b10:	f107 0510 	add.w	r5, r7, #16
 8016b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016b18:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016b1c:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	2201      	movs	r2, #1
 8016b24:	711a      	strb	r2, [r3, #4]
	}
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	4618      	mov	r0, r3
 8016b2a:	3728      	adds	r7, #40	@ 0x28
 8016b2c:	46bd      	mov	sp, r7
 8016b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8016b30:	080233b4 	.word	0x080233b4

08016b34 <_ZN19core_utils_CallbackIvmEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvmE>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 8016b34:	b5b0      	push	{r4, r5, r7, lr}
 8016b36:	b08a      	sub	sp, #40	@ 0x28
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	60f8      	str	r0, [r7, #12]
 8016b3c:	60b9      	str	r1, [r7, #8]
 8016b3e:	4639      	mov	r1, r7
 8016b40:	e881 000c 	stmia.w	r1, {r2, r3}
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	4618      	mov	r0, r3
 8016b48:	f7fd fa20 	bl	8013f8c <_ZN8CallbackC1Ev>
 8016b4c:	4a12      	ldr	r2, [pc, #72]	@ (8016b98 <_ZN19core_utils_CallbackIvmEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvmE+0x64>)
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	601a      	str	r2, [r3, #0]
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	2200      	movs	r2, #0
 8016b56:	711a      	strb	r2, [r3, #4]
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	3308      	adds	r3, #8
 8016b5c:	2100      	movs	r1, #0
 8016b5e:	4618      	mov	r0, r3
 8016b60:	f000 f855 	bl	8016c0e <_ZN26core_utils_FunctionPointerIvmEC1EPFvmE>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 8016b64:	f107 0010 	add.w	r0, r7, #16
 8016b68:	463b      	mov	r3, r7
 8016b6a:	cb0c      	ldmia	r3, {r2, r3}
 8016b6c:	68b9      	ldr	r1, [r7, #8]
 8016b6e:	f000 f85c 	bl	8016c2a <_ZN26core_utils_FunctionPointerIvmEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvmE>
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	f103 0408 	add.w	r4, r3, #8
 8016b78:	f107 0510 	add.w	r5, r7, #16
 8016b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016b80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016b84:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	2201      	movs	r2, #1
 8016b8c:	711a      	strb	r2, [r3, #4]
	}
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	4618      	mov	r0, r3
 8016b92:	3728      	adds	r7, #40	@ 0x28
 8016b94:	46bd      	mov	sp, r7
 8016b96:	bdb0      	pop	{r4, r5, r7, pc}
 8016b98:	08023470 	.word	0x08023470

08016b9c <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageEC1I26TWIPR_CommunicationManagerEEPT_MS5_FvS1_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8016b9c:	b580      	push	{r7, lr}
 8016b9e:	b084      	sub	sp, #16
 8016ba0:	af00      	add	r7, sp, #0
 8016ba2:	60f8      	str	r0, [r7, #12]
 8016ba4:	60b9      	str	r1, [r7, #8]
 8016ba6:	4639      	mov	r1, r7
 8016ba8:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8016bac:	463b      	mov	r3, r7
 8016bae:	cb0c      	ldmia	r3, {r2, r3}
 8016bb0:	68b9      	ldr	r1, [r7, #8]
 8016bb2:	68f8      	ldr	r0, [r7, #12]
 8016bb4:	f000 f84c 	bl	8016c50 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E>
    }
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	4618      	mov	r0, r3
 8016bbc:	3710      	adds	r7, #16
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	bd80      	pop	{r7, pc}

08016bc2 <_ZN26core_utils_FunctionPointerIvvEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8016bc2:	b580      	push	{r7, lr}
 8016bc4:	b084      	sub	sp, #16
 8016bc6:	af00      	add	r7, sp, #0
 8016bc8:	60f8      	str	r0, [r7, #12]
 8016bca:	60b9      	str	r1, [r7, #8]
 8016bcc:	4639      	mov	r1, r7
 8016bce:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8016bd2:	463b      	mov	r3, r7
 8016bd4:	cb0c      	ldmia	r3, {r2, r3}
 8016bd6:	68b9      	ldr	r1, [r7, #8]
 8016bd8:	68f8      	ldr	r0, [r7, #12]
 8016bda:	f000 f857 	bl	8016c8c <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE>
    }
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	4618      	mov	r0, r3
 8016be2:	3710      	adds	r7, #16
 8016be4:	46bd      	mov	sp, r7
 8016be6:	bd80      	pop	{r7, pc}

08016be8 <_ZN26core_utils_FunctionPointerIvtEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvtE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8016be8:	b580      	push	{r7, lr}
 8016bea:	b084      	sub	sp, #16
 8016bec:	af00      	add	r7, sp, #0
 8016bee:	60f8      	str	r0, [r7, #12]
 8016bf0:	60b9      	str	r1, [r7, #8]
 8016bf2:	4639      	mov	r1, r7
 8016bf4:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8016bf8:	463b      	mov	r3, r7
 8016bfa:	cb0c      	ldmia	r3, {r2, r3}
 8016bfc:	68b9      	ldr	r1, [r7, #8]
 8016bfe:	68f8      	ldr	r0, [r7, #12]
 8016c00:	f000 f862 	bl	8016cc8 <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE>
    }
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	4618      	mov	r0, r3
 8016c08:	3710      	adds	r7, #16
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}

08016c0e <_ZN26core_utils_FunctionPointerIvmEC1EPFvmE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8016c0e:	b580      	push	{r7, lr}
 8016c10:	b082      	sub	sp, #8
 8016c12:	af00      	add	r7, sp, #0
 8016c14:	6078      	str	r0, [r7, #4]
 8016c16:	6039      	str	r1, [r7, #0]
        attach(function);
 8016c18:	6839      	ldr	r1, [r7, #0]
 8016c1a:	6878      	ldr	r0, [r7, #4]
 8016c1c:	f000 f872 	bl	8016d04 <_ZN26core_utils_FunctionPointerIvmE6attachEPFvmE>
    }
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	4618      	mov	r0, r3
 8016c24:	3708      	adds	r7, #8
 8016c26:	46bd      	mov	sp, r7
 8016c28:	bd80      	pop	{r7, pc}

08016c2a <_ZN26core_utils_FunctionPointerIvmEC1I26TWIPR_CommunicationManagerEEPT_MS3_FvmE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8016c2a:	b580      	push	{r7, lr}
 8016c2c:	b084      	sub	sp, #16
 8016c2e:	af00      	add	r7, sp, #0
 8016c30:	60f8      	str	r0, [r7, #12]
 8016c32:	60b9      	str	r1, [r7, #8]
 8016c34:	4639      	mov	r1, r7
 8016c36:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8016c3a:	463b      	mov	r3, r7
 8016c3c:	cb0c      	ldmia	r3, {r2, r3}
 8016c3e:	68b9      	ldr	r1, [r7, #8]
 8016c40:	68f8      	ldr	r0, [r7, #12]
 8016c42:	f000 f871 	bl	8016d28 <_ZN26core_utils_FunctionPointerIvmE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvmE>
    }
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	4618      	mov	r0, r3
 8016c4a:	3710      	adds	r7, #16
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}

08016c50 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E>:
    void attach(T *object, R (T::*member)(A1)) {
 8016c50:	b480      	push	{r7}
 8016c52:	b085      	sub	sp, #20
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	60f8      	str	r0, [r7, #12]
 8016c58:	60b9      	str	r1, [r7, #8]
 8016c5a:	4639      	mov	r1, r7
 8016c5c:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8016c60:	68fb      	ldr	r3, [r7, #12]
 8016c62:	68ba      	ldr	r2, [r7, #8]
 8016c64:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	3304      	adds	r3, #4
 8016c6a:	461a      	mov	r2, r3
 8016c6c:	463b      	mov	r3, r7
 8016c6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016c72:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	4a03      	ldr	r2, [pc, #12]	@ (8016c88 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE6attachI26TWIPR_CommunicationManagerEEvPT_MS5_FvS1_E+0x38>)
 8016c7a:	615a      	str	r2, [r3, #20]
    }
 8016c7c:	bf00      	nop
 8016c7e:	3714      	adds	r7, #20
 8016c80:	46bd      	mov	sp, r7
 8016c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c86:	4770      	bx	lr
 8016c88:	08016d65 	.word	0x08016d65

08016c8c <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 8016c8c:	b480      	push	{r7}
 8016c8e:	b085      	sub	sp, #20
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	60f8      	str	r0, [r7, #12]
 8016c94:	60b9      	str	r1, [r7, #8]
 8016c96:	4639      	mov	r1, r7
 8016c98:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	68ba      	ldr	r2, [r7, #8]
 8016ca0:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	3304      	adds	r3, #4
 8016ca6:	461a      	mov	r2, r3
 8016ca8:	463b      	mov	r3, r7
 8016caa:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016cae:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8016cb2:	68fb      	ldr	r3, [r7, #12]
 8016cb4:	4a03      	ldr	r2, [pc, #12]	@ (8016cc4 <_ZN26core_utils_FunctionPointerIvvE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvvE+0x38>)
 8016cb6:	615a      	str	r2, [r3, #20]
    }
 8016cb8:	bf00      	nop
 8016cba:	3714      	adds	r7, #20
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc2:	4770      	bx	lr
 8016cc4:	08016db9 	.word	0x08016db9

08016cc8 <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE>:
    void attach(T *object, R (T::*member)(A1)) {
 8016cc8:	b480      	push	{r7}
 8016cca:	b085      	sub	sp, #20
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	60f8      	str	r0, [r7, #12]
 8016cd0:	60b9      	str	r1, [r7, #8]
 8016cd2:	4639      	mov	r1, r7
 8016cd4:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	68ba      	ldr	r2, [r7, #8]
 8016cdc:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	3304      	adds	r3, #4
 8016ce2:	461a      	mov	r2, r3
 8016ce4:	463b      	mov	r3, r7
 8016ce6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016cea:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8016cee:	68fb      	ldr	r3, [r7, #12]
 8016cf0:	4a03      	ldr	r2, [pc, #12]	@ (8016d00 <_ZN26core_utils_FunctionPointerIvtE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvtE+0x38>)
 8016cf2:	615a      	str	r2, [r3, #20]
    }
 8016cf4:	bf00      	nop
 8016cf6:	3714      	adds	r7, #20
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfe:	4770      	bx	lr
 8016d00:	08016e0b 	.word	0x08016e0b

08016d04 <_ZN26core_utils_FunctionPointerIvmE6attachEPFvmE>:
    void attach(R (*function)(A1)) {
 8016d04:	b480      	push	{r7}
 8016d06:	b083      	sub	sp, #12
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	6078      	str	r0, [r7, #4]
 8016d0c:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	683a      	ldr	r2, [r7, #0]
 8016d12:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	2200      	movs	r2, #0
 8016d18:	615a      	str	r2, [r3, #20]
    }
 8016d1a:	bf00      	nop
 8016d1c:	370c      	adds	r7, #12
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d24:	4770      	bx	lr
	...

08016d28 <_ZN26core_utils_FunctionPointerIvmE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvmE>:
    void attach(T *object, R (T::*member)(A1)) {
 8016d28:	b480      	push	{r7}
 8016d2a:	b085      	sub	sp, #20
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	60f8      	str	r0, [r7, #12]
 8016d30:	60b9      	str	r1, [r7, #8]
 8016d32:	4639      	mov	r1, r7
 8016d34:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	68ba      	ldr	r2, [r7, #8]
 8016d3c:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	3304      	adds	r3, #4
 8016d42:	461a      	mov	r2, r3
 8016d44:	463b      	mov	r3, r7
 8016d46:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016d4a:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	4a03      	ldr	r2, [pc, #12]	@ (8016d60 <_ZN26core_utils_FunctionPointerIvmE6attachI26TWIPR_CommunicationManagerEEvPT_MS3_FvmE+0x38>)
 8016d52:	615a      	str	r2, [r3, #20]
    }
 8016d54:	bf00      	nop
 8016d56:	3714      	adds	r7, #20
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d5e:	4770      	bx	lr
 8016d60:	08016e63 	.word	0x08016e63

08016d64 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8016d64:	b580      	push	{r7, lr}
 8016d66:	b086      	sub	sp, #24
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	60f8      	str	r0, [r7, #12]
 8016d6c:	60b9      	str	r1, [r7, #8]
 8016d6e:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8016d74:	68bb      	ldr	r3, [r7, #8]
 8016d76:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8016d78:	693b      	ldr	r3, [r7, #16]
 8016d7a:	685b      	ldr	r3, [r3, #4]
 8016d7c:	105b      	asrs	r3, r3, #1
 8016d7e:	461a      	mov	r2, r3
 8016d80:	697b      	ldr	r3, [r7, #20]
 8016d82:	1898      	adds	r0, r3, r2
 8016d84:	693b      	ldr	r3, [r7, #16]
 8016d86:	685b      	ldr	r3, [r3, #4]
 8016d88:	f003 0301 	and.w	r3, r3, #1
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d00b      	beq.n	8016da8 <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_+0x44>
 8016d90:	693b      	ldr	r3, [r7, #16]
 8016d92:	685b      	ldr	r3, [r3, #4]
 8016d94:	105b      	asrs	r3, r3, #1
 8016d96:	461a      	mov	r2, r3
 8016d98:	697b      	ldr	r3, [r7, #20]
 8016d9a:	4413      	add	r3, r2
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	693a      	ldr	r2, [r7, #16]
 8016da0:	6812      	ldr	r2, [r2, #0]
 8016da2:	4413      	add	r3, r2
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	e001      	b.n	8016dac <_ZN26core_utils_FunctionPointerIvP23core_comm_SerialMessageE12membercallerI26TWIPR_CommunicationManagerEEvPvPjS1_+0x48>
 8016da8:	693b      	ldr	r3, [r7, #16]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	6879      	ldr	r1, [r7, #4]
 8016dae:	4798      	blx	r3
 8016db0:	bf00      	nop
    }
 8016db2:	3718      	adds	r7, #24
 8016db4:	46bd      	mov	sp, r7
 8016db6:	bd80      	pop	{r7, pc}

08016db8 <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b084      	sub	sp, #16
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]
 8016dc0:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 8016dc6:	683b      	ldr	r3, [r7, #0]
 8016dc8:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 8016dca:	68bb      	ldr	r3, [r7, #8]
 8016dcc:	685b      	ldr	r3, [r3, #4]
 8016dce:	105b      	asrs	r3, r3, #1
 8016dd0:	461a      	mov	r2, r3
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	1899      	adds	r1, r3, r2
 8016dd6:	68bb      	ldr	r3, [r7, #8]
 8016dd8:	685b      	ldr	r3, [r3, #4]
 8016dda:	f003 0301 	and.w	r3, r3, #1
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d00b      	beq.n	8016dfa <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj+0x42>
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	685b      	ldr	r3, [r3, #4]
 8016de6:	105b      	asrs	r3, r3, #1
 8016de8:	461a      	mov	r2, r3
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	4413      	add	r3, r2
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	68ba      	ldr	r2, [r7, #8]
 8016df2:	6812      	ldr	r2, [r2, #0]
 8016df4:	4413      	add	r3, r2
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	e001      	b.n	8016dfe <_ZN26core_utils_FunctionPointerIvvE12membercallerI26TWIPR_CommunicationManagerEEvPvPj+0x46>
 8016dfa:	68bb      	ldr	r3, [r7, #8]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	4608      	mov	r0, r1
 8016e00:	4798      	blx	r3
 8016e02:	bf00      	nop
    }
 8016e04:	3710      	adds	r7, #16
 8016e06:	46bd      	mov	sp, r7
 8016e08:	bd80      	pop	{r7, pc}

08016e0a <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8016e0a:	b580      	push	{r7, lr}
 8016e0c:	b086      	sub	sp, #24
 8016e0e:	af00      	add	r7, sp, #0
 8016e10:	60f8      	str	r0, [r7, #12]
 8016e12:	60b9      	str	r1, [r7, #8]
 8016e14:	4613      	mov	r3, r2
 8016e16:	80fb      	strh	r3, [r7, #6]
        T* o = static_cast<T*>(object);
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8016e1c:	68bb      	ldr	r3, [r7, #8]
 8016e1e:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8016e20:	693b      	ldr	r3, [r7, #16]
 8016e22:	685b      	ldr	r3, [r3, #4]
 8016e24:	105b      	asrs	r3, r3, #1
 8016e26:	461a      	mov	r2, r3
 8016e28:	697b      	ldr	r3, [r7, #20]
 8016e2a:	1898      	adds	r0, r3, r2
 8016e2c:	693b      	ldr	r3, [r7, #16]
 8016e2e:	685b      	ldr	r3, [r3, #4]
 8016e30:	f003 0301 	and.w	r3, r3, #1
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d00b      	beq.n	8016e50 <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt+0x46>
 8016e38:	693b      	ldr	r3, [r7, #16]
 8016e3a:	685b      	ldr	r3, [r3, #4]
 8016e3c:	105b      	asrs	r3, r3, #1
 8016e3e:	461a      	mov	r2, r3
 8016e40:	697b      	ldr	r3, [r7, #20]
 8016e42:	4413      	add	r3, r2
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	693a      	ldr	r2, [r7, #16]
 8016e48:	6812      	ldr	r2, [r2, #0]
 8016e4a:	4413      	add	r3, r2
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	e001      	b.n	8016e54 <_ZN26core_utils_FunctionPointerIvtE12membercallerI26TWIPR_CommunicationManagerEEvPvPjt+0x4a>
 8016e50:	693b      	ldr	r3, [r7, #16]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	88fa      	ldrh	r2, [r7, #6]
 8016e56:	4611      	mov	r1, r2
 8016e58:	4798      	blx	r3
 8016e5a:	bf00      	nop
    }
 8016e5c:	3718      	adds	r7, #24
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd80      	pop	{r7, pc}

08016e62 <_ZN26core_utils_FunctionPointerIvmE12membercallerI26TWIPR_CommunicationManagerEEvPvPjm>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8016e62:	b580      	push	{r7, lr}
 8016e64:	b086      	sub	sp, #24
 8016e66:	af00      	add	r7, sp, #0
 8016e68:	60f8      	str	r0, [r7, #12]
 8016e6a:	60b9      	str	r1, [r7, #8]
 8016e6c:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8016e72:	68bb      	ldr	r3, [r7, #8]
 8016e74:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8016e76:	693b      	ldr	r3, [r7, #16]
 8016e78:	685b      	ldr	r3, [r3, #4]
 8016e7a:	105b      	asrs	r3, r3, #1
 8016e7c:	461a      	mov	r2, r3
 8016e7e:	697b      	ldr	r3, [r7, #20]
 8016e80:	1898      	adds	r0, r3, r2
 8016e82:	693b      	ldr	r3, [r7, #16]
 8016e84:	685b      	ldr	r3, [r3, #4]
 8016e86:	f003 0301 	and.w	r3, r3, #1
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d00b      	beq.n	8016ea6 <_ZN26core_utils_FunctionPointerIvmE12membercallerI26TWIPR_CommunicationManagerEEvPvPjm+0x44>
 8016e8e:	693b      	ldr	r3, [r7, #16]
 8016e90:	685b      	ldr	r3, [r3, #4]
 8016e92:	105b      	asrs	r3, r3, #1
 8016e94:	461a      	mov	r2, r3
 8016e96:	697b      	ldr	r3, [r7, #20]
 8016e98:	4413      	add	r3, r2
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	693a      	ldr	r2, [r7, #16]
 8016e9e:	6812      	ldr	r2, [r2, #0]
 8016ea0:	4413      	add	r3, r2
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	e001      	b.n	8016eaa <_ZN26core_utils_FunctionPointerIvmE12membercallerI26TWIPR_CommunicationManagerEEvPvPjm+0x48>
 8016ea6:	693b      	ldr	r3, [r7, #16]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	6879      	ldr	r1, [r7, #4]
 8016eac:	4798      	blx	r3
 8016eae:	bf00      	nop
    }
 8016eb0:	3718      	adds	r7, #24
 8016eb2:	46bd      	mov	sp, r7
 8016eb4:	bd80      	pop	{r7, pc}

08016eb6 <_ZN32twipr_balancing_control_config_tC1Ev>:

typedef enum twipr_balancing_control_callback_id_t {
	TWIPR_BALANCING_CONTROL_CALLBACK_ERROR = 1,
} twipr_balancing_control_callback_id_t;

typedef struct twipr_balancing_control_config_t {
 8016eb6:	b480      	push	{r7}
 8016eb8:	b083      	sub	sp, #12
 8016eba:	af00      	add	r7, sp, #0
 8016ebc:	6078      	str	r0, [r7, #4]
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	f04f 0200 	mov.w	r2, #0
 8016ec4:	621a      	str	r2, [r3, #32]
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	4618      	mov	r0, r3
 8016eca:	370c      	adds	r7, #12
 8016ecc:	46bd      	mov	sp, r7
 8016ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed2:	4770      	bx	lr

08016ed4 <_ZN22TWIPR_BalancingControlC1Ev>:
 *      Author: Dustin Lehmann
 */

#include <twipr_balancing_control.h>

TWIPR_BalancingControl::TWIPR_BalancingControl() {
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	b082      	sub	sp, #8
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	6078      	str	r0, [r7, #4]
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	3304      	adds	r3, #4
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	f7ff ffe8 	bl	8016eb6 <_ZN32twipr_balancing_control_config_tC1Ev>
	this->mode = TWIPR_BALANCING_CONTROL_MODE_OFF;
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	2200      	movs	r2, #0
 8016eea:	705a      	strb	r2, [r3, #1]
	this->status = TWIPR_BALANCING_CONTROL_STATUS_NONE;
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	2200      	movs	r2, #0
 8016ef0:	701a      	strb	r2, [r3, #0]
}
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	3708      	adds	r7, #8
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	bd80      	pop	{r7, pc}

08016efc <_ZN22TWIPR_BalancingControl4initE32twipr_balancing_control_config_t>:

/* ========================================================================= */
void TWIPR_BalancingControl::init(twipr_balancing_control_config_t config) {
 8016efc:	b084      	sub	sp, #16
 8016efe:	b4b0      	push	{r4, r5, r7}
 8016f00:	b083      	sub	sp, #12
 8016f02:	af00      	add	r7, sp, #0
 8016f04:	6078      	str	r0, [r7, #4]
 8016f06:	f107 001c 	add.w	r0, r7, #28
 8016f0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	1d1c      	adds	r4, r3, #4
 8016f12:	f107 051c 	add.w	r5, r7, #28
 8016f16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016f1e:	682b      	ldr	r3, [r5, #0]
 8016f20:	6023      	str	r3, [r4, #0]
	this->status = TWIPR_BALANCING_CONTROL_STATUS_IDLE;
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	2201      	movs	r2, #1
 8016f26:	701a      	strb	r2, [r3, #0]
}
 8016f28:	bf00      	nop
 8016f2a:	370c      	adds	r7, #12
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	bcb0      	pop	{r4, r5, r7}
 8016f30:	b004      	add	sp, #16
 8016f32:	4770      	bx	lr

08016f34 <_ZN22TWIPR_BalancingControl5startEv>:

/* ========================================================================= */
void TWIPR_BalancingControl::start() {
 8016f34:	b580      	push	{r7, lr}
 8016f36:	b082      	sub	sp, #8
 8016f38:	af00      	add	r7, sp, #0
 8016f3a:	6078      	str	r0, [r7, #4]
	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_NONE
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	f993 3000 	ldrsb.w	r3, [r3]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d005      	beq.n	8016f52 <_ZN22TWIPR_BalancingControl5startEv+0x1e>
			|| this->status == TWIPR_BALANCING_CONTROL_STATUS_ERROR) {
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	f993 3000 	ldrsb.w	r3, [r3]
 8016f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016f50:	d103      	bne.n	8016f5a <_ZN22TWIPR_BalancingControl5startEv+0x26>
		twipr_error_handler(TWIPR_BALANCING_CONTROL_ERROR_INIT);
 8016f52:	f240 6002 	movw	r0, #1538	@ 0x602
 8016f56:	f003 fbdf 	bl	801a718 <_Z19twipr_error_handlerm>
	}
	this->status = TWIPR_BALANCING_CONTROL_STATUS_RUNNING;
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	2202      	movs	r2, #2
 8016f5e:	701a      	strb	r2, [r3, #0]
}
 8016f60:	bf00      	nop
 8016f62:	3708      	adds	r7, #8
 8016f64:	46bd      	mov	sp, r7
 8016f66:	bd80      	pop	{r7, pc}

08016f68 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>:

/* ========================================================================= */
void TWIPR_BalancingControl::update(twipr_estimation_state_t state,
		twipr_balancing_control_input_t input,
		twipr_balancing_control_output_t *output) {
 8016f68:	b084      	sub	sp, #16
 8016f6a:	b580      	push	{r7, lr}
 8016f6c:	b088      	sub	sp, #32
 8016f6e:	af04      	add	r7, sp, #16
 8016f70:	60f8      	str	r0, [r7, #12]
 8016f72:	f107 001c 	add.w	r0, r7, #28
 8016f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8016f7a:	eeb0 7a40 	vmov.f32	s14, s0
 8016f7e:	eef0 7a60 	vmov.f32	s15, s1
 8016f82:	ed87 7a01 	vstr	s14, [r7, #4]
 8016f86:	edc7 7a02 	vstr	s15, [r7, #8]

	switch (this->status) {
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	f993 3000 	ldrsb.w	r3, [r3]
 8016f90:	3301      	adds	r3, #1
 8016f92:	2b03      	cmp	r3, #3
 8016f94:	d858      	bhi.n	8017048 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 8016f96:	a201      	add	r2, pc, #4	@ (adr r2, 8016f9c <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0x34>)
 8016f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f9c:	08016fd1 	.word	0x08016fd1
 8016fa0:	08016fad 	.word	0x08016fad
 8016fa4:	08016fbf 	.word	0x08016fbf
 8016fa8:	08016fe3 	.word	0x08016fe3
	case TWIPR_BALANCING_CONTROL_STATUS_NONE: {
		output->u_1 = 0;
 8016fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fae:	f04f 0200 	mov.w	r2, #0
 8016fb2:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 8016fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fb6:	f04f 0200 	mov.w	r2, #0
 8016fba:	605a      	str	r2, [r3, #4]
		break;
 8016fbc:	e044      	b.n	8017048 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_IDLE: {
		output->u_1 = 0;
 8016fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fc0:	f04f 0200 	mov.w	r2, #0
 8016fc4:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 8016fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fc8:	f04f 0200 	mov.w	r2, #0
 8016fcc:	605a      	str	r2, [r3, #4]
		break;
 8016fce:	e03b      	b.n	8017048 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_ERROR: {
		output->u_1 = 0;
 8016fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fd2:	f04f 0200 	mov.w	r2, #0
 8016fd6:	601a      	str	r2, [r3, #0]
		output->u_2 = 0;
 8016fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fda:	f04f 0200 	mov.w	r2, #0
 8016fde:	605a      	str	r2, [r3, #4]
		break;
 8016fe0:	e032      	b.n	8017048 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
	}
	case TWIPR_BALANCING_CONTROL_STATUS_RUNNING: {
		switch (this->mode) {
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	785b      	ldrb	r3, [r3, #1]
 8016fe6:	2b02      	cmp	r3, #2
 8016fe8:	d016      	beq.n	8017018 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xb0>
 8016fea:	2b02      	cmp	r3, #2
 8016fec:	dc2c      	bgt.n	8017048 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d002      	beq.n	8016ff8 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0x90>
 8016ff2:	2b01      	cmp	r3, #1
 8016ff4:	d009      	beq.n	801700a <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xa2>
			this->_calculateOutput(state, input, output);
		}
		}
	}
	}
}
 8016ff6:	e027      	b.n	8017048 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			output->u_1 = 0;
 8016ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ffa:	f04f 0200 	mov.w	r2, #0
 8016ffe:	601a      	str	r2, [r3, #0]
			output->u_2 = 0;
 8017000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017002:	f04f 0200 	mov.w	r2, #0
 8017006:	605a      	str	r2, [r3, #4]
			break;
 8017008:	e01e      	b.n	8017048 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			output->u_1 = input.u_1;
 801700a:	687a      	ldr	r2, [r7, #4]
 801700c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801700e:	601a      	str	r2, [r3, #0]
			output->u_2 = input.u_2;
 8017010:	68ba      	ldr	r2, [r7, #8]
 8017012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017014:	605a      	str	r2, [r3, #4]
			break;
 8017016:	e017      	b.n	8017048 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
			this->_calculateOutput(state, input, output);
 8017018:	ed97 7a01 	vldr	s14, [r7, #4]
 801701c:	edd7 7a02 	vldr	s15, [r7, #8]
 8017020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017022:	9302      	str	r3, [sp, #8]
 8017024:	466a      	mov	r2, sp
 8017026:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801702a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801702e:	e882 0003 	stmia.w	r2, {r0, r1}
 8017032:	f107 031c 	add.w	r3, r7, #28
 8017036:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017038:	eeb0 0a47 	vmov.f32	s0, s14
 801703c:	eef0 0a67 	vmov.f32	s1, s15
 8017040:	68f8      	ldr	r0, [r7, #12]
 8017042:	f000 f809 	bl	8017058 <_ZN22TWIPR_BalancingControl16_calculateOutputE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>
}
 8017046:	e7ff      	b.n	8017048 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t+0xe0>
 8017048:	bf00      	nop
 801704a:	3710      	adds	r7, #16
 801704c:	46bd      	mov	sp, r7
 801704e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017052:	b004      	add	sp, #16
 8017054:	4770      	bx	lr
 8017056:	bf00      	nop

08017058 <_ZN22TWIPR_BalancingControl16_calculateOutputE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>:
/* ========================================================================= */
void TWIPR_BalancingControl::_calculateOutput(twipr_estimation_state_t state,
		twipr_balancing_control_input_t input,
		twipr_balancing_control_output_t *output) {
 8017058:	b084      	sub	sp, #16
 801705a:	b480      	push	{r7}
 801705c:	b085      	sub	sp, #20
 801705e:	af00      	add	r7, sp, #0
 8017060:	60f8      	str	r0, [r7, #12]
 8017062:	f107 001c 	add.w	r0, r7, #28
 8017066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 801706a:	eeb0 7a40 	vmov.f32	s14, s0
 801706e:	eef0 7a60 	vmov.f32	s15, s1
 8017072:	ed87 7a01 	vstr	s14, [r7, #4]
 8017076:	edc7 7a02 	vstr	s15, [r7, #8]
	output->u_1 = this->config.K[0] * state.v + this->config.K[1] * state.theta
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	ed93 7a01 	vldr	s14, [r3, #4]
 8017080:	edd7 7a07 	vldr	s15, [r7, #28]
 8017084:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	edd3 6a02 	vldr	s13, [r3, #8]
 801708e:	edd7 7a08 	vldr	s15, [r7, #32]
 8017092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017096:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[2] * state.theta_dot
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	edd3 6a03 	vldr	s13, [r3, #12]
 80170a0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80170a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80170a8:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[3] * state.psi_dot;
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	edd3 6a04 	vldr	s13, [r3, #16]
 80170b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80170b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80170ba:	ee77 7a27 	vadd.f32	s15, s14, s15
	output->u_1 = this->config.K[0] * state.v + this->config.K[1] * state.theta
 80170be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80170c0:	edc3 7a00 	vstr	s15, [r3]

	output->u_2 = this->config.K[4] * state.v + this->config.K[5] * state.theta
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	ed93 7a05 	vldr	s14, [r3, #20]
 80170ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80170ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	edd3 6a06 	vldr	s13, [r3, #24]
 80170d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80170dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80170e0:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[6] * state.theta_dot
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	edd3 6a07 	vldr	s13, [r3, #28]
 80170ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80170ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80170f2:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ this->config.K[7] * state.psi_dot;
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	edd3 6a08 	vldr	s13, [r3, #32]
 80170fc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8017100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8017104:	ee77 7a27 	vadd.f32	s15, s14, s15
	output->u_2 = this->config.K[4] * state.v + this->config.K[5] * state.theta
 8017108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801710a:	edc3 7a01 	vstr	s15, [r3, #4]

	output->u_1 = output->u_1 + input.u_1;
 801710e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017110:	ed93 7a00 	vldr	s14, [r3]
 8017114:	edd7 7a01 	vldr	s15, [r7, #4]
 8017118:	ee77 7a27 	vadd.f32	s15, s14, s15
 801711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801711e:	edc3 7a00 	vstr	s15, [r3]
	output->u_2 = output->u_2 + input.u_2;
 8017122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017124:	ed93 7a01 	vldr	s14, [r3, #4]
 8017128:	edd7 7a02 	vldr	s15, [r7, #8]
 801712c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017132:	edc3 7a01 	vstr	s15, [r3, #4]

}
 8017136:	bf00      	nop
 8017138:	3714      	adds	r7, #20
 801713a:	46bd      	mov	sp, r7
 801713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017140:	b004      	add	sp, #16
 8017142:	4770      	bx	lr

08017144 <_ZN22TWIPR_BalancingControl4stopEv>:
void TWIPR_BalancingControl::reset() {
	this->stop();
	this->start();
}
/* ========================================================================= */
void TWIPR_BalancingControl::stop() {
 8017144:	b480      	push	{r7}
 8017146:	b083      	sub	sp, #12
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
	this->mode = TWIPR_BALANCING_CONTROL_MODE_OFF;
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	2200      	movs	r2, #0
 8017150:	705a      	strb	r2, [r3, #1]
//	this->status = TWIPR_BALANCING_CONTROL_STATUS_IDLE;
}
 8017152:	bf00      	nop
 8017154:	370c      	adds	r7, #12
 8017156:	46bd      	mov	sp, r7
 8017158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801715c:	4770      	bx	lr

0801715e <_ZN22TWIPR_BalancingControl5set_KEPf>:
/* ========================================================================= */
void TWIPR_BalancingControl::set_K(float K[8]) {
 801715e:	b580      	push	{r7, lr}
 8017160:	b082      	sub	sp, #8
 8017162:	af00      	add	r7, sp, #0
 8017164:	6078      	str	r0, [r7, #4]
 8017166:	6039      	str	r1, [r7, #0]
	memcpy(this->config.K, K, sizeof(float) * 8);
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	3304      	adds	r3, #4
 801716c:	2220      	movs	r2, #32
 801716e:	6839      	ldr	r1, [r7, #0]
 8017170:	4618      	mov	r0, r3
 8017172:	f00a f972 	bl	802145a <memcpy>
}
 8017176:	bf00      	nop
 8017178:	3708      	adds	r7, #8
 801717a:	46bd      	mov	sp, r7
 801717c:	bd80      	pop	{r7, pc}

0801717e <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>:
/* ========================================================================= */
void TWIPR_BalancingControl::setMode(twipr_balancing_control_mode_t mode) {
 801717e:	b480      	push	{r7}
 8017180:	b083      	sub	sp, #12
 8017182:	af00      	add	r7, sp, #0
 8017184:	6078      	str	r0, [r7, #4]
 8017186:	460b      	mov	r3, r1
 8017188:	70fb      	strb	r3, [r7, #3]

	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_ERROR){
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	f993 3000 	ldrsb.w	r3, [r3]
 8017190:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017194:	d008      	beq.n	80171a8 <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x2a>
		return;
	}

	if (this->status == TWIPR_BALANCING_CONTROL_STATUS_NONE){
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	f993 3000 	ldrsb.w	r3, [r3]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d005      	beq.n	80171ac <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x2e>
		return;
	}
	this->mode = mode;
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	78fa      	ldrb	r2, [r7, #3]
 80171a4:	705a      	strb	r2, [r3, #1]
 80171a6:	e002      	b.n	80171ae <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x30>
		return;
 80171a8:	bf00      	nop
 80171aa:	e000      	b.n	80171ae <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t+0x30>
		return;
 80171ac:	bf00      	nop
}
 80171ae:	370c      	adds	r7, #12
 80171b0:	46bd      	mov	sp, r7
 80171b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b6:	4770      	bx	lr

080171b8 <_ZN13RegisterEntry5writeEPv>:


/* ============================================================ */
class RegisterEntry {
public:
	virtual void write(void *value) {
 80171b8:	b480      	push	{r7}
 80171ba:	b083      	sub	sp, #12
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
 80171c0:	6039      	str	r1, [r7, #0]
		;
	}
 80171c2:	bf00      	nop
 80171c4:	370c      	adds	r7, #12
 80171c6:	46bd      	mov	sp, r7
 80171c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171cc:	4770      	bx	lr

080171ce <_ZN13RegisterEntry5writeEPh>:
	virtual void write(uint8_t *data) {
 80171ce:	b480      	push	{r7}
 80171d0:	b083      	sub	sp, #12
 80171d2:	af00      	add	r7, sp, #0
 80171d4:	6078      	str	r0, [r7, #4]
 80171d6:	6039      	str	r1, [r7, #0]
		;
	}
 80171d8:	bf00      	nop
 80171da:	370c      	adds	r7, #12
 80171dc:	46bd      	mov	sp, r7
 80171de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e2:	4770      	bx	lr

080171e4 <_ZN13RegisterEntry9readBytesEPh>:
	virtual uint8_t readBytes(uint8_t *data) {
 80171e4:	b480      	push	{r7}
 80171e6:	b083      	sub	sp, #12
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	6078      	str	r0, [r7, #4]
 80171ec:	6039      	str	r1, [r7, #0]
		return 0;
 80171ee:	2300      	movs	r3, #0
	}
 80171f0:	4618      	mov	r0, r3
 80171f2:	370c      	adds	r7, #12
 80171f4:	46bd      	mov	sp, r7
 80171f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171fa:	4770      	bx	lr

080171fc <_ZN13RegisterEntry7getSizeEv>:
	virtual uint8_t getSize() {
 80171fc:	b480      	push	{r7}
 80171fe:	b083      	sub	sp, #12
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
		return 0;;
 8017204:	2300      	movs	r3, #0
	}
 8017206:	4618      	mov	r0, r3
 8017208:	370c      	adds	r7, #12
 801720a:	46bd      	mov	sp, r7
 801720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017210:	4770      	bx	lr

08017212 <_ZN13RegisterEntry12getInputSizeEv>:
	virtual uint8_t getInputSize() {
 8017212:	b480      	push	{r7}
 8017214:	b083      	sub	sp, #12
 8017216:	af00      	add	r7, sp, #0
 8017218:	6078      	str	r0, [r7, #4]
		return 0;
 801721a:	2300      	movs	r3, #0
	}
 801721c:	4618      	mov	r0, r3
 801721e:	370c      	adds	r7, #12
 8017220:	46bd      	mov	sp, r7
 8017222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017226:	4770      	bx	lr

08017228 <_ZN13RegisterEntry13getOutputSizeEv>:

	virtual uint8_t getOutputSize() {
 8017228:	b480      	push	{r7}
 801722a:	b083      	sub	sp, #12
 801722c:	af00      	add	r7, sp, #0
 801722e:	6078      	str	r0, [r7, #4]
		return 0;
 8017230:	2300      	movs	r3, #0
	}
 8017232:	4618      	mov	r0, r3
 8017234:	370c      	adds	r7, #12
 8017236:	46bd      	mov	sp, r7
 8017238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801723c:	4770      	bx	lr

0801723e <_ZN13RegisterEntry7executeEv>:

	virtual void execute() {
 801723e:	b480      	push	{r7}
 8017240:	b083      	sub	sp, #12
 8017242:	af00      	add	r7, sp, #0
 8017244:	6078      	str	r0, [r7, #4]
	}
 8017246:	bf00      	nop
 8017248:	370c      	adds	r7, #12
 801724a:	46bd      	mov	sp, r7
 801724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017250:	4770      	bx	lr

08017252 <_ZN13RegisterEntry7executeEPhS0_>:

	virtual uint8_t execute(uint8_t *input, uint8_t *output) {
 8017252:	b480      	push	{r7}
 8017254:	b085      	sub	sp, #20
 8017256:	af00      	add	r7, sp, #0
 8017258:	60f8      	str	r0, [r7, #12]
 801725a:	60b9      	str	r1, [r7, #8]
 801725c:	607a      	str	r2, [r7, #4]
		return 0;
 801725e:	2300      	movs	r3, #0
	}
 8017260:	4618      	mov	r0, r3
 8017262:	3714      	adds	r7, #20
 8017264:	46bd      	mov	sp, r7
 8017266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726a:	4770      	bx	lr

0801726c <_ZN11RegisterMap5writeEtPv>:
};

/* ============================================================ */
class RegisterMap {
public:
	virtual void write(uint16_t address, void *data) {
 801726c:	b480      	push	{r7}
 801726e:	b085      	sub	sp, #20
 8017270:	af00      	add	r7, sp, #0
 8017272:	60f8      	str	r0, [r7, #12]
 8017274:	460b      	mov	r3, r1
 8017276:	607a      	str	r2, [r7, #4]
 8017278:	817b      	strh	r3, [r7, #10]
	}
 801727a:	bf00      	nop
 801727c:	3714      	adds	r7, #20
 801727e:	46bd      	mov	sp, r7
 8017280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017284:	4770      	bx	lr

08017286 <_ZN11RegisterMap5writeEtPh>:
	virtual void write(uint16_t address, uint8_t *data) {
 8017286:	b480      	push	{r7}
 8017288:	b085      	sub	sp, #20
 801728a:	af00      	add	r7, sp, #0
 801728c:	60f8      	str	r0, [r7, #12]
 801728e:	460b      	mov	r3, r1
 8017290:	607a      	str	r2, [r7, #4]
 8017292:	817b      	strh	r3, [r7, #10]
	}
 8017294:	bf00      	nop
 8017296:	3714      	adds	r7, #20
 8017298:	46bd      	mov	sp, r7
 801729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801729e:	4770      	bx	lr

080172a0 <_ZN11RegisterMap8addEntryEtP13RegisterEntry>:
	virtual void addEntry(uint16_t address, RegisterEntry *entry) {
 80172a0:	b480      	push	{r7}
 80172a2:	b085      	sub	sp, #20
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	60f8      	str	r0, [r7, #12]
 80172a8:	460b      	mov	r3, r1
 80172aa:	607a      	str	r2, [r7, #4]
 80172ac:	817b      	strh	r3, [r7, #10]

	}
 80172ae:	bf00      	nop
 80172b0:	3714      	adds	r7, #20
 80172b2:	46bd      	mov	sp, r7
 80172b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b8:	4770      	bx	lr

080172ba <_ZN11RegisterMap8hasEntryEt>:
	virtual bool hasEntry(uint16_t address) {
 80172ba:	b480      	push	{r7}
 80172bc:	b083      	sub	sp, #12
 80172be:	af00      	add	r7, sp, #0
 80172c0:	6078      	str	r0, [r7, #4]
 80172c2:	460b      	mov	r3, r1
 80172c4:	807b      	strh	r3, [r7, #2]
		return false;
 80172c6:	2300      	movs	r3, #0
	}
 80172c8:	4618      	mov	r0, r3
 80172ca:	370c      	adds	r7, #12
 80172cc:	46bd      	mov	sp, r7
 80172ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d2:	4770      	bx	lr

080172d4 <_ZN11RegisterMap4readEtPh>:
	virtual uint8_t read(uint16_t address, uint8_t *data) {
 80172d4:	b480      	push	{r7}
 80172d6:	b085      	sub	sp, #20
 80172d8:	af00      	add	r7, sp, #0
 80172da:	60f8      	str	r0, [r7, #12]
 80172dc:	460b      	mov	r3, r1
 80172de:	607a      	str	r2, [r7, #4]
 80172e0:	817b      	strh	r3, [r7, #10]
		return 0;
 80172e2:	2300      	movs	r3, #0
	}
 80172e4:	4618      	mov	r0, r3
 80172e6:	3714      	adds	r7, #20
 80172e8:	46bd      	mov	sp, r7
 80172ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ee:	4770      	bx	lr

080172f0 <_ZN11RegisterMap7getSizeEt>:
	virtual uint8_t getSize(uint16_t address) {
 80172f0:	b480      	push	{r7}
 80172f2:	b083      	sub	sp, #12
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]
 80172f8:	460b      	mov	r3, r1
 80172fa:	807b      	strh	r3, [r7, #2]
		return 0;
 80172fc:	2300      	movs	r3, #0
	}
 80172fe:	4618      	mov	r0, r3
 8017300:	370c      	adds	r7, #12
 8017302:	46bd      	mov	sp, r7
 8017304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017308:	4770      	bx	lr

0801730a <_ZN11RegisterMap7executeEtPhS0_>:
	virtual register_entry_type getType(uint16_t address) = 0;
	virtual register_entry_rw_t getReadWriteSetting(uint16_t address) = 0;

	/* -------------------------------------------------- */
	virtual uint8_t execute(uint16_t address, uint8_t *input, uint8_t *output) {
 801730a:	b480      	push	{r7}
 801730c:	b085      	sub	sp, #20
 801730e:	af00      	add	r7, sp, #0
 8017310:	60f8      	str	r0, [r7, #12]
 8017312:	607a      	str	r2, [r7, #4]
 8017314:	603b      	str	r3, [r7, #0]
 8017316:	460b      	mov	r3, r1
 8017318:	817b      	strh	r3, [r7, #10]
		return 0;
 801731a:	2300      	movs	r3, #0
	}
 801731c:	4618      	mov	r0, r3
 801731e:	3714      	adds	r7, #20
 8017320:	46bd      	mov	sp, r7
 8017322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017326:	4770      	bx	lr

08017328 <_ZN11RegisterMap7executeEt>:
	/* -------------------------------------------------- */
	virtual uint8_t execute(uint16_t address) {
 8017328:	b480      	push	{r7}
 801732a:	b083      	sub	sp, #12
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
 8017330:	460b      	mov	r3, r1
 8017332:	807b      	strh	r3, [r7, #2]
		return 0;
 8017334:	2300      	movs	r3, #0
	}
 8017336:	4618      	mov	r0, r3
 8017338:	370c      	adds	r7, #12
 801733a:	46bd      	mov	sp, r7
 801733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017340:	4770      	bx	lr
	...

08017344 <_ZN13RegisterEntryC1Ev>:
class RegisterEntry {
 8017344:	b480      	push	{r7}
 8017346:	b083      	sub	sp, #12
 8017348:	af00      	add	r7, sp, #0
 801734a:	6078      	str	r0, [r7, #4]
 801734c:	4a04      	ldr	r2, [pc, #16]	@ (8017360 <_ZN13RegisterEntryC1Ev+0x1c>)
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	601a      	str	r2, [r3, #0]
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	4618      	mov	r0, r3
 8017356:	370c      	adds	r7, #12
 8017358:	46bd      	mov	sp, r7
 801735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801735e:	4770      	bx	lr
 8017360:	08023704 	.word	0x08023704

08017364 <_ZN27core_utils_RegisterFunctionIvvEC1Ev>:

/* ============================================================ */
template<>
class core_utils_RegisterFunction<void, void> : public RegisterEntry {
public:
	core_utils_RegisterFunction() {
 8017364:	b580      	push	{r7, lr}
 8017366:	b082      	sub	sp, #8
 8017368:	af00      	add	r7, sp, #0
 801736a:	6078      	str	r0, [r7, #4]
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	4618      	mov	r0, r3
 8017370:	f7ff ffe8 	bl	8017344 <_ZN13RegisterEntryC1Ev>
 8017374:	4a06      	ldr	r2, [pc, #24]	@ (8017390 <_ZN27core_utils_RegisterFunctionIvvEC1Ev+0x2c>)
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	601a      	str	r2, [r3, #0]
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	330c      	adds	r3, #12
 801737e:	4618      	mov	r0, r3
 8017380:	f7fd fb56 	bl	8014a30 <_ZN19core_utils_CallbackIvvEC1Ev>

	}
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	4618      	mov	r0, r3
 8017388:	3708      	adds	r7, #8
 801738a:	46bd      	mov	sp, r7
 801738c:	bd80      	pop	{r7, pc}
 801738e:	bf00      	nop
 8017390:	080236a4 	.word	0x080236a4

08017394 <_ZN8CallbackC1EOS_>:
class Callback {
 8017394:	b480      	push	{r7}
 8017396:	b083      	sub	sp, #12
 8017398:	af00      	add	r7, sp, #0
 801739a:	6078      	str	r0, [r7, #4]
 801739c:	6039      	str	r1, [r7, #0]
 801739e:	4a05      	ldr	r2, [pc, #20]	@ (80173b4 <_ZN8CallbackC1EOS_+0x20>)
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	601a      	str	r2, [r3, #0]
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	4618      	mov	r0, r3
 80173a8:	370c      	adds	r7, #12
 80173aa:	46bd      	mov	sp, r7
 80173ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173b0:	4770      	bx	lr
 80173b2:	bf00      	nop
 80173b4:	080233d4 	.word	0x080233d4

080173b8 <_ZN27core_utils_RegisterFunctionIvvE3setEtP11RegisterMap19core_utils_CallbackIvvE>:
		this->function = function;
		map->addEntry(this->address, this);
		this->type = REGISTER_ENTRY_FUNCTION;
	}
	/* -------------------------------------------------- */
	void set(uint16_t address, RegisterMap *map,
 80173b8:	b580      	push	{r7, lr}
 80173ba:	b084      	sub	sp, #16
 80173bc:	af00      	add	r7, sp, #0
 80173be:	60f8      	str	r0, [r7, #12]
 80173c0:	607a      	str	r2, [r7, #4]
 80173c2:	603b      	str	r3, [r7, #0]
 80173c4:	460b      	mov	r3, r1
 80173c6:	817b      	strh	r3, [r7, #10]
			core_utils_Callback<void, void> function) {
		this->address = address;
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	897a      	ldrh	r2, [r7, #10]
 80173cc:	811a      	strh	r2, [r3, #8]
		this->function = function;
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	330c      	adds	r3, #12
 80173d2:	6839      	ldr	r1, [r7, #0]
 80173d4:	4618      	mov	r0, r3
 80173d6:	f7fd f8f1 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		map->addEntry(this->address, this);
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	3308      	adds	r3, #8
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	68fa      	ldr	r2, [r7, #12]
 80173e4:	8911      	ldrh	r1, [r2, #8]
 80173e6:	68fa      	ldr	r2, [r7, #12]
 80173e8:	6878      	ldr	r0, [r7, #4]
 80173ea:	4798      	blx	r3
		this->type = REGISTER_ENTRY_FUNCTION;
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	2202      	movs	r2, #2
 80173f0:	719a      	strb	r2, [r3, #6]
	}
 80173f2:	bf00      	nop
 80173f4:	3710      	adds	r7, #16
 80173f6:	46bd      	mov	sp, r7
 80173f8:	bd80      	pop	{r7, pc}

080173fa <_ZN27core_utils_RegisterFunctionIvvE7executeEv>:

	/* -------------------------------------------------- */
	void execute() {
 80173fa:	b580      	push	{r7, lr}
 80173fc:	b082      	sub	sp, #8
 80173fe:	af00      	add	r7, sp, #0
 8017400:	6078      	str	r0, [r7, #4]
		if (this->function.registered) {
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	7c1b      	ldrb	r3, [r3, #16]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d005      	beq.n	8017416 <_ZN27core_utils_RegisterFunctionIvvE7executeEv+0x1c>
			return this->function.call();
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	330c      	adds	r3, #12
 801740e:	4618      	mov	r0, r3
 8017410:	f7fc ff55 	bl	80142be <_ZN19core_utils_CallbackIvvE4callEv>
 8017414:	bf00      	nop
		}
	}
 8017416:	3708      	adds	r7, #8
 8017418:	46bd      	mov	sp, r7
 801741a:	bd80      	pop	{r7, pc}

0801741c <_ZN27core_utils_RegisterFunctionIvvE7executeEPhS1_>:
		this->execute();
		return 0;
	}

	/* -------------------------------------------------- */
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801741c:	b580      	push	{r7, lr}
 801741e:	b084      	sub	sp, #16
 8017420:	af00      	add	r7, sp, #0
 8017422:	60f8      	str	r0, [r7, #12]
 8017424:	60b9      	str	r1, [r7, #8]
 8017426:	607a      	str	r2, [r7, #4]
		this->execute();
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	3318      	adds	r3, #24
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	68f8      	ldr	r0, [r7, #12]
 8017432:	4798      	blx	r3
		return 0;
 8017434:	2300      	movs	r3, #0
	}
 8017436:	4618      	mov	r0, r3
 8017438:	3710      	adds	r7, #16
 801743a:	46bd      	mov	sp, r7
 801743c:	bd80      	pop	{r7, pc}

0801743e <_ZN27core_utils_RegisterFunctionIvvE7getSizeEv>:
	/* -------------------------------------------------- */
	uint8_t getSize() {
 801743e:	b480      	push	{r7}
 8017440:	b083      	sub	sp, #12
 8017442:	af00      	add	r7, sp, #0
 8017444:	6078      	str	r0, [r7, #4]
		return 0;
 8017446:	2300      	movs	r3, #0
	}
 8017448:	4618      	mov	r0, r3
 801744a:	370c      	adds	r7, #12
 801744c:	46bd      	mov	sp, r7
 801744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017452:	4770      	bx	lr

08017454 <_ZN27core_utils_RegisterFunctionIvvE12getInputSizeEv>:
	/* -------------------------------------------------- */
	uint8_t getInputSize() {
 8017454:	b480      	push	{r7}
 8017456:	b083      	sub	sp, #12
 8017458:	af00      	add	r7, sp, #0
 801745a:	6078      	str	r0, [r7, #4]
		return 0;
 801745c:	2300      	movs	r3, #0
	}
 801745e:	4618      	mov	r0, r3
 8017460:	370c      	adds	r7, #12
 8017462:	46bd      	mov	sp, r7
 8017464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017468:	4770      	bx	lr

0801746a <_ZN27core_utils_RegisterFunctionIvvE13getOutputSizeEv>:

	/* -------------------------------------------------- */
	uint8_t getOutputSize() {
 801746a:	b480      	push	{r7}
 801746c:	b083      	sub	sp, #12
 801746e:	af00      	add	r7, sp, #0
 8017470:	6078      	str	r0, [r7, #4]
		return 0;
 8017472:	2300      	movs	r3, #0
	}
 8017474:	4618      	mov	r0, r3
 8017476:	370c      	adds	r7, #12
 8017478:	46bd      	mov	sp, r7
 801747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801747e:	4770      	bx	lr

08017480 <_ZN27core_utils_RegisterFunctionIvvE7getTypeEv>:

	/* -------------------------------------------------- */
	register_entry_type getType() {
 8017480:	b480      	push	{r7}
 8017482:	b083      	sub	sp, #12
 8017484:	af00      	add	r7, sp, #0
 8017486:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 8017488:	2302      	movs	r3, #2
	}
 801748a:	4618      	mov	r0, r3
 801748c:	370c      	adds	r7, #12
 801748e:	46bd      	mov	sp, r7
 8017490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017494:	4770      	bx	lr

08017496 <_ZN27core_utils_RegisterFunctionIvvE19getReadWriteSettingEv>:
	/* -------------------------------------------------- */
	register_entry_rw_t getReadWriteSetting() {
 8017496:	b480      	push	{r7}
 8017498:	b083      	sub	sp, #12
 801749a:	af00      	add	r7, sp, #0
 801749c:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 801749e:	2302      	movs	r3, #2
	}
 80174a0:	4618      	mov	r0, r3
 80174a2:	370c      	adds	r7, #12
 80174a4:	46bd      	mov	sp, r7
 80174a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174aa:	4770      	bx	lr

080174ac <_Z18twipr_control_taskPv>:
TWIPR_ControlManager *manager;

osSemaphoreId_t semaphore_external_input;

/* ======================================================== */
void twipr_control_task(void *argument) {
 80174ac:	b580      	push	{r7, lr}
 80174ae:	b084      	sub	sp, #16
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
	TWIPR_ControlManager *control_manager = (TWIPR_ControlManager*) argument;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	60fb      	str	r3, [r7, #12]
	control_manager->task_function();
 80174b8:	68f8      	ldr	r0, [r7, #12]
 80174ba:	f000 f9c1 	bl	8017840 <_ZN20TWIPR_ControlManager13task_functionEv>
}
 80174be:	bf00      	nop
 80174c0:	3710      	adds	r7, #16
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}

080174c6 <_ZN27twipr_control_reg_entries_tC1Ev>:
#define TWIPR_CONTROL_REG_FUNCTION_STOP 0x06
#define TWIPR_CONTROL_REG_ENTRY_CONFIG 0x07
#define TWIPR_CONTROL_REG_FUNCTION_SET_K 0x08
#define TWIPR_CONTROL_REG_ENTRY_PITCH_OFFSET 0x09

typedef struct twipr_control_reg_entries_t {
 80174c6:	b580      	push	{r7, lr}
 80174c8:	b082      	sub	sp, #8
 80174ca:	af00      	add	r7, sp, #0
 80174cc:	6078      	str	r0, [r7, #4]
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	4618      	mov	r0, r3
 80174d2:	f000 ff57 	bl	8018384 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tEC1Ev>
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	3334      	adds	r3, #52	@ 0x34
 80174da:	4618      	mov	r0, r3
 80174dc:	f000 ff6c 	bl	80183b8 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tEC1Ev>
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	3348      	adds	r3, #72	@ 0x48
 80174e4:	4618      	mov	r0, r3
 80174e6:	f000 ff8b 	bl	8018400 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tEC1Ev>
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	335c      	adds	r3, #92	@ 0x5c
 80174ee:	4618      	mov	r0, r3
 80174f0:	f000 ffaa 	bl	8018448 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tEC1Ev>
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	3388      	adds	r3, #136	@ 0x88
 80174f8:	4618      	mov	r0, r3
 80174fa:	f000 ffbf 	bl	801847c <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tEC1Ev>
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	33b8      	adds	r3, #184	@ 0xb8
 8017502:	4618      	mov	r0, r3
 8017504:	f7ff ff2e 	bl	8017364 <_ZN27core_utils_RegisterFunctionIvvEC1Ev>
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	33e4      	adds	r3, #228	@ 0xe4
 801750c:	4618      	mov	r0, r3
 801750e:	f000 ffcf 	bl	80184b0 <_ZN27core_utils_RegisterFunctionIhA8_fEC1Ev>
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8017518:	4618      	mov	r0, r3
 801751a:	f000 ffe5 	bl	80184e8 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tEC1Ev>
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8017524:	4618      	mov	r0, r3
 8017526:	f001 f803 	bl	8018530 <_ZN27core_utils_RegisterFunctionIvfEC1Ev>
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	4618      	mov	r0, r3
 801752e:	3708      	adds	r7, #8
 8017530:	46bd      	mov	sp, r7
 8017532:	bd80      	pop	{r7, pc}

08017534 <_ZN25twipr_control_callbacks_tC1Ev>:
typedef struct twipr_control_callbacks_t {
 8017534:	b580      	push	{r7, lr}
 8017536:	b082      	sub	sp, #8
 8017538:	af00      	add	r7, sp, #0
 801753a:	6078      	str	r0, [r7, #4]
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	4618      	mov	r0, r3
 8017540:	f7fc feca 	bl	80142d8 <_ZN19core_utils_CallbackIvtEC1Ev>
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	3320      	adds	r3, #32
 8017548:	4618      	mov	r0, r3
 801754a:	f7fc fec5 	bl	80142d8 <_ZN19core_utils_CallbackIvtEC1Ev>
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	3340      	adds	r3, #64	@ 0x40
 8017552:	4618      	mov	r0, r3
 8017554:	f7fc fec0 	bl	80142d8 <_ZN19core_utils_CallbackIvtEC1Ev>
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	3360      	adds	r3, #96	@ 0x60
 801755c:	4618      	mov	r0, r3
 801755e:	f001 f801 	bl	8018564 <_ZN19core_utils_CallbackIvmEC1Ev>
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	4618      	mov	r0, r3
 8017566:	3708      	adds	r7, #8
 8017568:	46bd      	mov	sp, r7
 801756a:	bd80      	pop	{r7, pc}

0801756c <_ZN20TWIPR_ControlManagerC1Ev>:

/* ======================================================== */
TWIPR_ControlManager::TWIPR_ControlManager() {
 801756c:	b580      	push	{r7, lr}
 801756e:	b082      	sub	sp, #8
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	2200      	movs	r2, #0
 8017578:	701a      	strb	r2, [r3, #0]
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	2200      	movs	r2, #0
 801757e:	705a      	strb	r2, [r3, #1]
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	3334      	adds	r3, #52	@ 0x34
 8017584:	4618      	mov	r0, r3
 8017586:	f7ff ff9e 	bl	80174c6 <_ZN27twipr_control_reg_entries_tC1Ev>
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	f503 73ee 	add.w	r3, r3, #476	@ 0x1dc
 8017590:	2102      	movs	r1, #2
 8017592:	4618      	mov	r0, r3
 8017594:	f000 fed8 	bl	8018348 <_ZN22core_utils_RegisterMapILi20EEC1Et>
 8017598:	687a      	ldr	r2, [r7, #4]
 801759a:	f243 1318 	movw	r3, #12568	@ 0x3118
 801759e:	4413      	add	r3, r2
 80175a0:	4618      	mov	r0, r3
 80175a2:	f7ff fc97 	bl	8016ed4 <_ZN22TWIPR_BalancingControlC1Ev>
 80175a6:	687a      	ldr	r2, [r7, #4]
 80175a8:	f246 038c 	movw	r3, #24716	@ 0x608c
 80175ac:	4413      	add	r3, r2
 80175ae:	4618      	mov	r0, r3
 80175b0:	f7ff ffc0 	bl	8017534 <_ZN25twipr_control_callbacks_tC1Ev>
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 80175ba:	461a      	mov	r2, r3
 80175bc:	f04f 0300 	mov.w	r3, #0
 80175c0:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 80175ca:	461a      	mov	r2, r3
 80175cc:	f04f 0300 	mov.w	r3, #0
 80175d0:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

}
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	4618      	mov	r0, r3
 80175d8:	3708      	adds	r7, #8
 80175da:	46bd      	mov	sp, r7
 80175dc:	bd80      	pop	{r7, pc}
	...

080175e0 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t>:

/* ======================================================== */
void TWIPR_ControlManager::init(twipr_control_config_t config) {
 80175e0:	b084      	sub	sp, #16
 80175e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175e4:	b0c5      	sub	sp, #276	@ 0x114
 80175e6:	af06      	add	r7, sp, #24
 80175e8:	6078      	str	r0, [r7, #4]
 80175ea:	f507 708a 	add.w	r0, r7, #276	@ 0x114
 80175ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	manager = this;
 80175f2:	4a83      	ldr	r2, [pc, #524]	@ (8017800 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x220>)
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	6013      	str	r3, [r2, #0]
	this->config = config;
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	1d1c      	adds	r4, r3, #4
 80175fc:	f507 758a 	add.w	r5, r7, #276	@ 0x114
 8017600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017608:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801760c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	this->_estimation = config.estimation;
 8017610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017614:	687a      	ldr	r2, [r7, #4]
 8017616:	f502 42c0 	add.w	r2, r2, #24576	@ 0x6000
 801761a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

	// Initialize the balancing controller
	twipr_balancing_control_config_t balancing_control_config;
 801761e:	f107 030c 	add.w	r3, r7, #12
 8017622:	4618      	mov	r0, r3
 8017624:	f7ff fc47 	bl	8016eb6 <_ZN32twipr_balancing_control_config_tC1Ev>
	memcpy(balancing_control_config.K, this->config.K,
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	f103 010c 	add.w	r1, r3, #12
 801762e:	f107 030c 	add.w	r3, r7, #12
 8017632:	2220      	movs	r2, #32
 8017634:	4618      	mov	r0, r3
 8017636:	f009 ff10 	bl	802145a <memcpy>
			sizeof(balancing_control_config.K));
	this->_balancing_control.init(balancing_control_config);
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	f243 1618 	movw	r6, #12568	@ 0x3118
 8017640:	441e      	add	r6, r3
 8017642:	466d      	mov	r5, sp
 8017644:	f107 0418 	add.w	r4, r7, #24
 8017648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801764a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801764c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8017650:	e885 0003 	stmia.w	r5, {r0, r1}
 8017654:	f107 030c 	add.w	r3, r7, #12
 8017658:	cb0e      	ldmia	r3, {r1, r2, r3}
 801765a:	4630      	mov	r0, r6
 801765c:	f7ff fc4e 	bl	8016efc <_ZN22TWIPR_BalancingControl4initE32twipr_balancing_control_config_t>

	this->status = TWIPR_CONTROL_STATUS_IDLE;
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	2200      	movs	r2, #0
 8017664:	701a      	strb	r2, [r3, #0]
	this->mode = TWIPR_CONTROL_MODE_OFF;
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	2200      	movs	r2, #0
 801766a:	705a      	strb	r2, [r3, #1]
	this->_input.u_1 = 0;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017672:	461a      	mov	r2, r3
 8017674:	f04f 0300 	mov.w	r3, #0
 8017678:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
	this->_input.u_2 = 0;
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017682:	461a      	mov	r2, r3
 8017684:	f04f 0300 	mov.w	r3, #0
 8017688:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
	this->_output.u_left = 0;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017692:	461a      	mov	r2, r3
 8017694:	f04f 0300 	mov.w	r3, #0
 8017698:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
	this->_output.u_right = 0;
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80176a2:	461a      	mov	r2, r3
 80176a4:	f04f 0300 	mov.w	r3, #0
 80176a8:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184
	this->_tick = 0;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 80176b2:	461a      	mov	r2, r3
 80176b4:	2300      	movs	r3, #0
 80176b6:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

	// Setting the Register Entries
	this->reg_entries.reg_function_set_external_input.set(
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	f103 0434 	add.w	r4, r3, #52	@ 0x34
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	f503 75ee 	add.w	r5, r3, #476	@ 0x1dc
	TWIPR_CONTROL_REG_ENTRY_EXT_INPUT, &this->reg_map,
			core_utils_Callback<void, twipr_control_input_t>(this,
 80176c6:	4b4f      	ldr	r3, [pc, #316]	@ (8017804 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x224>)
 80176c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80176ca:	2300      	movs	r3, #0
 80176cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80176ce:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80176d2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80176d6:	cb0c      	ldmia	r3, {r2, r3}
 80176d8:	6879      	ldr	r1, [r7, #4]
 80176da:	f000 ff61 	bl	80185a0 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
	this->reg_entries.reg_function_set_external_input.set(
 80176de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80176e2:	462a      	mov	r2, r5
 80176e4:	2101      	movs	r1, #1
 80176e6:	4620      	mov	r0, r4
 80176e8:	f000 ffae 	bl	8018648 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE3setEtP11RegisterMap19core_utils_CallbackIvS0_E>
					&TWIPR_ControlManager::setInput));

	this->reg_entries.reg_entry_status.set(
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	f503 72ee 	add.w	r2, r3, #476	@ 0x1dc
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	2100      	movs	r1, #0
 80176fc:	9100      	str	r1, [sp, #0]
 80176fe:	2102      	movs	r1, #2
 8017700:	f000 ffc0 	bl	8018684 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>
	TWIPR_CONTROL_REG_ENTRY_STATUS, &this->reg_map, &this->status,
			REGISTER_ENTRY_READ);

	this->reg_entries.reg_function_set_mode.set(
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	f103 0490 	add.w	r4, r3, #144	@ 0x90
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	f503 75ee 	add.w	r5, r3, #476	@ 0x1dc
	TWIPR_CONTROL_REG_FUNCTION_SET_MODE, &this->reg_map,
			core_utils_Callback<uint8_t, twipr_control_mode_t>(this,
 8017710:	4b3d      	ldr	r3, [pc, #244]	@ (8017808 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x228>)
 8017712:	67bb      	str	r3, [r7, #120]	@ 0x78
 8017714:	2300      	movs	r3, #0
 8017716:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8017718:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 801771c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8017720:	cb0c      	ldmia	r3, {r2, r3}
 8017722:	6879      	ldr	r1, [r7, #4]
 8017724:	f000 ffcc 	bl	80186c0 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
	this->reg_entries.reg_function_set_mode.set(
 8017728:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 801772c:	462a      	mov	r2, r5
 801772e:	2104      	movs	r1, #4
 8017730:	4620      	mov	r0, r4
 8017732:	f001 f819 	bl	8018768 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>
					&TWIPR_ControlManager::setMode));

	this->reg_entries.reg_function_start_trajectory.set(
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	f103 04bc 	add.w	r4, r3, #188	@ 0xbc
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	f503 75ee 	add.w	r5, r3, #476	@ 0x1dc
	TWIPR_CONTROL_REG_FUNCTION_START_TRAJECTORY, &this->reg_map,
			core_utils_Callback<uint8_t, twipr_control_trajectory_t>(this,
 8017742:	4b32      	ldr	r3, [pc, #200]	@ (801780c <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x22c>)
 8017744:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8017748:	2300      	movs	r3, #0
 801774a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801774e:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8017752:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8017756:	cb0c      	ldmia	r3, {r2, r3}
 8017758:	6879      	ldr	r1, [r7, #4]
 801775a:	f001 f823 	bl	80187a4 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
	this->reg_entries.reg_function_start_trajectory.set(
 801775e:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8017762:	462a      	mov	r2, r5
 8017764:	2105      	movs	r1, #5
 8017766:	4620      	mov	r0, r4
 8017768:	f001 f870 	bl	801884c <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>
					&TWIPR_ControlManager::startTrajectory));

	this->reg_entries.reg_function_stop.set(
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	f103 04ec 	add.w	r4, r3, #236	@ 0xec
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	f503 75ee 	add.w	r5, r3, #476	@ 0x1dc
	TWIPR_CONTROL_REG_FUNCTION_STOP, &this->reg_map,
			core_utils_Callback<void, void>(this, &TWIPR_ControlManager::stop));
 8017778:	4b25      	ldr	r3, [pc, #148]	@ (8017810 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x230>)
 801777a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801777e:	2300      	movs	r3, #0
 8017780:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8017784:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 8017788:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 801778c:	cb0c      	ldmia	r3, {r2, r3}
 801778e:	6879      	ldr	r1, [r7, #4]
 8017790:	f001 f87a 	bl	8018888 <_ZN19core_utils_CallbackIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE>
	this->reg_entries.reg_function_stop.set(
 8017794:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8017798:	462a      	mov	r2, r5
 801779a:	2106      	movs	r1, #6
 801779c:	4620      	mov	r0, r4
 801779e:	f7ff fe0b 	bl	80173b8 <_ZN27core_utils_RegisterFunctionIvvE3setEtP11RegisterMap19core_utils_CallbackIvvE>

	this->reg_entries.reg_entry_config.set(
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	f503 70b2 	add.w	r0, r3, #356	@ 0x164
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	f503 72ee 	add.w	r2, r3, #476	@ 0x1dc
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	3304      	adds	r3, #4
 80177b2:	2100      	movs	r1, #0
 80177b4:	9100      	str	r1, [sp, #0]
 80177b6:	2107      	movs	r1, #7
 80177b8:	f001 f89a 	bl	80188f0 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>
	TWIPR_CONTROL_REG_ENTRY_CONFIG, &this->reg_map, &this->config,
			REGISTER_ENTRY_READ);

	this->reg_entries.reg_function_set_K.set(
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	f503 748c 	add.w	r4, r3, #280	@ 0x118
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	f503 75ee 	add.w	r5, r3, #476	@ 0x1dc
	TWIPR_CONTROL_REG_FUNCTION_SET_K, &this->reg_map,
			core_utils_Callback<uint8_t, float[8]>(this,
 80177c8:	4b12      	ldr	r3, [pc, #72]	@ (8017814 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t+0x234>)
 80177ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80177ce:	2300      	movs	r3, #0
 80177d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80177d4:	f107 00d0 	add.w	r0, r7, #208	@ 0xd0
 80177d8:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80177dc:	cb0c      	ldmia	r3, {r2, r3}
 80177de:	6879      	ldr	r1, [r7, #4]
 80177e0:	f001 f8a4 	bl	801892c <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>
	this->reg_entries.reg_function_set_K.set(
 80177e4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80177e8:	462a      	mov	r2, r5
 80177ea:	2108      	movs	r1, #8
 80177ec:	4620      	mov	r0, r4
 80177ee:	f001 f8f1 	bl	80189d4 <_ZN27core_utils_RegisterFunctionIhA8_fE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>



//	semaphore_external_input = osSemaphoreNew(1, 1, NULL);

}
 80177f2:	bf00      	nop
 80177f4:	37fc      	adds	r7, #252	@ 0xfc
 80177f6:	46bd      	mov	sp, r7
 80177f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80177fc:	b004      	add	sp, #16
 80177fe:	4770      	bx	lr
 8017800:	24015414 	.word	0x24015414
 8017804:	08017b31 	.word	0x08017b31
 8017808:	08017a25 	.word	0x08017a25
 801780c:	08017bf1 	.word	0x08017bf1
 8017810:	080178b9 	.word	0x080178b9
 8017814:	08017ba1 	.word	0x08017ba1

08017818 <_ZN20TWIPR_ControlManager5startEv>:
/* ======================================================== */
uint8_t TWIPR_ControlManager::start() {
 8017818:	b580      	push	{r7, lr}
 801781a:	b082      	sub	sp, #8
 801781c:	af00      	add	r7, sp, #0
 801781e:	6078      	str	r0, [r7, #4]

	osThreadNew(twipr_control_task, (void*) this, &control_task_attributes);
 8017820:	4a04      	ldr	r2, [pc, #16]	@ (8017834 <_ZN20TWIPR_ControlManager5startEv+0x1c>)
 8017822:	6879      	ldr	r1, [r7, #4]
 8017824:	4804      	ldr	r0, [pc, #16]	@ (8017838 <_ZN20TWIPR_ControlManager5startEv+0x20>)
 8017826:	f7f8 fa9a 	bl	800fd5e <osThreadNew>
	return 1;
 801782a:	2301      	movs	r3, #1
}
 801782c:	4618      	mov	r0, r3
 801782e:	3708      	adds	r7, #8
 8017830:	46bd      	mov	sp, r7
 8017832:	bd80      	pop	{r7, pc}
 8017834:	08023478 	.word	0x08023478
 8017838:	080174ad 	.word	0x080174ad
 801783c:	00000000 	.word	0x00000000

08017840 <_ZN20TWIPR_ControlManager13task_functionEv>:

/* ======================================================== */
void TWIPR_ControlManager::task_function() {
 8017840:	b580      	push	{r7, lr}
 8017842:	b084      	sub	sp, #16
 8017844:	af00      	add	r7, sp, #0
 8017846:	6078      	str	r0, [r7, #4]
	this->status = TWIPR_CONTROL_STATUS_RUNNING;
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	2201      	movs	r2, #1
 801784c:	701a      	strb	r2, [r3, #0]
	this->_balancing_control.start();
 801784e:	687a      	ldr	r2, [r7, #4]
 8017850:	f243 1318 	movw	r3, #12568	@ 0x3118
 8017854:	4413      	add	r3, r2
 8017856:	4618      	mov	r0, r3
 8017858:	f7ff fb6c 	bl	8016f34 <_ZN22TWIPR_BalancingControl5startEv>

	this->_task = xTaskGetCurrentTaskHandle();
 801785c:	f7fa feba 	bl	80125d4 <xTaskGetCurrentTaskHandle>
 8017860:	4602      	mov	r2, r0
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017868:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
	uint32_t global_tick;

	while (true) {
		global_tick = osKernelGetTickCount();
 801786c:	f7f8 fa62 	bl	800fd34 <osKernelGetTickCount>
 8017870:	60f8      	str	r0, [r7, #12]
		this->step();
 8017872:	6878      	ldr	r0, [r7, #4]
 8017874:	f000 f852 	bl	801791c <_ZN20TWIPR_ControlManager4stepEv>
		osDelayUntil(global_tick + 1000.0 / (float) this->config.freq);
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	ee07 3a90 	vmov	s15, r3
 801787e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017886:	ee07 3a90 	vmov	s15, r3
 801788a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801788e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8017892:	ed9f 4b07 	vldr	d4, [pc, #28]	@ 80178b0 <_ZN20TWIPR_ControlManager13task_functionEv+0x70>
 8017896:	ee84 7b05 	vdiv.f64	d7, d4, d5
 801789a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801789e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80178a2:	ee17 0a90 	vmov	r0, s15
 80178a6:	f7f8 fb12 	bl	800fece <osDelayUntil>
		global_tick = osKernelGetTickCount();
 80178aa:	bf00      	nop
 80178ac:	e7de      	b.n	801786c <_ZN20TWIPR_ControlManager13task_functionEv+0x2c>
 80178ae:	bf00      	nop
 80178b0:	00000000 	.word	0x00000000
 80178b4:	408f4000 	.word	0x408f4000

080178b8 <_ZN20TWIPR_ControlManager4stopEv>:
	}
}

/* ======================================================== */
void TWIPR_ControlManager::stop() {
 80178b8:	b580      	push	{r7, lr}
 80178ba:	b082      	sub	sp, #8
 80178bc:	af00      	add	r7, sp, #0
 80178be:	6078      	str	r0, [r7, #4]

	// Stop the balancing controller
	this->_balancing_control.stop();
 80178c0:	687a      	ldr	r2, [r7, #4]
 80178c2:	f243 1318 	movw	r3, #12568	@ 0x3118
 80178c6:	4413      	add	r3, r2
 80178c8:	4618      	mov	r0, r3
 80178ca:	f7ff fc3b 	bl	8017144 <_ZN22TWIPR_BalancingControl4stopEv>

	// Set the own state to idle
	this->mode = TWIPR_CONTROL_MODE_OFF;
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	2200      	movs	r2, #0
 80178d2:	705a      	strb	r2, [r3, #1]

	// Stop the drive
//	this->config.drive->stop();

	// Set the input to 0
	this->_input.u_1 = 0.0;
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80178da:	461a      	mov	r2, r3
 80178dc:	f04f 0300 	mov.w	r3, #0
 80178e0:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
	this->_input.u_2 = 0.0;
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80178ea:	461a      	mov	r2, r3
 80178ec:	f04f 0300 	mov.w	r3, #0
 80178f0:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
	this->_output.u_left = 0.0;
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80178fa:	461a      	mov	r2, r3
 80178fc:	f04f 0300 	mov.w	r3, #0
 8017900:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
	this->_output.u_right = 0.0;
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801790a:	461a      	mov	r2, r3
 801790c:	f04f 0300 	mov.w	r3, #0
 8017910:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184
}
 8017914:	bf00      	nop
 8017916:	3708      	adds	r7, #8
 8017918:	46bd      	mov	sp, r7
 801791a:	bd80      	pop	{r7, pc}

0801791c <_ZN20TWIPR_ControlManager4stepEv>:
			(uint8_t*) this->trajectory_rx_buffer,
			sizeof(twipr_control_trajectory_input_t)
					* TWIPR_CONTROL_TRAJECTORY_BUFFER_SIZE);
}
/* ======================================================== */
void TWIPR_ControlManager::step() {
 801791c:	b5b0      	push	{r4, r5, r7, lr}
 801791e:	b088      	sub	sp, #32
 8017920:	af00      	add	r7, sp, #0
 8017922:	61f8      	str	r0, [r7, #28]
	// Read the state from the estimator
	this->_dynamic_state = this->_estimation->getState();
 8017924:	69fb      	ldr	r3, [r7, #28]
 8017926:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 801792a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 801792e:	69fb      	ldr	r3, [r7, #28]
 8017930:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017934:	461c      	mov	r4, r3
 8017936:	463b      	mov	r3, r7
 8017938:	4611      	mov	r1, r2
 801793a:	4618      	mov	r0, r3
 801793c:	f003 f91a 	bl	801ab74 <_ZN16TWIPR_Estimation8getStateEv>
 8017940:	3470      	adds	r4, #112	@ 0x70
 8017942:	463d      	mov	r5, r7
 8017944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017948:	682b      	ldr	r3, [r5, #0]
 801794a:	6023      	str	r3, [r4, #0]

	// Check for errors
	// Drive
	// TODO

	switch (this->status) {
 801794c:	69fb      	ldr	r3, [r7, #28]
 801794e:	f993 3000 	ldrsb.w	r3, [r3]
 8017952:	2b01      	cmp	r3, #1
 8017954:	d00f      	beq.n	8017976 <_ZN20TWIPR_ControlManager4stepEv+0x5a>
 8017956:	2b01      	cmp	r3, #1
 8017958:	dc2d      	bgt.n	80179b6 <_ZN20TWIPR_ControlManager4stepEv+0x9a>
 801795a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801795e:	d002      	beq.n	8017966 <_ZN20TWIPR_ControlManager4stepEv+0x4a>
 8017960:	2b00      	cmp	r3, #0
 8017962:	d004      	beq.n	801796e <_ZN20TWIPR_ControlManager4stepEv+0x52>
 8017964:	e027      	b.n	80179b6 <_ZN20TWIPR_ControlManager4stepEv+0x9a>
	case TWIPR_CONTROL_STATUS_ERROR: {
		this->_step_error();
 8017966:	69f8      	ldr	r0, [r7, #28]
 8017968:	f000 fa1e 	bl	8017da8 <_ZN20TWIPR_ControlManager11_step_errorEv>
		break;
 801796c:	e023      	b.n	80179b6 <_ZN20TWIPR_ControlManager4stepEv+0x9a>
	}
	case TWIPR_CONTROL_STATUS_IDLE: {
		this->_step_idle();
 801796e:	69f8      	ldr	r0, [r7, #28]
 8017970:	f000 f9e4 	bl	8017d3c <_ZN20TWIPR_ControlManager10_step_idleEv>
		break;
 8017974:	e01f      	b.n	80179b6 <_ZN20TWIPR_ControlManager4stepEv+0x9a>
	}
	case TWIPR_CONTROL_STATUS_RUNNING: {
		switch (this->mode) {
 8017976:	69fb      	ldr	r3, [r7, #28]
 8017978:	785b      	ldrb	r3, [r3, #1]
 801797a:	2b03      	cmp	r3, #3
 801797c:	d81a      	bhi.n	80179b4 <_ZN20TWIPR_ControlManager4stepEv+0x98>
 801797e:	a201      	add	r2, pc, #4	@ (adr r2, 8017984 <_ZN20TWIPR_ControlManager4stepEv+0x68>)
 8017980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017984:	08017995 	.word	0x08017995
 8017988:	0801799d 	.word	0x0801799d
 801798c:	080179a5 	.word	0x080179a5
 8017990:	080179ad 	.word	0x080179ad
		case TWIPR_CONTROL_MODE_OFF: {
			this->_step_off();
 8017994:	69f8      	ldr	r0, [r7, #28]
 8017996:	f000 f95b 	bl	8017c50 <_ZN20TWIPR_ControlManager9_step_offEv>
			break;
 801799a:	e00b      	b.n	80179b4 <_ZN20TWIPR_ControlManager4stepEv+0x98>
		}
		case TWIPR_CONTROL_MODE_DIRECT: {
			this->_step_direct();
 801799c:	69f8      	ldr	r0, [r7, #28]
 801799e:	f000 f98d 	bl	8017cbc <_ZN20TWIPR_ControlManager12_step_directEv>
			break;
 80179a2:	e007      	b.n	80179b4 <_ZN20TWIPR_ControlManager4stepEv+0x98>
		}
		case TWIPR_CONTROL_MODE_BALANCING: {
			this->_step_balancing();
 80179a4:	69f8      	ldr	r0, [r7, #28]
 80179a6:	f000 fa35 	bl	8017e14 <_ZN20TWIPR_ControlManager15_step_balancingEv>
			break;
 80179aa:	e003      	b.n	80179b4 <_ZN20TWIPR_ControlManager4stepEv+0x98>
		}
		case TWIPR_CONTROL_MODE_TRAJECTORY: {
			this->_step_trajectory();
 80179ac:	69f8      	ldr	r0, [r7, #28]
 80179ae:	f000 fb37 	bl	8018020 <_ZN20TWIPR_ControlManager16_step_trajectoryEv>
			break;
 80179b2:	bf00      	nop
		}
		}
		break;
 80179b4:	bf00      	nop
	}
	}

	// Call the step callback
	if (this->_callbacks.step.registered) {
 80179b6:	69fb      	ldr	r3, [r7, #28]
 80179b8:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 80179bc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d00c      	beq.n	80179de <_ZN20TWIPR_ControlManager4stepEv+0xc2>
		this->_callbacks.step.call(this->_tick);
 80179c4:	69fa      	ldr	r2, [r7, #28]
 80179c6:	f246 03ec 	movw	r3, #24812	@ 0x60ec
 80179ca:	4413      	add	r3, r2
 80179cc:	69fa      	ldr	r2, [r7, #28]
 80179ce:	f502 42c0 	add.w	r2, r2, #24576	@ 0x6000
 80179d2:	f8d2 210c 	ldr.w	r2, [r2, #268]	@ 0x10c
 80179d6:	4611      	mov	r1, r2
 80179d8:	4618      	mov	r0, r3
 80179da:	f001 f819 	bl	8018a10 <_ZN19core_utils_CallbackIvmE4callEm>
	}

	// Check for state transitions // TODO
	if (this->mode == TWIPR_CONTROL_MODE_TRAJECTORY) {
 80179de:	69fb      	ldr	r3, [r7, #28]
 80179e0:	785b      	ldrb	r3, [r3, #1]
 80179e2:	2b03      	cmp	r3, #3
 80179e4:	d10e      	bne.n	8017a04 <_ZN20TWIPR_ControlManager4stepEv+0xe8>
		//	 Check if the trajectory is finished
		if (this->_trajectory.step == this->_trajectory.length) {
 80179e6:	69fb      	ldr	r3, [r7, #28]
 80179e8:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 80179ec:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 80179f0:	69fb      	ldr	r3, [r7, #28]
 80179f2:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 80179f6:	f8b3 306c 	ldrh.w	r3, [r3, #108]	@ 0x6c
 80179fa:	429a      	cmp	r2, r3
 80179fc:	d102      	bne.n	8017a04 <_ZN20TWIPR_ControlManager4stepEv+0xe8>
			this->_trajectoryFinished();
 80179fe:	69f8      	ldr	r0, [r7, #28]
 8017a00:	f000 fc1e 	bl	8018240 <_ZN20TWIPR_ControlManager19_trajectoryFinishedEv>
		}
	}

	this->_tick++;
 8017a04:	69fb      	ldr	r3, [r7, #28]
 8017a06:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017a0a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8017a0e:	3301      	adds	r3, #1
 8017a10:	69fa      	ldr	r2, [r7, #28]
 8017a12:	f502 42c0 	add.w	r2, r2, #24576	@ 0x6000
 8017a16:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c

}
 8017a1a:	bf00      	nop
 8017a1c:	3720      	adds	r7, #32
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	bdb0      	pop	{r4, r5, r7, pc}
 8017a22:	bf00      	nop

08017a24 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t>:
/* ======================================================== */
uint8_t TWIPR_ControlManager::setMode(twipr_control_mode_t mode) {
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b082      	sub	sp, #8
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
 8017a2c:	460b      	mov	r3, r1
 8017a2e:	70fb      	strb	r3, [r7, #3]

	// Setting mode should only work while running
	if (this->status == TWIPR_CONTROL_STATUS_IDLE) {
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	f993 3000 	ldrsb.w	r3, [r3]
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d101      	bne.n	8017a3e <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x1a>
		return 0;
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	e074      	b.n	8017b28 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x104>
	}
	if (this->status == TWIPR_CONTROL_STATUS_ERROR) {
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	f993 3000 	ldrsb.w	r3, [r3]
 8017a44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017a48:	d101      	bne.n	8017a4e <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x2a>
		return 0;
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	e06c      	b.n	8017b28 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x104>
	}

	if (mode == TWIPR_CONTROL_MODE_TRAJECTORY) {
 8017a4e:	78fb      	ldrb	r3, [r7, #3]
 8017a50:	2b03      	cmp	r3, #3
 8017a52:	d101      	bne.n	8017a58 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x34>
		return 0;
 8017a54:	2300      	movs	r3, #0
 8017a56:	e067      	b.n	8017b28 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x104>
	}

	this->mode = mode;
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	78fa      	ldrb	r2, [r7, #3]
 8017a5c:	705a      	strb	r2, [r3, #1]

	// Switch the mode of the balancing controller to the appropriate mode
	switch (this->mode) {
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	785b      	ldrb	r3, [r3, #1]
 8017a62:	2b03      	cmp	r3, #3
 8017a64:	d84f      	bhi.n	8017b06 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xe2>
 8017a66:	a201      	add	r2, pc, #4	@ (adr r2, 8017a6c <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x48>)
 8017a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a6c:	08017a7d 	.word	0x08017a7d
 8017a70:	08017a85 	.word	0x08017a85
 8017a74:	08017aab 	.word	0x08017aab
 8017a78:	08017ae1 	.word	0x08017ae1
	case TWIPR_CONTROL_MODE_OFF: {
		this->stop();
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	f7ff ff1b 	bl	80178b8 <_ZN20TWIPR_ControlManager4stopEv>
		break;
 8017a82:	e040      	b.n	8017b06 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xe2>
	}
	case TWIPR_CONTROL_MODE_DIRECT: {
		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	689b      	ldr	r3, [r3, #8]
 8017a88:	781b      	ldrb	r3, [r3, #0]
 8017a8a:	2b02      	cmp	r3, #2
 8017a8c:	d004      	beq.n	8017a98 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x74>
			this->config.drive->start();
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	689b      	ldr	r3, [r3, #8]
 8017a92:	4618      	mov	r0, r3
 8017a94:	f002 fd4c 	bl	801a530 <_ZN11TWIPR_Drive5startEv>
		}

		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_DIRECT);
 8017a98:	687a      	ldr	r2, [r7, #4]
 8017a9a:	f243 1318 	movw	r3, #12568	@ 0x3118
 8017a9e:	4413      	add	r3, r2
 8017aa0:	2101      	movs	r1, #1
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f7ff fb6b 	bl	801717e <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		break;
 8017aa8:	e02d      	b.n	8017b06 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xe2>
	}
	case TWIPR_CONTROL_MODE_BALANCING: {
		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	689b      	ldr	r3, [r3, #8]
 8017aae:	781b      	ldrb	r3, [r3, #0]
 8017ab0:	2b02      	cmp	r3, #2
 8017ab2:	d004      	beq.n	8017abe <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0x9a>
			this->config.drive->start();
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	689b      	ldr	r3, [r3, #8]
 8017ab8:	4618      	mov	r0, r3
 8017aba:	f002 fd39 	bl	801a530 <_ZN11TWIPR_Drive5startEv>
		}
		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_ON);
 8017abe:	687a      	ldr	r2, [r7, #4]
 8017ac0:	f243 1318 	movw	r3, #12568	@ 0x3118
 8017ac4:	4413      	add	r3, r2
 8017ac6:	2102      	movs	r1, #2
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f7ff fb58 	bl	801717e <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		this->_sum_theta = 0;
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017ad4:	461a      	mov	r2, r3
 8017ad6:	f04f 0300 	mov.w	r3, #0
 8017ada:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
		break;
 8017ade:	e012      	b.n	8017b06 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xe2>
	}
	case TWIPR_CONTROL_MODE_TRAJECTORY: {
		if (this->config.drive->status != TWIPR_DRIVE_STATUS_RUNNING) {
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	689b      	ldr	r3, [r3, #8]
 8017ae4:	781b      	ldrb	r3, [r3, #0]
 8017ae6:	2b02      	cmp	r3, #2
 8017ae8:	d004      	beq.n	8017af4 <_ZN20TWIPR_ControlManager7setModeE20twipr_control_mode_t+0xd0>
			this->config.drive->start();
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	689b      	ldr	r3, [r3, #8]
 8017aee:	4618      	mov	r0, r3
 8017af0:	f002 fd1e 	bl	801a530 <_ZN11TWIPR_Drive5startEv>
		}
		this->_balancing_control.setMode(TWIPR_BALANCING_CONTROL_MODE_ON);
 8017af4:	687a      	ldr	r2, [r7, #4]
 8017af6:	f243 1318 	movw	r3, #12568	@ 0x3118
 8017afa:	4413      	add	r3, r2
 8017afc:	2102      	movs	r1, #2
 8017afe:	4618      	mov	r0, r3
 8017b00:	f7ff fb3d 	bl	801717e <_ZN22TWIPR_BalancingControl7setModeE30twipr_balancing_control_mode_t>
		break;
 8017b04:	bf00      	nop
	}
	}

	// Reset the input
	this->_input.u_1 = 0;
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017b0c:	461a      	mov	r2, r3
 8017b0e:	f04f 0300 	mov.w	r3, #0
 8017b12:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
	this->_input.u_2 = 0;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017b1c:	461a      	mov	r2, r3
 8017b1e:	f04f 0300 	mov.w	r3, #0
 8017b22:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c


	return 1;
 8017b26:	2301      	movs	r3, #1
}
 8017b28:	4618      	mov	r0, r3
 8017b2a:	3708      	adds	r7, #8
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}

08017b30 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t>:
/* ======================================================== */
void TWIPR_ControlManager::setInput(twipr_control_input_t input) {
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b084      	sub	sp, #16
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	60f8      	str	r0, [r7, #12]
 8017b38:	eeb0 7a40 	vmov.f32	s14, s0
 8017b3c:	eef0 7a60 	vmov.f32	s15, s1
 8017b40:	ed87 7a01 	vstr	s14, [r7, #4]
 8017b44:	edc7 7a02 	vstr	s15, [r7, #8]
// TODO: We need some input checking here
	if (this->status != TWIPR_CONTROL_STATUS_RUNNING) {
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	f993 3000 	ldrsb.w	r3, [r3]
 8017b4e:	2b01      	cmp	r3, #1
 8017b50:	d11e      	bne.n	8017b90 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x60>
		return;
	}
	if (this->mode == TWIPR_CONTROL_MODE_OFF || this->mode == TWIPR_CONTROL_MODE_TRAJECTORY) {
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	785b      	ldrb	r3, [r3, #1]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d01c      	beq.n	8017b94 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x64>
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	785b      	ldrb	r3, [r3, #1]
 8017b5e:	2b03      	cmp	r3, #3
 8017b60:	d018      	beq.n	8017b94 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x64>
		return;
	}

	osSemaphoreAcquire(semaphore_external_input, portMAX_DELAY);
 8017b62:	4b0e      	ldr	r3, [pc, #56]	@ (8017b9c <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x6c>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	f7f8 faf8 	bl	8010160 <osSemaphoreAcquire>
	this->_input = input;
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017b76:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8017b7a:	1d3a      	adds	r2, r7, #4
 8017b7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017b80:	e883 0003 	stmia.w	r3, {r0, r1}
	osSemaphoreRelease(semaphore_external_input);
 8017b84:	4b05      	ldr	r3, [pc, #20]	@ (8017b9c <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x6c>)
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	4618      	mov	r0, r3
 8017b8a:	f7f8 fb3b 	bl	8010204 <osSemaphoreRelease>
 8017b8e:	e002      	b.n	8017b96 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x66>
		return;
 8017b90:	bf00      	nop
 8017b92:	e000      	b.n	8017b96 <_ZN20TWIPR_ControlManager8setInputE21twipr_control_input_t+0x66>
		return;
 8017b94:	bf00      	nop
}
 8017b96:	3710      	adds	r7, #16
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	bd80      	pop	{r7, pc}
 8017b9c:	24015418 	.word	0x24015418

08017ba0 <_ZN20TWIPR_ControlManager16setBalancingGainEPf>:
twipr_control_status_t TWIPR_ControlManager::getStatus() {
	return this->status;
}

/* ======================================================== */
uint8_t TWIPR_ControlManager::setBalancingGain(float *K) {
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b082      	sub	sp, #8
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
 8017ba8:	6039      	str	r1, [r7, #0]
	// This is only allowed if the controller is off
	if (this->status != TWIPR_CONTROL_STATUS_RUNNING) {
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	f993 3000 	ldrsb.w	r3, [r3]
 8017bb0:	2b01      	cmp	r3, #1
 8017bb2:	d001      	beq.n	8017bb8 <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x18>
		return 0;
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	e017      	b.n	8017be8 <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x48>
	}
	if (this->mode != TWIPR_CONTROL_MODE_OFF) {
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	785b      	ldrb	r3, [r3, #1]
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d001      	beq.n	8017bc4 <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x24>
		return 0;
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	e011      	b.n	8017be8 <_ZN20TWIPR_ControlManager16setBalancingGainEPf+0x48>
	}

	memcpy(this->config.K, K, sizeof(float) * 8);
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	330c      	adds	r3, #12
 8017bc8:	2220      	movs	r2, #32
 8017bca:	6839      	ldr	r1, [r7, #0]
 8017bcc:	4618      	mov	r0, r3
 8017bce:	f009 fc44 	bl	802145a <memcpy>
	this->_balancing_control.set_K(this->config.K);
 8017bd2:	687a      	ldr	r2, [r7, #4]
 8017bd4:	f243 1318 	movw	r3, #12568	@ 0x3118
 8017bd8:	4413      	add	r3, r2
 8017bda:	687a      	ldr	r2, [r7, #4]
 8017bdc:	320c      	adds	r2, #12
 8017bde:	4611      	mov	r1, r2
 8017be0:	4618      	mov	r0, r3
 8017be2:	f7ff fabc 	bl	801715e <_ZN22TWIPR_BalancingControl5set_KEPf>
	return 1;
 8017be6:	2301      	movs	r3, #1
}
 8017be8:	4618      	mov	r0, r3
 8017bea:	3708      	adds	r7, #8
 8017bec:	46bd      	mov	sp, r7
 8017bee:	bd80      	pop	{r7, pc}

08017bf0 <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t>:
/* ======================================================== */
uint8_t TWIPR_ControlManager::startTrajectory(
		twipr_control_trajectory_t trajectory) {
 8017bf0:	b480      	push	{r7}
 8017bf2:	b085      	sub	sp, #20
 8017bf4:	af00      	add	r7, sp, #0
 8017bf6:	60f8      	str	r0, [r7, #12]
 8017bf8:	1d3b      	adds	r3, r7, #4
 8017bfa:	e883 0006 	stmia.w	r3, {r1, r2}

	if (this->status != TWIPR_CONTROL_STATUS_RUNNING) {
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	f993 3000 	ldrsb.w	r3, [r3]
 8017c04:	2b01      	cmp	r3, #1
 8017c06:	d001      	beq.n	8017c0c <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t+0x1c>
		return 0;
 8017c08:	2300      	movs	r3, #0
 8017c0a:	e01b      	b.n	8017c44 <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t+0x54>
	}

	// This is only allowed when we are in balancing mode for now // TODO
	if (this->mode != TWIPR_CONTROL_MODE_BALANCING) {
 8017c0c:	68fb      	ldr	r3, [r7, #12]
 8017c0e:	785b      	ldrb	r3, [r3, #1]
 8017c10:	2b02      	cmp	r3, #2
 8017c12:	d001      	beq.n	8017c18 <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t+0x28>
		return 0;
 8017c14:	2300      	movs	r3, #0
 8017c16:	e015      	b.n	8017c44 <_ZN20TWIPR_ControlManager15startTrajectoryE26twipr_control_trajectory_t+0x54>
	}

	this->_trajectory.step = trajectory.step;
 8017c18:	88ba      	ldrh	r2, [r7, #4]
 8017c1a:	68fb      	ldr	r3, [r7, #12]
 8017c1c:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017c20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	this->_trajectory.trajectory_id = trajectory.trajectory_id;
 8017c24:	88fa      	ldrh	r2, [r7, #6]
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
	this->_trajectory.length = trajectory.length;
 8017c30:	893a      	ldrh	r2, [r7, #8]
 8017c32:	68fb      	ldr	r3, [r7, #12]
 8017c34:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017c38:	f8a3 206c 	strh.w	r2, [r3, #108]	@ 0x6c

	// Set the mode to trajectory
	this->mode = TWIPR_CONTROL_MODE_TRAJECTORY;
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	2203      	movs	r2, #3
 8017c40:	705a      	strb	r2, [r3, #1]

	return 1;
 8017c42:	2301      	movs	r3, #1
}
 8017c44:	4618      	mov	r0, r3
 8017c46:	3714      	adds	r7, #20
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4e:	4770      	bx	lr

08017c50 <_ZN20TWIPR_ControlManager9_step_offEv>:
	this->_input.u_2 = 0;

	return 1;
}
/* ======================================================== */
void TWIPR_ControlManager::_step_off() {
 8017c50:	b580      	push	{r7, lr}
 8017c52:	b082      	sub	sp, #8
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
	this->_input.u_1 = 0.0;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017c5e:	461a      	mov	r2, r3
 8017c60:	f04f 0300 	mov.w	r3, #0
 8017c64:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
	this->_input.u_2 = 0.0;
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017c6e:	461a      	mov	r2, r3
 8017c70:	f04f 0300 	mov.w	r3, #0
 8017c74:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
	this->_output.u_left = 0.0;
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017c7e:	461a      	mov	r2, r3
 8017c80:	f04f 0300 	mov.w	r3, #0
 8017c84:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
	this->_output.u_right = 0.0;
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017c8e:	461a      	mov	r2, r3
 8017c90:	f04f 0300 	mov.w	r3, #0
 8017c94:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184
	this->_setTorque(this->_output);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017c9e:	ed93 7a60 	vldr	s14, [r3, #384]	@ 0x180
 8017ca2:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8017ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8017caa:	eef0 0a67 	vmov.f32	s1, s15
 8017cae:	6878      	ldr	r0, [r7, #4]
 8017cb0:	f000 fa55 	bl	801815e <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 8017cb4:	bf00      	nop
 8017cb6:	3708      	adds	r7, #8
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	bd80      	pop	{r7, pc}

08017cbc <_ZN20TWIPR_ControlManager12_step_directEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_direct() {
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b082      	sub	sp, #8
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
	this->_output.u_left = limit(this->_input.u_1, this->config.max_torque);
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017cca:	edd3 7a5e 	vldr	s15, [r3, #376]	@ 0x178
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8017cd4:	eef0 0a47 	vmov.f32	s1, s14
 8017cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8017cdc:	f008 f8d2 	bl	801fe84 <_Z5limitff>
 8017ce0:	eef0 7a40 	vmov.f32	s15, s0
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017cea:	edc3 7a60 	vstr	s15, [r3, #384]	@ 0x180
	this->_output.u_right = limit(this->_input.u_2, this->config.max_torque);
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017cf4:	edd3 7a5f 	vldr	s15, [r3, #380]	@ 0x17c
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8017cfe:	eef0 0a47 	vmov.f32	s1, s14
 8017d02:	eeb0 0a67 	vmov.f32	s0, s15
 8017d06:	f008 f8bd 	bl	801fe84 <_Z5limitff>
 8017d0a:	eef0 7a40 	vmov.f32	s15, s0
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017d14:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184

	this->_setTorque(this->_output);
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017d1e:	ed93 7a60 	vldr	s14, [r3, #384]	@ 0x180
 8017d22:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8017d26:	eeb0 0a47 	vmov.f32	s0, s14
 8017d2a:	eef0 0a67 	vmov.f32	s1, s15
 8017d2e:	6878      	ldr	r0, [r7, #4]
 8017d30:	f000 fa15 	bl	801815e <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 8017d34:	bf00      	nop
 8017d36:	3708      	adds	r7, #8
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	bd80      	pop	{r7, pc}

08017d3c <_ZN20TWIPR_ControlManager10_step_idleEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_idle() {
 8017d3c:	b580      	push	{r7, lr}
 8017d3e:	b082      	sub	sp, #8
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	6078      	str	r0, [r7, #4]
	this->_input.u_1 = 0.0;
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017d4a:	461a      	mov	r2, r3
 8017d4c:	f04f 0300 	mov.w	r3, #0
 8017d50:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
	this->_input.u_2 = 0.0;
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017d5a:	461a      	mov	r2, r3
 8017d5c:	f04f 0300 	mov.w	r3, #0
 8017d60:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
	this->_output.u_left = 0.0;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017d6a:	461a      	mov	r2, r3
 8017d6c:	f04f 0300 	mov.w	r3, #0
 8017d70:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
	this->_output.u_right = 0.0;
 8017d74:	687b      	ldr	r3, [r7, #4]
 8017d76:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017d7a:	461a      	mov	r2, r3
 8017d7c:	f04f 0300 	mov.w	r3, #0
 8017d80:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184

	this->_setTorque(this->_output);
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017d8a:	ed93 7a60 	vldr	s14, [r3, #384]	@ 0x180
 8017d8e:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8017d92:	eeb0 0a47 	vmov.f32	s0, s14
 8017d96:	eef0 0a67 	vmov.f32	s1, s15
 8017d9a:	6878      	ldr	r0, [r7, #4]
 8017d9c:	f000 f9df 	bl	801815e <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 8017da0:	bf00      	nop
 8017da2:	3708      	adds	r7, #8
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bd80      	pop	{r7, pc}

08017da8 <_ZN20TWIPR_ControlManager11_step_errorEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_error() {
 8017da8:	b580      	push	{r7, lr}
 8017daa:	b082      	sub	sp, #8
 8017dac:	af00      	add	r7, sp, #0
 8017dae:	6078      	str	r0, [r7, #4]
	this->_input.u_1 = 0.0;
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017db6:	461a      	mov	r2, r3
 8017db8:	f04f 0300 	mov.w	r3, #0
 8017dbc:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
	this->_input.u_2 = 0.0;
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017dc6:	461a      	mov	r2, r3
 8017dc8:	f04f 0300 	mov.w	r3, #0
 8017dcc:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
	this->_output.u_left = 0.0;
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017dd6:	461a      	mov	r2, r3
 8017dd8:	f04f 0300 	mov.w	r3, #0
 8017ddc:	f8c2 3180 	str.w	r3, [r2, #384]	@ 0x180
	this->_output.u_right = 0.0;
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017de6:	461a      	mov	r2, r3
 8017de8:	f04f 0300 	mov.w	r3, #0
 8017dec:	f8c2 3184 	str.w	r3, [r2, #388]	@ 0x184

	this->_setTorque(this->_output);
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017df6:	ed93 7a60 	vldr	s14, [r3, #384]	@ 0x180
 8017dfa:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8017dfe:	eeb0 0a47 	vmov.f32	s0, s14
 8017e02:	eef0 0a67 	vmov.f32	s1, s15
 8017e06:	6878      	ldr	r0, [r7, #4]
 8017e08:	f000 f9a9 	bl	801815e <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 8017e0c:	bf00      	nop
 8017e0e:	3708      	adds	r7, #8
 8017e10:	46bd      	mov	sp, r7
 8017e12:	bd80      	pop	{r7, pc}

08017e14 <_ZN20TWIPR_ControlManager15_step_balancingEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_balancing() {
 8017e14:	b5b0      	push	{r4, r5, r7, lr}
 8017e16:	b08e      	sub	sp, #56	@ 0x38
 8017e18:	af04      	add	r7, sp, #16
 8017e1a:	6078      	str	r0, [r7, #4]
	//	 Calculate the input from the balancing controller

	osSemaphoreAcquire(semaphore_external_input, portMAX_DELAY);
 8017e1c:	4b7c      	ldr	r3, [pc, #496]	@ (8018010 <_ZN20TWIPR_ControlManager15_step_balancingEv+0x1fc>)
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8017e24:	4618      	mov	r0, r3
 8017e26:	f7f8 f99b 	bl	8010160 <osSemaphoreAcquire>
	twipr_control_input_t external_input = this->_input;
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017e30:	461a      	mov	r2, r3
 8017e32:	f107 0318 	add.w	r3, r7, #24
 8017e36:	f502 72bc 	add.w	r2, r2, #376	@ 0x178
 8017e3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017e3e:	e883 0003 	stmia.w	r3, {r0, r1}
	osSemaphoreRelease(semaphore_external_input);
 8017e42:	4b73      	ldr	r3, [pc, #460]	@ (8018010 <_ZN20TWIPR_ControlManager15_step_balancingEv+0x1fc>)
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	4618      	mov	r0, r3
 8017e48:	f7f8 f9dc 	bl	8010204 <osSemaphoreRelease>

//	this->_output.u_left = 0.1;
//	this->_output.u_right = 0.1;

	this->_output.u_left = limit(this->_output.u_left, this->config.max_torque);
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017e52:	edd3 7a60 	vldr	s15, [r3, #384]	@ 0x180
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8017e5c:	eef0 0a47 	vmov.f32	s1, s14
 8017e60:	eeb0 0a67 	vmov.f32	s0, s15
 8017e64:	f008 f80e 	bl	801fe84 <_Z5limitff>
 8017e68:	eef0 7a40 	vmov.f32	s15, s0
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017e72:	edc3 7a60 	vstr	s15, [r3, #384]	@ 0x180
	this->_output.u_right = limit(this->_output.u_right,
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017e7c:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8017e86:	eef0 0a47 	vmov.f32	s1, s14
 8017e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8017e8e:	f007 fff9 	bl	801fe84 <_Z5limitff>
 8017e92:	eef0 7a40 	vmov.f32	s15, s0
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017e9c:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
			this->config.max_torque);


	twipr_balancing_control_input_t balancing_input = { .u_1 = external_input.u_1,
 8017ea0:	69bb      	ldr	r3, [r7, #24]
			.u_2 = external_input.u_2 };
 8017ea2:	613b      	str	r3, [r7, #16]
 8017ea4:	69fb      	ldr	r3, [r7, #28]
 8017ea6:	617b      	str	r3, [r7, #20]

	twipr_balancing_control_output_t balancing_output;

	// Update the balancing controller
	this->_balancing_control.update(this->_dynamic_state, balancing_input,
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	f243 1418 	movw	r4, #12568	@ 0x3118
 8017eae:	441c      	add	r4, r3
 8017eb0:	ed97 7a04 	vldr	s14, [r7, #16]
 8017eb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017ebe:	f107 0208 	add.w	r2, r7, #8
 8017ec2:	9202      	str	r2, [sp, #8]
 8017ec4:	466d      	mov	r5, sp
 8017ec6:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
 8017eca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017ece:	e885 0003 	stmia.w	r5, {r0, r1}
 8017ed2:	3370      	adds	r3, #112	@ 0x70
 8017ed4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8017ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8017eda:	eef0 0a67 	vmov.f32	s1, s15
 8017ede:	4620      	mov	r0, r4
 8017ee0:	f7ff f842 	bl	8016f68 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>
			&balancing_output);

	this->_sum_theta += this->_dynamic_state.theta;
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017eea:	ed93 7a44 	vldr	s14, [r3, #272]	@ 0x110
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017ef4:	edd3 7a1d 	vldr	s15, [r3, #116]	@ 0x74
 8017ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017f02:	edc3 7a44 	vstr	s15, [r3, #272]	@ 0x110
	this->_sum_v += this->_dynamic_state.v;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017f0c:	ed93 7a45 	vldr	s14, [r3, #276]	@ 0x114
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017f16:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8017f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017f24:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114

	float theta_ouput_int = this->_sum_theta * 0.000;
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017f2e:	edd3 7a44 	vldr	s15, [r3, #272]	@ 0x110
 8017f32:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8018014 <_ZN20TWIPR_ControlManager15_step_balancingEv+0x200>
 8017f36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017f3a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float v_ouput_int = this->_sum_v * (0.0);
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8017f44:	edd3 7a45 	vldr	s15, [r3, #276]	@ 0x114
 8017f48:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8018014 <_ZN20TWIPR_ControlManager15_step_balancingEv+0x200>
 8017f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017f50:	edc7 7a08 	vstr	s15, [r7, #32]

	theta_ouput_int = limit(theta_ouput_int, 0.004);
 8017f54:	eddf 0a30 	vldr	s1, [pc, #192]	@ 8018018 <_ZN20TWIPR_ControlManager15_step_balancingEv+0x204>
 8017f58:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8017f5c:	f007 ff92 	bl	801fe84 <_Z5limitff>
 8017f60:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
	v_ouput_int = limit(v_ouput_int, 0.02);
 8017f64:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 801801c <_ZN20TWIPR_ControlManager15_step_balancingEv+0x208>
 8017f68:	ed97 0a08 	vldr	s0, [r7, #32]
 8017f6c:	f007 ff8a 	bl	801fe84 <_Z5limitff>
 8017f70:	ed87 0a08 	vstr	s0, [r7, #32]

	balancing_output.u_1 = balancing_output.u_1 + theta_ouput_int + v_ouput_int;
 8017f74:	ed97 7a02 	vldr	s14, [r7, #8]
 8017f78:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8017f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017f80:	edd7 7a08 	vldr	s15, [r7, #32]
 8017f84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017f88:	edc7 7a02 	vstr	s15, [r7, #8]
	balancing_output.u_2 = balancing_output.u_2 + theta_ouput_int + v_ouput_int;
 8017f8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8017f90:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8017f94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017f98:	edd7 7a08 	vldr	s15, [r7, #32]
 8017f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8017fa0:	edc7 7a03 	vstr	s15, [r7, #12]

	this->_output.u_left = limit(balancing_output.u_1, this->config.max_torque);
 8017fa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8017fae:	eef0 0a47 	vmov.f32	s1, s14
 8017fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8017fb6:	f007 ff65 	bl	801fe84 <_Z5limitff>
 8017fba:	eef0 7a40 	vmov.f32	s15, s0
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017fc4:	edc3 7a60 	vstr	s15, [r3, #384]	@ 0x180
	this->_output.u_right = limit(balancing_output.u_2,
 8017fc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8017fd2:	eef0 0a47 	vmov.f32	s1, s14
 8017fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8017fda:	f007 ff53 	bl	801fe84 <_Z5limitff>
 8017fde:	eef0 7a40 	vmov.f32	s15, s0
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017fe8:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
			this->config.max_torque);

	// Drive the motors
	this->_setTorque(this->_output);
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8017ff2:	ed93 7a60 	vldr	s14, [r3, #384]	@ 0x180
 8017ff6:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8017ffa:	eeb0 0a47 	vmov.f32	s0, s14
 8017ffe:	eef0 0a67 	vmov.f32	s1, s15
 8018002:	6878      	ldr	r0, [r7, #4]
 8018004:	f000 f8ab 	bl	801815e <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>
}
 8018008:	bf00      	nop
 801800a:	3728      	adds	r7, #40	@ 0x28
 801800c:	46bd      	mov	sp, r7
 801800e:	bdb0      	pop	{r4, r5, r7, pc}
 8018010:	24015418 	.word	0x24015418
 8018014:	00000000 	.word	0x00000000
 8018018:	3b83126f 	.word	0x3b83126f
 801801c:	3ca3d70a 	.word	0x3ca3d70a

08018020 <_ZN20TWIPR_ControlManager16_step_trajectoryEv>:
/* ======================================================== */
void TWIPR_ControlManager::_step_trajectory() {
 8018020:	b5b0      	push	{r4, r5, r7, lr}
 8018022:	b08a      	sub	sp, #40	@ 0x28
 8018024:	af04      	add	r7, sp, #16
 8018026:	6078      	str	r0, [r7, #4]

	// Check if the step is correct
	if (this->_trajectory_buffer[this->_trajectory.step].step
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 801802e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
			!= this->_trajectory.step) {
		// TODO
	}

	// Set the input from the current input of the buffer
	this->_input.u_1 = this->_trajectory_buffer[this->_trajectory.step].u_1;
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8018038:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801803c:	4619      	mov	r1, r3
 801803e:	687a      	ldr	r2, [r7, #4]
 8018040:	460b      	mov	r3, r1
 8018042:	005b      	lsls	r3, r3, #1
 8018044:	440b      	add	r3, r1
 8018046:	009b      	lsls	r3, r3, #2
 8018048:	441a      	add	r2, r3
 801804a:	f243 138c 	movw	r3, #12684	@ 0x318c
 801804e:	4413      	add	r3, r2
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	687a      	ldr	r2, [r7, #4]
 8018054:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8018058:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
	this->_input.u_2 = this->_trajectory_buffer[this->_trajectory.step].u_2;
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8018062:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018066:	4619      	mov	r1, r3
 8018068:	687a      	ldr	r2, [r7, #4]
 801806a:	460b      	mov	r3, r1
 801806c:	005b      	lsls	r3, r3, #1
 801806e:	440b      	add	r3, r1
 8018070:	009b      	lsls	r3, r3, #2
 8018072:	441a      	add	r2, r3
 8018074:	f243 1390 	movw	r3, #12688	@ 0x3190
 8018078:	4413      	add	r3, r2
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	687a      	ldr	r2, [r7, #4]
 801807e:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 8018082:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c

	// Perform a control step
	twipr_balancing_control_input_t balancing_input = { .u_1 = this->_input.u_1,
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801808c:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
			.u_2 = this->_input.u_2 };
 8018090:	613b      	str	r3, [r7, #16]
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018098:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 801809c:	617b      	str	r3, [r7, #20]

	twipr_balancing_control_output_t balancing_output;

	// Update the balancing controller
	this->_balancing_control.update(this->_dynamic_state, balancing_input,
 801809e:	687b      	ldr	r3, [r7, #4]
 80180a0:	f243 1418 	movw	r4, #12568	@ 0x3118
 80180a4:	441c      	add	r4, r3
 80180a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80180aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 80180b4:	f107 0208 	add.w	r2, r7, #8
 80180b8:	9202      	str	r2, [sp, #8]
 80180ba:	466d      	mov	r5, sp
 80180bc:	f103 027c 	add.w	r2, r3, #124	@ 0x7c
 80180c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80180c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80180c8:	3370      	adds	r3, #112	@ 0x70
 80180ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80180cc:	eeb0 0a47 	vmov.f32	s0, s14
 80180d0:	eef0 0a67 	vmov.f32	s1, s15
 80180d4:	4620      	mov	r0, r4
 80180d6:	f7fe ff47 	bl	8016f68 <_ZN22TWIPR_BalancingControl6updateE24twipr_estimation_state_t31twipr_balancing_control_input_tP32twipr_balancing_control_output_t>
			&balancing_output);

	this->_output.u_left = limit(balancing_output.u_1, this->config.max_torque);
 80180da:	edd7 7a02 	vldr	s15, [r7, #8]
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80180e4:	eef0 0a47 	vmov.f32	s1, s14
 80180e8:	eeb0 0a67 	vmov.f32	s0, s15
 80180ec:	f007 feca 	bl	801fe84 <_Z5limitff>
 80180f0:	eef0 7a40 	vmov.f32	s15, s0
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80180fa:	edc3 7a60 	vstr	s15, [r3, #384]	@ 0x180
	this->_output.u_right = limit(balancing_output.u_2,
 80180fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8018108:	eef0 0a47 	vmov.f32	s1, s14
 801810c:	eeb0 0a67 	vmov.f32	s0, s15
 8018110:	f007 feb8 	bl	801fe84 <_Z5limitff>
 8018114:	eef0 7a40 	vmov.f32	s15, s0
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801811e:	edc3 7a61 	vstr	s15, [r3, #388]	@ 0x184
			this->config.max_torque);

	// Drive the motors
	this->_setTorque(this->_output);
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8018128:	ed93 7a60 	vldr	s14, [r3, #384]	@ 0x180
 801812c:	edd3 7a61 	vldr	s15, [r3, #388]	@ 0x184
 8018130:	eeb0 0a47 	vmov.f32	s0, s14
 8018134:	eef0 0a67 	vmov.f32	s1, s15
 8018138:	6878      	ldr	r0, [r7, #4]
 801813a:	f000 f810 	bl	801815e <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>

	// Increase the trajectory step counter
	this->_trajectory.step++;
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8018144:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8018148:	3301      	adds	r3, #1
 801814a:	b29a      	uxth	r2, r3
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8018152:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

}
 8018156:	bf00      	nop
 8018158:	3718      	adds	r7, #24
 801815a:	46bd      	mov	sp, r7
 801815c:	bdb0      	pop	{r4, r5, r7, pc}

0801815e <_ZN20TWIPR_ControlManager10_setTorqueE22twipr_control_output_t>:
/* ======================================================== */
void TWIPR_ControlManager::_setTorque(twipr_control_output_t output) {
 801815e:	b580      	push	{r7, lr}
 8018160:	b086      	sub	sp, #24
 8018162:	af00      	add	r7, sp, #0
 8018164:	60f8      	str	r0, [r7, #12]
 8018166:	eeb0 7a40 	vmov.f32	s14, s0
 801816a:	eef0 7a60 	vmov.f32	s15, s1
 801816e:	ed87 7a01 	vstr	s14, [r7, #4]
 8018172:	edc7 7a02 	vstr	s15, [r7, #8]

	// Apply the torque to the motors
	twipr_drive_input_t drive_input = { .torque_left = output.u_left,
 8018176:	687b      	ldr	r3, [r7, #4]
			.torque_right = output.u_right };
 8018178:	613b      	str	r3, [r7, #16]
 801817a:	68bb      	ldr	r3, [r7, #8]
 801817c:	617b      	str	r3, [r7, #20]

	this->config.drive->setTorque(drive_input);
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	689b      	ldr	r3, [r3, #8]
 8018182:	ed97 7a04 	vldr	s14, [r7, #16]
 8018186:	edd7 7a05 	vldr	s15, [r7, #20]
 801818a:	eeb0 0a47 	vmov.f32	s0, s14
 801818e:	eef0 0a67 	vmov.f32	s1, s15
 8018192:	4618      	mov	r0, r3
 8018194:	f002 fa6c 	bl	801a670 <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t>
}
 8018198:	bf00      	nop
 801819a:	3718      	adds	r7, #24
 801819c:	46bd      	mov	sp, r7
 801819e:	bd80      	pop	{r7, pc}

080181a0 <_ZN19core_utils_CallbackIvmEaSERKS0_>:
class core_utils_Callback: public Callback {
 80181a0:	b5b0      	push	{r4, r5, r7, lr}
 80181a2:	b082      	sub	sp, #8
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	6078      	str	r0, [r7, #4]
 80181a8:	6039      	str	r1, [r7, #0]
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	683a      	ldr	r2, [r7, #0]
 80181ae:	4611      	mov	r1, r2
 80181b0:	4618      	mov	r0, r3
 80181b2:	f7fb ff10 	bl	8013fd6 <_ZN8CallbackaSERKS_>
 80181b6:	683b      	ldr	r3, [r7, #0]
 80181b8:	791a      	ldrb	r2, [r3, #4]
 80181ba:	687b      	ldr	r3, [r7, #4]
 80181bc:	711a      	strb	r2, [r3, #4]
 80181be:	687a      	ldr	r2, [r7, #4]
 80181c0:	683b      	ldr	r3, [r7, #0]
 80181c2:	f102 0408 	add.w	r4, r2, #8
 80181c6:	f103 0508 	add.w	r5, r3, #8
 80181ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80181cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80181ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80181d2:	e884 0003 	stmia.w	r4, {r0, r1}
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	4618      	mov	r0, r3
 80181da:	3708      	adds	r7, #8
 80181dc:	46bd      	mov	sp, r7
 80181de:	bdb0      	pop	{r4, r5, r7, pc}

080181e0 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE>:
	}
}
/* ======================================================== */
void TWIPR_ControlManager::registerCallback(
		twipr_control_callback_id_t callback_id,
		core_utils_Callback<void, uint32_t> callback) {
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b084      	sub	sp, #16
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	60f8      	str	r0, [r7, #12]
 80181e8:	460b      	mov	r3, r1
 80181ea:	607a      	str	r2, [r7, #4]
 80181ec:	72fb      	strb	r3, [r7, #11]
	switch (callback_id) {
 80181ee:	7afb      	ldrb	r3, [r7, #11]
 80181f0:	2b03      	cmp	r3, #3
 80181f2:	d820      	bhi.n	8018236 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x56>
 80181f4:	a201      	add	r2, pc, #4	@ (adr r2, 80181fc <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x1c>)
 80181f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181fa:	bf00      	nop
 80181fc:	0801820d 	.word	0x0801820d
 8018200:	08018215 	.word	0x08018215
 8018204:	0801821d 	.word	0x0801821d
 8018208:	08018225 	.word	0x08018225
	case TWIPR_CONTROL_CALLBACK_ERROR: {
		twipr_error_handler(0);
 801820c:	2000      	movs	r0, #0
 801820e:	f002 fa83 	bl	801a718 <_Z19twipr_error_handlerm>
		break;
 8018212:	e010      	b.n	8018236 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x56>
	}
	case TWIPR_CONTROL_CALLBACK_TRAJECTORY_START: {
		twipr_error_handler(0);
 8018214:	2000      	movs	r0, #0
 8018216:	f002 fa7f 	bl	801a718 <_Z19twipr_error_handlerm>
		break;
 801821a:	e00c      	b.n	8018236 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x56>
	}
	case TWIPR_CONTROL_CALLBACK_TRAJECTORY_FINISHED: {
		twipr_error_handler(0);
 801821c:	2000      	movs	r0, #0
 801821e:	f002 fa7b 	bl	801a718 <_Z19twipr_error_handlerm>
		break;
 8018222:	e008      	b.n	8018236 <_ZN20TWIPR_ControlManager16registerCallbackE27twipr_control_callback_id_t19core_utils_CallbackIvmE+0x56>
	}
	case TWIPR_CONTROL_CALLBACK_STEP: {
		this->_callbacks.step = callback;
 8018224:	68fa      	ldr	r2, [r7, #12]
 8018226:	f246 03ec 	movw	r3, #24812	@ 0x60ec
 801822a:	4413      	add	r3, r2
 801822c:	6879      	ldr	r1, [r7, #4]
 801822e:	4618      	mov	r0, r3
 8018230:	f7ff ffb6 	bl	80181a0 <_ZN19core_utils_CallbackIvmEaSERKS0_>
		break;
 8018234:	bf00      	nop
	}
	}
}
 8018236:	bf00      	nop
 8018238:	3710      	adds	r7, #16
 801823a:	46bd      	mov	sp, r7
 801823c:	bd80      	pop	{r7, pc}
 801823e:	bf00      	nop

08018240 <_ZN20TWIPR_ControlManager19_trajectoryFinishedEv>:
/* ======================================================== */
void TWIPR_ControlManager::_trajectoryFinished() {
 8018240:	b580      	push	{r7, lr}
 8018242:	b082      	sub	sp, #8
 8018244:	af00      	add	r7, sp, #0
 8018246:	6078      	str	r0, [r7, #4]

	// Reset the external input
	this->_input.u_1 = 0;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801824e:	461a      	mov	r2, r3
 8018250:	f04f 0300 	mov.w	r3, #0
 8018254:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
	this->_input.u_2 = 0;
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801825e:	461a      	mov	r2, r3
 8018260:	f04f 0300 	mov.w	r3, #0
 8018264:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c

	// Set the mode back to balancing
	this->mode = TWIPR_CONTROL_MODE_BALANCING;
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	2202      	movs	r2, #2
 801826c:	705a      	strb	r2, [r3, #1]

	if (this->_callbacks.trajectory_finished.registered) {
 801826e:	687b      	ldr	r3, [r7, #4]
 8018270:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8018274:	f893 30d0 	ldrb.w	r3, [r3, #208]	@ 0xd0
 8018278:	2b00      	cmp	r3, #0
 801827a:	d00c      	beq.n	8018296 <_ZN20TWIPR_ControlManager19_trajectoryFinishedEv+0x56>
		this->_callbacks.trajectory_finished.call(this->_trajectory.length);
 801827c:	687a      	ldr	r2, [r7, #4]
 801827e:	f246 03cc 	movw	r3, #24780	@ 0x60cc
 8018282:	4413      	add	r3, r2
 8018284:	687a      	ldr	r2, [r7, #4]
 8018286:	f502 42c0 	add.w	r2, r2, #24576	@ 0x6000
 801828a:	f8b2 206c 	ldrh.w	r2, [r2, #108]	@ 0x6c
 801828e:	4611      	mov	r1, r2
 8018290:	4618      	mov	r0, r3
 8018292:	f7fc f873 	bl	801437c <_ZN19core_utils_CallbackIvtE4callEt>
	}
}
 8018296:	bf00      	nop
 8018298:	3708      	adds	r7, #8
 801829a:	46bd      	mov	sp, r7
 801829c:	bd80      	pop	{r7, pc}

0801829e <_ZN20TWIPR_ControlManager9getSampleEv>:
/* ======================================================== */
twipr_logging_control_t TWIPR_ControlManager::getSample() {
 801829e:	b480      	push	{r7}
 80182a0:	b083      	sub	sp, #12
 80182a2:	af00      	add	r7, sp, #0
 80182a4:	6078      	str	r0, [r7, #4]
 80182a6:	6039      	str	r1, [r7, #0]
	twipr_logging_control_t sample;
	sample.control_mode = this->mode;
 80182a8:	683b      	ldr	r3, [r7, #0]
 80182aa:	785a      	ldrb	r2, [r3, #1]
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	705a      	strb	r2, [r3, #1]
	sample.control_status = this->status;
 80182b0:	683b      	ldr	r3, [r7, #0]
 80182b2:	f993 2000 	ldrsb.w	r2, [r3]
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	701a      	strb	r2, [r3, #0]
	sample.input = this->_input;
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	683a      	ldr	r2, [r7, #0]
 80182be:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 80182c2:	3304      	adds	r3, #4
 80182c4:	f502 72bc 	add.w	r2, r2, #376	@ 0x178
 80182c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80182cc:	e883 0003 	stmia.w	r3, {r0, r1}
	sample.output = this->_output;
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	683a      	ldr	r2, [r7, #0]
 80182d4:	f502 5240 	add.w	r2, r2, #12288	@ 0x3000
 80182d8:	330c      	adds	r3, #12
 80182da:	f502 72c0 	add.w	r2, r2, #384	@ 0x180
 80182de:	e892 0003 	ldmia.w	r2, {r0, r1}
 80182e2:	e883 0003 	stmia.w	r3, {r0, r1}

	if (this->mode == TWIPR_CONTROL_MODE_TRAJECTORY) {
 80182e6:	683b      	ldr	r3, [r7, #0]
 80182e8:	785b      	ldrb	r3, [r3, #1]
 80182ea:	2b03      	cmp	r3, #3
 80182ec:	d10f      	bne.n	801830e <_ZN20TWIPR_ControlManager9getSampleEv+0x70>
		sample.trajectory_step = this->_trajectory.step;
 80182ee:	683b      	ldr	r3, [r7, #0]
 80182f0:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 80182f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80182f8:	461a      	mov	r2, r3
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	615a      	str	r2, [r3, #20]
		sample.trajectory_id = this->_trajectory.trajectory_id;
 80182fe:	683b      	ldr	r3, [r7, #0]
 8018300:	f503 43c0 	add.w	r3, r3, #24576	@ 0x6000
 8018304:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	831a      	strh	r2, [r3, #24]
	} else {
		sample.trajectory_step = 0;
		sample.trajectory_id = 0;
	}

	return sample;
 801830c:	e005      	b.n	801831a <_ZN20TWIPR_ControlManager9getSampleEv+0x7c>
		sample.trajectory_step = 0;
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	2200      	movs	r2, #0
 8018312:	615a      	str	r2, [r3, #20]
		sample.trajectory_id = 0;
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	2200      	movs	r2, #0
 8018318:	831a      	strh	r2, [r3, #24]
	return sample;
 801831a:	bf00      	nop
}
 801831c:	6878      	ldr	r0, [r7, #4]
 801831e:	370c      	adds	r7, #12
 8018320:	46bd      	mov	sp, r7
 8018322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018326:	4770      	bx	lr

08018328 <_ZN11RegisterMapC1Ev>:
class RegisterMap {
 8018328:	b480      	push	{r7}
 801832a:	b083      	sub	sp, #12
 801832c:	af00      	add	r7, sp, #0
 801832e:	6078      	str	r0, [r7, #4]
 8018330:	4a04      	ldr	r2, [pc, #16]	@ (8018344 <_ZN11RegisterMapC1Ev+0x1c>)
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	601a      	str	r2, [r3, #0]
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	4618      	mov	r0, r3
 801833a:	370c      	adds	r7, #12
 801833c:	46bd      	mov	sp, r7
 801833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018342:	4770      	bx	lr
 8018344:	080236d4 	.word	0x080236d4

08018348 <_ZN22core_utils_RegisterMapILi20EEC1Et>:
	core_utils_RegisterMap<size>(uint16_t address) {
 8018348:	b580      	push	{r7, lr}
 801834a:	b082      	sub	sp, #8
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
 8018350:	460b      	mov	r3, r1
 8018352:	807b      	strh	r3, [r7, #2]
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	4618      	mov	r0, r3
 8018358:	f7ff ffe6 	bl	8018328 <_ZN11RegisterMapC1Ev>
 801835c:	4a08      	ldr	r2, [pc, #32]	@ (8018380 <_ZN22core_utils_RegisterMapILi20EEC1Et+0x38>)
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	601a      	str	r2, [r3, #0]
 8018362:	687b      	ldr	r3, [r7, #4]
 8018364:	330c      	adds	r3, #12
 8018366:	2250      	movs	r2, #80	@ 0x50
 8018368:	2100      	movs	r1, #0
 801836a:	4618      	mov	r0, r3
 801836c:	f008 ffe6 	bl	802133c <memset>
		this->address = address;
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	887a      	ldrh	r2, [r7, #2]
 8018374:	809a      	strh	r2, [r3, #4]
	}
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	4618      	mov	r0, r3
 801837a:	3708      	adds	r7, #8
 801837c:	46bd      	mov	sp, r7
 801837e:	bd80      	pop	{r7, pc}
 8018380:	080234a4 	.word	0x080234a4

08018384 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tEC1Ev>:
	core_utils_RegisterFunction() {
 8018384:	b580      	push	{r7, lr}
 8018386:	b082      	sub	sp, #8
 8018388:	af00      	add	r7, sp, #0
 801838a:	6078      	str	r0, [r7, #4]
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	4618      	mov	r0, r3
 8018390:	f7fe ffd8 	bl	8017344 <_ZN13RegisterEntryC1Ev>
 8018394:	4a07      	ldr	r2, [pc, #28]	@ (80183b4 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tEC1Ev+0x30>)
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	601a      	str	r2, [r3, #0]
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	2202      	movs	r2, #2
 801839e:	741a      	strb	r2, [r3, #16]
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	3314      	adds	r3, #20
 80183a4:	4618      	mov	r0, r3
 80183a6:	f000 fb43 	bl	8018a30 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1Ev>
	}
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	4618      	mov	r0, r3
 80183ae:	3708      	adds	r7, #8
 80183b0:	46bd      	mov	sp, r7
 80183b2:	bd80      	pop	{r7, pc}
 80183b4:	08023664 	.word	0x08023664

080183b8 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tEC1Ev>:
	core_utils_RegisterEntry() {
 80183b8:	b590      	push	{r4, r7, lr}
 80183ba:	b08b      	sub	sp, #44	@ 0x2c
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	4618      	mov	r0, r3
 80183c4:	f7fe ffbe 	bl	8017344 <_ZN13RegisterEntryC1Ev>
 80183c8:	4a0c      	ldr	r2, [pc, #48]	@ (80183fc <_ZN24core_utils_RegisterEntryI22twipr_control_status_tEC1Ev+0x44>)
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	601a      	str	r2, [r3, #0]
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	2201      	movs	r2, #1
 80183d2:	71da      	strb	r2, [r3, #7]
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	f103 0410 	add.w	r4, r3, #16
 80183da:	f107 0308 	add.w	r3, r7, #8
 80183de:	4618      	mov	r0, r3
 80183e0:	f7fc fb26 	bl	8014a30 <_ZN19core_utils_CallbackIvvEC1Ev>
 80183e4:	f107 0308 	add.w	r3, r7, #8
 80183e8:	4619      	mov	r1, r3
 80183ea:	4620      	mov	r0, r4
 80183ec:	f7fe ffd2 	bl	8017394 <_ZN8CallbackC1EOS_>
	}
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	4618      	mov	r0, r3
 80183f4:	372c      	adds	r7, #44	@ 0x2c
 80183f6:	46bd      	mov	sp, r7
 80183f8:	bd90      	pop	{r4, r7, pc}
 80183fa:	bf00      	nop
 80183fc:	08023634 	.word	0x08023634

08018400 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tEC1Ev>:
	core_utils_RegisterEntry() {
 8018400:	b590      	push	{r4, r7, lr}
 8018402:	b08b      	sub	sp, #44	@ 0x2c
 8018404:	af00      	add	r7, sp, #0
 8018406:	6078      	str	r0, [r7, #4]
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	4618      	mov	r0, r3
 801840c:	f7fe ff9a 	bl	8017344 <_ZN13RegisterEntryC1Ev>
 8018410:	4a0c      	ldr	r2, [pc, #48]	@ (8018444 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tEC1Ev+0x44>)
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	601a      	str	r2, [r3, #0]
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	2201      	movs	r2, #1
 801841a:	71da      	strb	r2, [r3, #7]
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	f103 0410 	add.w	r4, r3, #16
 8018422:	f107 0308 	add.w	r3, r7, #8
 8018426:	4618      	mov	r0, r3
 8018428:	f7fc fb02 	bl	8014a30 <_ZN19core_utils_CallbackIvvEC1Ev>
 801842c:	f107 0308 	add.w	r3, r7, #8
 8018430:	4619      	mov	r1, r3
 8018432:	4620      	mov	r0, r4
 8018434:	f7fe ffae 	bl	8017394 <_ZN8CallbackC1EOS_>
	}
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	4618      	mov	r0, r3
 801843c:	372c      	adds	r7, #44	@ 0x2c
 801843e:	46bd      	mov	sp, r7
 8018440:	bd90      	pop	{r4, r7, pc}
 8018442:	bf00      	nop
 8018444:	08023604 	.word	0x08023604

08018448 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tEC1Ev>:
	core_utils_RegisterFunction() {
 8018448:	b580      	push	{r7, lr}
 801844a:	b082      	sub	sp, #8
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	4618      	mov	r0, r3
 8018454:	f7fe ff76 	bl	8017344 <_ZN13RegisterEntryC1Ev>
 8018458:	4a07      	ldr	r2, [pc, #28]	@ (8018478 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tEC1Ev+0x30>)
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	601a      	str	r2, [r3, #0]
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	2202      	movs	r2, #2
 8018462:	71da      	strb	r2, [r3, #7]
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	330c      	adds	r3, #12
 8018468:	4618      	mov	r0, r3
 801846a:	f000 faff 	bl	8018a6c <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev>
	}
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	4618      	mov	r0, r3
 8018472:	3708      	adds	r7, #8
 8018474:	46bd      	mov	sp, r7
 8018476:	bd80      	pop	{r7, pc}
 8018478:	080235c4 	.word	0x080235c4

0801847c <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tEC1Ev>:
	core_utils_RegisterFunction() {
 801847c:	b580      	push	{r7, lr}
 801847e:	b082      	sub	sp, #8
 8018480:	af00      	add	r7, sp, #0
 8018482:	6078      	str	r0, [r7, #4]
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	4618      	mov	r0, r3
 8018488:	f7fe ff5c 	bl	8017344 <_ZN13RegisterEntryC1Ev>
 801848c:	4a07      	ldr	r2, [pc, #28]	@ (80184ac <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tEC1Ev+0x30>)
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	601a      	str	r2, [r3, #0]
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	2202      	movs	r2, #2
 8018496:	731a      	strb	r2, [r3, #12]
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	3310      	adds	r3, #16
 801849c:	4618      	mov	r0, r3
 801849e:	f000 fb03 	bl	8018aa8 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1Ev>
	}
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	4618      	mov	r0, r3
 80184a6:	3708      	adds	r7, #8
 80184a8:	46bd      	mov	sp, r7
 80184aa:	bd80      	pop	{r7, pc}
 80184ac:	08023584 	.word	0x08023584

080184b0 <_ZN27core_utils_RegisterFunctionIhA8_fEC1Ev>:
	core_utils_RegisterFunction() {
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b082      	sub	sp, #8
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	4618      	mov	r0, r3
 80184bc:	f7fe ff42 	bl	8017344 <_ZN13RegisterEntryC1Ev>
 80184c0:	4a08      	ldr	r2, [pc, #32]	@ (80184e4 <_ZN27core_utils_RegisterFunctionIhA8_fEC1Ev+0x34>)
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	601a      	str	r2, [r3, #0]
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	2202      	movs	r2, #2
 80184ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	332c      	adds	r3, #44	@ 0x2c
 80184d2:	4618      	mov	r0, r3
 80184d4:	f000 fb06 	bl	8018ae4 <_ZN19core_utils_CallbackIhA8_fEC1Ev>
	}
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	4618      	mov	r0, r3
 80184dc:	3708      	adds	r7, #8
 80184de:	46bd      	mov	sp, r7
 80184e0:	bd80      	pop	{r7, pc}
 80184e2:	bf00      	nop
 80184e4:	08023544 	.word	0x08023544

080184e8 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tEC1Ev>:
	core_utils_RegisterEntry() {
 80184e8:	b590      	push	{r4, r7, lr}
 80184ea:	b08b      	sub	sp, #44	@ 0x2c
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	4618      	mov	r0, r3
 80184f4:	f7fe ff26 	bl	8017344 <_ZN13RegisterEntryC1Ev>
 80184f8:	4a0c      	ldr	r2, [pc, #48]	@ (801852c <_ZN24core_utils_RegisterEntryI22twipr_control_config_tEC1Ev+0x44>)
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	601a      	str	r2, [r3, #0]
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	2201      	movs	r2, #1
 8018502:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	f103 0444 	add.w	r4, r3, #68	@ 0x44
 801850c:	f107 0308 	add.w	r3, r7, #8
 8018510:	4618      	mov	r0, r3
 8018512:	f7fc fa8d 	bl	8014a30 <_ZN19core_utils_CallbackIvvEC1Ev>
 8018516:	f107 0308 	add.w	r3, r7, #8
 801851a:	4619      	mov	r1, r3
 801851c:	4620      	mov	r0, r4
 801851e:	f7fe ff39 	bl	8017394 <_ZN8CallbackC1EOS_>
	}
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	4618      	mov	r0, r3
 8018526:	372c      	adds	r7, #44	@ 0x2c
 8018528:	46bd      	mov	sp, r7
 801852a:	bd90      	pop	{r4, r7, pc}
 801852c:	08023514 	.word	0x08023514

08018530 <_ZN27core_utils_RegisterFunctionIvfEC1Ev>:
	core_utils_RegisterFunction() {
 8018530:	b580      	push	{r7, lr}
 8018532:	b082      	sub	sp, #8
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	4618      	mov	r0, r3
 801853c:	f7fe ff02 	bl	8017344 <_ZN13RegisterEntryC1Ev>
 8018540:	4a07      	ldr	r2, [pc, #28]	@ (8018560 <_ZN27core_utils_RegisterFunctionIvfEC1Ev+0x30>)
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	601a      	str	r2, [r3, #0]
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	2202      	movs	r2, #2
 801854a:	731a      	strb	r2, [r3, #12]
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	3310      	adds	r3, #16
 8018550:	4618      	mov	r0, r3
 8018552:	f000 fae5 	bl	8018b20 <_ZN19core_utils_CallbackIvfEC1Ev>
	}
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	4618      	mov	r0, r3
 801855a:	3708      	adds	r7, #8
 801855c:	46bd      	mov	sp, r7
 801855e:	bd80      	pop	{r7, pc}
 8018560:	080234d4 	.word	0x080234d4

08018564 <_ZN19core_utils_CallbackIvmEC1Ev>:
	core_utils_Callback() {
 8018564:	b580      	push	{r7, lr}
 8018566:	b082      	sub	sp, #8
 8018568:	af00      	add	r7, sp, #0
 801856a:	6078      	str	r0, [r7, #4]
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	4618      	mov	r0, r3
 8018570:	f7fb fd0c 	bl	8013f8c <_ZN8CallbackC1Ev>
 8018574:	4a09      	ldr	r2, [pc, #36]	@ (801859c <_ZN19core_utils_CallbackIvmEC1Ev+0x38>)
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	601a      	str	r2, [r3, #0]
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	2200      	movs	r2, #0
 801857e:	711a      	strb	r2, [r3, #4]
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	3308      	adds	r3, #8
 8018584:	2100      	movs	r1, #0
 8018586:	4618      	mov	r0, r3
 8018588:	f7fe fb41 	bl	8016c0e <_ZN26core_utils_FunctionPointerIvmEC1EPFvmE>
		this->registered = 0;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	2200      	movs	r2, #0
 8018590:	711a      	strb	r2, [r3, #4]
	}
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	4618      	mov	r0, r3
 8018596:	3708      	adds	r7, #8
 8018598:	46bd      	mov	sp, r7
 801859a:	bd80      	pop	{r7, pc}
 801859c:	08023470 	.word	0x08023470

080185a0 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 80185a0:	b5b0      	push	{r4, r5, r7, lr}
 80185a2:	b08a      	sub	sp, #40	@ 0x28
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	60f8      	str	r0, [r7, #12]
 80185a8:	60b9      	str	r1, [r7, #8]
 80185aa:	4639      	mov	r1, r7
 80185ac:	e881 000c 	stmia.w	r1, {r2, r3}
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	4618      	mov	r0, r3
 80185b4:	f7fb fcea 	bl	8013f8c <_ZN8CallbackC1Ev>
 80185b8:	4a12      	ldr	r2, [pc, #72]	@ (8018604 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E+0x64>)
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	601a      	str	r2, [r3, #0]
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	2200      	movs	r2, #0
 80185c2:	711a      	strb	r2, [r3, #4]
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	3308      	adds	r3, #8
 80185c8:	2100      	movs	r1, #0
 80185ca:	4618      	mov	r0, r3
 80185cc:	f000 fac6 	bl	8018b5c <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1EPFvS0_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 80185d0:	f107 0010 	add.w	r0, r7, #16
 80185d4:	463b      	mov	r3, r7
 80185d6:	cb0c      	ldmia	r3, {r2, r3}
 80185d8:	68b9      	ldr	r1, [r7, #8]
 80185da:	f000 facd 	bl	8018b78 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	f103 0408 	add.w	r4, r3, #8
 80185e4:	f107 0510 	add.w	r5, r7, #16
 80185e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80185ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80185ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80185f0:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	2201      	movs	r2, #1
 80185f8:	711a      	strb	r2, [r3, #4]
	}
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	4618      	mov	r0, r3
 80185fe:	3728      	adds	r7, #40	@ 0x28
 8018600:	46bd      	mov	sp, r7
 8018602:	bdb0      	pop	{r4, r5, r7, pc}
 8018604:	08023694 	.word	0x08023694

08018608 <_ZN19core_utils_CallbackIv21twipr_control_input_tEaSERKS1_>:
class core_utils_Callback: public Callback {
 8018608:	b5b0      	push	{r4, r5, r7, lr}
 801860a:	b082      	sub	sp, #8
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]
 8018610:	6039      	str	r1, [r7, #0]
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	683a      	ldr	r2, [r7, #0]
 8018616:	4611      	mov	r1, r2
 8018618:	4618      	mov	r0, r3
 801861a:	f7fb fcdc 	bl	8013fd6 <_ZN8CallbackaSERKS_>
 801861e:	683b      	ldr	r3, [r7, #0]
 8018620:	791a      	ldrb	r2, [r3, #4]
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	711a      	strb	r2, [r3, #4]
 8018626:	687a      	ldr	r2, [r7, #4]
 8018628:	683b      	ldr	r3, [r7, #0]
 801862a:	f102 0408 	add.w	r4, r2, #8
 801862e:	f103 0508 	add.w	r5, r3, #8
 8018632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018636:	e895 0003 	ldmia.w	r5, {r0, r1}
 801863a:	e884 0003 	stmia.w	r4, {r0, r1}
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	4618      	mov	r0, r3
 8018642:	3708      	adds	r7, #8
 8018644:	46bd      	mov	sp, r7
 8018646:	bdb0      	pop	{r4, r5, r7, pc}

08018648 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE3setEtP11RegisterMap19core_utils_CallbackIvS0_E>:
	void set(uint16_t address, RegisterMap *map,
 8018648:	b580      	push	{r7, lr}
 801864a:	b084      	sub	sp, #16
 801864c:	af00      	add	r7, sp, #0
 801864e:	60f8      	str	r0, [r7, #12]
 8018650:	607a      	str	r2, [r7, #4]
 8018652:	603b      	str	r3, [r7, #0]
 8018654:	460b      	mov	r3, r1
 8018656:	817b      	strh	r3, [r7, #10]
		this->address = address;
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	897a      	ldrh	r2, [r7, #10]
 801865c:	825a      	strh	r2, [r3, #18]
		this->function = function;
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	3314      	adds	r3, #20
 8018662:	6839      	ldr	r1, [r7, #0]
 8018664:	4618      	mov	r0, r3
 8018666:	f7ff ffcf 	bl	8018608 <_ZN19core_utils_CallbackIv21twipr_control_input_tEaSERKS1_>
		map->addEntry(this->address, this);
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	3308      	adds	r3, #8
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	68fa      	ldr	r2, [r7, #12]
 8018674:	8a51      	ldrh	r1, [r2, #18]
 8018676:	68fa      	ldr	r2, [r7, #12]
 8018678:	6878      	ldr	r0, [r7, #4]
 801867a:	4798      	blx	r3
	}
 801867c:	bf00      	nop
 801867e:	3710      	adds	r7, #16
 8018680:	46bd      	mov	sp, r7
 8018682:	bd80      	pop	{r7, pc}

08018684 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>:
	void set(uint16_t address, RegisterMap *map, T *data,
 8018684:	b580      	push	{r7, lr}
 8018686:	b084      	sub	sp, #16
 8018688:	af00      	add	r7, sp, #0
 801868a:	60f8      	str	r0, [r7, #12]
 801868c:	607a      	str	r2, [r7, #4]
 801868e:	603b      	str	r3, [r7, #0]
 8018690:	460b      	mov	r3, r1
 8018692:	817b      	strh	r3, [r7, #10]
		this->address = address;
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	897a      	ldrh	r2, [r7, #10]
 8018698:	811a      	strh	r2, [r3, #8]
		this->data = data;
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	683a      	ldr	r2, [r7, #0]
 801869e:	60da      	str	r2, [r3, #12]
		map->addEntry(address, this);
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	3308      	adds	r3, #8
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	68fa      	ldr	r2, [r7, #12]
 80186aa:	8979      	ldrh	r1, [r7, #10]
 80186ac:	6878      	ldr	r0, [r7, #4]
 80186ae:	4798      	blx	r3
		this->rw = rw;
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	7e3a      	ldrb	r2, [r7, #24]
 80186b4:	729a      	strb	r2, [r3, #10]
	}
 80186b6:	bf00      	nop
 80186b8:	3710      	adds	r7, #16
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}
	...

080186c0 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 80186c0:	b5b0      	push	{r4, r5, r7, lr}
 80186c2:	b08a      	sub	sp, #40	@ 0x28
 80186c4:	af00      	add	r7, sp, #0
 80186c6:	60f8      	str	r0, [r7, #12]
 80186c8:	60b9      	str	r1, [r7, #8]
 80186ca:	4639      	mov	r1, r7
 80186cc:	e881 000c 	stmia.w	r1, {r2, r3}
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	4618      	mov	r0, r3
 80186d4:	f7fb fc5a 	bl	8013f8c <_ZN8CallbackC1Ev>
 80186d8:	4a12      	ldr	r2, [pc, #72]	@ (8018724 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E+0x64>)
 80186da:	68fb      	ldr	r3, [r7, #12]
 80186dc:	601a      	str	r2, [r3, #0]
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	2200      	movs	r2, #0
 80186e2:	711a      	strb	r2, [r3, #4]
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	3308      	adds	r3, #8
 80186e8:	2100      	movs	r1, #0
 80186ea:	4618      	mov	r0, r3
 80186ec:	f000 fa57 	bl	8018b9e <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 80186f0:	f107 0010 	add.w	r0, r7, #16
 80186f4:	463b      	mov	r3, r7
 80186f6:	cb0c      	ldmia	r3, {r2, r3}
 80186f8:	68b9      	ldr	r1, [r7, #8]
 80186fa:	f000 fa5e 	bl	8018bba <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	f103 0408 	add.w	r4, r3, #8
 8018704:	f107 0510 	add.w	r5, r7, #16
 8018708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801870a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801870c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018710:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	2201      	movs	r2, #1
 8018718:	711a      	strb	r2, [r3, #4]
	}
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	4618      	mov	r0, r3
 801871e:	3728      	adds	r7, #40	@ 0x28
 8018720:	46bd      	mov	sp, r7
 8018722:	bdb0      	pop	{r4, r5, r7, pc}
 8018724:	080235f4 	.word	0x080235f4

08018728 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEaSERKS1_>:
class core_utils_Callback: public Callback {
 8018728:	b5b0      	push	{r4, r5, r7, lr}
 801872a:	b082      	sub	sp, #8
 801872c:	af00      	add	r7, sp, #0
 801872e:	6078      	str	r0, [r7, #4]
 8018730:	6039      	str	r1, [r7, #0]
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	683a      	ldr	r2, [r7, #0]
 8018736:	4611      	mov	r1, r2
 8018738:	4618      	mov	r0, r3
 801873a:	f7fb fc4c 	bl	8013fd6 <_ZN8CallbackaSERKS_>
 801873e:	683b      	ldr	r3, [r7, #0]
 8018740:	791a      	ldrb	r2, [r3, #4]
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	711a      	strb	r2, [r3, #4]
 8018746:	687a      	ldr	r2, [r7, #4]
 8018748:	683b      	ldr	r3, [r7, #0]
 801874a:	f102 0408 	add.w	r4, r2, #8
 801874e:	f103 0508 	add.w	r5, r3, #8
 8018752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018756:	e895 0003 	ldmia.w	r5, {r0, r1}
 801875a:	e884 0003 	stmia.w	r4, {r0, r1}
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	4618      	mov	r0, r3
 8018762:	3708      	adds	r7, #8
 8018764:	46bd      	mov	sp, r7
 8018766:	bdb0      	pop	{r4, r5, r7, pc}

08018768 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>:
	void set(uint16_t address, RegisterMap *map,
 8018768:	b580      	push	{r7, lr}
 801876a:	b084      	sub	sp, #16
 801876c:	af00      	add	r7, sp, #0
 801876e:	60f8      	str	r0, [r7, #12]
 8018770:	607a      	str	r2, [r7, #4]
 8018772:	603b      	str	r3, [r7, #0]
 8018774:	460b      	mov	r3, r1
 8018776:	817b      	strh	r3, [r7, #10]
		this->address = address;
 8018778:	68fb      	ldr	r3, [r7, #12]
 801877a:	897a      	ldrh	r2, [r7, #10]
 801877c:	811a      	strh	r2, [r3, #8]
		this->function = function;
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	330c      	adds	r3, #12
 8018782:	6839      	ldr	r1, [r7, #0]
 8018784:	4618      	mov	r0, r3
 8018786:	f7ff ffcf 	bl	8018728 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEaSERKS1_>
		map->addEntry(this->address, this);
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	3308      	adds	r3, #8
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	68fa      	ldr	r2, [r7, #12]
 8018794:	8911      	ldrh	r1, [r2, #8]
 8018796:	68fa      	ldr	r2, [r7, #12]
 8018798:	6878      	ldr	r0, [r7, #4]
 801879a:	4798      	blx	r3
	}
 801879c:	bf00      	nop
 801879e:	3710      	adds	r7, #16
 80187a0:	46bd      	mov	sp, r7
 80187a2:	bd80      	pop	{r7, pc}

080187a4 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 80187a4:	b5b0      	push	{r4, r5, r7, lr}
 80187a6:	b08a      	sub	sp, #40	@ 0x28
 80187a8:	af00      	add	r7, sp, #0
 80187aa:	60f8      	str	r0, [r7, #12]
 80187ac:	60b9      	str	r1, [r7, #8]
 80187ae:	4639      	mov	r1, r7
 80187b0:	e881 000c 	stmia.w	r1, {r2, r3}
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	4618      	mov	r0, r3
 80187b8:	f7fb fbe8 	bl	8013f8c <_ZN8CallbackC1Ev>
 80187bc:	4a12      	ldr	r2, [pc, #72]	@ (8018808 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E+0x64>)
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	601a      	str	r2, [r3, #0]
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	2200      	movs	r2, #0
 80187c6:	711a      	strb	r2, [r3, #4]
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	3308      	adds	r3, #8
 80187cc:	2100      	movs	r1, #0
 80187ce:	4618      	mov	r0, r3
 80187d0:	f000 fa06 	bl	8018be0 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1EPFhS0_E>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 80187d4:	f107 0010 	add.w	r0, r7, #16
 80187d8:	463b      	mov	r3, r7
 80187da:	cb0c      	ldmia	r3, {r2, r3}
 80187dc:	68b9      	ldr	r1, [r7, #8]
 80187de:	f000 fa0d 	bl	8018bfc <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	f103 0408 	add.w	r4, r3, #8
 80187e8:	f107 0510 	add.w	r5, r7, #16
 80187ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80187ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80187f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80187f4:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	2201      	movs	r2, #1
 80187fc:	711a      	strb	r2, [r3, #4]
	}
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	4618      	mov	r0, r3
 8018802:	3728      	adds	r7, #40	@ 0x28
 8018804:	46bd      	mov	sp, r7
 8018806:	bdb0      	pop	{r4, r5, r7, pc}
 8018808:	080235b4 	.word	0x080235b4

0801880c <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEaSERKS1_>:
class core_utils_Callback: public Callback {
 801880c:	b5b0      	push	{r4, r5, r7, lr}
 801880e:	b082      	sub	sp, #8
 8018810:	af00      	add	r7, sp, #0
 8018812:	6078      	str	r0, [r7, #4]
 8018814:	6039      	str	r1, [r7, #0]
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	683a      	ldr	r2, [r7, #0]
 801881a:	4611      	mov	r1, r2
 801881c:	4618      	mov	r0, r3
 801881e:	f7fb fbda 	bl	8013fd6 <_ZN8CallbackaSERKS_>
 8018822:	683b      	ldr	r3, [r7, #0]
 8018824:	791a      	ldrb	r2, [r3, #4]
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	711a      	strb	r2, [r3, #4]
 801882a:	687a      	ldr	r2, [r7, #4]
 801882c:	683b      	ldr	r3, [r7, #0]
 801882e:	f102 0408 	add.w	r4, r2, #8
 8018832:	f103 0508 	add.w	r5, r3, #8
 8018836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801883a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801883e:	e884 0003 	stmia.w	r4, {r0, r1}
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	4618      	mov	r0, r3
 8018846:	3708      	adds	r7, #8
 8018848:	46bd      	mov	sp, r7
 801884a:	bdb0      	pop	{r4, r5, r7, pc}

0801884c <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>:
	void set(uint16_t address, RegisterMap *map,
 801884c:	b580      	push	{r7, lr}
 801884e:	b084      	sub	sp, #16
 8018850:	af00      	add	r7, sp, #0
 8018852:	60f8      	str	r0, [r7, #12]
 8018854:	607a      	str	r2, [r7, #4]
 8018856:	603b      	str	r3, [r7, #0]
 8018858:	460b      	mov	r3, r1
 801885a:	817b      	strh	r3, [r7, #10]
		this->address = address;
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	897a      	ldrh	r2, [r7, #10]
 8018860:	81da      	strh	r2, [r3, #14]
		this->function = function;
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	3310      	adds	r3, #16
 8018866:	6839      	ldr	r1, [r7, #0]
 8018868:	4618      	mov	r0, r3
 801886a:	f7ff ffcf 	bl	801880c <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEaSERKS1_>
		map->addEntry(this->address, this);
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	3308      	adds	r3, #8
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	68fa      	ldr	r2, [r7, #12]
 8018878:	89d1      	ldrh	r1, [r2, #14]
 801887a:	68fa      	ldr	r2, [r7, #12]
 801887c:	6878      	ldr	r0, [r7, #4]
 801887e:	4798      	blx	r3
	}
 8018880:	bf00      	nop
 8018882:	3710      	adds	r7, #16
 8018884:	46bd      	mov	sp, r7
 8018886:	bd80      	pop	{r7, pc}

08018888 <_ZN19core_utils_CallbackIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE>:
	core_utils_Callback(T *object, R (T::*member)(void)) {
 8018888:	b5b0      	push	{r4, r5, r7, lr}
 801888a:	b08a      	sub	sp, #40	@ 0x28
 801888c:	af00      	add	r7, sp, #0
 801888e:	60f8      	str	r0, [r7, #12]
 8018890:	60b9      	str	r1, [r7, #8]
 8018892:	4639      	mov	r1, r7
 8018894:	e881 000c 	stmia.w	r1, {r2, r3}
 8018898:	68fb      	ldr	r3, [r7, #12]
 801889a:	4618      	mov	r0, r3
 801889c:	f7fb fb76 	bl	8013f8c <_ZN8CallbackC1Ev>
 80188a0:	4a12      	ldr	r2, [pc, #72]	@ (80188ec <_ZN19core_utils_CallbackIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE+0x64>)
 80188a2:	68fb      	ldr	r3, [r7, #12]
 80188a4:	601a      	str	r2, [r3, #0]
 80188a6:	68fb      	ldr	r3, [r7, #12]
 80188a8:	2200      	movs	r2, #0
 80188aa:	711a      	strb	r2, [r3, #4]
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	3308      	adds	r3, #8
 80188b0:	2100      	movs	r1, #0
 80188b2:	4618      	mov	r0, r3
 80188b4:	f7fb fd73 	bl	801439e <_ZN26core_utils_FunctionPointerIvvEC1EPFvvE>
		_fp = core_utils_FunctionPointer<R,void>(object, member);
 80188b8:	f107 0010 	add.w	r0, r7, #16
 80188bc:	463b      	mov	r3, r7
 80188be:	cb0c      	ldmia	r3, {r2, r3}
 80188c0:	68b9      	ldr	r1, [r7, #8]
 80188c2:	f000 f9ae 	bl	8018c22 <_ZN26core_utils_FunctionPointerIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE>
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	f103 0408 	add.w	r4, r3, #8
 80188cc:	f107 0510 	add.w	r5, r7, #16
 80188d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80188d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80188d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80188d8:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 80188dc:	68fb      	ldr	r3, [r7, #12]
 80188de:	2201      	movs	r2, #1
 80188e0:	711a      	strb	r2, [r3, #4]
	}
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	4618      	mov	r0, r3
 80188e6:	3728      	adds	r7, #40	@ 0x28
 80188e8:	46bd      	mov	sp, r7
 80188ea:	bdb0      	pop	{r4, r5, r7, pc}
 80188ec:	080233c4 	.word	0x080233c4

080188f0 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>:
	void set(uint16_t address, RegisterMap *map, T *data,
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b084      	sub	sp, #16
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	60f8      	str	r0, [r7, #12]
 80188f8:	607a      	str	r2, [r7, #4]
 80188fa:	603b      	str	r3, [r7, #0]
 80188fc:	460b      	mov	r3, r1
 80188fe:	817b      	strh	r3, [r7, #10]
		this->address = address;
 8018900:	68fb      	ldr	r3, [r7, #12]
 8018902:	897a      	ldrh	r2, [r7, #10]
 8018904:	875a      	strh	r2, [r3, #58]	@ 0x3a
		this->data = data;
 8018906:	68fb      	ldr	r3, [r7, #12]
 8018908:	683a      	ldr	r2, [r7, #0]
 801890a:	641a      	str	r2, [r3, #64]	@ 0x40
		map->addEntry(address, this);
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	3308      	adds	r3, #8
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	68fa      	ldr	r2, [r7, #12]
 8018916:	8979      	ldrh	r1, [r7, #10]
 8018918:	6878      	ldr	r0, [r7, #4]
 801891a:	4798      	blx	r3
		this->rw = rw;
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	7e3a      	ldrb	r2, [r7, #24]
 8018920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
	}
 8018924:	bf00      	nop
 8018926:	3710      	adds	r7, #16
 8018928:	46bd      	mov	sp, r7
 801892a:	bd80      	pop	{r7, pc}

0801892c <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>:
	core_utils_Callback(T *object, R (T::*member)(A)) {
 801892c:	b5b0      	push	{r4, r5, r7, lr}
 801892e:	b08a      	sub	sp, #40	@ 0x28
 8018930:	af00      	add	r7, sp, #0
 8018932:	60f8      	str	r0, [r7, #12]
 8018934:	60b9      	str	r1, [r7, #8]
 8018936:	4639      	mov	r1, r7
 8018938:	e881 000c 	stmia.w	r1, {r2, r3}
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	4618      	mov	r0, r3
 8018940:	f7fb fb24 	bl	8013f8c <_ZN8CallbackC1Ev>
 8018944:	4a12      	ldr	r2, [pc, #72]	@ (8018990 <_ZN19core_utils_CallbackIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE+0x64>)
 8018946:	68fb      	ldr	r3, [r7, #12]
 8018948:	601a      	str	r2, [r3, #0]
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	2200      	movs	r2, #0
 801894e:	711a      	strb	r2, [r3, #4]
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	3308      	adds	r3, #8
 8018954:	2100      	movs	r1, #0
 8018956:	4618      	mov	r0, r3
 8018958:	f000 f976 	bl	8018c48 <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>
		_fp = core_utils_FunctionPointer<R,A>(object, member);
 801895c:	f107 0010 	add.w	r0, r7, #16
 8018960:	463b      	mov	r3, r7
 8018962:	cb0c      	ldmia	r3, {r2, r3}
 8018964:	68b9      	ldr	r1, [r7, #8]
 8018966:	f000 f97d 	bl	8018c64 <_ZN26core_utils_FunctionPointerIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>
 801896a:	68fb      	ldr	r3, [r7, #12]
 801896c:	f103 0408 	add.w	r4, r3, #8
 8018970:	f107 0510 	add.w	r5, r7, #16
 8018974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018978:	e895 0003 	ldmia.w	r5, {r0, r1}
 801897c:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	2201      	movs	r2, #1
 8018984:	711a      	strb	r2, [r3, #4]
	}
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	4618      	mov	r0, r3
 801898a:	3728      	adds	r7, #40	@ 0x28
 801898c:	46bd      	mov	sp, r7
 801898e:	bdb0      	pop	{r4, r5, r7, pc}
 8018990:	08023574 	.word	0x08023574

08018994 <_ZN19core_utils_CallbackIhA8_fEaSERKS1_>:
class core_utils_Callback: public Callback {
 8018994:	b5b0      	push	{r4, r5, r7, lr}
 8018996:	b082      	sub	sp, #8
 8018998:	af00      	add	r7, sp, #0
 801899a:	6078      	str	r0, [r7, #4]
 801899c:	6039      	str	r1, [r7, #0]
 801899e:	687b      	ldr	r3, [r7, #4]
 80189a0:	683a      	ldr	r2, [r7, #0]
 80189a2:	4611      	mov	r1, r2
 80189a4:	4618      	mov	r0, r3
 80189a6:	f7fb fb16 	bl	8013fd6 <_ZN8CallbackaSERKS_>
 80189aa:	683b      	ldr	r3, [r7, #0]
 80189ac:	791a      	ldrb	r2, [r3, #4]
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	711a      	strb	r2, [r3, #4]
 80189b2:	687a      	ldr	r2, [r7, #4]
 80189b4:	683b      	ldr	r3, [r7, #0]
 80189b6:	f102 0408 	add.w	r4, r2, #8
 80189ba:	f103 0508 	add.w	r5, r3, #8
 80189be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80189c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80189c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80189c6:	e884 0003 	stmia.w	r4, {r0, r1}
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	4618      	mov	r0, r3
 80189ce:	3708      	adds	r7, #8
 80189d0:	46bd      	mov	sp, r7
 80189d2:	bdb0      	pop	{r4, r5, r7, pc}

080189d4 <_ZN27core_utils_RegisterFunctionIhA8_fE3setEtP11RegisterMap19core_utils_CallbackIhS0_E>:
	void set(uint16_t address, RegisterMap *map,
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b084      	sub	sp, #16
 80189d8:	af00      	add	r7, sp, #0
 80189da:	60f8      	str	r0, [r7, #12]
 80189dc:	607a      	str	r2, [r7, #4]
 80189de:	603b      	str	r3, [r7, #0]
 80189e0:	460b      	mov	r3, r1
 80189e2:	817b      	strh	r3, [r7, #10]
		this->address = address;
 80189e4:	68fb      	ldr	r3, [r7, #12]
 80189e6:	897a      	ldrh	r2, [r7, #10]
 80189e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
		this->function = function;
 80189ea:	68fb      	ldr	r3, [r7, #12]
 80189ec:	332c      	adds	r3, #44	@ 0x2c
 80189ee:	6839      	ldr	r1, [r7, #0]
 80189f0:	4618      	mov	r0, r3
 80189f2:	f7ff ffcf 	bl	8018994 <_ZN19core_utils_CallbackIhA8_fEaSERKS1_>
		map->addEntry(this->address, this);
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	3308      	adds	r3, #8
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	68fa      	ldr	r2, [r7, #12]
 8018a00:	8d51      	ldrh	r1, [r2, #42]	@ 0x2a
 8018a02:	68fa      	ldr	r2, [r7, #12]
 8018a04:	6878      	ldr	r0, [r7, #4]
 8018a06:	4798      	blx	r3
	}
 8018a08:	bf00      	nop
 8018a0a:	3710      	adds	r7, #16
 8018a0c:	46bd      	mov	sp, r7
 8018a0e:	bd80      	pop	{r7, pc}

08018a10 <_ZN19core_utils_CallbackIvmE4callEm>:
	R call(A argument){
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b082      	sub	sp, #8
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
 8018a18:	6039      	str	r1, [r7, #0]
		return this->_fp(argument);
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	3308      	adds	r3, #8
 8018a1e:	6839      	ldr	r1, [r7, #0]
 8018a20:	4618      	mov	r0, r3
 8018a22:	f000 f932 	bl	8018c8a <_ZN26core_utils_FunctionPointerIvmEclEm>
 8018a26:	bf00      	nop
	}
 8018a28:	3708      	adds	r7, #8
 8018a2a:	46bd      	mov	sp, r7
 8018a2c:	bd80      	pop	{r7, pc}
	...

08018a30 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1Ev>:
	core_utils_Callback() {
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b082      	sub	sp, #8
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	6078      	str	r0, [r7, #4]
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	f7fb faa6 	bl	8013f8c <_ZN8CallbackC1Ev>
 8018a40:	4a09      	ldr	r2, [pc, #36]	@ (8018a68 <_ZN19core_utils_CallbackIv21twipr_control_input_tEC1Ev+0x38>)
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	601a      	str	r2, [r3, #0]
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	2200      	movs	r2, #0
 8018a4a:	711a      	strb	r2, [r3, #4]
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	3308      	adds	r3, #8
 8018a50:	2100      	movs	r1, #0
 8018a52:	4618      	mov	r0, r3
 8018a54:	f000 f882 	bl	8018b5c <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1EPFvS0_E>
		this->registered = 0;
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	711a      	strb	r2, [r3, #4]
	}
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	4618      	mov	r0, r3
 8018a62:	3708      	adds	r7, #8
 8018a64:	46bd      	mov	sp, r7
 8018a66:	bd80      	pop	{r7, pc}
 8018a68:	08023694 	.word	0x08023694

08018a6c <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev>:
	core_utils_Callback() {
 8018a6c:	b580      	push	{r7, lr}
 8018a6e:	b082      	sub	sp, #8
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	6078      	str	r0, [r7, #4]
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	4618      	mov	r0, r3
 8018a78:	f7fb fa88 	bl	8013f8c <_ZN8CallbackC1Ev>
 8018a7c:	4a09      	ldr	r2, [pc, #36]	@ (8018aa4 <_ZN19core_utils_CallbackIh20twipr_control_mode_tEC1Ev+0x38>)
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	601a      	str	r2, [r3, #0]
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	2200      	movs	r2, #0
 8018a86:	711a      	strb	r2, [r3, #4]
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	3308      	adds	r3, #8
 8018a8c:	2100      	movs	r1, #0
 8018a8e:	4618      	mov	r0, r3
 8018a90:	f000 f885 	bl	8018b9e <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>
		this->registered = 0;
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	2200      	movs	r2, #0
 8018a98:	711a      	strb	r2, [r3, #4]
	}
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	3708      	adds	r7, #8
 8018aa0:	46bd      	mov	sp, r7
 8018aa2:	bd80      	pop	{r7, pc}
 8018aa4:	080235f4 	.word	0x080235f4

08018aa8 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1Ev>:
	core_utils_Callback() {
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b082      	sub	sp, #8
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	f7fb fa6a 	bl	8013f8c <_ZN8CallbackC1Ev>
 8018ab8:	4a09      	ldr	r2, [pc, #36]	@ (8018ae0 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tEC1Ev+0x38>)
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	601a      	str	r2, [r3, #0]
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	2200      	movs	r2, #0
 8018ac2:	711a      	strb	r2, [r3, #4]
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	3308      	adds	r3, #8
 8018ac8:	2100      	movs	r1, #0
 8018aca:	4618      	mov	r0, r3
 8018acc:	f000 f888 	bl	8018be0 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1EPFhS0_E>
		this->registered = 0;
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	2200      	movs	r2, #0
 8018ad4:	711a      	strb	r2, [r3, #4]
	}
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	4618      	mov	r0, r3
 8018ada:	3708      	adds	r7, #8
 8018adc:	46bd      	mov	sp, r7
 8018ade:	bd80      	pop	{r7, pc}
 8018ae0:	080235b4 	.word	0x080235b4

08018ae4 <_ZN19core_utils_CallbackIhA8_fEC1Ev>:
	core_utils_Callback() {
 8018ae4:	b580      	push	{r7, lr}
 8018ae6:	b082      	sub	sp, #8
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	6078      	str	r0, [r7, #4]
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	4618      	mov	r0, r3
 8018af0:	f7fb fa4c 	bl	8013f8c <_ZN8CallbackC1Ev>
 8018af4:	4a09      	ldr	r2, [pc, #36]	@ (8018b1c <_ZN19core_utils_CallbackIhA8_fEC1Ev+0x38>)
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	601a      	str	r2, [r3, #0]
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	2200      	movs	r2, #0
 8018afe:	711a      	strb	r2, [r3, #4]
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	3308      	adds	r3, #8
 8018b04:	2100      	movs	r1, #0
 8018b06:	4618      	mov	r0, r3
 8018b08:	f000 f89e 	bl	8018c48 <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>
		this->registered = 0;
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	2200      	movs	r2, #0
 8018b10:	711a      	strb	r2, [r3, #4]
	}
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	4618      	mov	r0, r3
 8018b16:	3708      	adds	r7, #8
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	bd80      	pop	{r7, pc}
 8018b1c:	08023574 	.word	0x08023574

08018b20 <_ZN19core_utils_CallbackIvfEC1Ev>:
	core_utils_Callback() {
 8018b20:	b580      	push	{r7, lr}
 8018b22:	b082      	sub	sp, #8
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	4618      	mov	r0, r3
 8018b2c:	f7fb fa2e 	bl	8013f8c <_ZN8CallbackC1Ev>
 8018b30:	4a09      	ldr	r2, [pc, #36]	@ (8018b58 <_ZN19core_utils_CallbackIvfEC1Ev+0x38>)
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	601a      	str	r2, [r3, #0]
 8018b36:	687b      	ldr	r3, [r7, #4]
 8018b38:	2200      	movs	r2, #0
 8018b3a:	711a      	strb	r2, [r3, #4]
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	3308      	adds	r3, #8
 8018b40:	2100      	movs	r1, #0
 8018b42:	4618      	mov	r0, r3
 8018b44:	f000 f8ae 	bl	8018ca4 <_ZN26core_utils_FunctionPointerIvfEC1EPFvfE>
		this->registered = 0;
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	711a      	strb	r2, [r3, #4]
	}
 8018b4e:	687b      	ldr	r3, [r7, #4]
 8018b50:	4618      	mov	r0, r3
 8018b52:	3708      	adds	r7, #8
 8018b54:	46bd      	mov	sp, r7
 8018b56:	bd80      	pop	{r7, pc}
 8018b58:	08023504 	.word	0x08023504

08018b5c <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1EPFvS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8018b5c:	b580      	push	{r7, lr}
 8018b5e:	b082      	sub	sp, #8
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
 8018b64:	6039      	str	r1, [r7, #0]
        attach(function);
 8018b66:	6839      	ldr	r1, [r7, #0]
 8018b68:	6878      	ldr	r0, [r7, #4]
 8018b6a:	f000 f8a9 	bl	8018cc0 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachEPFvS0_E>
    }
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	4618      	mov	r0, r3
 8018b72:	3708      	adds	r7, #8
 8018b74:	46bd      	mov	sp, r7
 8018b76:	bd80      	pop	{r7, pc}

08018b78 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEC1I20TWIPR_ControlManagerEEPT_MS4_FvS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8018b78:	b580      	push	{r7, lr}
 8018b7a:	b084      	sub	sp, #16
 8018b7c:	af00      	add	r7, sp, #0
 8018b7e:	60f8      	str	r0, [r7, #12]
 8018b80:	60b9      	str	r1, [r7, #8]
 8018b82:	4639      	mov	r1, r7
 8018b84:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8018b88:	463b      	mov	r3, r7
 8018b8a:	cb0c      	ldmia	r3, {r2, r3}
 8018b8c:	68b9      	ldr	r1, [r7, #8]
 8018b8e:	68f8      	ldr	r0, [r7, #12]
 8018b90:	f000 f8a8 	bl	8018ce4 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>
    }
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	4618      	mov	r0, r3
 8018b98:	3710      	adds	r7, #16
 8018b9a:	46bd      	mov	sp, r7
 8018b9c:	bd80      	pop	{r7, pc}

08018b9e <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1EPFhS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8018b9e:	b580      	push	{r7, lr}
 8018ba0:	b082      	sub	sp, #8
 8018ba2:	af00      	add	r7, sp, #0
 8018ba4:	6078      	str	r0, [r7, #4]
 8018ba6:	6039      	str	r1, [r7, #0]
        attach(function);
 8018ba8:	6839      	ldr	r1, [r7, #0]
 8018baa:	6878      	ldr	r0, [r7, #4]
 8018bac:	f000 f8b8 	bl	8018d20 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachEPFhS0_E>
    }
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	3708      	adds	r7, #8
 8018bb6:	46bd      	mov	sp, r7
 8018bb8:	bd80      	pop	{r7, pc}

08018bba <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8018bba:	b580      	push	{r7, lr}
 8018bbc:	b084      	sub	sp, #16
 8018bbe:	af00      	add	r7, sp, #0
 8018bc0:	60f8      	str	r0, [r7, #12]
 8018bc2:	60b9      	str	r1, [r7, #8]
 8018bc4:	4639      	mov	r1, r7
 8018bc6:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8018bca:	463b      	mov	r3, r7
 8018bcc:	cb0c      	ldmia	r3, {r2, r3}
 8018bce:	68b9      	ldr	r1, [r7, #8]
 8018bd0:	68f8      	ldr	r0, [r7, #12]
 8018bd2:	f000 f8b7 	bl	8018d44 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>
    }
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	4618      	mov	r0, r3
 8018bda:	3710      	adds	r7, #16
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	bd80      	pop	{r7, pc}

08018be0 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1EPFhS0_E>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8018be0:	b580      	push	{r7, lr}
 8018be2:	b082      	sub	sp, #8
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	6078      	str	r0, [r7, #4]
 8018be8:	6039      	str	r1, [r7, #0]
        attach(function);
 8018bea:	6839      	ldr	r1, [r7, #0]
 8018bec:	6878      	ldr	r0, [r7, #4]
 8018bee:	f000 f8c7 	bl	8018d80 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachEPFhS0_E>
    }
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	3708      	adds	r7, #8
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}

08018bfc <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEC1I20TWIPR_ControlManagerEEPT_MS4_FhS0_E>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b084      	sub	sp, #16
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	60f8      	str	r0, [r7, #12]
 8018c04:	60b9      	str	r1, [r7, #8]
 8018c06:	4639      	mov	r1, r7
 8018c08:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8018c0c:	463b      	mov	r3, r7
 8018c0e:	cb0c      	ldmia	r3, {r2, r3}
 8018c10:	68b9      	ldr	r1, [r7, #8]
 8018c12:	68f8      	ldr	r0, [r7, #12]
 8018c14:	f000 f8c6 	bl	8018da4 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>
    }
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	4618      	mov	r0, r3
 8018c1c:	3710      	adds	r7, #16
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	bd80      	pop	{r7, pc}

08018c22 <_ZN26core_utils_FunctionPointerIvvEC1I20TWIPR_ControlManagerEEPT_MS3_FvvE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(void)) {
 8018c22:	b580      	push	{r7, lr}
 8018c24:	b084      	sub	sp, #16
 8018c26:	af00      	add	r7, sp, #0
 8018c28:	60f8      	str	r0, [r7, #12]
 8018c2a:	60b9      	str	r1, [r7, #8]
 8018c2c:	4639      	mov	r1, r7
 8018c2e:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8018c32:	463b      	mov	r3, r7
 8018c34:	cb0c      	ldmia	r3, {r2, r3}
 8018c36:	68b9      	ldr	r1, [r7, #8]
 8018c38:	68f8      	ldr	r0, [r7, #12]
 8018c3a:	f000 f8d1 	bl	8018de0 <_ZN26core_utils_FunctionPointerIvvE6attachI20TWIPR_ControlManagerEEvPT_MS3_FvvE>
    }
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	4618      	mov	r0, r3
 8018c42:	3710      	adds	r7, #16
 8018c44:	46bd      	mov	sp, r7
 8018c46:	bd80      	pop	{r7, pc}

08018c48 <_ZN26core_utils_FunctionPointerIhA8_fEC1EPFhPfE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b082      	sub	sp, #8
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
 8018c50:	6039      	str	r1, [r7, #0]
        attach(function);
 8018c52:	6839      	ldr	r1, [r7, #0]
 8018c54:	6878      	ldr	r0, [r7, #4]
 8018c56:	f000 f8e1 	bl	8018e1c <_ZN26core_utils_FunctionPointerIhA8_fE6attachEPFhPfE>
    }
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	4618      	mov	r0, r3
 8018c5e:	3708      	adds	r7, #8
 8018c60:	46bd      	mov	sp, r7
 8018c62:	bd80      	pop	{r7, pc}

08018c64 <_ZN26core_utils_FunctionPointerIhA8_fEC1I20TWIPR_ControlManagerEEPT_MS4_FhPfE>:
    core_utils_FunctionPointer(T *object, R (T::*member)(A1)) {
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b084      	sub	sp, #16
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	60f8      	str	r0, [r7, #12]
 8018c6c:	60b9      	str	r1, [r7, #8]
 8018c6e:	4639      	mov	r1, r7
 8018c70:	e881 000c 	stmia.w	r1, {r2, r3}
        attach(object, member);
 8018c74:	463b      	mov	r3, r7
 8018c76:	cb0c      	ldmia	r3, {r2, r3}
 8018c78:	68b9      	ldr	r1, [r7, #8]
 8018c7a:	68f8      	ldr	r0, [r7, #12]
 8018c7c:	f000 f8e0 	bl	8018e40 <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE>
    }
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	4618      	mov	r0, r3
 8018c84:	3710      	adds	r7, #16
 8018c86:	46bd      	mov	sp, r7
 8018c88:	bd80      	pop	{r7, pc}

08018c8a <_ZN26core_utils_FunctionPointerIvmEclEm>:
    R operator ()(A1 a) {
 8018c8a:	b580      	push	{r7, lr}
 8018c8c:	b082      	sub	sp, #8
 8018c8e:	af00      	add	r7, sp, #0
 8018c90:	6078      	str	r0, [r7, #4]
 8018c92:	6039      	str	r1, [r7, #0]
        return call(a);
 8018c94:	6839      	ldr	r1, [r7, #0]
 8018c96:	6878      	ldr	r0, [r7, #4]
 8018c98:	f000 f8f0 	bl	8018e7c <_ZN26core_utils_FunctionPointerIvmE4callEm>
 8018c9c:	bf00      	nop
    }
 8018c9e:	3708      	adds	r7, #8
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	bd80      	pop	{r7, pc}

08018ca4 <_ZN26core_utils_FunctionPointerIvfEC1EPFvfE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	b082      	sub	sp, #8
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
 8018cac:	6039      	str	r1, [r7, #0]
        attach(function);
 8018cae:	6839      	ldr	r1, [r7, #0]
 8018cb0:	6878      	ldr	r0, [r7, #4]
 8018cb2:	f000 f90a 	bl	8018eca <_ZN26core_utils_FunctionPointerIvfE6attachEPFvfE>
    }
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	4618      	mov	r0, r3
 8018cba:	3708      	adds	r7, #8
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bd80      	pop	{r7, pc}

08018cc0 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachEPFvS0_E>:
    void attach(R (*function)(A1)) {
 8018cc0:	b480      	push	{r7}
 8018cc2:	b083      	sub	sp, #12
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	6078      	str	r0, [r7, #4]
 8018cc8:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	683a      	ldr	r2, [r7, #0]
 8018cce:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	2200      	movs	r2, #0
 8018cd4:	615a      	str	r2, [r3, #20]
    }
 8018cd6:	bf00      	nop
 8018cd8:	370c      	adds	r7, #12
 8018cda:	46bd      	mov	sp, r7
 8018cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce0:	4770      	bx	lr
	...

08018ce4 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 8018ce4:	b480      	push	{r7}
 8018ce6:	b085      	sub	sp, #20
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	60f8      	str	r0, [r7, #12]
 8018cec:	60b9      	str	r1, [r7, #8]
 8018cee:	4639      	mov	r1, r7
 8018cf0:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	68ba      	ldr	r2, [r7, #8]
 8018cf8:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	3304      	adds	r3, #4
 8018cfe:	461a      	mov	r2, r3
 8018d00:	463b      	mov	r3, r7
 8018d02:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018d06:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	4a03      	ldr	r2, [pc, #12]	@ (8018d1c <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FvS0_E+0x38>)
 8018d0e:	615a      	str	r2, [r3, #20]
    }
 8018d10:	bf00      	nop
 8018d12:	3714      	adds	r7, #20
 8018d14:	46bd      	mov	sp, r7
 8018d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1a:	4770      	bx	lr
 8018d1c:	08018eed 	.word	0x08018eed

08018d20 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachEPFhS0_E>:
    void attach(R (*function)(A1)) {
 8018d20:	b480      	push	{r7}
 8018d22:	b083      	sub	sp, #12
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
 8018d28:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	683a      	ldr	r2, [r7, #0]
 8018d2e:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	2200      	movs	r2, #0
 8018d34:	615a      	str	r2, [r3, #20]
    }
 8018d36:	bf00      	nop
 8018d38:	370c      	adds	r7, #12
 8018d3a:	46bd      	mov	sp, r7
 8018d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d40:	4770      	bx	lr
	...

08018d44 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 8018d44:	b480      	push	{r7}
 8018d46:	b085      	sub	sp, #20
 8018d48:	af00      	add	r7, sp, #0
 8018d4a:	60f8      	str	r0, [r7, #12]
 8018d4c:	60b9      	str	r1, [r7, #8]
 8018d4e:	4639      	mov	r1, r7
 8018d50:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	68ba      	ldr	r2, [r7, #8]
 8018d58:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	3304      	adds	r3, #4
 8018d5e:	461a      	mov	r2, r3
 8018d60:	463b      	mov	r3, r7
 8018d62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018d66:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	4a03      	ldr	r2, [pc, #12]	@ (8018d7c <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E+0x38>)
 8018d6e:	615a      	str	r2, [r3, #20]
    }
 8018d70:	bf00      	nop
 8018d72:	3714      	adds	r7, #20
 8018d74:	46bd      	mov	sp, r7
 8018d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d7a:	4770      	bx	lr
 8018d7c:	08018f5f 	.word	0x08018f5f

08018d80 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachEPFhS0_E>:
    void attach(R (*function)(A1)) {
 8018d80:	b480      	push	{r7}
 8018d82:	b083      	sub	sp, #12
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
 8018d88:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	683a      	ldr	r2, [r7, #0]
 8018d8e:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	2200      	movs	r2, #0
 8018d94:	615a      	str	r2, [r3, #20]
    }
 8018d96:	bf00      	nop
 8018d98:	370c      	adds	r7, #12
 8018d9a:	46bd      	mov	sp, r7
 8018d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da0:	4770      	bx	lr
	...

08018da4 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E>:
    void attach(T *object, R (T::*member)(A1)) {
 8018da4:	b480      	push	{r7}
 8018da6:	b085      	sub	sp, #20
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	60f8      	str	r0, [r7, #12]
 8018dac:	60b9      	str	r1, [r7, #8]
 8018dae:	4639      	mov	r1, r7
 8018db0:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	68ba      	ldr	r2, [r7, #8]
 8018db8:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8018dba:	68fb      	ldr	r3, [r7, #12]
 8018dbc:	3304      	adds	r3, #4
 8018dbe:	461a      	mov	r2, r3
 8018dc0:	463b      	mov	r3, r7
 8018dc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018dc6:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	4a03      	ldr	r2, [pc, #12]	@ (8018ddc <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhS0_E+0x38>)
 8018dce:	615a      	str	r2, [r3, #20]
    }
 8018dd0:	bf00      	nop
 8018dd2:	3714      	adds	r7, #20
 8018dd4:	46bd      	mov	sp, r7
 8018dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dda:	4770      	bx	lr
 8018ddc:	08018fb9 	.word	0x08018fb9

08018de0 <_ZN26core_utils_FunctionPointerIvvE6attachI20TWIPR_ControlManagerEEvPT_MS3_FvvE>:
    void attach(T *object, R (T::*member)(void)) {
 8018de0:	b480      	push	{r7}
 8018de2:	b085      	sub	sp, #20
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	60f8      	str	r0, [r7, #12]
 8018de8:	60b9      	str	r1, [r7, #8]
 8018dea:	4639      	mov	r1, r7
 8018dec:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8018df0:	68fb      	ldr	r3, [r7, #12]
 8018df2:	68ba      	ldr	r2, [r7, #8]
 8018df4:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(void)>(_member) = member;
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	3304      	adds	r3, #4
 8018dfa:	461a      	mov	r2, r3
 8018dfc:	463b      	mov	r3, r7
 8018dfe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018e02:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	4a03      	ldr	r2, [pc, #12]	@ (8018e18 <_ZN26core_utils_FunctionPointerIvvE6attachI20TWIPR_ControlManagerEEvPT_MS3_FvvE+0x38>)
 8018e0a:	615a      	str	r2, [r3, #20]
    }
 8018e0c:	bf00      	nop
 8018e0e:	3714      	adds	r7, #20
 8018e10:	46bd      	mov	sp, r7
 8018e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e16:	4770      	bx	lr
 8018e18:	08019015 	.word	0x08019015

08018e1c <_ZN26core_utils_FunctionPointerIhA8_fE6attachEPFhPfE>:
    void attach(R (*function)(A1)) {
 8018e1c:	b480      	push	{r7}
 8018e1e:	b083      	sub	sp, #12
 8018e20:	af00      	add	r7, sp, #0
 8018e22:	6078      	str	r0, [r7, #4]
 8018e24:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	683a      	ldr	r2, [r7, #0]
 8018e2a:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	2200      	movs	r2, #0
 8018e30:	615a      	str	r2, [r3, #20]
    }
 8018e32:	bf00      	nop
 8018e34:	370c      	adds	r7, #12
 8018e36:	46bd      	mov	sp, r7
 8018e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e3c:	4770      	bx	lr
	...

08018e40 <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE>:
    void attach(T *object, R (T::*member)(A1)) {
 8018e40:	b480      	push	{r7}
 8018e42:	b085      	sub	sp, #20
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	60f8      	str	r0, [r7, #12]
 8018e48:	60b9      	str	r1, [r7, #8]
 8018e4a:	4639      	mov	r1, r7
 8018e4c:	e881 000c 	stmia.w	r1, {r2, r3}
        _p.object = static_cast<void*>(object);
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	68ba      	ldr	r2, [r7, #8]
 8018e54:	601a      	str	r2, [r3, #0]
        *reinterpret_cast<R (T::**)(A1)>(_member) = member;
 8018e56:	68fb      	ldr	r3, [r7, #12]
 8018e58:	3304      	adds	r3, #4
 8018e5a:	461a      	mov	r2, r3
 8018e5c:	463b      	mov	r3, r7
 8018e5e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018e62:	e882 0003 	stmia.w	r2, {r0, r1}
        _membercaller = &core_utils_FunctionPointer::membercaller<T>;
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	4a03      	ldr	r2, [pc, #12]	@ (8018e78 <_ZN26core_utils_FunctionPointerIhA8_fE6attachI20TWIPR_ControlManagerEEvPT_MS4_FhPfE+0x38>)
 8018e6a:	615a      	str	r2, [r3, #20]
    }
 8018e6c:	bf00      	nop
 8018e6e:	3714      	adds	r7, #20
 8018e70:	46bd      	mov	sp, r7
 8018e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e76:	4770      	bx	lr
 8018e78:	08019067 	.word	0x08019067

08018e7c <_ZN26core_utils_FunctionPointerIvmE4callEm>:
    R call(A1 a) {
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b082      	sub	sp, #8
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
 8018e84:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	695b      	ldr	r3, [r3, #20]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d108      	bne.n	8018ea0 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x24>
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d004      	beq.n	8018ea0 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x24>
           return _p.function(a);
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	6838      	ldr	r0, [r7, #0]
 8018e9c:	4798      	blx	r3
 8018e9e:	e011      	b.n	8018ec4 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x48>
        } else if (_membercaller && _p.object) {
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	695b      	ldr	r3, [r3, #20]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d00c      	beq.n	8018ec2 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x46>
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d008      	beq.n	8018ec2 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x46>
           return _membercaller(_p.object, _member, a);
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	695b      	ldr	r3, [r3, #20]
 8018eb4:	687a      	ldr	r2, [r7, #4]
 8018eb6:	6810      	ldr	r0, [r2, #0]
 8018eb8:	687a      	ldr	r2, [r7, #4]
 8018eba:	1d11      	adds	r1, r2, #4
 8018ebc:	683a      	ldr	r2, [r7, #0]
 8018ebe:	4798      	blx	r3
 8018ec0:	e000      	b.n	8018ec4 <_ZN26core_utils_FunctionPointerIvmE4callEm+0x48>
        return (R)0;
 8018ec2:	bf00      	nop
    }
 8018ec4:	3708      	adds	r7, #8
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	bd80      	pop	{r7, pc}

08018eca <_ZN26core_utils_FunctionPointerIvfE6attachEPFvfE>:
    void attach(R (*function)(A1)) {
 8018eca:	b480      	push	{r7}
 8018ecc:	b083      	sub	sp, #12
 8018ece:	af00      	add	r7, sp, #0
 8018ed0:	6078      	str	r0, [r7, #4]
 8018ed2:	6039      	str	r1, [r7, #0]
        _p.function = function;
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	683a      	ldr	r2, [r7, #0]
 8018ed8:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	2200      	movs	r2, #0
 8018ede:	615a      	str	r2, [r3, #20]
    }
 8018ee0:	bf00      	nop
 8018ee2:	370c      	adds	r7, #12
 8018ee4:	46bd      	mov	sp, r7
 8018ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eea:	4770      	bx	lr

08018eec <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8018eec:	b580      	push	{r7, lr}
 8018eee:	b086      	sub	sp, #24
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	60f8      	str	r0, [r7, #12]
 8018ef4:	60b9      	str	r1, [r7, #8]
 8018ef6:	eeb0 7a40 	vmov.f32	s14, s0
 8018efa:	eef0 7a60 	vmov.f32	s15, s1
 8018efe:	ed87 7a00 	vstr	s14, [r7]
 8018f02:	edc7 7a01 	vstr	s15, [r7, #4]
        T* o = static_cast<T*>(object);
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8018f0a:	68bb      	ldr	r3, [r7, #8]
 8018f0c:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8018f0e:	693b      	ldr	r3, [r7, #16]
 8018f10:	685b      	ldr	r3, [r3, #4]
 8018f12:	105b      	asrs	r3, r3, #1
 8018f14:	461a      	mov	r2, r3
 8018f16:	697b      	ldr	r3, [r7, #20]
 8018f18:	1899      	adds	r1, r3, r2
 8018f1a:	693b      	ldr	r3, [r7, #16]
 8018f1c:	685b      	ldr	r3, [r3, #4]
 8018f1e:	f003 0301 	and.w	r3, r3, #1
 8018f22:	2b00      	cmp	r3, #0
 8018f24:	d00b      	beq.n	8018f3e <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x52>
 8018f26:	693b      	ldr	r3, [r7, #16]
 8018f28:	685b      	ldr	r3, [r3, #4]
 8018f2a:	105b      	asrs	r3, r3, #1
 8018f2c:	461a      	mov	r2, r3
 8018f2e:	697b      	ldr	r3, [r7, #20]
 8018f30:	4413      	add	r3, r2
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	693a      	ldr	r2, [r7, #16]
 8018f36:	6812      	ldr	r2, [r2, #0]
 8018f38:	4413      	add	r3, r2
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	e001      	b.n	8018f42 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE12membercallerI20TWIPR_ControlManagerEEvPvPjS0_+0x56>
 8018f3e:	693b      	ldr	r3, [r7, #16]
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	ed97 7a00 	vldr	s14, [r7]
 8018f46:	edd7 7a01 	vldr	s15, [r7, #4]
 8018f4a:	eeb0 0a47 	vmov.f32	s0, s14
 8018f4e:	eef0 0a67 	vmov.f32	s1, s15
 8018f52:	4608      	mov	r0, r1
 8018f54:	4798      	blx	r3
 8018f56:	bf00      	nop
    }
 8018f58:	3718      	adds	r7, #24
 8018f5a:	46bd      	mov	sp, r7
 8018f5c:	bd80      	pop	{r7, pc}

08018f5e <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8018f5e:	b580      	push	{r7, lr}
 8018f60:	b086      	sub	sp, #24
 8018f62:	af00      	add	r7, sp, #0
 8018f64:	60f8      	str	r0, [r7, #12]
 8018f66:	60b9      	str	r1, [r7, #8]
 8018f68:	4613      	mov	r3, r2
 8018f6a:	71fb      	strb	r3, [r7, #7]
        T* o = static_cast<T*>(object);
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8018f70:	68bb      	ldr	r3, [r7, #8]
 8018f72:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8018f74:	693b      	ldr	r3, [r7, #16]
 8018f76:	685b      	ldr	r3, [r3, #4]
 8018f78:	105b      	asrs	r3, r3, #1
 8018f7a:	461a      	mov	r2, r3
 8018f7c:	697b      	ldr	r3, [r7, #20]
 8018f7e:	1898      	adds	r0, r3, r2
 8018f80:	693b      	ldr	r3, [r7, #16]
 8018f82:	685b      	ldr	r3, [r3, #4]
 8018f84:	f003 0301 	and.w	r3, r3, #1
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d00b      	beq.n	8018fa4 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x46>
 8018f8c:	693b      	ldr	r3, [r7, #16]
 8018f8e:	685b      	ldr	r3, [r3, #4]
 8018f90:	105b      	asrs	r3, r3, #1
 8018f92:	461a      	mov	r2, r3
 8018f94:	697b      	ldr	r3, [r7, #20]
 8018f96:	4413      	add	r3, r2
 8018f98:	681b      	ldr	r3, [r3, #0]
 8018f9a:	693a      	ldr	r2, [r7, #16]
 8018f9c:	6812      	ldr	r2, [r2, #0]
 8018f9e:	4413      	add	r3, r2
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	e001      	b.n	8018fa8 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x4a>
 8018fa4:	693b      	ldr	r3, [r7, #16]
 8018fa6:	681b      	ldr	r3, [r3, #0]
 8018fa8:	79fa      	ldrb	r2, [r7, #7]
 8018faa:	4611      	mov	r1, r2
 8018fac:	4798      	blx	r3
 8018fae:	4603      	mov	r3, r0
    }
 8018fb0:	4618      	mov	r0, r3
 8018fb2:	3718      	adds	r7, #24
 8018fb4:	46bd      	mov	sp, r7
 8018fb6:	bd80      	pop	{r7, pc}

08018fb8 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8018fb8:	b580      	push	{r7, lr}
 8018fba:	b086      	sub	sp, #24
 8018fbc:	af00      	add	r7, sp, #0
 8018fbe:	60f8      	str	r0, [r7, #12]
 8018fc0:	60b9      	str	r1, [r7, #8]
 8018fc2:	4639      	mov	r1, r7
 8018fc4:	e881 000c 	stmia.w	r1, {r2, r3}
        T* o = static_cast<T*>(object);
 8018fc8:	68fb      	ldr	r3, [r7, #12]
 8018fca:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8018fcc:	68bb      	ldr	r3, [r7, #8]
 8018fce:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 8018fd0:	693b      	ldr	r3, [r7, #16]
 8018fd2:	685b      	ldr	r3, [r3, #4]
 8018fd4:	105b      	asrs	r3, r3, #1
 8018fd6:	461a      	mov	r2, r3
 8018fd8:	697b      	ldr	r3, [r7, #20]
 8018fda:	1898      	adds	r0, r3, r2
 8018fdc:	693b      	ldr	r3, [r7, #16]
 8018fde:	685b      	ldr	r3, [r3, #4]
 8018fe0:	f003 0301 	and.w	r3, r3, #1
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d00b      	beq.n	8019000 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x48>
 8018fe8:	693b      	ldr	r3, [r7, #16]
 8018fea:	685b      	ldr	r3, [r3, #4]
 8018fec:	105b      	asrs	r3, r3, #1
 8018fee:	461a      	mov	r2, r3
 8018ff0:	697b      	ldr	r3, [r7, #20]
 8018ff2:	4413      	add	r3, r2
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	693a      	ldr	r2, [r7, #16]
 8018ff8:	6812      	ldr	r2, [r2, #0]
 8018ffa:	4413      	add	r3, r2
 8018ffc:	681b      	ldr	r3, [r3, #0]
 8018ffe:	e001      	b.n	8019004 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE12membercallerI20TWIPR_ControlManagerEEhPvPjS0_+0x4c>
 8019000:	693b      	ldr	r3, [r7, #16]
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	463a      	mov	r2, r7
 8019006:	ca06      	ldmia	r2, {r1, r2}
 8019008:	4798      	blx	r3
 801900a:	4603      	mov	r3, r0
    }
 801900c:	4618      	mov	r0, r3
 801900e:	3718      	adds	r7, #24
 8019010:	46bd      	mov	sp, r7
 8019012:	bd80      	pop	{r7, pc}

08019014 <_ZN26core_utils_FunctionPointerIvvE12membercallerI20TWIPR_ControlManagerEEvPvPj>:
    static R membercaller(void *object, uintptr_t *member) {
 8019014:	b580      	push	{r7, lr}
 8019016:	b084      	sub	sp, #16
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
 801901c:	6039      	str	r1, [r7, #0]
        T* o = static_cast<T*>(object);
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	60fb      	str	r3, [r7, #12]
        R (T::**m)(void) = reinterpret_cast<R (T::**)(void)>(member);
 8019022:	683b      	ldr	r3, [r7, #0]
 8019024:	60bb      	str	r3, [r7, #8]
        return (o->**m)();
 8019026:	68bb      	ldr	r3, [r7, #8]
 8019028:	685b      	ldr	r3, [r3, #4]
 801902a:	105b      	asrs	r3, r3, #1
 801902c:	461a      	mov	r2, r3
 801902e:	68fb      	ldr	r3, [r7, #12]
 8019030:	1899      	adds	r1, r3, r2
 8019032:	68bb      	ldr	r3, [r7, #8]
 8019034:	685b      	ldr	r3, [r3, #4]
 8019036:	f003 0301 	and.w	r3, r3, #1
 801903a:	2b00      	cmp	r3, #0
 801903c:	d00b      	beq.n	8019056 <_ZN26core_utils_FunctionPointerIvvE12membercallerI20TWIPR_ControlManagerEEvPvPj+0x42>
 801903e:	68bb      	ldr	r3, [r7, #8]
 8019040:	685b      	ldr	r3, [r3, #4]
 8019042:	105b      	asrs	r3, r3, #1
 8019044:	461a      	mov	r2, r3
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	4413      	add	r3, r2
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	68ba      	ldr	r2, [r7, #8]
 801904e:	6812      	ldr	r2, [r2, #0]
 8019050:	4413      	add	r3, r2
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	e001      	b.n	801905a <_ZN26core_utils_FunctionPointerIvvE12membercallerI20TWIPR_ControlManagerEEvPvPj+0x46>
 8019056:	68bb      	ldr	r3, [r7, #8]
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	4608      	mov	r0, r1
 801905c:	4798      	blx	r3
 801905e:	bf00      	nop
    }
 8019060:	3710      	adds	r7, #16
 8019062:	46bd      	mov	sp, r7
 8019064:	bd80      	pop	{r7, pc}

08019066 <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf>:
    static R membercaller(void *object, uintptr_t *member, A1 a) {
 8019066:	b580      	push	{r7, lr}
 8019068:	b086      	sub	sp, #24
 801906a:	af00      	add	r7, sp, #0
 801906c:	60f8      	str	r0, [r7, #12]
 801906e:	60b9      	str	r1, [r7, #8]
 8019070:	607a      	str	r2, [r7, #4]
        T* o = static_cast<T*>(object);
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	617b      	str	r3, [r7, #20]
        R (T::**m)(A1) = reinterpret_cast<R (T::**)(A1)>(member);
 8019076:	68bb      	ldr	r3, [r7, #8]
 8019078:	613b      	str	r3, [r7, #16]
        return (o->**m)(a);
 801907a:	693b      	ldr	r3, [r7, #16]
 801907c:	685b      	ldr	r3, [r3, #4]
 801907e:	105b      	asrs	r3, r3, #1
 8019080:	461a      	mov	r2, r3
 8019082:	697b      	ldr	r3, [r7, #20]
 8019084:	1898      	adds	r0, r3, r2
 8019086:	693b      	ldr	r3, [r7, #16]
 8019088:	685b      	ldr	r3, [r3, #4]
 801908a:	f003 0301 	and.w	r3, r3, #1
 801908e:	2b00      	cmp	r3, #0
 8019090:	d00b      	beq.n	80190aa <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf+0x44>
 8019092:	693b      	ldr	r3, [r7, #16]
 8019094:	685b      	ldr	r3, [r3, #4]
 8019096:	105b      	asrs	r3, r3, #1
 8019098:	461a      	mov	r2, r3
 801909a:	697b      	ldr	r3, [r7, #20]
 801909c:	4413      	add	r3, r2
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	693a      	ldr	r2, [r7, #16]
 80190a2:	6812      	ldr	r2, [r2, #0]
 80190a4:	4413      	add	r3, r2
 80190a6:	681b      	ldr	r3, [r3, #0]
 80190a8:	e001      	b.n	80190ae <_ZN26core_utils_FunctionPointerIhA8_fE12membercallerI20TWIPR_ControlManagerEEhPvPjPf+0x48>
 80190aa:	693b      	ldr	r3, [r7, #16]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	6879      	ldr	r1, [r7, #4]
 80190b0:	4798      	blx	r3
 80190b2:	4603      	mov	r3, r0
    }
 80190b4:	4618      	mov	r0, r3
 80190b6:	3718      	adds	r7, #24
 80190b8:	46bd      	mov	sp, r7
 80190ba:	bd80      	pop	{r7, pc}

080190bc <_ZN22core_utils_RegisterMapILi20EE5writeEtPv>:
	void write(uint16_t address, void *data) {
 80190bc:	b580      	push	{r7, lr}
 80190be:	b084      	sub	sp, #16
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	60f8      	str	r0, [r7, #12]
 80190c4:	460b      	mov	r3, r1
 80190c6:	607a      	str	r2, [r7, #4]
 80190c8:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 80190ca:	897b      	ldrh	r3, [r7, #10]
 80190cc:	68fa      	ldr	r2, [r7, #12]
 80190ce:	3302      	adds	r3, #2
 80190d0:	009b      	lsls	r3, r3, #2
 80190d2:	4413      	add	r3, r2
 80190d4:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d015      	beq.n	8019106 <_ZN22core_utils_RegisterMapILi20EE5writeEtPv+0x4a>
 80190da:	897b      	ldrh	r3, [r7, #10]
 80190dc:	68fa      	ldr	r2, [r7, #12]
 80190de:	3302      	adds	r3, #2
 80190e0:	009b      	lsls	r3, r3, #2
 80190e2:	4413      	add	r3, r2
 80190e4:	6859      	ldr	r1, [r3, #4]
 80190e6:	897b      	ldrh	r3, [r7, #10]
 80190e8:	68fa      	ldr	r2, [r7, #12]
 80190ea:	3302      	adds	r3, #2
 80190ec:	009b      	lsls	r3, r3, #2
 80190ee:	4413      	add	r3, r2
 80190f0:	685b      	ldr	r3, [r3, #4]
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	3320      	adds	r3, #32
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	4608      	mov	r0, r1
 80190fa:	4798      	blx	r3
 80190fc:	4603      	mov	r3, r0
 80190fe:	2b01      	cmp	r3, #1
 8019100:	d101      	bne.n	8019106 <_ZN22core_utils_RegisterMapILi20EE5writeEtPv+0x4a>
 8019102:	2301      	movs	r3, #1
 8019104:	e000      	b.n	8019108 <_ZN22core_utils_RegisterMapILi20EE5writeEtPv+0x4c>
 8019106:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8019108:	2b00      	cmp	r3, #0
 801910a:	d00f      	beq.n	801912c <_ZN22core_utils_RegisterMapILi20EE5writeEtPv+0x70>
			this->entries[address]->write(data);
 801910c:	897b      	ldrh	r3, [r7, #10]
 801910e:	68fa      	ldr	r2, [r7, #12]
 8019110:	3302      	adds	r3, #2
 8019112:	009b      	lsls	r3, r3, #2
 8019114:	4413      	add	r3, r2
 8019116:	6858      	ldr	r0, [r3, #4]
 8019118:	897b      	ldrh	r3, [r7, #10]
 801911a:	68fa      	ldr	r2, [r7, #12]
 801911c:	3302      	adds	r3, #2
 801911e:	009b      	lsls	r3, r3, #2
 8019120:	4413      	add	r3, r2
 8019122:	685b      	ldr	r3, [r3, #4]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	6879      	ldr	r1, [r7, #4]
 801912a:	4798      	blx	r3
	}
 801912c:	bf00      	nop
 801912e:	3710      	adds	r7, #16
 8019130:	46bd      	mov	sp, r7
 8019132:	bd80      	pop	{r7, pc}

08019134 <_ZN22core_utils_RegisterMapILi20EE5writeEtPh>:
	void write(uint16_t address, uint8_t *data) {
 8019134:	b580      	push	{r7, lr}
 8019136:	b084      	sub	sp, #16
 8019138:	af00      	add	r7, sp, #0
 801913a:	60f8      	str	r0, [r7, #12]
 801913c:	460b      	mov	r3, r1
 801913e:	607a      	str	r2, [r7, #4]
 8019140:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 8019142:	897b      	ldrh	r3, [r7, #10]
 8019144:	68fa      	ldr	r2, [r7, #12]
 8019146:	3302      	adds	r3, #2
 8019148:	009b      	lsls	r3, r3, #2
 801914a:	4413      	add	r3, r2
 801914c:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 801914e:	2b00      	cmp	r3, #0
 8019150:	d015      	beq.n	801917e <_ZN22core_utils_RegisterMapILi20EE5writeEtPh+0x4a>
 8019152:	897b      	ldrh	r3, [r7, #10]
 8019154:	68fa      	ldr	r2, [r7, #12]
 8019156:	3302      	adds	r3, #2
 8019158:	009b      	lsls	r3, r3, #2
 801915a:	4413      	add	r3, r2
 801915c:	6859      	ldr	r1, [r3, #4]
 801915e:	897b      	ldrh	r3, [r7, #10]
 8019160:	68fa      	ldr	r2, [r7, #12]
 8019162:	3302      	adds	r3, #2
 8019164:	009b      	lsls	r3, r3, #2
 8019166:	4413      	add	r3, r2
 8019168:	685b      	ldr	r3, [r3, #4]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	3320      	adds	r3, #32
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	4608      	mov	r0, r1
 8019172:	4798      	blx	r3
 8019174:	4603      	mov	r3, r0
 8019176:	2b01      	cmp	r3, #1
 8019178:	d101      	bne.n	801917e <_ZN22core_utils_RegisterMapILi20EE5writeEtPh+0x4a>
 801917a:	2301      	movs	r3, #1
 801917c:	e000      	b.n	8019180 <_ZN22core_utils_RegisterMapILi20EE5writeEtPh+0x4c>
 801917e:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8019180:	2b00      	cmp	r3, #0
 8019182:	d010      	beq.n	80191a6 <_ZN22core_utils_RegisterMapILi20EE5writeEtPh+0x72>
			this->entries[address]->write(data);
 8019184:	897b      	ldrh	r3, [r7, #10]
 8019186:	68fa      	ldr	r2, [r7, #12]
 8019188:	3302      	adds	r3, #2
 801918a:	009b      	lsls	r3, r3, #2
 801918c:	4413      	add	r3, r2
 801918e:	6858      	ldr	r0, [r3, #4]
 8019190:	897b      	ldrh	r3, [r7, #10]
 8019192:	68fa      	ldr	r2, [r7, #12]
 8019194:	3302      	adds	r3, #2
 8019196:	009b      	lsls	r3, r3, #2
 8019198:	4413      	add	r3, r2
 801919a:	685b      	ldr	r3, [r3, #4]
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	3304      	adds	r3, #4
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	6879      	ldr	r1, [r7, #4]
 80191a4:	4798      	blx	r3
	}
 80191a6:	bf00      	nop
 80191a8:	3710      	adds	r7, #16
 80191aa:	46bd      	mov	sp, r7
 80191ac:	bd80      	pop	{r7, pc}

080191ae <_ZN22core_utils_RegisterMapILi20EE8addEntryEtP13RegisterEntry>:
	void addEntry(uint16_t address, RegisterEntry *entry) {
 80191ae:	b480      	push	{r7}
 80191b0:	b085      	sub	sp, #20
 80191b2:	af00      	add	r7, sp, #0
 80191b4:	60f8      	str	r0, [r7, #12]
 80191b6:	460b      	mov	r3, r1
 80191b8:	607a      	str	r2, [r7, #4]
 80191ba:	817b      	strh	r3, [r7, #10]
		this->entries[address] = entry;
 80191bc:	897b      	ldrh	r3, [r7, #10]
 80191be:	68fa      	ldr	r2, [r7, #12]
 80191c0:	3302      	adds	r3, #2
 80191c2:	009b      	lsls	r3, r3, #2
 80191c4:	4413      	add	r3, r2
 80191c6:	687a      	ldr	r2, [r7, #4]
 80191c8:	605a      	str	r2, [r3, #4]
	}
 80191ca:	bf00      	nop
 80191cc:	3714      	adds	r7, #20
 80191ce:	46bd      	mov	sp, r7
 80191d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d4:	4770      	bx	lr

080191d6 <_ZN22core_utils_RegisterMapILi20EE8hasEntryEt>:
	bool hasEntry(uint16_t address) {
 80191d6:	b480      	push	{r7}
 80191d8:	b083      	sub	sp, #12
 80191da:	af00      	add	r7, sp, #0
 80191dc:	6078      	str	r0, [r7, #4]
 80191de:	460b      	mov	r3, r1
 80191e0:	807b      	strh	r3, [r7, #2]
		if (this->entries[address] != NULL) {
 80191e2:	887b      	ldrh	r3, [r7, #2]
 80191e4:	687a      	ldr	r2, [r7, #4]
 80191e6:	3302      	adds	r3, #2
 80191e8:	009b      	lsls	r3, r3, #2
 80191ea:	4413      	add	r3, r2
 80191ec:	685b      	ldr	r3, [r3, #4]
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d001      	beq.n	80191f6 <_ZN22core_utils_RegisterMapILi20EE8hasEntryEt+0x20>
			return true;
 80191f2:	2301      	movs	r3, #1
 80191f4:	e000      	b.n	80191f8 <_ZN22core_utils_RegisterMapILi20EE8hasEntryEt+0x22>
			return false;
 80191f6:	2300      	movs	r3, #0
	}
 80191f8:	4618      	mov	r0, r3
 80191fa:	370c      	adds	r7, #12
 80191fc:	46bd      	mov	sp, r7
 80191fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019202:	4770      	bx	lr

08019204 <_ZN22core_utils_RegisterMapILi20EE4readEtPh>:
	uint8_t read(uint16_t address, uint8_t *data) {
 8019204:	b580      	push	{r7, lr}
 8019206:	b084      	sub	sp, #16
 8019208:	af00      	add	r7, sp, #0
 801920a:	60f8      	str	r0, [r7, #12]
 801920c:	460b      	mov	r3, r1
 801920e:	607a      	str	r2, [r7, #4]
 8019210:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 8019212:	897b      	ldrh	r3, [r7, #10]
 8019214:	68fa      	ldr	r2, [r7, #12]
 8019216:	3302      	adds	r3, #2
 8019218:	009b      	lsls	r3, r3, #2
 801921a:	4413      	add	r3, r2
 801921c:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 801921e:	2b00      	cmp	r3, #0
 8019220:	d015      	beq.n	801924e <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x4a>
 8019222:	897b      	ldrh	r3, [r7, #10]
 8019224:	68fa      	ldr	r2, [r7, #12]
 8019226:	3302      	adds	r3, #2
 8019228:	009b      	lsls	r3, r3, #2
 801922a:	4413      	add	r3, r2
 801922c:	6859      	ldr	r1, [r3, #4]
 801922e:	897b      	ldrh	r3, [r7, #10]
 8019230:	68fa      	ldr	r2, [r7, #12]
 8019232:	3302      	adds	r3, #2
 8019234:	009b      	lsls	r3, r3, #2
 8019236:	4413      	add	r3, r2
 8019238:	685b      	ldr	r3, [r3, #4]
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	3320      	adds	r3, #32
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	4608      	mov	r0, r1
 8019242:	4798      	blx	r3
 8019244:	4603      	mov	r3, r0
 8019246:	2b01      	cmp	r3, #1
 8019248:	d101      	bne.n	801924e <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x4a>
 801924a:	2301      	movs	r3, #1
 801924c:	e000      	b.n	8019250 <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x4c>
 801924e:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 8019250:	2b00      	cmp	r3, #0
 8019252:	d012      	beq.n	801927a <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x76>
			return this->entries[address]->readBytes(data);
 8019254:	897b      	ldrh	r3, [r7, #10]
 8019256:	68fa      	ldr	r2, [r7, #12]
 8019258:	3302      	adds	r3, #2
 801925a:	009b      	lsls	r3, r3, #2
 801925c:	4413      	add	r3, r2
 801925e:	6858      	ldr	r0, [r3, #4]
 8019260:	897b      	ldrh	r3, [r7, #10]
 8019262:	68fa      	ldr	r2, [r7, #12]
 8019264:	3302      	adds	r3, #2
 8019266:	009b      	lsls	r3, r3, #2
 8019268:	4413      	add	r3, r2
 801926a:	685b      	ldr	r3, [r3, #4]
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	3308      	adds	r3, #8
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	6879      	ldr	r1, [r7, #4]
 8019274:	4798      	blx	r3
 8019276:	4603      	mov	r3, r0
 8019278:	e000      	b.n	801927c <_ZN22core_utils_RegisterMapILi20EE4readEtPh+0x78>
		return 0;
 801927a:	2300      	movs	r3, #0
	}
 801927c:	4618      	mov	r0, r3
 801927e:	3710      	adds	r7, #16
 8019280:	46bd      	mov	sp, r7
 8019282:	bd80      	pop	{r7, pc}

08019284 <_ZN22core_utils_RegisterMapILi20EE7getSizeEt>:
	uint8_t getSize(uint16_t address) {
 8019284:	b580      	push	{r7, lr}
 8019286:	b082      	sub	sp, #8
 8019288:	af00      	add	r7, sp, #0
 801928a:	6078      	str	r0, [r7, #4]
 801928c:	460b      	mov	r3, r1
 801928e:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getSize();
 8019290:	887b      	ldrh	r3, [r7, #2]
 8019292:	687a      	ldr	r2, [r7, #4]
 8019294:	3302      	adds	r3, #2
 8019296:	009b      	lsls	r3, r3, #2
 8019298:	4413      	add	r3, r2
 801929a:	6859      	ldr	r1, [r3, #4]
 801929c:	887b      	ldrh	r3, [r7, #2]
 801929e:	687a      	ldr	r2, [r7, #4]
 80192a0:	3302      	adds	r3, #2
 80192a2:	009b      	lsls	r3, r3, #2
 80192a4:	4413      	add	r3, r2
 80192a6:	685b      	ldr	r3, [r3, #4]
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	330c      	adds	r3, #12
 80192ac:	681b      	ldr	r3, [r3, #0]
 80192ae:	4608      	mov	r0, r1
 80192b0:	4798      	blx	r3
 80192b2:	4603      	mov	r3, r0
	}
 80192b4:	4618      	mov	r0, r3
 80192b6:	3708      	adds	r7, #8
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}

080192bc <_ZN22core_utils_RegisterMapILi20EE7getTypeEt>:
	register_entry_type getType(uint16_t address) {
 80192bc:	b580      	push	{r7, lr}
 80192be:	b082      	sub	sp, #8
 80192c0:	af00      	add	r7, sp, #0
 80192c2:	6078      	str	r0, [r7, #4]
 80192c4:	460b      	mov	r3, r1
 80192c6:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getType();
 80192c8:	887b      	ldrh	r3, [r7, #2]
 80192ca:	687a      	ldr	r2, [r7, #4]
 80192cc:	3302      	adds	r3, #2
 80192ce:	009b      	lsls	r3, r3, #2
 80192d0:	4413      	add	r3, r2
 80192d2:	6859      	ldr	r1, [r3, #4]
 80192d4:	887b      	ldrh	r3, [r7, #2]
 80192d6:	687a      	ldr	r2, [r7, #4]
 80192d8:	3302      	adds	r3, #2
 80192da:	009b      	lsls	r3, r3, #2
 80192dc:	4413      	add	r3, r2
 80192de:	685b      	ldr	r3, [r3, #4]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	3320      	adds	r3, #32
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	4608      	mov	r0, r1
 80192e8:	4798      	blx	r3
 80192ea:	4603      	mov	r3, r0
	}
 80192ec:	4618      	mov	r0, r3
 80192ee:	3708      	adds	r7, #8
 80192f0:	46bd      	mov	sp, r7
 80192f2:	bd80      	pop	{r7, pc}

080192f4 <_ZN22core_utils_RegisterMapILi20EE19getReadWriteSettingEt>:
	register_entry_rw_t getReadWriteSetting(uint16_t address) {
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b082      	sub	sp, #8
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	6078      	str	r0, [r7, #4]
 80192fc:	460b      	mov	r3, r1
 80192fe:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getReadWriteSetting();
 8019300:	887b      	ldrh	r3, [r7, #2]
 8019302:	687a      	ldr	r2, [r7, #4]
 8019304:	3302      	adds	r3, #2
 8019306:	009b      	lsls	r3, r3, #2
 8019308:	4413      	add	r3, r2
 801930a:	6859      	ldr	r1, [r3, #4]
 801930c:	887b      	ldrh	r3, [r7, #2]
 801930e:	687a      	ldr	r2, [r7, #4]
 8019310:	3302      	adds	r3, #2
 8019312:	009b      	lsls	r3, r3, #2
 8019314:	4413      	add	r3, r2
 8019316:	685b      	ldr	r3, [r3, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	3324      	adds	r3, #36	@ 0x24
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	4608      	mov	r0, r1
 8019320:	4798      	blx	r3
 8019322:	4603      	mov	r3, r0
	}
 8019324:	4618      	mov	r0, r3
 8019326:	3708      	adds	r7, #8
 8019328:	46bd      	mov	sp, r7
 801932a:	bd80      	pop	{r7, pc}

0801932c <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_>:
	uint8_t execute(uint16_t address, uint8_t *input, uint8_t *output) {
 801932c:	b580      	push	{r7, lr}
 801932e:	b084      	sub	sp, #16
 8019330:	af00      	add	r7, sp, #0
 8019332:	60f8      	str	r0, [r7, #12]
 8019334:	607a      	str	r2, [r7, #4]
 8019336:	603b      	str	r3, [r7, #0]
 8019338:	460b      	mov	r3, r1
 801933a:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 801933c:	897b      	ldrh	r3, [r7, #10]
 801933e:	68fa      	ldr	r2, [r7, #12]
 8019340:	3302      	adds	r3, #2
 8019342:	009b      	lsls	r3, r3, #2
 8019344:	4413      	add	r3, r2
 8019346:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType()
 8019348:	2b00      	cmp	r3, #0
 801934a:	d015      	beq.n	8019378 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x4c>
 801934c:	897b      	ldrh	r3, [r7, #10]
 801934e:	68fa      	ldr	r2, [r7, #12]
 8019350:	3302      	adds	r3, #2
 8019352:	009b      	lsls	r3, r3, #2
 8019354:	4413      	add	r3, r2
 8019356:	6859      	ldr	r1, [r3, #4]
 8019358:	897b      	ldrh	r3, [r7, #10]
 801935a:	68fa      	ldr	r2, [r7, #12]
 801935c:	3302      	adds	r3, #2
 801935e:	009b      	lsls	r3, r3, #2
 8019360:	4413      	add	r3, r2
 8019362:	685b      	ldr	r3, [r3, #4]
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	3320      	adds	r3, #32
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	4608      	mov	r0, r1
 801936c:	4798      	blx	r3
 801936e:	4603      	mov	r3, r0
 8019370:	2b02      	cmp	r3, #2
 8019372:	d101      	bne.n	8019378 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x4c>
 8019374:	2301      	movs	r3, #1
 8019376:	e000      	b.n	801937a <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x4e>
 8019378:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 801937a:	2b00      	cmp	r3, #0
 801937c:	d013      	beq.n	80193a6 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x7a>
			return this->entries[address]->execute(input, output);
 801937e:	897b      	ldrh	r3, [r7, #10]
 8019380:	68fa      	ldr	r2, [r7, #12]
 8019382:	3302      	adds	r3, #2
 8019384:	009b      	lsls	r3, r3, #2
 8019386:	4413      	add	r3, r2
 8019388:	6858      	ldr	r0, [r3, #4]
 801938a:	897b      	ldrh	r3, [r7, #10]
 801938c:	68fa      	ldr	r2, [r7, #12]
 801938e:	3302      	adds	r3, #2
 8019390:	009b      	lsls	r3, r3, #2
 8019392:	4413      	add	r3, r2
 8019394:	685b      	ldr	r3, [r3, #4]
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	331c      	adds	r3, #28
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	683a      	ldr	r2, [r7, #0]
 801939e:	6879      	ldr	r1, [r7, #4]
 80193a0:	4798      	blx	r3
 80193a2:	4603      	mov	r3, r0
 80193a4:	e000      	b.n	80193a8 <_ZN22core_utils_RegisterMapILi20EE7executeEtPhS1_+0x7c>
		return 0;
 80193a6:	2300      	movs	r3, #0
	}
 80193a8:	4618      	mov	r0, r3
 80193aa:	3710      	adds	r7, #16
 80193ac:	46bd      	mov	sp, r7
 80193ae:	bd80      	pop	{r7, pc}

080193b0 <_ZN22core_utils_RegisterMapILi20EE7executeEt>:
	uint8_t execute(uint16_t address) {
 80193b0:	b580      	push	{r7, lr}
 80193b2:	b082      	sub	sp, #8
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
 80193b8:	460b      	mov	r3, r1
 80193ba:	807b      	strh	r3, [r7, #2]
		if (this->entries[address] != NULL
 80193bc:	887b      	ldrh	r3, [r7, #2]
 80193be:	687a      	ldr	r2, [r7, #4]
 80193c0:	3302      	adds	r3, #2
 80193c2:	009b      	lsls	r3, r3, #2
 80193c4:	4413      	add	r3, r2
 80193c6:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType()
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d015      	beq.n	80193f8 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0x48>
 80193cc:	887b      	ldrh	r3, [r7, #2]
 80193ce:	687a      	ldr	r2, [r7, #4]
 80193d0:	3302      	adds	r3, #2
 80193d2:	009b      	lsls	r3, r3, #2
 80193d4:	4413      	add	r3, r2
 80193d6:	6859      	ldr	r1, [r3, #4]
 80193d8:	887b      	ldrh	r3, [r7, #2]
 80193da:	687a      	ldr	r2, [r7, #4]
 80193dc:	3302      	adds	r3, #2
 80193de:	009b      	lsls	r3, r3, #2
 80193e0:	4413      	add	r3, r2
 80193e2:	685b      	ldr	r3, [r3, #4]
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	3320      	adds	r3, #32
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	4608      	mov	r0, r1
 80193ec:	4798      	blx	r3
 80193ee:	4603      	mov	r3, r0
 80193f0:	2b02      	cmp	r3, #2
 80193f2:	d101      	bne.n	80193f8 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0x48>
 80193f4:	2301      	movs	r3, #1
 80193f6:	e000      	b.n	80193fa <_ZN22core_utils_RegisterMapILi20EE7executeEt+0x4a>
 80193f8:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d03d      	beq.n	801947a <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xca>
			if (this->entries[address]->getInputSize() == 0
 80193fe:	887b      	ldrh	r3, [r7, #2]
 8019400:	687a      	ldr	r2, [r7, #4]
 8019402:	3302      	adds	r3, #2
 8019404:	009b      	lsls	r3, r3, #2
 8019406:	4413      	add	r3, r2
 8019408:	6859      	ldr	r1, [r3, #4]
 801940a:	887b      	ldrh	r3, [r7, #2]
 801940c:	687a      	ldr	r2, [r7, #4]
 801940e:	3302      	adds	r3, #2
 8019410:	009b      	lsls	r3, r3, #2
 8019412:	4413      	add	r3, r2
 8019414:	685b      	ldr	r3, [r3, #4]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	3310      	adds	r3, #16
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	4608      	mov	r0, r1
 801941e:	4798      	blx	r3
 8019420:	4603      	mov	r3, r0
					&& this->entries[address]->getOutputSize() == 0) {
 8019422:	2b00      	cmp	r3, #0
 8019424:	d115      	bne.n	8019452 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xa2>
 8019426:	887b      	ldrh	r3, [r7, #2]
 8019428:	687a      	ldr	r2, [r7, #4]
 801942a:	3302      	adds	r3, #2
 801942c:	009b      	lsls	r3, r3, #2
 801942e:	4413      	add	r3, r2
 8019430:	6859      	ldr	r1, [r3, #4]
 8019432:	887b      	ldrh	r3, [r7, #2]
 8019434:	687a      	ldr	r2, [r7, #4]
 8019436:	3302      	adds	r3, #2
 8019438:	009b      	lsls	r3, r3, #2
 801943a:	4413      	add	r3, r2
 801943c:	685b      	ldr	r3, [r3, #4]
 801943e:	681b      	ldr	r3, [r3, #0]
 8019440:	3314      	adds	r3, #20
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	4608      	mov	r0, r1
 8019446:	4798      	blx	r3
 8019448:	4603      	mov	r3, r0
 801944a:	2b00      	cmp	r3, #0
 801944c:	d101      	bne.n	8019452 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xa2>
 801944e:	2301      	movs	r3, #1
 8019450:	e000      	b.n	8019454 <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xa4>
 8019452:	2300      	movs	r3, #0
			if (this->entries[address]->getInputSize() == 0
 8019454:	2b00      	cmp	r3, #0
 8019456:	d010      	beq.n	801947a <_ZN22core_utils_RegisterMapILi20EE7executeEt+0xca>
				this->entries[address]->execute();
 8019458:	887b      	ldrh	r3, [r7, #2]
 801945a:	687a      	ldr	r2, [r7, #4]
 801945c:	3302      	adds	r3, #2
 801945e:	009b      	lsls	r3, r3, #2
 8019460:	4413      	add	r3, r2
 8019462:	6859      	ldr	r1, [r3, #4]
 8019464:	887b      	ldrh	r3, [r7, #2]
 8019466:	687a      	ldr	r2, [r7, #4]
 8019468:	3302      	adds	r3, #2
 801946a:	009b      	lsls	r3, r3, #2
 801946c:	4413      	add	r3, r2
 801946e:	685b      	ldr	r3, [r3, #4]
 8019470:	681b      	ldr	r3, [r3, #0]
 8019472:	3318      	adds	r3, #24
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	4608      	mov	r0, r1
 8019478:	4798      	blx	r3
		return 0;
 801947a:	2300      	movs	r3, #0
	}
 801947c:	4618      	mov	r0, r3
 801947e:	3708      	adds	r7, #8
 8019480:	46bd      	mov	sp, r7
 8019482:	bd80      	pop	{r7, pc}

08019484 <_ZN27core_utils_RegisterFunctionIvfE7getSizeEv>:
	uint8_t getSize() {
 8019484:	b480      	push	{r7}
 8019486:	b083      	sub	sp, #12
 8019488:	af00      	add	r7, sp, #0
 801948a:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 801948c:	2304      	movs	r3, #4
	}
 801948e:	4618      	mov	r0, r3
 8019490:	370c      	adds	r7, #12
 8019492:	46bd      	mov	sp, r7
 8019494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019498:	4770      	bx	lr

0801949a <_ZN27core_utils_RegisterFunctionIvfE12getInputSizeEv>:
	uint8_t getInputSize() {
 801949a:	b480      	push	{r7}
 801949c:	b083      	sub	sp, #12
 801949e:	af00      	add	r7, sp, #0
 80194a0:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 80194a2:	2304      	movs	r3, #4
	}
 80194a4:	4618      	mov	r0, r3
 80194a6:	370c      	adds	r7, #12
 80194a8:	46bd      	mov	sp, r7
 80194aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ae:	4770      	bx	lr

080194b0 <_ZN27core_utils_RegisterFunctionIvfE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 80194b0:	b480      	push	{r7}
 80194b2:	b083      	sub	sp, #12
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	6078      	str	r0, [r7, #4]
		return 0;
 80194b8:	2300      	movs	r3, #0
	}
 80194ba:	4618      	mov	r0, r3
 80194bc:	370c      	adds	r7, #12
 80194be:	46bd      	mov	sp, r7
 80194c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194c4:	4770      	bx	lr

080194c6 <_ZN27core_utils_RegisterFunctionIvfE7executeEPhS1_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 80194c6:	b580      	push	{r7, lr}
 80194c8:	b086      	sub	sp, #24
 80194ca:	af00      	add	r7, sp, #0
 80194cc:	60f8      	str	r0, [r7, #12]
 80194ce:	60b9      	str	r1, [r7, #8]
 80194d0:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 80194d2:	2300      	movs	r3, #0
 80194d4:	75fb      	strb	r3, [r7, #23]
 80194d6:	e00b      	b.n	80194f0 <_ZN27core_utils_RegisterFunctionIvfE7executeEPhS1_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 80194d8:	7dfb      	ldrb	r3, [r7, #23]
 80194da:	68ba      	ldr	r2, [r7, #8]
 80194dc:	441a      	add	r2, r3
 80194de:	7dfb      	ldrb	r3, [r7, #23]
 80194e0:	7811      	ldrb	r1, [r2, #0]
 80194e2:	68fa      	ldr	r2, [r7, #12]
 80194e4:	4413      	add	r3, r2
 80194e6:	460a      	mov	r2, r1
 80194e8:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 80194ea:	7dfb      	ldrb	r3, [r7, #23]
 80194ec:	3301      	adds	r3, #1
 80194ee:	75fb      	strb	r3, [r7, #23]
 80194f0:	7dfb      	ldrb	r3, [r7, #23]
 80194f2:	2b03      	cmp	r3, #3
 80194f4:	d9f0      	bls.n	80194d8 <_ZN27core_utils_RegisterFunctionIvfE7executeEPhS1_+0x12>
		this->execute(this->input_data_union.data);
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80194fc:	eeb0 0a67 	vmov.f32	s0, s15
 8019500:	68f8      	ldr	r0, [r7, #12]
 8019502:	f000 fb90 	bl	8019c26 <_ZN27core_utils_RegisterFunctionIvfE7executeEf>
		return 0;
 8019506:	2300      	movs	r3, #0
	}
 8019508:	4618      	mov	r0, r3
 801950a:	3718      	adds	r7, #24
 801950c:	46bd      	mov	sp, r7
 801950e:	bd80      	pop	{r7, pc}

08019510 <_ZN27core_utils_RegisterFunctionIvfE7getTypeEv>:
	register_entry_type getType() {
 8019510:	b480      	push	{r7}
 8019512:	b083      	sub	sp, #12
 8019514:	af00      	add	r7, sp, #0
 8019516:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 8019518:	2302      	movs	r3, #2
	}
 801951a:	4618      	mov	r0, r3
 801951c:	370c      	adds	r7, #12
 801951e:	46bd      	mov	sp, r7
 8019520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019524:	4770      	bx	lr

08019526 <_ZN27core_utils_RegisterFunctionIvfE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8019526:	b480      	push	{r7}
 8019528:	b083      	sub	sp, #12
 801952a:	af00      	add	r7, sp, #0
 801952c:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 801952e:	2302      	movs	r3, #2
	}
 8019530:	4618      	mov	r0, r3
 8019532:	370c      	adds	r7, #12
 8019534:	46bd      	mov	sp, r7
 8019536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801953a:	4770      	bx	lr

0801953c <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPv>:
	void write(void *value) {
 801953c:	b5b0      	push	{r4, r5, r7, lr}
 801953e:	b084      	sub	sp, #16
 8019540:	af00      	add	r7, sp, #0
 8019542:	6078      	str	r0, [r7, #4]
 8019544:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801954c:	2b00      	cmp	r3, #0
 801954e:	d014      	beq.n	801957a <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPv+0x3e>
		T *value_typed = (T*) value;
 8019550:	683b      	ldr	r3, [r7, #0]
 8019552:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019558:	68fb      	ldr	r3, [r7, #12]
 801955a:	4614      	mov	r4, r2
 801955c:	461d      	mov	r5, r3
 801955e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019560:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019562:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019566:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801956a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		this->write_function.call();
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	3344      	adds	r3, #68	@ 0x44
 8019572:	4618      	mov	r0, r3
 8019574:	f7fa fd1a 	bl	8013fac <_ZN8Callback4callEv>
 8019578:	e000      	b.n	801957c <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPv+0x40>
			return;
 801957a:	bf00      	nop
	}
 801957c:	3710      	adds	r7, #16
 801957e:	46bd      	mov	sp, r7
 8019580:	bdb0      	pop	{r4, r5, r7, pc}

08019582 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 8019582:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019584:	b08f      	sub	sp, #60	@ 0x3c
 8019586:	af0a      	add	r7, sp, #40	@ 0x28
 8019588:	6078      	str	r0, [r7, #4]
 801958a:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8019592:	2b00      	cmp	r3, #0
 8019594:	d022      	beq.n	80195dc <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh+0x5a>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019596:	2300      	movs	r3, #0
 8019598:	73fb      	strb	r3, [r7, #15]
 801959a:	e00b      	b.n	80195b4 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh+0x32>
			this->data_union.data_bytes[i] = data[i];
 801959c:	7bfb      	ldrb	r3, [r7, #15]
 801959e:	683a      	ldr	r2, [r7, #0]
 80195a0:	441a      	add	r2, r3
 80195a2:	7bfb      	ldrb	r3, [r7, #15]
 80195a4:	7811      	ldrb	r1, [r2, #0]
 80195a6:	687a      	ldr	r2, [r7, #4]
 80195a8:	4413      	add	r3, r2
 80195aa:	460a      	mov	r2, r1
 80195ac:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80195ae:	7bfb      	ldrb	r3, [r7, #15]
 80195b0:	3301      	adds	r3, #1
 80195b2:	73fb      	strb	r3, [r7, #15]
 80195b4:	7bfb      	ldrb	r3, [r7, #15]
 80195b6:	2b2f      	cmp	r3, #47	@ 0x2f
 80195b8:	d9f0      	bls.n	801959c <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh+0x1a>
		this->write(this->data_union.data);
 80195ba:	687e      	ldr	r6, [r7, #4]
 80195bc:	466d      	mov	r5, sp
 80195be:	f106 0414 	add.w	r4, r6, #20
 80195c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80195c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80195c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80195c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80195ca:	6823      	ldr	r3, [r4, #0]
 80195cc:	602b      	str	r3, [r5, #0]
 80195ce:	f106 0308 	add.w	r3, r6, #8
 80195d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80195d4:	6878      	ldr	r0, [r7, #4]
 80195d6:	f000 fb3b 	bl	8019c50 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeES0_>
 80195da:	e000      	b.n	80195de <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeEPh+0x5c>
			return;
 80195dc:	bf00      	nop
	}
 80195de:	3714      	adds	r7, #20
 80195e0:	46bd      	mov	sp, r7
 80195e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080195e4 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 80195e4:	b4b0      	push	{r4, r5, r7}
 80195e6:	b085      	sub	sp, #20
 80195e8:	af00      	add	r7, sp, #0
 80195ea:	6078      	str	r0, [r7, #4]
 80195ec:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 80195ee:	687b      	ldr	r3, [r7, #4]
 80195f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80195f4:	2b01      	cmp	r3, #1
 80195f6:	d101      	bne.n	80195fc <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh+0x18>
			return 0;
 80195f8:	2300      	movs	r3, #0
 80195fa:	e01f      	b.n	801963c <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh+0x58>
		this->data_union.data = *(this->data);
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019600:	687b      	ldr	r3, [r7, #4]
 8019602:	f103 0408 	add.w	r4, r3, #8
 8019606:	4615      	mov	r5, r2
 8019608:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801960a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801960c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801960e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019610:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8019614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019618:	2300      	movs	r3, #0
 801961a:	73fb      	strb	r3, [r7, #15]
 801961c:	e00a      	b.n	8019634 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh+0x50>
			data[i] = this->data_union.data_bytes[i];
 801961e:	7bfa      	ldrb	r2, [r7, #15]
 8019620:	7bfb      	ldrb	r3, [r7, #15]
 8019622:	6839      	ldr	r1, [r7, #0]
 8019624:	440b      	add	r3, r1
 8019626:	6879      	ldr	r1, [r7, #4]
 8019628:	440a      	add	r2, r1
 801962a:	7a12      	ldrb	r2, [r2, #8]
 801962c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801962e:	7bfb      	ldrb	r3, [r7, #15]
 8019630:	3301      	adds	r3, #1
 8019632:	73fb      	strb	r3, [r7, #15]
 8019634:	7bfb      	ldrb	r3, [r7, #15]
 8019636:	2b2f      	cmp	r3, #47	@ 0x2f
 8019638:	d9f1      	bls.n	801961e <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE9readBytesEPh+0x3a>
		return sizeof(T);
 801963a:	2330      	movs	r3, #48	@ 0x30
	}
 801963c:	4618      	mov	r0, r3
 801963e:	3714      	adds	r7, #20
 8019640:	46bd      	mov	sp, r7
 8019642:	bcb0      	pop	{r4, r5, r7}
 8019644:	4770      	bx	lr

08019646 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE7getSizeEv>:
	uint8_t getSize() {
 8019646:	b480      	push	{r7}
 8019648:	b083      	sub	sp, #12
 801964a:	af00      	add	r7, sp, #0
 801964c:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 801964e:	2330      	movs	r3, #48	@ 0x30
	}
 8019650:	4618      	mov	r0, r3
 8019652:	370c      	adds	r7, #12
 8019654:	46bd      	mov	sp, r7
 8019656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801965a:	4770      	bx	lr

0801965c <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE7getTypeEv>:
	register_entry_type getType() {
 801965c:	b480      	push	{r7}
 801965e:	b083      	sub	sp, #12
 8019660:	af00      	add	r7, sp, #0
 8019662:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 8019664:	2301      	movs	r3, #1
	}
 8019666:	4618      	mov	r0, r3
 8019668:	370c      	adds	r7, #12
 801966a:	46bd      	mov	sp, r7
 801966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019670:	4770      	bx	lr

08019672 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8019672:	b480      	push	{r7}
 8019674:	b083      	sub	sp, #12
 8019676:	af00      	add	r7, sp, #0
 8019678:	6078      	str	r0, [r7, #4]
		return this->rw;
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
	}
 8019680:	4618      	mov	r0, r3
 8019682:	370c      	adds	r7, #12
 8019684:	46bd      	mov	sp, r7
 8019686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801968a:	4770      	bx	lr

0801968c <_ZN27core_utils_RegisterFunctionIhA8_fE7getSizeEv>:
	uint8_t getSize() {
 801968c:	b480      	push	{r7}
 801968e:	b083      	sub	sp, #12
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 8019694:	2320      	movs	r3, #32
	}
 8019696:	4618      	mov	r0, r3
 8019698:	370c      	adds	r7, #12
 801969a:	46bd      	mov	sp, r7
 801969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a0:	4770      	bx	lr

080196a2 <_ZN27core_utils_RegisterFunctionIhA8_fE12getInputSizeEv>:
	uint8_t getInputSize() {
 80196a2:	b480      	push	{r7}
 80196a4:	b083      	sub	sp, #12
 80196a6:	af00      	add	r7, sp, #0
 80196a8:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 80196aa:	2320      	movs	r3, #32
	}
 80196ac:	4618      	mov	r0, r3
 80196ae:	370c      	adds	r7, #12
 80196b0:	46bd      	mov	sp, r7
 80196b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196b6:	4770      	bx	lr

080196b8 <_ZN27core_utils_RegisterFunctionIhA8_fE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 80196b8:	b480      	push	{r7}
 80196ba:	b083      	sub	sp, #12
 80196bc:	af00      	add	r7, sp, #0
 80196be:	6078      	str	r0, [r7, #4]
		return sizeof(output_t);
 80196c0:	2301      	movs	r3, #1
	}
 80196c2:	4618      	mov	r0, r3
 80196c4:	370c      	adds	r7, #12
 80196c6:	46bd      	mov	sp, r7
 80196c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196cc:	4770      	bx	lr

080196ce <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 80196ce:	b580      	push	{r7, lr}
 80196d0:	b088      	sub	sp, #32
 80196d2:	af00      	add	r7, sp, #0
 80196d4:	60f8      	str	r0, [r7, #12]
 80196d6:	60b9      	str	r1, [r7, #8]
 80196d8:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 80196da:	2300      	movs	r3, #0
 80196dc:	77fb      	strb	r3, [r7, #31]
 80196de:	e00b      	b.n	80196f8 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 80196e0:	7ffb      	ldrb	r3, [r7, #31]
 80196e2:	68ba      	ldr	r2, [r7, #8]
 80196e4:	441a      	add	r2, r3
 80196e6:	7ffb      	ldrb	r3, [r7, #31]
 80196e8:	7811      	ldrb	r1, [r2, #0]
 80196ea:	68fa      	ldr	r2, [r7, #12]
 80196ec:	4413      	add	r3, r2
 80196ee:	460a      	mov	r2, r1
 80196f0:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 80196f2:	7ffb      	ldrb	r3, [r7, #31]
 80196f4:	3301      	adds	r3, #1
 80196f6:	77fb      	strb	r3, [r7, #31]
 80196f8:	7ffb      	ldrb	r3, [r7, #31]
 80196fa:	2b1f      	cmp	r3, #31
 80196fc:	d9f0      	bls.n	80196e0 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_+0x12>
		output_t out = this->execute(this->input_data_union.data);
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	3308      	adds	r3, #8
 8019702:	4619      	mov	r1, r3
 8019704:	68f8      	ldr	r0, [r7, #12]
 8019706:	f000 facb 	bl	8019ca0 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPf>
 801970a:	4603      	mov	r3, r0
 801970c:	75fb      	strb	r3, [r7, #23]
		uint8_t *data_ptr = (uint8_t*) &out;
 801970e:	f107 0317 	add.w	r3, r7, #23
 8019712:	61bb      	str	r3, [r7, #24]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 8019714:	2300      	movs	r3, #0
 8019716:	77bb      	strb	r3, [r7, #30]
 8019718:	e00a      	b.n	8019730 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_+0x62>
			output_buffer[i] = data_ptr[i];
 801971a:	7fbb      	ldrb	r3, [r7, #30]
 801971c:	69ba      	ldr	r2, [r7, #24]
 801971e:	441a      	add	r2, r3
 8019720:	7fbb      	ldrb	r3, [r7, #30]
 8019722:	6879      	ldr	r1, [r7, #4]
 8019724:	440b      	add	r3, r1
 8019726:	7812      	ldrb	r2, [r2, #0]
 8019728:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 801972a:	7fbb      	ldrb	r3, [r7, #30]
 801972c:	3301      	adds	r3, #1
 801972e:	77bb      	strb	r3, [r7, #30]
 8019730:	7fbb      	ldrb	r3, [r7, #30]
 8019732:	2b00      	cmp	r3, #0
 8019734:	d0f1      	beq.n	801971a <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPhS2_+0x4c>
		return sizeof(output_t);
 8019736:	2301      	movs	r3, #1
	}
 8019738:	4618      	mov	r0, r3
 801973a:	3720      	adds	r7, #32
 801973c:	46bd      	mov	sp, r7
 801973e:	bd80      	pop	{r7, pc}

08019740 <_ZN27core_utils_RegisterFunctionIhA8_fE7getTypeEv>:
	register_entry_type getType() {
 8019740:	b480      	push	{r7}
 8019742:	b083      	sub	sp, #12
 8019744:	af00      	add	r7, sp, #0
 8019746:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 8019748:	2302      	movs	r3, #2
	}
 801974a:	4618      	mov	r0, r3
 801974c:	370c      	adds	r7, #12
 801974e:	46bd      	mov	sp, r7
 8019750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019754:	4770      	bx	lr

08019756 <_ZN27core_utils_RegisterFunctionIhA8_fE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8019756:	b480      	push	{r7}
 8019758:	b083      	sub	sp, #12
 801975a:	af00      	add	r7, sp, #0
 801975c:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 801975e:	2302      	movs	r3, #2
	}
 8019760:	4618      	mov	r0, r3
 8019762:	370c      	adds	r7, #12
 8019764:	46bd      	mov	sp, r7
 8019766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801976a:	4770      	bx	lr

0801976c <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7getSizeEv>:
	uint8_t getSize() {
 801976c:	b480      	push	{r7}
 801976e:	b083      	sub	sp, #12
 8019770:	af00      	add	r7, sp, #0
 8019772:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 8019774:	2306      	movs	r3, #6
	}
 8019776:	4618      	mov	r0, r3
 8019778:	370c      	adds	r7, #12
 801977a:	46bd      	mov	sp, r7
 801977c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019780:	4770      	bx	lr

08019782 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE12getInputSizeEv>:
	uint8_t getInputSize() {
 8019782:	b480      	push	{r7}
 8019784:	b083      	sub	sp, #12
 8019786:	af00      	add	r7, sp, #0
 8019788:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 801978a:	2306      	movs	r3, #6
	}
 801978c:	4618      	mov	r0, r3
 801978e:	370c      	adds	r7, #12
 8019790:	46bd      	mov	sp, r7
 8019792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019796:	4770      	bx	lr

08019798 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 8019798:	b480      	push	{r7}
 801979a:	b083      	sub	sp, #12
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]
		return sizeof(output_t);
 80197a0:	2301      	movs	r3, #1
	}
 80197a2:	4618      	mov	r0, r3
 80197a4:	370c      	adds	r7, #12
 80197a6:	46bd      	mov	sp, r7
 80197a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ac:	4770      	bx	lr

080197ae <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 80197ae:	b580      	push	{r7, lr}
 80197b0:	b088      	sub	sp, #32
 80197b2:	af00      	add	r7, sp, #0
 80197b4:	60f8      	str	r0, [r7, #12]
 80197b6:	60b9      	str	r1, [r7, #8]
 80197b8:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 80197ba:	2300      	movs	r3, #0
 80197bc:	77fb      	strb	r3, [r7, #31]
 80197be:	e00b      	b.n	80197d8 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 80197c0:	7ffb      	ldrb	r3, [r7, #31]
 80197c2:	68ba      	ldr	r2, [r7, #8]
 80197c4:	441a      	add	r2, r3
 80197c6:	7ffb      	ldrb	r3, [r7, #31]
 80197c8:	7811      	ldrb	r1, [r2, #0]
 80197ca:	68fa      	ldr	r2, [r7, #12]
 80197cc:	4413      	add	r3, r2
 80197ce:	460a      	mov	r2, r1
 80197d0:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 80197d2:	7ffb      	ldrb	r3, [r7, #31]
 80197d4:	3301      	adds	r3, #1
 80197d6:	77fb      	strb	r3, [r7, #31]
 80197d8:	7ffb      	ldrb	r3, [r7, #31]
 80197da:	2b05      	cmp	r3, #5
 80197dc:	d9f0      	bls.n	80197c0 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_+0x12>
		output_t out = this->execute(this->input_data_union.data);
 80197de:	68fb      	ldr	r3, [r7, #12]
 80197e0:	f8d3 2006 	ldr.w	r2, [r3, #6]
 80197e4:	4611      	mov	r1, r2
 80197e6:	895a      	ldrh	r2, [r3, #10]
 80197e8:	2300      	movs	r3, #0
 80197ea:	f362 030f 	bfi	r3, r2, #0, #16
 80197ee:	461a      	mov	r2, r3
 80197f0:	68f8      	ldr	r0, [r7, #12]
 80197f2:	f000 fa6c 	bl	8019cce <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeES0_>
 80197f6:	4603      	mov	r3, r0
 80197f8:	75fb      	strb	r3, [r7, #23]
		uint8_t *data_ptr = (uint8_t*) &out;
 80197fa:	f107 0317 	add.w	r3, r7, #23
 80197fe:	61bb      	str	r3, [r7, #24]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 8019800:	2300      	movs	r3, #0
 8019802:	77bb      	strb	r3, [r7, #30]
 8019804:	e00a      	b.n	801981c <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_+0x6e>
			output_buffer[i] = data_ptr[i];
 8019806:	7fbb      	ldrb	r3, [r7, #30]
 8019808:	69ba      	ldr	r2, [r7, #24]
 801980a:	441a      	add	r2, r3
 801980c:	7fbb      	ldrb	r3, [r7, #30]
 801980e:	6879      	ldr	r1, [r7, #4]
 8019810:	440b      	add	r3, r1
 8019812:	7812      	ldrb	r2, [r2, #0]
 8019814:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 8019816:	7fbb      	ldrb	r3, [r7, #30]
 8019818:	3301      	adds	r3, #1
 801981a:	77bb      	strb	r3, [r7, #30]
 801981c:	7fbb      	ldrb	r3, [r7, #30]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d0f1      	beq.n	8019806 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeEPhS2_+0x58>
		return sizeof(output_t);
 8019822:	2301      	movs	r3, #1
	}
 8019824:	4618      	mov	r0, r3
 8019826:	3720      	adds	r7, #32
 8019828:	46bd      	mov	sp, r7
 801982a:	bd80      	pop	{r7, pc}

0801982c <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7getTypeEv>:
	register_entry_type getType() {
 801982c:	b480      	push	{r7}
 801982e:	b083      	sub	sp, #12
 8019830:	af00      	add	r7, sp, #0
 8019832:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 8019834:	2302      	movs	r3, #2
	}
 8019836:	4618      	mov	r0, r3
 8019838:	370c      	adds	r7, #12
 801983a:	46bd      	mov	sp, r7
 801983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019840:	4770      	bx	lr

08019842 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8019842:	b480      	push	{r7}
 8019844:	b083      	sub	sp, #12
 8019846:	af00      	add	r7, sp, #0
 8019848:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 801984a:	2302      	movs	r3, #2
	}
 801984c:	4618      	mov	r0, r3
 801984e:	370c      	adds	r7, #12
 8019850:	46bd      	mov	sp, r7
 8019852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019856:	4770      	bx	lr

08019858 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7getSizeEv>:
	uint8_t getSize() {
 8019858:	b480      	push	{r7}
 801985a:	b083      	sub	sp, #12
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 8019860:	2301      	movs	r3, #1
	}
 8019862:	4618      	mov	r0, r3
 8019864:	370c      	adds	r7, #12
 8019866:	46bd      	mov	sp, r7
 8019868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801986c:	4770      	bx	lr

0801986e <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE12getInputSizeEv>:
	uint8_t getInputSize() {
 801986e:	b480      	push	{r7}
 8019870:	b083      	sub	sp, #12
 8019872:	af00      	add	r7, sp, #0
 8019874:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 8019876:	2301      	movs	r3, #1
	}
 8019878:	4618      	mov	r0, r3
 801987a:	370c      	adds	r7, #12
 801987c:	46bd      	mov	sp, r7
 801987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019882:	4770      	bx	lr

08019884 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 8019884:	b480      	push	{r7}
 8019886:	b083      	sub	sp, #12
 8019888:	af00      	add	r7, sp, #0
 801988a:	6078      	str	r0, [r7, #4]
		return sizeof(output_t);
 801988c:	2301      	movs	r3, #1
	}
 801988e:	4618      	mov	r0, r3
 8019890:	370c      	adds	r7, #12
 8019892:	46bd      	mov	sp, r7
 8019894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019898:	4770      	bx	lr

0801989a <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801989a:	b580      	push	{r7, lr}
 801989c:	b088      	sub	sp, #32
 801989e:	af00      	add	r7, sp, #0
 80198a0:	60f8      	str	r0, [r7, #12]
 80198a2:	60b9      	str	r1, [r7, #8]
 80198a4:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 80198a6:	2300      	movs	r3, #0
 80198a8:	77fb      	strb	r3, [r7, #31]
 80198aa:	e00b      	b.n	80198c4 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 80198ac:	7ffb      	ldrb	r3, [r7, #31]
 80198ae:	68ba      	ldr	r2, [r7, #8]
 80198b0:	441a      	add	r2, r3
 80198b2:	7ffb      	ldrb	r3, [r7, #31]
 80198b4:	7811      	ldrb	r1, [r2, #0]
 80198b6:	68fa      	ldr	r2, [r7, #12]
 80198b8:	4413      	add	r3, r2
 80198ba:	460a      	mov	r2, r1
 80198bc:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < (sizeof(input_t)); i++) {
 80198be:	7ffb      	ldrb	r3, [r7, #31]
 80198c0:	3301      	adds	r3, #1
 80198c2:	77fb      	strb	r3, [r7, #31]
 80198c4:	7ffb      	ldrb	r3, [r7, #31]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d0f0      	beq.n	80198ac <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_+0x12>
		output_t out = this->execute(this->input_data_union.data);
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	799b      	ldrb	r3, [r3, #6]
 80198ce:	4619      	mov	r1, r3
 80198d0:	68f8      	ldr	r0, [r7, #12]
 80198d2:	f000 fa16 	bl	8019d02 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeES0_>
 80198d6:	4603      	mov	r3, r0
 80198d8:	75fb      	strb	r3, [r7, #23]
		uint8_t *data_ptr = (uint8_t*) &out;
 80198da:	f107 0317 	add.w	r3, r7, #23
 80198de:	61bb      	str	r3, [r7, #24]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 80198e0:	2300      	movs	r3, #0
 80198e2:	77bb      	strb	r3, [r7, #30]
 80198e4:	e00a      	b.n	80198fc <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_+0x62>
			output_buffer[i] = data_ptr[i];
 80198e6:	7fbb      	ldrb	r3, [r7, #30]
 80198e8:	69ba      	ldr	r2, [r7, #24]
 80198ea:	441a      	add	r2, r3
 80198ec:	7fbb      	ldrb	r3, [r7, #30]
 80198ee:	6879      	ldr	r1, [r7, #4]
 80198f0:	440b      	add	r3, r1
 80198f2:	7812      	ldrb	r2, [r2, #0]
 80198f4:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(output_t); i++) {
 80198f6:	7fbb      	ldrb	r3, [r7, #30]
 80198f8:	3301      	adds	r3, #1
 80198fa:	77bb      	strb	r3, [r7, #30]
 80198fc:	7fbb      	ldrb	r3, [r7, #30]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d0f1      	beq.n	80198e6 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeEPhS2_+0x4c>
		return sizeof(output_t);
 8019902:	2301      	movs	r3, #1
	}
 8019904:	4618      	mov	r0, r3
 8019906:	3720      	adds	r7, #32
 8019908:	46bd      	mov	sp, r7
 801990a:	bd80      	pop	{r7, pc}

0801990c <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7getTypeEv>:
	register_entry_type getType() {
 801990c:	b480      	push	{r7}
 801990e:	b083      	sub	sp, #12
 8019910:	af00      	add	r7, sp, #0
 8019912:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 8019914:	2302      	movs	r3, #2
	}
 8019916:	4618      	mov	r0, r3
 8019918:	370c      	adds	r7, #12
 801991a:	46bd      	mov	sp, r7
 801991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019920:	4770      	bx	lr

08019922 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8019922:	b480      	push	{r7}
 8019924:	b083      	sub	sp, #12
 8019926:	af00      	add	r7, sp, #0
 8019928:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 801992a:	2302      	movs	r3, #2
	}
 801992c:	4618      	mov	r0, r3
 801992e:	370c      	adds	r7, #12
 8019930:	46bd      	mov	sp, r7
 8019932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019936:	4770      	bx	lr

08019938 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPv>:
	void write(void *value) {
 8019938:	b580      	push	{r7, lr}
 801993a:	b084      	sub	sp, #16
 801993c:	af00      	add	r7, sp, #0
 801993e:	6078      	str	r0, [r7, #4]
 8019940:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	7a9b      	ldrb	r3, [r3, #10]
 8019946:	2b00      	cmp	r3, #0
 8019948:	d00c      	beq.n	8019964 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPv+0x2c>
		T *value_typed = (T*) value;
 801994a:	683b      	ldr	r3, [r7, #0]
 801994c:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	68db      	ldr	r3, [r3, #12]
 8019952:	68fa      	ldr	r2, [r7, #12]
 8019954:	7812      	ldrb	r2, [r2, #0]
 8019956:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	3310      	adds	r3, #16
 801995c:	4618      	mov	r0, r3
 801995e:	f7fa fb25 	bl	8013fac <_ZN8Callback4callEv>
 8019962:	e000      	b.n	8019966 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPv+0x2e>
			return;
 8019964:	bf00      	nop
	}
 8019966:	3710      	adds	r7, #16
 8019968:	46bd      	mov	sp, r7
 801996a:	bd80      	pop	{r7, pc}

0801996c <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 801996c:	b580      	push	{r7, lr}
 801996e:	b084      	sub	sp, #16
 8019970:	af00      	add	r7, sp, #0
 8019972:	6078      	str	r0, [r7, #4]
 8019974:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	7a9b      	ldrb	r3, [r3, #10]
 801997a:	2b00      	cmp	r3, #0
 801997c:	d018      	beq.n	80199b0 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh+0x44>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801997e:	2300      	movs	r3, #0
 8019980:	73fb      	strb	r3, [r7, #15]
 8019982:	e00b      	b.n	801999c <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh+0x30>
			this->data_union.data_bytes[i] = data[i];
 8019984:	7bfb      	ldrb	r3, [r7, #15]
 8019986:	683a      	ldr	r2, [r7, #0]
 8019988:	441a      	add	r2, r3
 801998a:	7bfb      	ldrb	r3, [r7, #15]
 801998c:	7811      	ldrb	r1, [r2, #0]
 801998e:	687a      	ldr	r2, [r7, #4]
 8019990:	4413      	add	r3, r2
 8019992:	460a      	mov	r2, r1
 8019994:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019996:	7bfb      	ldrb	r3, [r7, #15]
 8019998:	3301      	adds	r3, #1
 801999a:	73fb      	strb	r3, [r7, #15]
 801999c:	7bfb      	ldrb	r3, [r7, #15]
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d0f0      	beq.n	8019984 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh+0x18>
		this->write(this->data_union.data);
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	799b      	ldrb	r3, [r3, #6]
 80199a6:	4619      	mov	r1, r3
 80199a8:	6878      	ldr	r0, [r7, #4]
 80199aa:	f000 f9c2 	bl	8019d32 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeES0_>
 80199ae:	e000      	b.n	80199b2 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeEPh+0x46>
			return;
 80199b0:	bf00      	nop
	}
 80199b2:	3710      	adds	r7, #16
 80199b4:	46bd      	mov	sp, r7
 80199b6:	bd80      	pop	{r7, pc}

080199b8 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 80199b8:	b480      	push	{r7}
 80199ba:	b085      	sub	sp, #20
 80199bc:	af00      	add	r7, sp, #0
 80199be:	6078      	str	r0, [r7, #4]
 80199c0:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	7a9b      	ldrb	r3, [r3, #10]
 80199c6:	2b01      	cmp	r3, #1
 80199c8:	d101      	bne.n	80199ce <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh+0x16>
			return 0;
 80199ca:	2300      	movs	r3, #0
 80199cc:	e016      	b.n	80199fc <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh+0x44>
		this->data_union.data = *(this->data);
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	68db      	ldr	r3, [r3, #12]
 80199d2:	781a      	ldrb	r2, [r3, #0]
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80199d8:	2300      	movs	r3, #0
 80199da:	73fb      	strb	r3, [r7, #15]
 80199dc:	e00a      	b.n	80199f4 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh+0x3c>
			data[i] = this->data_union.data_bytes[i];
 80199de:	7bfa      	ldrb	r2, [r7, #15]
 80199e0:	7bfb      	ldrb	r3, [r7, #15]
 80199e2:	6839      	ldr	r1, [r7, #0]
 80199e4:	440b      	add	r3, r1
 80199e6:	6879      	ldr	r1, [r7, #4]
 80199e8:	440a      	add	r2, r1
 80199ea:	7992      	ldrb	r2, [r2, #6]
 80199ec:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 80199ee:	7bfb      	ldrb	r3, [r7, #15]
 80199f0:	3301      	adds	r3, #1
 80199f2:	73fb      	strb	r3, [r7, #15]
 80199f4:	7bfb      	ldrb	r3, [r7, #15]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d0f1      	beq.n	80199de <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE9readBytesEPh+0x26>
		return sizeof(T);
 80199fa:	2301      	movs	r3, #1
	}
 80199fc:	4618      	mov	r0, r3
 80199fe:	3714      	adds	r7, #20
 8019a00:	46bd      	mov	sp, r7
 8019a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a06:	4770      	bx	lr

08019a08 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE7getSizeEv>:
	uint8_t getSize() {
 8019a08:	b480      	push	{r7}
 8019a0a:	b083      	sub	sp, #12
 8019a0c:	af00      	add	r7, sp, #0
 8019a0e:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 8019a10:	2301      	movs	r3, #1
	}
 8019a12:	4618      	mov	r0, r3
 8019a14:	370c      	adds	r7, #12
 8019a16:	46bd      	mov	sp, r7
 8019a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1c:	4770      	bx	lr

08019a1e <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE7getTypeEv>:
	register_entry_type getType() {
 8019a1e:	b480      	push	{r7}
 8019a20:	b083      	sub	sp, #12
 8019a22:	af00      	add	r7, sp, #0
 8019a24:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 8019a26:	2301      	movs	r3, #1
	}
 8019a28:	4618      	mov	r0, r3
 8019a2a:	370c      	adds	r7, #12
 8019a2c:	46bd      	mov	sp, r7
 8019a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a32:	4770      	bx	lr

08019a34 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8019a34:	b480      	push	{r7}
 8019a36:	b083      	sub	sp, #12
 8019a38:	af00      	add	r7, sp, #0
 8019a3a:	6078      	str	r0, [r7, #4]
		return this->rw;
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	7a9b      	ldrb	r3, [r3, #10]
	}
 8019a40:	4618      	mov	r0, r3
 8019a42:	370c      	adds	r7, #12
 8019a44:	46bd      	mov	sp, r7
 8019a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a4a:	4770      	bx	lr

08019a4c <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPv>:
	void write(void *value) {
 8019a4c:	b580      	push	{r7, lr}
 8019a4e:	b084      	sub	sp, #16
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	6078      	str	r0, [r7, #4]
 8019a54:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	7a9b      	ldrb	r3, [r3, #10]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d00d      	beq.n	8019a7a <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPv+0x2e>
		T *value_typed = (T*) value;
 8019a5e:	683b      	ldr	r3, [r7, #0]
 8019a60:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	68db      	ldr	r3, [r3, #12]
 8019a66:	68fa      	ldr	r2, [r7, #12]
 8019a68:	f992 2000 	ldrsb.w	r2, [r2]
 8019a6c:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	3310      	adds	r3, #16
 8019a72:	4618      	mov	r0, r3
 8019a74:	f7fa fa9a 	bl	8013fac <_ZN8Callback4callEv>
 8019a78:	e000      	b.n	8019a7c <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPv+0x30>
			return;
 8019a7a:	bf00      	nop
	}
 8019a7c:	3710      	adds	r7, #16
 8019a7e:	46bd      	mov	sp, r7
 8019a80:	bd80      	pop	{r7, pc}

08019a82 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 8019a82:	b580      	push	{r7, lr}
 8019a84:	b084      	sub	sp, #16
 8019a86:	af00      	add	r7, sp, #0
 8019a88:	6078      	str	r0, [r7, #4]
 8019a8a:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	7a9b      	ldrb	r3, [r3, #10]
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d019      	beq.n	8019ac8 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh+0x46>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019a94:	2300      	movs	r3, #0
 8019a96:	73fb      	strb	r3, [r7, #15]
 8019a98:	e00b      	b.n	8019ab2 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh+0x30>
			this->data_union.data_bytes[i] = data[i];
 8019a9a:	7bfb      	ldrb	r3, [r7, #15]
 8019a9c:	683a      	ldr	r2, [r7, #0]
 8019a9e:	441a      	add	r2, r3
 8019aa0:	7bfb      	ldrb	r3, [r7, #15]
 8019aa2:	7811      	ldrb	r1, [r2, #0]
 8019aa4:	687a      	ldr	r2, [r7, #4]
 8019aa6:	4413      	add	r3, r2
 8019aa8:	460a      	mov	r2, r1
 8019aaa:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019aac:	7bfb      	ldrb	r3, [r7, #15]
 8019aae:	3301      	adds	r3, #1
 8019ab0:	73fb      	strb	r3, [r7, #15]
 8019ab2:	7bfb      	ldrb	r3, [r7, #15]
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d0f0      	beq.n	8019a9a <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh+0x18>
		this->write(this->data_union.data);
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8019abe:	4619      	mov	r1, r3
 8019ac0:	6878      	ldr	r0, [r7, #4]
 8019ac2:	f000 f94e 	bl	8019d62 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeES0_>
 8019ac6:	e000      	b.n	8019aca <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeEPh+0x48>
			return;
 8019ac8:	bf00      	nop
	}
 8019aca:	3710      	adds	r7, #16
 8019acc:	46bd      	mov	sp, r7
 8019ace:	bd80      	pop	{r7, pc}

08019ad0 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 8019ad0:	b480      	push	{r7}
 8019ad2:	b085      	sub	sp, #20
 8019ad4:	af00      	add	r7, sp, #0
 8019ad6:	6078      	str	r0, [r7, #4]
 8019ad8:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	7a9b      	ldrb	r3, [r3, #10]
 8019ade:	2b01      	cmp	r3, #1
 8019ae0:	d101      	bne.n	8019ae6 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh+0x16>
			return 0;
 8019ae2:	2300      	movs	r3, #0
 8019ae4:	e017      	b.n	8019b16 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh+0x46>
		this->data_union.data = *(this->data);
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	68db      	ldr	r3, [r3, #12]
 8019aea:	f993 2000 	ldrsb.w	r2, [r3]
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019af2:	2300      	movs	r3, #0
 8019af4:	73fb      	strb	r3, [r7, #15]
 8019af6:	e00a      	b.n	8019b0e <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh+0x3e>
			data[i] = this->data_union.data_bytes[i];
 8019af8:	7bfa      	ldrb	r2, [r7, #15]
 8019afa:	7bfb      	ldrb	r3, [r7, #15]
 8019afc:	6839      	ldr	r1, [r7, #0]
 8019afe:	440b      	add	r3, r1
 8019b00:	6879      	ldr	r1, [r7, #4]
 8019b02:	440a      	add	r2, r1
 8019b04:	7992      	ldrb	r2, [r2, #6]
 8019b06:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 8019b08:	7bfb      	ldrb	r3, [r7, #15]
 8019b0a:	3301      	adds	r3, #1
 8019b0c:	73fb      	strb	r3, [r7, #15]
 8019b0e:	7bfb      	ldrb	r3, [r7, #15]
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d0f1      	beq.n	8019af8 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE9readBytesEPh+0x28>
		return sizeof(T);
 8019b14:	2301      	movs	r3, #1
	}
 8019b16:	4618      	mov	r0, r3
 8019b18:	3714      	adds	r7, #20
 8019b1a:	46bd      	mov	sp, r7
 8019b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b20:	4770      	bx	lr

08019b22 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE7getSizeEv>:
	uint8_t getSize() {
 8019b22:	b480      	push	{r7}
 8019b24:	b083      	sub	sp, #12
 8019b26:	af00      	add	r7, sp, #0
 8019b28:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 8019b2a:	2301      	movs	r3, #1
	}
 8019b2c:	4618      	mov	r0, r3
 8019b2e:	370c      	adds	r7, #12
 8019b30:	46bd      	mov	sp, r7
 8019b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b36:	4770      	bx	lr

08019b38 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE7getTypeEv>:
	register_entry_type getType() {
 8019b38:	b480      	push	{r7}
 8019b3a:	b083      	sub	sp, #12
 8019b3c:	af00      	add	r7, sp, #0
 8019b3e:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 8019b40:	2301      	movs	r3, #1
	}
 8019b42:	4618      	mov	r0, r3
 8019b44:	370c      	adds	r7, #12
 8019b46:	46bd      	mov	sp, r7
 8019b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b4c:	4770      	bx	lr

08019b4e <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8019b4e:	b480      	push	{r7}
 8019b50:	b083      	sub	sp, #12
 8019b52:	af00      	add	r7, sp, #0
 8019b54:	6078      	str	r0, [r7, #4]
		return this->rw;
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	7a9b      	ldrb	r3, [r3, #10]
	}
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	370c      	adds	r7, #12
 8019b5e:	46bd      	mov	sp, r7
 8019b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b64:	4770      	bx	lr

08019b66 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7getSizeEv>:
	uint8_t getSize() {
 8019b66:	b480      	push	{r7}
 8019b68:	b083      	sub	sp, #12
 8019b6a:	af00      	add	r7, sp, #0
 8019b6c:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 8019b6e:	2308      	movs	r3, #8
	}
 8019b70:	4618      	mov	r0, r3
 8019b72:	370c      	adds	r7, #12
 8019b74:	46bd      	mov	sp, r7
 8019b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b7a:	4770      	bx	lr

08019b7c <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE12getInputSizeEv>:
	uint8_t getInputSize() {
 8019b7c:	b480      	push	{r7}
 8019b7e:	b083      	sub	sp, #12
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 8019b84:	2308      	movs	r3, #8
	}
 8019b86:	4618      	mov	r0, r3
 8019b88:	370c      	adds	r7, #12
 8019b8a:	46bd      	mov	sp, r7
 8019b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b90:	4770      	bx	lr

08019b92 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 8019b92:	b480      	push	{r7}
 8019b94:	b083      	sub	sp, #12
 8019b96:	af00      	add	r7, sp, #0
 8019b98:	6078      	str	r0, [r7, #4]
		return 0;
 8019b9a:	2300      	movs	r3, #0
	}
 8019b9c:	4618      	mov	r0, r3
 8019b9e:	370c      	adds	r7, #12
 8019ba0:	46bd      	mov	sp, r7
 8019ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ba6:	4770      	bx	lr

08019ba8 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeEPhS2_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	b086      	sub	sp, #24
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	60f8      	str	r0, [r7, #12]
 8019bb0:	60b9      	str	r1, [r7, #8]
 8019bb2:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 8019bb4:	2300      	movs	r3, #0
 8019bb6:	75fb      	strb	r3, [r7, #23]
 8019bb8:	e00b      	b.n	8019bd2 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 8019bba:	7dfb      	ldrb	r3, [r7, #23]
 8019bbc:	68ba      	ldr	r2, [r7, #8]
 8019bbe:	441a      	add	r2, r3
 8019bc0:	7dfb      	ldrb	r3, [r7, #23]
 8019bc2:	7811      	ldrb	r1, [r2, #0]
 8019bc4:	68fa      	ldr	r2, [r7, #12]
 8019bc6:	4413      	add	r3, r2
 8019bc8:	460a      	mov	r2, r1
 8019bca:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 8019bcc:	7dfb      	ldrb	r3, [r7, #23]
 8019bce:	3301      	adds	r3, #1
 8019bd0:	75fb      	strb	r3, [r7, #23]
 8019bd2:	7dfb      	ldrb	r3, [r7, #23]
 8019bd4:	2b07      	cmp	r3, #7
 8019bd6:	d9f0      	bls.n	8019bba <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeEPhS2_+0x12>
		this->execute(this->input_data_union.data);
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	ed93 7a02 	vldr	s14, [r3, #8]
 8019bde:	edd3 7a03 	vldr	s15, [r3, #12]
 8019be2:	eeb0 0a47 	vmov.f32	s0, s14
 8019be6:	eef0 0a67 	vmov.f32	s1, s15
 8019bea:	68f8      	ldr	r0, [r7, #12]
 8019bec:	f000 f8d1 	bl	8019d92 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeES0_>
		return 0;
 8019bf0:	2300      	movs	r3, #0
	}
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	3718      	adds	r7, #24
 8019bf6:	46bd      	mov	sp, r7
 8019bf8:	bd80      	pop	{r7, pc}

08019bfa <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7getTypeEv>:
	register_entry_type getType() {
 8019bfa:	b480      	push	{r7}
 8019bfc:	b083      	sub	sp, #12
 8019bfe:	af00      	add	r7, sp, #0
 8019c00:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 8019c02:	2302      	movs	r3, #2
	}
 8019c04:	4618      	mov	r0, r3
 8019c06:	370c      	adds	r7, #12
 8019c08:	46bd      	mov	sp, r7
 8019c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c0e:	4770      	bx	lr

08019c10 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 8019c10:	b480      	push	{r7}
 8019c12:	b083      	sub	sp, #12
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 8019c18:	2302      	movs	r3, #2
	}
 8019c1a:	4618      	mov	r0, r3
 8019c1c:	370c      	adds	r7, #12
 8019c1e:	46bd      	mov	sp, r7
 8019c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c24:	4770      	bx	lr

08019c26 <_ZN27core_utils_RegisterFunctionIvfE7executeEf>:
	void execute(input_t argument) {
 8019c26:	b580      	push	{r7, lr}
 8019c28:	b082      	sub	sp, #8
 8019c2a:	af00      	add	r7, sp, #0
 8019c2c:	6078      	str	r0, [r7, #4]
 8019c2e:	ed87 0a00 	vstr	s0, [r7]
		if (this->function.registered) {
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	7d1b      	ldrb	r3, [r3, #20]
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d006      	beq.n	8019c48 <_ZN27core_utils_RegisterFunctionIvfE7executeEf+0x22>
			this->function.call(argument);
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	3310      	adds	r3, #16
 8019c3e:	ed97 0a00 	vldr	s0, [r7]
 8019c42:	4618      	mov	r0, r3
 8019c44:	f000 f8c6 	bl	8019dd4 <_ZN19core_utils_CallbackIvfE4callEf>
	}
 8019c48:	bf00      	nop
 8019c4a:	3708      	adds	r7, #8
 8019c4c:	46bd      	mov	sp, r7
 8019c4e:	bd80      	pop	{r7, pc}

08019c50 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeES0_>:
	void write(T value) {
 8019c50:	b084      	sub	sp, #16
 8019c52:	b5b0      	push	{r4, r5, r7, lr}
 8019c54:	b082      	sub	sp, #8
 8019c56:	af00      	add	r7, sp, #0
 8019c58:	6078      	str	r0, [r7, #4]
 8019c5a:	f107 001c 	add.w	r0, r7, #28
 8019c5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		if (this->rw == REGISTER_ENTRY_READ) {
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d012      	beq.n	8019c92 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeES0_+0x42>
		*(this->data) = value;
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019c70:	461d      	mov	r5, r3
 8019c72:	f107 041c 	add.w	r4, r7, #28
 8019c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019c7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019c82:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		this->write_function.call();
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	3344      	adds	r3, #68	@ 0x44
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	f7fa f98e 	bl	8013fac <_ZN8Callback4callEv>
 8019c90:	e000      	b.n	8019c94 <_ZN24core_utils_RegisterEntryI22twipr_control_config_tE5writeES0_+0x44>
			return;
 8019c92:	bf00      	nop
	}
 8019c94:	3708      	adds	r7, #8
 8019c96:	46bd      	mov	sp, r7
 8019c98:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8019c9c:	b004      	add	sp, #16
 8019c9e:	4770      	bx	lr

08019ca0 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPf>:
	output_t execute(input_t argument) {
 8019ca0:	b580      	push	{r7, lr}
 8019ca2:	b082      	sub	sp, #8
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
 8019ca8:	6039      	str	r1, [r7, #0]
		if (this->function.registered) {
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d007      	beq.n	8019cc4 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPf+0x24>
			return this->function.call(argument);
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	332c      	adds	r3, #44	@ 0x2c
 8019cb8:	6839      	ldr	r1, [r7, #0]
 8019cba:	4618      	mov	r0, r3
 8019cbc:	f000 f89b 	bl	8019df6 <_ZN19core_utils_CallbackIhA8_fE4callEPf>
 8019cc0:	4603      	mov	r3, r0
 8019cc2:	e000      	b.n	8019cc6 <_ZN27core_utils_RegisterFunctionIhA8_fE7executeEPf+0x26>
			return (output_t) 0;
 8019cc4:	2300      	movs	r3, #0
	}
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	3708      	adds	r7, #8
 8019cca:	46bd      	mov	sp, r7
 8019ccc:	bd80      	pop	{r7, pc}

08019cce <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeES0_>:
	output_t execute(input_t argument) {
 8019cce:	b580      	push	{r7, lr}
 8019cd0:	b084      	sub	sp, #16
 8019cd2:	af00      	add	r7, sp, #0
 8019cd4:	60f8      	str	r0, [r7, #12]
 8019cd6:	1d3b      	adds	r3, r7, #4
 8019cd8:	e883 0006 	stmia.w	r3, {r1, r2}
		if (this->function.registered) {
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	7d1b      	ldrb	r3, [r3, #20]
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d009      	beq.n	8019cf8 <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeES0_+0x2a>
			return this->function.call(argument);
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	f103 0010 	add.w	r0, r3, #16
 8019cea:	1d3b      	adds	r3, r7, #4
 8019cec:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019cf0:	f000 f891 	bl	8019e16 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tE4callES0_>
 8019cf4:	4603      	mov	r3, r0
 8019cf6:	e000      	b.n	8019cfa <_ZN27core_utils_RegisterFunctionIh26twipr_control_trajectory_tE7executeES0_+0x2c>
			return (output_t) 0;
 8019cf8:	2300      	movs	r3, #0
	}
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	3710      	adds	r7, #16
 8019cfe:	46bd      	mov	sp, r7
 8019d00:	bd80      	pop	{r7, pc}

08019d02 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeES0_>:
	output_t execute(input_t argument) {
 8019d02:	b580      	push	{r7, lr}
 8019d04:	b082      	sub	sp, #8
 8019d06:	af00      	add	r7, sp, #0
 8019d08:	6078      	str	r0, [r7, #4]
 8019d0a:	460b      	mov	r3, r1
 8019d0c:	70fb      	strb	r3, [r7, #3]
		if (this->function.registered) {
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	7c1b      	ldrb	r3, [r3, #16]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d008      	beq.n	8019d28 <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeES0_+0x26>
			return this->function.call(argument);
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	330c      	adds	r3, #12
 8019d1a:	78fa      	ldrb	r2, [r7, #3]
 8019d1c:	4611      	mov	r1, r2
 8019d1e:	4618      	mov	r0, r3
 8019d20:	f000 f88d 	bl	8019e3e <_ZN19core_utils_CallbackIh20twipr_control_mode_tE4callES0_>
 8019d24:	4603      	mov	r3, r0
 8019d26:	e000      	b.n	8019d2a <_ZN27core_utils_RegisterFunctionIh20twipr_control_mode_tE7executeES0_+0x28>
			return (output_t) 0;
 8019d28:	2300      	movs	r3, #0
	}
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	3708      	adds	r7, #8
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	bd80      	pop	{r7, pc}

08019d32 <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeES0_>:
	void write(T value) {
 8019d32:	b580      	push	{r7, lr}
 8019d34:	b082      	sub	sp, #8
 8019d36:	af00      	add	r7, sp, #0
 8019d38:	6078      	str	r0, [r7, #4]
 8019d3a:	460b      	mov	r3, r1
 8019d3c:	70fb      	strb	r3, [r7, #3]
		if (this->rw == REGISTER_ENTRY_READ) {
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	7a9b      	ldrb	r3, [r3, #10]
 8019d42:	2b00      	cmp	r3, #0
 8019d44:	d009      	beq.n	8019d5a <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeES0_+0x28>
		*(this->data) = value;
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	68db      	ldr	r3, [r3, #12]
 8019d4a:	78fa      	ldrb	r2, [r7, #3]
 8019d4c:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	3310      	adds	r3, #16
 8019d52:	4618      	mov	r0, r3
 8019d54:	f7fa f92a 	bl	8013fac <_ZN8Callback4callEv>
 8019d58:	e000      	b.n	8019d5c <_ZN24core_utils_RegisterEntryI20twipr_control_mode_tE5writeES0_+0x2a>
			return;
 8019d5a:	bf00      	nop
	}
 8019d5c:	3708      	adds	r7, #8
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	bd80      	pop	{r7, pc}

08019d62 <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeES0_>:
	void write(T value) {
 8019d62:	b580      	push	{r7, lr}
 8019d64:	b082      	sub	sp, #8
 8019d66:	af00      	add	r7, sp, #0
 8019d68:	6078      	str	r0, [r7, #4]
 8019d6a:	460b      	mov	r3, r1
 8019d6c:	70fb      	strb	r3, [r7, #3]
		if (this->rw == REGISTER_ENTRY_READ) {
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	7a9b      	ldrb	r3, [r3, #10]
 8019d72:	2b00      	cmp	r3, #0
 8019d74:	d009      	beq.n	8019d8a <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeES0_+0x28>
		*(this->data) = value;
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	68db      	ldr	r3, [r3, #12]
 8019d7a:	78fa      	ldrb	r2, [r7, #3]
 8019d7c:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	3310      	adds	r3, #16
 8019d82:	4618      	mov	r0, r3
 8019d84:	f7fa f912 	bl	8013fac <_ZN8Callback4callEv>
 8019d88:	e000      	b.n	8019d8c <_ZN24core_utils_RegisterEntryI22twipr_control_status_tE5writeES0_+0x2a>
			return;
 8019d8a:	bf00      	nop
	}
 8019d8c:	3708      	adds	r7, #8
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	bd80      	pop	{r7, pc}

08019d92 <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeES0_>:
	void execute(input_t argument) {
 8019d92:	b580      	push	{r7, lr}
 8019d94:	b084      	sub	sp, #16
 8019d96:	af00      	add	r7, sp, #0
 8019d98:	60f8      	str	r0, [r7, #12]
 8019d9a:	eeb0 7a40 	vmov.f32	s14, s0
 8019d9e:	eef0 7a60 	vmov.f32	s15, s1
 8019da2:	ed87 7a01 	vstr	s14, [r7, #4]
 8019da6:	edc7 7a02 	vstr	s15, [r7, #8]
		if (this->function.registered) {
 8019daa:	68fb      	ldr	r3, [r7, #12]
 8019dac:	7e1b      	ldrb	r3, [r3, #24]
 8019dae:	2b00      	cmp	r3, #0
 8019db0:	d00c      	beq.n	8019dcc <_ZN27core_utils_RegisterFunctionIv21twipr_control_input_tE7executeES0_+0x3a>
			this->function.call(argument);
 8019db2:	68fb      	ldr	r3, [r7, #12]
 8019db4:	3314      	adds	r3, #20
 8019db6:	ed97 7a01 	vldr	s14, [r7, #4]
 8019dba:	edd7 7a02 	vldr	s15, [r7, #8]
 8019dbe:	eeb0 0a47 	vmov.f32	s0, s14
 8019dc2:	eef0 0a67 	vmov.f32	s1, s15
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	f000 f84b 	bl	8019e62 <_ZN19core_utils_CallbackIv21twipr_control_input_tE4callES0_>
	}
 8019dcc:	bf00      	nop
 8019dce:	3710      	adds	r7, #16
 8019dd0:	46bd      	mov	sp, r7
 8019dd2:	bd80      	pop	{r7, pc}

08019dd4 <_ZN19core_utils_CallbackIvfE4callEf>:
	R call(A argument){
 8019dd4:	b580      	push	{r7, lr}
 8019dd6:	b082      	sub	sp, #8
 8019dd8:	af00      	add	r7, sp, #0
 8019dda:	6078      	str	r0, [r7, #4]
 8019ddc:	ed87 0a00 	vstr	s0, [r7]
		return this->_fp(argument);
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	3308      	adds	r3, #8
 8019de4:	ed97 0a00 	vldr	s0, [r7]
 8019de8:	4618      	mov	r0, r3
 8019dea:	f000 f857 	bl	8019e9c <_ZN26core_utils_FunctionPointerIvfEclEf>
 8019dee:	bf00      	nop
	}
 8019df0:	3708      	adds	r7, #8
 8019df2:	46bd      	mov	sp, r7
 8019df4:	bd80      	pop	{r7, pc}

08019df6 <_ZN19core_utils_CallbackIhA8_fE4callEPf>:
	R call(A argument){
 8019df6:	b580      	push	{r7, lr}
 8019df8:	b082      	sub	sp, #8
 8019dfa:	af00      	add	r7, sp, #0
 8019dfc:	6078      	str	r0, [r7, #4]
 8019dfe:	6039      	str	r1, [r7, #0]
		return this->_fp(argument);
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	3308      	adds	r3, #8
 8019e04:	6839      	ldr	r1, [r7, #0]
 8019e06:	4618      	mov	r0, r3
 8019e08:	f000 f857 	bl	8019eba <_ZN26core_utils_FunctionPointerIhA8_fEclEPf>
 8019e0c:	4603      	mov	r3, r0
	}
 8019e0e:	4618      	mov	r0, r3
 8019e10:	3708      	adds	r7, #8
 8019e12:	46bd      	mov	sp, r7
 8019e14:	bd80      	pop	{r7, pc}

08019e16 <_ZN19core_utils_CallbackIh26twipr_control_trajectory_tE4callES0_>:
	R call(A argument){
 8019e16:	b580      	push	{r7, lr}
 8019e18:	b084      	sub	sp, #16
 8019e1a:	af00      	add	r7, sp, #0
 8019e1c:	60f8      	str	r0, [r7, #12]
 8019e1e:	1d3b      	adds	r3, r7, #4
 8019e20:	e883 0006 	stmia.w	r3, {r1, r2}
		return this->_fp(argument);
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	f103 0008 	add.w	r0, r3, #8
 8019e2a:	1d3b      	adds	r3, r7, #4
 8019e2c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019e30:	f000 f851 	bl	8019ed6 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEclES0_>
 8019e34:	4603      	mov	r3, r0
	}
 8019e36:	4618      	mov	r0, r3
 8019e38:	3710      	adds	r7, #16
 8019e3a:	46bd      	mov	sp, r7
 8019e3c:	bd80      	pop	{r7, pc}

08019e3e <_ZN19core_utils_CallbackIh20twipr_control_mode_tE4callES0_>:
	R call(A argument){
 8019e3e:	b580      	push	{r7, lr}
 8019e40:	b082      	sub	sp, #8
 8019e42:	af00      	add	r7, sp, #0
 8019e44:	6078      	str	r0, [r7, #4]
 8019e46:	460b      	mov	r3, r1
 8019e48:	70fb      	strb	r3, [r7, #3]
		return this->_fp(argument);
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	3308      	adds	r3, #8
 8019e4e:	78fa      	ldrb	r2, [r7, #3]
 8019e50:	4611      	mov	r1, r2
 8019e52:	4618      	mov	r0, r3
 8019e54:	f000 f851 	bl	8019efa <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEclES0_>
 8019e58:	4603      	mov	r3, r0
	}
 8019e5a:	4618      	mov	r0, r3
 8019e5c:	3708      	adds	r7, #8
 8019e5e:	46bd      	mov	sp, r7
 8019e60:	bd80      	pop	{r7, pc}

08019e62 <_ZN19core_utils_CallbackIv21twipr_control_input_tE4callES0_>:
	R call(A argument){
 8019e62:	b580      	push	{r7, lr}
 8019e64:	b084      	sub	sp, #16
 8019e66:	af00      	add	r7, sp, #0
 8019e68:	60f8      	str	r0, [r7, #12]
 8019e6a:	eeb0 7a40 	vmov.f32	s14, s0
 8019e6e:	eef0 7a60 	vmov.f32	s15, s1
 8019e72:	ed87 7a01 	vstr	s14, [r7, #4]
 8019e76:	edc7 7a02 	vstr	s15, [r7, #8]
		return this->_fp(argument);
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	3308      	adds	r3, #8
 8019e7e:	ed97 7a01 	vldr	s14, [r7, #4]
 8019e82:	edd7 7a02 	vldr	s15, [r7, #8]
 8019e86:	eeb0 0a47 	vmov.f32	s0, s14
 8019e8a:	eef0 0a67 	vmov.f32	s1, s15
 8019e8e:	4618      	mov	r0, r3
 8019e90:	f000 f843 	bl	8019f1a <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEclES0_>
 8019e94:	bf00      	nop
	}
 8019e96:	3710      	adds	r7, #16
 8019e98:	46bd      	mov	sp, r7
 8019e9a:	bd80      	pop	{r7, pc}

08019e9c <_ZN26core_utils_FunctionPointerIvfEclEf>:
    R operator ()(A1 a) {
 8019e9c:	b580      	push	{r7, lr}
 8019e9e:	b082      	sub	sp, #8
 8019ea0:	af00      	add	r7, sp, #0
 8019ea2:	6078      	str	r0, [r7, #4]
 8019ea4:	ed87 0a00 	vstr	s0, [r7]
        return call(a);
 8019ea8:	ed97 0a00 	vldr	s0, [r7]
 8019eac:	6878      	ldr	r0, [r7, #4]
 8019eae:	f000 f84f 	bl	8019f50 <_ZN26core_utils_FunctionPointerIvfE4callEf>
 8019eb2:	bf00      	nop
    }
 8019eb4:	3708      	adds	r7, #8
 8019eb6:	46bd      	mov	sp, r7
 8019eb8:	bd80      	pop	{r7, pc}

08019eba <_ZN26core_utils_FunctionPointerIhA8_fEclEPf>:
    R operator ()(A1 a) {
 8019eba:	b580      	push	{r7, lr}
 8019ebc:	b082      	sub	sp, #8
 8019ebe:	af00      	add	r7, sp, #0
 8019ec0:	6078      	str	r0, [r7, #4]
 8019ec2:	6039      	str	r1, [r7, #0]
        return call(a);
 8019ec4:	6839      	ldr	r1, [r7, #0]
 8019ec6:	6878      	ldr	r0, [r7, #4]
 8019ec8:	f000 f86d 	bl	8019fa6 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf>
 8019ecc:	4603      	mov	r3, r0
    }
 8019ece:	4618      	mov	r0, r3
 8019ed0:	3708      	adds	r7, #8
 8019ed2:	46bd      	mov	sp, r7
 8019ed4:	bd80      	pop	{r7, pc}

08019ed6 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tEclES0_>:
    R operator ()(A1 a) {
 8019ed6:	b580      	push	{r7, lr}
 8019ed8:	b084      	sub	sp, #16
 8019eda:	af00      	add	r7, sp, #0
 8019edc:	60f8      	str	r0, [r7, #12]
 8019ede:	1d3b      	adds	r3, r7, #4
 8019ee0:	e883 0006 	stmia.w	r3, {r1, r2}
        return call(a);
 8019ee4:	1d3b      	adds	r3, r7, #4
 8019ee6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8019eea:	68f8      	ldr	r0, [r7, #12]
 8019eec:	f000 f885 	bl	8019ffa <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_>
 8019ef0:	4603      	mov	r3, r0
    }
 8019ef2:	4618      	mov	r0, r3
 8019ef4:	3710      	adds	r7, #16
 8019ef6:	46bd      	mov	sp, r7
 8019ef8:	bd80      	pop	{r7, pc}

08019efa <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tEclES0_>:
    R operator ()(A1 a) {
 8019efa:	b580      	push	{r7, lr}
 8019efc:	b082      	sub	sp, #8
 8019efe:	af00      	add	r7, sp, #0
 8019f00:	6078      	str	r0, [r7, #4]
 8019f02:	460b      	mov	r3, r1
 8019f04:	70fb      	strb	r3, [r7, #3]
        return call(a);
 8019f06:	78fb      	ldrb	r3, [r7, #3]
 8019f08:	4619      	mov	r1, r3
 8019f0a:	6878      	ldr	r0, [r7, #4]
 8019f0c:	f000 f8a4 	bl	801a058 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_>
 8019f10:	4603      	mov	r3, r0
    }
 8019f12:	4618      	mov	r0, r3
 8019f14:	3708      	adds	r7, #8
 8019f16:	46bd      	mov	sp, r7
 8019f18:	bd80      	pop	{r7, pc}

08019f1a <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tEclES0_>:
    R operator ()(A1 a) {
 8019f1a:	b580      	push	{r7, lr}
 8019f1c:	b084      	sub	sp, #16
 8019f1e:	af00      	add	r7, sp, #0
 8019f20:	60f8      	str	r0, [r7, #12]
 8019f22:	eeb0 7a40 	vmov.f32	s14, s0
 8019f26:	eef0 7a60 	vmov.f32	s15, s1
 8019f2a:	ed87 7a01 	vstr	s14, [r7, #4]
 8019f2e:	edc7 7a02 	vstr	s15, [r7, #8]
        return call(a);
 8019f32:	ed97 7a01 	vldr	s14, [r7, #4]
 8019f36:	edd7 7a02 	vldr	s15, [r7, #8]
 8019f3a:	eeb0 0a47 	vmov.f32	s0, s14
 8019f3e:	eef0 0a67 	vmov.f32	s1, s15
 8019f42:	68f8      	ldr	r0, [r7, #12]
 8019f44:	f000 f8b4 	bl	801a0b0 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_>
 8019f48:	bf00      	nop
    }
 8019f4a:	3710      	adds	r7, #16
 8019f4c:	46bd      	mov	sp, r7
 8019f4e:	bd80      	pop	{r7, pc}

08019f50 <_ZN26core_utils_FunctionPointerIvfE4callEf>:
    R call(A1 a) {
 8019f50:	b580      	push	{r7, lr}
 8019f52:	b082      	sub	sp, #8
 8019f54:	af00      	add	r7, sp, #0
 8019f56:	6078      	str	r0, [r7, #4]
 8019f58:	ed87 0a00 	vstr	s0, [r7]
        if (_membercaller == 0 && _p.function) {
 8019f5c:	687b      	ldr	r3, [r7, #4]
 8019f5e:	695b      	ldr	r3, [r3, #20]
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d109      	bne.n	8019f78 <_ZN26core_utils_FunctionPointerIvfE4callEf+0x28>
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d005      	beq.n	8019f78 <_ZN26core_utils_FunctionPointerIvfE4callEf+0x28>
           return _p.function(a);
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	ed97 0a00 	vldr	s0, [r7]
 8019f74:	4798      	blx	r3
 8019f76:	e013      	b.n	8019fa0 <_ZN26core_utils_FunctionPointerIvfE4callEf+0x50>
        } else if (_membercaller && _p.object) {
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	695b      	ldr	r3, [r3, #20]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d00e      	beq.n	8019f9e <_ZN26core_utils_FunctionPointerIvfE4callEf+0x4e>
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	681b      	ldr	r3, [r3, #0]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d00a      	beq.n	8019f9e <_ZN26core_utils_FunctionPointerIvfE4callEf+0x4e>
           return _membercaller(_p.object, _member, a);
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	695b      	ldr	r3, [r3, #20]
 8019f8c:	687a      	ldr	r2, [r7, #4]
 8019f8e:	6810      	ldr	r0, [r2, #0]
 8019f90:	687a      	ldr	r2, [r7, #4]
 8019f92:	3204      	adds	r2, #4
 8019f94:	ed97 0a00 	vldr	s0, [r7]
 8019f98:	4611      	mov	r1, r2
 8019f9a:	4798      	blx	r3
 8019f9c:	e000      	b.n	8019fa0 <_ZN26core_utils_FunctionPointerIvfE4callEf+0x50>
        return (R)0;
 8019f9e:	bf00      	nop
    }
 8019fa0:	3708      	adds	r7, #8
 8019fa2:	46bd      	mov	sp, r7
 8019fa4:	bd80      	pop	{r7, pc}

08019fa6 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf>:
    R call(A1 a) {
 8019fa6:	b580      	push	{r7, lr}
 8019fa8:	b082      	sub	sp, #8
 8019faa:	af00      	add	r7, sp, #0
 8019fac:	6078      	str	r0, [r7, #4]
 8019fae:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	695b      	ldr	r3, [r3, #20]
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d109      	bne.n	8019fcc <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x26>
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d005      	beq.n	8019fcc <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x26>
           return _p.function(a);
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	6838      	ldr	r0, [r7, #0]
 8019fc6:	4798      	blx	r3
 8019fc8:	4603      	mov	r3, r0
 8019fca:	e012      	b.n	8019ff2 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4c>
        } else if (_membercaller && _p.object) {
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	695b      	ldr	r3, [r3, #20]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d00d      	beq.n	8019ff0 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4a>
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d009      	beq.n	8019ff0 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4a>
           return _membercaller(_p.object, _member, a);
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	695b      	ldr	r3, [r3, #20]
 8019fe0:	687a      	ldr	r2, [r7, #4]
 8019fe2:	6810      	ldr	r0, [r2, #0]
 8019fe4:	687a      	ldr	r2, [r7, #4]
 8019fe6:	1d11      	adds	r1, r2, #4
 8019fe8:	683a      	ldr	r2, [r7, #0]
 8019fea:	4798      	blx	r3
 8019fec:	4603      	mov	r3, r0
 8019fee:	e000      	b.n	8019ff2 <_ZN26core_utils_FunctionPointerIhA8_fE4callEPf+0x4c>
        return (R)0;
 8019ff0:	2300      	movs	r3, #0
    }
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	3708      	adds	r7, #8
 8019ff6:	46bd      	mov	sp, r7
 8019ff8:	bd80      	pop	{r7, pc}

08019ffa <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_>:
    R call(A1 a) {
 8019ffa:	b590      	push	{r4, r7, lr}
 8019ffc:	b085      	sub	sp, #20
 8019ffe:	af00      	add	r7, sp, #0
 801a000:	60f8      	str	r0, [r7, #12]
 801a002:	1d3b      	adds	r3, r7, #4
 801a004:	e883 0006 	stmia.w	r3, {r1, r2}
        if (_membercaller == 0 && _p.function) {
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	695b      	ldr	r3, [r3, #20]
 801a00c:	2b00      	cmp	r3, #0
 801a00e:	d10b      	bne.n	801a028 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x2e>
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	681b      	ldr	r3, [r3, #0]
 801a014:	2b00      	cmp	r3, #0
 801a016:	d007      	beq.n	801a028 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x2e>
           return _p.function(a);
 801a018:	68fb      	ldr	r3, [r7, #12]
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	1d3a      	adds	r2, r7, #4
 801a01e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a022:	4798      	blx	r3
 801a024:	4603      	mov	r3, r0
 801a026:	e013      	b.n	801a050 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x56>
        } else if (_membercaller && _p.object) {
 801a028:	68fb      	ldr	r3, [r7, #12]
 801a02a:	695b      	ldr	r3, [r3, #20]
 801a02c:	2b00      	cmp	r3, #0
 801a02e:	d00e      	beq.n	801a04e <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x54>
 801a030:	68fb      	ldr	r3, [r7, #12]
 801a032:	681b      	ldr	r3, [r3, #0]
 801a034:	2b00      	cmp	r3, #0
 801a036:	d00a      	beq.n	801a04e <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x54>
           return _membercaller(_p.object, _member, a);
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	695c      	ldr	r4, [r3, #20]
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	6818      	ldr	r0, [r3, #0]
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	1d19      	adds	r1, r3, #4
 801a044:	1d3b      	adds	r3, r7, #4
 801a046:	cb0c      	ldmia	r3, {r2, r3}
 801a048:	47a0      	blx	r4
 801a04a:	4603      	mov	r3, r0
 801a04c:	e000      	b.n	801a050 <_ZN26core_utils_FunctionPointerIh26twipr_control_trajectory_tE4callES0_+0x56>
        return (R)0;
 801a04e:	2300      	movs	r3, #0
    }
 801a050:	4618      	mov	r0, r3
 801a052:	3714      	adds	r7, #20
 801a054:	46bd      	mov	sp, r7
 801a056:	bd90      	pop	{r4, r7, pc}

0801a058 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_>:
    R call(A1 a) {
 801a058:	b580      	push	{r7, lr}
 801a05a:	b082      	sub	sp, #8
 801a05c:	af00      	add	r7, sp, #0
 801a05e:	6078      	str	r0, [r7, #4]
 801a060:	460b      	mov	r3, r1
 801a062:	70fb      	strb	r3, [r7, #3]
        if (_membercaller == 0 && _p.function) {
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	695b      	ldr	r3, [r3, #20]
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d10a      	bne.n	801a082 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x2a>
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	2b00      	cmp	r3, #0
 801a072:	d006      	beq.n	801a082 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x2a>
           return _p.function(a);
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	78fa      	ldrb	r2, [r7, #3]
 801a07a:	4610      	mov	r0, r2
 801a07c:	4798      	blx	r3
 801a07e:	4603      	mov	r3, r0
 801a080:	e012      	b.n	801a0a8 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x50>
        } else if (_membercaller && _p.object) {
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	695b      	ldr	r3, [r3, #20]
 801a086:	2b00      	cmp	r3, #0
 801a088:	d00d      	beq.n	801a0a6 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x4e>
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d009      	beq.n	801a0a6 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x4e>
           return _membercaller(_p.object, _member, a);
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	695b      	ldr	r3, [r3, #20]
 801a096:	687a      	ldr	r2, [r7, #4]
 801a098:	6810      	ldr	r0, [r2, #0]
 801a09a:	687a      	ldr	r2, [r7, #4]
 801a09c:	1d11      	adds	r1, r2, #4
 801a09e:	78fa      	ldrb	r2, [r7, #3]
 801a0a0:	4798      	blx	r3
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	e000      	b.n	801a0a8 <_ZN26core_utils_FunctionPointerIh20twipr_control_mode_tE4callES0_+0x50>
        return (R)0;
 801a0a6:	2300      	movs	r3, #0
    }
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	3708      	adds	r7, #8
 801a0ac:	46bd      	mov	sp, r7
 801a0ae:	bd80      	pop	{r7, pc}

0801a0b0 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_>:
    R call(A1 a) {
 801a0b0:	b580      	push	{r7, lr}
 801a0b2:	b084      	sub	sp, #16
 801a0b4:	af00      	add	r7, sp, #0
 801a0b6:	60f8      	str	r0, [r7, #12]
 801a0b8:	eeb0 7a40 	vmov.f32	s14, s0
 801a0bc:	eef0 7a60 	vmov.f32	s15, s1
 801a0c0:	ed87 7a01 	vstr	s14, [r7, #4]
 801a0c4:	edc7 7a02 	vstr	s15, [r7, #8]
        if (_membercaller == 0 && _p.function) {
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	695b      	ldr	r3, [r3, #20]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d10f      	bne.n	801a0f0 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x40>
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d00b      	beq.n	801a0f0 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x40>
           return _p.function(a);
 801a0d8:	68fb      	ldr	r3, [r7, #12]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	ed97 7a01 	vldr	s14, [r7, #4]
 801a0e0:	edd7 7a02 	vldr	s15, [r7, #8]
 801a0e4:	eeb0 0a47 	vmov.f32	s0, s14
 801a0e8:	eef0 0a67 	vmov.f32	s1, s15
 801a0ec:	4798      	blx	r3
 801a0ee:	e019      	b.n	801a124 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x74>
        } else if (_membercaller && _p.object) {
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	695b      	ldr	r3, [r3, #20]
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d014      	beq.n	801a122 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x72>
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d010      	beq.n	801a122 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x72>
           return _membercaller(_p.object, _member, a);
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	695b      	ldr	r3, [r3, #20]
 801a104:	68fa      	ldr	r2, [r7, #12]
 801a106:	6810      	ldr	r0, [r2, #0]
 801a108:	68fa      	ldr	r2, [r7, #12]
 801a10a:	3204      	adds	r2, #4
 801a10c:	ed97 7a01 	vldr	s14, [r7, #4]
 801a110:	edd7 7a02 	vldr	s15, [r7, #8]
 801a114:	eeb0 0a47 	vmov.f32	s0, s14
 801a118:	eef0 0a67 	vmov.f32	s1, s15
 801a11c:	4611      	mov	r1, r2
 801a11e:	4798      	blx	r3
 801a120:	e000      	b.n	801a124 <_ZN26core_utils_FunctionPointerIv21twipr_control_input_tE4callES0_+0x74>
        return (R)0;
 801a122:	bf00      	nop
    }
 801a124:	3710      	adds	r7, #16
 801a126:	46bd      	mov	sp, r7
 801a128:	bd80      	pop	{r7, pc}

0801a12a <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 801a12a:	b480      	push	{r7}
 801a12c:	b083      	sub	sp, #12
 801a12e:	af00      	add	r7, sp, #0
 801a130:	ed87 0a01 	vstr	s0, [r7, #4]
 801a134:	edd7 7a01 	vldr	s15, [r7, #4]
 801a138:	eef0 7ae7 	vabs.f32	s15, s15
 801a13c:	eeb0 0a67 	vmov.f32	s0, s15
 801a140:	370c      	adds	r7, #12
 801a142:	46bd      	mov	sp, r7
 801a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a148:	4770      	bx	lr

0801a14a <_Z23twipr_drive_torque_taskPv>:

osSemaphoreId_t torque_semaphore;

twipr_drive_input_t input_global;

void twipr_drive_torque_task(void *argument) {
 801a14a:	b580      	push	{r7, lr}
 801a14c:	b084      	sub	sp, #16
 801a14e:	af00      	add	r7, sp, #0
 801a150:	6078      	str	r0, [r7, #4]
	TWIPR_Drive *drive = (TWIPR_Drive*) argument;
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	60fb      	str	r3, [r7, #12]
	drive->torqueTaskFunction();
 801a156:	68f8      	ldr	r0, [r7, #12]
 801a158:	f000 f804 	bl	801a164 <_ZN11TWIPR_Drive18torqueTaskFunctionEv>
}
 801a15c:	bf00      	nop
 801a15e:	3710      	adds	r7, #16
 801a160:	46bd      	mov	sp, r7
 801a162:	bd80      	pop	{r7, pc}

0801a164 <_ZN11TWIPR_Drive18torqueTaskFunctionEv>:
void twipr_drive_voltage_task(void *argument) {
	TWIPR_Drive *drive = (TWIPR_Drive*) argument;
	drive->voltageTaskFunction();
}
/* ================================================= */
void TWIPR_Drive::torqueTaskFunction() {
 801a164:	b580      	push	{r7, lr}
 801a166:	b08c      	sub	sp, #48	@ 0x30
 801a168:	af00      	add	r7, sp, #0
 801a16a:	6078      	str	r0, [r7, #4]
	twipr_drive_input_t drive_input;
	twipr_drive_speed_t speed;
	float voltage = 0;
 801a16c:	f04f 0300 	mov.w	r3, #0
 801a170:	627b      	str	r3, [r7, #36]	@ 0x24
	drive_input.torque_left = 0;
 801a172:	f04f 0300 	mov.w	r3, #0
 801a176:	617b      	str	r3, [r7, #20]
	drive_input.torque_right = 0;
 801a178:	f04f 0300 	mov.w	r3, #0
 801a17c:	61bb      	str	r3, [r7, #24]
	uint32_t tick = 0;
 801a17e:	2300      	movs	r3, #0
 801a180:	623b      	str	r3, [r7, #32]
	uint32_t tick_last = 0;
 801a182:	2300      	movs	r3, #0
 801a184:	61fb      	str	r3, [r7, #28]
	uint32_t last_voltage_tick = 0;
 801a186:	2300      	movs	r3, #0
 801a188:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t mode = 0;
 801a18a:	2300      	movs	r3, #0
 801a18c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
//	osMessageQueueReset(drive_input_queue);

	while (true) {
		tick = osKernelGetTickCount();
 801a190:	f7f5 fdd0 	bl	800fd34 <osKernelGetTickCount>
 801a194:	6238      	str	r0, [r7, #32]
		if ((tick - last_voltage_tick) > 1000) {
 801a196:	6a3a      	ldr	r2, [r7, #32]
 801a198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a19a:	1ad3      	subs	r3, r2, r3
 801a19c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a1a0:	d917      	bls.n	801a1d2 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x6e>
			last_voltage_tick = tick;
 801a1a2:	6a3b      	ldr	r3, [r7, #32]
 801a1a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			voltage = this->_readVoltage();
 801a1a6:	6878      	ldr	r0, [r7, #4]
 801a1a8:	f000 fa20 	bl	801a5ec <_ZN11TWIPR_Drive12_readVoltageEv>
 801a1ac:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
			osSemaphoreAcquire(voltage_semaphore, portMAX_DELAY);
 801a1b0:	4b45      	ldr	r3, [pc, #276]	@ (801a2c8 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x164>)
 801a1b2:	681b      	ldr	r3, [r3, #0]
 801a1b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	f7f5 ffd1 	bl	8010160 <osSemaphoreAcquire>
			this->_drive_voltage = voltage;
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a1c2:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
			osSemaphoreRelease(voltage_semaphore);
 801a1c6:	4b40      	ldr	r3, [pc, #256]	@ (801a2c8 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x164>)
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	f7f6 f81a 	bl	8010204 <osSemaphoreRelease>
 801a1d0:	e066      	b.n	801a2a0 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x13c>
		} else {
			if (mode) { // Do torque
 801a1d2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d02d      	beq.n	801a236 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0xd2>
				osSemaphoreAcquire(torque_semaphore, portMAX_DELAY);
 801a1da:	4b3c      	ldr	r3, [pc, #240]	@ (801a2cc <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x168>)
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	f7f5 ffbc 	bl	8010160 <osSemaphoreAcquire>
				drive_input.torque_left = input_global.torque_left;
 801a1e8:	4b39      	ldr	r3, [pc, #228]	@ (801a2d0 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x16c>)
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	617b      	str	r3, [r7, #20]
				drive_input.torque_right = input_global.torque_right;
 801a1ee:	4b38      	ldr	r3, [pc, #224]	@ (801a2d0 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x16c>)
 801a1f0:	685b      	ldr	r3, [r3, #4]
 801a1f2:	61bb      	str	r3, [r7, #24]
				osSemaphoreRelease(torque_semaphore);
 801a1f4:	4b35      	ldr	r3, [pc, #212]	@ (801a2cc <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x168>)
 801a1f6:	681b      	ldr	r3, [r3, #0]
 801a1f8:	4618      	mov	r0, r3
 801a1fa:	f7f6 f803 	bl	8010204 <osSemaphoreRelease>
				if (this->status == TWIPR_DRIVE_STATUS_RUNNING) {
 801a1fe:	687b      	ldr	r3, [r7, #4]
 801a200:	781b      	ldrb	r3, [r3, #0]
 801a202:	2b02      	cmp	r3, #2
 801a204:	d143      	bne.n	801a28e <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x12a>
//				this->motor_left.setTorque(drive_input.torque_left);
//				osDelay(2);
					this->motor_left.setTorque(drive_input.torque_left);
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 801a20c:	edd7 7a05 	vldr	s15, [r7, #20]
 801a210:	eeb0 0a67 	vmov.f32	s0, s15
 801a214:	4618      	mov	r0, r3
 801a216:	f004 fe4b 	bl	801eeb0 <_ZN18SimplexMotionMotor9setTorqueEf>
					osDelay(2);
 801a21a:	2002      	movs	r0, #2
 801a21c:	f7f5 fe3c 	bl	800fe98 <osDelay>
					this->motor_right.setTorque(drive_input.torque_right);
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 801a226:	edd7 7a06 	vldr	s15, [r7, #24]
 801a22a:	eeb0 0a67 	vmov.f32	s0, s15
 801a22e:	4618      	mov	r0, r3
 801a230:	f004 fe3e 	bl	801eeb0 <_ZN18SimplexMotionMotor9setTorqueEf>
 801a234:	e02b      	b.n	801a28e <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x12a>
//				this->motor_left.setTorque(0);
//				osDelay(2);
//				this->motor_right.setTorque(0);
				}
			} else { // Do speed
				speed.speed_left = this->motor_left.getSpeed();
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 801a23c:	4618      	mov	r0, r3
 801a23e:	f004 fd6f 	bl	801ed20 <_ZN18SimplexMotionMotor8getSpeedEv>
 801a242:	eef0 7a40 	vmov.f32	s15, s0
 801a246:	edc7 7a03 	vstr	s15, [r7, #12]
				osDelay(2);
 801a24a:	2002      	movs	r0, #2
 801a24c:	f7f5 fe24 	bl	800fe98 <osDelay>
				speed.speed_right = this->motor_right.getSpeed();
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 801a256:	4618      	mov	r0, r3
 801a258:	f004 fd62 	bl	801ed20 <_ZN18SimplexMotionMotor8getSpeedEv>
 801a25c:	eef0 7a40 	vmov.f32	s15, s0
 801a260:	edc7 7a04 	vstr	s15, [r7, #16]
				osSemaphoreAcquire(speed_semaphore, portMAX_DELAY);
 801a264:	4b1b      	ldr	r3, [pc, #108]	@ (801a2d4 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x170>)
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801a26c:	4618      	mov	r0, r3
 801a26e:	f7f5 ff77 	bl	8010160 <osSemaphoreAcquire>
				this->_speed = speed;
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	f503 7362 	add.w	r3, r3, #904	@ 0x388
 801a278:	f107 020c 	add.w	r2, r7, #12
 801a27c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a280:	e883 0003 	stmia.w	r3, {r0, r1}
				osSemaphoreRelease(speed_semaphore);
 801a284:	4b13      	ldr	r3, [pc, #76]	@ (801a2d4 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x170>)
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	4618      	mov	r0, r3
 801a28a:	f7f5 ffbb 	bl	8010204 <osSemaphoreRelease>
			}
			mode = !mode;
 801a28e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801a292:	2b00      	cmp	r3, #0
 801a294:	bf0c      	ite	eq
 801a296:	2301      	moveq	r3, #1
 801a298:	2300      	movne	r3, #0
 801a29a:	b2db      	uxtb	r3, r3
 801a29c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		}

		if ((osKernelGetTickCount() - tick) > 20) {
 801a2a0:	f7f5 fd48 	bl	800fd34 <osKernelGetTickCount>
 801a2a4:	4602      	mov	r2, r0
 801a2a6:	6a3b      	ldr	r3, [r7, #32]
 801a2a8:	1ad3      	subs	r3, r2, r3
 801a2aa:	2b14      	cmp	r3, #20
 801a2ac:	bf8c      	ite	hi
 801a2ae:	2301      	movhi	r3, #1
 801a2b0:	2300      	movls	r3, #0
 801a2b2:	b2db      	uxtb	r3, r3
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d001      	beq.n	801a2bc <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x158>
			nop();
 801a2b8:	f7fa f9a0 	bl	80145fc <_Z3nopv>
		}
		osDelayUntil(tick + 20);
 801a2bc:	6a3b      	ldr	r3, [r7, #32]
 801a2be:	3314      	adds	r3, #20
 801a2c0:	4618      	mov	r0, r3
 801a2c2:	f7f5 fe04 	bl	800fece <osDelayUntil>
		tick = osKernelGetTickCount();
 801a2c6:	e763      	b.n	801a190 <_ZN11TWIPR_Drive18torqueTaskFunctionEv+0x2c>
 801a2c8:	24015420 	.word	0x24015420
 801a2cc:	24015424 	.word	0x24015424
 801a2d0:	24015428 	.word	0x24015428
 801a2d4:	2401541c 	.word	0x2401541c

0801a2d8 <_ZN11TWIPR_DriveC1Ev>:
		osDelay(1000);
	}
}

/* ================================================= */
TWIPR_Drive::TWIPR_Drive() {
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	b082      	sub	sp, #8
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	6078      	str	r0, [r7, #4]
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	2200      	movs	r2, #0
 801a2e4:	701a      	strb	r2, [r3, #0]
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	2200      	movs	r2, #0
 801a2ea:	805a      	strh	r2, [r3, #2]
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	3304      	adds	r3, #4
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	f002 f9e7 	bl	801c6c4 <_ZN12ModbusMasterC1Ev>
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 801a2fc:	4618      	mov	r0, r3
 801a2fe:	f004 fae2 	bl	801e8c6 <_ZN18SimplexMotionMotorC1Ev>
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 801a308:	4618      	mov	r0, r3
 801a30a:	f004 fadc 	bl	801e8c6 <_ZN18SimplexMotionMotorC1Ev>

}
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	4618      	mov	r0, r3
 801a312:	3708      	adds	r7, #8
 801a314:	46bd      	mov	sp, r7
 801a316:	bd80      	pop	{r7, pc}

0801a318 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t>:

/* ================================================= */
uint8_t TWIPR_Drive::init(twipr_drive_config_t config) {
 801a318:	b084      	sub	sp, #16
 801a31a:	b5b0      	push	{r4, r5, r7, lr}
 801a31c:	b08a      	sub	sp, #40	@ 0x28
 801a31e:	af00      	add	r7, sp, #0
 801a320:	6078      	str	r0, [r7, #4]
 801a322:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 801a326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->_config = config;
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	f503 745b 	add.w	r4, r3, #876	@ 0x36c
 801a330:	f107 053c 	add.w	r5, r7, #60	@ 0x3c
 801a334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a338:	682b      	ldr	r3, [r5, #0]
 801a33a:	6023      	str	r3, [r4, #0]

	uint8_t ret = 0;
 801a33c:	2300      	movs	r3, #0
 801a33e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	input_global.torque_left = 0;
 801a342:	4b75      	ldr	r3, [pc, #468]	@ (801a518 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x200>)
 801a344:	f04f 0200 	mov.w	r2, #0
 801a348:	601a      	str	r2, [r3, #0]
	input_global.torque_right = 0;
 801a34a:	4b73      	ldr	r3, [pc, #460]	@ (801a518 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x200>)
 801a34c:	f04f 0200 	mov.w	r2, #0
 801a350:	605a      	str	r2, [r3, #4]

	// Initialize the Modbus Interface
	this->modbus_torque.init(this->_config.modbus_config);
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	1d18      	adds	r0, r3, #4
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	f503 735d 	add.w	r3, r3, #884	@ 0x374
 801a35c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a35e:	f002 f9c1 	bl	801c6e4 <_ZN12ModbusMaster4initE15modbus_config_t>
	this->modbus_torque.start();
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	3304      	adds	r3, #4
 801a366:	4618      	mov	r0, r3
 801a368:	f002 fa5a 	bl	801c820 <_ZN12ModbusMaster5startEv>

	// Initialize the motors
	simplexmotion_config_t config_left = { .id = this->_config.id_left,
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	f893 336c 	ldrb.w	r3, [r3, #876]	@ 0x36c
			.direction = this->_config.direction_left, .modbus =
					&this->modbus_torque, };
 801a372:	753b      	strb	r3, [r7, #20]
			.direction = this->_config.direction_left, .modbus =
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	f993 336e 	ldrsb.w	r3, [r3, #878]	@ 0x36e
					&this->modbus_torque, };
 801a37a:	757b      	strb	r3, [r7, #21]
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	3304      	adds	r3, #4
 801a380:	61bb      	str	r3, [r7, #24]

	ret = this->motor_left.init(config_left);
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 801a388:	f107 0314 	add.w	r3, r7, #20
 801a38c:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a390:	f004 fb33 	bl	801e9fa <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t>
 801a394:	4603      	mov	r3, r0
 801a396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (!ret) {
 801a39a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d104      	bne.n	801a3ac <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x94>
		this->_error_handler(TWIPR_DRIVE_ERROR_INIT);
 801a3a2:	f240 2101 	movw	r1, #513	@ 0x201
 801a3a6:	6878      	ldr	r0, [r7, #4]
 801a3a8:	f000 f98e 	bl	801a6c8 <_ZN11TWIPR_Drive14_error_handlerEm>
	}

	simplexmotion_config_t config_right = { .id = this->_config.id_right,
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	f893 336d 	ldrb.w	r3, [r3, #877]	@ 0x36d
			.direction = this->_config.direction_right, .modbus =
					&this->modbus_torque, };
 801a3b2:	733b      	strb	r3, [r7, #12]
			.direction = this->_config.direction_right, .modbus =
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	f993 336f 	ldrsb.w	r3, [r3, #879]	@ 0x36f
					&this->modbus_torque, };
 801a3ba:	737b      	strb	r3, [r7, #13]
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	3304      	adds	r3, #4
 801a3c0:	613b      	str	r3, [r7, #16]

	ret = this->motor_right.init(config_right);
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 801a3c8:	f107 030c 	add.w	r3, r7, #12
 801a3cc:	e893 0006 	ldmia.w	r3, {r1, r2}
 801a3d0:	f004 fb13 	bl	801e9fa <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t>
 801a3d4:	4603      	mov	r3, r0
 801a3d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (!ret) {
 801a3da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a3de:	2b00      	cmp	r3, #0
 801a3e0:	d104      	bne.n	801a3ec <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0xd4>
		this->_error_handler(TWIPR_DRIVE_ERROR_INIT);
 801a3e2:	f240 2101 	movw	r1, #513	@ 0x201
 801a3e6:	6878      	ldr	r0, [r7, #4]
 801a3e8:	f000 f96e 	bl	801a6c8 <_ZN11TWIPR_Drive14_error_handlerEm>
	}

	// Set Torque Limits
	this->motor_left.setTorqueLimit(this->_config.torque_max);
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	f503 722f 	add.w	r2, r3, #700	@ 0x2bc
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	edd3 7adc 	vldr	s15, [r3, #880]	@ 0x370
 801a3f8:	eeb0 0a67 	vmov.f32	s0, s15
 801a3fc:	4610      	mov	r0, r2
 801a3fe:	f004 fccf 	bl	801eda0 <_ZN18SimplexMotionMotor14setTorqueLimitEf>
	this->motor_right.setTorqueLimit(this->_config.torque_max);
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	f503 7245 	add.w	r2, r3, #788	@ 0x314
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	edd3 7adc 	vldr	s15, [r3, #880]	@ 0x370
 801a40e:	eeb0 0a67 	vmov.f32	s0, s15
 801a412:	4610      	mov	r0, r2
 801a414:	f004 fcc4 	bl	801eda0 <_ZN18SimplexMotionMotor14setTorqueLimitEf>

	// Check if torque limits have been set correctly
	float torque_limit_left = this->motor_left.getTorqueLimit();
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 801a41e:	4618      	mov	r0, r3
 801a420:	f004 fd12 	bl	801ee48 <_ZN18SimplexMotionMotor14getTorqueLimitEv>
 801a424:	ed87 0a08 	vstr	s0, [r7, #32]
	float torque_limit_right = this->motor_right.getTorqueLimit();
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 801a42e:	4618      	mov	r0, r3
 801a430:	f004 fd0a 	bl	801ee48 <_ZN18SimplexMotionMotor14getTorqueLimitEv>
 801a434:	ed87 0a07 	vstr	s0, [r7, #28]

	if (!(abs(this->_config.torque_max - torque_limit_left) < 0.01)) {
 801a438:	687b      	ldr	r3, [r7, #4]
 801a43a:	ed93 7adc 	vldr	s14, [r3, #880]	@ 0x370
 801a43e:	edd7 7a08 	vldr	s15, [r7, #32]
 801a442:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a446:	eeb0 0a67 	vmov.f32	s0, s15
 801a44a:	f7ff fe6e 	bl	801a12a <_ZSt3absf>
 801a44e:	eef0 7a40 	vmov.f32	s15, s0
 801a452:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801a456:	ed9f 6b2e 	vldr	d6, [pc, #184]	@ 801a510 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x1f8>
 801a45a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a462:	bf4c      	ite	mi
 801a464:	2301      	movmi	r3, #1
 801a466:	2300      	movpl	r3, #0
 801a468:	b2db      	uxtb	r3, r3
 801a46a:	f083 0301 	eor.w	r3, r3, #1
 801a46e:	b2db      	uxtb	r3, r3
 801a470:	2b00      	cmp	r3, #0
 801a472:	d004      	beq.n	801a47e <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x166>
		this->_error_handler(TWIPR_DRIVE_ERROR_INIT);
 801a474:	f240 2101 	movw	r1, #513	@ 0x201
 801a478:	6878      	ldr	r0, [r7, #4]
 801a47a:	f000 f925 	bl	801a6c8 <_ZN11TWIPR_Drive14_error_handlerEm>
	}

	if (!(abs(this->_config.torque_max - torque_limit_right) < 0.01)) {
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	ed93 7adc 	vldr	s14, [r3, #880]	@ 0x370
 801a484:	edd7 7a07 	vldr	s15, [r7, #28]
 801a488:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a48c:	eeb0 0a67 	vmov.f32	s0, s15
 801a490:	f7ff fe4b 	bl	801a12a <_ZSt3absf>
 801a494:	eef0 7a40 	vmov.f32	s15, s0
 801a498:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801a49c:	ed9f 6b1c 	vldr	d6, [pc, #112]	@ 801a510 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x1f8>
 801a4a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4a8:	bf4c      	ite	mi
 801a4aa:	2301      	movmi	r3, #1
 801a4ac:	2300      	movpl	r3, #0
 801a4ae:	b2db      	uxtb	r3, r3
 801a4b0:	f083 0301 	eor.w	r3, r3, #1
 801a4b4:	b2db      	uxtb	r3, r3
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d004      	beq.n	801a4c4 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x1ac>
		this->_error_handler(TWIPR_DRIVE_ERROR_INIT);
 801a4ba:	f240 2101 	movw	r1, #513	@ 0x201
 801a4be:	6878      	ldr	r0, [r7, #4]
 801a4c0:	f000 f902 	bl	801a6c8 <_ZN11TWIPR_Drive14_error_handlerEm>
	}

//	drive_input_queue = osMessageQueueNew(1, sizeof(twipr_drive_input_t), NULL);
//
	osThreadNew(twipr_drive_torque_task, (void*) this,
 801a4c4:	4a15      	ldr	r2, [pc, #84]	@ (801a51c <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x204>)
 801a4c6:	6879      	ldr	r1, [r7, #4]
 801a4c8:	4815      	ldr	r0, [pc, #84]	@ (801a520 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x208>)
 801a4ca:	f7f5 fc48 	bl	800fd5e <osThreadNew>
//	osThreadNew(twipr_drive_voltage_task, (void*) this,
//			&drive_voltage_task_attributes);

//	this->_drive_voltage = this->_readVoltage();

	speed_semaphore = osSemaphoreNew(1, 1, NULL);
 801a4ce:	2200      	movs	r2, #0
 801a4d0:	2101      	movs	r1, #1
 801a4d2:	2001      	movs	r0, #1
 801a4d4:	f7f5 fdba 	bl	801004c <osSemaphoreNew>
 801a4d8:	4603      	mov	r3, r0
 801a4da:	4a12      	ldr	r2, [pc, #72]	@ (801a524 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x20c>)
 801a4dc:	6013      	str	r3, [r2, #0]
	torque_semaphore = osSemaphoreNew(1, 1, NULL);
 801a4de:	2200      	movs	r2, #0
 801a4e0:	2101      	movs	r1, #1
 801a4e2:	2001      	movs	r0, #1
 801a4e4:	f7f5 fdb2 	bl	801004c <osSemaphoreNew>
 801a4e8:	4603      	mov	r3, r0
 801a4ea:	4a0f      	ldr	r2, [pc, #60]	@ (801a528 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x210>)
 801a4ec:	6013      	str	r3, [r2, #0]
	voltage_semaphore = osSemaphoreNew(1, 1, NULL);
 801a4ee:	2200      	movs	r2, #0
 801a4f0:	2101      	movs	r1, #1
 801a4f2:	2001      	movs	r0, #1
 801a4f4:	f7f5 fdaa 	bl	801004c <osSemaphoreNew>
 801a4f8:	4603      	mov	r3, r0
 801a4fa:	4a0c      	ldr	r2, [pc, #48]	@ (801a52c <_ZN11TWIPR_Drive4initE20twipr_drive_config_t+0x214>)
 801a4fc:	6013      	str	r3, [r2, #0]

	return 1;
 801a4fe:	2301      	movs	r3, #1
}
 801a500:	4618      	mov	r0, r3
 801a502:	3728      	adds	r7, #40	@ 0x28
 801a504:	46bd      	mov	sp, r7
 801a506:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801a50a:	b004      	add	sp, #16
 801a50c:	4770      	bx	lr
 801a50e:	bf00      	nop
 801a510:	47ae147b 	.word	0x47ae147b
 801a514:	3f847ae1 	.word	0x3f847ae1
 801a518:	24015428 	.word	0x24015428
 801a51c:	0802372c 	.word	0x0802372c
 801a520:	0801a14b 	.word	0x0801a14b
 801a524:	2401541c 	.word	0x2401541c
 801a528:	24015424 	.word	0x24015424
 801a52c:	24015420 	.word	0x24015420

0801a530 <_ZN11TWIPR_Drive5startEv>:
/* ================================================= */
void TWIPR_Drive::start() {
 801a530:	b580      	push	{r7, lr}
 801a532:	b082      	sub	sp, #8
 801a534:	af00      	add	r7, sp, #0
 801a536:	6078      	str	r0, [r7, #4]
	this->motor_left.start(SIMPLEXMOTION_MODE_TORQUE);
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 801a53e:	2128      	movs	r1, #40	@ 0x28
 801a540:	4618      	mov	r0, r3
 801a542:	f004 fa92 	bl	801ea6a <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t>
	this->motor_right.start(SIMPLEXMOTION_MODE_TORQUE);
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 801a54c:	2128      	movs	r1, #40	@ 0x28
 801a54e:	4618      	mov	r0, r3
 801a550:	f004 fa8b 	bl	801ea6a <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t>
	this->status = TWIPR_DRIVE_STATUS_RUNNING;
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	2202      	movs	r2, #2
 801a558:	701a      	strb	r2, [r3, #0]
}
 801a55a:	bf00      	nop
 801a55c:	3708      	adds	r7, #8
 801a55e:	46bd      	mov	sp, r7
 801a560:	bd80      	pop	{r7, pc}

0801a562 <_ZN11TWIPR_Drive13startup_checkEv>:
	this->motor_left.stop();
	this->motor_right.stop();
	this->status = TWIPR_DRIVE_STATUS_STOP;
}
/* ================================================= */
uint8_t TWIPR_Drive::startup_check() {
 801a562:	b580      	push	{r7, lr}
 801a564:	b084      	sub	sp, #16
 801a566:	af00      	add	r7, sp, #0
 801a568:	6078      	str	r0, [r7, #4]
	// Check both motors
	uint8_t check_left = this->motor_left.startup_check();
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 801a570:	4618      	mov	r0, r3
 801a572:	f004 faab 	bl	801eacc <_ZN18SimplexMotionMotor13startup_checkEv>
 801a576:	4603      	mov	r3, r0
 801a578:	73fb      	strb	r3, [r7, #15]
	osDelay(250);
 801a57a:	20fa      	movs	r0, #250	@ 0xfa
 801a57c:	f7f5 fc8c 	bl	800fe98 <osDelay>
	uint8_t check_right = this->motor_right.startup_check();
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 801a586:	4618      	mov	r0, r3
 801a588:	f004 faa0 	bl	801eacc <_ZN18SimplexMotionMotor13startup_checkEv>
 801a58c:	4603      	mov	r3, r0
 801a58e:	73bb      	strb	r3, [r7, #14]

	if (!check_left) {
 801a590:	7bfb      	ldrb	r3, [r7, #15]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d101      	bne.n	801a59a <_ZN11TWIPR_Drive13startup_checkEv+0x38>
		return 0;
 801a596:	2300      	movs	r3, #0
 801a598:	e005      	b.n	801a5a6 <_ZN11TWIPR_Drive13startup_checkEv+0x44>
	}

	if (!check_right) {
 801a59a:	7bbb      	ldrb	r3, [r7, #14]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d101      	bne.n	801a5a4 <_ZN11TWIPR_Drive13startup_checkEv+0x42>
		return 0;
 801a5a0:	2300      	movs	r3, #0
 801a5a2:	e000      	b.n	801a5a6 <_ZN11TWIPR_Drive13startup_checkEv+0x44>
	}

	return 1;
 801a5a4:	2301      	movs	r3, #1
}
 801a5a6:	4618      	mov	r0, r3
 801a5a8:	3710      	adds	r7, #16
 801a5aa:	46bd      	mov	sp, r7
 801a5ac:	bd80      	pop	{r7, pc}
	...

0801a5b0 <_ZN11TWIPR_Drive10getVoltageEv>:
/* ================================================= */
void TWIPR_Drive::update() {
	// Read status of motors and check if everything is running fine
}
/* ================================================= */
float TWIPR_Drive::getVoltage() {
 801a5b0:	b580      	push	{r7, lr}
 801a5b2:	b084      	sub	sp, #16
 801a5b4:	af00      	add	r7, sp, #0
 801a5b6:	6078      	str	r0, [r7, #4]
	osSemaphoreAcquire(voltage_semaphore, portMAX_DELAY);
 801a5b8:	4b0b      	ldr	r3, [pc, #44]	@ (801a5e8 <_ZN11TWIPR_Drive10getVoltageEv+0x38>)
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	f7f5 fdcd 	bl	8010160 <osSemaphoreAcquire>
	float voltage = this->_drive_voltage;
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	f8d3 3390 	ldr.w	r3, [r3, #912]	@ 0x390
 801a5cc:	60fb      	str	r3, [r7, #12]
	osSemaphoreRelease(voltage_semaphore);
 801a5ce:	4b06      	ldr	r3, [pc, #24]	@ (801a5e8 <_ZN11TWIPR_Drive10getVoltageEv+0x38>)
 801a5d0:	681b      	ldr	r3, [r3, #0]
 801a5d2:	4618      	mov	r0, r3
 801a5d4:	f7f5 fe16 	bl	8010204 <osSemaphoreRelease>

	return voltage;
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	ee07 3a90 	vmov	s15, r3
}
 801a5de:	eeb0 0a67 	vmov.f32	s0, s15
 801a5e2:	3710      	adds	r7, #16
 801a5e4:	46bd      	mov	sp, r7
 801a5e6:	bd80      	pop	{r7, pc}
 801a5e8:	24015420 	.word	0x24015420

0801a5ec <_ZN11TWIPR_Drive12_readVoltageEv>:
/* ================================================= */
float TWIPR_Drive::_readVoltage() {
 801a5ec:	b580      	push	{r7, lr}
 801a5ee:	b082      	sub	sp, #8
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	6078      	str	r0, [r7, #4]
	return this->motor_left.getVoltage();
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	f004 fb5c 	bl	801ecb8 <_ZN18SimplexMotionMotor10getVoltageEv>
 801a600:	eef0 7a40 	vmov.f32	s15, s0
}
 801a604:	eeb0 0a67 	vmov.f32	s0, s15
 801a608:	3708      	adds	r7, #8
 801a60a:	46bd      	mov	sp, r7
 801a60c:	bd80      	pop	{r7, pc}
	...

0801a610 <_ZN11TWIPR_Drive8getSpeedEv>:
/* ================================================= */
twipr_drive_speed_t TWIPR_Drive::getSpeed() {
 801a610:	b580      	push	{r7, lr}
 801a612:	b088      	sub	sp, #32
 801a614:	af00      	add	r7, sp, #0
 801a616:	60f8      	str	r0, [r7, #12]

	twipr_drive_speed_t speed;

	// TODO
	osSemaphoreAcquire(speed_semaphore, portMAX_DELAY);
 801a618:	4b14      	ldr	r3, [pc, #80]	@ (801a66c <_ZN11TWIPR_Drive8getSpeedEv+0x5c>)
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801a620:	4618      	mov	r0, r3
 801a622:	f7f5 fd9d 	bl	8010160 <osSemaphoreAcquire>
	speed = this->_speed;
 801a626:	68fa      	ldr	r2, [r7, #12]
 801a628:	f107 0310 	add.w	r3, r7, #16
 801a62c:	f502 7262 	add.w	r2, r2, #904	@ 0x388
 801a630:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a634:	e883 0003 	stmia.w	r3, {r0, r1}
	osSemaphoreRelease(speed_semaphore);
 801a638:	4b0c      	ldr	r3, [pc, #48]	@ (801a66c <_ZN11TWIPR_Drive8getSpeedEv+0x5c>)
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	4618      	mov	r0, r3
 801a63e:	f7f5 fde1 	bl	8010204 <osSemaphoreRelease>
	return speed;
 801a642:	f107 0318 	add.w	r3, r7, #24
 801a646:	f107 0210 	add.w	r2, r7, #16
 801a64a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a64e:	e883 0003 	stmia.w	r3, {r0, r1}
 801a652:	69ba      	ldr	r2, [r7, #24]
 801a654:	69fb      	ldr	r3, [r7, #28]
 801a656:	ee07 2a10 	vmov	s14, r2
 801a65a:	ee07 3a90 	vmov	s15, r3
}
 801a65e:	eeb0 0a47 	vmov.f32	s0, s14
 801a662:	eef0 0a67 	vmov.f32	s1, s15
 801a666:	3720      	adds	r7, #32
 801a668:	46bd      	mov	sp, r7
 801a66a:	bd80      	pop	{r7, pc}
 801a66c:	2401541c 	.word	0x2401541c

0801a670 <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t>:
/* ================================================= */
void TWIPR_Drive::setTorque(twipr_drive_input_t input) {
 801a670:	b580      	push	{r7, lr}
 801a672:	b084      	sub	sp, #16
 801a674:	af00      	add	r7, sp, #0
 801a676:	60f8      	str	r0, [r7, #12]
 801a678:	eeb0 7a40 	vmov.f32	s14, s0
 801a67c:	eef0 7a60 	vmov.f32	s15, s1
 801a680:	ed87 7a01 	vstr	s14, [r7, #4]
 801a684:	edc7 7a02 	vstr	s15, [r7, #8]

	if (this->status != TWIPR_DRIVE_STATUS_RUNNING) {
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	781b      	ldrb	r3, [r3, #0]
 801a68c:	2b02      	cmp	r3, #2
 801a68e:	d112      	bne.n	801a6b6 <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x46>
		return;
	}

	osSemaphoreAcquire(torque_semaphore, portMAX_DELAY);
 801a690:	4b0b      	ldr	r3, [pc, #44]	@ (801a6c0 <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x50>)
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801a698:	4618      	mov	r0, r3
 801a69a:	f7f5 fd61 	bl	8010160 <osSemaphoreAcquire>
	input_global.torque_left = input.torque_left;
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	4a08      	ldr	r2, [pc, #32]	@ (801a6c4 <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x54>)
 801a6a2:	6013      	str	r3, [r2, #0]
	input_global.torque_right = input.torque_right;
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	4a07      	ldr	r2, [pc, #28]	@ (801a6c4 <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x54>)
 801a6a8:	6053      	str	r3, [r2, #4]
	osSemaphoreRelease(torque_semaphore);
 801a6aa:	4b05      	ldr	r3, [pc, #20]	@ (801a6c0 <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x50>)
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	4618      	mov	r0, r3
 801a6b0:	f7f5 fda8 	bl	8010204 <osSemaphoreRelease>
 801a6b4:	e000      	b.n	801a6b8 <_ZN11TWIPR_Drive9setTorqueE19twipr_drive_input_t+0x48>
		return;
 801a6b6:	bf00      	nop

//	osMessageQueuePut(drive_input_queue, &input, 0, 0);

//	this->motor_left.setTorque(input.torque_left);
//	this->motor_right.setTorque(input.torque_right);
}
 801a6b8:	3710      	adds	r7, #16
 801a6ba:	46bd      	mov	sp, r7
 801a6bc:	bd80      	pop	{r7, pc}
 801a6be:	bf00      	nop
 801a6c0:	24015424 	.word	0x24015424
 801a6c4:	24015428 	.word	0x24015428

0801a6c8 <_ZN11TWIPR_Drive14_error_handlerEm>:
	this->motor_left.setTorque(torque_left);
	this->motor_right.setTorque(torque_right);
}

/* ================================================= */
void TWIPR_Drive::_error_handler(uint32_t error) {
 801a6c8:	b580      	push	{r7, lr}
 801a6ca:	b082      	sub	sp, #8
 801a6cc:	af00      	add	r7, sp, #0
 801a6ce:	6078      	str	r0, [r7, #4]
 801a6d0:	6039      	str	r1, [r7, #0]

	// Set the state to error
	this->status = TWIPR_DRIVE_STATUS_ERROR;
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	2203      	movs	r2, #3
 801a6d6:	701a      	strb	r2, [r3, #0]
	this->error = (twipr_drive_error_t) error;
 801a6d8:	683b      	ldr	r3, [r7, #0]
 801a6da:	b29a      	uxth	r2, r3
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	805a      	strh	r2, [r3, #2]

	// Call the error handler of the TWIPR
	twipr_error_handler(error);
 801a6e0:	6838      	ldr	r0, [r7, #0]
 801a6e2:	f000 f819 	bl	801a718 <_Z19twipr_error_handlerm>
}
 801a6e6:	bf00      	nop
 801a6e8:	3708      	adds	r7, #8
 801a6ea:	46bd      	mov	sp, r7
 801a6ec:	bd80      	pop	{r7, pc}

0801a6ee <_Z5delaym>:

inline void delay(uint32_t msec){
 801a6ee:	b580      	push	{r7, lr}
 801a6f0:	b084      	sub	sp, #16
 801a6f2:	af00      	add	r7, sp, #0
 801a6f4:	6078      	str	r0, [r7, #4]
#if CORE_CONFIG_USE_RTOS

	osKernelState_t state = osKernelGetState();
 801a6f6:	f7f5 fad5 	bl	800fca4 <osKernelGetState>
 801a6fa:	60f8      	str	r0, [r7, #12]
	if (state == osKernelRunning){
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	2b02      	cmp	r3, #2
 801a700:	d103      	bne.n	801a70a <_Z5delaym+0x1c>
		osDelay(msec);
 801a702:	6878      	ldr	r0, [r7, #4]
 801a704:	f7f5 fbc8 	bl	800fe98 <osDelay>
	}

#else
	HAL_Delay(msec);
#endif
}
 801a708:	e002      	b.n	801a710 <_Z5delaym+0x22>
		HAL_Delay(msec);
 801a70a:	6878      	ldr	r0, [r7, #4]
 801a70c:	f7e7 fe00 	bl	8002310 <HAL_Delay>
}
 801a710:	bf00      	nop
 801a712:	3710      	adds	r7, #16
 801a714:	46bd      	mov	sp, r7
 801a716:	bd80      	pop	{r7, pc}

0801a718 <_Z19twipr_error_handlerm>:
 */


#include "twipr_errors.h"

void twipr_error_handler(uint32_t errorcode) {
 801a718:	b580      	push	{r7, lr}
 801a71a:	b086      	sub	sp, #24
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	6078      	str	r0, [r7, #4]

	// Turn on the LED2

	// if the error code starts with 0x00 then it's severe and should result in a firmware stop
	if (errorcode >> 24 == 0x00) {
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	0e1b      	lsrs	r3, r3, #24
 801a724:	2b00      	cmp	r3, #0
 801a726:	d13b      	bne.n	801a7a0 <_Z19twipr_error_handlerm+0x88>
		// Try to suspend all tasks
		vTaskSuspendAll();
 801a728:	f7f7 fb4e 	bl	8011dc8 <vTaskSuspendAll>
		while (true) {
			uint8_t id1 = errorcode >> 8 & 0xFF;
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	0a1b      	lsrs	r3, r3, #8
 801a730:	73fb      	strb	r3, [r7, #15]
			uint8_t id2 = errorcode & 0xFF;
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	73bb      	strb	r3, [r7, #14]

			for (int i = 0; i < id1; i++) {
 801a736:	2300      	movs	r3, #0
 801a738:	617b      	str	r3, [r7, #20]
 801a73a:	e00e      	b.n	801a75a <_Z19twipr_error_handlerm+0x42>
				rc_status_led_2.on();
 801a73c:	481a      	ldr	r0, [pc, #104]	@ (801a7a8 <_Z19twipr_error_handlerm+0x90>)
 801a73e:	f003 ff12 	bl	801e566 <_ZN17core_hardware_LED2onEv>
				HAL_Delay(150);
 801a742:	2096      	movs	r0, #150	@ 0x96
 801a744:	f7e7 fde4 	bl	8002310 <HAL_Delay>
				rc_status_led_2.off();
 801a748:	4817      	ldr	r0, [pc, #92]	@ (801a7a8 <_Z19twipr_error_handlerm+0x90>)
 801a74a:	f003 ff1c 	bl	801e586 <_ZN17core_hardware_LED3offEv>
				HAL_Delay(150);
 801a74e:	2096      	movs	r0, #150	@ 0x96
 801a750:	f7e7 fdde 	bl	8002310 <HAL_Delay>
			for (int i = 0; i < id1; i++) {
 801a754:	697b      	ldr	r3, [r7, #20]
 801a756:	3301      	adds	r3, #1
 801a758:	617b      	str	r3, [r7, #20]
 801a75a:	7bfb      	ldrb	r3, [r7, #15]
 801a75c:	697a      	ldr	r2, [r7, #20]
 801a75e:	429a      	cmp	r2, r3
 801a760:	dbec      	blt.n	801a73c <_Z19twipr_error_handlerm+0x24>
			}
			delay(750);
 801a762:	f240 20ee 	movw	r0, #750	@ 0x2ee
 801a766:	f7ff ffc2 	bl	801a6ee <_Z5delaym>
			for (int i = 0; i < id2; i++) {
 801a76a:	2300      	movs	r3, #0
 801a76c:	613b      	str	r3, [r7, #16]
 801a76e:	e00e      	b.n	801a78e <_Z19twipr_error_handlerm+0x76>
				rc_status_led_2.on();
 801a770:	480d      	ldr	r0, [pc, #52]	@ (801a7a8 <_Z19twipr_error_handlerm+0x90>)
 801a772:	f003 fef8 	bl	801e566 <_ZN17core_hardware_LED2onEv>
				HAL_Delay(150);
 801a776:	2096      	movs	r0, #150	@ 0x96
 801a778:	f7e7 fdca 	bl	8002310 <HAL_Delay>
				rc_status_led_2.off();
 801a77c:	480a      	ldr	r0, [pc, #40]	@ (801a7a8 <_Z19twipr_error_handlerm+0x90>)
 801a77e:	f003 ff02 	bl	801e586 <_ZN17core_hardware_LED3offEv>
				HAL_Delay(150);
 801a782:	2096      	movs	r0, #150	@ 0x96
 801a784:	f7e7 fdc4 	bl	8002310 <HAL_Delay>
			for (int i = 0; i < id2; i++) {
 801a788:	693b      	ldr	r3, [r7, #16]
 801a78a:	3301      	adds	r3, #1
 801a78c:	613b      	str	r3, [r7, #16]
 801a78e:	7bbb      	ldrb	r3, [r7, #14]
 801a790:	693a      	ldr	r2, [r7, #16]
 801a792:	429a      	cmp	r2, r3
 801a794:	dbec      	blt.n	801a770 <_Z19twipr_error_handlerm+0x58>
			}
			HAL_Delay(1500);
 801a796:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 801a79a:	f7e7 fdb9 	bl	8002310 <HAL_Delay>
		}
 801a79e:	e7c5      	b.n	801a72c <_Z19twipr_error_handlerm+0x14>
	}
}
 801a7a0:	bf00      	nop
 801a7a2:	3718      	adds	r7, #24
 801a7a4:	46bd      	mov	sp, r7
 801a7a6:	bd80      	pop	{r7, pc}
 801a7a8:	2401dfc8 	.word	0x2401dfc8

0801a7ac <_ZN8Madgwick5beginEf>:

//-------------------------------------------------------------------------------------------
// Function declarations
public:
    Madgwick(void);
    void begin(float sampleFrequency) { invSampleFreq = 1.0f / sampleFrequency; }
 801a7ac:	b480      	push	{r7}
 801a7ae:	b083      	sub	sp, #12
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
 801a7b4:	ed87 0a00 	vstr	s0, [r7]
 801a7b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a7bc:	ed97 7a00 	vldr	s14, [r7]
 801a7c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	edc3 7a04 	vstr	s15, [r3, #16]
 801a7ca:	bf00      	nop
 801a7cc:	370c      	adds	r7, #12
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7d4:	4770      	bx	lr

0801a7d6 <_ZN8Madgwick14getRollRadiansEv>:
    }
    float getYaw() {
        if (!anglesComputed) computeAngles();
        return yaw * 57.29578f + 180.0f;
    }
    float getRollRadians() {
 801a7d6:	b580      	push	{r7, lr}
 801a7d8:	b082      	sub	sp, #8
 801a7da:	af00      	add	r7, sp, #0
 801a7dc:	6078      	str	r0, [r7, #4]
        if (!anglesComputed) computeAngles();
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	7d1b      	ldrb	r3, [r3, #20]
 801a7e2:	2b00      	cmp	r3, #0
 801a7e4:	d102      	bne.n	801a7ec <_ZN8Madgwick14getRollRadiansEv+0x16>
 801a7e6:	6878      	ldr	r0, [r7, #4]
 801a7e8:	f003 fdf4 	bl	801e3d4 <_ZN8Madgwick13computeAnglesEv>
        return roll;
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	685b      	ldr	r3, [r3, #4]
 801a7f0:	ee07 3a90 	vmov	s15, r3
    }
 801a7f4:	eeb0 0a67 	vmov.f32	s0, s15
 801a7f8:	3708      	adds	r7, #8
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	bd80      	pop	{r7, pc}

0801a7fe <_ZN16TWIPR_EstimationC1Ev>:

static const osThreadAttr_t estimation_task_attributes = { .name = "estimation",
		.stack_size = 1280 * 4, .priority = (osPriority_t) osPriorityNormal, };

/* ======================================================= */
TWIPR_Estimation::TWIPR_Estimation() {
 801a7fe:	b580      	push	{r7, lr}
 801a800:	b082      	sub	sp, #8
 801a802:	af00      	add	r7, sp, #0
 801a804:	6078      	str	r0, [r7, #4]
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	2200      	movs	r2, #0
 801a80a:	f8a3 2824 	strh.w	r2, [r3, #2084]	@ 0x824
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	f603 032c 	addw	r3, r3, #2092	@ 0x82c
 801a814:	4618      	mov	r0, r3
 801a816:	f003 fa4f 	bl	801dcb8 <_ZN8MadgwickC1Ev>
	this->status = TWIPR_ESTIMATION_STATUS_NONE;
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	2200      	movs	r2, #0
 801a81e:	701a      	strb	r2, [r3, #0]
}
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	4618      	mov	r0, r3
 801a824:	3708      	adds	r7, #8
 801a826:	46bd      	mov	sp, r7
 801a828:	bd80      	pop	{r7, pc}

0801a82a <_ZN16TWIPR_Estimation4initE25twipr_estimation_config_t>:

/* ======================================================= */
void TWIPR_Estimation::init(twipr_estimation_config_t config) {
 801a82a:	b084      	sub	sp, #16
 801a82c:	b5b0      	push	{r4, r5, r7, lr}
 801a82e:	b082      	sub	sp, #8
 801a830:	af00      	add	r7, sp, #0
 801a832:	6078      	str	r0, [r7, #4]
 801a834:	f107 001c 	add.w	r0, r7, #28
 801a838:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	f103 042c 	add.w	r4, r3, #44	@ 0x2c
 801a842:	f107 051c 	add.w	r5, r7, #28
 801a846:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a84a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a84c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a84e:	682b      	ldr	r3, [r5, #0]
 801a850:	6023      	str	r3, [r4, #0]

	// Initialize the sensors

	this->status = TWIPR_ESTIMATION_STATUS_IDLE;
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	2201      	movs	r2, #1
 801a856:	701a      	strb	r2, [r3, #0]
	this->_semaphore = osSemaphoreNew(1, 1, NULL);
 801a858:	2200      	movs	r2, #0
 801a85a:	2101      	movs	r1, #1
 801a85c:	2001      	movs	r0, #1
 801a85e:	f7f5 fbf5 	bl	801004c <osSemaphoreNew>
 801a862:	4602      	mov	r2, r0
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	f8c3 2828 	str.w	r2, [r3, #2088]	@ 0x828
}
 801a86a:	bf00      	nop
 801a86c:	3708      	adds	r7, #8
 801a86e:	46bd      	mov	sp, r7
 801a870:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801a874:	b004      	add	sp, #16
 801a876:	4770      	bx	lr

0801a878 <_ZN16TWIPR_Estimation5startEv>:

/* ======================================================= */
void TWIPR_Estimation::start() {
 801a878:	b580      	push	{r7, lr}
 801a87a:	b082      	sub	sp, #8
 801a87c:	af00      	add	r7, sp, #0
 801a87e:	6078      	str	r0, [r7, #4]
	osThreadNew(estimation_task, (void*) this, &estimation_task_attributes);
 801a880:	4a04      	ldr	r2, [pc, #16]	@ (801a894 <_ZN16TWIPR_Estimation5startEv+0x1c>)
 801a882:	6879      	ldr	r1, [r7, #4]
 801a884:	4804      	ldr	r0, [pc, #16]	@ (801a898 <_ZN16TWIPR_Estimation5startEv+0x20>)
 801a886:	f7f5 fa6a 	bl	800fd5e <osThreadNew>
}
 801a88a:	bf00      	nop
 801a88c:	3708      	adds	r7, #8
 801a88e:	46bd      	mov	sp, r7
 801a890:	bd80      	pop	{r7, pc}
 801a892:	bf00      	nop
 801a894:	08023750 	.word	0x08023750
 801a898:	0801abe1 	.word	0x0801abe1

0801a89c <_ZN16TWIPR_Estimation13task_functionEv>:
/* ======================================================= */
void TWIPR_Estimation::reset() {
	twipr_error_handler(0);
}
/* ======================================================= */
void TWIPR_Estimation::task_function() {
 801a89c:	b580      	push	{r7, lr}
 801a89e:	b084      	sub	sp, #16
 801a8a0:	af00      	add	r7, sp, #0
 801a8a2:	6078      	str	r0, [r7, #4]

	this->_orientation_fusion.begin((float) TWIPR_ESTIMATION_FREQUENCY);
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	f603 032c 	addw	r3, r3, #2092	@ 0x82c
 801a8aa:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 801a8d4 <_ZN16TWIPR_Estimation13task_functionEv+0x38>
 801a8ae:	4618      	mov	r0, r3
 801a8b0:	f7ff ff7c 	bl	801a7ac <_ZN8Madgwick5beginEf>
	this->status = TWIPR_ESTIMATION_STATUS_OK;
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	2202      	movs	r2, #2
 801a8b8:	701a      	strb	r2, [r3, #0]
//	this->_sensors.calibrate();
	uint32_t ticks;

	while (true) {
		ticks = osKernelGetTickCount();
 801a8ba:	f7f5 fa3b 	bl	800fd34 <osKernelGetTickCount>
 801a8be:	60f8      	str	r0, [r7, #12]
		this->update();
 801a8c0:	6878      	ldr	r0, [r7, #4]
 801a8c2:	f000 f809 	bl	801a8d8 <_ZN16TWIPR_Estimation6updateEv>
		osDelayUntil(ticks + (uint32_t) (1000.0 / TWIPR_ESTIMATION_FREQUENCY));
 801a8c6:	68fb      	ldr	r3, [r7, #12]
 801a8c8:	330a      	adds	r3, #10
 801a8ca:	4618      	mov	r0, r3
 801a8cc:	f7f5 faff 	bl	800fece <osDelayUntil>
		ticks = osKernelGetTickCount();
 801a8d0:	bf00      	nop
 801a8d2:	e7f2      	b.n	801a8ba <_ZN16TWIPR_Estimation13task_functionEv+0x1e>
 801a8d4:	42c80000 	.word	0x42c80000

0801a8d8 <_ZN16TWIPR_Estimation6updateEv>:
/* ======================================================= */
void TWIPR_Estimation::stop() {
	twipr_error_handler(0);
}
/* ======================================================= */
void TWIPR_Estimation::update() {
 801a8d8:	b5b0      	push	{r4, r5, r7, lr}
 801a8da:	b090      	sub	sp, #64	@ 0x40
 801a8dc:	af00      	add	r7, sp, #0
 801a8de:	6078      	str	r0, [r7, #4]

	// Update the Sensors
	this->config.sensors->update();
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a8e4:	4618      	mov	r0, r3
 801a8e6:	f000 f9f8 	bl	801acda <_ZN13TWIPR_Sensors6updateEv>

	// Read the sensor data
	twipr_sensors_data_t data = this->config.sensors->getData();
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801a8ee:	f107 030c 	add.w	r3, r7, #12
 801a8f2:	4611      	mov	r1, r2
 801a8f4:	4618      	mov	r0, r3
 801a8f6:	f000 fa01 	bl	801acfc <_ZN13TWIPR_Sensors7getDataEv>

	// Orientation Estimation
	this->_orientation_fusion.updateIMU(data.gyr.x, data.gyr.y, data.gyr.z,
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	f603 032c 	addw	r3, r3, #2092	@ 0x82c
 801a900:	edd7 7a08 	vldr	s15, [r7, #32]
 801a904:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 801a908:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 801a90c:	ed97 6a05 	vldr	s12, [r7, #20]
 801a910:	edd7 5a06 	vldr	s11, [r7, #24]
 801a914:	ed97 5a07 	vldr	s10, [r7, #28]
 801a918:	eef0 2a45 	vmov.f32	s5, s10
 801a91c:	eeb0 2a65 	vmov.f32	s4, s11
 801a920:	eef0 1a46 	vmov.f32	s3, s12
 801a924:	eeb0 1a66 	vmov.f32	s2, s13
 801a928:	eef0 0a47 	vmov.f32	s1, s14
 801a92c:	eeb0 0a67 	vmov.f32	s0, s15
 801a930:	4618      	mov	r0, r3
 801a932:	f003 f9e9 	bl	801dd08 <_ZN8Madgwick9updateIMUEffffff>
			data.acc.x, data.acc.y, data.acc.z);

	// Read the pitch angle
	float theta = this->_orientation_fusion.getRollRadians();
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	f603 032c 	addw	r3, r3, #2092	@ 0x82c
 801a93c:	4618      	mov	r0, r3
 801a93e:	f7ff ff4a 	bl	801a7d6 <_ZN8Madgwick14getRollRadiansEv>
 801a942:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	float theta_dot = data.gyr.x;
 801a946:	6a3b      	ldr	r3, [r7, #32]
 801a948:	63bb      	str	r3, [r7, #56]	@ 0x38

	// Get the speed and yaw speed
	float v = (data.speed_left + data.speed_right) / 2 * this->config.model.r_wheel;
 801a94a:	ed97 7a03 	vldr	s14, [r7, #12]
 801a94e:	edd7 7a04 	vldr	s15, [r7, #16]
 801a952:	ee77 7a27 	vadd.f32	s15, s14, s15
 801a956:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801a95a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 801a964:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a968:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float psi_dot = (data.speed_right - data.speed_left) * this->config.model.r_wheel
 801a96c:	ed97 7a04 	vldr	s14, [r7, #16]
 801a970:	edd7 7a03 	vldr	s15, [r7, #12]
 801a974:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 801a97e:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ this->config.model.distance_wheels;
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
	float psi_dot = (data.speed_right - data.speed_left) * this->config.model.r_wheel
 801a988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a98c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

	// Set the current state
	osSemaphoreAcquire(_semaphore, portMAX_DELAY);
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
 801a996:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801a99a:	4618      	mov	r0, r3
 801a99c:	f7f5 fbe0 	bl	8010160 <osSemaphoreAcquire>
	this->state.v = v;
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a9a4:	605a      	str	r2, [r3, #4]
	this->state.theta = theta;
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a9aa:	609a      	str	r2, [r3, #8]
	this->state.theta_dot = theta_dot;
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a9b0:	60da      	str	r2, [r3, #12]
	this->state.psi = 0;
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	f04f 0200 	mov.w	r2, #0
 801a9b8:	611a      	str	r2, [r3, #16]
	this->state.psi_dot = psi_dot;
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a9be:	615a      	str	r2, [r3, #20]

	// Calculate the average
	this->mean_state.v = this->mean_state.v
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	ed93 7a06 	vldr	s14, [r3, #24]
			- (this->_state_buffer[this->_state_buffer_index].v
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	@ 0x824
 801a9cc:	4619      	mov	r1, r3
 801a9ce:	687a      	ldr	r2, [r7, #4]
 801a9d0:	460b      	mov	r3, r1
 801a9d2:	009b      	lsls	r3, r3, #2
 801a9d4:	440b      	add	r3, r1
 801a9d6:	009b      	lsls	r3, r3, #2
 801a9d8:	4413      	add	r3, r2
 801a9da:	3354      	adds	r3, #84	@ 0x54
 801a9dc:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 801a9e0:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 801ab70 <_ZN16TWIPR_Estimation6updateEv+0x298>
 801a9e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].v
 801a9e8:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.v / (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	edd3 6a01 	vldr	s13, [r3, #4]
 801a9f2:	ed9f 6a5f 	vldr	s12, [pc, #380]	@ 801ab70 <_ZN16TWIPR_Estimation6updateEv+0x298>
 801a9f6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801a9fa:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.v = this->mean_state.v
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	edc3 7a06 	vstr	s15, [r3, #24]
	this->mean_state.theta = this->mean_state.theta
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	ed93 7a07 	vldr	s14, [r3, #28]
			- (this->_state_buffer[this->_state_buffer_index].theta
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	@ 0x824
 801aa10:	4619      	mov	r1, r3
 801aa12:	687a      	ldr	r2, [r7, #4]
 801aa14:	460b      	mov	r3, r1
 801aa16:	009b      	lsls	r3, r3, #2
 801aa18:	440b      	add	r3, r1
 801aa1a:	009b      	lsls	r3, r3, #2
 801aa1c:	4413      	add	r3, r2
 801aa1e:	3358      	adds	r3, #88	@ 0x58
 801aa20:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 801aa24:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 801ab70 <_ZN16TWIPR_Estimation6updateEv+0x298>
 801aa28:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].theta
 801aa2c:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.theta / (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	edd3 6a02 	vldr	s13, [r3, #8]
 801aa36:	ed9f 6a4e 	vldr	s12, [pc, #312]	@ 801ab70 <_ZN16TWIPR_Estimation6updateEv+0x298>
 801aa3a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801aa3e:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.theta = this->mean_state.theta
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	edc3 7a07 	vstr	s15, [r3, #28]
	this->mean_state.theta_dot = this->mean_state.theta_dot
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	ed93 7a08 	vldr	s14, [r3, #32]
			- (this->_state_buffer[this->_state_buffer_index].theta_dot
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	@ 0x824
 801aa54:	4619      	mov	r1, r3
 801aa56:	687a      	ldr	r2, [r7, #4]
 801aa58:	460b      	mov	r3, r1
 801aa5a:	009b      	lsls	r3, r3, #2
 801aa5c:	440b      	add	r3, r1
 801aa5e:	009b      	lsls	r3, r3, #2
 801aa60:	4413      	add	r3, r2
 801aa62:	335c      	adds	r3, #92	@ 0x5c
 801aa64:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 801aa68:	ed9f 6a41 	vldr	s12, [pc, #260]	@ 801ab70 <_ZN16TWIPR_Estimation6updateEv+0x298>
 801aa6c:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].theta_dot
 801aa70:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.theta_dot
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	edd3 6a03 	vldr	s13, [r3, #12]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 801aa7a:	ed9f 6a3d 	vldr	s12, [pc, #244]	@ 801ab70 <_ZN16TWIPR_Estimation6updateEv+0x298>
 801aa7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
			+ (this->state.theta_dot
 801aa82:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.theta_dot = this->mean_state.theta_dot
 801aa86:	687b      	ldr	r3, [r7, #4]
 801aa88:	edc3 7a08 	vstr	s15, [r3, #32]
	this->mean_state.psi = this->mean_state.psi
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
			- (this->_state_buffer[this->_state_buffer_index].psi
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	@ 0x824
 801aa98:	4619      	mov	r1, r3
 801aa9a:	687a      	ldr	r2, [r7, #4]
 801aa9c:	460b      	mov	r3, r1
 801aa9e:	009b      	lsls	r3, r3, #2
 801aaa0:	440b      	add	r3, r1
 801aaa2:	009b      	lsls	r3, r3, #2
 801aaa4:	4413      	add	r3, r2
 801aaa6:	3360      	adds	r3, #96	@ 0x60
 801aaa8:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 801aaac:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 801ab70 <_ZN16TWIPR_Estimation6updateEv+0x298>
 801aab0:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].psi
 801aab4:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.psi
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	edd3 6a04 	vldr	s13, [r3, #16]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 801aabe:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 801ab70 <_ZN16TWIPR_Estimation6updateEv+0x298>
 801aac2:	eec6 7a86 	vdiv.f32	s15, s13, s12
			+ (this->state.psi
 801aac6:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.psi = this->mean_state.psi
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	this->mean_state.psi_dot = this->mean_state.psi_dot
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
			- (this->_state_buffer[this->_state_buffer_index].psi_dot
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	@ 0x824
 801aadc:	4619      	mov	r1, r3
 801aade:	687a      	ldr	r2, [r7, #4]
 801aae0:	460b      	mov	r3, r1
 801aae2:	009b      	lsls	r3, r3, #2
 801aae4:	440b      	add	r3, r1
 801aae6:	009b      	lsls	r3, r3, #2
 801aae8:	4413      	add	r3, r2
 801aaea:	3364      	adds	r3, #100	@ 0x64
 801aaec:	edd3 6a00 	vldr	s13, [r3]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE)
 801aaf0:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 801ab70 <_ZN16TWIPR_Estimation6updateEv+0x298>
 801aaf4:	eec6 7a86 	vdiv.f32	s15, s13, s12
			- (this->_state_buffer[this->_state_buffer_index].psi_dot
 801aaf8:	ee37 7a67 	vsub.f32	s14, s14, s15
			+ (this->state.psi_dot
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	edd3 6a05 	vldr	s13, [r3, #20]
					/ (float) TWIPR_ESTIMATION_STATE_BUFFER_SIZE);
 801ab02:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 801ab70 <_ZN16TWIPR_Estimation6updateEv+0x298>
 801ab06:	eec6 7a86 	vdiv.f32	s15, s13, s12
			+ (this->state.psi_dot
 801ab0a:	ee77 7a27 	vadd.f32	s15, s14, s15
	this->mean_state.psi_dot = this->mean_state.psi_dot
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	this->_state_buffer[this->_state_buffer_index] = this->state;
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	@ 0x824
 801ab1a:	4619      	mov	r1, r3
 801ab1c:	687a      	ldr	r2, [r7, #4]
 801ab1e:	460b      	mov	r3, r1
 801ab20:	009b      	lsls	r3, r3, #2
 801ab22:	440b      	add	r3, r1
 801ab24:	009b      	lsls	r3, r3, #2
 801ab26:	4413      	add	r3, r2
 801ab28:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	1d14      	adds	r4, r2, #4
 801ab30:	1d1d      	adds	r5, r3, #4
 801ab32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ab34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ab36:	682b      	ldr	r3, [r5, #0]
 801ab38:	6023      	str	r3, [r4, #0]
	osSemaphoreRelease(_semaphore);
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
 801ab40:	4618      	mov	r0, r3
 801ab42:	f7f5 fb5f 	bl	8010204 <osSemaphoreRelease>

	this->_state_buffer_index++;
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	@ 0x824
 801ab4c:	3301      	adds	r3, #1
 801ab4e:	b29a      	uxth	r2, r3
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	f8a3 2824 	strh.w	r2, [r3, #2084]	@ 0x824
	if (this->_state_buffer_index == TWIPR_ESTIMATION_STATE_BUFFER_SIZE) {
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	f8b3 3824 	ldrh.w	r3, [r3, #2084]	@ 0x824
 801ab5c:	2b64      	cmp	r3, #100	@ 0x64
 801ab5e:	d103      	bne.n	801ab68 <_ZN16TWIPR_Estimation6updateEv+0x290>
		this->_state_buffer_index = 0;
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	2200      	movs	r2, #0
 801ab64:	f8a3 2824 	strh.w	r2, [r3, #2084]	@ 0x824
	}

}
 801ab68:	bf00      	nop
 801ab6a:	3740      	adds	r7, #64	@ 0x40
 801ab6c:	46bd      	mov	sp, r7
 801ab6e:	bdb0      	pop	{r4, r5, r7, pc}
 801ab70:	42c80000 	.word	0x42c80000

0801ab74 <_ZN16TWIPR_Estimation8getStateEv>:
	out = this->mean_state;
	osSemaphoreRelease(_semaphore);
	return out;
}
/* ======================================================= */
twipr_estimation_state_t TWIPR_Estimation::getState() {
 801ab74:	b5b0      	push	{r4, r5, r7, lr}
 801ab76:	b082      	sub	sp, #8
 801ab78:	af00      	add	r7, sp, #0
 801ab7a:	6078      	str	r0, [r7, #4]
 801ab7c:	6039      	str	r1, [r7, #0]
	osSemaphoreAcquire(_semaphore, portMAX_DELAY);
 801ab7e:	683b      	ldr	r3, [r7, #0]
 801ab80:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
 801ab84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ab88:	4618      	mov	r0, r3
 801ab8a:	f7f5 fae9 	bl	8010160 <osSemaphoreAcquire>
	twipr_estimation_state_t out = this->state;
 801ab8e:	687a      	ldr	r2, [r7, #4]
 801ab90:	683b      	ldr	r3, [r7, #0]
 801ab92:	4615      	mov	r5, r2
 801ab94:	1d1c      	adds	r4, r3, #4
 801ab96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ab98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ab9a:	6823      	ldr	r3, [r4, #0]
 801ab9c:	602b      	str	r3, [r5, #0]
	osSemaphoreRelease(_semaphore);
 801ab9e:	683b      	ldr	r3, [r7, #0]
 801aba0:	f8d3 3828 	ldr.w	r3, [r3, #2088]	@ 0x828
 801aba4:	4618      	mov	r0, r3
 801aba6:	f7f5 fb2d 	bl	8010204 <osSemaphoreRelease>
	return out;
 801abaa:	bf00      	nop
}
 801abac:	6878      	ldr	r0, [r7, #4]
 801abae:	3708      	adds	r7, #8
 801abb0:	46bd      	mov	sp, r7
 801abb2:	bdb0      	pop	{r4, r5, r7, pc}

0801abb4 <_ZN16TWIPR_Estimation9getSampleEv>:
/* ======================================================= */
void TWIPR_Estimation::setState(twipr_estimation_state_t state) {
	twipr_error_handler(0);
}
/* ======================================================= */
twipr_logging_estimation_t TWIPR_Estimation::getSample(){
 801abb4:	b5b0      	push	{r4, r5, r7, lr}
 801abb6:	b088      	sub	sp, #32
 801abb8:	af00      	add	r7, sp, #0
 801abba:	61f8      	str	r0, [r7, #28]
 801abbc:	61b9      	str	r1, [r7, #24]
	twipr_logging_estimation_t sample;
	sample.state = this->getState();
 801abbe:	69fc      	ldr	r4, [r7, #28]
 801abc0:	463b      	mov	r3, r7
 801abc2:	69b9      	ldr	r1, [r7, #24]
 801abc4:	4618      	mov	r0, r3
 801abc6:	f7ff ffd5 	bl	801ab74 <_ZN16TWIPR_Estimation8getStateEv>
 801abca:	4625      	mov	r5, r4
 801abcc:	463c      	mov	r4, r7
 801abce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801abd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801abd2:	6823      	ldr	r3, [r4, #0]
 801abd4:	602b      	str	r3, [r5, #0]
	return sample;
 801abd6:	bf00      	nop
}
 801abd8:	69f8      	ldr	r0, [r7, #28]
 801abda:	3720      	adds	r7, #32
 801abdc:	46bd      	mov	sp, r7
 801abde:	bdb0      	pop	{r4, r5, r7, pc}

0801abe0 <_Z15estimation_taskPv>:
/* ======================================================= */
void estimation_task(void *estimation) {
 801abe0:	b580      	push	{r7, lr}
 801abe2:	b084      	sub	sp, #16
 801abe4:	af00      	add	r7, sp, #0
 801abe6:	6078      	str	r0, [r7, #4]
	TWIPR_Estimation *estimator = (TWIPR_Estimation*) estimation;
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	60fb      	str	r3, [r7, #12]
	estimator->task_function();
 801abec:	68f8      	ldr	r0, [r7, #12]
 801abee:	f7ff fe55 	bl	801a89c <_ZN16TWIPR_Estimation13task_functionEv>
}
 801abf2:	bf00      	nop
 801abf4:	3710      	adds	r7, #16
 801abf6:	46bd      	mov	sp, r7
 801abf8:	bd80      	pop	{r7, pc}

0801abfa <_ZN13TWIPR_SensorsC1Ev>:
 *      Author: Dustin Lehmann
 */

#include "twipr_sensors.h"

TWIPR_Sensors::TWIPR_Sensors() {
 801abfa:	b580      	push	{r7, lr}
 801abfc:	b082      	sub	sp, #8
 801abfe:	af00      	add	r7, sp, #0
 801ac00:	6078      	str	r0, [r7, #4]
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	3304      	adds	r3, #4
 801ac06:	4618      	mov	r0, r3
 801ac08:	f004 fa6d 	bl	801f0e6 <_ZN6BMI160C1Ev>

}
 801ac0c:	687b      	ldr	r3, [r7, #4]
 801ac0e:	4618      	mov	r0, r3
 801ac10:	3708      	adds	r7, #8
 801ac12:	46bd      	mov	sp, r7
 801ac14:	bd80      	pop	{r7, pc}
	...

0801ac18 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t>:

/* ======================================================= */
uint8_t TWIPR_Sensors::init(twipr_sensors_config_t config) {
 801ac18:	b590      	push	{r4, r7, lr}
 801ac1a:	b08d      	sub	sp, #52	@ 0x34
 801ac1c:	af02      	add	r7, sp, #8
 801ac1e:	6078      	str	r0, [r7, #4]
 801ac20:	6039      	str	r1, [r7, #0]

	// Initialize the IMU
	bmi160_gyr_config_t gyr_config;
 801ac22:	4b23      	ldr	r3, [pc, #140]	@ (801acb0 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x98>)
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	623b      	str	r3, [r7, #32]
	bmi160_acc_config_t acc_config;
 801ac28:	4b22      	ldr	r3, [pc, #136]	@ (801acb4 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x9c>)
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	61fb      	str	r3, [r7, #28]
	bmi160_config_t imu_config = { .hspi = BOARD_SPI_INTERN, .CS_GPIOx =
 801ac2e:	f107 0308 	add.w	r3, r7, #8
 801ac32:	2200      	movs	r2, #0
 801ac34:	601a      	str	r2, [r3, #0]
 801ac36:	605a      	str	r2, [r3, #4]
 801ac38:	609a      	str	r2, [r3, #8]
 801ac3a:	60da      	str	r2, [r3, #12]
 801ac3c:	611a      	str	r2, [r3, #16]
 801ac3e:	4b1e      	ldr	r3, [pc, #120]	@ (801acb8 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0xa0>)
 801ac40:	60bb      	str	r3, [r7, #8]
 801ac42:	4b1e      	ldr	r3, [pc, #120]	@ (801acbc <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0xa4>)
 801ac44:	60fb      	str	r3, [r7, #12]
 801ac46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801ac4a:	823b      	strh	r3, [r7, #16]
	BOARD_CS_IMU_PORT, .CS_GPIO_Pin =
	BOARD_CS_IMU_PIN, .gyr = gyr_config, .acc = acc_config };
 801ac4c:	f107 0312 	add.w	r3, r7, #18
 801ac50:	f107 0220 	add.w	r2, r7, #32
 801ac54:	6810      	ldr	r0, [r2, #0]
 801ac56:	6018      	str	r0, [r3, #0]
 801ac58:	f107 0316 	add.w	r3, r7, #22
 801ac5c:	f107 021c 	add.w	r2, r7, #28
 801ac60:	6810      	ldr	r0, [r2, #0]
 801ac62:	6018      	str	r0, [r3, #0]
//
	uint8_t success = imu.init(imu_config);
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	1d1c      	adds	r4, r3, #4
 801ac68:	466a      	mov	r2, sp
 801ac6a:	f107 0314 	add.w	r3, r7, #20
 801ac6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ac72:	e882 0003 	stmia.w	r2, {r0, r1}
 801ac76:	f107 0308 	add.w	r3, r7, #8
 801ac7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ac7c:	4620      	mov	r0, r4
 801ac7e:	f004 fa72 	bl	801f166 <_ZN6BMI1604initE15bmi160_config_t>
 801ac82:	4603      	mov	r3, r0
 801ac84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (!success) {
 801ac88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d104      	bne.n	801ac9a <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x82>
		this->status = TWIPR_SENSORS_STATUS_ERROR;
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	22ff      	movs	r2, #255	@ 0xff
 801ac94:	701a      	strb	r2, [r3, #0]
		return 0;
 801ac96:	2300      	movs	r3, #0
 801ac98:	e006      	b.n	801aca8 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t+0x90>
	}

	// Initialize

	this->_config = config;
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	683a      	ldr	r2, [r7, #0]
 801ac9e:	651a      	str	r2, [r3, #80]	@ 0x50

	this->status = TWIPR_SENSORS_STATUS_IDLE;
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	2200      	movs	r2, #0
 801aca4:	701a      	strb	r2, [r3, #0]
	return 1;
 801aca6:	2301      	movs	r3, #1
}
 801aca8:	4618      	mov	r0, r3
 801acaa:	372c      	adds	r7, #44	@ 0x2c
 801acac:	46bd      	mov	sp, r7
 801acae:	bd90      	pop	{r4, r7, pc}
 801acb0:	080232c0 	.word	0x080232c0
 801acb4:	080232c4 	.word	0x080232c4
 801acb8:	240003e8 	.word	0x240003e8
 801acbc:	58020400 	.word	0x58020400

0801acc0 <_ZN13TWIPR_Sensors5startEv>:
/* ======================================================= */
void TWIPR_Sensors::start() {
 801acc0:	b480      	push	{r7}
 801acc2:	b083      	sub	sp, #12
 801acc4:	af00      	add	r7, sp, #0
 801acc6:	6078      	str	r0, [r7, #4]
	// TODO
	this->status = TWIPR_SENSORS_STATUS_RUNNING;
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	2201      	movs	r2, #1
 801accc:	701a      	strb	r2, [r3, #0]
}
 801acce:	bf00      	nop
 801acd0:	370c      	adds	r7, #12
 801acd2:	46bd      	mov	sp, r7
 801acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acd8:	4770      	bx	lr

0801acda <_ZN13TWIPR_Sensors6updateEv>:

	return success;

}
/* ======================================================= */
void TWIPR_Sensors::update() {
 801acda:	b580      	push	{r7, lr}
 801acdc:	b082      	sub	sp, #8
 801acde:	af00      	add	r7, sp, #0
 801ace0:	6078      	str	r0, [r7, #4]
	this->_readImu();
 801ace2:	6878      	ldr	r0, [r7, #4]
 801ace4:	f000 f81f 	bl	801ad26 <_ZN13TWIPR_Sensors8_readImuEv>
	this->_readMotorSpeed();
 801ace8:	6878      	ldr	r0, [r7, #4]
 801acea:	f000 f83b 	bl	801ad64 <_ZN13TWIPR_Sensors15_readMotorSpeedEv>
	this->_readBatteryVoltage();
 801acee:	6878      	ldr	r0, [r7, #4]
 801acf0:	f000 f855 	bl	801ad9e <_ZN13TWIPR_Sensors19_readBatteryVoltageEv>
}
 801acf4:	bf00      	nop
 801acf6:	3708      	adds	r7, #8
 801acf8:	46bd      	mov	sp, r7
 801acfa:	bd80      	pop	{r7, pc}

0801acfc <_ZN13TWIPR_Sensors7getDataEv>:
/* ======================================================= */
twipr_sensors_data_t TWIPR_Sensors::getData() {
 801acfc:	b4b0      	push	{r4, r5, r7}
 801acfe:	b083      	sub	sp, #12
 801ad00:	af00      	add	r7, sp, #0
 801ad02:	6078      	str	r0, [r7, #4]
 801ad04:	6039      	str	r1, [r7, #0]
	return this->_data;
 801ad06:	687a      	ldr	r2, [r7, #4]
 801ad08:	683b      	ldr	r3, [r7, #0]
 801ad0a:	4615      	mov	r5, r2
 801ad0c:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 801ad10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ad14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ad16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801ad18:	6823      	ldr	r3, [r4, #0]
 801ad1a:	602b      	str	r3, [r5, #0]
}
 801ad1c:	6878      	ldr	r0, [r7, #4]
 801ad1e:	370c      	adds	r7, #12
 801ad20:	46bd      	mov	sp, r7
 801ad22:	bcb0      	pop	{r4, r5, r7}
 801ad24:	4770      	bx	lr

0801ad26 <_ZN13TWIPR_Sensors8_readImuEv>:
	this->imu.fastOffsetCalibration();
	return 0;
}

/* ======================================================= */
void TWIPR_Sensors::_readImu() {
 801ad26:	b580      	push	{r7, lr}
 801ad28:	b082      	sub	sp, #8
 801ad2a:	af00      	add	r7, sp, #0
 801ad2c:	6078      	str	r0, [r7, #4]
	this->imu.update();
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	3304      	adds	r3, #4
 801ad32:	4618      	mov	r0, r3
 801ad34:	f004 fb48 	bl	801f3c8 <_ZN6BMI1606updateEv>
	memcpy(&this->_data.acc, &this->imu.acc, sizeof(this->_data.acc));
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	3320      	adds	r3, #32
 801ad42:	220c      	movs	r2, #12
 801ad44:	4619      	mov	r1, r3
 801ad46:	f006 fb88 	bl	802145a <memcpy>
	memcpy(&this->_data.gyr, &this->imu.gyr, sizeof(this->_data.gyr));
 801ad4a:	687b      	ldr	r3, [r7, #4]
 801ad4c:	f103 0068 	add.w	r0, r3, #104	@ 0x68
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	330c      	adds	r3, #12
 801ad54:	220c      	movs	r2, #12
 801ad56:	4619      	mov	r1, r3
 801ad58:	f006 fb7f 	bl	802145a <memcpy>
}
 801ad5c:	bf00      	nop
 801ad5e:	3708      	adds	r7, #8
 801ad60:	46bd      	mov	sp, r7
 801ad62:	bd80      	pop	{r7, pc}

0801ad64 <_ZN13TWIPR_Sensors15_readMotorSpeedEv>:

/* ======================================================= */
void TWIPR_Sensors::_readMotorSpeed() {
 801ad64:	b580      	push	{r7, lr}
 801ad66:	b084      	sub	sp, #16
 801ad68:	af00      	add	r7, sp, #0
 801ad6a:	6078      	str	r0, [r7, #4]
	// TODO: I probably need some check here if this has been initialized or so

	twipr_drive_speed_t motor_speed = this->_config.drive->getSpeed();
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ad70:	4618      	mov	r0, r3
 801ad72:	f7ff fc4d 	bl	801a610 <_ZN11TWIPR_Drive8getSpeedEv>
 801ad76:	eeb0 7a40 	vmov.f32	s14, s0
 801ad7a:	eef0 7a60 	vmov.f32	s15, s1
 801ad7e:	ed87 7a02 	vstr	s14, [r7, #8]
 801ad82:	edc7 7a03 	vstr	s15, [r7, #12]

	this->_data.speed_left = motor_speed.speed_left;
 801ad86:	68ba      	ldr	r2, [r7, #8]
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	655a      	str	r2, [r3, #84]	@ 0x54
	this->_data.speed_right = motor_speed.speed_right;
 801ad8c:	68fa      	ldr	r2, [r7, #12]
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	659a      	str	r2, [r3, #88]	@ 0x58

	nop();
 801ad92:	f7f9 fc33 	bl	80145fc <_Z3nopv>
}
 801ad96:	bf00      	nop
 801ad98:	3710      	adds	r7, #16
 801ad9a:	46bd      	mov	sp, r7
 801ad9c:	bd80      	pop	{r7, pc}

0801ad9e <_ZN13TWIPR_Sensors19_readBatteryVoltageEv>:

/* ======================================================= */
void TWIPR_Sensors::_readBatteryVoltage() {
 801ad9e:	b580      	push	{r7, lr}
 801ada0:	b084      	sub	sp, #16
 801ada2:	af00      	add	r7, sp, #0
 801ada4:	6078      	str	r0, [r7, #4]
	float voltage = this->_config.drive->getVoltage();
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801adaa:	4618      	mov	r0, r3
 801adac:	f7ff fc00 	bl	801a5b0 <_ZN11TWIPR_Drive10getVoltageEv>
 801adb0:	ed87 0a03 	vstr	s0, [r7, #12]
	this->_data.battery_voltage = voltage;
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	68fa      	ldr	r2, [r7, #12]
 801adb8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801adba:	bf00      	nop
 801adbc:	3710      	adds	r7, #16
 801adbe:	46bd      	mov	sp, r7
 801adc0:	bd80      	pop	{r7, pc}
	...

0801adc4 <_Z7deg2radf>:

#include "stdint.h"

const float pi = 3.14159265;

inline float deg2rad(float angle) {
 801adc4:	b480      	push	{r7}
 801adc6:	b083      	sub	sp, #12
 801adc8:	af00      	add	r7, sp, #0
 801adca:	ed87 0a01 	vstr	s0, [r7, #4]
	return angle * pi / 180.0;
 801adce:	edd7 7a01 	vldr	s15, [r7, #4]
 801add2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 801adf4 <_Z7deg2radf+0x30>
 801add6:	ee67 7a87 	vmul.f32	s15, s15, s14
 801adda:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 801adf8 <_Z7deg2radf+0x34>
 801adde:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801ade2:	eef0 7a66 	vmov.f32	s15, s13
}
 801ade6:	eeb0 0a67 	vmov.f32	s0, s15
 801adea:	370c      	adds	r7, #12
 801adec:	46bd      	mov	sp, r7
 801adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adf2:	4770      	bx	lr
 801adf4:	40490fdb 	.word	0x40490fdb
 801adf8:	43340000 	.word	0x43340000

0801adfc <firmware>:
void debug(uint8_t state);



/* =======================================================*/
void firmware() {
 801adfc:	b580      	push	{r7, lr}
 801adfe:	af00      	add	r7, sp, #0
	osThreadNew(firmware_task, (void*) &twipr_firmware,
 801ae00:	4a03      	ldr	r2, [pc, #12]	@ (801ae10 <firmware+0x14>)
 801ae02:	4904      	ldr	r1, [pc, #16]	@ (801ae14 <firmware+0x18>)
 801ae04:	4804      	ldr	r0, [pc, #16]	@ (801ae18 <firmware+0x1c>)
 801ae06:	f7f4 ffaa 	bl	800fd5e <osThreadNew>
			&firmware_task_attributes);
}
 801ae0a:	bf00      	nop
 801ae0c:	bd80      	pop	{r7, pc}
 801ae0e:	bf00      	nop
 801ae10:	08023774 	.word	0x08023774
 801ae14:	24015430 	.word	0x24015430
 801ae18:	0801ae1d 	.word	0x0801ae1d

0801ae1c <_Z13firmware_taskPv>:

/* =======================================================*/
void firmware_task(void *argument) {
 801ae1c:	b580      	push	{r7, lr}
 801ae1e:	b084      	sub	sp, #16
 801ae20:	af00      	add	r7, sp, #0
 801ae22:	6078      	str	r0, [r7, #4]
	TWIPR_Firmware *firmware = (TWIPR_Firmware*) argument;
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	60fb      	str	r3, [r7, #12]
	firmware->task = xTaskGetCurrentTaskHandle();
 801ae28:	f7f7 fbd4 	bl	80125d4 <xTaskGetCurrentTaskHandle>
 801ae2c:	4602      	mov	r2, r0
 801ae2e:	68fb      	ldr	r3, [r7, #12]
 801ae30:	f8c3 2194 	str.w	r2, [r3, #404]	@ 0x194
	firmware->task_function();
 801ae34:	68f8      	ldr	r0, [r7, #12]
 801ae36:	f000 f863 	bl	801af00 <_ZN14TWIPR_Firmware13task_functionEv>
}
 801ae3a:	bf00      	nop
 801ae3c:	3710      	adds	r7, #16
 801ae3e:	46bd      	mov	sp, r7
 801ae40:	bd80      	pop	{r7, pc}

0801ae42 <_ZN33twipr_firmware_register_entries_tC1Ev>:
	TWIPR_FIRMWARE_STATE_IDLE = 0,
	TWIPR_FIRMWARE_STATE_RUNNING = 1,
	TWIPR_FIRMWARE_STATE_RESET = 2,
} twipr_firmware_state_t;

typedef struct twipr_firmware_register_entries_t {
 801ae42:	b580      	push	{r7, lr}
 801ae44:	b082      	sub	sp, #8
 801ae46:	af00      	add	r7, sp, #0
 801ae48:	6078      	str	r0, [r7, #4]
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	4618      	mov	r0, r3
 801ae4e:	f000 fa79 	bl	801b344 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tEC1Ev>
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	3314      	adds	r3, #20
 801ae56:	4618      	mov	r0, r3
 801ae58:	f000 fa98 	bl	801b38c <_ZN27core_utils_RegisterFunctionIvA3_iEC1Ev>
 801ae5c:	687b      	ldr	r3, [r7, #4]
 801ae5e:	334c      	adds	r3, #76	@ 0x4c
 801ae60:	4618      	mov	r0, r3
 801ae62:	f000 faad 	bl	801b3c0 <_ZN24core_utils_RegisterEntryImEC1Ev>
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	3368      	adds	r3, #104	@ 0x68
 801ae6a:	4618      	mov	r0, r3
 801ae6c:	f000 facc 	bl	801b408 <_ZN27core_utils_RegisterFunctionIvhEC1Ev>
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	4618      	mov	r0, r3
 801ae74:	3708      	adds	r7, #8
 801ae76:	46bd      	mov	sp, r7
 801ae78:	bd80      	pop	{r7, pc}

0801ae7a <_ZN14TWIPR_FirmwareC1Ev>:

/* =======================================================*/
TWIPR_Firmware::TWIPR_Firmware() {
 801ae7a:	b580      	push	{r7, lr}
 801ae7c:	b082      	sub	sp, #8
 801ae7e:	af00      	add	r7, sp, #0
 801ae80:	6078      	str	r0, [r7, #4]
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	2101      	movs	r1, #1
 801ae86:	4618      	mov	r0, r3
 801ae88:	f000 fa3e 	bl	801b308 <_ZN22core_utils_RegisterMapILi60EEC1Et>
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	33fc      	adds	r3, #252	@ 0xfc
 801ae90:	4618      	mov	r0, r3
 801ae92:	f7ff ffd6 	bl	801ae42 <_ZN33twipr_firmware_register_entries_tC1Ev>
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	2202      	movs	r2, #2
 801ae9a:	f883 2190 	strb.w	r2, [r3, #400]	@ 0x190
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	2200      	movs	r2, #0
 801aea2:	f883 2191 	strb.w	r2, [r3, #401]	@ 0x191
 801aea6:	687b      	ldr	r3, [r7, #4]
 801aea8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 801aeac:	4618      	mov	r0, r3
 801aeae:	f7ff fa13 	bl	801a2d8 <_ZN11TWIPR_DriveC1Ev>
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 801aeb8:	4618      	mov	r0, r3
 801aeba:	f7fb f862 	bl	8015f82 <_ZN26TWIPR_CommunicationManagerC1Ev>
 801aebe:	687a      	ldr	r2, [r7, #4]
 801aec0:	f242 1398 	movw	r3, #8600	@ 0x2198
 801aec4:	4413      	add	r3, r2
 801aec6:	4618      	mov	r0, r3
 801aec8:	f7fc fb50 	bl	801756c <_ZN20TWIPR_ControlManagerC1Ev>
 801aecc:	687a      	ldr	r2, [r7, #4]
 801aece:	f248 23b0 	movw	r3, #33456	@ 0x82b0
 801aed2:	4413      	add	r3, r2
 801aed4:	4618      	mov	r0, r3
 801aed6:	f7ff fc92 	bl	801a7fe <_ZN16TWIPR_EstimationC1Ev>
 801aeda:	687a      	ldr	r2, [r7, #4]
 801aedc:	f648 3304 	movw	r3, #35588	@ 0x8b04
 801aee0:	4413      	add	r3, r2
 801aee2:	4618      	mov	r0, r3
 801aee4:	f001 f87c 	bl	801bfe0 <_ZN12TWIPR_SafetyC1Ev>
 801aee8:	687a      	ldr	r2, [r7, #4]
 801aeea:	f648 3314 	movw	r3, #35604	@ 0x8b14
 801aeee:	4413      	add	r3, r2
 801aef0:	4618      	mov	r0, r3
 801aef2:	f7ff fe82 	bl	801abfa <_ZN13TWIPR_SensorsC1Ev>

}
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	4618      	mov	r0, r3
 801aefa:	3708      	adds	r7, #8
 801aefc:	46bd      	mov	sp, r7
 801aefe:	bd80      	pop	{r7, pc}

0801af00 <_ZN14TWIPR_Firmware13task_functionEv>:

/* =======================================================*/
void TWIPR_Firmware::task_function() {
 801af00:	b580      	push	{r7, lr}
 801af02:	b082      	sub	sp, #8
 801af04:	af00      	add	r7, sp, #0
 801af06:	6078      	str	r0, [r7, #4]
	this->init();
 801af08:	6878      	ldr	r0, [r7, #4]
 801af0a:	f000 f82f 	bl	801af6c <_ZN14TWIPR_Firmware4initEv>
	this->start();
 801af0e:	6878      	ldr	r0, [r7, #4]
 801af10:	f000 f9b4 	bl	801b27c <_ZN14TWIPR_Firmware5startEv>

	rc_rgb_led_side_1.setColor(0, 0, 0);
 801af14:	2300      	movs	r3, #0
 801af16:	2200      	movs	r2, #0
 801af18:	2100      	movs	r1, #0
 801af1a:	4813      	ldr	r0, [pc, #76]	@ (801af68 <_ZN14TWIPR_Firmware13task_functionEv+0x68>)
 801af1c:	f001 fa78 	bl	801c410 <_ZN19RobotControl_RGBLED8setColorEhhh>
	rc_rgb_led_side_1.state(1);
 801af20:	2101      	movs	r1, #1
 801af22:	4811      	ldr	r0, [pc, #68]	@ (801af68 <_ZN14TWIPR_Firmware13task_functionEv+0x68>)
 801af24:	f001 fa92 	bl	801c44c <_ZN19RobotControl_RGBLED5stateEh>

	while (true) {

		if (this->_control.mode == TWIPR_CONTROL_MODE_OFF) {
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801af2e:	f893 3199 	ldrb.w	r3, [r3, #409]	@ 0x199
 801af32:	2b00      	cmp	r3, #0
 801af34:	d106      	bne.n	801af44 <_ZN14TWIPR_Firmware13task_functionEv+0x44>
			rc_rgb_led_side_1.setColor(100, 0, 0);
 801af36:	2300      	movs	r3, #0
 801af38:	2200      	movs	r2, #0
 801af3a:	2164      	movs	r1, #100	@ 0x64
 801af3c:	480a      	ldr	r0, [pc, #40]	@ (801af68 <_ZN14TWIPR_Firmware13task_functionEv+0x68>)
 801af3e:	f001 fa67 	bl	801c410 <_ZN19RobotControl_RGBLED8setColorEhhh>
 801af42:	e00c      	b.n	801af5e <_ZN14TWIPR_Firmware13task_functionEv+0x5e>
		} else if (this->_control.mode == TWIPR_CONTROL_MODE_BALANCING) {
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 801af4a:	f893 3199 	ldrb.w	r3, [r3, #409]	@ 0x199
 801af4e:	2b02      	cmp	r3, #2
 801af50:	d105      	bne.n	801af5e <_ZN14TWIPR_Firmware13task_functionEv+0x5e>
			rc_rgb_led_side_1.setColor(0, 100, 0);
 801af52:	2300      	movs	r3, #0
 801af54:	2264      	movs	r2, #100	@ 0x64
 801af56:	2100      	movs	r1, #0
 801af58:	4803      	ldr	r0, [pc, #12]	@ (801af68 <_ZN14TWIPR_Firmware13task_functionEv+0x68>)
 801af5a:	f001 fa59 	bl	801c410 <_ZN19RobotControl_RGBLED8setColorEhhh>
//
//		uint8_t data[5] = {0x01,0x02,0x03,0x04,0x05};
//
//		this->_comm.uart_interface.send(0x01, 0x02, 0x03, 0x04, data, 5);

		osDelay(250);
 801af5e:	20fa      	movs	r0, #250	@ 0xfa
 801af60:	f7f4 ff9a 	bl	800fe98 <osDelay>
		if (this->_control.mode == TWIPR_CONTROL_MODE_OFF) {
 801af64:	e7e0      	b.n	801af28 <_ZN14TWIPR_Firmware13task_functionEv+0x28>
 801af66:	bf00      	nop
 801af68:	2401e00c 	.word	0x2401e00c

0801af6c <_ZN14TWIPR_Firmware4initEv>:
	}
}

/* =======================================================*/
void TWIPR_Firmware::init() {
 801af6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af6e:	b0c1      	sub	sp, #260	@ 0x104
 801af70:	af0a      	add	r7, sp, #40	@ 0x28
 801af72:	6078      	str	r0, [r7, #4]

	uint8_t ret = 0;
 801af74:	2300      	movs	r3, #0
 801af76:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7

	robot_control_init();
 801af7a:	f001 facb 	bl	801c514 <_Z18robot_control_initv>
	robot_control_start();
 801af7e:	f001 fadb 	bl	801c538 <_Z19robot_control_startv>

//	while (side_button.check()){
//		osDelay(10);
//	}

	rc_buzzer.setConfig(800, 250, 1);
 801af82:	2201      	movs	r2, #1
 801af84:	21fa      	movs	r1, #250	@ 0xfa
 801af86:	ed9f 0aae 	vldr	s0, [pc, #696]	@ 801b240 <_ZN14TWIPR_Firmware4initEv+0x2d4>
 801af8a:	48ae      	ldr	r0, [pc, #696]	@ (801b244 <_ZN14TWIPR_Firmware4initEv+0x2d8>)
 801af8c:	f001 fa7e 	bl	801c48c <_ZN19RobotControl_Buzzer9setConfigEfth>
	rc_buzzer.start();
 801af90:	48ac      	ldr	r0, [pc, #688]	@ (801b244 <_ZN14TWIPR_Firmware4initEv+0x2d8>)
 801af92:	f001 fa93 	bl	801c4bc <_ZN19RobotControl_Buzzer5startEv>

	osDelay(250);
 801af96:	20fa      	movs	r0, #250	@ 0xfa
 801af98:	f7f4 ff7e 	bl	800fe98 <osDelay>
	// Initialize the communication module
	twipr_communication_config_t twipr_comm_config = { .huart = BOARD_CM4_UART,
 801af9c:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801afa0:	222c      	movs	r2, #44	@ 0x2c
 801afa2:	2100      	movs	r1, #0
 801afa4:	4618      	mov	r0, r3
 801afa6:	f006 f9c9 	bl	802133c <memset>
 801afaa:	4ba7      	ldr	r3, [pc, #668]	@ (801b248 <_ZN14TWIPR_Firmware4initEv+0x2dc>)
 801afac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801afb0:	4ba6      	ldr	r3, [pc, #664]	@ (801b24c <_ZN14TWIPR_Firmware4initEv+0x2e0>)
 801afb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801afb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801afba:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
 801afbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801afc2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
			GPIOE, GPIO_PIN_7), .reg_map_control = &this->_control.reg_map,
			.reg_map_general = &this->register_map, .trajectory_rx_buffer =
					this->_control.trajectory_rx_buffer,
			.len_trajectory_buffer = TWIPR_CONTROL_TRAJECTORY_BUFFER_SIZE,
			.reset_uart_exti = CM4_UART_RESET_EXTI, .control = &this->_control,
			.estimation = &this->_estimation, .sensors = &this->_sensors };
 801afc6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801afca:	3308      	adds	r3, #8
 801afcc:	2280      	movs	r2, #128	@ 0x80
 801afce:	49a0      	ldr	r1, [pc, #640]	@ (801b250 <_ZN14TWIPR_Firmware4initEv+0x2e4>)
 801afd0:	4618      	mov	r0, r3
 801afd2:	f004 ff71 	bl	801feb8 <_ZN15core_utils_GPIOC1EP12GPIO_TypeDeft>
 801afd6:	687a      	ldr	r2, [r7, #4]
 801afd8:	f242 3374 	movw	r3, #9076	@ 0x2374
 801afdc:	4413      	add	r3, r2
 801afde:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
					this->_control.trajectory_rx_buffer,
 801afe8:	687a      	ldr	r2, [r7, #4]
 801afea:	f242 33d0 	movw	r3, #9168	@ 0x23d0
 801afee:	4413      	add	r3, r2
			.estimation = &this->_estimation, .sensors = &this->_sensors };
 801aff0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
			.reset_uart_exti = CM4_UART_RESET_EXTI, .control = &this->_control,
 801aff4:	687a      	ldr	r2, [r7, #4]
 801aff6:	f242 1398 	movw	r3, #8600	@ 0x2198
 801affa:	4413      	add	r3, r2
			.estimation = &this->_estimation, .sensors = &this->_sensors };
 801affc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801b000:	687a      	ldr	r2, [r7, #4]
 801b002:	f248 23b0 	movw	r3, #33456	@ 0x82b0
 801b006:	4413      	add	r3, r2
 801b008:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801b00c:	687a      	ldr	r2, [r7, #4]
 801b00e:	f648 3314 	movw	r3, #35604	@ 0x8b14
 801b012:	4413      	add	r3, r2
 801b014:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

	this->_comm.init(twipr_comm_config);
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	f503 66a6 	add.w	r6, r3, #1328	@ 0x530
 801b01e:	466d      	mov	r5, sp
 801b020:	f107 0494 	add.w	r4, r7, #148	@ 0x94
 801b024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b028:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801b02c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801b030:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 801b034:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b036:	4630      	mov	r0, r6
 801b038:	f7fa ffc4 	bl	8015fc4 <_ZN26TWIPR_CommunicationManager4initE28twipr_communication_config_t>
//	this->_comm.registerCallback(TWIPR_COMM_CALLBACK_NEW_TRAJECTORY,
//			core_utils_Callback<void, uint16_t>(&this->_control,
//					&TWIPR_ControlManager::newTrajectoryReceived_callback));

	// Initialize the sensors
	twipr_sensors_config_t twipr_sensors_config = { .drive = &this->_drive, };
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 801b042:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	this->_sensors.init(twipr_sensors_config);
 801b046:	687a      	ldr	r2, [r7, #4]
 801b048:	f648 3314 	movw	r3, #35604	@ 0x8b14
 801b04c:	4413      	add	r3, r2
 801b04e:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 801b052:	4618      	mov	r0, r3
 801b054:	f7ff fde0 	bl	801ac18 <_ZN13TWIPR_Sensors4initE22twipr_sensors_config_t>

	// Initialize the estimation module
	twipr_estimation_config_t twipr_estimation_config = {
 801b058:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801b05c:	2224      	movs	r2, #36	@ 0x24
 801b05e:	2100      	movs	r1, #0
 801b060:	4618      	mov	r0, r3
 801b062:	f006 f96b 	bl	802133c <memset>
 801b066:	2301      	movs	r3, #1
 801b068:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 801b06c:	2301      	movs	r3, #1
 801b06e:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
			.drive = &this->_drive, .sensors = &this->_sensors,
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
			.enable_slip_detection = 1, .enable_angle_threshold = 1,
			.angle_threshold = deg2rad(70.0), .model = twipr_model_small };
 801b078:	663b      	str	r3, [r7, #96]	@ 0x60
			.drive = &this->_drive, .sensors = &this->_sensors,
 801b07a:	687a      	ldr	r2, [r7, #4]
 801b07c:	f648 3314 	movw	r3, #35604	@ 0x8b14
 801b080:	4413      	add	r3, r2
			.angle_threshold = deg2rad(70.0), .model = twipr_model_small };
 801b082:	667b      	str	r3, [r7, #100]	@ 0x64
 801b084:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 801b254 <_ZN14TWIPR_Firmware4initEv+0x2e8>
 801b088:	f7ff fe9c 	bl	801adc4 <_Z7deg2radf>
 801b08c:	eef0 7a40 	vmov.f32	s15, s0
 801b090:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
 801b094:	4b70      	ldr	r3, [pc, #448]	@ (801b258 <_ZN14TWIPR_Firmware4initEv+0x2ec>)
 801b096:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 801b09a:	461d      	mov	r5, r3
 801b09c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b09e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b0a0:	682b      	ldr	r3, [r5, #0]
 801b0a2:	6023      	str	r3, [r4, #0]

	this->_estimation.init(twipr_estimation_config);
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	f248 26b0 	movw	r6, #33456	@ 0x82b0
 801b0aa:	441e      	add	r6, r3
 801b0ac:	466d      	mov	r5, sp
 801b0ae:	f107 046c 	add.w	r4, r7, #108	@ 0x6c
 801b0b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b0b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b0b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 801b0ba:	e885 0003 	stmia.w	r5, {r0, r1}
 801b0be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801b0c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b0c4:	4630      	mov	r0, r6
 801b0c6:	f7ff fbb0 	bl	801a82a <_ZN16TWIPR_Estimation4initE25twipr_estimation_config_t>

	// Initialize the control module
	twipr_control_config_t twipr_control_config = { .estimation =
 801b0ca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801b0ce:	2230      	movs	r2, #48	@ 0x30
 801b0d0:	2100      	movs	r1, #0
 801b0d2:	4618      	mov	r0, r3
 801b0d4:	f006 f932 	bl	802133c <memset>
 801b0d8:	4b60      	ldr	r3, [pc, #384]	@ (801b25c <_ZN14TWIPR_Firmware4initEv+0x2f0>)
 801b0da:	65bb      	str	r3, [r7, #88]	@ 0x58
 801b0dc:	2364      	movs	r3, #100	@ 0x64
 801b0de:	65fb      	str	r3, [r7, #92]	@ 0x5c
			&this->_estimation, .drive = &this->_drive, .max_torque =
 801b0e0:	687a      	ldr	r2, [r7, #4]
 801b0e2:	f248 23b0 	movw	r3, #33456	@ 0x82b0
 801b0e6:	4413      	add	r3, r2
	TWIPR_CONTROL_MAX_TORQUE, .freq = 100 };
 801b0e8:	633b      	str	r3, [r7, #48]	@ 0x30
			&this->_estimation, .drive = &this->_drive, .max_torque =
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
	TWIPR_CONTROL_MAX_TORQUE, .freq = 100 };
 801b0f0:	637b      	str	r3, [r7, #52]	@ 0x34
	memcpy(twipr_control_config.K, twipr_control_default_K, sizeof(float) * 8);
 801b0f2:	4b5b      	ldr	r3, [pc, #364]	@ (801b260 <_ZN14TWIPR_Firmware4initEv+0x2f4>)
 801b0f4:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 801b0f8:	461d      	mov	r5, r3
 801b0fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b0fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b0fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801b102:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	this->_control.init(twipr_control_config);
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	f242 1698 	movw	r6, #8600	@ 0x2198
 801b10c:	441e      	add	r6, r3
 801b10e:	466d      	mov	r5, sp
 801b110:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 801b114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b11a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801b11c:	6823      	ldr	r3, [r4, #0]
 801b11e:	602b      	str	r3, [r5, #0]
 801b120:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801b124:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b126:	4630      	mov	r0, r6
 801b128:	f7fc fa5a 	bl	80175e0 <_ZN20TWIPR_ControlManager4initE22twipr_control_config_t>
//			core_utils_Callback<void, uint32_t>(this,
//					&TWIPR_Firmware::_controlStep_callback));

// Initialize the drive module
	if (TWIPR_FIRMWARE_USE_MOTORS) {
		twipr_drive_config_t twipr_drive_config = { .id_left = 1, .id_right = 2,
 801b12c:	4b4d      	ldr	r3, [pc, #308]	@ (801b264 <_ZN14TWIPR_Firmware4initEv+0x2f8>)
 801b12e:	f107 040c 	add.w	r4, r7, #12
 801b132:	461d      	mov	r5, r3
 801b134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b138:	682b      	ldr	r3, [r5, #0]
 801b13a:	6023      	str	r3, [r4, #0]
				.direction_left = -1, .direction_right = 1, .torque_max = 0.3,
				.modbus_config = { .huart = BOARD_RS485_UART, .EN_GPIOx =
				BOARD_RS485_UART_EN_GPIOx, .EN_GPIO_Pin =
				BOARD_RS485_UART_EN_GPIO_PIN, .hardware = MB_UART_DMA }, };

		this->_drive.init(twipr_drive_config);
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	f503 74ce 	add.w	r4, r3, #412	@ 0x19c
 801b142:	466a      	mov	r2, sp
 801b144:	f107 0318 	add.w	r3, r7, #24
 801b148:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b14c:	e882 0003 	stmia.w	r2, {r0, r1}
 801b150:	f107 030c 	add.w	r3, r7, #12
 801b154:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b156:	4620      	mov	r0, r4
 801b158:	f7ff f8de 	bl	801a318 <_ZN11TWIPR_Drive4initE20twipr_drive_config_t>

		ret = this->_drive.startup_check();
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 801b162:	4618      	mov	r0, r3
 801b164:	f7ff f9fd 	bl	801a562 <_ZN11TWIPR_Drive13startup_checkEv>
 801b168:	4603      	mov	r3, r0
 801b16a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
		if (!ret) {
 801b16e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 801b172:	2b00      	cmp	r3, #0
 801b174:	d101      	bne.n	801b17a <_ZN14TWIPR_Firmware4initEv+0x20e>
			nop();
 801b176:	f7f9 fa41 	bl	80145fc <_Z3nopv>
		}
	}

	// Initialize the supervisor module
	TWIPR_Safety_Config_t safety_config = { .drive = &this->_drive, .control =
 801b17a:	f107 0320 	add.w	r3, r7, #32
 801b17e:	2200      	movs	r2, #0
 801b180:	601a      	str	r2, [r3, #0]
 801b182:	605a      	str	r2, [r3, #4]
 801b184:	609a      	str	r2, [r3, #8]
 801b186:	60da      	str	r2, [r3, #12]
 801b188:	4b37      	ldr	r3, [pc, #220]	@ (801b268 <_ZN14TWIPR_Firmware4initEv+0x2fc>)
 801b18a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b18c:	4b37      	ldr	r3, [pc, #220]	@ (801b26c <_ZN14TWIPR_Firmware4initEv+0x300>)
 801b18e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
			&this->_control, .max_speed = 50, .off_button = &off_button };
 801b196:	623b      	str	r3, [r7, #32]
 801b198:	687a      	ldr	r2, [r7, #4]
 801b19a:	f242 1398 	movw	r3, #8600	@ 0x2198
 801b19e:	4413      	add	r3, r2
 801b1a0:	627b      	str	r3, [r7, #36]	@ 0x24

	this->_safety.init(safety_config);
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	f648 3004 	movw	r0, #35588	@ 0x8b04
 801b1a8:	4418      	add	r0, r3
 801b1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b1ac:	9300      	str	r3, [sp, #0]
 801b1ae:	f107 0320 	add.w	r3, r7, #32
 801b1b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b1b4:	f000 ff1f 	bl	801bff6 <_ZN12TWIPR_Safety4initE21TWIPR_Safety_Config_t>
	// Initialize the data transfer to the compute module
//	HAL_DMA_RegisterCallback(TWIPR_FIRMWARE_SAMPLE_DMA_STREAM,
//			HAL_DMA_XFER_CPLT_CB_ID, sample_dma_transfer_cmplt_callback);

	// Register all communication register entries
	this->reg_entries.firmware_state.set(0x04, &this->register_map,
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	f103 00fc 	add.w	r0, r3, #252	@ 0xfc
 801b1be:	687a      	ldr	r2, [r7, #4]
 801b1c0:	687b      	ldr	r3, [r7, #4]
 801b1c2:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 801b1c6:	2100      	movs	r1, #0
 801b1c8:	9100      	str	r1, [sp, #0]
 801b1ca:	2104      	movs	r1, #4
 801b1cc:	f000 f936 	bl	801b43c <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>
			&this->firmware_state, REGISTER_ENTRY_READ);
	this->reg_entries.tick.set(0x02, &this->register_map, &this->tick,
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	f503 70a4 	add.w	r0, r3, #328	@ 0x148
 801b1d6:	6879      	ldr	r1, [r7, #4]
 801b1d8:	687a      	ldr	r2, [r7, #4]
 801b1da:	f648 338c 	movw	r3, #35724	@ 0x8b8c
 801b1de:	4413      	add	r3, r2
 801b1e0:	2200      	movs	r2, #0
 801b1e2:	9200      	str	r2, [sp, #0]
 801b1e4:	460a      	mov	r2, r1
 801b1e6:	2102      	movs	r1, #2
 801b1e8:	f000 f945 	bl	801b476 <_ZN24core_utils_RegisterEntryImE3setEtP11RegisterMapPm19register_entry_rw_t>
			REGISTER_ENTRY_READ);
//	this->reg_entries.led_color_array.set(0x03, &this->register_map, &led_color_array, REGISTER_ENTRY_READWRITE);
	this->reg_entries.debug.set(0x01, &this->register_map,
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	f503 74b2 	add.w	r4, r3, #356	@ 0x164
 801b1f2:	687d      	ldr	r5, [r7, #4]
			core_utils_Callback<void, uint8_t>(debug));
 801b1f4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 801b1f8:	491d      	ldr	r1, [pc, #116]	@ (801b270 <_ZN14TWIPR_Firmware4initEv+0x304>)
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	f000 f958 	bl	801b4b0 <_ZN19core_utils_CallbackIvhEC1EPFvhE>
	this->reg_entries.debug.set(0x01, &this->register_map,
 801b200:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 801b204:	462a      	mov	r2, r5
 801b206:	2101      	movs	r1, #1
 801b208:	4620      	mov	r0, r4
 801b20a:	f000 f9a1 	bl	801b550 <_ZN27core_utils_RegisterFunctionIvhE3setEtP11RegisterMap19core_utils_CallbackIvhE>

	// If everything ran until here: Beep and set the status LED to green

	rc_buzzer.setConfig(900, 250, 1);
 801b20e:	2201      	movs	r2, #1
 801b210:	21fa      	movs	r1, #250	@ 0xfa
 801b212:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 801b274 <_ZN14TWIPR_Firmware4initEv+0x308>
 801b216:	480b      	ldr	r0, [pc, #44]	@ (801b244 <_ZN14TWIPR_Firmware4initEv+0x2d8>)
 801b218:	f001 f938 	bl	801c48c <_ZN19RobotControl_Buzzer9setConfigEfth>
	rc_buzzer.start();
 801b21c:	4809      	ldr	r0, [pc, #36]	@ (801b244 <_ZN14TWIPR_Firmware4initEv+0x2d8>)
 801b21e:	f001 f94d 	bl	801c4bc <_ZN19RobotControl_Buzzer5startEv>
	rc_rgb_led_status.setColor(0, 60, 0);
 801b222:	2300      	movs	r3, #0
 801b224:	223c      	movs	r2, #60	@ 0x3c
 801b226:	2100      	movs	r1, #0
 801b228:	4813      	ldr	r0, [pc, #76]	@ (801b278 <_ZN14TWIPR_Firmware4initEv+0x30c>)
 801b22a:	f001 f8f1 	bl	801c410 <_ZN19RobotControl_RGBLED8setColorEhhh>
	rc_rgb_led_status.state(1);
 801b22e:	2101      	movs	r1, #1
 801b230:	4811      	ldr	r0, [pc, #68]	@ (801b278 <_ZN14TWIPR_Firmware4initEv+0x30c>)
 801b232:	f001 f90b 	bl	801c44c <_ZN19RobotControl_RGBLED5stateEh>
}
 801b236:	bf00      	nop
 801b238:	37dc      	adds	r7, #220	@ 0xdc
 801b23a:	46bd      	mov	sp, r7
 801b23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b23e:	bf00      	nop
 801b240:	44480000 	.word	0x44480000
 801b244:	2401e014 	.word	0x2401e014
 801b248:	24000808 	.word	0x24000808
 801b24c:	24000334 	.word	0x24000334
 801b250:	58021000 	.word	0x58021000
 801b254:	428c0000 	.word	0x428c0000
 801b258:	2400003c 	.word	0x2400003c
 801b25c:	3e99999a 	.word	0x3e99999a
 801b260:	2400001c 	.word	0x2400001c
 801b264:	080232d4 	.word	0x080232d4
 801b268:	42480000 	.word	0x42480000
 801b26c:	2401dfe8 	.word	0x2401dfe8
 801b270:	0801b2dd 	.word	0x0801b2dd
 801b274:	44610000 	.word	0x44610000
 801b278:	2401e008 	.word	0x2401e008

0801b27c <_ZN14TWIPR_Firmware5startEv>:

/* =======================================================*/
void TWIPR_Firmware::start() {
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b082      	sub	sp, #8
 801b280:	af00      	add	r7, sp, #0
 801b282:	6078      	str	r0, [r7, #4]

	// Start the communication module
	this->_comm.start();
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	f503 63a6 	add.w	r3, r3, #1328	@ 0x530
 801b28a:	4618      	mov	r0, r3
 801b28c:	f7fb f864 	bl	8016358 <_ZN26TWIPR_CommunicationManager5startEv>

	// Start the Sensors
	this->_sensors.start();
 801b290:	687a      	ldr	r2, [r7, #4]
 801b292:	f648 3314 	movw	r3, #35604	@ 0x8b14
 801b296:	4413      	add	r3, r2
 801b298:	4618      	mov	r0, r3
 801b29a:	f7ff fd11 	bl	801acc0 <_ZN13TWIPR_Sensors5startEv>

	// Start the estimation module
	this->_estimation.start();
 801b29e:	687a      	ldr	r2, [r7, #4]
 801b2a0:	f248 23b0 	movw	r3, #33456	@ 0x82b0
 801b2a4:	4413      	add	r3, r2
 801b2a6:	4618      	mov	r0, r3
 801b2a8:	f7ff fae6 	bl	801a878 <_ZN16TWIPR_Estimation5startEv>

	// Start the drive
	if (TWIPR_FIRMWARE_USE_MOTORS) {
		this->_drive.start();
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 801b2b2:	4618      	mov	r0, r3
 801b2b4:	f7ff f93c 	bl	801a530 <_ZN11TWIPR_Drive5startEv>
	}

	// Start the control module
	this->_control.start();
 801b2b8:	687a      	ldr	r2, [r7, #4]
 801b2ba:	f242 1398 	movw	r3, #8600	@ 0x2198
 801b2be:	4413      	add	r3, r2
 801b2c0:	4618      	mov	r0, r3
 801b2c2:	f7fc faa9 	bl	8017818 <_ZN20TWIPR_ControlManager5startEv>
//
//	// Start the Safety Module
	this->_safety.start();
 801b2c6:	687a      	ldr	r2, [r7, #4]
 801b2c8:	f648 3304 	movw	r3, #35588	@ 0x8b04
 801b2cc:	4413      	add	r3, r2
 801b2ce:	4618      	mov	r0, r3
 801b2d0:	f000 fea8 	bl	801c024 <_ZN12TWIPR_Safety5startEv>


//	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
//	TIM15->CCR1 = 5000;
}
 801b2d4:	bf00      	nop
 801b2d6:	3708      	adds	r7, #8
 801b2d8:	46bd      	mov	sp, r7
 801b2da:	bd80      	pop	{r7, pc}

0801b2dc <_Z5debugh>:
/* =======================================================*/
//void TWIPR_Firmware::_controlStep_callback(uint32_t tick) {
//	this->tick = tick;
//}

void debug(uint8_t state) {
 801b2dc:	b580      	push	{r7, lr}
 801b2de:	b082      	sub	sp, #8
 801b2e0:	af00      	add	r7, sp, #0
 801b2e2:	4603      	mov	r3, r0
 801b2e4:	71fb      	strb	r3, [r7, #7]
	rc_rgb_led_side_2.state(state);
 801b2e6:	79fb      	ldrb	r3, [r7, #7]
 801b2e8:	4619      	mov	r1, r3
 801b2ea:	4806      	ldr	r0, [pc, #24]	@ (801b304 <_Z5debugh+0x28>)
 801b2ec:	f001 f8ae 	bl	801c44c <_ZN19RobotControl_RGBLED5stateEh>
	rc_rgb_led_side_2.setColor(0, 0, 80);
 801b2f0:	2350      	movs	r3, #80	@ 0x50
 801b2f2:	2200      	movs	r2, #0
 801b2f4:	2100      	movs	r1, #0
 801b2f6:	4803      	ldr	r0, [pc, #12]	@ (801b304 <_Z5debugh+0x28>)
 801b2f8:	f001 f88a 	bl	801c410 <_ZN19RobotControl_RGBLED8setColorEhhh>
}
 801b2fc:	bf00      	nop
 801b2fe:	3708      	adds	r7, #8
 801b300:	46bd      	mov	sp, r7
 801b302:	bd80      	pop	{r7, pc}
 801b304:	2401e010 	.word	0x2401e010

0801b308 <_ZN22core_utils_RegisterMapILi60EEC1Et>:
	core_utils_RegisterMap<size>(uint16_t address) {
 801b308:	b580      	push	{r7, lr}
 801b30a:	b082      	sub	sp, #8
 801b30c:	af00      	add	r7, sp, #0
 801b30e:	6078      	str	r0, [r7, #4]
 801b310:	460b      	mov	r3, r1
 801b312:	807b      	strh	r3, [r7, #2]
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	4618      	mov	r0, r3
 801b318:	f7fd f806 	bl	8018328 <_ZN11RegisterMapC1Ev>
 801b31c:	4a08      	ldr	r2, [pc, #32]	@ (801b340 <_ZN22core_utils_RegisterMapILi60EEC1Et+0x38>)
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	601a      	str	r2, [r3, #0]
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	330c      	adds	r3, #12
 801b326:	22f0      	movs	r2, #240	@ 0xf0
 801b328:	2100      	movs	r1, #0
 801b32a:	4618      	mov	r0, r3
 801b32c:	f006 f806 	bl	802133c <memset>
		this->address = address;
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	887a      	ldrh	r2, [r7, #2]
 801b334:	809a      	strh	r2, [r3, #4]
	}
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	4618      	mov	r0, r3
 801b33a:	3708      	adds	r7, #8
 801b33c:	46bd      	mov	sp, r7
 801b33e:	bd80      	pop	{r7, pc}
 801b340:	080237a0 	.word	0x080237a0

0801b344 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tEC1Ev>:
	core_utils_RegisterEntry() {
 801b344:	b590      	push	{r4, r7, lr}
 801b346:	b08b      	sub	sp, #44	@ 0x2c
 801b348:	af00      	add	r7, sp, #0
 801b34a:	6078      	str	r0, [r7, #4]
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	4618      	mov	r0, r3
 801b350:	f7fb fff8 	bl	8017344 <_ZN13RegisterEntryC1Ev>
 801b354:	4a0c      	ldr	r2, [pc, #48]	@ (801b388 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tEC1Ev+0x44>)
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	601a      	str	r2, [r3, #0]
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	2201      	movs	r2, #1
 801b35e:	71da      	strb	r2, [r3, #7]
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	f103 0410 	add.w	r4, r3, #16
 801b366:	f107 0308 	add.w	r3, r7, #8
 801b36a:	4618      	mov	r0, r3
 801b36c:	f7f9 fb60 	bl	8014a30 <_ZN19core_utils_CallbackIvvEC1Ev>
 801b370:	f107 0308 	add.w	r3, r7, #8
 801b374:	4619      	mov	r1, r3
 801b376:	4620      	mov	r0, r4
 801b378:	f7fc f80c 	bl	8017394 <_ZN8CallbackC1EOS_>
	}
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	4618      	mov	r0, r3
 801b380:	372c      	adds	r7, #44	@ 0x2c
 801b382:	46bd      	mov	sp, r7
 801b384:	bd90      	pop	{r4, r7, pc}
 801b386:	bf00      	nop
 801b388:	08023880 	.word	0x08023880

0801b38c <_ZN27core_utils_RegisterFunctionIvA3_iEC1Ev>:
	core_utils_RegisterFunction() {
 801b38c:	b580      	push	{r7, lr}
 801b38e:	b082      	sub	sp, #8
 801b390:	af00      	add	r7, sp, #0
 801b392:	6078      	str	r0, [r7, #4]
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	4618      	mov	r0, r3
 801b398:	f7fb ffd4 	bl	8017344 <_ZN13RegisterEntryC1Ev>
 801b39c:	4a07      	ldr	r2, [pc, #28]	@ (801b3bc <_ZN27core_utils_RegisterFunctionIvA3_iEC1Ev+0x30>)
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	601a      	str	r2, [r3, #0]
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	2202      	movs	r2, #2
 801b3a6:	751a      	strb	r2, [r3, #20]
 801b3a8:	687b      	ldr	r3, [r7, #4]
 801b3aa:	3318      	adds	r3, #24
 801b3ac:	4618      	mov	r0, r3
 801b3ae:	f000 f8ed 	bl	801b58c <_ZN19core_utils_CallbackIvA3_iEC1Ev>
	}
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	4618      	mov	r0, r3
 801b3b6:	3708      	adds	r7, #8
 801b3b8:	46bd      	mov	sp, r7
 801b3ba:	bd80      	pop	{r7, pc}
 801b3bc:	08023840 	.word	0x08023840

0801b3c0 <_ZN24core_utils_RegisterEntryImEC1Ev>:
	core_utils_RegisterEntry() {
 801b3c0:	b590      	push	{r4, r7, lr}
 801b3c2:	b08b      	sub	sp, #44	@ 0x2c
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	6078      	str	r0, [r7, #4]
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	4618      	mov	r0, r3
 801b3cc:	f7fb ffba 	bl	8017344 <_ZN13RegisterEntryC1Ev>
 801b3d0:	4a0c      	ldr	r2, [pc, #48]	@ (801b404 <_ZN24core_utils_RegisterEntryImEC1Ev+0x44>)
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	601a      	str	r2, [r3, #0]
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	2201      	movs	r2, #1
 801b3da:	731a      	strb	r2, [r3, #12]
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	f103 0418 	add.w	r4, r3, #24
 801b3e2:	f107 0308 	add.w	r3, r7, #8
 801b3e6:	4618      	mov	r0, r3
 801b3e8:	f7f9 fb22 	bl	8014a30 <_ZN19core_utils_CallbackIvvEC1Ev>
 801b3ec:	f107 0308 	add.w	r3, r7, #8
 801b3f0:	4619      	mov	r1, r3
 801b3f2:	4620      	mov	r0, r4
 801b3f4:	f7fb ffce 	bl	8017394 <_ZN8CallbackC1EOS_>
	}
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	4618      	mov	r0, r3
 801b3fc:	372c      	adds	r7, #44	@ 0x2c
 801b3fe:	46bd      	mov	sp, r7
 801b400:	bd90      	pop	{r4, r7, pc}
 801b402:	bf00      	nop
 801b404:	08023810 	.word	0x08023810

0801b408 <_ZN27core_utils_RegisterFunctionIvhEC1Ev>:
	core_utils_RegisterFunction() {
 801b408:	b580      	push	{r7, lr}
 801b40a:	b082      	sub	sp, #8
 801b40c:	af00      	add	r7, sp, #0
 801b40e:	6078      	str	r0, [r7, #4]
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	4618      	mov	r0, r3
 801b414:	f7fb ff96 	bl	8017344 <_ZN13RegisterEntryC1Ev>
 801b418:	4a07      	ldr	r2, [pc, #28]	@ (801b438 <_ZN27core_utils_RegisterFunctionIvhEC1Ev+0x30>)
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	601a      	str	r2, [r3, #0]
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	2202      	movs	r2, #2
 801b422:	71da      	strb	r2, [r3, #7]
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	330c      	adds	r3, #12
 801b428:	4618      	mov	r0, r3
 801b42a:	f000 f8cd 	bl	801b5c8 <_ZN19core_utils_CallbackIvhEC1Ev>
	}
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	4618      	mov	r0, r3
 801b432:	3708      	adds	r7, #8
 801b434:	46bd      	mov	sp, r7
 801b436:	bd80      	pop	{r7, pc}
 801b438:	080237d0 	.word	0x080237d0

0801b43c <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE3setEtP11RegisterMapPS0_19register_entry_rw_t>:
	void set(uint16_t address, RegisterMap *map, T *data,
 801b43c:	b580      	push	{r7, lr}
 801b43e:	b084      	sub	sp, #16
 801b440:	af00      	add	r7, sp, #0
 801b442:	60f8      	str	r0, [r7, #12]
 801b444:	607a      	str	r2, [r7, #4]
 801b446:	603b      	str	r3, [r7, #0]
 801b448:	460b      	mov	r3, r1
 801b44a:	817b      	strh	r3, [r7, #10]
		this->address = address;
 801b44c:	68fb      	ldr	r3, [r7, #12]
 801b44e:	897a      	ldrh	r2, [r7, #10]
 801b450:	811a      	strh	r2, [r3, #8]
		this->data = data;
 801b452:	68fb      	ldr	r3, [r7, #12]
 801b454:	683a      	ldr	r2, [r7, #0]
 801b456:	60da      	str	r2, [r3, #12]
		map->addEntry(address, this);
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	681b      	ldr	r3, [r3, #0]
 801b45c:	3308      	adds	r3, #8
 801b45e:	681b      	ldr	r3, [r3, #0]
 801b460:	68fa      	ldr	r2, [r7, #12]
 801b462:	8979      	ldrh	r1, [r7, #10]
 801b464:	6878      	ldr	r0, [r7, #4]
 801b466:	4798      	blx	r3
		this->rw = rw;
 801b468:	68fb      	ldr	r3, [r7, #12]
 801b46a:	7e3a      	ldrb	r2, [r7, #24]
 801b46c:	729a      	strb	r2, [r3, #10]
	}
 801b46e:	bf00      	nop
 801b470:	3710      	adds	r7, #16
 801b472:	46bd      	mov	sp, r7
 801b474:	bd80      	pop	{r7, pc}

0801b476 <_ZN24core_utils_RegisterEntryImE3setEtP11RegisterMapPm19register_entry_rw_t>:
	void set(uint16_t address, RegisterMap *map, T *data,
 801b476:	b580      	push	{r7, lr}
 801b478:	b084      	sub	sp, #16
 801b47a:	af00      	add	r7, sp, #0
 801b47c:	60f8      	str	r0, [r7, #12]
 801b47e:	607a      	str	r2, [r7, #4]
 801b480:	603b      	str	r3, [r7, #0]
 801b482:	460b      	mov	r3, r1
 801b484:	817b      	strh	r3, [r7, #10]
		this->address = address;
 801b486:	68fb      	ldr	r3, [r7, #12]
 801b488:	897a      	ldrh	r2, [r7, #10]
 801b48a:	81da      	strh	r2, [r3, #14]
		this->data = data;
 801b48c:	68fb      	ldr	r3, [r7, #12]
 801b48e:	683a      	ldr	r2, [r7, #0]
 801b490:	615a      	str	r2, [r3, #20]
		map->addEntry(address, this);
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	3308      	adds	r3, #8
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	68fa      	ldr	r2, [r7, #12]
 801b49c:	8979      	ldrh	r1, [r7, #10]
 801b49e:	6878      	ldr	r0, [r7, #4]
 801b4a0:	4798      	blx	r3
		this->rw = rw;
 801b4a2:	68fb      	ldr	r3, [r7, #12]
 801b4a4:	7e3a      	ldrb	r2, [r7, #24]
 801b4a6:	741a      	strb	r2, [r3, #16]
	}
 801b4a8:	bf00      	nop
 801b4aa:	3710      	adds	r7, #16
 801b4ac:	46bd      	mov	sp, r7
 801b4ae:	bd80      	pop	{r7, pc}

0801b4b0 <_ZN19core_utils_CallbackIvhEC1EPFvhE>:
	core_utils_Callback(R (*function)(A)) {
 801b4b0:	b5b0      	push	{r4, r5, r7, lr}
 801b4b2:	b088      	sub	sp, #32
 801b4b4:	af00      	add	r7, sp, #0
 801b4b6:	6078      	str	r0, [r7, #4]
 801b4b8:	6039      	str	r1, [r7, #0]
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	4618      	mov	r0, r3
 801b4be:	f7f8 fd65 	bl	8013f8c <_ZN8CallbackC1Ev>
 801b4c2:	4a12      	ldr	r2, [pc, #72]	@ (801b50c <_ZN19core_utils_CallbackIvhEC1EPFvhE+0x5c>)
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	601a      	str	r2, [r3, #0]
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	711a      	strb	r2, [r3, #4]
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	3308      	adds	r3, #8
 801b4d2:	2100      	movs	r1, #0
 801b4d4:	4618      	mov	r0, r3
 801b4d6:	f000 f895 	bl	801b604 <_ZN26core_utils_FunctionPointerIvhEC1EPFvhE>
		_fp = core_utils_FunctionPointer<R, A>(function);
 801b4da:	f107 0308 	add.w	r3, r7, #8
 801b4de:	6839      	ldr	r1, [r7, #0]
 801b4e0:	4618      	mov	r0, r3
 801b4e2:	f000 f88f 	bl	801b604 <_ZN26core_utils_FunctionPointerIvhEC1EPFvhE>
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	f103 0408 	add.w	r4, r3, #8
 801b4ec:	f107 0508 	add.w	r5, r7, #8
 801b4f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b4f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b4f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b4f8:	e884 0003 	stmia.w	r4, {r0, r1}
		this->registered = 1;
 801b4fc:	687b      	ldr	r3, [r7, #4]
 801b4fe:	2201      	movs	r2, #1
 801b500:	711a      	strb	r2, [r3, #4]
	}
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	4618      	mov	r0, r3
 801b506:	3720      	adds	r7, #32
 801b508:	46bd      	mov	sp, r7
 801b50a:	bdb0      	pop	{r4, r5, r7, pc}
 801b50c:	08023800 	.word	0x08023800

0801b510 <_ZN19core_utils_CallbackIvhEaSERKS0_>:
class core_utils_Callback: public Callback {
 801b510:	b5b0      	push	{r4, r5, r7, lr}
 801b512:	b082      	sub	sp, #8
 801b514:	af00      	add	r7, sp, #0
 801b516:	6078      	str	r0, [r7, #4]
 801b518:	6039      	str	r1, [r7, #0]
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	683a      	ldr	r2, [r7, #0]
 801b51e:	4611      	mov	r1, r2
 801b520:	4618      	mov	r0, r3
 801b522:	f7f8 fd58 	bl	8013fd6 <_ZN8CallbackaSERKS_>
 801b526:	683b      	ldr	r3, [r7, #0]
 801b528:	791a      	ldrb	r2, [r3, #4]
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	711a      	strb	r2, [r3, #4]
 801b52e:	687a      	ldr	r2, [r7, #4]
 801b530:	683b      	ldr	r3, [r7, #0]
 801b532:	f102 0408 	add.w	r4, r2, #8
 801b536:	f103 0508 	add.w	r5, r3, #8
 801b53a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b53c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b53e:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b542:	e884 0003 	stmia.w	r4, {r0, r1}
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	4618      	mov	r0, r3
 801b54a:	3708      	adds	r7, #8
 801b54c:	46bd      	mov	sp, r7
 801b54e:	bdb0      	pop	{r4, r5, r7, pc}

0801b550 <_ZN27core_utils_RegisterFunctionIvhE3setEtP11RegisterMap19core_utils_CallbackIvhE>:
	void set(uint16_t address, RegisterMap *map,
 801b550:	b580      	push	{r7, lr}
 801b552:	b084      	sub	sp, #16
 801b554:	af00      	add	r7, sp, #0
 801b556:	60f8      	str	r0, [r7, #12]
 801b558:	607a      	str	r2, [r7, #4]
 801b55a:	603b      	str	r3, [r7, #0]
 801b55c:	460b      	mov	r3, r1
 801b55e:	817b      	strh	r3, [r7, #10]
		this->address = address;
 801b560:	68fb      	ldr	r3, [r7, #12]
 801b562:	897a      	ldrh	r2, [r7, #10]
 801b564:	811a      	strh	r2, [r3, #8]
		this->function = function;
 801b566:	68fb      	ldr	r3, [r7, #12]
 801b568:	330c      	adds	r3, #12
 801b56a:	6839      	ldr	r1, [r7, #0]
 801b56c:	4618      	mov	r0, r3
 801b56e:	f7ff ffcf 	bl	801b510 <_ZN19core_utils_CallbackIvhEaSERKS0_>
		map->addEntry(this->address, this);
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	3308      	adds	r3, #8
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	68fa      	ldr	r2, [r7, #12]
 801b57c:	8911      	ldrh	r1, [r2, #8]
 801b57e:	68fa      	ldr	r2, [r7, #12]
 801b580:	6878      	ldr	r0, [r7, #4]
 801b582:	4798      	blx	r3
	}
 801b584:	bf00      	nop
 801b586:	3710      	adds	r7, #16
 801b588:	46bd      	mov	sp, r7
 801b58a:	bd80      	pop	{r7, pc}

0801b58c <_ZN19core_utils_CallbackIvA3_iEC1Ev>:
	core_utils_Callback() {
 801b58c:	b580      	push	{r7, lr}
 801b58e:	b082      	sub	sp, #8
 801b590:	af00      	add	r7, sp, #0
 801b592:	6078      	str	r0, [r7, #4]
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	4618      	mov	r0, r3
 801b598:	f7f8 fcf8 	bl	8013f8c <_ZN8CallbackC1Ev>
 801b59c:	4a09      	ldr	r2, [pc, #36]	@ (801b5c4 <_ZN19core_utils_CallbackIvA3_iEC1Ev+0x38>)
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	601a      	str	r2, [r3, #0]
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	2200      	movs	r2, #0
 801b5a6:	711a      	strb	r2, [r3, #4]
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	3308      	adds	r3, #8
 801b5ac:	2100      	movs	r1, #0
 801b5ae:	4618      	mov	r0, r3
 801b5b0:	f000 f836 	bl	801b620 <_ZN26core_utils_FunctionPointerIvA3_iEC1EPFvPiE>
		this->registered = 0;
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	2200      	movs	r2, #0
 801b5b8:	711a      	strb	r2, [r3, #4]
	}
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	4618      	mov	r0, r3
 801b5be:	3708      	adds	r7, #8
 801b5c0:	46bd      	mov	sp, r7
 801b5c2:	bd80      	pop	{r7, pc}
 801b5c4:	08023870 	.word	0x08023870

0801b5c8 <_ZN19core_utils_CallbackIvhEC1Ev>:
	core_utils_Callback() {
 801b5c8:	b580      	push	{r7, lr}
 801b5ca:	b082      	sub	sp, #8
 801b5cc:	af00      	add	r7, sp, #0
 801b5ce:	6078      	str	r0, [r7, #4]
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	4618      	mov	r0, r3
 801b5d4:	f7f8 fcda 	bl	8013f8c <_ZN8CallbackC1Ev>
 801b5d8:	4a09      	ldr	r2, [pc, #36]	@ (801b600 <_ZN19core_utils_CallbackIvhEC1Ev+0x38>)
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	601a      	str	r2, [r3, #0]
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	2200      	movs	r2, #0
 801b5e2:	711a      	strb	r2, [r3, #4]
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	3308      	adds	r3, #8
 801b5e8:	2100      	movs	r1, #0
 801b5ea:	4618      	mov	r0, r3
 801b5ec:	f000 f80a 	bl	801b604 <_ZN26core_utils_FunctionPointerIvhEC1EPFvhE>
		this->registered = 0;
 801b5f0:	687b      	ldr	r3, [r7, #4]
 801b5f2:	2200      	movs	r2, #0
 801b5f4:	711a      	strb	r2, [r3, #4]
	}
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	4618      	mov	r0, r3
 801b5fa:	3708      	adds	r7, #8
 801b5fc:	46bd      	mov	sp, r7
 801b5fe:	bd80      	pop	{r7, pc}
 801b600:	08023800 	.word	0x08023800

0801b604 <_ZN26core_utils_FunctionPointerIvhEC1EPFvhE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 801b604:	b580      	push	{r7, lr}
 801b606:	b082      	sub	sp, #8
 801b608:	af00      	add	r7, sp, #0
 801b60a:	6078      	str	r0, [r7, #4]
 801b60c:	6039      	str	r1, [r7, #0]
        attach(function);
 801b60e:	6839      	ldr	r1, [r7, #0]
 801b610:	6878      	ldr	r0, [r7, #4]
 801b612:	f000 f813 	bl	801b63c <_ZN26core_utils_FunctionPointerIvhE6attachEPFvhE>
    }
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	4618      	mov	r0, r3
 801b61a:	3708      	adds	r7, #8
 801b61c:	46bd      	mov	sp, r7
 801b61e:	bd80      	pop	{r7, pc}

0801b620 <_ZN26core_utils_FunctionPointerIvA3_iEC1EPFvPiE>:
	core_utils_FunctionPointer(R (*function)(A1) = 0) {
 801b620:	b580      	push	{r7, lr}
 801b622:	b082      	sub	sp, #8
 801b624:	af00      	add	r7, sp, #0
 801b626:	6078      	str	r0, [r7, #4]
 801b628:	6039      	str	r1, [r7, #0]
        attach(function);
 801b62a:	6839      	ldr	r1, [r7, #0]
 801b62c:	6878      	ldr	r0, [r7, #4]
 801b62e:	f000 f816 	bl	801b65e <_ZN26core_utils_FunctionPointerIvA3_iE6attachEPFvPiE>
    }
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	4618      	mov	r0, r3
 801b636:	3708      	adds	r7, #8
 801b638:	46bd      	mov	sp, r7
 801b63a:	bd80      	pop	{r7, pc}

0801b63c <_ZN26core_utils_FunctionPointerIvhE6attachEPFvhE>:
    void attach(R (*function)(A1)) {
 801b63c:	b480      	push	{r7}
 801b63e:	b083      	sub	sp, #12
 801b640:	af00      	add	r7, sp, #0
 801b642:	6078      	str	r0, [r7, #4]
 801b644:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	683a      	ldr	r2, [r7, #0]
 801b64a:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801b64c:	687b      	ldr	r3, [r7, #4]
 801b64e:	2200      	movs	r2, #0
 801b650:	615a      	str	r2, [r3, #20]
    }
 801b652:	bf00      	nop
 801b654:	370c      	adds	r7, #12
 801b656:	46bd      	mov	sp, r7
 801b658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b65c:	4770      	bx	lr

0801b65e <_ZN26core_utils_FunctionPointerIvA3_iE6attachEPFvPiE>:
    void attach(R (*function)(A1)) {
 801b65e:	b480      	push	{r7}
 801b660:	b083      	sub	sp, #12
 801b662:	af00      	add	r7, sp, #0
 801b664:	6078      	str	r0, [r7, #4]
 801b666:	6039      	str	r1, [r7, #0]
        _p.function = function;
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	683a      	ldr	r2, [r7, #0]
 801b66c:	601a      	str	r2, [r3, #0]
        _membercaller = 0;
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	2200      	movs	r2, #0
 801b672:	615a      	str	r2, [r3, #20]
    }
 801b674:	bf00      	nop
 801b676:	370c      	adds	r7, #12
 801b678:	46bd      	mov	sp, r7
 801b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b67e:	4770      	bx	lr

0801b680 <_Z41__static_initialization_and_destruction_0ii>:
 801b680:	b580      	push	{r7, lr}
 801b682:	b082      	sub	sp, #8
 801b684:	af00      	add	r7, sp, #0
 801b686:	6078      	str	r0, [r7, #4]
 801b688:	6039      	str	r1, [r7, #0]
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	2b01      	cmp	r3, #1
 801b68e:	d107      	bne.n	801b6a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
 801b690:	683b      	ldr	r3, [r7, #0]
 801b692:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b696:	4293      	cmp	r3, r2
 801b698:	d102      	bne.n	801b6a0 <_Z41__static_initialization_and_destruction_0ii+0x20>
TWIPR_Firmware twipr_firmware;
 801b69a:	4803      	ldr	r0, [pc, #12]	@ (801b6a8 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 801b69c:	f7ff fbed 	bl	801ae7a <_ZN14TWIPR_FirmwareC1Ev>
}
 801b6a0:	bf00      	nop
 801b6a2:	3708      	adds	r7, #8
 801b6a4:	46bd      	mov	sp, r7
 801b6a6:	bd80      	pop	{r7, pc}
 801b6a8:	24015430 	.word	0x24015430

0801b6ac <_ZN22core_utils_RegisterMapILi60EE5writeEtPv>:
	void write(uint16_t address, void *data) {
 801b6ac:	b580      	push	{r7, lr}
 801b6ae:	b084      	sub	sp, #16
 801b6b0:	af00      	add	r7, sp, #0
 801b6b2:	60f8      	str	r0, [r7, #12]
 801b6b4:	460b      	mov	r3, r1
 801b6b6:	607a      	str	r2, [r7, #4]
 801b6b8:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 801b6ba:	897b      	ldrh	r3, [r7, #10]
 801b6bc:	68fa      	ldr	r2, [r7, #12]
 801b6be:	3302      	adds	r3, #2
 801b6c0:	009b      	lsls	r3, r3, #2
 801b6c2:	4413      	add	r3, r2
 801b6c4:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d015      	beq.n	801b6f6 <_ZN22core_utils_RegisterMapILi60EE5writeEtPv+0x4a>
 801b6ca:	897b      	ldrh	r3, [r7, #10]
 801b6cc:	68fa      	ldr	r2, [r7, #12]
 801b6ce:	3302      	adds	r3, #2
 801b6d0:	009b      	lsls	r3, r3, #2
 801b6d2:	4413      	add	r3, r2
 801b6d4:	6859      	ldr	r1, [r3, #4]
 801b6d6:	897b      	ldrh	r3, [r7, #10]
 801b6d8:	68fa      	ldr	r2, [r7, #12]
 801b6da:	3302      	adds	r3, #2
 801b6dc:	009b      	lsls	r3, r3, #2
 801b6de:	4413      	add	r3, r2
 801b6e0:	685b      	ldr	r3, [r3, #4]
 801b6e2:	681b      	ldr	r3, [r3, #0]
 801b6e4:	3320      	adds	r3, #32
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	4608      	mov	r0, r1
 801b6ea:	4798      	blx	r3
 801b6ec:	4603      	mov	r3, r0
 801b6ee:	2b01      	cmp	r3, #1
 801b6f0:	d101      	bne.n	801b6f6 <_ZN22core_utils_RegisterMapILi60EE5writeEtPv+0x4a>
 801b6f2:	2301      	movs	r3, #1
 801b6f4:	e000      	b.n	801b6f8 <_ZN22core_utils_RegisterMapILi60EE5writeEtPv+0x4c>
 801b6f6:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d00f      	beq.n	801b71c <_ZN22core_utils_RegisterMapILi60EE5writeEtPv+0x70>
			this->entries[address]->write(data);
 801b6fc:	897b      	ldrh	r3, [r7, #10]
 801b6fe:	68fa      	ldr	r2, [r7, #12]
 801b700:	3302      	adds	r3, #2
 801b702:	009b      	lsls	r3, r3, #2
 801b704:	4413      	add	r3, r2
 801b706:	6858      	ldr	r0, [r3, #4]
 801b708:	897b      	ldrh	r3, [r7, #10]
 801b70a:	68fa      	ldr	r2, [r7, #12]
 801b70c:	3302      	adds	r3, #2
 801b70e:	009b      	lsls	r3, r3, #2
 801b710:	4413      	add	r3, r2
 801b712:	685b      	ldr	r3, [r3, #4]
 801b714:	681b      	ldr	r3, [r3, #0]
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	6879      	ldr	r1, [r7, #4]
 801b71a:	4798      	blx	r3
	}
 801b71c:	bf00      	nop
 801b71e:	3710      	adds	r7, #16
 801b720:	46bd      	mov	sp, r7
 801b722:	bd80      	pop	{r7, pc}

0801b724 <_ZN22core_utils_RegisterMapILi60EE5writeEtPh>:
	void write(uint16_t address, uint8_t *data) {
 801b724:	b580      	push	{r7, lr}
 801b726:	b084      	sub	sp, #16
 801b728:	af00      	add	r7, sp, #0
 801b72a:	60f8      	str	r0, [r7, #12]
 801b72c:	460b      	mov	r3, r1
 801b72e:	607a      	str	r2, [r7, #4]
 801b730:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 801b732:	897b      	ldrh	r3, [r7, #10]
 801b734:	68fa      	ldr	r2, [r7, #12]
 801b736:	3302      	adds	r3, #2
 801b738:	009b      	lsls	r3, r3, #2
 801b73a:	4413      	add	r3, r2
 801b73c:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 801b73e:	2b00      	cmp	r3, #0
 801b740:	d015      	beq.n	801b76e <_ZN22core_utils_RegisterMapILi60EE5writeEtPh+0x4a>
 801b742:	897b      	ldrh	r3, [r7, #10]
 801b744:	68fa      	ldr	r2, [r7, #12]
 801b746:	3302      	adds	r3, #2
 801b748:	009b      	lsls	r3, r3, #2
 801b74a:	4413      	add	r3, r2
 801b74c:	6859      	ldr	r1, [r3, #4]
 801b74e:	897b      	ldrh	r3, [r7, #10]
 801b750:	68fa      	ldr	r2, [r7, #12]
 801b752:	3302      	adds	r3, #2
 801b754:	009b      	lsls	r3, r3, #2
 801b756:	4413      	add	r3, r2
 801b758:	685b      	ldr	r3, [r3, #4]
 801b75a:	681b      	ldr	r3, [r3, #0]
 801b75c:	3320      	adds	r3, #32
 801b75e:	681b      	ldr	r3, [r3, #0]
 801b760:	4608      	mov	r0, r1
 801b762:	4798      	blx	r3
 801b764:	4603      	mov	r3, r0
 801b766:	2b01      	cmp	r3, #1
 801b768:	d101      	bne.n	801b76e <_ZN22core_utils_RegisterMapILi60EE5writeEtPh+0x4a>
 801b76a:	2301      	movs	r3, #1
 801b76c:	e000      	b.n	801b770 <_ZN22core_utils_RegisterMapILi60EE5writeEtPh+0x4c>
 801b76e:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 801b770:	2b00      	cmp	r3, #0
 801b772:	d010      	beq.n	801b796 <_ZN22core_utils_RegisterMapILi60EE5writeEtPh+0x72>
			this->entries[address]->write(data);
 801b774:	897b      	ldrh	r3, [r7, #10]
 801b776:	68fa      	ldr	r2, [r7, #12]
 801b778:	3302      	adds	r3, #2
 801b77a:	009b      	lsls	r3, r3, #2
 801b77c:	4413      	add	r3, r2
 801b77e:	6858      	ldr	r0, [r3, #4]
 801b780:	897b      	ldrh	r3, [r7, #10]
 801b782:	68fa      	ldr	r2, [r7, #12]
 801b784:	3302      	adds	r3, #2
 801b786:	009b      	lsls	r3, r3, #2
 801b788:	4413      	add	r3, r2
 801b78a:	685b      	ldr	r3, [r3, #4]
 801b78c:	681b      	ldr	r3, [r3, #0]
 801b78e:	3304      	adds	r3, #4
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	6879      	ldr	r1, [r7, #4]
 801b794:	4798      	blx	r3
	}
 801b796:	bf00      	nop
 801b798:	3710      	adds	r7, #16
 801b79a:	46bd      	mov	sp, r7
 801b79c:	bd80      	pop	{r7, pc}

0801b79e <_ZN22core_utils_RegisterMapILi60EE8addEntryEtP13RegisterEntry>:
	void addEntry(uint16_t address, RegisterEntry *entry) {
 801b79e:	b480      	push	{r7}
 801b7a0:	b085      	sub	sp, #20
 801b7a2:	af00      	add	r7, sp, #0
 801b7a4:	60f8      	str	r0, [r7, #12]
 801b7a6:	460b      	mov	r3, r1
 801b7a8:	607a      	str	r2, [r7, #4]
 801b7aa:	817b      	strh	r3, [r7, #10]
		this->entries[address] = entry;
 801b7ac:	897b      	ldrh	r3, [r7, #10]
 801b7ae:	68fa      	ldr	r2, [r7, #12]
 801b7b0:	3302      	adds	r3, #2
 801b7b2:	009b      	lsls	r3, r3, #2
 801b7b4:	4413      	add	r3, r2
 801b7b6:	687a      	ldr	r2, [r7, #4]
 801b7b8:	605a      	str	r2, [r3, #4]
	}
 801b7ba:	bf00      	nop
 801b7bc:	3714      	adds	r7, #20
 801b7be:	46bd      	mov	sp, r7
 801b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7c4:	4770      	bx	lr

0801b7c6 <_ZN22core_utils_RegisterMapILi60EE8hasEntryEt>:
	bool hasEntry(uint16_t address) {
 801b7c6:	b480      	push	{r7}
 801b7c8:	b083      	sub	sp, #12
 801b7ca:	af00      	add	r7, sp, #0
 801b7cc:	6078      	str	r0, [r7, #4]
 801b7ce:	460b      	mov	r3, r1
 801b7d0:	807b      	strh	r3, [r7, #2]
		if (this->entries[address] != NULL) {
 801b7d2:	887b      	ldrh	r3, [r7, #2]
 801b7d4:	687a      	ldr	r2, [r7, #4]
 801b7d6:	3302      	adds	r3, #2
 801b7d8:	009b      	lsls	r3, r3, #2
 801b7da:	4413      	add	r3, r2
 801b7dc:	685b      	ldr	r3, [r3, #4]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d001      	beq.n	801b7e6 <_ZN22core_utils_RegisterMapILi60EE8hasEntryEt+0x20>
			return true;
 801b7e2:	2301      	movs	r3, #1
 801b7e4:	e000      	b.n	801b7e8 <_ZN22core_utils_RegisterMapILi60EE8hasEntryEt+0x22>
			return false;
 801b7e6:	2300      	movs	r3, #0
	}
 801b7e8:	4618      	mov	r0, r3
 801b7ea:	370c      	adds	r7, #12
 801b7ec:	46bd      	mov	sp, r7
 801b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7f2:	4770      	bx	lr

0801b7f4 <_ZN22core_utils_RegisterMapILi60EE4readEtPh>:
	uint8_t read(uint16_t address, uint8_t *data) {
 801b7f4:	b580      	push	{r7, lr}
 801b7f6:	b084      	sub	sp, #16
 801b7f8:	af00      	add	r7, sp, #0
 801b7fa:	60f8      	str	r0, [r7, #12]
 801b7fc:	460b      	mov	r3, r1
 801b7fe:	607a      	str	r2, [r7, #4]
 801b800:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 801b802:	897b      	ldrh	r3, [r7, #10]
 801b804:	68fa      	ldr	r2, [r7, #12]
 801b806:	3302      	adds	r3, #2
 801b808:	009b      	lsls	r3, r3, #2
 801b80a:	4413      	add	r3, r2
 801b80c:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType() == REGISTER_ENTRY_DATA) {
 801b80e:	2b00      	cmp	r3, #0
 801b810:	d015      	beq.n	801b83e <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x4a>
 801b812:	897b      	ldrh	r3, [r7, #10]
 801b814:	68fa      	ldr	r2, [r7, #12]
 801b816:	3302      	adds	r3, #2
 801b818:	009b      	lsls	r3, r3, #2
 801b81a:	4413      	add	r3, r2
 801b81c:	6859      	ldr	r1, [r3, #4]
 801b81e:	897b      	ldrh	r3, [r7, #10]
 801b820:	68fa      	ldr	r2, [r7, #12]
 801b822:	3302      	adds	r3, #2
 801b824:	009b      	lsls	r3, r3, #2
 801b826:	4413      	add	r3, r2
 801b828:	685b      	ldr	r3, [r3, #4]
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	3320      	adds	r3, #32
 801b82e:	681b      	ldr	r3, [r3, #0]
 801b830:	4608      	mov	r0, r1
 801b832:	4798      	blx	r3
 801b834:	4603      	mov	r3, r0
 801b836:	2b01      	cmp	r3, #1
 801b838:	d101      	bne.n	801b83e <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x4a>
 801b83a:	2301      	movs	r3, #1
 801b83c:	e000      	b.n	801b840 <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x4c>
 801b83e:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 801b840:	2b00      	cmp	r3, #0
 801b842:	d012      	beq.n	801b86a <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x76>
			return this->entries[address]->readBytes(data);
 801b844:	897b      	ldrh	r3, [r7, #10]
 801b846:	68fa      	ldr	r2, [r7, #12]
 801b848:	3302      	adds	r3, #2
 801b84a:	009b      	lsls	r3, r3, #2
 801b84c:	4413      	add	r3, r2
 801b84e:	6858      	ldr	r0, [r3, #4]
 801b850:	897b      	ldrh	r3, [r7, #10]
 801b852:	68fa      	ldr	r2, [r7, #12]
 801b854:	3302      	adds	r3, #2
 801b856:	009b      	lsls	r3, r3, #2
 801b858:	4413      	add	r3, r2
 801b85a:	685b      	ldr	r3, [r3, #4]
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	3308      	adds	r3, #8
 801b860:	681b      	ldr	r3, [r3, #0]
 801b862:	6879      	ldr	r1, [r7, #4]
 801b864:	4798      	blx	r3
 801b866:	4603      	mov	r3, r0
 801b868:	e000      	b.n	801b86c <_ZN22core_utils_RegisterMapILi60EE4readEtPh+0x78>
		return 0;
 801b86a:	2300      	movs	r3, #0
	}
 801b86c:	4618      	mov	r0, r3
 801b86e:	3710      	adds	r7, #16
 801b870:	46bd      	mov	sp, r7
 801b872:	bd80      	pop	{r7, pc}

0801b874 <_ZN22core_utils_RegisterMapILi60EE7getSizeEt>:
	uint8_t getSize(uint16_t address) {
 801b874:	b580      	push	{r7, lr}
 801b876:	b082      	sub	sp, #8
 801b878:	af00      	add	r7, sp, #0
 801b87a:	6078      	str	r0, [r7, #4]
 801b87c:	460b      	mov	r3, r1
 801b87e:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getSize();
 801b880:	887b      	ldrh	r3, [r7, #2]
 801b882:	687a      	ldr	r2, [r7, #4]
 801b884:	3302      	adds	r3, #2
 801b886:	009b      	lsls	r3, r3, #2
 801b888:	4413      	add	r3, r2
 801b88a:	6859      	ldr	r1, [r3, #4]
 801b88c:	887b      	ldrh	r3, [r7, #2]
 801b88e:	687a      	ldr	r2, [r7, #4]
 801b890:	3302      	adds	r3, #2
 801b892:	009b      	lsls	r3, r3, #2
 801b894:	4413      	add	r3, r2
 801b896:	685b      	ldr	r3, [r3, #4]
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	330c      	adds	r3, #12
 801b89c:	681b      	ldr	r3, [r3, #0]
 801b89e:	4608      	mov	r0, r1
 801b8a0:	4798      	blx	r3
 801b8a2:	4603      	mov	r3, r0
	}
 801b8a4:	4618      	mov	r0, r3
 801b8a6:	3708      	adds	r7, #8
 801b8a8:	46bd      	mov	sp, r7
 801b8aa:	bd80      	pop	{r7, pc}

0801b8ac <_ZN22core_utils_RegisterMapILi60EE7getTypeEt>:
	register_entry_type getType(uint16_t address) {
 801b8ac:	b580      	push	{r7, lr}
 801b8ae:	b082      	sub	sp, #8
 801b8b0:	af00      	add	r7, sp, #0
 801b8b2:	6078      	str	r0, [r7, #4]
 801b8b4:	460b      	mov	r3, r1
 801b8b6:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getType();
 801b8b8:	887b      	ldrh	r3, [r7, #2]
 801b8ba:	687a      	ldr	r2, [r7, #4]
 801b8bc:	3302      	adds	r3, #2
 801b8be:	009b      	lsls	r3, r3, #2
 801b8c0:	4413      	add	r3, r2
 801b8c2:	6859      	ldr	r1, [r3, #4]
 801b8c4:	887b      	ldrh	r3, [r7, #2]
 801b8c6:	687a      	ldr	r2, [r7, #4]
 801b8c8:	3302      	adds	r3, #2
 801b8ca:	009b      	lsls	r3, r3, #2
 801b8cc:	4413      	add	r3, r2
 801b8ce:	685b      	ldr	r3, [r3, #4]
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	3320      	adds	r3, #32
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	4608      	mov	r0, r1
 801b8d8:	4798      	blx	r3
 801b8da:	4603      	mov	r3, r0
	}
 801b8dc:	4618      	mov	r0, r3
 801b8de:	3708      	adds	r7, #8
 801b8e0:	46bd      	mov	sp, r7
 801b8e2:	bd80      	pop	{r7, pc}

0801b8e4 <_ZN22core_utils_RegisterMapILi60EE19getReadWriteSettingEt>:
	register_entry_rw_t getReadWriteSetting(uint16_t address) {
 801b8e4:	b580      	push	{r7, lr}
 801b8e6:	b082      	sub	sp, #8
 801b8e8:	af00      	add	r7, sp, #0
 801b8ea:	6078      	str	r0, [r7, #4]
 801b8ec:	460b      	mov	r3, r1
 801b8ee:	807b      	strh	r3, [r7, #2]
		return this->entries[address]->getReadWriteSetting();
 801b8f0:	887b      	ldrh	r3, [r7, #2]
 801b8f2:	687a      	ldr	r2, [r7, #4]
 801b8f4:	3302      	adds	r3, #2
 801b8f6:	009b      	lsls	r3, r3, #2
 801b8f8:	4413      	add	r3, r2
 801b8fa:	6859      	ldr	r1, [r3, #4]
 801b8fc:	887b      	ldrh	r3, [r7, #2]
 801b8fe:	687a      	ldr	r2, [r7, #4]
 801b900:	3302      	adds	r3, #2
 801b902:	009b      	lsls	r3, r3, #2
 801b904:	4413      	add	r3, r2
 801b906:	685b      	ldr	r3, [r3, #4]
 801b908:	681b      	ldr	r3, [r3, #0]
 801b90a:	3324      	adds	r3, #36	@ 0x24
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	4608      	mov	r0, r1
 801b910:	4798      	blx	r3
 801b912:	4603      	mov	r3, r0
	}
 801b914:	4618      	mov	r0, r3
 801b916:	3708      	adds	r7, #8
 801b918:	46bd      	mov	sp, r7
 801b91a:	bd80      	pop	{r7, pc}

0801b91c <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_>:
	uint8_t execute(uint16_t address, uint8_t *input, uint8_t *output) {
 801b91c:	b580      	push	{r7, lr}
 801b91e:	b084      	sub	sp, #16
 801b920:	af00      	add	r7, sp, #0
 801b922:	60f8      	str	r0, [r7, #12]
 801b924:	607a      	str	r2, [r7, #4]
 801b926:	603b      	str	r3, [r7, #0]
 801b928:	460b      	mov	r3, r1
 801b92a:	817b      	strh	r3, [r7, #10]
		if (this->entries[address] != NULL
 801b92c:	897b      	ldrh	r3, [r7, #10]
 801b92e:	68fa      	ldr	r2, [r7, #12]
 801b930:	3302      	adds	r3, #2
 801b932:	009b      	lsls	r3, r3, #2
 801b934:	4413      	add	r3, r2
 801b936:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType()
 801b938:	2b00      	cmp	r3, #0
 801b93a:	d015      	beq.n	801b968 <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x4c>
 801b93c:	897b      	ldrh	r3, [r7, #10]
 801b93e:	68fa      	ldr	r2, [r7, #12]
 801b940:	3302      	adds	r3, #2
 801b942:	009b      	lsls	r3, r3, #2
 801b944:	4413      	add	r3, r2
 801b946:	6859      	ldr	r1, [r3, #4]
 801b948:	897b      	ldrh	r3, [r7, #10]
 801b94a:	68fa      	ldr	r2, [r7, #12]
 801b94c:	3302      	adds	r3, #2
 801b94e:	009b      	lsls	r3, r3, #2
 801b950:	4413      	add	r3, r2
 801b952:	685b      	ldr	r3, [r3, #4]
 801b954:	681b      	ldr	r3, [r3, #0]
 801b956:	3320      	adds	r3, #32
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	4608      	mov	r0, r1
 801b95c:	4798      	blx	r3
 801b95e:	4603      	mov	r3, r0
 801b960:	2b02      	cmp	r3, #2
 801b962:	d101      	bne.n	801b968 <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x4c>
 801b964:	2301      	movs	r3, #1
 801b966:	e000      	b.n	801b96a <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x4e>
 801b968:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d013      	beq.n	801b996 <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x7a>
			return this->entries[address]->execute(input, output);
 801b96e:	897b      	ldrh	r3, [r7, #10]
 801b970:	68fa      	ldr	r2, [r7, #12]
 801b972:	3302      	adds	r3, #2
 801b974:	009b      	lsls	r3, r3, #2
 801b976:	4413      	add	r3, r2
 801b978:	6858      	ldr	r0, [r3, #4]
 801b97a:	897b      	ldrh	r3, [r7, #10]
 801b97c:	68fa      	ldr	r2, [r7, #12]
 801b97e:	3302      	adds	r3, #2
 801b980:	009b      	lsls	r3, r3, #2
 801b982:	4413      	add	r3, r2
 801b984:	685b      	ldr	r3, [r3, #4]
 801b986:	681b      	ldr	r3, [r3, #0]
 801b988:	331c      	adds	r3, #28
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	683a      	ldr	r2, [r7, #0]
 801b98e:	6879      	ldr	r1, [r7, #4]
 801b990:	4798      	blx	r3
 801b992:	4603      	mov	r3, r0
 801b994:	e000      	b.n	801b998 <_ZN22core_utils_RegisterMapILi60EE7executeEtPhS1_+0x7c>
		return 0;
 801b996:	2300      	movs	r3, #0
	}
 801b998:	4618      	mov	r0, r3
 801b99a:	3710      	adds	r7, #16
 801b99c:	46bd      	mov	sp, r7
 801b99e:	bd80      	pop	{r7, pc}

0801b9a0 <_ZN22core_utils_RegisterMapILi60EE7executeEt>:
	uint8_t execute(uint16_t address) {
 801b9a0:	b580      	push	{r7, lr}
 801b9a2:	b082      	sub	sp, #8
 801b9a4:	af00      	add	r7, sp, #0
 801b9a6:	6078      	str	r0, [r7, #4]
 801b9a8:	460b      	mov	r3, r1
 801b9aa:	807b      	strh	r3, [r7, #2]
		if (this->entries[address] != NULL
 801b9ac:	887b      	ldrh	r3, [r7, #2]
 801b9ae:	687a      	ldr	r2, [r7, #4]
 801b9b0:	3302      	adds	r3, #2
 801b9b2:	009b      	lsls	r3, r3, #2
 801b9b4:	4413      	add	r3, r2
 801b9b6:	685b      	ldr	r3, [r3, #4]
				&& this->entries[address]->getType()
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d015      	beq.n	801b9e8 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0x48>
 801b9bc:	887b      	ldrh	r3, [r7, #2]
 801b9be:	687a      	ldr	r2, [r7, #4]
 801b9c0:	3302      	adds	r3, #2
 801b9c2:	009b      	lsls	r3, r3, #2
 801b9c4:	4413      	add	r3, r2
 801b9c6:	6859      	ldr	r1, [r3, #4]
 801b9c8:	887b      	ldrh	r3, [r7, #2]
 801b9ca:	687a      	ldr	r2, [r7, #4]
 801b9cc:	3302      	adds	r3, #2
 801b9ce:	009b      	lsls	r3, r3, #2
 801b9d0:	4413      	add	r3, r2
 801b9d2:	685b      	ldr	r3, [r3, #4]
 801b9d4:	681b      	ldr	r3, [r3, #0]
 801b9d6:	3320      	adds	r3, #32
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	4608      	mov	r0, r1
 801b9dc:	4798      	blx	r3
 801b9de:	4603      	mov	r3, r0
 801b9e0:	2b02      	cmp	r3, #2
 801b9e2:	d101      	bne.n	801b9e8 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0x48>
 801b9e4:	2301      	movs	r3, #1
 801b9e6:	e000      	b.n	801b9ea <_ZN22core_utils_RegisterMapILi60EE7executeEt+0x4a>
 801b9e8:	2300      	movs	r3, #0
		if (this->entries[address] != NULL
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d03d      	beq.n	801ba6a <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xca>
			if (this->entries[address]->getInputSize() == 0
 801b9ee:	887b      	ldrh	r3, [r7, #2]
 801b9f0:	687a      	ldr	r2, [r7, #4]
 801b9f2:	3302      	adds	r3, #2
 801b9f4:	009b      	lsls	r3, r3, #2
 801b9f6:	4413      	add	r3, r2
 801b9f8:	6859      	ldr	r1, [r3, #4]
 801b9fa:	887b      	ldrh	r3, [r7, #2]
 801b9fc:	687a      	ldr	r2, [r7, #4]
 801b9fe:	3302      	adds	r3, #2
 801ba00:	009b      	lsls	r3, r3, #2
 801ba02:	4413      	add	r3, r2
 801ba04:	685b      	ldr	r3, [r3, #4]
 801ba06:	681b      	ldr	r3, [r3, #0]
 801ba08:	3310      	adds	r3, #16
 801ba0a:	681b      	ldr	r3, [r3, #0]
 801ba0c:	4608      	mov	r0, r1
 801ba0e:	4798      	blx	r3
 801ba10:	4603      	mov	r3, r0
					&& this->entries[address]->getOutputSize() == 0) {
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d115      	bne.n	801ba42 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xa2>
 801ba16:	887b      	ldrh	r3, [r7, #2]
 801ba18:	687a      	ldr	r2, [r7, #4]
 801ba1a:	3302      	adds	r3, #2
 801ba1c:	009b      	lsls	r3, r3, #2
 801ba1e:	4413      	add	r3, r2
 801ba20:	6859      	ldr	r1, [r3, #4]
 801ba22:	887b      	ldrh	r3, [r7, #2]
 801ba24:	687a      	ldr	r2, [r7, #4]
 801ba26:	3302      	adds	r3, #2
 801ba28:	009b      	lsls	r3, r3, #2
 801ba2a:	4413      	add	r3, r2
 801ba2c:	685b      	ldr	r3, [r3, #4]
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	3314      	adds	r3, #20
 801ba32:	681b      	ldr	r3, [r3, #0]
 801ba34:	4608      	mov	r0, r1
 801ba36:	4798      	blx	r3
 801ba38:	4603      	mov	r3, r0
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d101      	bne.n	801ba42 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xa2>
 801ba3e:	2301      	movs	r3, #1
 801ba40:	e000      	b.n	801ba44 <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xa4>
 801ba42:	2300      	movs	r3, #0
			if (this->entries[address]->getInputSize() == 0
 801ba44:	2b00      	cmp	r3, #0
 801ba46:	d010      	beq.n	801ba6a <_ZN22core_utils_RegisterMapILi60EE7executeEt+0xca>
				this->entries[address]->execute();
 801ba48:	887b      	ldrh	r3, [r7, #2]
 801ba4a:	687a      	ldr	r2, [r7, #4]
 801ba4c:	3302      	adds	r3, #2
 801ba4e:	009b      	lsls	r3, r3, #2
 801ba50:	4413      	add	r3, r2
 801ba52:	6859      	ldr	r1, [r3, #4]
 801ba54:	887b      	ldrh	r3, [r7, #2]
 801ba56:	687a      	ldr	r2, [r7, #4]
 801ba58:	3302      	adds	r3, #2
 801ba5a:	009b      	lsls	r3, r3, #2
 801ba5c:	4413      	add	r3, r2
 801ba5e:	685b      	ldr	r3, [r3, #4]
 801ba60:	681b      	ldr	r3, [r3, #0]
 801ba62:	3318      	adds	r3, #24
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	4608      	mov	r0, r1
 801ba68:	4798      	blx	r3
		return 0;
 801ba6a:	2300      	movs	r3, #0
	}
 801ba6c:	4618      	mov	r0, r3
 801ba6e:	3708      	adds	r7, #8
 801ba70:	46bd      	mov	sp, r7
 801ba72:	bd80      	pop	{r7, pc}

0801ba74 <_ZN27core_utils_RegisterFunctionIvhE7getSizeEv>:
	uint8_t getSize() {
 801ba74:	b480      	push	{r7}
 801ba76:	b083      	sub	sp, #12
 801ba78:	af00      	add	r7, sp, #0
 801ba7a:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 801ba7c:	2301      	movs	r3, #1
	}
 801ba7e:	4618      	mov	r0, r3
 801ba80:	370c      	adds	r7, #12
 801ba82:	46bd      	mov	sp, r7
 801ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba88:	4770      	bx	lr

0801ba8a <_ZN27core_utils_RegisterFunctionIvhE12getInputSizeEv>:
	uint8_t getInputSize() {
 801ba8a:	b480      	push	{r7}
 801ba8c:	b083      	sub	sp, #12
 801ba8e:	af00      	add	r7, sp, #0
 801ba90:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 801ba92:	2301      	movs	r3, #1
	}
 801ba94:	4618      	mov	r0, r3
 801ba96:	370c      	adds	r7, #12
 801ba98:	46bd      	mov	sp, r7
 801ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba9e:	4770      	bx	lr

0801baa0 <_ZN27core_utils_RegisterFunctionIvhE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 801baa0:	b480      	push	{r7}
 801baa2:	b083      	sub	sp, #12
 801baa4:	af00      	add	r7, sp, #0
 801baa6:	6078      	str	r0, [r7, #4]
		return 0;
 801baa8:	2300      	movs	r3, #0
	}
 801baaa:	4618      	mov	r0, r3
 801baac:	370c      	adds	r7, #12
 801baae:	46bd      	mov	sp, r7
 801bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bab4:	4770      	bx	lr

0801bab6 <_ZN27core_utils_RegisterFunctionIvhE7executeEPhS1_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801bab6:	b580      	push	{r7, lr}
 801bab8:	b086      	sub	sp, #24
 801baba:	af00      	add	r7, sp, #0
 801babc:	60f8      	str	r0, [r7, #12]
 801babe:	60b9      	str	r1, [r7, #8]
 801bac0:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 801bac2:	2300      	movs	r3, #0
 801bac4:	75fb      	strb	r3, [r7, #23]
 801bac6:	e00b      	b.n	801bae0 <_ZN27core_utils_RegisterFunctionIvhE7executeEPhS1_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801bac8:	7dfb      	ldrb	r3, [r7, #23]
 801baca:	68ba      	ldr	r2, [r7, #8]
 801bacc:	441a      	add	r2, r3
 801bace:	7dfb      	ldrb	r3, [r7, #23]
 801bad0:	7811      	ldrb	r1, [r2, #0]
 801bad2:	68fa      	ldr	r2, [r7, #12]
 801bad4:	4413      	add	r3, r2
 801bad6:	460a      	mov	r2, r1
 801bad8:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 801bada:	7dfb      	ldrb	r3, [r7, #23]
 801badc:	3301      	adds	r3, #1
 801bade:	75fb      	strb	r3, [r7, #23]
 801bae0:	7dfb      	ldrb	r3, [r7, #23]
 801bae2:	2b00      	cmp	r3, #0
 801bae4:	d0f0      	beq.n	801bac8 <_ZN27core_utils_RegisterFunctionIvhE7executeEPhS1_+0x12>
		this->execute(this->input_data_union.data);
 801bae6:	68fb      	ldr	r3, [r7, #12]
 801bae8:	799b      	ldrb	r3, [r3, #6]
 801baea:	4619      	mov	r1, r3
 801baec:	68f8      	ldr	r0, [r7, #12]
 801baee:	f000 f98c 	bl	801be0a <_ZN27core_utils_RegisterFunctionIvhE7executeEh>
		return 0;
 801baf2:	2300      	movs	r3, #0
	}
 801baf4:	4618      	mov	r0, r3
 801baf6:	3718      	adds	r7, #24
 801baf8:	46bd      	mov	sp, r7
 801bafa:	bd80      	pop	{r7, pc}

0801bafc <_ZN27core_utils_RegisterFunctionIvhE7getTypeEv>:
	register_entry_type getType() {
 801bafc:	b480      	push	{r7}
 801bafe:	b083      	sub	sp, #12
 801bb00:	af00      	add	r7, sp, #0
 801bb02:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 801bb04:	2302      	movs	r3, #2
	}
 801bb06:	4618      	mov	r0, r3
 801bb08:	370c      	adds	r7, #12
 801bb0a:	46bd      	mov	sp, r7
 801bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb10:	4770      	bx	lr

0801bb12 <_ZN27core_utils_RegisterFunctionIvhE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 801bb12:	b480      	push	{r7}
 801bb14:	b083      	sub	sp, #12
 801bb16:	af00      	add	r7, sp, #0
 801bb18:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 801bb1a:	2302      	movs	r3, #2
	}
 801bb1c:	4618      	mov	r0, r3
 801bb1e:	370c      	adds	r7, #12
 801bb20:	46bd      	mov	sp, r7
 801bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb26:	4770      	bx	lr

0801bb28 <_ZN24core_utils_RegisterEntryImE5writeEPv>:
	void write(void *value) {
 801bb28:	b580      	push	{r7, lr}
 801bb2a:	b084      	sub	sp, #16
 801bb2c:	af00      	add	r7, sp, #0
 801bb2e:	6078      	str	r0, [r7, #4]
 801bb30:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801bb32:	687b      	ldr	r3, [r7, #4]
 801bb34:	7c1b      	ldrb	r3, [r3, #16]
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d00c      	beq.n	801bb54 <_ZN24core_utils_RegisterEntryImE5writeEPv+0x2c>
		T *value_typed = (T*) value;
 801bb3a:	683b      	ldr	r3, [r7, #0]
 801bb3c:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	695b      	ldr	r3, [r3, #20]
 801bb42:	68fa      	ldr	r2, [r7, #12]
 801bb44:	6812      	ldr	r2, [r2, #0]
 801bb46:	601a      	str	r2, [r3, #0]
		this->write_function.call();
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	3318      	adds	r3, #24
 801bb4c:	4618      	mov	r0, r3
 801bb4e:	f7f8 fa2d 	bl	8013fac <_ZN8Callback4callEv>
 801bb52:	e000      	b.n	801bb56 <_ZN24core_utils_RegisterEntryImE5writeEPv+0x2e>
			return;
 801bb54:	bf00      	nop
	}
 801bb56:	3710      	adds	r7, #16
 801bb58:	46bd      	mov	sp, r7
 801bb5a:	bd80      	pop	{r7, pc}

0801bb5c <_ZN24core_utils_RegisterEntryImE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 801bb5c:	b580      	push	{r7, lr}
 801bb5e:	b084      	sub	sp, #16
 801bb60:	af00      	add	r7, sp, #0
 801bb62:	6078      	str	r0, [r7, #4]
 801bb64:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	7c1b      	ldrb	r3, [r3, #16]
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	d018      	beq.n	801bba0 <_ZN24core_utils_RegisterEntryImE5writeEPh+0x44>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801bb6e:	2300      	movs	r3, #0
 801bb70:	73fb      	strb	r3, [r7, #15]
 801bb72:	e00b      	b.n	801bb8c <_ZN24core_utils_RegisterEntryImE5writeEPh+0x30>
			this->data_union.data_bytes[i] = data[i];
 801bb74:	7bfb      	ldrb	r3, [r7, #15]
 801bb76:	683a      	ldr	r2, [r7, #0]
 801bb78:	441a      	add	r2, r3
 801bb7a:	7bfb      	ldrb	r3, [r7, #15]
 801bb7c:	7811      	ldrb	r1, [r2, #0]
 801bb7e:	687a      	ldr	r2, [r7, #4]
 801bb80:	4413      	add	r3, r2
 801bb82:	460a      	mov	r2, r1
 801bb84:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801bb86:	7bfb      	ldrb	r3, [r7, #15]
 801bb88:	3301      	adds	r3, #1
 801bb8a:	73fb      	strb	r3, [r7, #15]
 801bb8c:	7bfb      	ldrb	r3, [r7, #15]
 801bb8e:	2b03      	cmp	r3, #3
 801bb90:	d9f0      	bls.n	801bb74 <_ZN24core_utils_RegisterEntryImE5writeEPh+0x18>
		this->write(this->data_union.data);
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	689b      	ldr	r3, [r3, #8]
 801bb96:	4619      	mov	r1, r3
 801bb98:	6878      	ldr	r0, [r7, #4]
 801bb9a:	f000 f94b 	bl	801be34 <_ZN24core_utils_RegisterEntryImE5writeEm>
 801bb9e:	e000      	b.n	801bba2 <_ZN24core_utils_RegisterEntryImE5writeEPh+0x46>
			return;
 801bba0:	bf00      	nop
	}
 801bba2:	3710      	adds	r7, #16
 801bba4:	46bd      	mov	sp, r7
 801bba6:	bd80      	pop	{r7, pc}

0801bba8 <_ZN24core_utils_RegisterEntryImE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 801bba8:	b480      	push	{r7}
 801bbaa:	b085      	sub	sp, #20
 801bbac:	af00      	add	r7, sp, #0
 801bbae:	6078      	str	r0, [r7, #4]
 801bbb0:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	7c1b      	ldrb	r3, [r3, #16]
 801bbb6:	2b01      	cmp	r3, #1
 801bbb8:	d101      	bne.n	801bbbe <_ZN24core_utils_RegisterEntryImE9readBytesEPh+0x16>
			return 0;
 801bbba:	2300      	movs	r3, #0
 801bbbc:	e016      	b.n	801bbec <_ZN24core_utils_RegisterEntryImE9readBytesEPh+0x44>
		this->data_union.data = *(this->data);
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	695b      	ldr	r3, [r3, #20]
 801bbc2:	681a      	ldr	r2, [r3, #0]
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	609a      	str	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801bbc8:	2300      	movs	r3, #0
 801bbca:	73fb      	strb	r3, [r7, #15]
 801bbcc:	e00a      	b.n	801bbe4 <_ZN24core_utils_RegisterEntryImE9readBytesEPh+0x3c>
			data[i] = this->data_union.data_bytes[i];
 801bbce:	7bfa      	ldrb	r2, [r7, #15]
 801bbd0:	7bfb      	ldrb	r3, [r7, #15]
 801bbd2:	6839      	ldr	r1, [r7, #0]
 801bbd4:	440b      	add	r3, r1
 801bbd6:	6879      	ldr	r1, [r7, #4]
 801bbd8:	440a      	add	r2, r1
 801bbda:	7a12      	ldrb	r2, [r2, #8]
 801bbdc:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801bbde:	7bfb      	ldrb	r3, [r7, #15]
 801bbe0:	3301      	adds	r3, #1
 801bbe2:	73fb      	strb	r3, [r7, #15]
 801bbe4:	7bfb      	ldrb	r3, [r7, #15]
 801bbe6:	2b03      	cmp	r3, #3
 801bbe8:	d9f1      	bls.n	801bbce <_ZN24core_utils_RegisterEntryImE9readBytesEPh+0x26>
		return sizeof(T);
 801bbea:	2304      	movs	r3, #4
	}
 801bbec:	4618      	mov	r0, r3
 801bbee:	3714      	adds	r7, #20
 801bbf0:	46bd      	mov	sp, r7
 801bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbf6:	4770      	bx	lr

0801bbf8 <_ZN24core_utils_RegisterEntryImE7getSizeEv>:
	uint8_t getSize() {
 801bbf8:	b480      	push	{r7}
 801bbfa:	b083      	sub	sp, #12
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 801bc00:	2304      	movs	r3, #4
	}
 801bc02:	4618      	mov	r0, r3
 801bc04:	370c      	adds	r7, #12
 801bc06:	46bd      	mov	sp, r7
 801bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc0c:	4770      	bx	lr

0801bc0e <_ZN24core_utils_RegisterEntryImE7getTypeEv>:
	register_entry_type getType() {
 801bc0e:	b480      	push	{r7}
 801bc10:	b083      	sub	sp, #12
 801bc12:	af00      	add	r7, sp, #0
 801bc14:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 801bc16:	2301      	movs	r3, #1
	}
 801bc18:	4618      	mov	r0, r3
 801bc1a:	370c      	adds	r7, #12
 801bc1c:	46bd      	mov	sp, r7
 801bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc22:	4770      	bx	lr

0801bc24 <_ZN24core_utils_RegisterEntryImE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 801bc24:	b480      	push	{r7}
 801bc26:	b083      	sub	sp, #12
 801bc28:	af00      	add	r7, sp, #0
 801bc2a:	6078      	str	r0, [r7, #4]
		return this->rw;
 801bc2c:	687b      	ldr	r3, [r7, #4]
 801bc2e:	7c1b      	ldrb	r3, [r3, #16]
	}
 801bc30:	4618      	mov	r0, r3
 801bc32:	370c      	adds	r7, #12
 801bc34:	46bd      	mov	sp, r7
 801bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc3a:	4770      	bx	lr

0801bc3c <_ZN27core_utils_RegisterFunctionIvA3_iE7getSizeEv>:
	uint8_t getSize() {
 801bc3c:	b480      	push	{r7}
 801bc3e:	b083      	sub	sp, #12
 801bc40:	af00      	add	r7, sp, #0
 801bc42:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 801bc44:	230c      	movs	r3, #12
	}
 801bc46:	4618      	mov	r0, r3
 801bc48:	370c      	adds	r7, #12
 801bc4a:	46bd      	mov	sp, r7
 801bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc50:	4770      	bx	lr

0801bc52 <_ZN27core_utils_RegisterFunctionIvA3_iE12getInputSizeEv>:
	uint8_t getInputSize() {
 801bc52:	b480      	push	{r7}
 801bc54:	b083      	sub	sp, #12
 801bc56:	af00      	add	r7, sp, #0
 801bc58:	6078      	str	r0, [r7, #4]
		return sizeof(input_t);
 801bc5a:	230c      	movs	r3, #12
	}
 801bc5c:	4618      	mov	r0, r3
 801bc5e:	370c      	adds	r7, #12
 801bc60:	46bd      	mov	sp, r7
 801bc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc66:	4770      	bx	lr

0801bc68 <_ZN27core_utils_RegisterFunctionIvA3_iE13getOutputSizeEv>:
	uint8_t getOutputSize() {
 801bc68:	b480      	push	{r7}
 801bc6a:	b083      	sub	sp, #12
 801bc6c:	af00      	add	r7, sp, #0
 801bc6e:	6078      	str	r0, [r7, #4]
		return 0;
 801bc70:	2300      	movs	r3, #0
	}
 801bc72:	4618      	mov	r0, r3
 801bc74:	370c      	adds	r7, #12
 801bc76:	46bd      	mov	sp, r7
 801bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc7c:	4770      	bx	lr

0801bc7e <_ZN27core_utils_RegisterFunctionIvA3_iE7executeEPhS2_>:
	uint8_t execute(uint8_t *input_buffer, uint8_t *output_buffer) {
 801bc7e:	b580      	push	{r7, lr}
 801bc80:	b086      	sub	sp, #24
 801bc82:	af00      	add	r7, sp, #0
 801bc84:	60f8      	str	r0, [r7, #12]
 801bc86:	60b9      	str	r1, [r7, #8]
 801bc88:	607a      	str	r2, [r7, #4]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 801bc8a:	2300      	movs	r3, #0
 801bc8c:	75fb      	strb	r3, [r7, #23]
 801bc8e:	e00b      	b.n	801bca8 <_ZN27core_utils_RegisterFunctionIvA3_iE7executeEPhS2_+0x2a>
			this->input_data_union.data_bytes[i] = input_buffer[i];
 801bc90:	7dfb      	ldrb	r3, [r7, #23]
 801bc92:	68ba      	ldr	r2, [r7, #8]
 801bc94:	441a      	add	r2, r3
 801bc96:	7dfb      	ldrb	r3, [r7, #23]
 801bc98:	7811      	ldrb	r1, [r2, #0]
 801bc9a:	68fa      	ldr	r2, [r7, #12]
 801bc9c:	4413      	add	r3, r2
 801bc9e:	460a      	mov	r2, r1
 801bca0:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < sizeof(input_t); i++) {
 801bca2:	7dfb      	ldrb	r3, [r7, #23]
 801bca4:	3301      	adds	r3, #1
 801bca6:	75fb      	strb	r3, [r7, #23]
 801bca8:	7dfb      	ldrb	r3, [r7, #23]
 801bcaa:	2b0b      	cmp	r3, #11
 801bcac:	d9f0      	bls.n	801bc90 <_ZN27core_utils_RegisterFunctionIvA3_iE7executeEPhS2_+0x12>
		this->execute(this->input_data_union.data);
 801bcae:	68fb      	ldr	r3, [r7, #12]
 801bcb0:	3308      	adds	r3, #8
 801bcb2:	4619      	mov	r1, r3
 801bcb4:	68f8      	ldr	r0, [r7, #12]
 801bcb6:	f000 f8d4 	bl	801be62 <_ZN27core_utils_RegisterFunctionIvA3_iE7executeEPi>
		return 0;
 801bcba:	2300      	movs	r3, #0
	}
 801bcbc:	4618      	mov	r0, r3
 801bcbe:	3718      	adds	r7, #24
 801bcc0:	46bd      	mov	sp, r7
 801bcc2:	bd80      	pop	{r7, pc}

0801bcc4 <_ZN27core_utils_RegisterFunctionIvA3_iE7getTypeEv>:
	register_entry_type getType() {
 801bcc4:	b480      	push	{r7}
 801bcc6:	b083      	sub	sp, #12
 801bcc8:	af00      	add	r7, sp, #0
 801bcca:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_FUNCTION;
 801bccc:	2302      	movs	r3, #2
	}
 801bcce:	4618      	mov	r0, r3
 801bcd0:	370c      	adds	r7, #12
 801bcd2:	46bd      	mov	sp, r7
 801bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcd8:	4770      	bx	lr

0801bcda <_ZN27core_utils_RegisterFunctionIvA3_iE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 801bcda:	b480      	push	{r7}
 801bcdc:	b083      	sub	sp, #12
 801bcde:	af00      	add	r7, sp, #0
 801bce0:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_READWRITE;
 801bce2:	2302      	movs	r3, #2
	}
 801bce4:	4618      	mov	r0, r3
 801bce6:	370c      	adds	r7, #12
 801bce8:	46bd      	mov	sp, r7
 801bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcee:	4770      	bx	lr

0801bcf0 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPv>:
	void write(void *value) {
 801bcf0:	b580      	push	{r7, lr}
 801bcf2:	b084      	sub	sp, #16
 801bcf4:	af00      	add	r7, sp, #0
 801bcf6:	6078      	str	r0, [r7, #4]
 801bcf8:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	7a9b      	ldrb	r3, [r3, #10]
 801bcfe:	2b00      	cmp	r3, #0
 801bd00:	d00d      	beq.n	801bd1e <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPv+0x2e>
		T *value_typed = (T*) value;
 801bd02:	683b      	ldr	r3, [r7, #0]
 801bd04:	60fb      	str	r3, [r7, #12]
		*(this->data) = *value_typed;
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	68db      	ldr	r3, [r3, #12]
 801bd0a:	68fa      	ldr	r2, [r7, #12]
 801bd0c:	f992 2000 	ldrsb.w	r2, [r2]
 801bd10:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	3310      	adds	r3, #16
 801bd16:	4618      	mov	r0, r3
 801bd18:	f7f8 f948 	bl	8013fac <_ZN8Callback4callEv>
 801bd1c:	e000      	b.n	801bd20 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPv+0x30>
			return;
 801bd1e:	bf00      	nop
	}
 801bd20:	3710      	adds	r7, #16
 801bd22:	46bd      	mov	sp, r7
 801bd24:	bd80      	pop	{r7, pc}

0801bd26 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh>:
	void write(uint8_t *data) { // TODO: not good
 801bd26:	b580      	push	{r7, lr}
 801bd28:	b084      	sub	sp, #16
 801bd2a:	af00      	add	r7, sp, #0
 801bd2c:	6078      	str	r0, [r7, #4]
 801bd2e:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	7a9b      	ldrb	r3, [r3, #10]
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d019      	beq.n	801bd6c <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh+0x46>
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801bd38:	2300      	movs	r3, #0
 801bd3a:	73fb      	strb	r3, [r7, #15]
 801bd3c:	e00b      	b.n	801bd56 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh+0x30>
			this->data_union.data_bytes[i] = data[i];
 801bd3e:	7bfb      	ldrb	r3, [r7, #15]
 801bd40:	683a      	ldr	r2, [r7, #0]
 801bd42:	441a      	add	r2, r3
 801bd44:	7bfb      	ldrb	r3, [r7, #15]
 801bd46:	7811      	ldrb	r1, [r2, #0]
 801bd48:	687a      	ldr	r2, [r7, #4]
 801bd4a:	4413      	add	r3, r2
 801bd4c:	460a      	mov	r2, r1
 801bd4e:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801bd50:	7bfb      	ldrb	r3, [r7, #15]
 801bd52:	3301      	adds	r3, #1
 801bd54:	73fb      	strb	r3, [r7, #15]
 801bd56:	7bfb      	ldrb	r3, [r7, #15]
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d0f0      	beq.n	801bd3e <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh+0x18>
		this->write(this->data_union.data);
 801bd5c:	687b      	ldr	r3, [r7, #4]
 801bd5e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 801bd62:	4619      	mov	r1, r3
 801bd64:	6878      	ldr	r0, [r7, #4]
 801bd66:	f000 f88f 	bl	801be88 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeES0_>
 801bd6a:	e000      	b.n	801bd6e <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeEPh+0x48>
			return;
 801bd6c:	bf00      	nop
	}
 801bd6e:	3710      	adds	r7, #16
 801bd70:	46bd      	mov	sp, r7
 801bd72:	bd80      	pop	{r7, pc}

0801bd74 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh>:
	uint8_t readBytes(uint8_t *data) {
 801bd74:	b480      	push	{r7}
 801bd76:	b085      	sub	sp, #20
 801bd78:	af00      	add	r7, sp, #0
 801bd7a:	6078      	str	r0, [r7, #4]
 801bd7c:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_WRITE) {
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	7a9b      	ldrb	r3, [r3, #10]
 801bd82:	2b01      	cmp	r3, #1
 801bd84:	d101      	bne.n	801bd8a <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh+0x16>
			return 0;
 801bd86:	2300      	movs	r3, #0
 801bd88:	e017      	b.n	801bdba <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh+0x46>
		this->data_union.data = *(this->data);
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	68db      	ldr	r3, [r3, #12]
 801bd8e:	f993 2000 	ldrsb.w	r2, [r3]
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	719a      	strb	r2, [r3, #6]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801bd96:	2300      	movs	r3, #0
 801bd98:	73fb      	strb	r3, [r7, #15]
 801bd9a:	e00a      	b.n	801bdb2 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh+0x3e>
			data[i] = this->data_union.data_bytes[i];
 801bd9c:	7bfa      	ldrb	r2, [r7, #15]
 801bd9e:	7bfb      	ldrb	r3, [r7, #15]
 801bda0:	6839      	ldr	r1, [r7, #0]
 801bda2:	440b      	add	r3, r1
 801bda4:	6879      	ldr	r1, [r7, #4]
 801bda6:	440a      	add	r2, r1
 801bda8:	7992      	ldrb	r2, [r2, #6]
 801bdaa:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < sizeof(T); i++) {
 801bdac:	7bfb      	ldrb	r3, [r7, #15]
 801bdae:	3301      	adds	r3, #1
 801bdb0:	73fb      	strb	r3, [r7, #15]
 801bdb2:	7bfb      	ldrb	r3, [r7, #15]
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d0f1      	beq.n	801bd9c <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE9readBytesEPh+0x28>
		return sizeof(T);
 801bdb8:	2301      	movs	r3, #1
	}
 801bdba:	4618      	mov	r0, r3
 801bdbc:	3714      	adds	r7, #20
 801bdbe:	46bd      	mov	sp, r7
 801bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdc4:	4770      	bx	lr

0801bdc6 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE7getSizeEv>:
	uint8_t getSize() {
 801bdc6:	b480      	push	{r7}
 801bdc8:	b083      	sub	sp, #12
 801bdca:	af00      	add	r7, sp, #0
 801bdcc:	6078      	str	r0, [r7, #4]
		return sizeof(T);
 801bdce:	2301      	movs	r3, #1
	}
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	370c      	adds	r7, #12
 801bdd4:	46bd      	mov	sp, r7
 801bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdda:	4770      	bx	lr

0801bddc <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE7getTypeEv>:
	register_entry_type getType() {
 801bddc:	b480      	push	{r7}
 801bdde:	b083      	sub	sp, #12
 801bde0:	af00      	add	r7, sp, #0
 801bde2:	6078      	str	r0, [r7, #4]
		return REGISTER_ENTRY_DATA;
 801bde4:	2301      	movs	r3, #1
	}
 801bde6:	4618      	mov	r0, r3
 801bde8:	370c      	adds	r7, #12
 801bdea:	46bd      	mov	sp, r7
 801bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdf0:	4770      	bx	lr

0801bdf2 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE19getReadWriteSettingEv>:
	register_entry_rw_t getReadWriteSetting() {
 801bdf2:	b480      	push	{r7}
 801bdf4:	b083      	sub	sp, #12
 801bdf6:	af00      	add	r7, sp, #0
 801bdf8:	6078      	str	r0, [r7, #4]
		return this->rw;
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	7a9b      	ldrb	r3, [r3, #10]
	}
 801bdfe:	4618      	mov	r0, r3
 801be00:	370c      	adds	r7, #12
 801be02:	46bd      	mov	sp, r7
 801be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be08:	4770      	bx	lr

0801be0a <_ZN27core_utils_RegisterFunctionIvhE7executeEh>:
	void execute(input_t argument) {
 801be0a:	b580      	push	{r7, lr}
 801be0c:	b082      	sub	sp, #8
 801be0e:	af00      	add	r7, sp, #0
 801be10:	6078      	str	r0, [r7, #4]
 801be12:	460b      	mov	r3, r1
 801be14:	70fb      	strb	r3, [r7, #3]
		if (this->function.registered) {
 801be16:	687b      	ldr	r3, [r7, #4]
 801be18:	7c1b      	ldrb	r3, [r3, #16]
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d006      	beq.n	801be2c <_ZN27core_utils_RegisterFunctionIvhE7executeEh+0x22>
			this->function.call(argument);
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	330c      	adds	r3, #12
 801be22:	78fa      	ldrb	r2, [r7, #3]
 801be24:	4611      	mov	r1, r2
 801be26:	4618      	mov	r0, r3
 801be28:	f000 f846 	bl	801beb8 <_ZN19core_utils_CallbackIvhE4callEh>
	}
 801be2c:	bf00      	nop
 801be2e:	3708      	adds	r7, #8
 801be30:	46bd      	mov	sp, r7
 801be32:	bd80      	pop	{r7, pc}

0801be34 <_ZN24core_utils_RegisterEntryImE5writeEm>:
	void write(T value) {
 801be34:	b580      	push	{r7, lr}
 801be36:	b082      	sub	sp, #8
 801be38:	af00      	add	r7, sp, #0
 801be3a:	6078      	str	r0, [r7, #4]
 801be3c:	6039      	str	r1, [r7, #0]
		if (this->rw == REGISTER_ENTRY_READ) {
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	7c1b      	ldrb	r3, [r3, #16]
 801be42:	2b00      	cmp	r3, #0
 801be44:	d009      	beq.n	801be5a <_ZN24core_utils_RegisterEntryImE5writeEm+0x26>
		*(this->data) = value;
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	695b      	ldr	r3, [r3, #20]
 801be4a:	683a      	ldr	r2, [r7, #0]
 801be4c:	601a      	str	r2, [r3, #0]
		this->write_function.call();
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	3318      	adds	r3, #24
 801be52:	4618      	mov	r0, r3
 801be54:	f7f8 f8aa 	bl	8013fac <_ZN8Callback4callEv>
 801be58:	e000      	b.n	801be5c <_ZN24core_utils_RegisterEntryImE5writeEm+0x28>
			return;
 801be5a:	bf00      	nop
	}
 801be5c:	3708      	adds	r7, #8
 801be5e:	46bd      	mov	sp, r7
 801be60:	bd80      	pop	{r7, pc}

0801be62 <_ZN27core_utils_RegisterFunctionIvA3_iE7executeEPi>:
	void execute(input_t argument) {
 801be62:	b580      	push	{r7, lr}
 801be64:	b082      	sub	sp, #8
 801be66:	af00      	add	r7, sp, #0
 801be68:	6078      	str	r0, [r7, #4]
 801be6a:	6039      	str	r1, [r7, #0]
		if (this->function.registered) {
 801be6c:	687b      	ldr	r3, [r7, #4]
 801be6e:	7f1b      	ldrb	r3, [r3, #28]
 801be70:	2b00      	cmp	r3, #0
 801be72:	d005      	beq.n	801be80 <_ZN27core_utils_RegisterFunctionIvA3_iE7executeEPi+0x1e>
			this->function.call(argument);
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	3318      	adds	r3, #24
 801be78:	6839      	ldr	r1, [r7, #0]
 801be7a:	4618      	mov	r0, r3
 801be7c:	f000 f82d 	bl	801beda <_ZN19core_utils_CallbackIvA3_iE4callEPi>
	}
 801be80:	bf00      	nop
 801be82:	3708      	adds	r7, #8
 801be84:	46bd      	mov	sp, r7
 801be86:	bd80      	pop	{r7, pc}

0801be88 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeES0_>:
	void write(T value) {
 801be88:	b580      	push	{r7, lr}
 801be8a:	b082      	sub	sp, #8
 801be8c:	af00      	add	r7, sp, #0
 801be8e:	6078      	str	r0, [r7, #4]
 801be90:	460b      	mov	r3, r1
 801be92:	70fb      	strb	r3, [r7, #3]
		if (this->rw == REGISTER_ENTRY_READ) {
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	7a9b      	ldrb	r3, [r3, #10]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d009      	beq.n	801beb0 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeES0_+0x28>
		*(this->data) = value;
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	68db      	ldr	r3, [r3, #12]
 801bea0:	78fa      	ldrb	r2, [r7, #3]
 801bea2:	701a      	strb	r2, [r3, #0]
		this->write_function.call();
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	3310      	adds	r3, #16
 801bea8:	4618      	mov	r0, r3
 801beaa:	f7f8 f87f 	bl	8013fac <_ZN8Callback4callEv>
 801beae:	e000      	b.n	801beb2 <_ZN24core_utils_RegisterEntryI22twipr_firmware_state_tE5writeES0_+0x2a>
			return;
 801beb0:	bf00      	nop
	}
 801beb2:	3708      	adds	r7, #8
 801beb4:	46bd      	mov	sp, r7
 801beb6:	bd80      	pop	{r7, pc}

0801beb8 <_ZN19core_utils_CallbackIvhE4callEh>:
	R call(A argument){
 801beb8:	b580      	push	{r7, lr}
 801beba:	b082      	sub	sp, #8
 801bebc:	af00      	add	r7, sp, #0
 801bebe:	6078      	str	r0, [r7, #4]
 801bec0:	460b      	mov	r3, r1
 801bec2:	70fb      	strb	r3, [r7, #3]
		return this->_fp(argument);
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	3308      	adds	r3, #8
 801bec8:	78fa      	ldrb	r2, [r7, #3]
 801beca:	4611      	mov	r1, r2
 801becc:	4618      	mov	r0, r3
 801bece:	f000 f813 	bl	801bef8 <_ZN26core_utils_FunctionPointerIvhEclEh>
 801bed2:	bf00      	nop
	}
 801bed4:	3708      	adds	r7, #8
 801bed6:	46bd      	mov	sp, r7
 801bed8:	bd80      	pop	{r7, pc}

0801beda <_ZN19core_utils_CallbackIvA3_iE4callEPi>:
	R call(A argument){
 801beda:	b580      	push	{r7, lr}
 801bedc:	b082      	sub	sp, #8
 801bede:	af00      	add	r7, sp, #0
 801bee0:	6078      	str	r0, [r7, #4]
 801bee2:	6039      	str	r1, [r7, #0]
		return this->_fp(argument);
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	3308      	adds	r3, #8
 801bee8:	6839      	ldr	r1, [r7, #0]
 801beea:	4618      	mov	r0, r3
 801beec:	f000 f813 	bl	801bf16 <_ZN26core_utils_FunctionPointerIvA3_iEclEPi>
 801bef0:	bf00      	nop
	}
 801bef2:	3708      	adds	r7, #8
 801bef4:	46bd      	mov	sp, r7
 801bef6:	bd80      	pop	{r7, pc}

0801bef8 <_ZN26core_utils_FunctionPointerIvhEclEh>:
    R operator ()(A1 a) {
 801bef8:	b580      	push	{r7, lr}
 801befa:	b082      	sub	sp, #8
 801befc:	af00      	add	r7, sp, #0
 801befe:	6078      	str	r0, [r7, #4]
 801bf00:	460b      	mov	r3, r1
 801bf02:	70fb      	strb	r3, [r7, #3]
        return call(a);
 801bf04:	78fb      	ldrb	r3, [r7, #3]
 801bf06:	4619      	mov	r1, r3
 801bf08:	6878      	ldr	r0, [r7, #4]
 801bf0a:	f000 f811 	bl	801bf30 <_ZN26core_utils_FunctionPointerIvhE4callEh>
 801bf0e:	bf00      	nop
    }
 801bf10:	3708      	adds	r7, #8
 801bf12:	46bd      	mov	sp, r7
 801bf14:	bd80      	pop	{r7, pc}

0801bf16 <_ZN26core_utils_FunctionPointerIvA3_iEclEPi>:
    R operator ()(A1 a) {
 801bf16:	b580      	push	{r7, lr}
 801bf18:	b082      	sub	sp, #8
 801bf1a:	af00      	add	r7, sp, #0
 801bf1c:	6078      	str	r0, [r7, #4]
 801bf1e:	6039      	str	r1, [r7, #0]
        return call(a);
 801bf20:	6839      	ldr	r1, [r7, #0]
 801bf22:	6878      	ldr	r0, [r7, #4]
 801bf24:	f000 f82d 	bl	801bf82 <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi>
 801bf28:	bf00      	nop
    }
 801bf2a:	3708      	adds	r7, #8
 801bf2c:	46bd      	mov	sp, r7
 801bf2e:	bd80      	pop	{r7, pc}

0801bf30 <_ZN26core_utils_FunctionPointerIvhE4callEh>:
    R call(A1 a) {
 801bf30:	b580      	push	{r7, lr}
 801bf32:	b082      	sub	sp, #8
 801bf34:	af00      	add	r7, sp, #0
 801bf36:	6078      	str	r0, [r7, #4]
 801bf38:	460b      	mov	r3, r1
 801bf3a:	70fb      	strb	r3, [r7, #3]
        if (_membercaller == 0 && _p.function) {
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	695b      	ldr	r3, [r3, #20]
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d109      	bne.n	801bf58 <_ZN26core_utils_FunctionPointerIvhE4callEh+0x28>
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d005      	beq.n	801bf58 <_ZN26core_utils_FunctionPointerIvhE4callEh+0x28>
           return _p.function(a);
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	681b      	ldr	r3, [r3, #0]
 801bf50:	78fa      	ldrb	r2, [r7, #3]
 801bf52:	4610      	mov	r0, r2
 801bf54:	4798      	blx	r3
 801bf56:	e011      	b.n	801bf7c <_ZN26core_utils_FunctionPointerIvhE4callEh+0x4c>
        } else if (_membercaller && _p.object) {
 801bf58:	687b      	ldr	r3, [r7, #4]
 801bf5a:	695b      	ldr	r3, [r3, #20]
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d00c      	beq.n	801bf7a <_ZN26core_utils_FunctionPointerIvhE4callEh+0x4a>
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	681b      	ldr	r3, [r3, #0]
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	d008      	beq.n	801bf7a <_ZN26core_utils_FunctionPointerIvhE4callEh+0x4a>
           return _membercaller(_p.object, _member, a);
 801bf68:	687b      	ldr	r3, [r7, #4]
 801bf6a:	695b      	ldr	r3, [r3, #20]
 801bf6c:	687a      	ldr	r2, [r7, #4]
 801bf6e:	6810      	ldr	r0, [r2, #0]
 801bf70:	687a      	ldr	r2, [r7, #4]
 801bf72:	1d11      	adds	r1, r2, #4
 801bf74:	78fa      	ldrb	r2, [r7, #3]
 801bf76:	4798      	blx	r3
 801bf78:	e000      	b.n	801bf7c <_ZN26core_utils_FunctionPointerIvhE4callEh+0x4c>
        return (R)0;
 801bf7a:	bf00      	nop
    }
 801bf7c:	3708      	adds	r7, #8
 801bf7e:	46bd      	mov	sp, r7
 801bf80:	bd80      	pop	{r7, pc}

0801bf82 <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi>:
    R call(A1 a) {
 801bf82:	b580      	push	{r7, lr}
 801bf84:	b082      	sub	sp, #8
 801bf86:	af00      	add	r7, sp, #0
 801bf88:	6078      	str	r0, [r7, #4]
 801bf8a:	6039      	str	r1, [r7, #0]
        if (_membercaller == 0 && _p.function) {
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	695b      	ldr	r3, [r3, #20]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d108      	bne.n	801bfa6 <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi+0x24>
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	681b      	ldr	r3, [r3, #0]
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d004      	beq.n	801bfa6 <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi+0x24>
           return _p.function(a);
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	681b      	ldr	r3, [r3, #0]
 801bfa0:	6838      	ldr	r0, [r7, #0]
 801bfa2:	4798      	blx	r3
 801bfa4:	e011      	b.n	801bfca <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi+0x48>
        } else if (_membercaller && _p.object) {
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	695b      	ldr	r3, [r3, #20]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d00c      	beq.n	801bfc8 <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi+0x46>
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	681b      	ldr	r3, [r3, #0]
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d008      	beq.n	801bfc8 <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi+0x46>
           return _membercaller(_p.object, _member, a);
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	695b      	ldr	r3, [r3, #20]
 801bfba:	687a      	ldr	r2, [r7, #4]
 801bfbc:	6810      	ldr	r0, [r2, #0]
 801bfbe:	687a      	ldr	r2, [r7, #4]
 801bfc0:	1d11      	adds	r1, r2, #4
 801bfc2:	683a      	ldr	r2, [r7, #0]
 801bfc4:	4798      	blx	r3
 801bfc6:	e000      	b.n	801bfca <_ZN26core_utils_FunctionPointerIvA3_iE4callEPi+0x48>
        return (R)0;
 801bfc8:	bf00      	nop
    }
 801bfca:	3708      	adds	r7, #8
 801bfcc:	46bd      	mov	sp, r7
 801bfce:	bd80      	pop	{r7, pc}

0801bfd0 <_GLOBAL__sub_I_twipr_firmware>:
 801bfd0:	b580      	push	{r7, lr}
 801bfd2:	af00      	add	r7, sp, #0
 801bfd4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801bfd8:	2001      	movs	r0, #1
 801bfda:	f7ff fb51 	bl	801b680 <_Z41__static_initialization_and_destruction_0ii>
 801bfde:	bd80      	pop	{r7, pc}

0801bfe0 <_ZN12TWIPR_SafetyC1Ev>:
const osThreadAttr_t safety_task_attributes = { .name = "safety",
		.stack_size = 256 * 4, .priority = (osPriority_t) osPriorityNormal, };



TWIPR_Safety::TWIPR_Safety(){
 801bfe0:	b480      	push	{r7}
 801bfe2:	b083      	sub	sp, #12
 801bfe4:	af00      	add	r7, sp, #0
 801bfe6:	6078      	str	r0, [r7, #4]

}
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	4618      	mov	r0, r3
 801bfec:	370c      	adds	r7, #12
 801bfee:	46bd      	mov	sp, r7
 801bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bff4:	4770      	bx	lr

0801bff6 <_ZN12TWIPR_Safety4initE21TWIPR_Safety_Config_t>:


void TWIPR_Safety::init(TWIPR_Safety_Config_t config){
 801bff6:	b084      	sub	sp, #16
 801bff8:	b490      	push	{r4, r7}
 801bffa:	b082      	sub	sp, #8
 801bffc:	af00      	add	r7, sp, #0
 801bffe:	6078      	str	r0, [r7, #4]
 801c000:	f107 0014 	add.w	r0, r7, #20
 801c004:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	461c      	mov	r4, r3
 801c00c:	f107 0314 	add.w	r3, r7, #20
 801c010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c012:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 801c016:	bf00      	nop
 801c018:	3708      	adds	r7, #8
 801c01a:	46bd      	mov	sp, r7
 801c01c:	bc90      	pop	{r4, r7}
 801c01e:	b004      	add	sp, #16
 801c020:	4770      	bx	lr
	...

0801c024 <_ZN12TWIPR_Safety5startEv>:


void TWIPR_Safety::start(){
 801c024:	b580      	push	{r7, lr}
 801c026:	b082      	sub	sp, #8
 801c028:	af00      	add	r7, sp, #0
 801c02a:	6078      	str	r0, [r7, #4]
	osThreadNew(twipr_safety_task, (void*) this,
 801c02c:	4a04      	ldr	r2, [pc, #16]	@ (801c040 <_ZN12TWIPR_Safety5startEv+0x1c>)
 801c02e:	6879      	ldr	r1, [r7, #4]
 801c030:	4804      	ldr	r0, [pc, #16]	@ (801c044 <_ZN12TWIPR_Safety5startEv+0x20>)
 801c032:	f7f3 fe94 	bl	800fd5e <osThreadNew>
			&safety_task_attributes);
}
 801c036:	bf00      	nop
 801c038:	3708      	adds	r7, #8
 801c03a:	46bd      	mov	sp, r7
 801c03c:	bd80      	pop	{r7, pc}
 801c03e:	bf00      	nop
 801c040:	080238a8 	.word	0x080238a8
 801c044:	0801c0ed 	.word	0x0801c0ed

0801c048 <_ZN12TWIPR_Safety13task_functionEv>:


void TWIPR_Safety::task_function(){
 801c048:	b580      	push	{r7, lr}
 801c04a:	b084      	sub	sp, #16
 801c04c:	af00      	add	r7, sp, #0
 801c04e:	6078      	str	r0, [r7, #4]
	twipr_drive_speed_t speed;
	while (true) {
		speed = this->config.drive->getSpeed();
 801c050:	687b      	ldr	r3, [r7, #4]
 801c052:	681b      	ldr	r3, [r3, #0]
 801c054:	4618      	mov	r0, r3
 801c056:	f7fe fadb 	bl	801a610 <_ZN11TWIPR_Drive8getSpeedEv>
 801c05a:	eeb0 7a40 	vmov.f32	s14, s0
 801c05e:	eef0 7a60 	vmov.f32	s15, s1
 801c062:	ed87 7a02 	vstr	s14, [r7, #8]
 801c066:	edc7 7a03 	vstr	s15, [r7, #12]
		if (abs(speed.speed_left) > 50 || abs(speed.speed_right) > 50) {
 801c06a:	edd7 7a02 	vldr	s15, [r7, #8]
 801c06e:	eeb0 0a67 	vmov.f32	s0, s15
 801c072:	f7fe f85a 	bl	801a12a <_ZSt3absf>
 801c076:	eef0 7a40 	vmov.f32	s15, s0
 801c07a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 801c0e8 <_ZN12TWIPR_Safety13task_functionEv+0xa0>
 801c07e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c086:	dc0e      	bgt.n	801c0a6 <_ZN12TWIPR_Safety13task_functionEv+0x5e>
 801c088:	edd7 7a03 	vldr	s15, [r7, #12]
 801c08c:	eeb0 0a67 	vmov.f32	s0, s15
 801c090:	f7fe f84b 	bl	801a12a <_ZSt3absf>
 801c094:	eef0 7a40 	vmov.f32	s15, s0
 801c098:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 801c0e8 <_ZN12TWIPR_Safety13task_functionEv+0xa0>
 801c09c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801c0a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c0a4:	dd01      	ble.n	801c0aa <_ZN12TWIPR_Safety13task_functionEv+0x62>
 801c0a6:	2301      	movs	r3, #1
 801c0a8:	e000      	b.n	801c0ac <_ZN12TWIPR_Safety13task_functionEv+0x64>
 801c0aa:	2300      	movs	r3, #0
 801c0ac:	2b00      	cmp	r3, #0
 801c0ae:	d004      	beq.n	801c0ba <_ZN12TWIPR_Safety13task_functionEv+0x72>
			this->config.control->stop();
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	685b      	ldr	r3, [r3, #4]
 801c0b4:	4618      	mov	r0, r3
 801c0b6:	f7fb fbff 	bl	80178b8 <_ZN20TWIPR_ControlManager4stopEv>
		}

		if (this->config.off_button->check() == 0){
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	68db      	ldr	r3, [r3, #12]
 801c0be:	4618      	mov	r0, r3
 801c0c0:	f002 fa2c 	bl	801e51c <_ZN20core_hardware_Button5checkEv>
 801c0c4:	4603      	mov	r3, r0
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	bf0c      	ite	eq
 801c0ca:	2301      	moveq	r3, #1
 801c0cc:	2300      	movne	r3, #0
 801c0ce:	b2db      	uxtb	r3, r3
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	d004      	beq.n	801c0de <_ZN12TWIPR_Safety13task_functionEv+0x96>
			this->config.control->stop();
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	685b      	ldr	r3, [r3, #4]
 801c0d8:	4618      	mov	r0, r3
 801c0da:	f7fb fbed 	bl	80178b8 <_ZN20TWIPR_ControlManager4stopEv>
		}
		osDelay(10);
 801c0de:	200a      	movs	r0, #10
 801c0e0:	f7f3 feda 	bl	800fe98 <osDelay>
		speed = this->config.drive->getSpeed();
 801c0e4:	e7b4      	b.n	801c050 <_ZN12TWIPR_Safety13task_functionEv+0x8>
 801c0e6:	bf00      	nop
 801c0e8:	42480000 	.word	0x42480000

0801c0ec <_Z17twipr_safety_taskPv>:
	}
}


void twipr_safety_task(void* args){
 801c0ec:	b580      	push	{r7, lr}
 801c0ee:	b084      	sub	sp, #16
 801c0f0:	af00      	add	r7, sp, #0
 801c0f2:	6078      	str	r0, [r7, #4]

	TWIPR_Safety* argument = (TWIPR_Safety*) args;
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	60fb      	str	r3, [r7, #12]
	argument->task_function();
 801c0f8:	68f8      	ldr	r0, [r7, #12]
 801c0fa:	f7ff ffa5 	bl	801c048 <_ZN12TWIPR_Safety13task_functionEv>

}
 801c0fe:	bf00      	nop
 801c100:	3710      	adds	r7, #16
 801c102:	46bd      	mov	sp, r7
 801c104:	bd80      	pop	{r7, pc}

0801c106 <_ZN21RobotControl_ExtenderC1Ev>:
 *      Author: Dustin Lehmann
 */

#include "robot-control_extender.h"

RobotControl_Extender::RobotControl_Extender() {
 801c106:	b480      	push	{r7}
 801c108:	b083      	sub	sp, #12
 801c10a:	af00      	add	r7, sp, #0
 801c10c:	6078      	str	r0, [r7, #4]

}
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	4618      	mov	r0, r3
 801c112:	370c      	adds	r7, #12
 801c114:	46bd      	mov	sp, r7
 801c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c11a:	4770      	bx	lr

0801c11c <_ZN21RobotControl_Extender4initE24extender_config_struct_t>:

void RobotControl_Extender::init(extender_config_struct_t config) {
 801c11c:	b480      	push	{r7}
 801c11e:	b083      	sub	sp, #12
 801c120:	af00      	add	r7, sp, #0
 801c122:	6078      	str	r0, [r7, #4]
 801c124:	6039      	str	r1, [r7, #0]

	this->config = config;
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	683a      	ldr	r2, [r7, #0]
 801c12a:	601a      	str	r2, [r3, #0]

}
 801c12c:	bf00      	nop
 801c12e:	370c      	adds	r7, #12
 801c130:	46bd      	mov	sp, r7
 801c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c136:	4770      	bx	lr

0801c138 <_ZN21RobotControl_Extender12setStatusLEDEa>:

void RobotControl_Extender::start() {

}

void RobotControl_Extender::setStatusLED(int8_t status) {
 801c138:	b580      	push	{r7, lr}
 801c13a:	b088      	sub	sp, #32
 801c13c:	af04      	add	r7, sp, #16
 801c13e:	6078      	str	r0, [r7, #4]
 801c140:	460b      	mov	r3, r1
 801c142:	70fb      	strb	r3, [r7, #3]

	uint8_t data = (uint8_t) status;
 801c144:	78fb      	ldrb	r3, [r7, #3]
 801c146:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->config.hi2c,
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	6818      	ldr	r0, [r3, #0]
 801c14c:	2364      	movs	r3, #100	@ 0x64
 801c14e:	9302      	str	r3, [sp, #8]
 801c150:	2301      	movs	r3, #1
 801c152:	9301      	str	r3, [sp, #4]
 801c154:	f107 030f 	add.w	r3, r7, #15
 801c158:	9300      	str	r3, [sp, #0]
 801c15a:	2301      	movs	r3, #1
 801c15c:	221c      	movs	r2, #28
 801c15e:	2102      	movs	r1, #2
 801c160:	f7ea f994 	bl	800648c <HAL_I2C_Mem_Write>
	EXTENDER_ADDRESS, REG_ERROR_LED_CONFIG, 1, &data, 1, 100);
}
 801c164:	bf00      	nop
 801c166:	3710      	adds	r7, #16
 801c168:	46bd      	mov	sp, r7
 801c16a:	bd80      	pop	{r7, pc}

0801c16c <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh>:


void RobotControl_Extender::rgbLED_intern_setState(uint8_t position,
		uint8_t state) {
 801c16c:	b580      	push	{r7, lr}
 801c16e:	b086      	sub	sp, #24
 801c170:	af04      	add	r7, sp, #16
 801c172:	6078      	str	r0, [r7, #4]
 801c174:	460b      	mov	r3, r1
 801c176:	70fb      	strb	r3, [r7, #3]
 801c178:	4613      	mov	r3, r2
 801c17a:	70bb      	strb	r3, [r7, #2]

	state = (state << 7) + 0;
 801c17c:	78bb      	ldrb	r3, [r7, #2]
 801c17e:	01db      	lsls	r3, r3, #7
 801c180:	b2db      	uxtb	r3, r3
 801c182:	70bb      	strb	r3, [r7, #2]

	switch (position) {
 801c184:	78fb      	ldrb	r3, [r7, #3]
 801c186:	2b02      	cmp	r3, #2
 801c188:	d022      	beq.n	801c1d0 <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x64>
 801c18a:	2b02      	cmp	r3, #2
 801c18c:	dc2e      	bgt.n	801c1ec <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x80>
 801c18e:	2b00      	cmp	r3, #0
 801c190:	d002      	beq.n	801c198 <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x2c>
 801c192:	2b01      	cmp	r3, #1
 801c194:	d00e      	beq.n	801c1b4 <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x48>
	case 2:
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
		REG_STATUS_RGB_LED_3_CONFIG, 1, &state, 1, 10);
		break;
	default:
		break;
 801c196:	e029      	b.n	801c1ec <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x80>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	6818      	ldr	r0, [r3, #0]
 801c19c:	230a      	movs	r3, #10
 801c19e:	9302      	str	r3, [sp, #8]
 801c1a0:	2301      	movs	r3, #1
 801c1a2:	9301      	str	r3, [sp, #4]
 801c1a4:	1cbb      	adds	r3, r7, #2
 801c1a6:	9300      	str	r3, [sp, #0]
 801c1a8:	2301      	movs	r3, #1
 801c1aa:	2220      	movs	r2, #32
 801c1ac:	2102      	movs	r1, #2
 801c1ae:	f7ea f96d 	bl	800648c <HAL_I2C_Mem_Write>
		break;
 801c1b2:	e01c      	b.n	801c1ee <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x82>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c1b4:	687b      	ldr	r3, [r7, #4]
 801c1b6:	6818      	ldr	r0, [r3, #0]
 801c1b8:	230a      	movs	r3, #10
 801c1ba:	9302      	str	r3, [sp, #8]
 801c1bc:	2301      	movs	r3, #1
 801c1be:	9301      	str	r3, [sp, #4]
 801c1c0:	1cbb      	adds	r3, r7, #2
 801c1c2:	9300      	str	r3, [sp, #0]
 801c1c4:	2301      	movs	r3, #1
 801c1c6:	2226      	movs	r2, #38	@ 0x26
 801c1c8:	2102      	movs	r1, #2
 801c1ca:	f7ea f95f 	bl	800648c <HAL_I2C_Mem_Write>
		break;
 801c1ce:	e00e      	b.n	801c1ee <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x82>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	6818      	ldr	r0, [r3, #0]
 801c1d4:	230a      	movs	r3, #10
 801c1d6:	9302      	str	r3, [sp, #8]
 801c1d8:	2301      	movs	r3, #1
 801c1da:	9301      	str	r3, [sp, #4]
 801c1dc:	1cbb      	adds	r3, r7, #2
 801c1de:	9300      	str	r3, [sp, #0]
 801c1e0:	2301      	movs	r3, #1
 801c1e2:	222c      	movs	r2, #44	@ 0x2c
 801c1e4:	2102      	movs	r1, #2
 801c1e6:	f7ea f951 	bl	800648c <HAL_I2C_Mem_Write>
		break;
 801c1ea:	e000      	b.n	801c1ee <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh+0x82>
		break;
 801c1ec:	bf00      	nop
	}
}
 801c1ee:	bf00      	nop
 801c1f0:	3708      	adds	r7, #8
 801c1f2:	46bd      	mov	sp, r7
 801c1f4:	bd80      	pop	{r7, pc}

0801c1f6 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh>:

void RobotControl_Extender::rgbLED_intern_setColor(uint8_t position,
		uint8_t red, uint8_t green, uint8_t blue) {
 801c1f6:	b580      	push	{r7, lr}
 801c1f8:	b086      	sub	sp, #24
 801c1fa:	af04      	add	r7, sp, #16
 801c1fc:	6078      	str	r0, [r7, #4]
 801c1fe:	4608      	mov	r0, r1
 801c200:	4611      	mov	r1, r2
 801c202:	461a      	mov	r2, r3
 801c204:	4603      	mov	r3, r0
 801c206:	70fb      	strb	r3, [r7, #3]
 801c208:	460b      	mov	r3, r1
 801c20a:	70bb      	strb	r3, [r7, #2]
 801c20c:	4613      	mov	r3, r2
 801c20e:	707b      	strb	r3, [r7, #1]
	switch (position) {
 801c210:	78fb      	ldrb	r3, [r7, #3]
 801c212:	2b02      	cmp	r3, #2
 801c214:	d058      	beq.n	801c2c8 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0xd2>
 801c216:	2b02      	cmp	r3, #2
 801c218:	dc7f      	bgt.n	801c31a <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x124>
 801c21a:	2b00      	cmp	r3, #0
 801c21c:	d002      	beq.n	801c224 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x2e>
 801c21e:	2b01      	cmp	r3, #1
 801c220:	d029      	beq.n	801c276 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x80>
		REG_STATUS_RGB_LED_3_GREEN, 1, &green, 1, 10);
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
		REG_STATUS_RGB_LED_3_BLUE, 1, &blue, 1, 10);
		break;
	default:
		break;
 801c222:	e07a      	b.n	801c31a <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x124>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	6818      	ldr	r0, [r3, #0]
 801c228:	230a      	movs	r3, #10
 801c22a:	9302      	str	r3, [sp, #8]
 801c22c:	2301      	movs	r3, #1
 801c22e:	9301      	str	r3, [sp, #4]
 801c230:	1cbb      	adds	r3, r7, #2
 801c232:	9300      	str	r3, [sp, #0]
 801c234:	2301      	movs	r3, #1
 801c236:	2221      	movs	r2, #33	@ 0x21
 801c238:	2102      	movs	r1, #2
 801c23a:	f7ea f927 	bl	800648c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c23e:	687b      	ldr	r3, [r7, #4]
 801c240:	6818      	ldr	r0, [r3, #0]
 801c242:	230a      	movs	r3, #10
 801c244:	9302      	str	r3, [sp, #8]
 801c246:	2301      	movs	r3, #1
 801c248:	9301      	str	r3, [sp, #4]
 801c24a:	1c7b      	adds	r3, r7, #1
 801c24c:	9300      	str	r3, [sp, #0]
 801c24e:	2301      	movs	r3, #1
 801c250:	2222      	movs	r2, #34	@ 0x22
 801c252:	2102      	movs	r1, #2
 801c254:	f7ea f91a 	bl	800648c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	6818      	ldr	r0, [r3, #0]
 801c25c:	230a      	movs	r3, #10
 801c25e:	9302      	str	r3, [sp, #8]
 801c260:	2301      	movs	r3, #1
 801c262:	9301      	str	r3, [sp, #4]
 801c264:	f107 0310 	add.w	r3, r7, #16
 801c268:	9300      	str	r3, [sp, #0]
 801c26a:	2301      	movs	r3, #1
 801c26c:	2223      	movs	r2, #35	@ 0x23
 801c26e:	2102      	movs	r1, #2
 801c270:	f7ea f90c 	bl	800648c <HAL_I2C_Mem_Write>
		break;
 801c274:	e052      	b.n	801c31c <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x126>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	6818      	ldr	r0, [r3, #0]
 801c27a:	230a      	movs	r3, #10
 801c27c:	9302      	str	r3, [sp, #8]
 801c27e:	2301      	movs	r3, #1
 801c280:	9301      	str	r3, [sp, #4]
 801c282:	1cbb      	adds	r3, r7, #2
 801c284:	9300      	str	r3, [sp, #0]
 801c286:	2301      	movs	r3, #1
 801c288:	2227      	movs	r2, #39	@ 0x27
 801c28a:	2102      	movs	r1, #2
 801c28c:	f7ea f8fe 	bl	800648c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	6818      	ldr	r0, [r3, #0]
 801c294:	230a      	movs	r3, #10
 801c296:	9302      	str	r3, [sp, #8]
 801c298:	2301      	movs	r3, #1
 801c29a:	9301      	str	r3, [sp, #4]
 801c29c:	1c7b      	adds	r3, r7, #1
 801c29e:	9300      	str	r3, [sp, #0]
 801c2a0:	2301      	movs	r3, #1
 801c2a2:	2228      	movs	r2, #40	@ 0x28
 801c2a4:	2102      	movs	r1, #2
 801c2a6:	f7ea f8f1 	bl	800648c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c2aa:	687b      	ldr	r3, [r7, #4]
 801c2ac:	6818      	ldr	r0, [r3, #0]
 801c2ae:	230a      	movs	r3, #10
 801c2b0:	9302      	str	r3, [sp, #8]
 801c2b2:	2301      	movs	r3, #1
 801c2b4:	9301      	str	r3, [sp, #4]
 801c2b6:	f107 0310 	add.w	r3, r7, #16
 801c2ba:	9300      	str	r3, [sp, #0]
 801c2bc:	2301      	movs	r3, #1
 801c2be:	2229      	movs	r2, #41	@ 0x29
 801c2c0:	2102      	movs	r1, #2
 801c2c2:	f7ea f8e3 	bl	800648c <HAL_I2C_Mem_Write>
		break;
 801c2c6:	e029      	b.n	801c31c <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x126>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	6818      	ldr	r0, [r3, #0]
 801c2cc:	230a      	movs	r3, #10
 801c2ce:	9302      	str	r3, [sp, #8]
 801c2d0:	2301      	movs	r3, #1
 801c2d2:	9301      	str	r3, [sp, #4]
 801c2d4:	1cbb      	adds	r3, r7, #2
 801c2d6:	9300      	str	r3, [sp, #0]
 801c2d8:	2301      	movs	r3, #1
 801c2da:	222d      	movs	r2, #45	@ 0x2d
 801c2dc:	2102      	movs	r1, #2
 801c2de:	f7ea f8d5 	bl	800648c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	6818      	ldr	r0, [r3, #0]
 801c2e6:	230a      	movs	r3, #10
 801c2e8:	9302      	str	r3, [sp, #8]
 801c2ea:	2301      	movs	r3, #1
 801c2ec:	9301      	str	r3, [sp, #4]
 801c2ee:	1c7b      	adds	r3, r7, #1
 801c2f0:	9300      	str	r3, [sp, #0]
 801c2f2:	2301      	movs	r3, #1
 801c2f4:	222e      	movs	r2, #46	@ 0x2e
 801c2f6:	2102      	movs	r1, #2
 801c2f8:	f7ea f8c8 	bl	800648c <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	6818      	ldr	r0, [r3, #0]
 801c300:	230a      	movs	r3, #10
 801c302:	9302      	str	r3, [sp, #8]
 801c304:	2301      	movs	r3, #1
 801c306:	9301      	str	r3, [sp, #4]
 801c308:	f107 0310 	add.w	r3, r7, #16
 801c30c:	9300      	str	r3, [sp, #0]
 801c30e:	2301      	movs	r3, #1
 801c310:	222f      	movs	r2, #47	@ 0x2f
 801c312:	2102      	movs	r1, #2
 801c314:	f7ea f8ba 	bl	800648c <HAL_I2C_Mem_Write>
		break;
 801c318:	e000      	b.n	801c31c <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh+0x126>
		break;
 801c31a:	bf00      	nop
	}
}
 801c31c:	bf00      	nop
 801c31e:	3708      	adds	r7, #8
 801c320:	46bd      	mov	sp, r7
 801c322:	bd80      	pop	{r7, pc}

0801c324 <_ZN21RobotControl_Extender16buzzer_setConfigEfth>:
		break;
	}
}


void RobotControl_Extender::buzzer_setConfig(float frequency, uint16_t on_time, uint8_t repeats){
 801c324:	b580      	push	{r7, lr}
 801c326:	b08a      	sub	sp, #40	@ 0x28
 801c328:	af04      	add	r7, sp, #16
 801c32a:	60f8      	str	r0, [r7, #12]
 801c32c:	ed87 0a02 	vstr	s0, [r7, #8]
 801c330:	460b      	mov	r3, r1
 801c332:	80fb      	strh	r3, [r7, #6]
 801c334:	4613      	mov	r3, r2
 801c336:	717b      	strb	r3, [r7, #5]

	uint8_t freq = (uint8_t) (frequency / 10);
 801c338:	ed97 7a02 	vldr	s14, [r7, #8]
 801c33c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 801c340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801c344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c348:	edc7 7a00 	vstr	s15, [r7]
 801c34c:	783b      	ldrb	r3, [r7, #0]
 801c34e:	b2db      	uxtb	r3, r3
 801c350:	75fb      	strb	r3, [r7, #23]
	uint8_t time = (uint8_t) (on_time / 10);
 801c352:	88fb      	ldrh	r3, [r7, #6]
 801c354:	4a19      	ldr	r2, [pc, #100]	@ (801c3bc <_ZN21RobotControl_Extender16buzzer_setConfigEfth+0x98>)
 801c356:	fba2 2303 	umull	r2, r3, r2, r3
 801c35a:	08db      	lsrs	r3, r3, #3
 801c35c:	b29b      	uxth	r3, r3
 801c35e:	b2db      	uxtb	r3, r3
 801c360:	75bb      	strb	r3, [r7, #22]

	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c362:	68fb      	ldr	r3, [r7, #12]
 801c364:	6818      	ldr	r0, [r3, #0]
 801c366:	230a      	movs	r3, #10
 801c368:	9302      	str	r3, [sp, #8]
 801c36a:	2301      	movs	r3, #1
 801c36c:	9301      	str	r3, [sp, #4]
 801c36e:	f107 0317 	add.w	r3, r7, #23
 801c372:	9300      	str	r3, [sp, #0]
 801c374:	2301      	movs	r3, #1
 801c376:	2235      	movs	r2, #53	@ 0x35
 801c378:	2102      	movs	r1, #2
 801c37a:	f7ea f887 	bl	800648c <HAL_I2C_Mem_Write>
			REG_BUZZER_FREQ, 1, &freq, 1, 10);

	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c37e:	68fb      	ldr	r3, [r7, #12]
 801c380:	6818      	ldr	r0, [r3, #0]
 801c382:	230a      	movs	r3, #10
 801c384:	9302      	str	r3, [sp, #8]
 801c386:	2301      	movs	r3, #1
 801c388:	9301      	str	r3, [sp, #4]
 801c38a:	f107 0316 	add.w	r3, r7, #22
 801c38e:	9300      	str	r3, [sp, #0]
 801c390:	2301      	movs	r3, #1
 801c392:	2237      	movs	r2, #55	@ 0x37
 801c394:	2102      	movs	r1, #2
 801c396:	f7ea f879 	bl	800648c <HAL_I2C_Mem_Write>
			REG_BUZZER_BLINK_TIME, 1, &time, 1, 10);

	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c39a:	68fb      	ldr	r3, [r7, #12]
 801c39c:	6818      	ldr	r0, [r3, #0]
 801c39e:	230a      	movs	r3, #10
 801c3a0:	9302      	str	r3, [sp, #8]
 801c3a2:	2301      	movs	r3, #1
 801c3a4:	9301      	str	r3, [sp, #4]
 801c3a6:	1d7b      	adds	r3, r7, #5
 801c3a8:	9300      	str	r3, [sp, #0]
 801c3aa:	2301      	movs	r3, #1
 801c3ac:	2238      	movs	r2, #56	@ 0x38
 801c3ae:	2102      	movs	r1, #2
 801c3b0:	f7ea f86c 	bl	800648c <HAL_I2C_Mem_Write>
			REG_BUZZER_BLINK_COUNTER, 1, &repeats, 1, 10);

}
 801c3b4:	bf00      	nop
 801c3b6:	3718      	adds	r7, #24
 801c3b8:	46bd      	mov	sp, r7
 801c3ba:	bd80      	pop	{r7, pc}
 801c3bc:	cccccccd 	.word	0xcccccccd

0801c3c0 <_ZN21RobotControl_Extender12buzzer_startEv>:
void RobotControl_Extender::buzzer_start(){
 801c3c0:	b580      	push	{r7, lr}
 801c3c2:	b088      	sub	sp, #32
 801c3c4:	af04      	add	r7, sp, #16
 801c3c6:	6078      	str	r0, [r7, #4]
	uint8_t data = 1;
 801c3c8:	2301      	movs	r3, #1
 801c3ca:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(this->config.hi2c, EXTENDER_ADDRESS,
 801c3cc:	687b      	ldr	r3, [r7, #4]
 801c3ce:	6818      	ldr	r0, [r3, #0]
 801c3d0:	230a      	movs	r3, #10
 801c3d2:	9302      	str	r3, [sp, #8]
 801c3d4:	2301      	movs	r3, #1
 801c3d6:	9301      	str	r3, [sp, #4]
 801c3d8:	f107 030f 	add.w	r3, r7, #15
 801c3dc:	9300      	str	r3, [sp, #0]
 801c3de:	2301      	movs	r3, #1
 801c3e0:	2234      	movs	r2, #52	@ 0x34
 801c3e2:	2102      	movs	r1, #2
 801c3e4:	f7ea f852 	bl	800648c <HAL_I2C_Mem_Write>
			REG_BUZZER_DATA, 1, &data, 1, 10);
}
 801c3e8:	bf00      	nop
 801c3ea:	3710      	adds	r7, #16
 801c3ec:	46bd      	mov	sp, r7
 801c3ee:	bd80      	pop	{r7, pc}

0801c3f0 <_ZN19RobotControl_RGBLEDC1Eh>:

#include "robot-control_indicators.h"

extern RobotControl_Extender extender;

RobotControl_RGBLED::RobotControl_RGBLED(uint8_t position) {
 801c3f0:	b480      	push	{r7}
 801c3f2:	b083      	sub	sp, #12
 801c3f4:	af00      	add	r7, sp, #0
 801c3f6:	6078      	str	r0, [r7, #4]
 801c3f8:	460b      	mov	r3, r1
 801c3fa:	70fb      	strb	r3, [r7, #3]
	this->position = position;
 801c3fc:	687b      	ldr	r3, [r7, #4]
 801c3fe:	78fa      	ldrb	r2, [r7, #3]
 801c400:	701a      	strb	r2, [r3, #0]
}
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	4618      	mov	r0, r3
 801c406:	370c      	adds	r7, #12
 801c408:	46bd      	mov	sp, r7
 801c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c40e:	4770      	bx	lr

0801c410 <_ZN19RobotControl_RGBLED8setColorEhhh>:

void RobotControl_RGBLED::setColor(uint8_t red, uint8_t green, uint8_t blue) {
 801c410:	b580      	push	{r7, lr}
 801c412:	b084      	sub	sp, #16
 801c414:	af02      	add	r7, sp, #8
 801c416:	6078      	str	r0, [r7, #4]
 801c418:	4608      	mov	r0, r1
 801c41a:	4611      	mov	r1, r2
 801c41c:	461a      	mov	r2, r3
 801c41e:	4603      	mov	r3, r0
 801c420:	70fb      	strb	r3, [r7, #3]
 801c422:	460b      	mov	r3, r1
 801c424:	70bb      	strb	r3, [r7, #2]
 801c426:	4613      	mov	r3, r2
 801c428:	707b      	strb	r3, [r7, #1]
	extender.rgbLED_intern_setColor(position, red, green, blue);
 801c42a:	687b      	ldr	r3, [r7, #4]
 801c42c:	7819      	ldrb	r1, [r3, #0]
 801c42e:	78b8      	ldrb	r0, [r7, #2]
 801c430:	78fa      	ldrb	r2, [r7, #3]
 801c432:	787b      	ldrb	r3, [r7, #1]
 801c434:	9300      	str	r3, [sp, #0]
 801c436:	4603      	mov	r3, r0
 801c438:	4803      	ldr	r0, [pc, #12]	@ (801c448 <_ZN19RobotControl_RGBLED8setColorEhhh+0x38>)
 801c43a:	f7ff fedc 	bl	801c1f6 <_ZN21RobotControl_Extender22rgbLED_intern_setColorEhhhh>

}
 801c43e:	bf00      	nop
 801c440:	3708      	adds	r7, #8
 801c442:	46bd      	mov	sp, r7
 801c444:	bd80      	pop	{r7, pc}
 801c446:	bf00      	nop
 801c448:	2401e004 	.word	0x2401e004

0801c44c <_ZN19RobotControl_RGBLED5stateEh>:
void RobotControl_RGBLED::blink(uint16_t on_time) {
	extender.rgbLED_intern_blink(position, on_time);
}
void RobotControl_RGBLED::state(uint8_t state) {
 801c44c:	b580      	push	{r7, lr}
 801c44e:	b082      	sub	sp, #8
 801c450:	af00      	add	r7, sp, #0
 801c452:	6078      	str	r0, [r7, #4]
 801c454:	460b      	mov	r3, r1
 801c456:	70fb      	strb	r3, [r7, #3]
	extender.rgbLED_intern_setState(position, state);
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	781b      	ldrb	r3, [r3, #0]
 801c45c:	78fa      	ldrb	r2, [r7, #3]
 801c45e:	4619      	mov	r1, r3
 801c460:	4803      	ldr	r0, [pc, #12]	@ (801c470 <_ZN19RobotControl_RGBLED5stateEh+0x24>)
 801c462:	f7ff fe83 	bl	801c16c <_ZN21RobotControl_Extender22rgbLED_intern_setStateEhh>
}
 801c466:	bf00      	nop
 801c468:	3708      	adds	r7, #8
 801c46a:	46bd      	mov	sp, r7
 801c46c:	bd80      	pop	{r7, pc}
 801c46e:	bf00      	nop
 801c470:	2401e004 	.word	0x2401e004

0801c474 <_ZN19RobotControl_BuzzerC1Ev>:

RobotControl_Buzzer::RobotControl_Buzzer() {
 801c474:	b480      	push	{r7}
 801c476:	b083      	sub	sp, #12
 801c478:	af00      	add	r7, sp, #0
 801c47a:	6078      	str	r0, [r7, #4]

}
 801c47c:	687b      	ldr	r3, [r7, #4]
 801c47e:	4618      	mov	r0, r3
 801c480:	370c      	adds	r7, #12
 801c482:	46bd      	mov	sp, r7
 801c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c488:	4770      	bx	lr
	...

0801c48c <_ZN19RobotControl_Buzzer9setConfigEfth>:

void RobotControl_Buzzer::setConfig(float freq, uint16_t on_time,
		uint8_t repeats) {
 801c48c:	b580      	push	{r7, lr}
 801c48e:	b084      	sub	sp, #16
 801c490:	af00      	add	r7, sp, #0
 801c492:	60f8      	str	r0, [r7, #12]
 801c494:	ed87 0a02 	vstr	s0, [r7, #8]
 801c498:	460b      	mov	r3, r1
 801c49a:	80fb      	strh	r3, [r7, #6]
 801c49c:	4613      	mov	r3, r2
 801c49e:	717b      	strb	r3, [r7, #5]
	extender.buzzer_setConfig(freq, on_time, repeats);
 801c4a0:	797a      	ldrb	r2, [r7, #5]
 801c4a2:	88fb      	ldrh	r3, [r7, #6]
 801c4a4:	4619      	mov	r1, r3
 801c4a6:	ed97 0a02 	vldr	s0, [r7, #8]
 801c4aa:	4803      	ldr	r0, [pc, #12]	@ (801c4b8 <_ZN19RobotControl_Buzzer9setConfigEfth+0x2c>)
 801c4ac:	f7ff ff3a 	bl	801c324 <_ZN21RobotControl_Extender16buzzer_setConfigEfth>
}
 801c4b0:	bf00      	nop
 801c4b2:	3710      	adds	r7, #16
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	bd80      	pop	{r7, pc}
 801c4b8:	2401e004 	.word	0x2401e004

0801c4bc <_ZN19RobotControl_Buzzer5startEv>:
void RobotControl_Buzzer::start() {
 801c4bc:	b580      	push	{r7, lr}
 801c4be:	b082      	sub	sp, #8
 801c4c0:	af00      	add	r7, sp, #0
 801c4c2:	6078      	str	r0, [r7, #4]
	extender.buzzer_start();
 801c4c4:	4803      	ldr	r0, [pc, #12]	@ (801c4d4 <_ZN19RobotControl_Buzzer5startEv+0x18>)
 801c4c6:	f7ff ff7b 	bl	801c3c0 <_ZN21RobotControl_Extender12buzzer_startEv>
}
 801c4ca:	bf00      	nop
 801c4cc:	3708      	adds	r7, #8
 801c4ce:	46bd      	mov	sp, r7
 801c4d0:	bd80      	pop	{r7, pc}
 801c4d2:	bf00      	nop
 801c4d4:	2401e004 	.word	0x2401e004

0801c4d8 <_ZN22RobotControl_StatusLEDC1Ev>:

RobotControl_StatusLED::RobotControl_StatusLED() {
 801c4d8:	b480      	push	{r7}
 801c4da:	b083      	sub	sp, #12
 801c4dc:	af00      	add	r7, sp, #0
 801c4de:	6078      	str	r0, [r7, #4]

}
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	4618      	mov	r0, r3
 801c4e4:	370c      	adds	r7, #12
 801c4e6:	46bd      	mov	sp, r7
 801c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ec:	4770      	bx	lr
	...

0801c4f0 <_ZN22RobotControl_StatusLED8setStateEa>:
void RobotControl_StatusLED::setState(int8_t state) {
 801c4f0:	b580      	push	{r7, lr}
 801c4f2:	b082      	sub	sp, #8
 801c4f4:	af00      	add	r7, sp, #0
 801c4f6:	6078      	str	r0, [r7, #4]
 801c4f8:	460b      	mov	r3, r1
 801c4fa:	70fb      	strb	r3, [r7, #3]
	extender.setStatusLED(state);
 801c4fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801c500:	4619      	mov	r1, r3
 801c502:	4803      	ldr	r0, [pc, #12]	@ (801c510 <_ZN22RobotControl_StatusLED8setStateEa+0x20>)
 801c504:	f7ff fe18 	bl	801c138 <_ZN21RobotControl_Extender12setStatusLEDEa>
}
 801c508:	bf00      	nop
 801c50a:	3708      	adds	r7, #8
 801c50c:	46bd      	mov	sp, r7
 801c50e:	bd80      	pop	{r7, pc}
 801c510:	2401e004 	.word	0x2401e004

0801c514 <_Z18robot_control_initv>:
void robot_control_task(void *argument);



// ------------------------------------------------------------------------------------------------------------
void robot_control_init(){
 801c514:	b580      	push	{r7, lr}
 801c516:	b082      	sub	sp, #8
 801c518:	af00      	add	r7, sp, #0
	extender_config_struct_t extender_config = {
 801c51a:	4b05      	ldr	r3, [pc, #20]	@ (801c530 <_Z18robot_control_initv+0x1c>)
 801c51c:	607b      	str	r3, [r7, #4]
			.hi2c = BOARD_I2C_INTERN,
	};
	extender.init(extender_config);
 801c51e:	6879      	ldr	r1, [r7, #4]
 801c520:	4804      	ldr	r0, [pc, #16]	@ (801c534 <_Z18robot_control_initv+0x20>)
 801c522:	f7ff fdfb 	bl	801c11c <_ZN21RobotControl_Extender4initE24extender_config_struct_t>
//	debug_uart.init();
//	debug_uart.registerCallback(CORE_COMM_SERIAL_SOCKET_CB_RX, uart_rx_fun, NULL);

}
 801c526:	bf00      	nop
 801c528:	3708      	adds	r7, #8
 801c52a:	46bd      	mov	sp, r7
 801c52c:	bd80      	pop	{r7, pc}
 801c52e:	bf00      	nop
 801c530:	240002e0 	.word	0x240002e0
 801c534:	2401e004 	.word	0x2401e004

0801c538 <_Z19robot_control_startv>:
// ------------------------------------------------------------------------------------------------------------
void robot_control_start(){
 801c538:	b580      	push	{r7, lr}
 801c53a:	af00      	add	r7, sp, #0
//	debug_uart.start();
	osThreadNew(robot_control_task, NULL, &rc_task_attributes);
 801c53c:	4a03      	ldr	r2, [pc, #12]	@ (801c54c <_Z19robot_control_startv+0x14>)
 801c53e:	2100      	movs	r1, #0
 801c540:	4803      	ldr	r0, [pc, #12]	@ (801c550 <_Z19robot_control_startv+0x18>)
 801c542:	f7f3 fc0c 	bl	800fd5e <osThreadNew>
}
 801c546:	bf00      	nop
 801c548:	bd80      	pop	{r7, pc}
 801c54a:	bf00      	nop
 801c54c:	080238cc 	.word	0x080238cc
 801c550:	0801c555 	.word	0x0801c555

0801c554 <_Z18robot_control_taskPv>:

// ------------------------------------------------------------------------------------------------------------
void robot_control_task(void *argument){
 801c554:	b580      	push	{r7, lr}
 801c556:	b084      	sub	sp, #16
 801c558:	af00      	add	r7, sp, #0
 801c55a:	6078      	str	r0, [r7, #4]
//	debug.start();
	rc_error_led.setState(0);
 801c55c:	2100      	movs	r1, #0
 801c55e:	4811      	ldr	r0, [pc, #68]	@ (801c5a4 <_Z18robot_control_taskPv+0x50>)
 801c560:	f7ff ffc6 	bl	801c4f0 <_ZN22RobotControl_StatusLED8setStateEa>

	rc_buzzer.setConfig(440, 250, 1);
 801c564:	2201      	movs	r2, #1
 801c566:	21fa      	movs	r1, #250	@ 0xfa
 801c568:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 801c5a8 <_Z18robot_control_taskPv+0x54>
 801c56c:	480f      	ldr	r0, [pc, #60]	@ (801c5ac <_Z18robot_control_taskPv+0x58>)
 801c56e:	f7ff ff8d 	bl	801c48c <_ZN19RobotControl_Buzzer9setConfigEfth>
	rc_buzzer.start();
 801c572:	480e      	ldr	r0, [pc, #56]	@ (801c5ac <_Z18robot_control_taskPv+0x58>)
 801c574:	f7ff ffa2 	bl	801c4bc <_ZN19RobotControl_Buzzer5startEv>

	rc_button_led_1.on();
 801c578:	480d      	ldr	r0, [pc, #52]	@ (801c5b0 <_Z18robot_control_taskPv+0x5c>)
 801c57a:	f001 fff4 	bl	801e566 <_ZN17core_hardware_LED2onEv>
	rc_button_led_2.on();
 801c57e:	480d      	ldr	r0, [pc, #52]	@ (801c5b4 <_Z18robot_control_taskPv+0x60>)
 801c580:	f001 fff1 	bl	801e566 <_ZN17core_hardware_LED2onEv>


	uint32_t kernel_ticks = 0;
 801c584:	2300      	movs	r3, #0
 801c586:	60fb      	str	r3, [r7, #12]
	while (true){
			kernel_ticks = osKernelGetTickCount();
 801c588:	f7f3 fbd4 	bl	800fd34 <osKernelGetTickCount>
 801c58c:	60f8      	str	r0, [r7, #12]
			rc_activity_led.toggle();
 801c58e:	480a      	ldr	r0, [pc, #40]	@ (801c5b8 <_Z18robot_control_taskPv+0x64>)
 801c590:	f002 f809 	bl	801e5a6 <_ZN17core_hardware_LED6toggleEv>
			osDelayUntil(kernel_ticks + (uint32_t) 250);
 801c594:	68fb      	ldr	r3, [r7, #12]
 801c596:	33fa      	adds	r3, #250	@ 0xfa
 801c598:	4618      	mov	r0, r3
 801c59a:	f7f3 fc98 	bl	800fece <osDelayUntil>
			kernel_ticks = osKernelGetTickCount();
 801c59e:	bf00      	nop
 801c5a0:	e7f2      	b.n	801c588 <_Z18robot_control_taskPv+0x34>
 801c5a2:	bf00      	nop
 801c5a4:	2401dff8 	.word	0x2401dff8
 801c5a8:	43dc0000 	.word	0x43dc0000
 801c5ac:	2401e014 	.word	0x2401e014
 801c5b0:	2401dfd0 	.word	0x2401dfd0
 801c5b4:	2401dfd8 	.word	0x2401dfd8
 801c5b8:	2401dff0 	.word	0x2401dff0

0801c5bc <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 801c5bc:	b580      	push	{r7, lr}
 801c5be:	b082      	sub	sp, #8
 801c5c0:	af00      	add	r7, sp, #0
 801c5c2:	6078      	str	r0, [r7, #4]
 801c5c4:	6039      	str	r1, [r7, #0]
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	2b01      	cmp	r3, #1
 801c5ca:	d148      	bne.n	801c65e <_Z41__static_initialization_and_destruction_0ii+0xa2>
 801c5cc:	683b      	ldr	r3, [r7, #0]
 801c5ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801c5d2:	4293      	cmp	r3, r2
 801c5d4:	d143      	bne.n	801c65e <_Z41__static_initialization_and_destruction_0ii+0xa2>
core_hardware_LED rc_status_led_1(BOARD_LED_1_PORT, BOARD_LED_1_PIN);
 801c5d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801c5da:	4923      	ldr	r1, [pc, #140]	@ (801c668 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801c5dc:	4823      	ldr	r0, [pc, #140]	@ (801c66c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 801c5de:	f001 ffae 	bl	801e53e <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_LED rc_status_led_2(BOARD_LED_2_PORT, BOARD_LED_2_PIN);
 801c5e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801c5e6:	4920      	ldr	r1, [pc, #128]	@ (801c668 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 801c5e8:	4821      	ldr	r0, [pc, #132]	@ (801c670 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 801c5ea:	f001 ffa8 	bl	801e53e <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_LED rc_button_led_1(GPIOA, GPIO_PIN_0);
 801c5ee:	2201      	movs	r2, #1
 801c5f0:	4920      	ldr	r1, [pc, #128]	@ (801c674 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 801c5f2:	4821      	ldr	r0, [pc, #132]	@ (801c678 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 801c5f4:	f001 ffa3 	bl	801e53e <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_LED rc_button_led_2(GPIOA, GPIO_PIN_1);
 801c5f8:	2202      	movs	r2, #2
 801c5fa:	491e      	ldr	r1, [pc, #120]	@ (801c674 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 801c5fc:	481f      	ldr	r0, [pc, #124]	@ (801c67c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 801c5fe:	f001 ff9e 	bl	801e53e <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
core_hardware_Button side_button(GPIOC, GPIO_PIN_1);
 801c602:	2202      	movs	r2, #2
 801c604:	491e      	ldr	r1, [pc, #120]	@ (801c680 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 801c606:	481f      	ldr	r0, [pc, #124]	@ (801c684 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 801c608:	f001 ff74 	bl	801e4f4 <_ZN20core_hardware_ButtonC1EP12GPIO_TypeDeft>
core_hardware_Button off_button(GPIOC, GPIO_PIN_0);
 801c60c:	2201      	movs	r2, #1
 801c60e:	491c      	ldr	r1, [pc, #112]	@ (801c680 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 801c610:	481d      	ldr	r0, [pc, #116]	@ (801c688 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 801c612:	f001 ff6f 	bl	801e4f4 <_ZN20core_hardware_ButtonC1EP12GPIO_TypeDeft>
core_hardware_LED rc_activity_led(BOARD_LED_ACT_PORT, BOARD_LED_ACT_PIN);
 801c616:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c61a:	491c      	ldr	r1, [pc, #112]	@ (801c68c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 801c61c:	481c      	ldr	r0, [pc, #112]	@ (801c690 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 801c61e:	f001 ff8e 	bl	801e53e <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>
RobotControl_StatusLED rc_error_led;
 801c622:	481c      	ldr	r0, [pc, #112]	@ (801c694 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 801c624:	f7ff ff58 	bl	801c4d8 <_ZN22RobotControl_StatusLEDC1Ev>
core_hardware_Button button(BOARD_BUTTON_PORT, BOARD_BUTTON_PIN);
 801c628:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801c62c:	4914      	ldr	r1, [pc, #80]	@ (801c680 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 801c62e:	481a      	ldr	r0, [pc, #104]	@ (801c698 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 801c630:	f001 ff60 	bl	801e4f4 <_ZN20core_hardware_ButtonC1EP12GPIO_TypeDeft>
RobotControl_Extender extender;
 801c634:	4819      	ldr	r0, [pc, #100]	@ (801c69c <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 801c636:	f7ff fd66 	bl	801c106 <_ZN21RobotControl_ExtenderC1Ev>
RobotControl_RGBLED rc_rgb_led_status(0);
 801c63a:	2100      	movs	r1, #0
 801c63c:	4818      	ldr	r0, [pc, #96]	@ (801c6a0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 801c63e:	f7ff fed7 	bl	801c3f0 <_ZN19RobotControl_RGBLEDC1Eh>
RobotControl_RGBLED rc_rgb_led_side_1(1);
 801c642:	2101      	movs	r1, #1
 801c644:	4817      	ldr	r0, [pc, #92]	@ (801c6a4 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 801c646:	f7ff fed3 	bl	801c3f0 <_ZN19RobotControl_RGBLEDC1Eh>
RobotControl_RGBLED rc_rgb_led_side_2(2);
 801c64a:	2102      	movs	r1, #2
 801c64c:	4816      	ldr	r0, [pc, #88]	@ (801c6a8 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 801c64e:	f7ff fecf 	bl	801c3f0 <_ZN19RobotControl_RGBLEDC1Eh>
RobotControl_Buzzer rc_buzzer;
 801c652:	4816      	ldr	r0, [pc, #88]	@ (801c6ac <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 801c654:	f7ff ff0e 	bl	801c474 <_ZN19RobotControl_BuzzerC1Ev>
Madgwick sensor_fusion;
 801c658:	4815      	ldr	r0, [pc, #84]	@ (801c6b0 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 801c65a:	f001 fb2d 	bl	801dcb8 <_ZN8MadgwickC1Ev>
}
 801c65e:	bf00      	nop
 801c660:	3708      	adds	r7, #8
 801c662:	46bd      	mov	sp, r7
 801c664:	bd80      	pop	{r7, pc}
 801c666:	bf00      	nop
 801c668:	58021000 	.word	0x58021000
 801c66c:	2401dfc0 	.word	0x2401dfc0
 801c670:	2401dfc8 	.word	0x2401dfc8
 801c674:	58020000 	.word	0x58020000
 801c678:	2401dfd0 	.word	0x2401dfd0
 801c67c:	2401dfd8 	.word	0x2401dfd8
 801c680:	58020800 	.word	0x58020800
 801c684:	2401dfe0 	.word	0x2401dfe0
 801c688:	2401dfe8 	.word	0x2401dfe8
 801c68c:	58020c00 	.word	0x58020c00
 801c690:	2401dff0 	.word	0x2401dff0
 801c694:	2401dff8 	.word	0x2401dff8
 801c698:	2401dffc 	.word	0x2401dffc
 801c69c:	2401e004 	.word	0x2401e004
 801c6a0:	2401e008 	.word	0x2401e008
 801c6a4:	2401e00c 	.word	0x2401e00c
 801c6a8:	2401e010 	.word	0x2401e010
 801c6ac:	2401e014 	.word	0x2401e014
 801c6b0:	2401e018 	.word	0x2401e018

0801c6b4 <_GLOBAL__sub_I_rc_status_led_1>:
 801c6b4:	b580      	push	{r7, lr}
 801c6b6:	af00      	add	r7, sp, #0
 801c6b8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801c6bc:	2001      	movs	r0, #1
 801c6be:	f7ff ff7d 	bl	801c5bc <_Z41__static_initialization_and_destruction_0ii>
 801c6c2:	bd80      	pop	{r7, pc}

0801c6c4 <_ZN12ModbusMasterC1Ev>:
void uartRxCompleteDMA_callback(UART_HandleTypeDef *huart, uint16_t size);
static void uartRxCompleteIT_callback(UART_HandleTypeDef *huart);
void uartTxCompleteDMA_callback(UART_HandleTypeDef *huart);

/* ================================================================ */
ModbusMaster::ModbusMaster() {
 801c6c4:	b580      	push	{r7, lr}
 801c6c6:	b082      	sub	sp, #8
 801c6c8:	af00      	add	r7, sp, #0
 801c6ca:	6078      	str	r0, [r7, #4]
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 801c6d2:	4618      	mov	r0, r3
 801c6d4:	f001 f8f1 	bl	801d8ba <_ZN21core_utils_RingBufferILi128EEC1Ev>

}
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	4618      	mov	r0, r3
 801c6dc:	3708      	adds	r7, #8
 801c6de:	46bd      	mov	sp, r7
 801c6e0:	bd80      	pop	{r7, pc}
	...

0801c6e4 <_ZN12ModbusMaster4initE15modbus_config_t>:
/* ================================================================ */
void ModbusMaster::init(modbus_config_t config) {
 801c6e4:	b580      	push	{r7, lr}
 801c6e6:	b086      	sub	sp, #24
 801c6e8:	af02      	add	r7, sp, #8
 801c6ea:	60f8      	str	r0, [r7, #12]
 801c6ec:	4638      	mov	r0, r7
 801c6ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	this->config = config;
 801c6f2:	68fb      	ldr	r3, [r7, #12]
 801c6f4:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 801c6f8:	463a      	mov	r2, r7
 801c6fa:	ca07      	ldmia	r2, {r0, r1, r2}
 801c6fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	if (num_handlers < MAX_MODBUS_HANDLERS) {
 801c700:	4b3d      	ldr	r3, [pc, #244]	@ (801c7f8 <_ZN12ModbusMaster4initE15modbus_config_t+0x114>)
 801c702:	781b      	ldrb	r3, [r3, #0]
 801c704:	2b01      	cmp	r3, #1
 801c706:	d872      	bhi.n	801c7ee <_ZN12ModbusMaster4initE15modbus_config_t+0x10a>

		// Initialize the ring buffer
		this->xBufferRX.clear();
 801c708:	68fb      	ldr	r3, [r7, #12]
 801c70a:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 801c70e:	4618      	mov	r0, r3
 801c710:	f001 f8de 	bl	801d8d0 <_ZN21core_utils_RingBufferILi128EE5clearEv>

		// Create the master task and the queue for telegrams
		this->thread_handle = osThreadNew(modbusMasterTask, this,
 801c714:	4a39      	ldr	r2, [pc, #228]	@ (801c7fc <_ZN12ModbusMaster4initE15modbus_config_t+0x118>)
 801c716:	68f9      	ldr	r1, [r7, #12]
 801c718:	4839      	ldr	r0, [pc, #228]	@ (801c800 <_ZN12ModbusMaster4initE15modbus_config_t+0x11c>)
 801c71a:	f7f3 fb20 	bl	800fd5e <osThreadNew>
 801c71e:	4602      	mov	r2, r0
 801c720:	68fb      	ldr	r3, [r7, #12]
 801c722:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
				&task_attributes);

		//
		this->u16timeOut = 20;
 801c726:	68fb      	ldr	r3, [r7, #12]
 801c728:	2214      	movs	r2, #20
 801c72a:	f8a3 220e 	strh.w	r2, [r3, #526]	@ 0x20e
		// Initialize the timeout timer
		this->xTimerTimeout = xTimerCreate("xTimerTimeout", // Just a text name, not used by the kernel.
				this->u16timeOut,     		// The timer period in ticks.
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	f8b3 320e 	ldrh.w	r3, [r3, #526]	@ 0x20e
		this->xTimerTimeout = xTimerCreate("xTimerTimeout", // Just a text name, not used by the kernel.
 801c734:	4619      	mov	r1, r3
				pdFALSE, // The timers will auto-reload themselves when they expire.
				(void*) this->xTimerTimeout, // Assign each timer a unique id equal to its array index.
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
		this->xTimerTimeout = xTimerCreate("xTimerTimeout", // Just a text name, not used by the kernel.
 801c73c:	4a31      	ldr	r2, [pc, #196]	@ (801c804 <_ZN12ModbusMaster4initE15modbus_config_t+0x120>)
 801c73e:	9200      	str	r2, [sp, #0]
 801c740:	2200      	movs	r2, #0
 801c742:	4831      	ldr	r0, [pc, #196]	@ (801c808 <_ZN12ModbusMaster4initE15modbus_config_t+0x124>)
 801c744:	f7f6 fc0c 	bl	8012f60 <xTimerCreate>
 801c748:	4602      	mov	r2, r0
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
				(TimerCallbackFunction_t) vTimerCallbackTimeout // Each timer calls the same callback when it expires.
				);

		if (this->xTimerTimeout == NULL) {
 801c750:	68fb      	ldr	r3, [r7, #12]
 801c752:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 801c756:	2b00      	cmp	r3, #0
 801c758:	d101      	bne.n	801c75e <_ZN12ModbusMaster4initE15modbus_config_t+0x7a>
			while (1)
 801c75a:	bf00      	nop
 801c75c:	e7fd      	b.n	801c75a <_ZN12ModbusMaster4initE15modbus_config_t+0x76>
				; // TODO error creating timer, check heap and stack size
		}

		modbus_query_queue = osMessageQueueNew(MAX_TELEGRAMS,
 801c75e:	2200      	movs	r2, #0
 801c760:	2110      	movs	r1, #16
 801c762:	2014      	movs	r0, #20
 801c764:	f7f3 fd92 	bl	801028c <osMessageQueueNew>
 801c768:	4603      	mov	r3, r0
 801c76a:	4a28      	ldr	r2, [pc, #160]	@ (801c80c <_ZN12ModbusMaster4initE15modbus_config_t+0x128>)
 801c76c:	6013      	str	r3, [r2, #0]
				sizeof(modbus_query_t), NULL);

		if (modbus_query_queue == NULL) {
 801c76e:	4b27      	ldr	r3, [pc, #156]	@ (801c80c <_ZN12ModbusMaster4initE15modbus_config_t+0x128>)
 801c770:	681b      	ldr	r3, [r3, #0]
 801c772:	2b00      	cmp	r3, #0
 801c774:	d101      	bne.n	801c77a <_ZN12ModbusMaster4initE15modbus_config_t+0x96>
			while (1)
 801c776:	bf00      	nop
 801c778:	e7fd      	b.n	801c776 <_ZN12ModbusMaster4initE15modbus_config_t+0x92>
				; //error creating queue for telegrams, check heap and stack size
		}

		if (this->thread_handle == NULL) {
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 801c780:	2b00      	cmp	r3, #0
 801c782:	d101      	bne.n	801c788 <_ZN12ModbusMaster4initE15modbus_config_t+0xa4>
			while (1)
 801c784:	bf00      	nop
 801c786:	e7fd      	b.n	801c784 <_ZN12ModbusMaster4initE15modbus_config_t+0xa0>
		}

		this->xTimerT35 = xTimerCreate("TimerT35", // Just a text name, not used by the kernel.
				T35,     // The timer period in ticks.
				pdFALSE, // The timers will auto-reload themselves when they expire.
				(void*) this->xTimerT35, // Assign each timer a unique id equal to its array index.
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
		this->xTimerT35 = xTimerCreate("TimerT35", // Just a text name, not used by the kernel.
 801c78e:	4a20      	ldr	r2, [pc, #128]	@ (801c810 <_ZN12ModbusMaster4initE15modbus_config_t+0x12c>)
 801c790:	9200      	str	r2, [sp, #0]
 801c792:	2200      	movs	r2, #0
 801c794:	2104      	movs	r1, #4
 801c796:	481f      	ldr	r0, [pc, #124]	@ (801c814 <_ZN12ModbusMaster4initE15modbus_config_t+0x130>)
 801c798:	f7f6 fbe2 	bl	8012f60 <xTimerCreate>
 801c79c:	4602      	mov	r2, r0
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
				(TimerCallbackFunction_t) vTimerCallbackT35 // Each timer calls the same callback when it expires.
				);
		if (this->xTimerT35 == NULL) {
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 801c7aa:	2b00      	cmp	r3, #0
 801c7ac:	d101      	bne.n	801c7b2 <_ZN12ModbusMaster4initE15modbus_config_t+0xce>
			while (1)
 801c7ae:	bf00      	nop
 801c7b0:	e7fd      	b.n	801c7ae <_ZN12ModbusMaster4initE15modbus_config_t+0xca>
				; //Error creating the timer, check heap and stack size
		}
		this->ModBusSphrHandle = osSemaphoreNew(1, 1, &semaphore_attributes);
 801c7b2:	4a19      	ldr	r2, [pc, #100]	@ (801c818 <_ZN12ModbusMaster4initE15modbus_config_t+0x134>)
 801c7b4:	2101      	movs	r1, #1
 801c7b6:	2001      	movs	r0, #1
 801c7b8:	f7f3 fc48 	bl	801004c <osSemaphoreNew>
 801c7bc:	4602      	mov	r2, r0
 801c7be:	68fb      	ldr	r3, [r7, #12]
 801c7c0:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224

		if (this->ModBusSphrHandle == NULL) {
 801c7c4:	68fb      	ldr	r3, [r7, #12]
 801c7c6:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 801c7ca:	2b00      	cmp	r3, #0
 801c7cc:	d101      	bne.n	801c7d2 <_ZN12ModbusMaster4initE15modbus_config_t+0xee>
			while (1)
 801c7ce:	bf00      	nop
 801c7d0:	e7fd      	b.n	801c7ce <_ZN12ModbusMaster4initE15modbus_config_t+0xea>
				; //Error creating the semaphore, check heap and stack size
		}

		handlers[num_handlers] = this;
 801c7d2:	4b09      	ldr	r3, [pc, #36]	@ (801c7f8 <_ZN12ModbusMaster4initE15modbus_config_t+0x114>)
 801c7d4:	781b      	ldrb	r3, [r3, #0]
 801c7d6:	4619      	mov	r1, r3
 801c7d8:	4a10      	ldr	r2, [pc, #64]	@ (801c81c <_ZN12ModbusMaster4initE15modbus_config_t+0x138>)
 801c7da:	68fb      	ldr	r3, [r7, #12]
 801c7dc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		num_handlers++;
 801c7e0:	4b05      	ldr	r3, [pc, #20]	@ (801c7f8 <_ZN12ModbusMaster4initE15modbus_config_t+0x114>)
 801c7e2:	781b      	ldrb	r3, [r3, #0]
 801c7e4:	3301      	adds	r3, #1
 801c7e6:	b2da      	uxtb	r2, r3
 801c7e8:	4b03      	ldr	r3, [pc, #12]	@ (801c7f8 <_ZN12ModbusMaster4initE15modbus_config_t+0x114>)
 801c7ea:	701a      	strb	r2, [r3, #0]
	// Initialize the UART

	// TODO: Add UART Initialization and checking whether it is correctly initialized
	// Should I be able to use one of my UART classes?

}
 801c7ec:	e000      	b.n	801c7f0 <_ZN12ModbusMaster4initE15modbus_config_t+0x10c>
		while (1)
 801c7ee:	e7fe      	b.n	801c7ee <_ZN12ModbusMaster4initE15modbus_config_t+0x10a>
}
 801c7f0:	3710      	adds	r7, #16
 801c7f2:	46bd      	mov	sp, r7
 801c7f4:	bd80      	pop	{r7, pc}
 801c7f6:	bf00      	nop
 801c7f8:	2401e048 	.word	0x2401e048
 801c7fc:	080238f0 	.word	0x080238f0
 801c800:	0801cadd 	.word	0x0801cadd
 801c804:	0801d391 	.word	0x0801d391
 801c808:	0802331c 	.word	0x0802331c
 801c80c:	2401e04c 	.word	0x2401e04c
 801c810:	0801d31d 	.word	0x0801d31d
 801c814:	0802332c 	.word	0x0802332c
 801c818:	08023914 	.word	0x08023914
 801c81c:	2401e040 	.word	0x2401e040

0801c820 <_ZN12ModbusMaster5startEv>:
/* ================================================================ */
void ModbusMaster::start() {
 801c820:	b580      	push	{r7, lr}
 801c822:	b082      	sub	sp, #8
 801c824:	af00      	add	r7, sp, #0
 801c826:	6078      	str	r0, [r7, #4]

	if (this->config.EN_GPIOx != NULL) {
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 801c82e:	2b00      	cmp	r3, #0
 801c830:	d009      	beq.n	801c846 <_ZN12ModbusMaster5startEv+0x26>
		// Set RS485 Transmitter to transmit mode
		HAL_GPIO_WritePin(config.EN_GPIOx, config.EN_GPIO_Pin, GPIO_PIN_RESET);
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	f8d3 02b0 	ldr.w	r0, [r3, #688]	@ 0x2b0
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 801c83e:	2200      	movs	r2, #0
 801c840:	4619      	mov	r1, r3
 801c842:	f7e9 fd45 	bl	80062d0 <HAL_GPIO_WritePin>
	}

	// Wait until UART is ready
	while (HAL_UART_GetState(this->config.huart) != HAL_UART_STATE_READY) {
 801c846:	bf00      	nop
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c84e:	4618      	mov	r0, r3
 801c850:	f7f0 fdbe 	bl	800d3d0 <HAL_UART_GetState>
 801c854:	4603      	mov	r3, r0
 801c856:	2b20      	cmp	r3, #32
 801c858:	bf14      	ite	ne
 801c85a:	2301      	movne	r3, #1
 801c85c:	2300      	moveq	r3, #0
 801c85e:	b2db      	uxtb	r3, r3
 801c860:	2b00      	cmp	r3, #0
 801c862:	d1f1      	bne.n	801c848 <_ZN12ModbusMaster5startEv+0x28>

	}

	if (this->config.hardware == MB_UART_IT) {
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	f893 32b6 	ldrb.w	r3, [r3, #694]	@ 0x2b6
 801c86a:	2b01      	cmp	r3, #1
 801c86c:	d11c      	bne.n	801c8a8 <_ZN12ModbusMaster5startEv+0x88>

		// Register the callback for the UART Interrupt
		HAL_UART_RegisterCallback(this->config.huart,
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c874:	4a86      	ldr	r2, [pc, #536]	@ (801ca90 <_ZN12ModbusMaster5startEv+0x270>)
 801c876:	2103      	movs	r1, #3
 801c878:	4618      	mov	r0, r3
 801c87a:	f7ef fc0d 	bl	800c098 <HAL_UART_RegisterCallback>
				HAL_UART_RX_COMPLETE_CB_ID, uartRxCompleteIT_callback);

//		HAL_UART_RegisterCallback(this->huart, HAL_UART_TX_COMPLETE_CB_ID, uartTxCompleteIT_callback);

		// Receive data from serial port for Modbus using interrupt
		if (HAL_UART_Receive_IT(this->config.huart, &this->dataRX, 1)
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	f8d3 02ac 	ldr.w	r0, [r3, #684]	@ 0x2ac
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	f203 2312 	addw	r3, r3, #530	@ 0x212
 801c88a:	2201      	movs	r2, #1
 801c88c:	4619      	mov	r1, r3
 801c88e:	f7ef fd8f 	bl	800c3b0 <HAL_UART_Receive_IT>
 801c892:	4603      	mov	r3, r0
				!= HAL_OK) {
 801c894:	2b00      	cmp	r3, #0
 801c896:	bf14      	ite	ne
 801c898:	2301      	movne	r3, #1
 801c89a:	2300      	moveq	r3, #0
 801c89c:	b2db      	uxtb	r3, r3
		if (HAL_UART_Receive_IT(this->config.huart, &this->dataRX, 1)
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	f000 80de 	beq.w	801ca60 <_ZN12ModbusMaster5startEv+0x240>
			while (1) {
 801c8a4:	bf00      	nop
 801c8a6:	e7fd      	b.n	801c8a4 <_ZN12ModbusMaster5startEv+0x84>
				//error in your initialization code
			}
		}
	} else if (this->config.hardware == MB_UART_DMA) {
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	f893 32b6 	ldrb.w	r3, [r3, #694]	@ 0x2b6
 801c8ae:	2b02      	cmp	r3, #2
 801c8b0:	f040 80d6 	bne.w	801ca60 <_ZN12ModbusMaster5startEv+0x240>
		HAL_UART_RegisterRxEventCallback(this->config.huart,
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c8ba:	4976      	ldr	r1, [pc, #472]	@ (801ca94 <_ZN12ModbusMaster5startEv+0x274>)
 801c8bc:	4618      	mov	r0, r3
 801c8be:	f7ef fca5 	bl	800c20c <HAL_UART_RegisterRxEventCallback>
				uartRxCompleteDMA_callback);

		HAL_UART_RegisterCallback(this->config.huart,
 801c8c2:	687b      	ldr	r3, [r7, #4]
 801c8c4:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c8c8:	4a73      	ldr	r2, [pc, #460]	@ (801ca98 <_ZN12ModbusMaster5startEv+0x278>)
 801c8ca:	2101      	movs	r1, #1
 801c8cc:	4618      	mov	r0, r3
 801c8ce:	f7ef fbe3 	bl	800c098 <HAL_UART_RegisterCallback>
				HAL_UART_TX_COMPLETE_CB_ID, uartTxCompleteDMA_callback);

		if (HAL_UARTEx_ReceiveToIdle_DMA(this->config.huart,
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	f8d3 02ac 	ldr.w	r0, [r3, #684]	@ 0x2ac
				this->xBufferRX.buffer,
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	f503 730a 	add.w	r3, r3, #552	@ 0x228
		if (HAL_UARTEx_ReceiveToIdle_DMA(this->config.huart,
 801c8de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c8e2:	4619      	mov	r1, r3
 801c8e4:	f7f3 f8d3 	bl	800fa8e <HAL_UARTEx_ReceiveToIdle_DMA>
 801c8e8:	4603      	mov	r3, r0
				MAX_BUFFER) != HAL_OK) {
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	bf14      	ite	ne
 801c8ee:	2301      	movne	r3, #1
 801c8f0:	2300      	moveq	r3, #0
 801c8f2:	b2db      	uxtb	r3, r3
		if (HAL_UARTEx_ReceiveToIdle_DMA(this->config.huart,
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	d001      	beq.n	801c8fc <_ZN12ModbusMaster5startEv+0xdc>
			while (1) {
 801c8f8:	bf00      	nop
 801c8fa:	e7fd      	b.n	801c8f8 <_ZN12ModbusMaster5startEv+0xd8>
				//error in your initialization code
			}
		}
		__HAL_DMA_DISABLE_IT(this->config.huart->hdmarx, DMA_IT_HT);
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	4a64      	ldr	r2, [pc, #400]	@ (801ca9c <_ZN12ModbusMaster5startEv+0x27c>)
 801c90a:	4293      	cmp	r3, r2
 801c90c:	f000 8087 	beq.w	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c91a:	681b      	ldr	r3, [r3, #0]
 801c91c:	4a60      	ldr	r2, [pc, #384]	@ (801caa0 <_ZN12ModbusMaster5startEv+0x280>)
 801c91e:	4293      	cmp	r3, r2
 801c920:	d07d      	beq.n	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c92c:	681b      	ldr	r3, [r3, #0]
 801c92e:	4a5d      	ldr	r2, [pc, #372]	@ (801caa4 <_ZN12ModbusMaster5startEv+0x284>)
 801c930:	4293      	cmp	r3, r2
 801c932:	d074      	beq.n	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c93a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c93e:	681b      	ldr	r3, [r3, #0]
 801c940:	4a59      	ldr	r2, [pc, #356]	@ (801caa8 <_ZN12ModbusMaster5startEv+0x288>)
 801c942:	4293      	cmp	r3, r2
 801c944:	d06b      	beq.n	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801c946:	687b      	ldr	r3, [r7, #4]
 801c948:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c94c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c950:	681b      	ldr	r3, [r3, #0]
 801c952:	4a56      	ldr	r2, [pc, #344]	@ (801caac <_ZN12ModbusMaster5startEv+0x28c>)
 801c954:	4293      	cmp	r3, r2
 801c956:	d062      	beq.n	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801c958:	687b      	ldr	r3, [r7, #4]
 801c95a:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	4a52      	ldr	r2, [pc, #328]	@ (801cab0 <_ZN12ModbusMaster5startEv+0x290>)
 801c966:	4293      	cmp	r3, r2
 801c968:	d059      	beq.n	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801c96a:	687b      	ldr	r3, [r7, #4]
 801c96c:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c970:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	4a4f      	ldr	r2, [pc, #316]	@ (801cab4 <_ZN12ModbusMaster5startEv+0x294>)
 801c978:	4293      	cmp	r3, r2
 801c97a:	d050      	beq.n	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c986:	681b      	ldr	r3, [r3, #0]
 801c988:	4a4b      	ldr	r2, [pc, #300]	@ (801cab8 <_ZN12ModbusMaster5startEv+0x298>)
 801c98a:	4293      	cmp	r3, r2
 801c98c:	d047      	beq.n	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801c98e:	687b      	ldr	r3, [r7, #4]
 801c990:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c994:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c998:	681b      	ldr	r3, [r3, #0]
 801c99a:	4a48      	ldr	r2, [pc, #288]	@ (801cabc <_ZN12ModbusMaster5startEv+0x29c>)
 801c99c:	4293      	cmp	r3, r2
 801c99e:	d03e      	beq.n	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c9a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c9aa:	681b      	ldr	r3, [r3, #0]
 801c9ac:	4a44      	ldr	r2, [pc, #272]	@ (801cac0 <_ZN12ModbusMaster5startEv+0x2a0>)
 801c9ae:	4293      	cmp	r3, r2
 801c9b0:	d035      	beq.n	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c9b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	4a41      	ldr	r2, [pc, #260]	@ (801cac4 <_ZN12ModbusMaster5startEv+0x2a4>)
 801c9c0:	4293      	cmp	r3, r2
 801c9c2:	d02c      	beq.n	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c9ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c9ce:	681b      	ldr	r3, [r3, #0]
 801c9d0:	4a3d      	ldr	r2, [pc, #244]	@ (801cac8 <_ZN12ModbusMaster5startEv+0x2a8>)
 801c9d2:	4293      	cmp	r3, r2
 801c9d4:	d023      	beq.n	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c9dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c9e0:	681b      	ldr	r3, [r3, #0]
 801c9e2:	4a3a      	ldr	r2, [pc, #232]	@ (801cacc <_ZN12ModbusMaster5startEv+0x2ac>)
 801c9e4:	4293      	cmp	r3, r2
 801c9e6:	d01a      	beq.n	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801c9ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801c9f2:	681b      	ldr	r3, [r3, #0]
 801c9f4:	4a36      	ldr	r2, [pc, #216]	@ (801cad0 <_ZN12ModbusMaster5startEv+0x2b0>)
 801c9f6:	4293      	cmp	r3, r2
 801c9f8:	d011      	beq.n	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801ca00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ca04:	681b      	ldr	r3, [r3, #0]
 801ca06:	4a33      	ldr	r2, [pc, #204]	@ (801cad4 <_ZN12ModbusMaster5startEv+0x2b4>)
 801ca08:	4293      	cmp	r3, r2
 801ca0a:	d008      	beq.n	801ca1e <_ZN12ModbusMaster5startEv+0x1fe>
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801ca12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ca16:	681b      	ldr	r3, [r3, #0]
 801ca18:	4a2f      	ldr	r2, [pc, #188]	@ (801cad8 <_ZN12ModbusMaster5startEv+0x2b8>)
 801ca1a:	4293      	cmp	r3, r2
 801ca1c:	d110      	bne.n	801ca40 <_ZN12ModbusMaster5startEv+0x220>
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801ca24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	681a      	ldr	r2, [r3, #0]
 801ca2c:	687b      	ldr	r3, [r7, #4]
 801ca2e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801ca32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	f022 0208 	bic.w	r2, r2, #8
 801ca3c:	601a      	str	r2, [r3, #0]
 801ca3e:	e00f      	b.n	801ca60 <_ZN12ModbusMaster5startEv+0x240>
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801ca46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ca4a:	681b      	ldr	r3, [r3, #0]
 801ca4c:	681a      	ldr	r2, [r3, #0]
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801ca54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	f022 0204 	bic.w	r2, r2, #4
 801ca5e:	601a      	str	r2, [r3, #0]
	}

	// Reset all statistics
	this->u8lastRec = 0;
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	2200      	movs	r2, #0
 801ca64:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	this->u8BufferSize = 0;
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	2200      	movs	r2, #0
 801ca6c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	this->u16InCnt = 0;
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	2200      	movs	r2, #0
 801ca74:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	this->u16OutCnt = 0;
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	2200      	movs	r2, #0
 801ca7c:	f8a3 220a 	strh.w	r2, [r3, #522]	@ 0x20a
	this->u16errCnt = 0;
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	2200      	movs	r2, #0
 801ca84:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
}
 801ca88:	bf00      	nop
 801ca8a:	3708      	adds	r7, #8
 801ca8c:	46bd      	mov	sp, r7
 801ca8e:	bd80      	pop	{r7, pc}
 801ca90:	0801cf5b 	.word	0x0801cf5b
 801ca94:	0801cf71 	.word	0x0801cf71
 801ca98:	0801d29d 	.word	0x0801d29d
 801ca9c:	40020010 	.word	0x40020010
 801caa0:	40020028 	.word	0x40020028
 801caa4:	40020040 	.word	0x40020040
 801caa8:	40020058 	.word	0x40020058
 801caac:	40020070 	.word	0x40020070
 801cab0:	40020088 	.word	0x40020088
 801cab4:	400200a0 	.word	0x400200a0
 801cab8:	400200b8 	.word	0x400200b8
 801cabc:	40020410 	.word	0x40020410
 801cac0:	40020428 	.word	0x40020428
 801cac4:	40020440 	.word	0x40020440
 801cac8:	40020458 	.word	0x40020458
 801cacc:	40020470 	.word	0x40020470
 801cad0:	40020488 	.word	0x40020488
 801cad4:	400204a0 	.word	0x400204a0
 801cad8:	400204b8 	.word	0x400204b8

0801cadc <_Z16modbusMasterTaskPv>:

/* ================================================================ */
void modbusMasterTask(void *argument) {
 801cadc:	b580      	push	{r7, lr}
 801cade:	b08c      	sub	sp, #48	@ 0x30
 801cae0:	af02      	add	r7, sp, #8
 801cae2:	6078      	str	r0, [r7, #4]
	ModbusMaster *master = (ModbusMaster*) argument;
 801cae4:	687b      	ldr	r3, [r7, #4]
 801cae6:	627b      	str	r3, [r7, #36]	@ 0x24

	// Get the task handle for later notifying this task
	master->task_handle = xTaskGetCurrentTaskHandle();
 801cae8:	f7f5 fd74 	bl	80125d4 <xTaskGetCurrentTaskHandle>
 801caec:	4602      	mov	r2, r0
 801caee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caf0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	uint32_t ulNotificationValue;
	modbus_query_t telegram;

	for (;;) {
		/*Wait indefinitely for a telegram to send */
		osMessageQueueGet(modbus_query_queue, &telegram, 0, portMAX_DELAY);
 801caf4:	4b67      	ldr	r3, [pc, #412]	@ (801cc94 <_Z16modbusMasterTaskPv+0x1b8>)
 801caf6:	6818      	ldr	r0, [r3, #0]
 801caf8:	f107 010c 	add.w	r1, r7, #12
 801cafc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cb00:	2200      	movs	r2, #0
 801cb02:	f7f3 fc97 	bl	8010434 <osMessageQueueGet>

		// This is the case for implementations with only USART support
		master->sendQuery(telegram);
 801cb06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb08:	69bb      	ldr	r3, [r7, #24]
 801cb0a:	9300      	str	r3, [sp, #0]
 801cb0c:	f107 030c 	add.w	r3, r7, #12
 801cb10:	cb0e      	ldmia	r3, {r1, r2, r3}
 801cb12:	f000 fc6b 	bl	801d3ec <_ZN12ModbusMaster9sendQueryE14modbus_query_t>
		/* Block indefinitely until a Modbus Frame arrives or query timeouts*/
		ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 801cb16:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801cb1a:	2001      	movs	r0, #1
 801cb1c:	f7f5 fef8 	bl	8012910 <ulTaskNotifyTake>
 801cb20:	6238      	str	r0, [r7, #32]

		// notify the task the request timeout
		master->lastError = 0;
 801cb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb24:	2200      	movs	r2, #0
 801cb26:	701a      	strb	r2, [r3, #0]
		if (ulNotificationValue) {
 801cb28:	6a3b      	ldr	r3, [r7, #32]
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d018      	beq.n	801cb60 <_Z16modbusMasterTaskPv+0x84>
			master->i8state = COM_IDLE;
 801cb2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb30:	2200      	movs	r2, #0
 801cb32:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
			master->lastError = ERR_TIME_OUT;
 801cb36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb38:	22f8      	movs	r2, #248	@ 0xf8
 801cb3a:	701a      	strb	r2, [r3, #0]
			master->u16errCnt++;
 801cb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb3e:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 801cb42:	3301      	adds	r3, #1
 801cb44:	b29a      	uxth	r2, r3
 801cb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb48:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
			xTaskNotify((TaskHandle_t )telegram.u32CurrentTask,
 801cb4c:	69b8      	ldr	r0, [r7, #24]
 801cb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb50:	f993 3000 	ldrsb.w	r3, [r3]
 801cb54:	4619      	mov	r1, r3
 801cb56:	2300      	movs	r3, #0
 801cb58:	2203      	movs	r2, #3
 801cb5a:	f7f5 ff25 	bl	80129a8 <xTaskGenericNotify>
					master->lastError, eSetValueWithOverwrite);
			continue;
 801cb5e:	e097      	b.n	801cc90 <_Z16modbusMasterTaskPv+0x1b4>
		}
		master->getRxBuffer();
 801cb60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb62:	f000 f9ad 	bl	801cec0 <_ZN12ModbusMaster11getRxBufferEv>

		if (master->u8BufferSize < 6) {
 801cb66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb68:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801cb6c:	2b05      	cmp	r3, #5
 801cb6e:	d818      	bhi.n	801cba2 <_Z16modbusMasterTaskPv+0xc6>

			master->i8state = COM_IDLE;
 801cb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb72:	2200      	movs	r2, #0
 801cb74:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
			master->lastError = ERR_BAD_SIZE;
 801cb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb7a:	22fa      	movs	r2, #250	@ 0xfa
 801cb7c:	701a      	strb	r2, [r3, #0]
			master->u16errCnt++;
 801cb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb80:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 801cb84:	3301      	adds	r3, #1
 801cb86:	b29a      	uxth	r2, r3
 801cb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb8a:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
			xTaskNotify((TaskHandle_t )telegram.u32CurrentTask,
 801cb8e:	69b8      	ldr	r0, [r7, #24]
 801cb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb92:	f993 3000 	ldrsb.w	r3, [r3]
 801cb96:	4619      	mov	r1, r3
 801cb98:	2300      	movs	r3, #0
 801cb9a:	2203      	movs	r2, #3
 801cb9c:	f7f5 ff04 	bl	80129a8 <xTaskGenericNotify>
					master->lastError, eSetValueWithOverwrite);
			continue;
 801cba0:	e076      	b.n	801cc90 <_Z16modbusMasterTaskPv+0x1b4>
		}

		xTimerStop(master->xTimerTimeout, 0); // cancel timeout timer
 801cba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cba4:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 801cba8:	2300      	movs	r3, #0
 801cbaa:	9300      	str	r3, [sp, #0]
 801cbac:	2300      	movs	r3, #0
 801cbae:	2200      	movs	r2, #0
 801cbb0:	2103      	movs	r1, #3
 801cbb2:	f7f6 fa73 	bl	801309c <xTimerGenericCommand>

		// validate message: id, CRC, FCT, exception
		int8_t u8exception = master->validateAnswer();
 801cbb6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cbb8:	f000 f910 	bl	801cddc <_ZN12ModbusMaster14validateAnswerEv>
 801cbbc:	4603      	mov	r3, r0
 801cbbe:	77fb      	strb	r3, [r7, #31]
		if (u8exception != 0) {
 801cbc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d010      	beq.n	801cbea <_Z16modbusMasterTaskPv+0x10e>
			master->i8state = COM_IDLE;
 801cbc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbca:	2200      	movs	r2, #0
 801cbcc:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
			master->lastError = u8exception;
 801cbd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbd2:	7ffa      	ldrb	r2, [r7, #31]
 801cbd4:	701a      	strb	r2, [r3, #0]
			xTaskNotify((TaskHandle_t )telegram.u32CurrentTask,
 801cbd6:	69b8      	ldr	r0, [r7, #24]
 801cbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbda:	f993 3000 	ldrsb.w	r3, [r3]
 801cbde:	4619      	mov	r1, r3
 801cbe0:	2300      	movs	r3, #0
 801cbe2:	2203      	movs	r2, #3
 801cbe4:	f7f5 fee0 	bl	80129a8 <xTaskGenericNotify>
					master->lastError, eSetValueWithOverwrite);
			continue;
 801cbe8:	e052      	b.n	801cc90 <_Z16modbusMasterTaskPv+0x1b4>
		}

		master->lastError = u8exception; // Should be 0
 801cbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbec:	7ffa      	ldrb	r2, [r7, #31]
 801cbee:	701a      	strb	r2, [r3, #0]

		osSemaphoreAcquire(master->ModBusSphrHandle, portMAX_DELAY); //before processing the message get the semaphore
 801cbf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbf2:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 801cbf6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801cbfa:	4618      	mov	r0, r3
 801cbfc:	f7f3 fab0 	bl	8010160 <osSemaphoreAcquire>
		// process answer
		switch (master->u8Buffer[FUNC]) {
 801cc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc02:	789b      	ldrb	r3, [r3, #2]
 801cc04:	3b01      	subs	r3, #1
 801cc06:	2b0f      	cmp	r3, #15
 801cc08:	d82a      	bhi.n	801cc60 <_Z16modbusMasterTaskPv+0x184>
 801cc0a:	a201      	add	r2, pc, #4	@ (adr r2, 801cc10 <_Z16modbusMasterTaskPv+0x134>)
 801cc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cc10:	0801cc51 	.word	0x0801cc51
 801cc14:	0801cc51 	.word	0x0801cc51
 801cc18:	0801cc59 	.word	0x0801cc59
 801cc1c:	0801cc59 	.word	0x0801cc59
 801cc20:	0801cc61 	.word	0x0801cc61
 801cc24:	0801cc61 	.word	0x0801cc61
 801cc28:	0801cc61 	.word	0x0801cc61
 801cc2c:	0801cc61 	.word	0x0801cc61
 801cc30:	0801cc61 	.word	0x0801cc61
 801cc34:	0801cc61 	.word	0x0801cc61
 801cc38:	0801cc61 	.word	0x0801cc61
 801cc3c:	0801cc61 	.word	0x0801cc61
 801cc40:	0801cc61 	.word	0x0801cc61
 801cc44:	0801cc61 	.word	0x0801cc61
 801cc48:	0801cc61 	.word	0x0801cc61
 801cc4c:	0801cc61 	.word	0x0801cc61
		case MB_FC_READ_COILS:
		case MB_FC_READ_DISCRETE_INPUT:
			//call get_FC1 to transfer the incoming message to u16regs buffer
			master->get_FC1();
 801cc50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cc52:	f000 f83f 	bl	801ccd4 <_ZN12ModbusMaster7get_FC1Ev>
			break;
 801cc56:	e004      	b.n	801cc62 <_Z16modbusMasterTaskPv+0x186>
		case MB_FC_READ_INPUT_REGISTER:
		case MB_FC_READ_REGISTERS:
			// call get_FC3 to transfer the incoming message to u16regs buffer
			master->get_FC3();
 801cc58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cc5a:	f000 f891 	bl	801cd80 <_ZN12ModbusMaster7get_FC3Ev>
			break;
 801cc5e:	e000      	b.n	801cc62 <_Z16modbusMasterTaskPv+0x186>
		case MB_FC_WRITE_MULTIPLE_COILS:
		case MB_FC_WRITE_MULTIPLE_REGISTERS:
			// nothing to do
			break;
		default:
			break;
 801cc60:	bf00      	nop
		}
		master->i8state = COM_IDLE;
 801cc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc64:	2200      	movs	r2, #0
 801cc66:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213

		if (master->lastError == 0) // no error the error_OK, we need to use a different value than 0 to detect the timeout
 801cc6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc6c:	f993 3000 	ldrsb.w	r3, [r3]
 801cc70:	2b00      	cmp	r3, #0
 801cc72:	d10c      	bne.n	801cc8e <_Z16modbusMasterTaskPv+0x1b2>
				{
			osSemaphoreRelease(master->ModBusSphrHandle);
 801cc74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc76:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 801cc7a:	4618      	mov	r0, r3
 801cc7c:	f7f3 fac2 	bl	8010204 <osSemaphoreRelease>
			xTaskNotify((TaskHandle_t )telegram.u32CurrentTask, ERR_OK_QUERY,
 801cc80:	69b8      	ldr	r0, [r7, #24]
 801cc82:	2300      	movs	r3, #0
 801cc84:	2203      	movs	r2, #3
 801cc86:	f06f 010a 	mvn.w	r1, #10
 801cc8a:	f7f5 fe8d 	bl	80129a8 <xTaskGenericNotify>
					eSetValueWithOverwrite);
		}
		continue;
 801cc8e:	bf00      	nop
	}
 801cc90:	e730      	b.n	801caf4 <_Z16modbusMasterTaskPv+0x18>
 801cc92:	bf00      	nop
 801cc94:	2401e04c 	.word	0x2401e04c

0801cc98 <_ZN12ModbusMaster5queryE14modbus_query_t>:
}

/* ================================================================ */
void ModbusMaster::query(modbus_query_t telegram) {
 801cc98:	b084      	sub	sp, #16
 801cc9a:	b580      	push	{r7, lr}
 801cc9c:	b082      	sub	sp, #8
 801cc9e:	af00      	add	r7, sp, #0
 801cca0:	6078      	str	r0, [r7, #4]
 801cca2:	f107 0014 	add.w	r0, r7, #20
 801cca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	// Add the telegram to the TX tail of the telegram queue
	telegram.u32CurrentTask = (uint32_t*) osThreadGetId();
 801ccaa:	f7f3 f8ea 	bl	800fe82 <osThreadGetId>
 801ccae:	4603      	mov	r3, r0
 801ccb0:	623b      	str	r3, [r7, #32]
	osMessageQueuePut(modbus_query_queue, &telegram, 0, 0);
 801ccb2:	4b07      	ldr	r3, [pc, #28]	@ (801ccd0 <_ZN12ModbusMaster5queryE14modbus_query_t+0x38>)
 801ccb4:	6818      	ldr	r0, [r3, #0]
 801ccb6:	f107 0114 	add.w	r1, r7, #20
 801ccba:	2300      	movs	r3, #0
 801ccbc:	2200      	movs	r2, #0
 801ccbe:	f7f3 fb59 	bl	8010374 <osMessageQueuePut>
}
 801ccc2:	bf00      	nop
 801ccc4:	3708      	adds	r7, #8
 801ccc6:	46bd      	mov	sp, r7
 801ccc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801cccc:	b004      	add	sp, #16
 801ccce:	4770      	bx	lr
 801ccd0:	2401e04c 	.word	0x2401e04c

0801ccd4 <_ZN12ModbusMaster7get_FC1Ev>:
	telegram.u32CurrentTask = threadId;
	osMessageQueuePut(modbus_query_queue, &telegram, 0, 0);
}

/* ================================================================ */
void ModbusMaster::get_FC1() {
 801ccd4:	b590      	push	{r4, r7, lr}
 801ccd6:	b085      	sub	sp, #20
 801ccd8:	af00      	add	r7, sp, #0
 801ccda:	6078      	str	r0, [r7, #4]
	uint8_t u8byte, i;
	u8byte = 3;
 801ccdc:	2303      	movs	r3, #3
 801ccde:	73bb      	strb	r3, [r7, #14]
	for (i = 0; i < this->u8Buffer[2]; i++) {
 801cce0:	2300      	movs	r3, #0
 801cce2:	73fb      	strb	r3, [r7, #15]
 801cce4:	e042      	b.n	801cd6c <_ZN12ModbusMaster7get_FC1Ev+0x98>

		if (i % 2) {
 801cce6:	7bfb      	ldrb	r3, [r7, #15]
 801cce8:	f003 0301 	and.w	r3, r3, #1
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	d01c      	beq.n	801cd2a <_ZN12ModbusMaster7get_FC1Ev+0x56>
			this->u16regs[i / 2] = word(this->u8Buffer[i + u8byte],
 801ccf0:	7bfa      	ldrb	r2, [r7, #15]
 801ccf2:	7bbb      	ldrb	r3, [r7, #14]
 801ccf4:	4413      	add	r3, r2
 801ccf6:	687a      	ldr	r2, [r7, #4]
 801ccf8:	4413      	add	r3, r2
 801ccfa:	7858      	ldrb	r0, [r3, #1]
					lowByte(this->u16regs[i / 2]));
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801cd02:	7bfb      	ldrb	r3, [r7, #15]
 801cd04:	085b      	lsrs	r3, r3, #1
 801cd06:	b2db      	uxtb	r3, r3
 801cd08:	005b      	lsls	r3, r3, #1
 801cd0a:	4413      	add	r3, r2
 801cd0c:	881b      	ldrh	r3, [r3, #0]
			this->u16regs[i / 2] = word(this->u8Buffer[i + u8byte],
 801cd0e:	b2d9      	uxtb	r1, r3
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801cd16:	7bfb      	ldrb	r3, [r7, #15]
 801cd18:	085b      	lsrs	r3, r3, #1
 801cd1a:	b2db      	uxtb	r3, r3
 801cd1c:	005b      	lsls	r3, r3, #1
 801cd1e:	18d4      	adds	r4, r2, r3
 801cd20:	f000 fd72 	bl	801d808 <_Z4wordhh>
 801cd24:	4603      	mov	r3, r0
 801cd26:	8023      	strh	r3, [r4, #0]
 801cd28:	e01d      	b.n	801cd66 <_ZN12ModbusMaster7get_FC1Ev+0x92>
		} else {

			this->u16regs[i / 2] = word(highByte(this->u16regs[i / 2]),
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801cd30:	7bfb      	ldrb	r3, [r7, #15]
 801cd32:	085b      	lsrs	r3, r3, #1
 801cd34:	b2db      	uxtb	r3, r3
 801cd36:	005b      	lsls	r3, r3, #1
 801cd38:	4413      	add	r3, r2
 801cd3a:	881b      	ldrh	r3, [r3, #0]
 801cd3c:	0a1b      	lsrs	r3, r3, #8
 801cd3e:	b29b      	uxth	r3, r3
 801cd40:	b2d8      	uxtb	r0, r3
					this->u8Buffer[i + u8byte]);
 801cd42:	7bfa      	ldrb	r2, [r7, #15]
 801cd44:	7bbb      	ldrb	r3, [r7, #14]
 801cd46:	4413      	add	r3, r2
			this->u16regs[i / 2] = word(highByte(this->u16regs[i / 2]),
 801cd48:	687a      	ldr	r2, [r7, #4]
 801cd4a:	4413      	add	r3, r2
 801cd4c:	7859      	ldrb	r1, [r3, #1]
 801cd4e:	687b      	ldr	r3, [r7, #4]
 801cd50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801cd54:	7bfb      	ldrb	r3, [r7, #15]
 801cd56:	085b      	lsrs	r3, r3, #1
 801cd58:	b2db      	uxtb	r3, r3
 801cd5a:	005b      	lsls	r3, r3, #1
 801cd5c:	18d4      	adds	r4, r2, r3
 801cd5e:	f000 fd53 	bl	801d808 <_Z4wordhh>
 801cd62:	4603      	mov	r3, r0
 801cd64:	8023      	strh	r3, [r4, #0]
	for (i = 0; i < this->u8Buffer[2]; i++) {
 801cd66:	7bfb      	ldrb	r3, [r7, #15]
 801cd68:	3301      	adds	r3, #1
 801cd6a:	73fb      	strb	r3, [r7, #15]
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	78db      	ldrb	r3, [r3, #3]
 801cd70:	7bfa      	ldrb	r2, [r7, #15]
 801cd72:	429a      	cmp	r2, r3
 801cd74:	d3b7      	bcc.n	801cce6 <_ZN12ModbusMaster7get_FC1Ev+0x12>
		}

	}
}
 801cd76:	bf00      	nop
 801cd78:	bf00      	nop
 801cd7a:	3714      	adds	r7, #20
 801cd7c:	46bd      	mov	sp, r7
 801cd7e:	bd90      	pop	{r4, r7, pc}

0801cd80 <_ZN12ModbusMaster7get_FC3Ev>:

/* ================================================================ */
void ModbusMaster::get_FC3() {
 801cd80:	b590      	push	{r4, r7, lr}
 801cd82:	b085      	sub	sp, #20
 801cd84:	af00      	add	r7, sp, #0
 801cd86:	6078      	str	r0, [r7, #4]
	 *
	 * @ingroup register
	 */

	uint8_t u8byte, i;
	u8byte = 3;
 801cd88:	2303      	movs	r3, #3
 801cd8a:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < this->u8Buffer[2] / 2; i++) {
 801cd8c:	2300      	movs	r3, #0
 801cd8e:	73bb      	strb	r3, [r7, #14]
 801cd90:	e018      	b.n	801cdc4 <_ZN12ModbusMaster7get_FC3Ev+0x44>
		this->u16regs[i] = word(this->u8Buffer[u8byte],
 801cd92:	7bfb      	ldrb	r3, [r7, #15]
 801cd94:	687a      	ldr	r2, [r7, #4]
 801cd96:	4413      	add	r3, r2
 801cd98:	7858      	ldrb	r0, [r3, #1]
				this->u8Buffer[u8byte + 1]);
 801cd9a:	7bfb      	ldrb	r3, [r7, #15]
 801cd9c:	3301      	adds	r3, #1
		this->u16regs[i] = word(this->u8Buffer[u8byte],
 801cd9e:	687a      	ldr	r2, [r7, #4]
 801cda0:	4413      	add	r3, r2
 801cda2:	7859      	ldrb	r1, [r3, #1]
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801cdaa:	7bbb      	ldrb	r3, [r7, #14]
 801cdac:	005b      	lsls	r3, r3, #1
 801cdae:	18d4      	adds	r4, r2, r3
 801cdb0:	f000 fd2a 	bl	801d808 <_Z4wordhh>
 801cdb4:	4603      	mov	r3, r0
 801cdb6:	8023      	strh	r3, [r4, #0]
		u8byte += 2;
 801cdb8:	7bfb      	ldrb	r3, [r7, #15]
 801cdba:	3302      	adds	r3, #2
 801cdbc:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < this->u8Buffer[2] / 2; i++) {
 801cdbe:	7bbb      	ldrb	r3, [r7, #14]
 801cdc0:	3301      	adds	r3, #1
 801cdc2:	73bb      	strb	r3, [r7, #14]
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	78db      	ldrb	r3, [r3, #3]
 801cdc8:	085b      	lsrs	r3, r3, #1
 801cdca:	b2db      	uxtb	r3, r3
 801cdcc:	7bba      	ldrb	r2, [r7, #14]
 801cdce:	429a      	cmp	r2, r3
 801cdd0:	d3df      	bcc.n	801cd92 <_ZN12ModbusMaster7get_FC3Ev+0x12>
//		this->u16regs[i] = this->u8Buffer[u8byte];
//		u8byte += 1;
	}

}
 801cdd2:	bf00      	nop
 801cdd4:	bf00      	nop
 801cdd6:	3714      	adds	r7, #20
 801cdd8:	46bd      	mov	sp, r7
 801cdda:	bd90      	pop	{r4, r7, pc}

0801cddc <_ZN12ModbusMaster14validateAnswerEv>:
 * This method validates master incoming messages
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t ModbusMaster::validateAnswer() {
 801cddc:	b580      	push	{r7, lr}
 801cdde:	b084      	sub	sp, #16
 801cde0:	af00      	add	r7, sp, #0
 801cde2:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc

	uint16_t u16MsgCRC = ((this->u8Buffer[this->u8BufferSize - 2] << 8)
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801cdea:	3b02      	subs	r3, #2
 801cdec:	687a      	ldr	r2, [r7, #4]
 801cdee:	4413      	add	r3, r2
 801cdf0:	785b      	ldrb	r3, [r3, #1]
 801cdf2:	021b      	lsls	r3, r3, #8
			| this->u8Buffer[this->u8BufferSize - 1]); // combine the crc Low & High bytes
 801cdf4:	b21a      	sxth	r2, r3
 801cdf6:	687b      	ldr	r3, [r7, #4]
 801cdf8:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801cdfc:	3b01      	subs	r3, #1
 801cdfe:	6879      	ldr	r1, [r7, #4]
 801ce00:	440b      	add	r3, r1
 801ce02:	785b      	ldrb	r3, [r3, #1]
 801ce04:	b21b      	sxth	r3, r3
 801ce06:	4313      	orrs	r3, r2
 801ce08:	b21b      	sxth	r3, r3
	uint16_t u16MsgCRC = ((this->u8Buffer[this->u8BufferSize - 2] << 8)
 801ce0a:	81bb      	strh	r3, [r7, #12]
	if (calcCRC(this->u8Buffer, this->u8BufferSize - 2) != u16MsgCRC) {
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	1c5a      	adds	r2, r3, #1
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801ce16:	3b02      	subs	r3, #2
 801ce18:	b2db      	uxtb	r3, r3
 801ce1a:	4619      	mov	r1, r3
 801ce1c:	4610      	mov	r0, r2
 801ce1e:	f000 fd06 	bl	801d82e <_Z7calcCRCPhh>
 801ce22:	4603      	mov	r3, r0
 801ce24:	461a      	mov	r2, r3
 801ce26:	89bb      	ldrh	r3, [r7, #12]
 801ce28:	4293      	cmp	r3, r2
 801ce2a:	bf14      	ite	ne
 801ce2c:	2301      	movne	r3, #1
 801ce2e:	2300      	moveq	r3, #0
 801ce30:	b2db      	uxtb	r3, r3
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	d009      	beq.n	801ce4a <_ZN12ModbusMaster14validateAnswerEv+0x6e>
		this->u16errCnt++;
 801ce36:	687b      	ldr	r3, [r7, #4]
 801ce38:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 801ce3c:	3301      	adds	r3, #1
 801ce3e:	b29a      	uxth	r2, r3
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
		return ERR_BAD_CRC;
 801ce46:	23fc      	movs	r3, #252	@ 0xfc
 801ce48:	e034      	b.n	801ceb4 <_ZN12ModbusMaster14validateAnswerEv+0xd8>
	}

	// check exception
	if ((this->u8Buffer[FUNC] & 0x80) != 0) {
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	789b      	ldrb	r3, [r3, #2]
 801ce4e:	b25b      	sxtb	r3, r3
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	da09      	bge.n	801ce68 <_ZN12ModbusMaster14validateAnswerEv+0x8c>
		this->u16errCnt++;
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 801ce5a:	3301      	adds	r3, #1
 801ce5c:	b29a      	uxth	r2, r3
 801ce5e:	687b      	ldr	r3, [r7, #4]
 801ce60:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
		return ERR_EXCEPTION;
 801ce64:	23fb      	movs	r3, #251	@ 0xfb
 801ce66:	e025      	b.n	801ceb4 <_ZN12ModbusMaster14validateAnswerEv+0xd8>
	}

	// check fct code
	bool isSupported = false;
 801ce68:	2300      	movs	r3, #0
 801ce6a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < sizeof(fctsupported); i++) {
 801ce6c:	2300      	movs	r3, #0
 801ce6e:	73bb      	strb	r3, [r7, #14]
 801ce70:	e00c      	b.n	801ce8c <_ZN12ModbusMaster14validateAnswerEv+0xb0>
		if (fctsupported[i] == this->u8Buffer[FUNC]) {
 801ce72:	7bbb      	ldrb	r3, [r7, #14]
 801ce74:	4a11      	ldr	r2, [pc, #68]	@ (801cebc <_ZN12ModbusMaster14validateAnswerEv+0xe0>)
 801ce76:	5cd2      	ldrb	r2, [r2, r3]
 801ce78:	687b      	ldr	r3, [r7, #4]
 801ce7a:	789b      	ldrb	r3, [r3, #2]
 801ce7c:	429a      	cmp	r2, r3
 801ce7e:	d102      	bne.n	801ce86 <_ZN12ModbusMaster14validateAnswerEv+0xaa>
			isSupported = 1;
 801ce80:	2301      	movs	r3, #1
 801ce82:	73fb      	strb	r3, [r7, #15]
			break;
 801ce84:	e005      	b.n	801ce92 <_ZN12ModbusMaster14validateAnswerEv+0xb6>
	for (uint8_t i = 0; i < sizeof(fctsupported); i++) {
 801ce86:	7bbb      	ldrb	r3, [r7, #14]
 801ce88:	3301      	adds	r3, #1
 801ce8a:	73bb      	strb	r3, [r7, #14]
 801ce8c:	7bbb      	ldrb	r3, [r7, #14]
 801ce8e:	2b07      	cmp	r3, #7
 801ce90:	d9ef      	bls.n	801ce72 <_ZN12ModbusMaster14validateAnswerEv+0x96>
		}
	}
	if (!isSupported) {
 801ce92:	7bfb      	ldrb	r3, [r7, #15]
 801ce94:	f083 0301 	eor.w	r3, r3, #1
 801ce98:	b2db      	uxtb	r3, r3
 801ce9a:	2b00      	cmp	r3, #0
 801ce9c:	d009      	beq.n	801ceb2 <_ZN12ModbusMaster14validateAnswerEv+0xd6>
		this->u16errCnt++;
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	f8b3 320c 	ldrh.w	r3, [r3, #524]	@ 0x20c
 801cea4:	3301      	adds	r3, #1
 801cea6:	b29a      	uxth	r2, r3
 801cea8:	687b      	ldr	r3, [r7, #4]
 801ceaa:	f8a3 220c 	strh.w	r2, [r3, #524]	@ 0x20c
		return EXC_FUNC_CODE;
 801ceae:	2301      	movs	r3, #1
 801ceb0:	e000      	b.n	801ceb4 <_ZN12ModbusMaster14validateAnswerEv+0xd8>
	}

	return 0; // OK, no exception code thrown
 801ceb2:	2300      	movs	r3, #0
}
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	3710      	adds	r7, #16
 801ceb8:	46bd      	mov	sp, r7
 801ceba:	bd80      	pop	{r7, pc}
 801cebc:	08023924 	.word	0x08023924

0801cec0 <_ZN12ModbusMaster11getRxBufferEv>:

/* ================================================================ */
int16_t ModbusMaster::getRxBuffer() {
 801cec0:	b580      	push	{r7, lr}
 801cec2:	b084      	sub	sp, #16
 801cec4:	af00      	add	r7, sp, #0
 801cec6:	6078      	str	r0, [r7, #4]

	int16_t i16result;

	if (this->config.hardware == MB_UART_IT) {
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	f893 32b6 	ldrb.w	r3, [r3, #694]	@ 0x2b6
 801cece:	2b01      	cmp	r3, #1
 801ced0:	d105      	bne.n	801cede <_ZN12ModbusMaster11getRxBufferEv+0x1e>
		HAL_UART_AbortReceive_IT(this->config.huart); // disable interrupts to avoid race conditions on serial port
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801ced8:	4618      	mov	r0, r3
 801ceda:	f7ef fcd9 	bl	800c890 <HAL_UART_AbortReceive_IT>
	}

	if (this->xBufferRX.overflow) {
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	f893 32ab 	ldrb.w	r3, [r3, #683]	@ 0x2ab
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d009      	beq.n	801cefc <_ZN12ModbusMaster11getRxBufferEv+0x3c>
		this->xBufferRX.clear();
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	f503 730a 	add.w	r3, r3, #552	@ 0x228
 801ceee:	4618      	mov	r0, r3
 801cef0:	f000 fcee 	bl	801d8d0 <_ZN21core_utils_RingBufferILi128EE5clearEv>
		i16result = ERR_BUFF_OVERFLOW;
 801cef4:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 801cef8:	81fb      	strh	r3, [r7, #14]
 801cefa:	e019      	b.n	801cf30 <_ZN12ModbusMaster11getRxBufferEv+0x70>
	} else {
		this->u8BufferSize = this->xBufferRX.get_all_bytes(this->u8Buffer);
 801cefc:	687b      	ldr	r3, [r7, #4]
 801cefe:	f503 720a 	add.w	r2, r3, #552	@ 0x228
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	3301      	adds	r3, #1
 801cf06:	4619      	mov	r1, r3
 801cf08:	4610      	mov	r0, r2
 801cf0a:	f000 fcfb 	bl	801d904 <_ZN21core_utils_RingBufferILi128EE13get_all_bytesEPh>
 801cf0e:	4603      	mov	r3, r0
 801cf10:	461a      	mov	r2, r3
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
		this->u16InCnt++;
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 801cf1e:	3301      	adds	r3, #1
 801cf20:	b29a      	uxth	r2, r3
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
		i16result = this->u8BufferSize;
 801cf28:	687b      	ldr	r3, [r7, #4]
 801cf2a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801cf2e:	81fb      	strh	r3, [r7, #14]
	}

	if (this->config.hardware == MB_UART_IT) {
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	f893 32b6 	ldrb.w	r3, [r3, #694]	@ 0x2b6
 801cf36:	2b01      	cmp	r3, #1
 801cf38:	d109      	bne.n	801cf4e <_ZN12ModbusMaster11getRxBufferEv+0x8e>
		HAL_UART_Receive_IT(this->config.huart, &this->dataRX, 1);
 801cf3a:	687b      	ldr	r3, [r7, #4]
 801cf3c:	f8d3 02ac 	ldr.w	r0, [r3, #684]	@ 0x2ac
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	f203 2312 	addw	r3, r3, #530	@ 0x212
 801cf46:	2201      	movs	r2, #1
 801cf48:	4619      	mov	r1, r3
 801cf4a:	f7ef fa31 	bl	800c3b0 <HAL_UART_Receive_IT>
	}

	return i16result;
 801cf4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801cf52:	4618      	mov	r0, r3
 801cf54:	3710      	adds	r7, #16
 801cf56:	46bd      	mov	sp, r7
 801cf58:	bd80      	pop	{r7, pc}

0801cf5a <_ZL25uartRxCompleteIT_callbackP20__UART_HandleTypeDef>:

/* ================================================================ */
void uartRxCompleteIT_callback(UART_HandleTypeDef *huart) {
 801cf5a:	b580      	push	{r7, lr}
 801cf5c:	b082      	sub	sp, #8
 801cf5e:	af00      	add	r7, sp, #0
 801cf60:	6078      	str	r0, [r7, #4]
	nop();
 801cf62:	f7f7 fb4b 	bl	80145fc <_Z3nopv>
}
 801cf66:	bf00      	nop
 801cf68:	3708      	adds	r7, #8
 801cf6a:	46bd      	mov	sp, r7
 801cf6c:	bd80      	pop	{r7, pc}
	...

0801cf70 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft>:

/* ================================================================ */
void uartRxCompleteDMA_callback(UART_HandleTypeDef *huart, uint16_t size) {
 801cf70:	b580      	push	{r7, lr}
 801cf72:	b086      	sub	sp, #24
 801cf74:	af02      	add	r7, sp, #8
 801cf76:	6078      	str	r0, [r7, #4]
 801cf78:	460b      	mov	r3, r1
 801cf7a:	807b      	strh	r3, [r7, #2]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801cf7c:	2300      	movs	r3, #0
 801cf7e:	60bb      	str	r3, [r7, #8]

	int i;
	for (i = 0; i < num_handlers; i++) {
 801cf80:	2300      	movs	r3, #0
 801cf82:	60fb      	str	r3, [r7, #12]
 801cf84:	e14c      	b.n	801d220 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2b0>
		if (handlers[i]->config.huart == huart) {
 801cf86:	4aaa      	ldr	r2, [pc, #680]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cf88:	68fb      	ldr	r3, [r7, #12]
 801cf8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cf8e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801cf92:	687a      	ldr	r2, [r7, #4]
 801cf94:	429a      	cmp	r2, r3
 801cf96:	f040 8140 	bne.w	801d21a <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2aa>

			if (handlers[i]->config.hardware == MB_UART_DMA) {
 801cf9a:	4aa5      	ldr	r2, [pc, #660]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cf9c:	68fb      	ldr	r3, [r7, #12]
 801cf9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cfa2:	f893 32b6 	ldrb.w	r3, [r3, #694]	@ 0x2b6
 801cfa6:	2b02      	cmp	r3, #2
 801cfa8:	f040 8166 	bne.w	801d278 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x308>
				if (size) //check if we have received any byte
 801cfac:	887b      	ldrh	r3, [r7, #2]
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	f000 8162 	beq.w	801d278 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x308>
				{
					handlers[i]->xBufferRX.available = size;
 801cfb4:	4a9e      	ldr	r2, [pc, #632]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cfb6:	68fb      	ldr	r3, [r7, #12]
 801cfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cfbc:	887a      	ldrh	r2, [r7, #2]
 801cfbe:	b2d2      	uxtb	r2, r2
 801cfc0:	f883 22aa 	strb.w	r2, [r3, #682]	@ 0x2aa
					handlers[i]->xBufferRX.overflow = false;
 801cfc4:	4a9a      	ldr	r2, [pc, #616]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cfc6:	68fb      	ldr	r3, [r7, #12]
 801cfc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cfcc:	2200      	movs	r2, #0
 801cfce:	f883 22ab 	strb.w	r2, [r3, #683]	@ 0x2ab

					while (HAL_UARTEx_ReceiveToIdle_DMA(
 801cfd2:	e008      	b.n	801cfe6 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x76>
							handlers[i]->config.huart,
							handlers[i]->xBufferRX.buffer, MAX_BUFFER) != HAL_OK) {
						HAL_UART_DMAStop(handlers[i]->config.huart);
 801cfd4:	4a96      	ldr	r2, [pc, #600]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cfd6:	68fb      	ldr	r3, [r7, #12]
 801cfd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cfdc:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801cfe0:	4618      	mov	r0, r3
 801cfe2:	f7ef fab1 	bl	800c548 <HAL_UART_DMAStop>
							handlers[i]->config.huart,
 801cfe6:	4a92      	ldr	r2, [pc, #584]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cfe8:	68fb      	ldr	r3, [r7, #12]
 801cfea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					while (HAL_UARTEx_ReceiveToIdle_DMA(
 801cfee:	f8d3 02ac 	ldr.w	r0, [r3, #684]	@ 0x2ac
							handlers[i]->xBufferRX.buffer, MAX_BUFFER) != HAL_OK) {
 801cff2:	4a8f      	ldr	r2, [pc, #572]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801cff4:	68fb      	ldr	r3, [r7, #12]
 801cff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801cffa:	f503 730a 	add.w	r3, r3, #552	@ 0x228
					while (HAL_UARTEx_ReceiveToIdle_DMA(
 801cffe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801d002:	4619      	mov	r1, r3
 801d004:	f7f2 fd43 	bl	800fa8e <HAL_UARTEx_ReceiveToIdle_DMA>
 801d008:	4603      	mov	r3, r0
							handlers[i]->xBufferRX.buffer, MAX_BUFFER) != HAL_OK) {
 801d00a:	2b00      	cmp	r3, #0
 801d00c:	bf14      	ite	ne
 801d00e:	2301      	movne	r3, #1
 801d010:	2300      	moveq	r3, #0
 801d012:	b2db      	uxtb	r3, r3
 801d014:	2b00      	cmp	r3, #0
 801d016:	d1dd      	bne.n	801cfd4 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x64>

					}
					__HAL_DMA_DISABLE_IT(handlers[i]->config.huart->hdmarx,
 801d018:	4a85      	ldr	r2, [pc, #532]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d01a:	68fb      	ldr	r3, [r7, #12]
 801d01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d020:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d028:	681b      	ldr	r3, [r3, #0]
 801d02a:	4a82      	ldr	r2, [pc, #520]	@ (801d234 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c4>)
 801d02c:	4293      	cmp	r3, r2
 801d02e:	f000 80b8 	beq.w	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d032:	4a7f      	ldr	r2, [pc, #508]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d034:	68fb      	ldr	r3, [r7, #12]
 801d036:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d03a:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d03e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	4a7c      	ldr	r2, [pc, #496]	@ (801d238 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c8>)
 801d046:	4293      	cmp	r3, r2
 801d048:	f000 80ab 	beq.w	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d04c:	4a78      	ldr	r2, [pc, #480]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d04e:	68fb      	ldr	r3, [r7, #12]
 801d050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d054:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d05c:	681b      	ldr	r3, [r3, #0]
 801d05e:	4a77      	ldr	r2, [pc, #476]	@ (801d23c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2cc>)
 801d060:	4293      	cmp	r3, r2
 801d062:	f000 809e 	beq.w	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d066:	4a72      	ldr	r2, [pc, #456]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d068:	68fb      	ldr	r3, [r7, #12]
 801d06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d06e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	4a71      	ldr	r2, [pc, #452]	@ (801d240 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2d0>)
 801d07a:	4293      	cmp	r3, r2
 801d07c:	f000 8091 	beq.w	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d080:	4a6b      	ldr	r2, [pc, #428]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d082:	68fb      	ldr	r3, [r7, #12]
 801d084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d088:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d08c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d090:	681b      	ldr	r3, [r3, #0]
 801d092:	4a6c      	ldr	r2, [pc, #432]	@ (801d244 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2d4>)
 801d094:	4293      	cmp	r3, r2
 801d096:	f000 8084 	beq.w	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d09a:	4a65      	ldr	r2, [pc, #404]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d09c:	68fb      	ldr	r3, [r7, #12]
 801d09e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d0a2:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d0a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d0aa:	681b      	ldr	r3, [r3, #0]
 801d0ac:	4a66      	ldr	r2, [pc, #408]	@ (801d248 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2d8>)
 801d0ae:	4293      	cmp	r3, r2
 801d0b0:	d077      	beq.n	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d0b2:	4a5f      	ldr	r2, [pc, #380]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d0b4:	68fb      	ldr	r3, [r7, #12]
 801d0b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d0ba:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	4a61      	ldr	r2, [pc, #388]	@ (801d24c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2dc>)
 801d0c6:	4293      	cmp	r3, r2
 801d0c8:	d06b      	beq.n	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d0ca:	4a59      	ldr	r2, [pc, #356]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d0cc:	68fb      	ldr	r3, [r7, #12]
 801d0ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d0d2:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d0d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	4a5c      	ldr	r2, [pc, #368]	@ (801d250 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e0>)
 801d0de:	4293      	cmp	r3, r2
 801d0e0:	d05f      	beq.n	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d0e2:	4a53      	ldr	r2, [pc, #332]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d0e4:	68fb      	ldr	r3, [r7, #12]
 801d0e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d0ea:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d0ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d0f2:	681b      	ldr	r3, [r3, #0]
 801d0f4:	4a57      	ldr	r2, [pc, #348]	@ (801d254 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e4>)
 801d0f6:	4293      	cmp	r3, r2
 801d0f8:	d053      	beq.n	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d0fa:	4a4d      	ldr	r2, [pc, #308]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d0fc:	68fb      	ldr	r3, [r7, #12]
 801d0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d102:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d10a:	681b      	ldr	r3, [r3, #0]
 801d10c:	4a52      	ldr	r2, [pc, #328]	@ (801d258 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2e8>)
 801d10e:	4293      	cmp	r3, r2
 801d110:	d047      	beq.n	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d112:	4a47      	ldr	r2, [pc, #284]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d114:	68fb      	ldr	r3, [r7, #12]
 801d116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d11a:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d122:	681b      	ldr	r3, [r3, #0]
 801d124:	4a4d      	ldr	r2, [pc, #308]	@ (801d25c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2ec>)
 801d126:	4293      	cmp	r3, r2
 801d128:	d03b      	beq.n	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d12a:	4a41      	ldr	r2, [pc, #260]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d12c:	68fb      	ldr	r3, [r7, #12]
 801d12e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d132:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	4a48      	ldr	r2, [pc, #288]	@ (801d260 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2f0>)
 801d13e:	4293      	cmp	r3, r2
 801d140:	d02f      	beq.n	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d142:	4a3b      	ldr	r2, [pc, #236]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d144:	68fb      	ldr	r3, [r7, #12]
 801d146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d14a:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d14e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	4a43      	ldr	r2, [pc, #268]	@ (801d264 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2f4>)
 801d156:	4293      	cmp	r3, r2
 801d158:	d023      	beq.n	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d15a:	4a35      	ldr	r2, [pc, #212]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d15c:	68fb      	ldr	r3, [r7, #12]
 801d15e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d162:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d16a:	681b      	ldr	r3, [r3, #0]
 801d16c:	4a3e      	ldr	r2, [pc, #248]	@ (801d268 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2f8>)
 801d16e:	4293      	cmp	r3, r2
 801d170:	d017      	beq.n	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d172:	4a2f      	ldr	r2, [pc, #188]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d174:	68fb      	ldr	r3, [r7, #12]
 801d176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d17a:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d17e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	4a39      	ldr	r2, [pc, #228]	@ (801d26c <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2fc>)
 801d186:	4293      	cmp	r3, r2
 801d188:	d00b      	beq.n	801d1a2 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x232>
 801d18a:	4a29      	ldr	r2, [pc, #164]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d18c:	68fb      	ldr	r3, [r7, #12]
 801d18e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d192:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d19a:	681b      	ldr	r3, [r3, #0]
 801d19c:	4a34      	ldr	r2, [pc, #208]	@ (801d270 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x300>)
 801d19e:	4293      	cmp	r3, r2
 801d1a0:	d116      	bne.n	801d1d0 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x260>
 801d1a2:	4a23      	ldr	r2, [pc, #140]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d1a4:	68fb      	ldr	r3, [r7, #12]
 801d1a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d1aa:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d1ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	681a      	ldr	r2, [r3, #0]
 801d1b6:	491e      	ldr	r1, [pc, #120]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d1b8:	68fb      	ldr	r3, [r7, #12]
 801d1ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801d1be:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d1c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	f022 0208 	bic.w	r2, r2, #8
 801d1cc:	601a      	str	r2, [r3, #0]
 801d1ce:	e015      	b.n	801d1fc <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x28c>
 801d1d0:	4a17      	ldr	r2, [pc, #92]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d1d2:	68fb      	ldr	r3, [r7, #12]
 801d1d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d1d8:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d1dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d1e0:	681b      	ldr	r3, [r3, #0]
 801d1e2:	681a      	ldr	r2, [r3, #0]
 801d1e4:	4912      	ldr	r1, [pc, #72]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801d1ec:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d1f4:	681b      	ldr	r3, [r3, #0]
 801d1f6:	f022 0204 	bic.w	r2, r2, #4
 801d1fa:	601a      	str	r2, [r3, #0]
							DMA_IT_HT); // we don't need half-transfer interrupt

					xTaskNotifyFromISR(handlers[i]->task_handle, 0,
 801d1fc:	4a0c      	ldr	r2, [pc, #48]	@ (801d230 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x2c0>)
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d204:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 801d208:	f107 0308 	add.w	r3, r7, #8
 801d20c:	9300      	str	r3, [sp, #0]
 801d20e:	2300      	movs	r3, #0
 801d210:	2203      	movs	r2, #3
 801d212:	2100      	movs	r1, #0
 801d214:	f7f5 fc8a 	bl	8012b2c <xTaskGenericNotifyFromISR>
							eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
				}
			}
			break;
 801d218:	e02e      	b.n	801d278 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x308>
	for (i = 0; i < num_handlers; i++) {
 801d21a:	68fb      	ldr	r3, [r7, #12]
 801d21c:	3301      	adds	r3, #1
 801d21e:	60fb      	str	r3, [r7, #12]
 801d220:	4b14      	ldr	r3, [pc, #80]	@ (801d274 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x304>)
 801d222:	781b      	ldrb	r3, [r3, #0]
 801d224:	461a      	mov	r2, r3
 801d226:	68fb      	ldr	r3, [r7, #12]
 801d228:	4293      	cmp	r3, r2
 801d22a:	f6ff aeac 	blt.w	801cf86 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x16>
 801d22e:	e024      	b.n	801d27a <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x30a>
 801d230:	2401e040 	.word	0x2401e040
 801d234:	40020010 	.word	0x40020010
 801d238:	40020028 	.word	0x40020028
 801d23c:	40020040 	.word	0x40020040
 801d240:	40020058 	.word	0x40020058
 801d244:	40020070 	.word	0x40020070
 801d248:	40020088 	.word	0x40020088
 801d24c:	400200a0 	.word	0x400200a0
 801d250:	400200b8 	.word	0x400200b8
 801d254:	40020410 	.word	0x40020410
 801d258:	40020428 	.word	0x40020428
 801d25c:	40020440 	.word	0x40020440
 801d260:	40020458 	.word	0x40020458
 801d264:	40020470 	.word	0x40020470
 801d268:	40020488 	.word	0x40020488
 801d26c:	400204a0 	.word	0x400204a0
 801d270:	400204b8 	.word	0x400204b8
 801d274:	2401e048 	.word	0x2401e048
			break;
 801d278:	bf00      	nop
		}
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d27a:	68bb      	ldr	r3, [r7, #8]
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	d007      	beq.n	801d290 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x320>
 801d280:	4b05      	ldr	r3, [pc, #20]	@ (801d298 <_Z26uartRxCompleteDMA_callbackP20__UART_HandleTypeDeft+0x328>)
 801d282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d286:	601a      	str	r2, [r3, #0]
 801d288:	f3bf 8f4f 	dsb	sy
 801d28c:	f3bf 8f6f 	isb	sy
}
 801d290:	bf00      	nop
 801d292:	3710      	adds	r7, #16
 801d294:	46bd      	mov	sp, r7
 801d296:	bd80      	pop	{r7, pc}
 801d298:	e000ed04 	.word	0xe000ed04

0801d29c <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef>:

/* ================================================================ */
void uartTxCompleteDMA_callback(UART_HandleTypeDef *huart) {
 801d29c:	b580      	push	{r7, lr}
 801d29e:	b086      	sub	sp, #24
 801d2a0:	af02      	add	r7, sp, #8
 801d2a2:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 801d2a4:	2300      	movs	r3, #0
 801d2a6:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < num_handlers; i++) {
 801d2a8:	2300      	movs	r3, #0
 801d2aa:	60fb      	str	r3, [r7, #12]
 801d2ac:	e01a      	b.n	801d2e4 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x48>
		if (handlers[i]->config.huart == huart) {
 801d2ae:	4a18      	ldr	r2, [pc, #96]	@ (801d310 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x74>)
 801d2b0:	68fb      	ldr	r3, [r7, #12]
 801d2b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d2b6:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d2ba:	687a      	ldr	r2, [r7, #4]
 801d2bc:	429a      	cmp	r2, r3
 801d2be:	d10e      	bne.n	801d2de <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x42>
			// notify the end of TX
//			vTaskNotifyGiveFromISR(handlers[i]->task_handle, &xHigherPriorityTaskWoken);
			xTaskNotifyFromISR(handlers[i]->task_handle, 0, eNoAction,
 801d2c0:	4a13      	ldr	r2, [pc, #76]	@ (801d310 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x74>)
 801d2c2:	68fb      	ldr	r3, [r7, #12]
 801d2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d2c8:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 801d2cc:	f107 0308 	add.w	r3, r7, #8
 801d2d0:	9300      	str	r3, [sp, #0]
 801d2d2:	2300      	movs	r3, #0
 801d2d4:	2200      	movs	r2, #0
 801d2d6:	2100      	movs	r1, #0
 801d2d8:	f7f5 fc28 	bl	8012b2c <xTaskGenericNotifyFromISR>
					&xHigherPriorityTaskWoken);
			break;
 801d2dc:	e008      	b.n	801d2f0 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x54>
	for (i = 0; i < num_handlers; i++) {
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	3301      	adds	r3, #1
 801d2e2:	60fb      	str	r3, [r7, #12]
 801d2e4:	4b0b      	ldr	r3, [pc, #44]	@ (801d314 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x78>)
 801d2e6:	781b      	ldrb	r3, [r3, #0]
 801d2e8:	461a      	mov	r2, r3
 801d2ea:	68fb      	ldr	r3, [r7, #12]
 801d2ec:	4293      	cmp	r3, r2
 801d2ee:	dbde      	blt.n	801d2ae <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x12>
		}

	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 801d2f0:	68bb      	ldr	r3, [r7, #8]
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	d007      	beq.n	801d306 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x6a>
 801d2f6:	4b08      	ldr	r3, [pc, #32]	@ (801d318 <_Z26uartTxCompleteDMA_callbackP20__UART_HandleTypeDef+0x7c>)
 801d2f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801d2fc:	601a      	str	r2, [r3, #0]
 801d2fe:	f3bf 8f4f 	dsb	sy
 801d302:	f3bf 8f6f 	isb	sy
}
 801d306:	bf00      	nop
 801d308:	3710      	adds	r7, #16
 801d30a:	46bd      	mov	sp, r7
 801d30c:	bd80      	pop	{r7, pc}
 801d30e:	bf00      	nop
 801d310:	2401e040 	.word	0x2401e040
 801d314:	2401e048 	.word	0x2401e048
 801d318:	e000ed04 	.word	0xe000ed04

0801d31c <_ZL17vTimerCallbackT35PP15tmrTimerControl>:

/* ================================================================ */
void vTimerCallbackT35(TimerHandle_t *pxTimer) {
 801d31c:	b580      	push	{r7, lr}
 801d31e:	b086      	sub	sp, #24
 801d320:	af02      	add	r7, sp, #8
 801d322:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for (i = 0; i < num_handlers; i++) {
 801d324:	2300      	movs	r3, #0
 801d326:	60fb      	str	r3, [r7, #12]
 801d328:	e023      	b.n	801d372 <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x56>

		if ((TimerHandle_t*) handlers[i]->xTimerT35 == pxTimer) {
 801d32a:	4a17      	ldr	r2, [pc, #92]	@ (801d388 <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x6c>)
 801d32c:	68fb      	ldr	r3, [r7, #12]
 801d32e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d332:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 801d336:	687a      	ldr	r2, [r7, #4]
 801d338:	429a      	cmp	r2, r3
 801d33a:	d117      	bne.n	801d36c <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x50>
			xTimerStop(handlers[i]->xTimerTimeout, 0);
 801d33c:	4a12      	ldr	r2, [pc, #72]	@ (801d388 <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x6c>)
 801d33e:	68fb      	ldr	r3, [r7, #12]
 801d340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d344:	f8d3 0220 	ldr.w	r0, [r3, #544]	@ 0x220
 801d348:	2300      	movs	r3, #0
 801d34a:	9300      	str	r3, [sp, #0]
 801d34c:	2300      	movs	r3, #0
 801d34e:	2200      	movs	r2, #0
 801d350:	2103      	movs	r1, #3
 801d352:	f7f5 fea3 	bl	801309c <xTimerGenericCommand>
			xTaskNotify(handlers[i]->task_handle, 0, eSetValueWithOverwrite); // TODO this conversion to TaskHandle_t might not work and I have to save the real TaskHandle_t
 801d356:	4a0c      	ldr	r2, [pc, #48]	@ (801d388 <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x6c>)
 801d358:	68fb      	ldr	r3, [r7, #12]
 801d35a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d35e:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 801d362:	2300      	movs	r3, #0
 801d364:	2203      	movs	r2, #3
 801d366:	2100      	movs	r1, #0
 801d368:	f7f5 fb1e 	bl	80129a8 <xTaskGenericNotify>
	for (i = 0; i < num_handlers; i++) {
 801d36c:	68fb      	ldr	r3, [r7, #12]
 801d36e:	3301      	adds	r3, #1
 801d370:	60fb      	str	r3, [r7, #12]
 801d372:	4b06      	ldr	r3, [pc, #24]	@ (801d38c <_ZL17vTimerCallbackT35PP15tmrTimerControl+0x70>)
 801d374:	781b      	ldrb	r3, [r3, #0]
 801d376:	461a      	mov	r2, r3
 801d378:	68fb      	ldr	r3, [r7, #12]
 801d37a:	4293      	cmp	r3, r2
 801d37c:	dbd5      	blt.n	801d32a <_ZL17vTimerCallbackT35PP15tmrTimerControl+0xe>
		}

	}
}
 801d37e:	bf00      	nop
 801d380:	bf00      	nop
 801d382:	3710      	adds	r7, #16
 801d384:	46bd      	mov	sp, r7
 801d386:	bd80      	pop	{r7, pc}
 801d388:	2401e040 	.word	0x2401e040
 801d38c:	2401e048 	.word	0x2401e048

0801d390 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl>:

/* ================================================================ */
void vTimerCallbackTimeout(TimerHandle_t *pxTimer) {
 801d390:	b580      	push	{r7, lr}
 801d392:	b084      	sub	sp, #16
 801d394:	af00      	add	r7, sp, #0
 801d396:	6078      	str	r0, [r7, #4]
	//Notify that a stream has just arrived
	int i;
	//TimerHandle_t aux;
	for (i = 0; i < num_handlers; i++) {
 801d398:	2300      	movs	r3, #0
 801d39a:	60fb      	str	r3, [r7, #12]
 801d39c:	e017      	b.n	801d3ce <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x3e>

		if ((TimerHandle_t*) handlers[i]->xTimerTimeout == pxTimer) {
 801d39e:	4a11      	ldr	r2, [pc, #68]	@ (801d3e4 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x54>)
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d3a6:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 801d3aa:	687a      	ldr	r2, [r7, #4]
 801d3ac:	429a      	cmp	r2, r3
 801d3ae:	d10b      	bne.n	801d3c8 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x38>
			xTaskNotify((TaskHandle_t ) handlers[i]->task_handle, ERR_TIME_OUT,
 801d3b0:	4a0c      	ldr	r2, [pc, #48]	@ (801d3e4 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x54>)
 801d3b2:	68fb      	ldr	r3, [r7, #12]
 801d3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d3b8:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 801d3bc:	2300      	movs	r3, #0
 801d3be:	2203      	movs	r2, #3
 801d3c0:	f06f 0107 	mvn.w	r1, #7
 801d3c4:	f7f5 faf0 	bl	80129a8 <xTaskGenericNotify>
	for (i = 0; i < num_handlers; i++) {
 801d3c8:	68fb      	ldr	r3, [r7, #12]
 801d3ca:	3301      	adds	r3, #1
 801d3cc:	60fb      	str	r3, [r7, #12]
 801d3ce:	4b06      	ldr	r3, [pc, #24]	@ (801d3e8 <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0x58>)
 801d3d0:	781b      	ldrb	r3, [r3, #0]
 801d3d2:	461a      	mov	r2, r3
 801d3d4:	68fb      	ldr	r3, [r7, #12]
 801d3d6:	4293      	cmp	r3, r2
 801d3d8:	dbe1      	blt.n	801d39e <_ZL21vTimerCallbackTimeoutPP15tmrTimerControl+0xe>
					eSetValueWithOverwrite); // TODO this conversion to TaskHandle_t might not work and I have to save the real TaskHandle_t
		}

	}

}
 801d3da:	bf00      	nop
 801d3dc:	bf00      	nop
 801d3de:	3710      	adds	r7, #16
 801d3e0:	46bd      	mov	sp, r7
 801d3e2:	bd80      	pop	{r7, pc}
 801d3e4:	2401e040 	.word	0x2401e040
 801d3e8:	2401e048 	.word	0x2401e048

0801d3ec <_ZN12ModbusMaster9sendQueryE14modbus_query_t>:

/* ================================================================ */
int8_t ModbusMaster::sendQuery(modbus_query_t telegram) {
 801d3ec:	b084      	sub	sp, #16
 801d3ee:	b580      	push	{r7, lr}
 801d3f0:	b084      	sub	sp, #16
 801d3f2:	af00      	add	r7, sp, #0
 801d3f4:	6078      	str	r0, [r7, #4]
 801d3f6:	f107 001c 	add.w	r0, r7, #28
 801d3fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t u8regsno, u8bytesno;
	int8_t error = 0;
 801d3fe:	2300      	movs	r3, #0
 801d400:	73bb      	strb	r3, [r7, #14]
	osSemaphoreAcquire(this->ModBusSphrHandle, portMAX_DELAY);
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 801d408:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801d40c:	4618      	mov	r0, r3
 801d40e:	f7f2 fea7 	bl	8010160 <osSemaphoreAcquire>

	if (this->i8state != COM_IDLE)
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	f993 3213 	ldrsb.w	r3, [r3, #531]	@ 0x213
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d001      	beq.n	801d420 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x34>
		error = ERR_POLLING;
 801d41c:	23fe      	movs	r3, #254	@ 0xfe
 801d41e:	73bb      	strb	r3, [r7, #14]
	if ((telegram.u8id == 0) || (telegram.u8id > 247))
 801d420:	7f3b      	ldrb	r3, [r7, #28]
 801d422:	2b00      	cmp	r3, #0
 801d424:	d002      	beq.n	801d42c <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x40>
 801d426:	7f3b      	ldrb	r3, [r7, #28]
 801d428:	2bf7      	cmp	r3, #247	@ 0xf7
 801d42a:	d901      	bls.n	801d430 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x44>
		error = ERR_BAD_SLAVE_ID;
 801d42c:	23f7      	movs	r3, #247	@ 0xf7
 801d42e:	73bb      	strb	r3, [r7, #14]

	if (error) {
 801d430:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d434:	2b00      	cmp	r3, #0
 801d436:	d00b      	beq.n	801d450 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x64>
		this->lastError = error;
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	7bba      	ldrb	r2, [r7, #14]
 801d43c:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(this->ModBusSphrHandle);
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 801d444:	4618      	mov	r0, r3
 801d446:	f7f2 fedd 	bl	8010204 <osSemaphoreRelease>
		return error;
 801d44a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d44e:	e125      	b.n	801d69c <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x2b0>
	}

	this->u16regs = telegram.u16reg;
 801d450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

	// telegram header
	this->u8Buffer[ID] = telegram.u8id;
 801d458:	7f3a      	ldrb	r2, [r7, #28]
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	705a      	strb	r2, [r3, #1]
	this->u8Buffer[FUNC] = telegram.u8fct;
 801d45e:	7f7a      	ldrb	r2, [r7, #29]
 801d460:	687b      	ldr	r3, [r7, #4]
 801d462:	709a      	strb	r2, [r3, #2]
	this->u8Buffer[ADD_HI] = highByte(telegram.u16RegAdd);
 801d464:	8bfb      	ldrh	r3, [r7, #30]
 801d466:	0a1b      	lsrs	r3, r3, #8
 801d468:	b29b      	uxth	r3, r3
 801d46a:	b2da      	uxtb	r2, r3
 801d46c:	687b      	ldr	r3, [r7, #4]
 801d46e:	70da      	strb	r2, [r3, #3]
	this->u8Buffer[ADD_LO] = lowByte(telegram.u16RegAdd);
 801d470:	8bfb      	ldrh	r3, [r7, #30]
 801d472:	b2da      	uxtb	r2, r3
 801d474:	687b      	ldr	r3, [r7, #4]
 801d476:	711a      	strb	r2, [r3, #4]
//
	switch (telegram.u8fct) {
 801d478:	7f7b      	ldrb	r3, [r7, #29]
 801d47a:	3b01      	subs	r3, #1
 801d47c:	2b0f      	cmp	r3, #15
 801d47e:	f200 80fc 	bhi.w	801d67a <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x28e>
 801d482:	a201      	add	r2, pc, #4	@ (adr r2, 801d488 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x9c>)
 801d484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d488:	0801d4c9 	.word	0x0801d4c9
 801d48c:	0801d4c9 	.word	0x0801d4c9
 801d490:	0801d4c9 	.word	0x0801d4c9
 801d494:	0801d4c9 	.word	0x0801d4c9
 801d498:	0801d4e7 	.word	0x0801d4e7
 801d49c:	0801d509 	.word	0x0801d509
 801d4a0:	0801d67b 	.word	0x0801d67b
 801d4a4:	0801d67b 	.word	0x0801d67b
 801d4a8:	0801d67b 	.word	0x0801d67b
 801d4ac:	0801d67b 	.word	0x0801d67b
 801d4b0:	0801d67b 	.word	0x0801d67b
 801d4b4:	0801d67b 	.word	0x0801d67b
 801d4b8:	0801d67b 	.word	0x0801d67b
 801d4bc:	0801d67b 	.word	0x0801d67b
 801d4c0:	0801d52b 	.word	0x0801d52b
 801d4c4:	0801d5e5 	.word	0x0801d5e5
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
		this->u8Buffer[NB_HI] = highByte(telegram.u16CoilsNo);
 801d4c8:	8c3b      	ldrh	r3, [r7, #32]
 801d4ca:	0a1b      	lsrs	r3, r3, #8
 801d4cc:	b29b      	uxth	r3, r3
 801d4ce:	b2da      	uxtb	r2, r3
 801d4d0:	687b      	ldr	r3, [r7, #4]
 801d4d2:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = lowByte(telegram.u16CoilsNo);
 801d4d4:	8c3b      	ldrh	r3, [r7, #32]
 801d4d6:	b2da      	uxtb	r2, r3
 801d4d8:	687b      	ldr	r3, [r7, #4]
 801d4da:	719a      	strb	r2, [r3, #6]
		this->u8BufferSize = 6;
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	2206      	movs	r2, #6
 801d4e0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
		break;
 801d4e4:	e0c9      	b.n	801d67a <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x28e>
	case MB_FC_WRITE_COIL:
		this->u8Buffer[NB_HI] = ((telegram.u16reg[0] > 0) ? 0xff : 0);
 801d4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4e8:	881b      	ldrh	r3, [r3, #0]
 801d4ea:	2b00      	cmp	r3, #0
 801d4ec:	d001      	beq.n	801d4f2 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x106>
 801d4ee:	22ff      	movs	r2, #255	@ 0xff
 801d4f0:	e000      	b.n	801d4f4 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x108>
 801d4f2:	2200      	movs	r2, #0
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = 0;
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	2200      	movs	r2, #0
 801d4fc:	719a      	strb	r2, [r3, #6]
		this->u8BufferSize = 6;
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	2206      	movs	r2, #6
 801d502:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
		break;
 801d506:	e0b8      	b.n	801d67a <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x28e>
	case MB_FC_WRITE_REGISTER:
		this->u8Buffer[NB_HI] = highByte(telegram.u16reg[0]);
 801d508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d50a:	881b      	ldrh	r3, [r3, #0]
 801d50c:	0a1b      	lsrs	r3, r3, #8
 801d50e:	b29b      	uxth	r3, r3
 801d510:	b2da      	uxtb	r2, r3
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = lowByte(telegram.u16reg[0]);
 801d516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d518:	881b      	ldrh	r3, [r3, #0]
 801d51a:	b2da      	uxtb	r2, r3
 801d51c:	687b      	ldr	r3, [r7, #4]
 801d51e:	719a      	strb	r2, [r3, #6]
		this->u8BufferSize = 6;
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	2206      	movs	r2, #6
 801d524:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
		break;
 801d528:	e0a7      	b.n	801d67a <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x28e>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
		u8regsno = telegram.u16CoilsNo / 16;
 801d52a:	8c3b      	ldrh	r3, [r7, #32]
 801d52c:	091b      	lsrs	r3, r3, #4
 801d52e:	b29b      	uxth	r3, r3
 801d530:	727b      	strb	r3, [r7, #9]
		u8bytesno = u8regsno * 2;
 801d532:	7a7b      	ldrb	r3, [r7, #9]
 801d534:	005b      	lsls	r3, r3, #1
 801d536:	73fb      	strb	r3, [r7, #15]
		if ((telegram.u16CoilsNo % 16) != 0) {
 801d538:	8c3b      	ldrh	r3, [r7, #32]
 801d53a:	f003 030f 	and.w	r3, r3, #15
 801d53e:	2b00      	cmp	r3, #0
 801d540:	d005      	beq.n	801d54e <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x162>
			u8bytesno++;
 801d542:	7bfb      	ldrb	r3, [r7, #15]
 801d544:	3301      	adds	r3, #1
 801d546:	73fb      	strb	r3, [r7, #15]
			u8regsno++;
 801d548:	7a7b      	ldrb	r3, [r7, #9]
 801d54a:	3301      	adds	r3, #1
 801d54c:	727b      	strb	r3, [r7, #9]
		}

		this->u8Buffer[NB_HI] = highByte(telegram.u16CoilsNo);
 801d54e:	8c3b      	ldrh	r3, [r7, #32]
 801d550:	0a1b      	lsrs	r3, r3, #8
 801d552:	b29b      	uxth	r3, r3
 801d554:	b2da      	uxtb	r2, r3
 801d556:	687b      	ldr	r3, [r7, #4]
 801d558:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = lowByte(telegram.u16CoilsNo);
 801d55a:	8c3b      	ldrh	r3, [r7, #32]
 801d55c:	b2da      	uxtb	r2, r3
 801d55e:	687b      	ldr	r3, [r7, #4]
 801d560:	719a      	strb	r2, [r3, #6]
		this->u8Buffer[BYTE_CNT] = u8bytesno;
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	7bfa      	ldrb	r2, [r7, #15]
 801d566:	71da      	strb	r2, [r3, #7]
		this->u8BufferSize = 7;
 801d568:	687b      	ldr	r3, [r7, #4]
 801d56a:	2207      	movs	r2, #7
 801d56c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201

		for (uint16_t i = 0; i < u8bytesno; i++) {
 801d570:	2300      	movs	r3, #0
 801d572:	81bb      	strh	r3, [r7, #12]
 801d574:	e030      	b.n	801d5d8 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x1ec>
			if (i % 2) {
 801d576:	89bb      	ldrh	r3, [r7, #12]
 801d578:	f003 0301 	and.w	r3, r3, #1
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d00f      	beq.n	801d5a0 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x1b4>
				this->u8Buffer[this->u8BufferSize] = lowByte(
 801d580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d582:	89bb      	ldrh	r3, [r7, #12]
 801d584:	085b      	lsrs	r3, r3, #1
 801d586:	b29b      	uxth	r3, r3
 801d588:	005b      	lsls	r3, r3, #1
 801d58a:	4413      	add	r3, r2
 801d58c:	881a      	ldrh	r2, [r3, #0]
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801d594:	4619      	mov	r1, r3
 801d596:	b2d2      	uxtb	r2, r2
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	440b      	add	r3, r1
 801d59c:	705a      	strb	r2, [r3, #1]
 801d59e:	e010      	b.n	801d5c2 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x1d6>
						telegram.u16reg[i / 2]);
			} else {
				this->u8Buffer[this->u8BufferSize] = highByte(
 801d5a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d5a2:	89bb      	ldrh	r3, [r7, #12]
 801d5a4:	085b      	lsrs	r3, r3, #1
 801d5a6:	b29b      	uxth	r3, r3
 801d5a8:	005b      	lsls	r3, r3, #1
 801d5aa:	4413      	add	r3, r2
 801d5ac:	881b      	ldrh	r3, [r3, #0]
 801d5ae:	0a1b      	lsrs	r3, r3, #8
 801d5b0:	b29a      	uxth	r2, r3
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801d5b8:	4619      	mov	r1, r3
 801d5ba:	b2d2      	uxtb	r2, r2
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	440b      	add	r3, r1
 801d5c0:	705a      	strb	r2, [r3, #1]
						telegram.u16reg[i / 2]);

			}
			this->u8BufferSize++;
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801d5c8:	3301      	adds	r3, #1
 801d5ca:	b2da      	uxtb	r2, r3
 801d5cc:	687b      	ldr	r3, [r7, #4]
 801d5ce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
		for (uint16_t i = 0; i < u8bytesno; i++) {
 801d5d2:	89bb      	ldrh	r3, [r7, #12]
 801d5d4:	3301      	adds	r3, #1
 801d5d6:	81bb      	strh	r3, [r7, #12]
 801d5d8:	7bfb      	ldrb	r3, [r7, #15]
 801d5da:	b29b      	uxth	r3, r3
 801d5dc:	89ba      	ldrh	r2, [r7, #12]
 801d5de:	429a      	cmp	r2, r3
 801d5e0:	d3c9      	bcc.n	801d576 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x18a>
		}
		break;
 801d5e2:	e04a      	b.n	801d67a <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x28e>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
		this->u8Buffer[NB_HI] = highByte(telegram.u16CoilsNo);
 801d5e4:	8c3b      	ldrh	r3, [r7, #32]
 801d5e6:	0a1b      	lsrs	r3, r3, #8
 801d5e8:	b29b      	uxth	r3, r3
 801d5ea:	b2da      	uxtb	r2, r3
 801d5ec:	687b      	ldr	r3, [r7, #4]
 801d5ee:	715a      	strb	r2, [r3, #5]
		this->u8Buffer[NB_LO] = lowByte(telegram.u16CoilsNo);
 801d5f0:	8c3b      	ldrh	r3, [r7, #32]
 801d5f2:	b2da      	uxtb	r2, r3
 801d5f4:	687b      	ldr	r3, [r7, #4]
 801d5f6:	719a      	strb	r2, [r3, #6]
		this->u8Buffer[BYTE_CNT] = (uint8_t) (telegram.u16CoilsNo * 2);
 801d5f8:	8c3b      	ldrh	r3, [r7, #32]
 801d5fa:	b2db      	uxtb	r3, r3
 801d5fc:	005b      	lsls	r3, r3, #1
 801d5fe:	b2da      	uxtb	r2, r3
 801d600:	687b      	ldr	r3, [r7, #4]
 801d602:	71da      	strb	r2, [r3, #7]
		this->u8BufferSize = 7;
 801d604:	687b      	ldr	r3, [r7, #4]
 801d606:	2207      	movs	r2, #7
 801d608:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201

		for (uint16_t i = 0; i < telegram.u16CoilsNo; i++) {
 801d60c:	2300      	movs	r3, #0
 801d60e:	817b      	strh	r3, [r7, #10]
 801d610:	e02e      	b.n	801d670 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x284>

			this->u8Buffer[this->u8BufferSize] = highByte(telegram.u16reg[i]);
 801d612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d614:	897b      	ldrh	r3, [r7, #10]
 801d616:	005b      	lsls	r3, r3, #1
 801d618:	4413      	add	r3, r2
 801d61a:	881b      	ldrh	r3, [r3, #0]
 801d61c:	0a1b      	lsrs	r3, r3, #8
 801d61e:	b29a      	uxth	r2, r3
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801d626:	4619      	mov	r1, r3
 801d628:	b2d2      	uxtb	r2, r2
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	440b      	add	r3, r1
 801d62e:	705a      	strb	r2, [r3, #1]
			this->u8BufferSize++;
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801d636:	3301      	adds	r3, #1
 801d638:	b2da      	uxtb	r2, r3
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
			this->u8Buffer[this->u8BufferSize] = lowByte(telegram.u16reg[i]);
 801d640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d642:	897b      	ldrh	r3, [r7, #10]
 801d644:	005b      	lsls	r3, r3, #1
 801d646:	4413      	add	r3, r2
 801d648:	881a      	ldrh	r2, [r3, #0]
 801d64a:	687b      	ldr	r3, [r7, #4]
 801d64c:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801d650:	4619      	mov	r1, r3
 801d652:	b2d2      	uxtb	r2, r2
 801d654:	687b      	ldr	r3, [r7, #4]
 801d656:	440b      	add	r3, r1
 801d658:	705a      	strb	r2, [r3, #1]
			this->u8BufferSize++;
 801d65a:	687b      	ldr	r3, [r7, #4]
 801d65c:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801d660:	3301      	adds	r3, #1
 801d662:	b2da      	uxtb	r2, r3
 801d664:	687b      	ldr	r3, [r7, #4]
 801d666:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
		for (uint16_t i = 0; i < telegram.u16CoilsNo; i++) {
 801d66a:	897b      	ldrh	r3, [r7, #10]
 801d66c:	3301      	adds	r3, #1
 801d66e:	817b      	strh	r3, [r7, #10]
 801d670:	8c3b      	ldrh	r3, [r7, #32]
 801d672:	897a      	ldrh	r2, [r7, #10]
 801d674:	429a      	cmp	r2, r3
 801d676:	d3cc      	bcc.n	801d612 <_ZN12ModbusMaster9sendQueryE14modbus_query_t+0x226>
		}
		break;
 801d678:	bf00      	nop
	}

	this->sendTxBuffer();
 801d67a:	6878      	ldr	r0, [r7, #4]
 801d67c:	f000 f816 	bl	801d6ac <_ZN12ModbusMaster12sendTxBufferEv>

	osSemaphoreRelease(this->ModBusSphrHandle);
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 801d686:	4618      	mov	r0, r3
 801d688:	f7f2 fdbc 	bl	8010204 <osSemaphoreRelease>
	this->i8state = COM_WAITING;
 801d68c:	687b      	ldr	r3, [r7, #4]
 801d68e:	2201      	movs	r2, #1
 801d690:	f883 2213 	strb.w	r2, [r3, #531]	@ 0x213
	this->lastError = 0;
 801d694:	687b      	ldr	r3, [r7, #4]
 801d696:	2200      	movs	r2, #0
 801d698:	701a      	strb	r2, [r3, #0]
	return 0;
 801d69a:	2300      	movs	r3, #0
}
 801d69c:	4618      	mov	r0, r3
 801d69e:	3710      	adds	r7, #16
 801d6a0:	46bd      	mov	sp, r7
 801d6a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801d6a6:	b004      	add	sp, #16
 801d6a8:	4770      	bx	lr
 801d6aa:	bf00      	nop

0801d6ac <_ZN12ModbusMaster12sendTxBufferEv>:

/* ================================================================ */
void ModbusMaster::sendTxBuffer() {
 801d6ac:	b590      	push	{r4, r7, lr}
 801d6ae:	b087      	sub	sp, #28
 801d6b0:	af02      	add	r7, sp, #8
 801d6b2:	6078      	str	r0, [r7, #4]
	uint16_t u16crc = calcCRC(this->u8Buffer, this->u8BufferSize);
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	1c5a      	adds	r2, r3, #1
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801d6be:	4619      	mov	r1, r3
 801d6c0:	4610      	mov	r0, r2
 801d6c2:	f000 f8b4 	bl	801d82e <_Z7calcCRCPhh>
 801d6c6:	4603      	mov	r3, r0
 801d6c8:	81fb      	strh	r3, [r7, #14]
	this->u8Buffer[this->u8BufferSize] = u16crc >> 8;
 801d6ca:	89fb      	ldrh	r3, [r7, #14]
 801d6cc:	0a1b      	lsrs	r3, r3, #8
 801d6ce:	b29a      	uxth	r2, r3
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801d6d6:	4619      	mov	r1, r3
 801d6d8:	b2d2      	uxtb	r2, r2
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	440b      	add	r3, r1
 801d6de:	705a      	strb	r2, [r3, #1]
	this->u8BufferSize++;
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801d6e6:	3301      	adds	r3, #1
 801d6e8:	b2da      	uxtb	r2, r3
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	this->u8Buffer[this->u8BufferSize] = u16crc & 0x00ff;
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801d6f6:	4619      	mov	r1, r3
 801d6f8:	89fb      	ldrh	r3, [r7, #14]
 801d6fa:	b2da      	uxtb	r2, r3
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	440b      	add	r3, r1
 801d700:	705a      	strb	r2, [r3, #1]
	this->u8BufferSize++;
 801d702:	687b      	ldr	r3, [r7, #4]
 801d704:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801d708:	3301      	adds	r3, #1
 801d70a:	b2da      	uxtb	r2, r3
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201

	if (this->config.EN_GPIOx != NULL) {
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d00f      	beq.n	801d73c <_ZN12ModbusMaster12sendTxBufferEv+0x90>
		//enable transmitter, disable receiver to avoid echo on RS485 transceivers
		HAL_HalfDuplex_EnableTransmitter(this->config.huart);
 801d71c:	687b      	ldr	r3, [r7, #4]
 801d71e:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d722:	4618      	mov	r0, r3
 801d724:	f7ef fdac 	bl	800d280 <HAL_HalfDuplex_EnableTransmitter>
		HAL_GPIO_WritePin(this->config.EN_GPIOx, this->config.EN_GPIO_Pin,
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	f8d3 02b0 	ldr.w	r0, [r3, #688]	@ 0x2b0
 801d72e:	687b      	ldr	r3, [r7, #4]
 801d730:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 801d734:	2201      	movs	r2, #1
 801d736:	4619      	mov	r1, r3
 801d738:	f7e8 fdca 	bl	80062d0 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
	}

	if (this->config.hardware == MB_UART_IT) {
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	f893 32b6 	ldrb.w	r3, [r3, #694]	@ 0x2b6
 801d742:	2b01      	cmp	r3, #1
 801d744:	d10b      	bne.n	801d75e <_ZN12ModbusMaster12sendTxBufferEv+0xb2>
		HAL_UART_Transmit_IT(this->config.huart, this->u8Buffer,
 801d746:	687b      	ldr	r3, [r7, #4]
 801d748:	f8d3 02ac 	ldr.w	r0, [r3, #684]	@ 0x2ac
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	1c59      	adds	r1, r3, #1
				this->u8BufferSize);
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
		HAL_UART_Transmit_IT(this->config.huart, this->u8Buffer,
 801d756:	461a      	mov	r2, r3
 801d758:	f7ee fd96 	bl	800c288 <HAL_UART_Transmit_IT>
 801d75c:	e00f      	b.n	801d77e <_ZN12ModbusMaster12sendTxBufferEv+0xd2>
	} else if (this->config.hardware == MB_UART_DMA) {
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	f893 32b6 	ldrb.w	r3, [r3, #694]	@ 0x2b6
 801d764:	2b02      	cmp	r3, #2
 801d766:	d10a      	bne.n	801d77e <_ZN12ModbusMaster12sendTxBufferEv+0xd2>
		HAL_UART_Transmit_DMA(this->config.huart, this->u8Buffer,
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	f8d3 02ac 	ldr.w	r0, [r3, #684]	@ 0x2ac
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	1c59      	adds	r1, r3, #1
				this->u8BufferSize);
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
		HAL_UART_Transmit_DMA(this->config.huart, this->u8Buffer,
 801d778:	461a      	mov	r2, r3
 801d77a:	f7ee fe65 	bl	800c448 <HAL_UART_Transmit_DMA>
	}

	ulTaskNotifyTake(pdTRUE, 20); //wait notification from TXE interrupt
 801d77e:	2114      	movs	r1, #20
 801d780:	2001      	movs	r0, #1
 801d782:	f7f5 f8c5 	bl	8012910 <ulTaskNotifyTake>
	 * If you are porting the library to a different MCU check the
	 * USART datasheet and add the corresponding family in the following
	 * preprocessor conditions
	 */
#if defined(STM32H7)  || defined(STM32F3) || defined(STM32L4)
	while ((this->config.huart->Instance->ISR & USART_ISR_TC) == 0) {
 801d786:	bf00      	nop
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	69db      	ldr	r3, [r3, #28]
 801d792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d796:	2b00      	cmp	r3, #0
 801d798:	bf0c      	ite	eq
 801d79a:	2301      	moveq	r3, #1
 801d79c:	2300      	movne	r3, #0
 801d79e:	b2db      	uxtb	r3, r3
 801d7a0:	2b00      	cmp	r3, #0
 801d7a2:	d1f1      	bne.n	801d788 <_ZN12ModbusMaster12sendTxBufferEv+0xdc>
  while((this->config.huart->Instance->SR & USART_SR_TC) ==0 ) {

  }
#endif

	if (this->config.EN_GPIOx != NULL) {
 801d7a4:	687b      	ldr	r3, [r7, #4]
 801d7a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d00f      	beq.n	801d7ce <_ZN12ModbusMaster12sendTxBufferEv+0x122>

		//return RS485 transceiver to receive mode
		HAL_GPIO_WritePin(this->config.EN_GPIOx, this->config.EN_GPIO_Pin,
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	f8d3 02b0 	ldr.w	r0, [r3, #688]	@ 0x2b0
 801d7b4:	687b      	ldr	r3, [r7, #4]
 801d7b6:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 801d7ba:	2200      	movs	r2, #0
 801d7bc:	4619      	mov	r1, r3
 801d7be:	f7e8 fd87 	bl	80062d0 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		//enable receiver, disable transmitter
		HAL_HalfDuplex_EnableReceiver(this->config.huart);
 801d7c2:	687b      	ldr	r3, [r7, #4]
 801d7c4:	f8d3 32ac 	ldr.w	r3, [r3, #684]	@ 0x2ac
 801d7c8:	4618      	mov	r0, r3
 801d7ca:	f7ef fdad 	bl	800d328 <HAL_HalfDuplex_EnableReceiver>

	}

	// set timeout for master query

	xTimerReset(this->xTimerTimeout, 0);
 801d7ce:	687b      	ldr	r3, [r7, #4]
 801d7d0:	f8d3 4220 	ldr.w	r4, [r3, #544]	@ 0x220
 801d7d4:	f7f4 fba4 	bl	8011f20 <xTaskGetTickCount>
 801d7d8:	4602      	mov	r2, r0
 801d7da:	2300      	movs	r3, #0
 801d7dc:	9300      	str	r3, [sp, #0]
 801d7de:	2300      	movs	r3, #0
 801d7e0:	2102      	movs	r1, #2
 801d7e2:	4620      	mov	r0, r4
 801d7e4:	f7f5 fc5a 	bl	801309c <xTimerGenericCommand>

	this->u8BufferSize = 0;
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	2200      	movs	r2, #0
 801d7ec:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	// increase message counter
	this->u16OutCnt++;
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	f8b3 320a 	ldrh.w	r3, [r3, #522]	@ 0x20a
 801d7f6:	3301      	adds	r3, #1
 801d7f8:	b29a      	uxth	r2, r3
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	f8a3 220a 	strh.w	r2, [r3, #522]	@ 0x20a
}
 801d800:	bf00      	nop
 801d802:	3714      	adds	r7, #20
 801d804:	46bd      	mov	sp, r7
 801d806:	bd90      	pop	{r4, r7, pc}

0801d808 <_Z4wordhh>:
 *
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L) {
 801d808:	b480      	push	{r7}
 801d80a:	b085      	sub	sp, #20
 801d80c:	af00      	add	r7, sp, #0
 801d80e:	4603      	mov	r3, r0
 801d810:	460a      	mov	r2, r1
 801d812:	71fb      	strb	r3, [r7, #7]
 801d814:	4613      	mov	r3, r2
 801d816:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 801d818:	79bb      	ldrb	r3, [r7, #6]
 801d81a:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 801d81c:	79fb      	ldrb	r3, [r7, #7]
 801d81e:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 801d820:	89bb      	ldrh	r3, [r7, #12]
}
 801d822:	4618      	mov	r0, r3
 801d824:	3714      	adds	r7, #20
 801d826:	46bd      	mov	sp, r7
 801d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d82c:	4770      	bx	lr

0801d82e <_Z7calcCRCPhh>:
 *
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length) {
 801d82e:	b480      	push	{r7}
 801d830:	b087      	sub	sp, #28
 801d832:	af00      	add	r7, sp, #0
 801d834:	6078      	str	r0, [r7, #4]
 801d836:	460b      	mov	r3, r1
 801d838:	70fb      	strb	r3, [r7, #3]
	unsigned int temp, temp2, flag;
	temp = 0xFFFF;
 801d83a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801d83e:	617b      	str	r3, [r7, #20]
	for (unsigned char i = 0; i < u8length; i++) {
 801d840:	2300      	movs	r3, #0
 801d842:	74fb      	strb	r3, [r7, #19]
 801d844:	e022      	b.n	801d88c <_Z7calcCRCPhh+0x5e>
		temp = temp ^ Buffer[i];
 801d846:	7cfb      	ldrb	r3, [r7, #19]
 801d848:	687a      	ldr	r2, [r7, #4]
 801d84a:	4413      	add	r3, r2
 801d84c:	781b      	ldrb	r3, [r3, #0]
 801d84e:	461a      	mov	r2, r3
 801d850:	697b      	ldr	r3, [r7, #20]
 801d852:	4053      	eors	r3, r2
 801d854:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 801d856:	2301      	movs	r3, #1
 801d858:	74bb      	strb	r3, [r7, #18]
 801d85a:	e011      	b.n	801d880 <_Z7calcCRCPhh+0x52>
			flag = temp & 0x0001;
 801d85c:	697b      	ldr	r3, [r7, #20]
 801d85e:	f003 0301 	and.w	r3, r3, #1
 801d862:	60bb      	str	r3, [r7, #8]
			temp >>= 1;
 801d864:	697b      	ldr	r3, [r7, #20]
 801d866:	085b      	lsrs	r3, r3, #1
 801d868:	617b      	str	r3, [r7, #20]
			if (flag)
 801d86a:	68bb      	ldr	r3, [r7, #8]
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	d004      	beq.n	801d87a <_Z7calcCRCPhh+0x4c>
				temp ^= 0xA001;
 801d870:	697a      	ldr	r2, [r7, #20]
 801d872:	f24a 0301 	movw	r3, #40961	@ 0xa001
 801d876:	4053      	eors	r3, r2
 801d878:	617b      	str	r3, [r7, #20]
		for (unsigned char j = 1; j <= 8; j++) {
 801d87a:	7cbb      	ldrb	r3, [r7, #18]
 801d87c:	3301      	adds	r3, #1
 801d87e:	74bb      	strb	r3, [r7, #18]
 801d880:	7cbb      	ldrb	r3, [r7, #18]
 801d882:	2b08      	cmp	r3, #8
 801d884:	d9ea      	bls.n	801d85c <_Z7calcCRCPhh+0x2e>
	for (unsigned char i = 0; i < u8length; i++) {
 801d886:	7cfb      	ldrb	r3, [r7, #19]
 801d888:	3301      	adds	r3, #1
 801d88a:	74fb      	strb	r3, [r7, #19]
 801d88c:	7cfa      	ldrb	r2, [r7, #19]
 801d88e:	78fb      	ldrb	r3, [r7, #3]
 801d890:	429a      	cmp	r2, r3
 801d892:	d3d8      	bcc.n	801d846 <_Z7calcCRCPhh+0x18>
		}
	}
	// Reverse byte order.
	temp2 = temp >> 8;
 801d894:	697b      	ldr	r3, [r7, #20]
 801d896:	0a1b      	lsrs	r3, r3, #8
 801d898:	60fb      	str	r3, [r7, #12]
	temp = (temp << 8) | temp2;
 801d89a:	697b      	ldr	r3, [r7, #20]
 801d89c:	021b      	lsls	r3, r3, #8
 801d89e:	68fa      	ldr	r2, [r7, #12]
 801d8a0:	4313      	orrs	r3, r2
 801d8a2:	617b      	str	r3, [r7, #20]
	temp &= 0xFFFF;
 801d8a4:	697b      	ldr	r3, [r7, #20]
 801d8a6:	b29b      	uxth	r3, r3
 801d8a8:	617b      	str	r3, [r7, #20]
	// the returned value is already swapped
	// crcLo byte is first & crcHi byte is last
	return temp;
 801d8aa:	697b      	ldr	r3, [r7, #20]
 801d8ac:	b29b      	uxth	r3, r3

}
 801d8ae:	4618      	mov	r0, r3
 801d8b0:	371c      	adds	r7, #28
 801d8b2:	46bd      	mov	sp, r7
 801d8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8b8:	4770      	bx	lr

0801d8ba <_ZN21core_utils_RingBufferILi128EEC1Ev>:

template<int size>
class core_utils_RingBuffer {
public:

	core_utils_RingBuffer() {
 801d8ba:	b480      	push	{r7}
 801d8bc:	b083      	sub	sp, #12
 801d8be:	af00      	add	r7, sp, #0
 801d8c0:	6078      	str	r0, [r7, #4]

	}
 801d8c2:	687b      	ldr	r3, [r7, #4]
 801d8c4:	4618      	mov	r0, r3
 801d8c6:	370c      	adds	r7, #12
 801d8c8:	46bd      	mov	sp, r7
 801d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8ce:	4770      	bx	lr

0801d8d0 <_ZN21core_utils_RingBufferILi128EE5clearEv>:

	void clear() {
 801d8d0:	b480      	push	{r7}
 801d8d2:	b083      	sub	sp, #12
 801d8d4:	af00      	add	r7, sp, #0
 801d8d6:	6078      	str	r0, [r7, #4]
		this->start = 0;
 801d8d8:	687b      	ldr	r3, [r7, #4]
 801d8da:	2200      	movs	r2, #0
 801d8dc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		this->end = 0;
 801d8e0:	687b      	ldr	r3, [r7, #4]
 801d8e2:	2200      	movs	r2, #0
 801d8e4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
		this->available = 0;
 801d8e8:	687b      	ldr	r3, [r7, #4]
 801d8ea:	2200      	movs	r2, #0
 801d8ec:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
		this->overflow = false;
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	2200      	movs	r2, #0
 801d8f4:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	}
 801d8f8:	bf00      	nop
 801d8fa:	370c      	adds	r7, #12
 801d8fc:	46bd      	mov	sp, r7
 801d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d902:	4770      	bx	lr

0801d904 <_ZN21core_utils_RingBufferILi128EE13get_all_bytesEPh>:
		this->clear();

		return uCounter;
	}

	uint8_t get_all_bytes(uint8_t *buffer) {
 801d904:	b580      	push	{r7, lr}
 801d906:	b082      	sub	sp, #8
 801d908:	af00      	add	r7, sp, #0
 801d90a:	6078      	str	r0, [r7, #4]
 801d90c:	6039      	str	r1, [r7, #0]
		return this->get_n_bytes(buffer, this->available);
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 801d914:	461a      	mov	r2, r3
 801d916:	6839      	ldr	r1, [r7, #0]
 801d918:	6878      	ldr	r0, [r7, #4]
 801d91a:	f000 f805 	bl	801d928 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh>
 801d91e:	4603      	mov	r3, r0
	}
 801d920:	4618      	mov	r0, r3
 801d922:	3708      	adds	r7, #8
 801d924:	46bd      	mov	sp, r7
 801d926:	bd80      	pop	{r7, pc}

0801d928 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh>:
	uint8_t get_n_bytes(uint8_t *buffer, uint8_t number) {
 801d928:	b580      	push	{r7, lr}
 801d92a:	b086      	sub	sp, #24
 801d92c:	af00      	add	r7, sp, #0
 801d92e:	60f8      	str	r0, [r7, #12]
 801d930:	60b9      	str	r1, [r7, #8]
 801d932:	4613      	mov	r3, r2
 801d934:	71fb      	strb	r3, [r7, #7]
		if (this->available == 0 || number == 0)
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 801d93c:	2b00      	cmp	r3, #0
 801d93e:	d002      	beq.n	801d946 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x1e>
 801d940:	79fb      	ldrb	r3, [r7, #7]
 801d942:	2b00      	cmp	r3, #0
 801d944:	d101      	bne.n	801d94a <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x22>
			return 0;
 801d946:	2300      	movs	r3, #0
 801d948:	e03e      	b.n	801d9c8 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0xa0>
		if (number > size)
 801d94a:	79fb      	ldrb	r3, [r7, #7]
 801d94c:	2b80      	cmp	r3, #128	@ 0x80
 801d94e:	d901      	bls.n	801d954 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x2c>
			return 0;
 801d950:	2300      	movs	r3, #0
 801d952:	e039      	b.n	801d9c8 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0xa0>
		for (uCounter = 0; uCounter < number && uCounter < this->available;
 801d954:	2300      	movs	r3, #0
 801d956:	75fb      	strb	r3, [r7, #23]
 801d958:	e01b      	b.n	801d992 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x6a>
			buffer[uCounter] = this->buffer[this->start];
 801d95a:	68fb      	ldr	r3, [r7, #12]
 801d95c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801d960:	4619      	mov	r1, r3
 801d962:	7dfb      	ldrb	r3, [r7, #23]
 801d964:	68ba      	ldr	r2, [r7, #8]
 801d966:	4413      	add	r3, r2
 801d968:	68fa      	ldr	r2, [r7, #12]
 801d96a:	5c52      	ldrb	r2, [r2, r1]
 801d96c:	701a      	strb	r2, [r3, #0]
			this->start = (this->start + 1) % size;
 801d96e:	68fb      	ldr	r3, [r7, #12]
 801d970:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801d974:	3301      	adds	r3, #1
 801d976:	425a      	negs	r2, r3
 801d978:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d97c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801d980:	bf58      	it	pl
 801d982:	4253      	negpl	r3, r2
 801d984:	b2da      	uxtb	r2, r3
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
		for (uCounter = 0; uCounter < number && uCounter < this->available;
 801d98c:	7dfb      	ldrb	r3, [r7, #23]
 801d98e:	3301      	adds	r3, #1
 801d990:	75fb      	strb	r3, [r7, #23]
 801d992:	7dfa      	ldrb	r2, [r7, #23]
 801d994:	79fb      	ldrb	r3, [r7, #7]
 801d996:	429a      	cmp	r2, r3
 801d998:	d205      	bcs.n	801d9a6 <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x7e>
 801d99a:	68fb      	ldr	r3, [r7, #12]
 801d99c:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 801d9a0:	7dfa      	ldrb	r2, [r7, #23]
 801d9a2:	429a      	cmp	r2, r3
 801d9a4:	d3d9      	bcc.n	801d95a <_ZN21core_utils_RingBufferILi128EE11get_n_bytesEPhh+0x32>
		this->available = this->available - uCounter;
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 801d9ac:	7dfb      	ldrb	r3, [r7, #23]
 801d9ae:	1ad3      	subs	r3, r2, r3
 801d9b0:	b2da      	uxtb	r2, r3
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
		this->overflow = false;
 801d9b8:	68fb      	ldr	r3, [r7, #12]
 801d9ba:	2200      	movs	r2, #0
 801d9bc:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
		this->clear();
 801d9c0:	68f8      	ldr	r0, [r7, #12]
 801d9c2:	f7ff ff85 	bl	801d8d0 <_ZN21core_utils_RingBufferILi128EE5clearEv>
		return uCounter;
 801d9c6:	7dfb      	ldrb	r3, [r7, #23]
	}
 801d9c8:	4618      	mov	r0, r3
 801d9ca:	3718      	adds	r7, #24
 801d9cc:	46bd      	mov	sp, r7
 801d9ce:	bd80      	pop	{r7, pc}

0801d9d0 <_ZN23core_comm_SerialMessage6copyToEPS_>:
 *      Author: Dustin Lehmann
 */

#include "core_comm_SerialProtocol.h"

void core_comm_SerialMessage::copyTo(core_comm_SerialMessage *msg) {
 801d9d0:	b480      	push	{r7}
 801d9d2:	b085      	sub	sp, #20
 801d9d4:	af00      	add	r7, sp, #0
 801d9d6:	6078      	str	r0, [r7, #4]
 801d9d8:	6039      	str	r1, [r7, #0]
	msg->address_1 = this->address_1;
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	785a      	ldrb	r2, [r3, #1]
 801d9de:	683b      	ldr	r3, [r7, #0]
 801d9e0:	705a      	strb	r2, [r3, #1]
	msg->address_2 = this->address_2;
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	789a      	ldrb	r2, [r3, #2]
 801d9e6:	683b      	ldr	r3, [r7, #0]
 801d9e8:	709a      	strb	r2, [r3, #2]
	msg->address_3 = this->address_3;
 801d9ea:	687b      	ldr	r3, [r7, #4]
 801d9ec:	78da      	ldrb	r2, [r3, #3]
 801d9ee:	683b      	ldr	r3, [r7, #0]
 801d9f0:	70da      	strb	r2, [r3, #3]
	msg->cmd = this->cmd;
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	781a      	ldrb	r2, [r3, #0]
 801d9f6:	683b      	ldr	r3, [r7, #0]
 801d9f8:	701a      	strb	r2, [r3, #0]
	msg->len = this->len;
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	899a      	ldrh	r2, [r3, #12]
 801d9fe:	683b      	ldr	r3, [r7, #0]
 801da00:	819a      	strh	r2, [r3, #12]

	for (int i = 0; i < len; i++) {
 801da02:	2300      	movs	r3, #0
 801da04:	60fb      	str	r3, [r7, #12]
 801da06:	e00c      	b.n	801da22 <_ZN23core_comm_SerialMessage6copyToEPS_+0x52>
		msg->data_ptr[i] = this->data_ptr[i];
 801da08:	687b      	ldr	r3, [r7, #4]
 801da0a:	689a      	ldr	r2, [r3, #8]
 801da0c:	68fb      	ldr	r3, [r7, #12]
 801da0e:	441a      	add	r2, r3
 801da10:	683b      	ldr	r3, [r7, #0]
 801da12:	6899      	ldr	r1, [r3, #8]
 801da14:	68fb      	ldr	r3, [r7, #12]
 801da16:	440b      	add	r3, r1
 801da18:	7812      	ldrb	r2, [r2, #0]
 801da1a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 801da1c:	68fb      	ldr	r3, [r7, #12]
 801da1e:	3301      	adds	r3, #1
 801da20:	60fb      	str	r3, [r7, #12]
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	899b      	ldrh	r3, [r3, #12]
 801da26:	461a      	mov	r2, r3
 801da28:	68fb      	ldr	r3, [r7, #12]
 801da2a:	4293      	cmp	r3, r2
 801da2c:	dbec      	blt.n	801da08 <_ZN23core_comm_SerialMessage6copyToEPS_+0x38>
	}
}
 801da2e:	bf00      	nop
 801da30:	bf00      	nop
 801da32:	3714      	adds	r7, #20
 801da34:	46bd      	mov	sp, r7
 801da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da3a:	4770      	bx	lr

0801da3c <_ZN23core_comm_SerialMessage6encodeEPh>:

uint8_t core_comm_SerialMessage::encode(uint8_t *buffer) {
 801da3c:	b480      	push	{r7}
 801da3e:	b085      	sub	sp, #20
 801da40:	af00      	add	r7, sp, #0
 801da42:	6078      	str	r0, [r7, #4]
 801da44:	6039      	str	r1, [r7, #0]
	buffer[0] = CORE_SERIAL_MESSAGE_HEADER;
 801da46:	683b      	ldr	r3, [r7, #0]
 801da48:	2255      	movs	r2, #85	@ 0x55
 801da4a:	701a      	strb	r2, [r3, #0]
	buffer[1] = this->cmd;
 801da4c:	683b      	ldr	r3, [r7, #0]
 801da4e:	3301      	adds	r3, #1
 801da50:	687a      	ldr	r2, [r7, #4]
 801da52:	7812      	ldrb	r2, [r2, #0]
 801da54:	701a      	strb	r2, [r3, #0]
	buffer[2] = this->address_1;
 801da56:	683b      	ldr	r3, [r7, #0]
 801da58:	3302      	adds	r3, #2
 801da5a:	687a      	ldr	r2, [r7, #4]
 801da5c:	7852      	ldrb	r2, [r2, #1]
 801da5e:	701a      	strb	r2, [r3, #0]
	buffer[3] = this->address_2;
 801da60:	683b      	ldr	r3, [r7, #0]
 801da62:	3303      	adds	r3, #3
 801da64:	687a      	ldr	r2, [r7, #4]
 801da66:	7892      	ldrb	r2, [r2, #2]
 801da68:	701a      	strb	r2, [r3, #0]
	buffer[4] = this->address_3;
 801da6a:	683b      	ldr	r3, [r7, #0]
 801da6c:	3304      	adds	r3, #4
 801da6e:	687a      	ldr	r2, [r7, #4]
 801da70:	78d2      	ldrb	r2, [r2, #3]
 801da72:	701a      	strb	r2, [r3, #0]
	buffer[5] = this->flag;
 801da74:	683b      	ldr	r3, [r7, #0]
 801da76:	3305      	adds	r3, #5
 801da78:	687a      	ldr	r2, [r7, #4]
 801da7a:	7912      	ldrb	r2, [r2, #4]
 801da7c:	701a      	strb	r2, [r3, #0]
	buffer[6] = this->len >> 8;
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	899b      	ldrh	r3, [r3, #12]
 801da82:	0a1b      	lsrs	r3, r3, #8
 801da84:	b29a      	uxth	r2, r3
 801da86:	683b      	ldr	r3, [r7, #0]
 801da88:	3306      	adds	r3, #6
 801da8a:	b2d2      	uxtb	r2, r2
 801da8c:	701a      	strb	r2, [r3, #0]
	buffer[7] = this->len & 0xFF;
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	899a      	ldrh	r2, [r3, #12]
 801da92:	683b      	ldr	r3, [r7, #0]
 801da94:	3307      	adds	r3, #7
 801da96:	b2d2      	uxtb	r2, r2
 801da98:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < this->len; i++) {
 801da9a:	2300      	movs	r3, #0
 801da9c:	73fb      	strb	r3, [r7, #15]
 801da9e:	e00d      	b.n	801dabc <_ZN23core_comm_SerialMessage6encodeEPh+0x80>
		buffer[8 + i] = this->data_ptr[i];
 801daa0:	687b      	ldr	r3, [r7, #4]
 801daa2:	689a      	ldr	r2, [r3, #8]
 801daa4:	7bfb      	ldrb	r3, [r7, #15]
 801daa6:	441a      	add	r2, r3
 801daa8:	7bfb      	ldrb	r3, [r7, #15]
 801daaa:	3308      	adds	r3, #8
 801daac:	4619      	mov	r1, r3
 801daae:	683b      	ldr	r3, [r7, #0]
 801dab0:	440b      	add	r3, r1
 801dab2:	7812      	ldrb	r2, [r2, #0]
 801dab4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < this->len; i++) {
 801dab6:	7bfb      	ldrb	r3, [r7, #15]
 801dab8:	3301      	adds	r3, #1
 801daba:	73fb      	strb	r3, [r7, #15]
 801dabc:	7bfb      	ldrb	r3, [r7, #15]
 801dabe:	687a      	ldr	r2, [r7, #4]
 801dac0:	8992      	ldrh	r2, [r2, #12]
 801dac2:	4293      	cmp	r3, r2
 801dac4:	dbec      	blt.n	801daa0 <_ZN23core_comm_SerialMessage6encodeEPh+0x64>
	}
	buffer[8 + this->len] = 0; // CRC8
 801dac6:	687b      	ldr	r3, [r7, #4]
 801dac8:	899b      	ldrh	r3, [r3, #12]
 801daca:	3308      	adds	r3, #8
 801dacc:	461a      	mov	r2, r3
 801dace:	683b      	ldr	r3, [r7, #0]
 801dad0:	4413      	add	r3, r2
 801dad2:	2200      	movs	r2, #0
 801dad4:	701a      	strb	r2, [r3, #0]
	return CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD + this->len;
 801dad6:	687b      	ldr	r3, [r7, #4]
 801dad8:	899b      	ldrh	r3, [r3, #12]
 801dada:	b2db      	uxtb	r3, r3
 801dadc:	3309      	adds	r3, #9
 801dade:	b2db      	uxtb	r3, r3
//	CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD + this->len;
}
 801dae0:	4618      	mov	r0, r3
 801dae2:	3714      	adds	r7, #20
 801dae4:	46bd      	mov	sp, r7
 801dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801daea:	4770      	bx	lr

0801daec <_ZN23core_comm_SerialMessage5checkEPht>:
	}
	buffer->data_ptr[8 + this->len] = 0; // CRC8
	buffer->len = this->len;
}

uint8_t core_comm_SerialMessage::check(uint8_t *buffer, uint16_t len) {
 801daec:	b580      	push	{r7, lr}
 801daee:	b086      	sub	sp, #24
 801daf0:	af00      	add	r7, sp, #0
 801daf2:	60f8      	str	r0, [r7, #12]
 801daf4:	60b9      	str	r1, [r7, #8]
 801daf6:	4613      	mov	r3, r2
 801daf8:	80fb      	strh	r3, [r7, #6]

	if (len < CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD) {
 801dafa:	88fb      	ldrh	r3, [r7, #6]
 801dafc:	2b08      	cmp	r3, #8
 801dafe:	d801      	bhi.n	801db04 <_ZN23core_comm_SerialMessage5checkEPht+0x18>
		return CORE_ERROR;
 801db00:	2300      	movs	r3, #0
 801db02:	e019      	b.n	801db38 <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
	}

	/* Check for the header */
	if (!(buffer[0] == CORE_SERIAL_MESSAGE_HEADER)) {
 801db04:	68bb      	ldr	r3, [r7, #8]
 801db06:	781b      	ldrb	r3, [r3, #0]
 801db08:	2b55      	cmp	r3, #85	@ 0x55
 801db0a:	d001      	beq.n	801db10 <_ZN23core_comm_SerialMessage5checkEPht+0x24>
		return CORE_ERROR;
 801db0c:	2300      	movs	r3, #0
 801db0e:	e013      	b.n	801db38 <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
//		return CORE_ERROR;
//	}

	/* Extract the data length */
	// Check if the data length matches with the length of the message
	uint16_t data_len = uint8_to_uint16(buffer[6], buffer[7]);
 801db10:	68bb      	ldr	r3, [r7, #8]
 801db12:	3306      	adds	r3, #6
 801db14:	781a      	ldrb	r2, [r3, #0]
 801db16:	68bb      	ldr	r3, [r7, #8]
 801db18:	3307      	adds	r3, #7
 801db1a:	781b      	ldrb	r3, [r3, #0]
 801db1c:	4619      	mov	r1, r3
 801db1e:	4610      	mov	r0, r2
 801db20:	f002 f954 	bl	801fdcc <_Z15uint8_to_uint16hh>
 801db24:	4603      	mov	r3, r0
 801db26:	82fb      	strh	r3, [r7, #22]
	if ((len - data_len) == CORE_SERIAL_MESSAGE_PROTOCOL_OVERHEAD) {
 801db28:	88fa      	ldrh	r2, [r7, #6]
 801db2a:	8afb      	ldrh	r3, [r7, #22]
 801db2c:	1ad3      	subs	r3, r2, r3
 801db2e:	2b09      	cmp	r3, #9
 801db30:	d001      	beq.n	801db36 <_ZN23core_comm_SerialMessage5checkEPht+0x4a>
	} else {
		return CORE_ERROR;
 801db32:	2300      	movs	r3, #0
 801db34:	e000      	b.n	801db38 <_ZN23core_comm_SerialMessage5checkEPht+0x4c>
	}

	return CORE_OK;
 801db36:	2301      	movs	r3, #1

}
 801db38:	4618      	mov	r0, r3
 801db3a:	3718      	adds	r7, #24
 801db3c:	46bd      	mov	sp, r7
 801db3e:	bd80      	pop	{r7, pc}

0801db40 <_ZN23core_comm_SerialMessage6decodeEPht>:
uint8_t core_comm_SerialMessage::check(Buffer *buffer) {
	return this->check(buffer->data_ptr, buffer->len);
}

uint8_t core_comm_SerialMessage::decode(uint8_t *buffer, uint16_t len) {
 801db40:	b580      	push	{r7, lr}
 801db42:	b086      	sub	sp, #24
 801db44:	af00      	add	r7, sp, #0
 801db46:	60f8      	str	r0, [r7, #12]
 801db48:	60b9      	str	r1, [r7, #8]
 801db4a:	4613      	mov	r3, r2
 801db4c:	80fb      	strh	r3, [r7, #6]
	if (this->check(buffer, len) == CORE_ERROR) {
 801db4e:	88fb      	ldrh	r3, [r7, #6]
 801db50:	461a      	mov	r2, r3
 801db52:	68b9      	ldr	r1, [r7, #8]
 801db54:	68f8      	ldr	r0, [r7, #12]
 801db56:	f7ff ffc9 	bl	801daec <_ZN23core_comm_SerialMessage5checkEPht>
 801db5a:	4603      	mov	r3, r0
 801db5c:	2b00      	cmp	r3, #0
 801db5e:	bf0c      	ite	eq
 801db60:	2301      	moveq	r3, #1
 801db62:	2300      	movne	r3, #0
 801db64:	b2db      	uxtb	r3, r3
 801db66:	2b00      	cmp	r3, #0
 801db68:	d001      	beq.n	801db6e <_ZN23core_comm_SerialMessage6decodeEPht+0x2e>
		return CORE_ERROR;
 801db6a:	2300      	movs	r3, #0
 801db6c:	e037      	b.n	801dbde <_ZN23core_comm_SerialMessage6decodeEPht+0x9e>
	}

	/* Extract the command */
	this->cmd = buffer[1];
 801db6e:	68bb      	ldr	r3, [r7, #8]
 801db70:	785a      	ldrb	r2, [r3, #1]
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	701a      	strb	r2, [r3, #0]

	/* Extract the address */
	this->address_1 = buffer[2];
 801db76:	68bb      	ldr	r3, [r7, #8]
 801db78:	789a      	ldrb	r2, [r3, #2]
 801db7a:	68fb      	ldr	r3, [r7, #12]
 801db7c:	705a      	strb	r2, [r3, #1]
	this->address_2 = buffer[3];
 801db7e:	68bb      	ldr	r3, [r7, #8]
 801db80:	78da      	ldrb	r2, [r3, #3]
 801db82:	68fb      	ldr	r3, [r7, #12]
 801db84:	709a      	strb	r2, [r3, #2]
	this->address_3 = buffer[4];
 801db86:	68bb      	ldr	r3, [r7, #8]
 801db88:	791a      	ldrb	r2, [r3, #4]
 801db8a:	68fb      	ldr	r3, [r7, #12]
 801db8c:	70da      	strb	r2, [r3, #3]

	/* Flag */
	this->flag = buffer[5];
 801db8e:	68bb      	ldr	r3, [r7, #8]
 801db90:	795a      	ldrb	r2, [r3, #5]
 801db92:	68fb      	ldr	r3, [r7, #12]
 801db94:	711a      	strb	r2, [r3, #4]

	/* Extract the data length */
	this->len = uint8_to_uint16(buffer[6], buffer[7]);
 801db96:	68bb      	ldr	r3, [r7, #8]
 801db98:	3306      	adds	r3, #6
 801db9a:	781a      	ldrb	r2, [r3, #0]
 801db9c:	68bb      	ldr	r3, [r7, #8]
 801db9e:	3307      	adds	r3, #7
 801dba0:	781b      	ldrb	r3, [r3, #0]
 801dba2:	4619      	mov	r1, r3
 801dba4:	4610      	mov	r0, r2
 801dba6:	f002 f911 	bl	801fdcc <_Z15uint8_to_uint16hh>
 801dbaa:	4603      	mov	r3, r0
 801dbac:	461a      	mov	r2, r3
 801dbae:	68fb      	ldr	r3, [r7, #12]
 801dbb0:	819a      	strh	r2, [r3, #12]

	/* Extract the data */
	for (uint8_t i = 0; i < this->len; i++) {
 801dbb2:	2300      	movs	r3, #0
 801dbb4:	75fb      	strb	r3, [r7, #23]
 801dbb6:	e00c      	b.n	801dbd2 <_ZN23core_comm_SerialMessage6decodeEPht+0x92>
		this->data_ptr[i] = buffer[i + 8];
 801dbb8:	7dfb      	ldrb	r3, [r7, #23]
 801dbba:	3308      	adds	r3, #8
 801dbbc:	68ba      	ldr	r2, [r7, #8]
 801dbbe:	441a      	add	r2, r3
 801dbc0:	68fb      	ldr	r3, [r7, #12]
 801dbc2:	6899      	ldr	r1, [r3, #8]
 801dbc4:	7dfb      	ldrb	r3, [r7, #23]
 801dbc6:	440b      	add	r3, r1
 801dbc8:	7812      	ldrb	r2, [r2, #0]
 801dbca:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < this->len; i++) {
 801dbcc:	7dfb      	ldrb	r3, [r7, #23]
 801dbce:	3301      	adds	r3, #1
 801dbd0:	75fb      	strb	r3, [r7, #23]
 801dbd2:	7dfb      	ldrb	r3, [r7, #23]
 801dbd4:	68fa      	ldr	r2, [r7, #12]
 801dbd6:	8992      	ldrh	r2, [r2, #12]
 801dbd8:	4293      	cmp	r3, r2
 801dbda:	dbed      	blt.n	801dbb8 <_ZN23core_comm_SerialMessage6decodeEPht+0x78>
	}

	return CORE_OK;
 801dbdc:	2301      	movs	r3, #1
}
 801dbde:	4618      	mov	r0, r3
 801dbe0:	3718      	adds	r7, #24
 801dbe2:	46bd      	mov	sp, r7
 801dbe4:	bd80      	pop	{r7, pc}

0801dbe6 <_ZN23core_comm_SerialMessage6decodeEP6Buffer>:

uint8_t core_comm_SerialMessage::decode(Buffer *buffer) {
 801dbe6:	b580      	push	{r7, lr}
 801dbe8:	b082      	sub	sp, #8
 801dbea:	af00      	add	r7, sp, #0
 801dbec:	6078      	str	r0, [r7, #4]
 801dbee:	6039      	str	r1, [r7, #0]
	return this->decode(buffer->data_ptr, buffer->len);
 801dbf0:	683b      	ldr	r3, [r7, #0]
 801dbf2:	6819      	ldr	r1, [r3, #0]
 801dbf4:	683b      	ldr	r3, [r7, #0]
 801dbf6:	889b      	ldrh	r3, [r3, #4]
 801dbf8:	461a      	mov	r2, r3
 801dbfa:	6878      	ldr	r0, [r7, #4]
 801dbfc:	f7ff ffa0 	bl	801db40 <_ZN23core_comm_SerialMessage6decodeEPht>
 801dc00:	4603      	mov	r3, r0
}
 801dc02:	4618      	mov	r0, r3
 801dc04:	3708      	adds	r7, #8
 801dc06:	46bd      	mov	sp, r7
 801dc08:	bd80      	pop	{r7, pc}

0801dc0a <_Z32core_comm_SerialSocket_RTOS_TaskPv>:

core_comm_UartInterface_config_t std_uart_config = { .uart =
		std_hardware_uart_config, .use_protocol = 1, .use_queue = 1 };

/* ============================================================================= */
void core_comm_SerialSocket_RTOS_Task(void *SerialSocket) {
 801dc0a:	b5b0      	push	{r4, r5, r7, lr}
 801dc0c:	b084      	sub	sp, #16
 801dc0e:	af00      	add	r7, sp, #0
 801dc10:	6078      	str	r0, [r7, #4]
	UartInterface *socket = (UartInterface*) SerialSocket;
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	60fb      	str	r3, [r7, #12]

// Get the task handle and save it in the RTOS structure for later notifying this task
	socket->setTaskID(xTaskGetCurrentTaskHandle());
 801dc16:	68fd      	ldr	r5, [r7, #12]
 801dc18:	68fb      	ldr	r3, [r7, #12]
 801dc1a:	681b      	ldr	r3, [r3, #0]
 801dc1c:	3304      	adds	r3, #4
 801dc1e:	681c      	ldr	r4, [r3, #0]
 801dc20:	f7f4 fcd8 	bl	80125d4 <xTaskGetCurrentTaskHandle>
 801dc24:	4603      	mov	r3, r0
 801dc26:	4619      	mov	r1, r3
 801dc28:	4628      	mov	r0, r5
 801dc2a:	47a0      	blx	r4

	while (!socket->exit) {
 801dc2c:	e00d      	b.n	801dc4a <_Z32core_comm_SerialSocket_RTOS_TaskPv+0x40>

		// TODO: this is now waiting only for receiving a notification, but maybe we want to do other things
		uint32_t ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 801dc2e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801dc32:	2001      	movs	r0, #1
 801dc34:	f7f4 fe6c 	bl	8012910 <ulTaskNotifyTake>
 801dc38:	60b8      	str	r0, [r7, #8]
		if (ulNotificationValue) {
 801dc3a:	68bb      	ldr	r3, [r7, #8]
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d004      	beq.n	801dc4a <_Z32core_comm_SerialSocket_RTOS_TaskPv+0x40>
			socket->rx_function();
 801dc40:	68fb      	ldr	r3, [r7, #12]
 801dc42:	681b      	ldr	r3, [r3, #0]
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	68f8      	ldr	r0, [r7, #12]
 801dc48:	4798      	blx	r3
	while (!socket->exit) {
 801dc4a:	68fb      	ldr	r3, [r7, #12]
 801dc4c:	791b      	ldrb	r3, [r3, #4]
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d0ed      	beq.n	801dc2e <_Z32core_comm_SerialSocket_RTOS_TaskPv+0x24>
		}

	}
	vTaskDelete(socket->getTaskID());
 801dc52:	68fb      	ldr	r3, [r7, #12]
 801dc54:	681b      	ldr	r3, [r3, #0]
 801dc56:	3308      	adds	r3, #8
 801dc58:	681b      	ldr	r3, [r3, #0]
 801dc5a:	68f8      	ldr	r0, [r7, #12]
 801dc5c:	4798      	blx	r3
 801dc5e:	4603      	mov	r3, r0
 801dc60:	4618      	mov	r0, r3
 801dc62:	f7f3 ff17 	bl	8011a94 <vTaskDelete>
}
 801dc66:	bf00      	nop
 801dc68:	3710      	adds	r7, #16
 801dc6a:	46bd      	mov	sp, r7
 801dc6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801dc70 <_Z41__static_initialization_and_destruction_0ii>:
 801dc70:	b480      	push	{r7}
 801dc72:	b083      	sub	sp, #12
 801dc74:	af00      	add	r7, sp, #0
 801dc76:	6078      	str	r0, [r7, #4]
 801dc78:	6039      	str	r1, [r7, #0]
 801dc7a:	687b      	ldr	r3, [r7, #4]
 801dc7c:	2b01      	cmp	r3, #1
 801dc7e:	d108      	bne.n	801dc92 <_Z41__static_initialization_and_destruction_0ii+0x22>
 801dc80:	683b      	ldr	r3, [r7, #0]
 801dc82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801dc86:	4293      	cmp	r3, r2
 801dc88:	d103      	bne.n	801dc92 <_Z41__static_initialization_and_destruction_0ii+0x22>
		std_hardware_uart_config, .use_protocol = 1, .use_queue = 1 };
 801dc8a:	4a05      	ldr	r2, [pc, #20]	@ (801dca0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801dc8c:	4b05      	ldr	r3, [pc, #20]	@ (801dca4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	6013      	str	r3, [r2, #0]
}
 801dc92:	bf00      	nop
 801dc94:	370c      	adds	r7, #12
 801dc96:	46bd      	mov	sp, r7
 801dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc9c:	4770      	bx	lr
 801dc9e:	bf00      	nop
 801dca0:	24000054 	.word	0x24000054
 801dca4:	24000050 	.word	0x24000050

0801dca8 <_GLOBAL__sub_I_std_hardware_uart_config>:
 801dca8:	b580      	push	{r7, lr}
 801dcaa:	af00      	add	r7, sp, #0
 801dcac:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801dcb0:	2001      	movs	r0, #1
 801dcb2:	f7ff ffdd 	bl	801dc70 <_Z41__static_initialization_and_destruction_0ii>
 801dcb6:	bd80      	pop	{r7, pc}

0801dcb8 <_ZN8MadgwickC1Ev>:
// Functions

//-------------------------------------------------------------------------------------------
// AHRS algorithm update

Madgwick::Madgwick() {
 801dcb8:	b480      	push	{r7}
 801dcba:	b083      	sub	sp, #12
 801dcbc:	af00      	add	r7, sp, #0
 801dcbe:	6078      	str	r0, [r7, #4]
	beta = betaDef;
 801dcc0:	687b      	ldr	r3, [r7, #4]
 801dcc2:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 801dcc6:	601a      	str	r2, [r3, #0]
	q0 = 1.0f;
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801dcce:	619a      	str	r2, [r3, #24]
	q1 = 0.0f;
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	f04f 0200 	mov.w	r2, #0
 801dcd6:	61da      	str	r2, [r3, #28]
	q2 = 0.0f;
 801dcd8:	687b      	ldr	r3, [r7, #4]
 801dcda:	f04f 0200 	mov.w	r2, #0
 801dcde:	621a      	str	r2, [r3, #32]
	q3 = 0.0f;
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	f04f 0200 	mov.w	r2, #0
 801dce6:	625a      	str	r2, [r3, #36]	@ 0x24
	invSampleFreq = 1.0f / sampleFreqDef;
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	4a06      	ldr	r2, [pc, #24]	@ (801dd04 <_ZN8MadgwickC1Ev+0x4c>)
 801dcec:	611a      	str	r2, [r3, #16]
	anglesComputed = 0;
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	2200      	movs	r2, #0
 801dcf2:	751a      	strb	r2, [r3, #20]
}
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	4618      	mov	r0, r3
 801dcf8:	370c      	adds	r7, #12
 801dcfa:	46bd      	mov	sp, r7
 801dcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd00:	4770      	bx	lr
 801dd02:	bf00      	nop
 801dd04:	3c23d70a 	.word	0x3c23d70a

0801dd08 <_ZN8Madgwick9updateIMUEffffff>:
}

//-------------------------------------------------------------------------------------------
// IMU algorithm update

void Madgwick::updateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 801dd08:	b580      	push	{r7, lr}
 801dd0a:	b09e      	sub	sp, #120	@ 0x78
 801dd0c:	af00      	add	r7, sp, #0
 801dd0e:	61f8      	str	r0, [r7, #28]
 801dd10:	ed87 0a06 	vstr	s0, [r7, #24]
 801dd14:	edc7 0a05 	vstr	s1, [r7, #20]
 801dd18:	ed87 1a04 	vstr	s2, [r7, #16]
 801dd1c:	edc7 1a03 	vstr	s3, [r7, #12]
 801dd20:	ed87 2a02 	vstr	s4, [r7, #8]
 801dd24:	edc7 2a01 	vstr	s5, [r7, #4]
//	gx *= 0.0174533f;
//	gy *= 0.0174533f;
//	gz *= 0.0174533f;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 801dd28:	69fb      	ldr	r3, [r7, #28]
 801dd2a:	edd3 7a07 	vldr	s15, [r3, #28]
 801dd2e:	eeb1 7a67 	vneg.f32	s14, s15
 801dd32:	edd7 7a06 	vldr	s15, [r7, #24]
 801dd36:	ee27 7a27 	vmul.f32	s14, s14, s15
 801dd3a:	69fb      	ldr	r3, [r7, #28]
 801dd3c:	edd3 6a08 	vldr	s13, [r3, #32]
 801dd40:	edd7 7a05 	vldr	s15, [r7, #20]
 801dd44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801dd48:	ee37 7a67 	vsub.f32	s14, s14, s15
 801dd4c:	69fb      	ldr	r3, [r7, #28]
 801dd4e:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801dd52:	edd7 7a04 	vldr	s15, [r7, #16]
 801dd56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801dd5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801dd5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801dd62:	ee67 7a87 	vmul.f32	s15, s15, s14
 801dd66:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 801dd6a:	69fb      	ldr	r3, [r7, #28]
 801dd6c:	ed93 7a06 	vldr	s14, [r3, #24]
 801dd70:	edd7 7a06 	vldr	s15, [r7, #24]
 801dd74:	ee27 7a27 	vmul.f32	s14, s14, s15
 801dd78:	69fb      	ldr	r3, [r7, #28]
 801dd7a:	edd3 6a08 	vldr	s13, [r3, #32]
 801dd7e:	edd7 7a04 	vldr	s15, [r7, #16]
 801dd82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801dd86:	ee37 7a27 	vadd.f32	s14, s14, s15
 801dd8a:	69fb      	ldr	r3, [r7, #28]
 801dd8c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801dd90:	edd7 7a05 	vldr	s15, [r7, #20]
 801dd94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801dd98:	ee77 7a67 	vsub.f32	s15, s14, s15
 801dd9c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801dda0:	ee67 7a87 	vmul.f32	s15, s15, s14
 801dda4:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 801dda8:	69fb      	ldr	r3, [r7, #28]
 801ddaa:	ed93 7a06 	vldr	s14, [r3, #24]
 801ddae:	edd7 7a05 	vldr	s15, [r7, #20]
 801ddb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ddb6:	69fb      	ldr	r3, [r7, #28]
 801ddb8:	edd3 6a07 	vldr	s13, [r3, #28]
 801ddbc:	edd7 7a04 	vldr	s15, [r7, #16]
 801ddc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ddc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ddc8:	69fb      	ldr	r3, [r7, #28]
 801ddca:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801ddce:	edd7 7a06 	vldr	s15, [r7, #24]
 801ddd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801ddd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ddda:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801ddde:	ee67 7a87 	vmul.f32	s15, s15, s14
 801dde2:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 801dde6:	69fb      	ldr	r3, [r7, #28]
 801dde8:	ed93 7a06 	vldr	s14, [r3, #24]
 801ddec:	edd7 7a04 	vldr	s15, [r7, #16]
 801ddf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ddf4:	69fb      	ldr	r3, [r7, #28]
 801ddf6:	edd3 6a07 	vldr	s13, [r3, #28]
 801ddfa:	edd7 7a05 	vldr	s15, [r7, #20]
 801ddfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801de02:	ee37 7a27 	vadd.f32	s14, s14, s15
 801de06:	69fb      	ldr	r3, [r7, #28]
 801de08:	edd3 6a08 	vldr	s13, [r3, #32]
 801de0c:	edd7 7a06 	vldr	s15, [r7, #24]
 801de10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801de14:	ee77 7a67 	vsub.f32	s15, s14, s15
 801de18:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801de1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801de20:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 801de24:	edd7 7a03 	vldr	s15, [r7, #12]
 801de28:	eef5 7a40 	vcmp.f32	s15, #0.0
 801de2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de30:	d10e      	bne.n	801de50 <_ZN8Madgwick9updateIMUEffffff+0x148>
 801de32:	edd7 7a02 	vldr	s15, [r7, #8]
 801de36:	eef5 7a40 	vcmp.f32	s15, #0.0
 801de3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de3e:	d107      	bne.n	801de50 <_ZN8Madgwick9updateIMUEffffff+0x148>
 801de40:	edd7 7a01 	vldr	s15, [r7, #4]
 801de44:	eef5 7a40 	vcmp.f32	s15, #0.0
 801de48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de4c:	f000 81db 	beq.w	801e206 <_ZN8Madgwick9updateIMUEffffff+0x4fe>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 801de50:	edd7 7a03 	vldr	s15, [r7, #12]
 801de54:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801de58:	edd7 7a02 	vldr	s15, [r7, #8]
 801de5c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801de60:	ee37 7a27 	vadd.f32	s14, s14, s15
 801de64:	edd7 7a01 	vldr	s15, [r7, #4]
 801de68:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801de6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 801de70:	eeb0 0a67 	vmov.f32	s0, s15
 801de74:	f000 fa5e 	bl	801e334 <_ZN8Madgwick7invSqrtEf>
 801de78:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		ax *= recipNorm;
 801de7c:	ed97 7a03 	vldr	s14, [r7, #12]
 801de80:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801de84:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de88:	edc7 7a03 	vstr	s15, [r7, #12]
		ay *= recipNorm;
 801de8c:	ed97 7a02 	vldr	s14, [r7, #8]
 801de90:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801de94:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de98:	edc7 7a02 	vstr	s15, [r7, #8]
		az *= recipNorm;
 801de9c:	ed97 7a01 	vldr	s14, [r7, #4]
 801dea0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801dea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dea8:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 801deac:	69fb      	ldr	r3, [r7, #28]
 801deae:	edd3 7a06 	vldr	s15, [r3, #24]
 801deb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801deb6:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		_2q1 = 2.0f * q1;
 801deba:	69fb      	ldr	r3, [r7, #28]
 801debc:	edd3 7a07 	vldr	s15, [r3, #28]
 801dec0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801dec4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		_2q2 = 2.0f * q2;
 801dec8:	69fb      	ldr	r3, [r7, #28]
 801deca:	edd3 7a08 	vldr	s15, [r3, #32]
 801dece:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801ded2:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q3 = 2.0f * q3;
 801ded6:	69fb      	ldr	r3, [r7, #28]
 801ded8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801dedc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801dee0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_4q0 = 4.0f * q0;
 801dee4:	69fb      	ldr	r3, [r7, #28]
 801dee6:	edd3 7a06 	vldr	s15, [r3, #24]
 801deea:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801deee:	ee67 7a87 	vmul.f32	s15, s15, s14
 801def2:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_4q1 = 4.0f * q1;
 801def6:	69fb      	ldr	r3, [r7, #28]
 801def8:	edd3 7a07 	vldr	s15, [r3, #28]
 801defc:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801df00:	ee67 7a87 	vmul.f32	s15, s15, s14
 801df04:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q2 = 4.0f * q2;
 801df08:	69fb      	ldr	r3, [r7, #28]
 801df0a:	edd3 7a08 	vldr	s15, [r3, #32]
 801df0e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801df12:	ee67 7a87 	vmul.f32	s15, s15, s14
 801df16:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_8q1 = 8.0f * q1;
 801df1a:	69fb      	ldr	r3, [r7, #28]
 801df1c:	edd3 7a07 	vldr	s15, [r3, #28]
 801df20:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 801df24:	ee67 7a87 	vmul.f32	s15, s15, s14
 801df28:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_8q2 = 8.0f * q2;
 801df2c:	69fb      	ldr	r3, [r7, #28]
 801df2e:	edd3 7a08 	vldr	s15, [r3, #32]
 801df32:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 801df36:	ee67 7a87 	vmul.f32	s15, s15, s14
 801df3a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		q0q0 = q0 * q0;
 801df3e:	69fb      	ldr	r3, [r7, #28]
 801df40:	ed93 7a06 	vldr	s14, [r3, #24]
 801df44:	69fb      	ldr	r3, [r7, #28]
 801df46:	edd3 7a06 	vldr	s15, [r3, #24]
 801df4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801df4e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		q1q1 = q1 * q1;
 801df52:	69fb      	ldr	r3, [r7, #28]
 801df54:	ed93 7a07 	vldr	s14, [r3, #28]
 801df58:	69fb      	ldr	r3, [r7, #28]
 801df5a:	edd3 7a07 	vldr	s15, [r3, #28]
 801df5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801df62:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q2q2 = q2 * q2;
 801df66:	69fb      	ldr	r3, [r7, #28]
 801df68:	ed93 7a08 	vldr	s14, [r3, #32]
 801df6c:	69fb      	ldr	r3, [r7, #28]
 801df6e:	edd3 7a08 	vldr	s15, [r3, #32]
 801df72:	ee67 7a27 	vmul.f32	s15, s14, s15
 801df76:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q3q3 = q3 * q3;
 801df7a:	69fb      	ldr	r3, [r7, #28]
 801df7c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 801df80:	69fb      	ldr	r3, [r7, #28]
 801df82:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801df86:	ee67 7a27 	vmul.f32	s15, s14, s15
 801df8a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 801df8e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 801df92:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801df96:	ee27 7a27 	vmul.f32	s14, s14, s15
 801df9a:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 801df9e:	edd7 7a03 	vldr	s15, [r7, #12]
 801dfa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801dfa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801dfaa:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 801dfae:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801dfb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801dfb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 801dfba:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 801dfbe:	edd7 7a02 	vldr	s15, [r7, #8]
 801dfc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801dfc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801dfca:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 801dfce:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 801dfd2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801dfd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 801dfda:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 801dfde:	edd7 7a03 	vldr	s15, [r7, #12]
 801dfe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801dfe6:	ee37 7a67 	vsub.f32	s14, s14, s15
 801dfea:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 801dfee:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 801dff2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801dff6:	69fb      	ldr	r3, [r7, #28]
 801dff8:	edd3 7a07 	vldr	s15, [r3, #28]
 801dffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e000:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e004:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 801e008:	edd7 7a02 	vldr	s15, [r7, #8]
 801e00c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e010:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e014:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 801e018:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e01c:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 801e020:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801e024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e028:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e02c:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 801e030:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801e034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e038:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e03c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 801e040:	edd7 7a01 	vldr	s15, [r7, #4]
 801e044:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e048:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e04c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 801e050:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 801e054:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801e058:	ee27 7a87 	vmul.f32	s14, s15, s14
 801e05c:	69fb      	ldr	r3, [r7, #28]
 801e05e:	edd3 7a08 	vldr	s15, [r3, #32]
 801e062:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e066:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 801e06a:	edd7 7a03 	vldr	s15, [r7, #12]
 801e06e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e072:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e076:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 801e07a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 801e07e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e082:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e086:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 801e08a:	edd7 7a02 	vldr	s15, [r7, #8]
 801e08e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e092:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e096:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 801e09a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e09e:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 801e0a2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801e0a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e0aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e0ae:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 801e0b2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801e0b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e0ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e0be:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 801e0c2:	edd7 7a01 	vldr	s15, [r7, #4]
 801e0c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e0ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e0ce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 801e0d2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801e0d6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 801e0da:	ee27 7a87 	vmul.f32	s14, s15, s14
 801e0de:	69fb      	ldr	r3, [r7, #28]
 801e0e0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801e0e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e0e8:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 801e0ec:	edd7 7a03 	vldr	s15, [r7, #12]
 801e0f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e0f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e0f8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801e0fc:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 801e100:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801e104:	69fb      	ldr	r3, [r7, #28]
 801e106:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801e10a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e10e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e112:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 801e116:	edd7 7a02 	vldr	s15, [r7, #8]
 801e11a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e11e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e122:	edc7 7a08 	vstr	s15, [r7, #32]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 801e126:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801e12a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801e12e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801e132:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801e136:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e13a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801e13e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801e142:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e146:	edd7 7a08 	vldr	s15, [r7, #32]
 801e14a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801e14e:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e152:	eeb0 0a67 	vmov.f32	s0, s15
 801e156:	f000 f8ed 	bl	801e334 <_ZN8Madgwick7invSqrtEf>
 801e15a:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
		s0 *= recipNorm;
 801e15e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801e162:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801e166:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e16a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		s1 *= recipNorm;
 801e16e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 801e172:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801e176:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e17a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		s2 *= recipNorm;
 801e17e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 801e182:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801e186:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e18a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s3 *= recipNorm;
 801e18e:	ed97 7a08 	vldr	s14, [r7, #32]
 801e192:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801e196:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e19a:	edc7 7a08 	vstr	s15, [r7, #32]

		// Apply feedback step
		qDot1 -= beta * s0;
 801e19e:	69fb      	ldr	r3, [r7, #28]
 801e1a0:	ed93 7a00 	vldr	s14, [r3]
 801e1a4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801e1a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e1ac:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 801e1b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e1b4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
		qDot2 -= beta * s1;
 801e1b8:	69fb      	ldr	r3, [r7, #28]
 801e1ba:	ed93 7a00 	vldr	s14, [r3]
 801e1be:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801e1c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e1c6:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 801e1ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e1ce:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		qDot3 -= beta * s2;
 801e1d2:	69fb      	ldr	r3, [r7, #28]
 801e1d4:	ed93 7a00 	vldr	s14, [r3]
 801e1d8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801e1dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e1e0:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 801e1e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e1e8:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot4 -= beta * s3;
 801e1ec:	69fb      	ldr	r3, [r7, #28]
 801e1ee:	ed93 7a00 	vldr	s14, [r3]
 801e1f2:	edd7 7a08 	vldr	s15, [r7, #32]
 801e1f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e1fa:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 801e1fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e202:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * invSampleFreq;
 801e206:	69fb      	ldr	r3, [r7, #28]
 801e208:	ed93 7a06 	vldr	s14, [r3, #24]
 801e20c:	69fb      	ldr	r3, [r7, #28]
 801e20e:	edd3 6a04 	vldr	s13, [r3, #16]
 801e212:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 801e216:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e21a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e21e:	69fb      	ldr	r3, [r7, #28]
 801e220:	edc3 7a06 	vstr	s15, [r3, #24]
	q1 += qDot2 * invSampleFreq;
 801e224:	69fb      	ldr	r3, [r7, #28]
 801e226:	ed93 7a07 	vldr	s14, [r3, #28]
 801e22a:	69fb      	ldr	r3, [r7, #28]
 801e22c:	edd3 6a04 	vldr	s13, [r3, #16]
 801e230:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 801e234:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e238:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e23c:	69fb      	ldr	r3, [r7, #28]
 801e23e:	edc3 7a07 	vstr	s15, [r3, #28]
	q2 += qDot3 * invSampleFreq;
 801e242:	69fb      	ldr	r3, [r7, #28]
 801e244:	ed93 7a08 	vldr	s14, [r3, #32]
 801e248:	69fb      	ldr	r3, [r7, #28]
 801e24a:	edd3 6a04 	vldr	s13, [r3, #16]
 801e24e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 801e252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e256:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e25a:	69fb      	ldr	r3, [r7, #28]
 801e25c:	edc3 7a08 	vstr	s15, [r3, #32]
	q3 += qDot4 * invSampleFreq;
 801e260:	69fb      	ldr	r3, [r7, #28]
 801e262:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 801e266:	69fb      	ldr	r3, [r7, #28]
 801e268:	edd3 6a04 	vldr	s13, [r3, #16]
 801e26c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 801e270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e274:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e278:	69fb      	ldr	r3, [r7, #28]
 801e27a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 801e27e:	69fb      	ldr	r3, [r7, #28]
 801e280:	ed93 7a06 	vldr	s14, [r3, #24]
 801e284:	69fb      	ldr	r3, [r7, #28]
 801e286:	edd3 7a06 	vldr	s15, [r3, #24]
 801e28a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e28e:	69fb      	ldr	r3, [r7, #28]
 801e290:	edd3 6a07 	vldr	s13, [r3, #28]
 801e294:	69fb      	ldr	r3, [r7, #28]
 801e296:	edd3 7a07 	vldr	s15, [r3, #28]
 801e29a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e29e:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e2a2:	69fb      	ldr	r3, [r7, #28]
 801e2a4:	edd3 6a08 	vldr	s13, [r3, #32]
 801e2a8:	69fb      	ldr	r3, [r7, #28]
 801e2aa:	edd3 7a08 	vldr	s15, [r3, #32]
 801e2ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e2b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801e2b6:	69fb      	ldr	r3, [r7, #28]
 801e2b8:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801e2bc:	69fb      	ldr	r3, [r7, #28]
 801e2be:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801e2c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e2c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 801e2ca:	eeb0 0a67 	vmov.f32	s0, s15
 801e2ce:	f000 f831 	bl	801e334 <_ZN8Madgwick7invSqrtEf>
 801e2d2:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
	q0 *= recipNorm;
 801e2d6:	69fb      	ldr	r3, [r7, #28]
 801e2d8:	ed93 7a06 	vldr	s14, [r3, #24]
 801e2dc:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801e2e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e2e4:	69fb      	ldr	r3, [r7, #28]
 801e2e6:	edc3 7a06 	vstr	s15, [r3, #24]
	q1 *= recipNorm;
 801e2ea:	69fb      	ldr	r3, [r7, #28]
 801e2ec:	ed93 7a07 	vldr	s14, [r3, #28]
 801e2f0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801e2f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e2f8:	69fb      	ldr	r3, [r7, #28]
 801e2fa:	edc3 7a07 	vstr	s15, [r3, #28]
	q2 *= recipNorm;
 801e2fe:	69fb      	ldr	r3, [r7, #28]
 801e300:	ed93 7a08 	vldr	s14, [r3, #32]
 801e304:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801e308:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e30c:	69fb      	ldr	r3, [r7, #28]
 801e30e:	edc3 7a08 	vstr	s15, [r3, #32]
	q3 *= recipNorm;
 801e312:	69fb      	ldr	r3, [r7, #28]
 801e314:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 801e318:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801e31c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e320:	69fb      	ldr	r3, [r7, #28]
 801e322:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	anglesComputed = 0;
 801e326:	69fb      	ldr	r3, [r7, #28]
 801e328:	2200      	movs	r2, #0
 801e32a:	751a      	strb	r2, [r3, #20]
}
 801e32c:	bf00      	nop
 801e32e:	3778      	adds	r7, #120	@ 0x78
 801e330:	46bd      	mov	sp, r7
 801e332:	bd80      	pop	{r7, pc}

0801e334 <_ZN8Madgwick7invSqrtEf>:

//-------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float Madgwick::invSqrt(float x) {
 801e334:	b480      	push	{r7}
 801e336:	b087      	sub	sp, #28
 801e338:	af00      	add	r7, sp, #0
 801e33a:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 801e33e:	edd7 7a01 	vldr	s15, [r7, #4]
 801e342:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801e346:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e34a:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 801e352:	f107 0310 	add.w	r3, r7, #16
 801e356:	681b      	ldr	r3, [r3, #0]
 801e358:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 801e35a:	68fb      	ldr	r3, [r7, #12]
 801e35c:	105a      	asrs	r2, r3, #1
 801e35e:	4b1c      	ldr	r3, [pc, #112]	@ (801e3d0 <_ZN8Madgwick7invSqrtEf+0x9c>)
 801e360:	1a9b      	subs	r3, r3, r2
 801e362:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 801e364:	f107 030c 	add.w	r3, r7, #12
 801e368:	681b      	ldr	r3, [r3, #0]
 801e36a:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 801e36c:	ed97 7a04 	vldr	s14, [r7, #16]
 801e370:	edd7 7a05 	vldr	s15, [r7, #20]
 801e374:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e378:	edd7 7a04 	vldr	s15, [r7, #16]
 801e37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e380:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801e384:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e388:	edd7 7a04 	vldr	s15, [r7, #16]
 801e38c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e390:	edc7 7a04 	vstr	s15, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 801e394:	ed97 7a04 	vldr	s14, [r7, #16]
 801e398:	edd7 7a05 	vldr	s15, [r7, #20]
 801e39c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e3a0:	edd7 7a04 	vldr	s15, [r7, #16]
 801e3a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e3a8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 801e3ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e3b0:	edd7 7a04 	vldr	s15, [r7, #16]
 801e3b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e3b8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 801e3bc:	693b      	ldr	r3, [r7, #16]
 801e3be:	ee07 3a90 	vmov	s15, r3
}
 801e3c2:	eeb0 0a67 	vmov.f32	s0, s15
 801e3c6:	371c      	adds	r7, #28
 801e3c8:	46bd      	mov	sp, r7
 801e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3ce:	4770      	bx	lr
 801e3d0:	5f3759df 	.word	0x5f3759df

0801e3d4 <_ZN8Madgwick13computeAnglesEv>:

//-------------------------------------------------------------------------------------------

void Madgwick::computeAngles()
{
 801e3d4:	b580      	push	{r7, lr}
 801e3d6:	b082      	sub	sp, #8
 801e3d8:	af00      	add	r7, sp, #0
 801e3da:	6078      	str	r0, [r7, #4]
	roll = atan2f(q0*q1 + q2*q3, 0.5f - q1*q1 - q2*q2);
 801e3dc:	687b      	ldr	r3, [r7, #4]
 801e3de:	ed93 7a06 	vldr	s14, [r3, #24]
 801e3e2:	687b      	ldr	r3, [r7, #4]
 801e3e4:	edd3 7a07 	vldr	s15, [r3, #28]
 801e3e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	edd3 6a08 	vldr	s13, [r3, #32]
 801e3f2:	687b      	ldr	r3, [r7, #4]
 801e3f4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801e3f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e3fc:	ee37 6a27 	vadd.f32	s12, s14, s15
 801e400:	687b      	ldr	r3, [r7, #4]
 801e402:	ed93 7a07 	vldr	s14, [r3, #28]
 801e406:	687b      	ldr	r3, [r7, #4]
 801e408:	edd3 7a07 	vldr	s15, [r3, #28]
 801e40c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e410:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801e414:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e418:	687b      	ldr	r3, [r7, #4]
 801e41a:	edd3 6a08 	vldr	s13, [r3, #32]
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	edd3 7a08 	vldr	s15, [r3, #32]
 801e424:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e428:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e42c:	eef0 0a67 	vmov.f32	s1, s15
 801e430:	eeb0 0a46 	vmov.f32	s0, s12
 801e434:	f002 f81e 	bl	8020474 <atan2f>
 801e438:	eef0 7a40 	vmov.f32	s15, s0
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	edc3 7a01 	vstr	s15, [r3, #4]
	pitch = asinf(-2.0f * (q1*q3 - q0*q2));
 801e442:	687b      	ldr	r3, [r7, #4]
 801e444:	ed93 7a07 	vldr	s14, [r3, #28]
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801e44e:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	edd3 6a06 	vldr	s13, [r3, #24]
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	edd3 7a08 	vldr	s15, [r3, #32]
 801e45e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e462:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e466:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 801e46a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801e46e:	eeb0 0a67 	vmov.f32	s0, s15
 801e472:	f001 ffd3 	bl	802041c <asinf>
 801e476:	eef0 7a40 	vmov.f32	s15, s0
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	edc3 7a02 	vstr	s15, [r3, #8]
	yaw = atan2f(q1*q2 + q0*q3, 0.5f - q2*q2 - q3*q3);
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	ed93 7a07 	vldr	s14, [r3, #28]
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	edd3 7a08 	vldr	s15, [r3, #32]
 801e48c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	edd3 6a06 	vldr	s13, [r3, #24]
 801e496:	687b      	ldr	r3, [r7, #4]
 801e498:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801e49c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e4a0:	ee37 6a27 	vadd.f32	s12, s14, s15
 801e4a4:	687b      	ldr	r3, [r7, #4]
 801e4a6:	ed93 7a08 	vldr	s14, [r3, #32]
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	edd3 7a08 	vldr	s15, [r3, #32]
 801e4b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e4b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801e4b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 801e4bc:	687b      	ldr	r3, [r7, #4]
 801e4be:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801e4c2:	687b      	ldr	r3, [r7, #4]
 801e4c4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801e4c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801e4cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e4d0:	eef0 0a67 	vmov.f32	s1, s15
 801e4d4:	eeb0 0a46 	vmov.f32	s0, s12
 801e4d8:	f001 ffcc 	bl	8020474 <atan2f>
 801e4dc:	eef0 7a40 	vmov.f32	s15, s0
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	edc3 7a03 	vstr	s15, [r3, #12]
	anglesComputed = 1;
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	2201      	movs	r2, #1
 801e4ea:	751a      	strb	r2, [r3, #20]
}
 801e4ec:	bf00      	nop
 801e4ee:	3708      	adds	r7, #8
 801e4f0:	46bd      	mov	sp, r7
 801e4f2:	bd80      	pop	{r7, pc}

0801e4f4 <_ZN20core_hardware_ButtonC1EP12GPIO_TypeDeft>:

#include "core_hardware_button.h"



core_hardware_Button::core_hardware_Button(GPIO_TypeDef* port, uint16_t pin) {
 801e4f4:	b480      	push	{r7}
 801e4f6:	b085      	sub	sp, #20
 801e4f8:	af00      	add	r7, sp, #0
 801e4fa:	60f8      	str	r0, [r7, #12]
 801e4fc:	60b9      	str	r1, [r7, #8]
 801e4fe:	4613      	mov	r3, r2
 801e500:	80fb      	strh	r3, [r7, #6]
	this->port = port;
 801e502:	68fb      	ldr	r3, [r7, #12]
 801e504:	68ba      	ldr	r2, [r7, #8]
 801e506:	601a      	str	r2, [r3, #0]
	this->pin = pin;
 801e508:	68fb      	ldr	r3, [r7, #12]
 801e50a:	88fa      	ldrh	r2, [r7, #6]
 801e50c:	809a      	strh	r2, [r3, #4]
}
 801e50e:	68fb      	ldr	r3, [r7, #12]
 801e510:	4618      	mov	r0, r3
 801e512:	3714      	adds	r7, #20
 801e514:	46bd      	mov	sp, r7
 801e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e51a:	4770      	bx	lr

0801e51c <_ZN20core_hardware_Button5checkEv>:


uint8_t core_hardware_Button::check() {
 801e51c:	b580      	push	{r7, lr}
 801e51e:	b082      	sub	sp, #8
 801e520:	af00      	add	r7, sp, #0
 801e522:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(this->port, this->pin);
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	681a      	ldr	r2, [r3, #0]
 801e528:	687b      	ldr	r3, [r7, #4]
 801e52a:	889b      	ldrh	r3, [r3, #4]
 801e52c:	4619      	mov	r1, r3
 801e52e:	4610      	mov	r0, r2
 801e530:	f7e7 feb6 	bl	80062a0 <HAL_GPIO_ReadPin>
 801e534:	4603      	mov	r3, r0
}
 801e536:	4618      	mov	r0, r3
 801e538:	3708      	adds	r7, #8
 801e53a:	46bd      	mov	sp, r7
 801e53c:	bd80      	pop	{r7, pc}

0801e53e <_ZN17core_hardware_LEDC1EP12GPIO_TypeDeft>:
 */


#include "core_hardware_led.h"

core_hardware_LED::core_hardware_LED(GPIO_TypeDef* GPIOx, uint16_t PINx) {
 801e53e:	b480      	push	{r7}
 801e540:	b085      	sub	sp, #20
 801e542:	af00      	add	r7, sp, #0
 801e544:	60f8      	str	r0, [r7, #12]
 801e546:	60b9      	str	r1, [r7, #8]
 801e548:	4613      	mov	r3, r2
 801e54a:	80fb      	strh	r3, [r7, #6]
	this->GPIOx = GPIOx;
 801e54c:	68fb      	ldr	r3, [r7, #12]
 801e54e:	68ba      	ldr	r2, [r7, #8]
 801e550:	601a      	str	r2, [r3, #0]
	this->PINx = PINx;
 801e552:	68fb      	ldr	r3, [r7, #12]
 801e554:	88fa      	ldrh	r2, [r7, #6]
 801e556:	809a      	strh	r2, [r3, #4]
}
 801e558:	68fb      	ldr	r3, [r7, #12]
 801e55a:	4618      	mov	r0, r3
 801e55c:	3714      	adds	r7, #20
 801e55e:	46bd      	mov	sp, r7
 801e560:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e564:	4770      	bx	lr

0801e566 <_ZN17core_hardware_LED2onEv>:

void core_hardware_LED::on() {
 801e566:	b580      	push	{r7, lr}
 801e568:	b082      	sub	sp, #8
 801e56a:	af00      	add	r7, sp, #0
 801e56c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_SET);
 801e56e:	687b      	ldr	r3, [r7, #4]
 801e570:	6818      	ldr	r0, [r3, #0]
 801e572:	687b      	ldr	r3, [r7, #4]
 801e574:	889b      	ldrh	r3, [r3, #4]
 801e576:	2201      	movs	r2, #1
 801e578:	4619      	mov	r1, r3
 801e57a:	f7e7 fea9 	bl	80062d0 <HAL_GPIO_WritePin>
}
 801e57e:	bf00      	nop
 801e580:	3708      	adds	r7, #8
 801e582:	46bd      	mov	sp, r7
 801e584:	bd80      	pop	{r7, pc}

0801e586 <_ZN17core_hardware_LED3offEv>:


void core_hardware_LED::off() {
 801e586:	b580      	push	{r7, lr}
 801e588:	b082      	sub	sp, #8
 801e58a:	af00      	add	r7, sp, #0
 801e58c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(this->GPIOx, this->PINx, GPIO_PIN_RESET);
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	6818      	ldr	r0, [r3, #0]
 801e592:	687b      	ldr	r3, [r7, #4]
 801e594:	889b      	ldrh	r3, [r3, #4]
 801e596:	2200      	movs	r2, #0
 801e598:	4619      	mov	r1, r3
 801e59a:	f7e7 fe99 	bl	80062d0 <HAL_GPIO_WritePin>
}
 801e59e:	bf00      	nop
 801e5a0:	3708      	adds	r7, #8
 801e5a2:	46bd      	mov	sp, r7
 801e5a4:	bd80      	pop	{r7, pc}

0801e5a6 <_ZN17core_hardware_LED6toggleEv>:

void core_hardware_LED::toggle() {
 801e5a6:	b580      	push	{r7, lr}
 801e5a8:	b082      	sub	sp, #8
 801e5aa:	af00      	add	r7, sp, #0
 801e5ac:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(this->GPIOx, this->PINx);
 801e5ae:	687b      	ldr	r3, [r7, #4]
 801e5b0:	681a      	ldr	r2, [r3, #0]
 801e5b2:	687b      	ldr	r3, [r7, #4]
 801e5b4:	889b      	ldrh	r3, [r3, #4]
 801e5b6:	4619      	mov	r1, r3
 801e5b8:	4610      	mov	r0, r2
 801e5ba:	f7e7 fea2 	bl	8006302 <HAL_GPIO_TogglePin>
}
 801e5be:	bf00      	nop
 801e5c0:	3708      	adds	r7, #8
 801e5c2:	46bd      	mov	sp, r7
 801e5c4:	bd80      	pop	{r7, pc}
	...

0801e5c8 <_Z15spi_callback_rxP19__SPI_HandleTypeDef>:
#include "core_hardware_spi.h"

core_hardware_SPI_slave *active_spi_slave = NULL;

/* ====================================================== */
void spi_callback_rx(SPI_HandleTypeDef *hspi) {
 801e5c8:	b580      	push	{r7, lr}
 801e5ca:	b082      	sub	sp, #8
 801e5cc:	af00      	add	r7, sp, #0
 801e5ce:	6078      	str	r0, [r7, #4]

	if (active_spi_slave != NULL) {
 801e5d0:	4b06      	ldr	r3, [pc, #24]	@ (801e5ec <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x24>)
 801e5d2:	681b      	ldr	r3, [r3, #0]
 801e5d4:	2b00      	cmp	r3, #0
 801e5d6:	d004      	beq.n	801e5e2 <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->rx_cmplt_function();
 801e5d8:	4b04      	ldr	r3, [pc, #16]	@ (801e5ec <_Z15spi_callback_rxP19__SPI_HandleTypeDef+0x24>)
 801e5da:	681b      	ldr	r3, [r3, #0]
 801e5dc:	4618      	mov	r0, r3
 801e5de:	f000 f8eb 	bl	801e7b8 <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv>
	}
}
 801e5e2:	bf00      	nop
 801e5e4:	3708      	adds	r7, #8
 801e5e6:	46bd      	mov	sp, r7
 801e5e8:	bd80      	pop	{r7, pc}
 801e5ea:	bf00      	nop
 801e5ec:	2401e050 	.word	0x2401e050

0801e5f0 <_Z15spi_callback_txP19__SPI_HandleTypeDef>:

/* ====================================================== */
void spi_callback_tx(SPI_HandleTypeDef *hspi) {
 801e5f0:	b580      	push	{r7, lr}
 801e5f2:	b082      	sub	sp, #8
 801e5f4:	af00      	add	r7, sp, #0
 801e5f6:	6078      	str	r0, [r7, #4]
	if (active_spi_slave != NULL) {
 801e5f8:	4b06      	ldr	r3, [pc, #24]	@ (801e614 <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x24>)
 801e5fa:	681b      	ldr	r3, [r3, #0]
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d004      	beq.n	801e60a <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->tx_cmplt_function();
 801e600:	4b04      	ldr	r3, [pc, #16]	@ (801e614 <_Z15spi_callback_txP19__SPI_HandleTypeDef+0x24>)
 801e602:	681b      	ldr	r3, [r3, #0]
 801e604:	4618      	mov	r0, r3
 801e606:	f000 f8e8 	bl	801e7da <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv>
	}
}
 801e60a:	bf00      	nop
 801e60c:	3708      	adds	r7, #8
 801e60e:	46bd      	mov	sp, r7
 801e610:	bd80      	pop	{r7, pc}
 801e612:	bf00      	nop
 801e614:	2401e050 	.word	0x2401e050

0801e618 <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef>:

/* ====================================================== */
void spi_callback_rxtx(SPI_HandleTypeDef *hspi) {
 801e618:	b580      	push	{r7, lr}
 801e61a:	b082      	sub	sp, #8
 801e61c:	af00      	add	r7, sp, #0
 801e61e:	6078      	str	r0, [r7, #4]
	if (active_spi_slave != NULL) {
 801e620:	4b06      	ldr	r3, [pc, #24]	@ (801e63c <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x24>)
 801e622:	681b      	ldr	r3, [r3, #0]
 801e624:	2b00      	cmp	r3, #0
 801e626:	d004      	beq.n	801e632 <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x1a>
		active_spi_slave->rxtx_cmplt_function();
 801e628:	4b04      	ldr	r3, [pc, #16]	@ (801e63c <_Z17spi_callback_rxtxP19__SPI_HandleTypeDef+0x24>)
 801e62a:	681b      	ldr	r3, [r3, #0]
 801e62c:	4618      	mov	r0, r3
 801e62e:	f000 f8e6 	bl	801e7fe <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv>
	}
}
 801e632:	bf00      	nop
 801e634:	3708      	adds	r7, #8
 801e636:	46bd      	mov	sp, r7
 801e638:	bd80      	pop	{r7, pc}
 801e63a:	bf00      	nop
 801e63c:	2401e050 	.word	0x2401e050

0801e640 <_ZN29core_hardware_spi_callbacks_tC1Ev>:
	SPI_HandleTypeDef *hspi;
	uint8_t *rx_buffer;
	uint8_t *tx_buffer;
} core_hardware_spi_config_t;

typedef struct core_hardware_spi_callbacks_t {
 801e640:	b580      	push	{r7, lr}
 801e642:	b082      	sub	sp, #8
 801e644:	af00      	add	r7, sp, #0
 801e646:	6078      	str	r0, [r7, #4]
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	4618      	mov	r0, r3
 801e64c:	f7f6 f9f0 	bl	8014a30 <_ZN19core_utils_CallbackIvvEC1Ev>
 801e650:	687b      	ldr	r3, [r7, #4]
 801e652:	3320      	adds	r3, #32
 801e654:	4618      	mov	r0, r3
 801e656:	f7f6 f9eb 	bl	8014a30 <_ZN19core_utils_CallbackIvvEC1Ev>
 801e65a:	687b      	ldr	r3, [r7, #4]
 801e65c:	3340      	adds	r3, #64	@ 0x40
 801e65e:	4618      	mov	r0, r3
 801e660:	f7f6 f9e6 	bl	8014a30 <_ZN19core_utils_CallbackIvvEC1Ev>
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	4618      	mov	r0, r3
 801e668:	3708      	adds	r7, #8
 801e66a:	46bd      	mov	sp, r7
 801e66c:	bd80      	pop	{r7, pc}

0801e66e <_ZN23core_hardware_SPI_slaveC1Ev>:

/* ====================================================== */
core_hardware_SPI_slave::core_hardware_SPI_slave() {
 801e66e:	b580      	push	{r7, lr}
 801e670:	b082      	sub	sp, #8
 801e672:	af00      	add	r7, sp, #0
 801e674:	6078      	str	r0, [r7, #4]
 801e676:	687b      	ldr	r3, [r7, #4]
 801e678:	330c      	adds	r3, #12
 801e67a:	4618      	mov	r0, r3
 801e67c:	f7ff ffe0 	bl	801e640 <_ZN29core_hardware_spi_callbacks_tC1Ev>

}
 801e680:	687b      	ldr	r3, [r7, #4]
 801e682:	4618      	mov	r0, r3
 801e684:	3708      	adds	r7, #8
 801e686:	46bd      	mov	sp, r7
 801e688:	bd80      	pop	{r7, pc}
	...

0801e68c <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t>:

/* ====================================================== */
void core_hardware_SPI_slave::init(core_hardware_spi_config_t config) {
 801e68c:	b590      	push	{r4, r7, lr}
 801e68e:	b085      	sub	sp, #20
 801e690:	af00      	add	r7, sp, #0
 801e692:	60f8      	str	r0, [r7, #12]
 801e694:	4638      	mov	r0, r7
 801e696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->config = config;
 801e69a:	68fb      	ldr	r3, [r7, #12]
 801e69c:	461c      	mov	r4, r3
 801e69e:	463b      	mov	r3, r7
 801e6a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e6a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	active_spi_slave = this;
 801e6a8:	4a13      	ldr	r2, [pc, #76]	@ (801e6f8 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x6c>)
 801e6aa:	68fb      	ldr	r3, [r7, #12]
 801e6ac:	6013      	str	r3, [r2, #0]

	this->callbacks.rx_callback.registered = 0;
 801e6ae:	68fb      	ldr	r3, [r7, #12]
 801e6b0:	2200      	movs	r2, #0
 801e6b2:	741a      	strb	r2, [r3, #16]
	this->callbacks.tx_callback.registered = 0;
 801e6b4:	68fb      	ldr	r3, [r7, #12]
 801e6b6:	2200      	movs	r2, #0
 801e6b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	this->callbacks.rxtx_callback.registered = 0;
 801e6bc:	68fb      	ldr	r3, [r7, #12]
 801e6be:	2200      	movs	r2, #0
 801e6c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_RX_COMPLETE_CB_ID,
 801e6c4:	68fb      	ldr	r3, [r7, #12]
 801e6c6:	681b      	ldr	r3, [r3, #0]
 801e6c8:	4a0c      	ldr	r2, [pc, #48]	@ (801e6fc <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x70>)
 801e6ca:	2101      	movs	r1, #1
 801e6cc:	4618      	mov	r0, r3
 801e6ce:	f7eb fae1 	bl	8009c94 <HAL_SPI_RegisterCallback>
			spi_callback_rx);
	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_TX_COMPLETE_CB_ID,
 801e6d2:	68fb      	ldr	r3, [r7, #12]
 801e6d4:	681b      	ldr	r3, [r3, #0]
 801e6d6:	4a0a      	ldr	r2, [pc, #40]	@ (801e700 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x74>)
 801e6d8:	2100      	movs	r1, #0
 801e6da:	4618      	mov	r0, r3
 801e6dc:	f7eb fada 	bl	8009c94 <HAL_SPI_RegisterCallback>
			spi_callback_tx);
	HAL_SPI_RegisterCallback(this->config.hspi, HAL_SPI_TX_RX_COMPLETE_CB_ID,
 801e6e0:	68fb      	ldr	r3, [r7, #12]
 801e6e2:	681b      	ldr	r3, [r3, #0]
 801e6e4:	4a07      	ldr	r2, [pc, #28]	@ (801e704 <_ZN23core_hardware_SPI_slave4initE26core_hardware_spi_config_t+0x78>)
 801e6e6:	2102      	movs	r1, #2
 801e6e8:	4618      	mov	r0, r3
 801e6ea:	f7eb fad3 	bl	8009c94 <HAL_SPI_RegisterCallback>
			spi_callback_rxtx);
}
 801e6ee:	bf00      	nop
 801e6f0:	3714      	adds	r7, #20
 801e6f2:	46bd      	mov	sp, r7
 801e6f4:	bd90      	pop	{r4, r7, pc}
 801e6f6:	bf00      	nop
 801e6f8:	2401e050 	.word	0x2401e050
 801e6fc:	0801e5c9 	.word	0x0801e5c9
 801e700:	0801e5f1 	.word	0x0801e5f1
 801e704:	0801e619 	.word	0x0801e619

0801e708 <_ZN23core_hardware_SPI_slave5startEv>:
/* ====================================================== */
void core_hardware_SPI_slave::start() {
 801e708:	b480      	push	{r7}
 801e70a:	b083      	sub	sp, #12
 801e70c:	af00      	add	r7, sp, #0
 801e70e:	6078      	str	r0, [r7, #4]

}
 801e710:	bf00      	nop
 801e712:	370c      	adds	r7, #12
 801e714:	46bd      	mov	sp, r7
 801e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e71a:	4770      	bx	lr

0801e71c <_ZN23core_hardware_SPI_slave11receiveDataEPht>:
/* ====================================================== */
void core_hardware_SPI_slave::receiveData(uint16_t len) {
	HAL_SPI_Receive_DMA(this->config.hspi, this->config.rx_buffer, len);
}
/* ====================================================== */
void core_hardware_SPI_slave::receiveData(uint8_t *data, uint16_t len) {
 801e71c:	b580      	push	{r7, lr}
 801e71e:	b084      	sub	sp, #16
 801e720:	af00      	add	r7, sp, #0
 801e722:	60f8      	str	r0, [r7, #12]
 801e724:	60b9      	str	r1, [r7, #8]
 801e726:	4613      	mov	r3, r2
 801e728:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Receive_DMA(this->config.hspi, data, len);
 801e72a:	68fb      	ldr	r3, [r7, #12]
 801e72c:	681b      	ldr	r3, [r3, #0]
 801e72e:	88fa      	ldrh	r2, [r7, #6]
 801e730:	68b9      	ldr	r1, [r7, #8]
 801e732:	4618      	mov	r0, r3
 801e734:	f7ec f84a 	bl	800a7cc <HAL_SPI_Receive_DMA>
}
 801e738:	bf00      	nop
 801e73a:	3710      	adds	r7, #16
 801e73c:	46bd      	mov	sp, r7
 801e73e:	bd80      	pop	{r7, pc}

0801e740 <_ZN23core_hardware_SPI_slave11provideDataEPht>:
/* ====================================================== */
void core_hardware_SPI_slave::provideData(uint16_t len) {
	HAL_SPI_Transmit_DMA(this->config.hspi, this->config.tx_buffer, len);
}
/* ====================================================== */
void core_hardware_SPI_slave::provideData(uint8_t *data, uint16_t len) {
 801e740:	b580      	push	{r7, lr}
 801e742:	b084      	sub	sp, #16
 801e744:	af00      	add	r7, sp, #0
 801e746:	60f8      	str	r0, [r7, #12]
 801e748:	60b9      	str	r1, [r7, #8]
 801e74a:	4613      	mov	r3, r2
 801e74c:	80fb      	strh	r3, [r7, #6]
	HAL_SPI_Transmit_DMA(this->config.hspi, data, len);
 801e74e:	68fb      	ldr	r3, [r7, #12]
 801e750:	681b      	ldr	r3, [r3, #0]
 801e752:	88fa      	ldrh	r2, [r7, #6]
 801e754:	68b9      	ldr	r1, [r7, #8]
 801e756:	4618      	mov	r0, r3
 801e758:	f7eb fee4 	bl	800a524 <HAL_SPI_Transmit_DMA>
}
 801e75c:	bf00      	nop
 801e75e:	3710      	adds	r7, #16
 801e760:	46bd      	mov	sp, r7
 801e762:	bd80      	pop	{r7, pc}

0801e764 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE>:
	HAL_SPI_TransmitReceive_DMA(this->config.hspi, tx_buf, rx_buf, len);
}
/* ====================================================== */
void core_hardware_SPI_slave::registerCallback(
		core_hardware_spi_callback_id_t callback_id,
		core_utils_Callback<void, void> callback) {
 801e764:	b580      	push	{r7, lr}
 801e766:	b084      	sub	sp, #16
 801e768:	af00      	add	r7, sp, #0
 801e76a:	60f8      	str	r0, [r7, #12]
 801e76c:	460b      	mov	r3, r1
 801e76e:	607a      	str	r2, [r7, #4]
 801e770:	72fb      	strb	r3, [r7, #11]

	switch (callback_id) {
 801e772:	7afb      	ldrb	r3, [r7, #11]
 801e774:	2b02      	cmp	r3, #2
 801e776:	d014      	beq.n	801e7a2 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x3e>
 801e778:	2b02      	cmp	r3, #2
 801e77a:	dc19      	bgt.n	801e7b0 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
 801e77c:	2b00      	cmp	r3, #0
 801e77e:	d002      	beq.n	801e786 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x22>
 801e780:	2b01      	cmp	r3, #1
 801e782:	d007      	beq.n	801e794 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x30>
	case CORE_HARDWARE_SPI_CALLBACK_RXTX: {
		this->callbacks.rxtx_callback = callback;
		break;
	}
	}
}
 801e784:	e014      	b.n	801e7b0 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.rx_callback = callback;
 801e786:	68fb      	ldr	r3, [r7, #12]
 801e788:	330c      	adds	r3, #12
 801e78a:	6879      	ldr	r1, [r7, #4]
 801e78c:	4618      	mov	r0, r3
 801e78e:	f7f5 ff15 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801e792:	e00d      	b.n	801e7b0 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.tx_callback = callback;
 801e794:	68fb      	ldr	r3, [r7, #12]
 801e796:	332c      	adds	r3, #44	@ 0x2c
 801e798:	6879      	ldr	r1, [r7, #4]
 801e79a:	4618      	mov	r0, r3
 801e79c:	f7f5 ff0e 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801e7a0:	e006      	b.n	801e7b0 <_ZN23core_hardware_SPI_slave16registerCallbackE31core_hardware_spi_callback_id_t19core_utils_CallbackIvvE+0x4c>
		this->callbacks.rxtx_callback = callback;
 801e7a2:	68fb      	ldr	r3, [r7, #12]
 801e7a4:	334c      	adds	r3, #76	@ 0x4c
 801e7a6:	6879      	ldr	r1, [r7, #4]
 801e7a8:	4618      	mov	r0, r3
 801e7aa:	f7f5 ff07 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 801e7ae:	bf00      	nop
}
 801e7b0:	bf00      	nop
 801e7b2:	3710      	adds	r7, #16
 801e7b4:	46bd      	mov	sp, r7
 801e7b6:	bd80      	pop	{r7, pc}

0801e7b8 <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv>:

/* ====================================================== */
void core_hardware_SPI_slave::rx_cmplt_function() {
 801e7b8:	b580      	push	{r7, lr}
 801e7ba:	b082      	sub	sp, #8
 801e7bc:	af00      	add	r7, sp, #0
 801e7be:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.rx_callback.registered) {
 801e7c0:	687b      	ldr	r3, [r7, #4]
 801e7c2:	7c1b      	ldrb	r3, [r3, #16]
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	d004      	beq.n	801e7d2 <_ZN23core_hardware_SPI_slave17rx_cmplt_functionEv+0x1a>
		this->callbacks.rx_callback.call();
 801e7c8:	687b      	ldr	r3, [r7, #4]
 801e7ca:	330c      	adds	r3, #12
 801e7cc:	4618      	mov	r0, r3
 801e7ce:	f7f5 fd76 	bl	80142be <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 801e7d2:	bf00      	nop
 801e7d4:	3708      	adds	r7, #8
 801e7d6:	46bd      	mov	sp, r7
 801e7d8:	bd80      	pop	{r7, pc}

0801e7da <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv>:
/* ====================================================== */
void core_hardware_SPI_slave::tx_cmplt_function() {
 801e7da:	b580      	push	{r7, lr}
 801e7dc:	b082      	sub	sp, #8
 801e7de:	af00      	add	r7, sp, #0
 801e7e0:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.tx_callback.registered) {
 801e7e2:	687b      	ldr	r3, [r7, #4]
 801e7e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801e7e8:	2b00      	cmp	r3, #0
 801e7ea:	d004      	beq.n	801e7f6 <_ZN23core_hardware_SPI_slave17tx_cmplt_functionEv+0x1c>
		this->callbacks.tx_callback.call();
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	332c      	adds	r3, #44	@ 0x2c
 801e7f0:	4618      	mov	r0, r3
 801e7f2:	f7f5 fd64 	bl	80142be <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 801e7f6:	bf00      	nop
 801e7f8:	3708      	adds	r7, #8
 801e7fa:	46bd      	mov	sp, r7
 801e7fc:	bd80      	pop	{r7, pc}

0801e7fe <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv>:
/* ====================================================== */
void core_hardware_SPI_slave::rxtx_cmplt_function() {
 801e7fe:	b580      	push	{r7, lr}
 801e800:	b082      	sub	sp, #8
 801e802:	af00      	add	r7, sp, #0
 801e804:	6078      	str	r0, [r7, #4]
	// TODO
	if (this->callbacks.rxtx_callback.registered) {
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801e80c:	2b00      	cmp	r3, #0
 801e80e:	d004      	beq.n	801e81a <_ZN23core_hardware_SPI_slave19rxtx_cmplt_functionEv+0x1c>
		this->callbacks.rxtx_callback.call();
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	334c      	adds	r3, #76	@ 0x4c
 801e814:	4618      	mov	r0, r3
 801e816:	f7f5 fd52 	bl	80142be <_ZN19core_utils_CallbackIvvE4callEv>
	}
}
 801e81a:	bf00      	nop
 801e81c:	3708      	adds	r7, #8
 801e81e:	46bd      	mov	sp, r7
 801e820:	bd80      	pop	{r7, pc}
	...

0801e824 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft>:
		CORE_HARDWARE_UART_MODE_DMA, .cobs_encode_rx = 1, .cobs_encode_tx = 1,
		.queues = 1, };


/* ============================================================================= */
void uartRxCmpltDMA_callback(UART_HandleTypeDef *huart, uint16_t size) {
 801e824:	b580      	push	{r7, lr}
 801e826:	b084      	sub	sp, #16
 801e828:	af00      	add	r7, sp, #0
 801e82a:	6078      	str	r0, [r7, #4]
 801e82c:	460b      	mov	r3, r1
 801e82e:	807b      	strh	r3, [r7, #2]
	for (int i = 0; i < num_uarts; i++) {
 801e830:	2300      	movs	r3, #0
 801e832:	60fb      	str	r3, [r7, #12]
 801e834:	e02b      	b.n	801e88e <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x6a>
		if (!(uarts[i] == NULL) && (uarts[i]->get_huart() == huart)) {
 801e836:	4a1b      	ldr	r2, [pc, #108]	@ (801e8a4 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801e838:	68fb      	ldr	r3, [r7, #12]
 801e83a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801e83e:	2b00      	cmp	r3, #0
 801e840:	d012      	beq.n	801e868 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x44>
 801e842:	4a18      	ldr	r2, [pc, #96]	@ (801e8a4 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801e844:	68fb      	ldr	r3, [r7, #12]
 801e846:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801e84a:	4916      	ldr	r1, [pc, #88]	@ (801e8a4 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801e84c:	68fb      	ldr	r3, [r7, #12]
 801e84e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801e852:	681b      	ldr	r3, [r3, #0]
 801e854:	3304      	adds	r3, #4
 801e856:	681b      	ldr	r3, [r3, #0]
 801e858:	4610      	mov	r0, r2
 801e85a:	4798      	blx	r3
 801e85c:	4602      	mov	r2, r0
 801e85e:	687b      	ldr	r3, [r7, #4]
 801e860:	4293      	cmp	r3, r2
 801e862:	d101      	bne.n	801e868 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x44>
 801e864:	2301      	movs	r3, #1
 801e866:	e000      	b.n	801e86a <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x46>
 801e868:	2300      	movs	r3, #0
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d00c      	beq.n	801e888 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x64>
			uarts[i]->rxFunction(size);
 801e86e:	4a0d      	ldr	r2, [pc, #52]	@ (801e8a4 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801e870:	68fb      	ldr	r3, [r7, #12]
 801e872:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801e876:	490b      	ldr	r1, [pc, #44]	@ (801e8a4 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x80>)
 801e878:	68fb      	ldr	r3, [r7, #12]
 801e87a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801e87e:	681b      	ldr	r3, [r3, #0]
 801e880:	681b      	ldr	r3, [r3, #0]
 801e882:	8879      	ldrh	r1, [r7, #2]
 801e884:	4610      	mov	r0, r2
 801e886:	4798      	blx	r3
	for (int i = 0; i < num_uarts; i++) {
 801e888:	68fb      	ldr	r3, [r7, #12]
 801e88a:	3301      	adds	r3, #1
 801e88c:	60fb      	str	r3, [r7, #12]
 801e88e:	4b06      	ldr	r3, [pc, #24]	@ (801e8a8 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x84>)
 801e890:	781b      	ldrb	r3, [r3, #0]
 801e892:	461a      	mov	r2, r3
 801e894:	68fb      	ldr	r3, [r7, #12]
 801e896:	4293      	cmp	r3, r2
 801e898:	dbcd      	blt.n	801e836 <_Z23uartRxCmpltDMA_callbackP20__UART_HandleTypeDeft+0x12>
		}
	}
}
 801e89a:	bf00      	nop
 801e89c:	bf00      	nop
 801e89e:	3710      	adds	r7, #16
 801e8a0:	46bd      	mov	sp, r7
 801e8a2:	bd80      	pop	{r7, pc}
 801e8a4:	2401e054 	.word	0x2401e054
 801e8a8:	2401e068 	.word	0x2401e068

0801e8ac <_ZN23simplexmotion_callbacksC1Ev>:

typedef enum simplexmotion_callback_id {
	SIMPLEXMOTION_CB_ERROR = 0,
} simplexmotion_callback_id;

typedef struct simplexmotion_callbacks {
 801e8ac:	b580      	push	{r7, lr}
 801e8ae:	b082      	sub	sp, #8
 801e8b0:	af00      	add	r7, sp, #0
 801e8b2:	6078      	str	r0, [r7, #4]
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	4618      	mov	r0, r3
 801e8b8:	f7f6 f8ba 	bl	8014a30 <_ZN19core_utils_CallbackIvvEC1Ev>
 801e8bc:	687b      	ldr	r3, [r7, #4]
 801e8be:	4618      	mov	r0, r3
 801e8c0:	3708      	adds	r7, #8
 801e8c2:	46bd      	mov	sp, r7
 801e8c4:	bd80      	pop	{r7, pc}

0801e8c6 <_ZN18SimplexMotionMotorC1Ev>:
 *      Author: lehmann_workstation
 */

#include "simplexmotion.hpp"

SimplexMotionMotor::SimplexMotionMotor() {
 801e8c6:	b580      	push	{r7, lr}
 801e8c8:	b082      	sub	sp, #8
 801e8ca:	af00      	add	r7, sp, #0
 801e8cc:	6078      	str	r0, [r7, #4]
 801e8ce:	687b      	ldr	r3, [r7, #4]
 801e8d0:	3304      	adds	r3, #4
 801e8d2:	4618      	mov	r0, r3
 801e8d4:	f7ff ffea 	bl	801e8ac <_ZN23simplexmotion_callbacksC1Ev>
 801e8d8:	687b      	ldr	r3, [r7, #4]
 801e8da:	f04f 0200 	mov.w	r2, #0
 801e8de:	649a      	str	r2, [r3, #72]	@ 0x48
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	2200      	movs	r2, #0
 801e8e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	2200      	movs	r2, #0
 801e8ec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	2200      	movs	r2, #0
 801e8f4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e

}
 801e8f8:	687b      	ldr	r3, [r7, #4]
 801e8fa:	4618      	mov	r0, r3
 801e8fc:	3708      	adds	r7, #8
 801e8fe:	46bd      	mov	sp, r7
 801e900:	bd80      	pop	{r7, pc}

0801e902 <_ZN18SimplexMotionMotor14writeRegistersEttPt>:

// ==============================================================
uint8_t SimplexMotionMotor::writeRegisters(uint16_t address,
		uint16_t num_registers, uint16_t *data) {
 801e902:	b580      	push	{r7, lr}
 801e904:	b08c      	sub	sp, #48	@ 0x30
 801e906:	af02      	add	r7, sp, #8
 801e908:	60f8      	str	r0, [r7, #12]
 801e90a:	607b      	str	r3, [r7, #4]
 801e90c:	460b      	mov	r3, r1
 801e90e:	817b      	strh	r3, [r7, #10]
 801e910:	4613      	mov	r3, r2
 801e912:	813b      	strh	r3, [r7, #8]

	int32_t u32NotificationValue;
	modbus_query_t telegram;

	telegram.u8id = this->_config.id;
 801e914:	68fb      	ldr	r3, [r7, #12]
 801e916:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801e91a:	753b      	strb	r3, [r7, #20]

	if (num_registers > 1) {
 801e91c:	893b      	ldrh	r3, [r7, #8]
 801e91e:	2b01      	cmp	r3, #1
 801e920:	d902      	bls.n	801e928 <_ZN18SimplexMotionMotor14writeRegistersEttPt+0x26>
		telegram.u8fct = MB_FC_WRITE_MULTIPLE_REGISTERS;
 801e922:	2310      	movs	r3, #16
 801e924:	757b      	strb	r3, [r7, #21]
 801e926:	e001      	b.n	801e92c <_ZN18SimplexMotionMotor14writeRegistersEttPt+0x2a>
	} else {
		telegram.u8fct = MB_FC_WRITE_REGISTER;
 801e928:	2306      	movs	r3, #6
 801e92a:	757b      	strb	r3, [r7, #21]
	}
	telegram.u16RegAdd = address; //read temp of motor = 101
 801e92c:	897b      	ldrh	r3, [r7, #10]
 801e92e:	82fb      	strh	r3, [r7, #22]
	telegram.u16CoilsNo = num_registers;
 801e930:	893b      	ldrh	r3, [r7, #8]
 801e932:	833b      	strh	r3, [r7, #24]
	telegram.u16reg = data;
 801e934:	687b      	ldr	r3, [r7, #4]
 801e936:	61fb      	str	r3, [r7, #28]

	this->_config.modbus->query(telegram);
 801e938:	68fb      	ldr	r3, [r7, #12]
 801e93a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 801e93c:	6a3b      	ldr	r3, [r7, #32]
 801e93e:	9300      	str	r3, [sp, #0]
 801e940:	f107 0314 	add.w	r3, r7, #20
 801e944:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e946:	f7fe f9a7 	bl	801cc98 <_ZN12ModbusMaster5queryE14modbus_query_t>
//	u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finished
//	uint32_t ticks1 = osKernelGetTickCount();
	u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finished
 801e94a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e94e:	2001      	movs	r0, #1
 801e950:	f7f3 ffde 	bl	8012910 <ulTaskNotifyTake>
 801e954:	4603      	mov	r3, r0
 801e956:	627b      	str	r3, [r7, #36]	@ 0x24
//	uint32_t ticks2 = osKernelGetTickCount();

	if (u32NotificationValue != ERR_OK_QUERY) {
 801e958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e95a:	f113 0f0b 	cmn.w	r3, #11
 801e95e:	d00c      	beq.n	801e97a <_ZN18SimplexMotionMotor14writeRegistersEttPt+0x78>
		if (u32NotificationValue == ERR_TIME_OUT){
 801e960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e962:	f113 0f08 	cmn.w	r3, #8
 801e966:	d101      	bne.n	801e96c <_ZN18SimplexMotionMotor14writeRegistersEttPt+0x6a>
			nop();
 801e968:	f7f5 fe48 	bl	80145fc <_Z3nopv>
		}
		this->error_handler(SIMPLEXMOTION_ERROR_EXTERNAL_CONNECTION);
 801e96c:	f248 0101 	movw	r1, #32769	@ 0x8001
 801e970:	68f8      	ldr	r0, [r7, #12]
 801e972:	f000 fb54 	bl	801f01e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>
		return 0;
 801e976:	2300      	movs	r3, #0
 801e978:	e000      	b.n	801e97c <_ZN18SimplexMotionMotor14writeRegistersEttPt+0x7a>
	} else {
		return 1;
 801e97a:	2301      	movs	r3, #1
	}
}
 801e97c:	4618      	mov	r0, r3
 801e97e:	3728      	adds	r7, #40	@ 0x28
 801e980:	46bd      	mov	sp, r7
 801e982:	bd80      	pop	{r7, pc}

0801e984 <_ZN18SimplexMotionMotor13readRegistersEttPt>:

// ==============================================================
uint8_t SimplexMotionMotor::readRegisters(uint16_t address,
		uint16_t num_registers, uint16_t *data) {
 801e984:	b580      	push	{r7, lr}
 801e986:	b08c      	sub	sp, #48	@ 0x30
 801e988:	af02      	add	r7, sp, #8
 801e98a:	60f8      	str	r0, [r7, #12]
 801e98c:	607b      	str	r3, [r7, #4]
 801e98e:	460b      	mov	r3, r1
 801e990:	817b      	strh	r3, [r7, #10]
 801e992:	4613      	mov	r3, r2
 801e994:	813b      	strh	r3, [r7, #8]
	int32_t u32NotificationValue;
	modbus_query_t telegram;

	telegram.u8id = this->_config.id;
 801e996:	68fb      	ldr	r3, [r7, #12]
 801e998:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801e99c:	753b      	strb	r3, [r7, #20]
	telegram.u8fct = MB_FC_READ_REGISTERS;
 801e99e:	2303      	movs	r3, #3
 801e9a0:	757b      	strb	r3, [r7, #21]
	telegram.u16RegAdd = address; //read temp of motor = 101
 801e9a2:	897b      	ldrh	r3, [r7, #10]
 801e9a4:	82fb      	strh	r3, [r7, #22]
	telegram.u16CoilsNo = num_registers;
 801e9a6:	893b      	ldrh	r3, [r7, #8]
 801e9a8:	833b      	strh	r3, [r7, #24]
	telegram.u16reg = data;
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	61fb      	str	r3, [r7, #28]

	this->_config.modbus->query(telegram);
 801e9ae:	68fb      	ldr	r3, [r7, #12]
 801e9b0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 801e9b2:	6a3b      	ldr	r3, [r7, #32]
 801e9b4:	9300      	str	r3, [sp, #0]
 801e9b6:	f107 0314 	add.w	r3, r7, #20
 801e9ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 801e9bc:	f7fe f96c 	bl	801cc98 <_ZN12ModbusMaster5queryE14modbus_query_t>
	u32NotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY); // block until query finished
 801e9c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801e9c4:	2001      	movs	r0, #1
 801e9c6:	f7f3 ffa3 	bl	8012910 <ulTaskNotifyTake>
 801e9ca:	4603      	mov	r3, r0
 801e9cc:	627b      	str	r3, [r7, #36]	@ 0x24
	if (u32NotificationValue != ERR_OK_QUERY) {
 801e9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9d0:	f113 0f0b 	cmn.w	r3, #11
 801e9d4:	d00c      	beq.n	801e9f0 <_ZN18SimplexMotionMotor13readRegistersEttPt+0x6c>
		if (u32NotificationValue == ERR_TIME_OUT){
 801e9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e9d8:	f113 0f08 	cmn.w	r3, #8
 801e9dc:	d101      	bne.n	801e9e2 <_ZN18SimplexMotionMotor13readRegistersEttPt+0x5e>
			nop();
 801e9de:	f7f5 fe0d 	bl	80145fc <_Z3nopv>
		}
		this->error_handler(SIMPLEXMOTION_ERROR_EXTERNAL_CONNECTION);
 801e9e2:	f248 0101 	movw	r1, #32769	@ 0x8001
 801e9e6:	68f8      	ldr	r0, [r7, #12]
 801e9e8:	f000 fb19 	bl	801f01e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>
		return 0;
 801e9ec:	2300      	movs	r3, #0
 801e9ee:	e000      	b.n	801e9f2 <_ZN18SimplexMotionMotor13readRegistersEttPt+0x6e>
	} else {
		return 1;
 801e9f0:	2301      	movs	r3, #1
	}
}
 801e9f2:	4618      	mov	r0, r3
 801e9f4:	3728      	adds	r7, #40	@ 0x28
 801e9f6:	46bd      	mov	sp, r7
 801e9f8:	bd80      	pop	{r7, pc}

0801e9fa <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t>:

// ==============================================================
uint8_t SimplexMotionMotor::init(simplexmotion_config_t config) {
 801e9fa:	b580      	push	{r7, lr}
 801e9fc:	b088      	sub	sp, #32
 801e9fe:	af00      	add	r7, sp, #0
 801ea00:	60f8      	str	r0, [r7, #12]
 801ea02:	1d3b      	adds	r3, r7, #4
 801ea04:	e883 0006 	stmia.w	r3, {r1, r2}

	this->_config = config;
 801ea08:	68fb      	ldr	r3, [r7, #12]
 801ea0a:	3350      	adds	r3, #80	@ 0x50
 801ea0c:	1d3a      	adds	r2, r7, #4
 801ea0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ea12:	e883 0003 	stmia.w	r3, {r0, r1}

	this->_checked = 0;
 801ea16:	68fb      	ldr	r3, [r7, #12]
 801ea18:	2200      	movs	r2, #0
 801ea1a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	this->_init = 0;
 801ea1e:	68fb      	ldr	r3, [r7, #12]
 801ea20:	2200      	movs	r2, #0
 801ea22:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

	uint8_t ret = 0;
 801ea26:	2300      	movs	r3, #0
 801ea28:	77fb      	strb	r3, [r7, #31]

	// Reset the motor
	ret = this->setMode(SIMPLEXMOTION_MODE_RESET);
 801ea2a:	2101      	movs	r1, #1
 801ea2c:	68f8      	ldr	r0, [r7, #12]
 801ea2e:	f000 f8b9 	bl	801eba4 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>
 801ea32:	4603      	mov	r3, r0
 801ea34:	77fb      	strb	r3, [r7, #31]

	// Read the motor status
	simplexmotion_status_t status;
	ret = this->getStatus(&status);
 801ea36:	f107 0314 	add.w	r3, r7, #20
 801ea3a:	4619      	mov	r1, r3
 801ea3c:	68f8      	ldr	r0, [r7, #12]
 801ea3e:	f000 fa92 	bl	801ef66 <_ZN18SimplexMotionMotor9getStatusEP22simplexmotion_status_t>
 801ea42:	4603      	mov	r3, r0
 801ea44:	77fb      	strb	r3, [r7, #31]

	if (not (ret)) {
 801ea46:	7ffb      	ldrb	r3, [r7, #31]
 801ea48:	2b00      	cmp	r3, #0
 801ea4a:	d101      	bne.n	801ea50 <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t+0x56>
		return 0;
 801ea4c:	2300      	movs	r3, #0
 801ea4e:	e008      	b.n	801ea62 <_ZN18SimplexMotionMotor4initE22simplexmotion_config_t+0x68>
	// Read the torque limit
//	float torque_limit = this->getTorqueLimit();

	// Read the ...

	this->_init = 1;
 801ea50:	68fb      	ldr	r3, [r7, #12]
 801ea52:	2201      	movs	r2, #1
 801ea54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
	this->_checked = 0;
 801ea58:	68fb      	ldr	r3, [r7, #12]
 801ea5a:	2200      	movs	r2, #0
 801ea5c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	return 1;
 801ea60:	2301      	movs	r3, #1
}
 801ea62:	4618      	mov	r0, r3
 801ea64:	3720      	adds	r7, #32
 801ea66:	46bd      	mov	sp, r7
 801ea68:	bd80      	pop	{r7, pc}

0801ea6a <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t>:

// ==============================================================
void SimplexMotionMotor::start(simplexmotion_mode_t mode) {
 801ea6a:	b580      	push	{r7, lr}
 801ea6c:	b084      	sub	sp, #16
 801ea6e:	af00      	add	r7, sp, #0
 801ea70:	6078      	str	r0, [r7, #4]
 801ea72:	460b      	mov	r3, r1
 801ea74:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 801ea76:	2300      	movs	r3, #0
 801ea78:	73fb      	strb	r3, [r7, #15]
	if (!this->_init) {
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 801ea80:	2b00      	cmp	r3, #0
 801ea82:	d101      	bne.n	801ea88 <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t+0x1e>
		while (1) {
 801ea84:	bf00      	nop
 801ea86:	e7fd      	b.n	801ea84 <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t+0x1a>
//
//		}
	}

	// Set the target to 0
	ret = this->setTarget(0);
 801ea88:	2100      	movs	r1, #0
 801ea8a:	6878      	ldr	r0, [r7, #4]
 801ea8c:	f000 fa4c 	bl	801ef28 <_ZN18SimplexMotionMotor9setTargetEl>
 801ea90:	4603      	mov	r3, r0
 801ea92:	73fb      	strb	r3, [r7, #15]
	if (not (ret)) {
 801ea94:	7bfb      	ldrb	r3, [r7, #15]
 801ea96:	2b00      	cmp	r3, #0
 801ea98:	d104      	bne.n	801eaa4 <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t+0x3a>
		this->error_handler(SIMPLEXMOTION_ERROR_EXTERNAL_CONNECTION);
 801ea9a:	f248 0101 	movw	r1, #32769	@ 0x8001
 801ea9e:	6878      	ldr	r0, [r7, #4]
 801eaa0:	f000 fabd 	bl	801f01e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>
	}

	// Set the corresponding mode
	ret = this->setMode(mode);
 801eaa4:	78fb      	ldrb	r3, [r7, #3]
 801eaa6:	4619      	mov	r1, r3
 801eaa8:	6878      	ldr	r0, [r7, #4]
 801eaaa:	f000 f87b 	bl	801eba4 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>
 801eaae:	4603      	mov	r3, r0
 801eab0:	73fb      	strb	r3, [r7, #15]
	if (not (ret)) {
 801eab2:	7bfb      	ldrb	r3, [r7, #15]
 801eab4:	2b00      	cmp	r3, #0
 801eab6:	d104      	bne.n	801eac2 <_ZN18SimplexMotionMotor5startE20simplexmotion_mode_t+0x58>
		this->error_handler(SIMPLEXMOTION_ERROR_EXTERNAL_CONNECTION);
 801eab8:	f248 0101 	movw	r1, #32769	@ 0x8001
 801eabc:	6878      	ldr	r0, [r7, #4]
 801eabe:	f000 faae 	bl	801f01e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>
	}
}
 801eac2:	bf00      	nop
 801eac4:	3710      	adds	r7, #16
 801eac6:	46bd      	mov	sp, r7
 801eac8:	bd80      	pop	{r7, pc}
	...

0801eacc <_ZN18SimplexMotionMotor13startup_checkEv>:

// ==============================================================

uint8_t SimplexMotionMotor::startup_check() {
 801eacc:	b580      	push	{r7, lr}
 801eace:	b086      	sub	sp, #24
 801ead0:	af00      	add	r7, sp, #0
 801ead2:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 801ead4:	2300      	movs	r3, #0
 801ead6:	75fb      	strb	r3, [r7, #23]

	// Beep the motor once
	ret = this->beep(200);
 801ead8:	21c8      	movs	r1, #200	@ 0xc8
 801eada:	6878      	ldr	r0, [r7, #4]
 801eadc:	f000 f8b1 	bl	801ec42 <_ZN18SimplexMotionMotor4beepEt>
 801eae0:	4603      	mov	r3, r0
 801eae2:	75fb      	strb	r3, [r7, #23]
	if (not (ret)) {
 801eae4:	7dfb      	ldrb	r3, [r7, #23]
 801eae6:	2b00      	cmp	r3, #0
 801eae8:	d101      	bne.n	801eaee <_ZN18SimplexMotionMotor13startup_checkEv+0x22>
		return 0;
 801eaea:	2300      	movs	r3, #0
 801eaec:	e052      	b.n	801eb94 <_ZN18SimplexMotionMotor13startup_checkEv+0xc8>
	}

	osDelay(250);
 801eaee:	20fa      	movs	r0, #250	@ 0xfa
 801eaf0:	f7f1 f9d2 	bl	800fe98 <osDelay>

	ret = this->stop();
 801eaf4:	6878      	ldr	r0, [r7, #4]
 801eaf6:	f000 f88d 	bl	801ec14 <_ZN18SimplexMotionMotor4stopEv>
 801eafa:	4603      	mov	r3, r0
 801eafc:	75fb      	strb	r3, [r7, #23]
	if (not (ret)) {
 801eafe:	7dfb      	ldrb	r3, [r7, #23]
 801eb00:	2b00      	cmp	r3, #0
 801eb02:	d101      	bne.n	801eb08 <_ZN18SimplexMotionMotor13startup_checkEv+0x3c>
		return 0;
 801eb04:	2300      	movs	r3, #0
 801eb06:	e045      	b.n	801eb94 <_ZN18SimplexMotionMotor13startup_checkEv+0xc8>
	}
	// Set the motor into torque mode
	ret = this->setMode(SIMPLEXMOTION_MODE_TORQUE);
 801eb08:	2128      	movs	r1, #40	@ 0x28
 801eb0a:	6878      	ldr	r0, [r7, #4]
 801eb0c:	f000 f84a 	bl	801eba4 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>
 801eb10:	4603      	mov	r3, r0
 801eb12:	75fb      	strb	r3, [r7, #23]

	if (not (ret)) {
 801eb14:	7dfb      	ldrb	r3, [r7, #23]
 801eb16:	2b00      	cmp	r3, #0
 801eb18:	d101      	bne.n	801eb1e <_ZN18SimplexMotionMotor13startup_checkEv+0x52>
		return 0;
 801eb1a:	2300      	movs	r3, #0
 801eb1c:	e03a      	b.n	801eb94 <_ZN18SimplexMotionMotor13startup_checkEv+0xc8>
	}

	// Read the current position of the motor
	int32_t position_before = this->getPositionRaw();
 801eb1e:	6878      	ldr	r0, [r7, #4]
 801eb20:	f000 f8a9 	bl	801ec76 <_ZN18SimplexMotionMotor14getPositionRawEv>
 801eb24:	6138      	str	r0, [r7, #16]

	// Apply a small torque for a short amount of time
	this->setTorque(0.03);
 801eb26:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 801eb9c <_ZN18SimplexMotionMotor13startup_checkEv+0xd0>
 801eb2a:	6878      	ldr	r0, [r7, #4]
 801eb2c:	f000 f9c0 	bl	801eeb0 <_ZN18SimplexMotionMotor9setTorqueEf>
	osDelay(250);
 801eb30:	20fa      	movs	r0, #250	@ 0xfa
 801eb32:	f7f1 f9b1 	bl	800fe98 <osDelay>
	this->setTorque(0.0);
 801eb36:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 801eba0 <_ZN18SimplexMotionMotor13startup_checkEv+0xd4>
 801eb3a:	6878      	ldr	r0, [r7, #4]
 801eb3c:	f000 f9b8 	bl	801eeb0 <_ZN18SimplexMotionMotor9setTorqueEf>
	osDelay(250);
 801eb40:	20fa      	movs	r0, #250	@ 0xfa
 801eb42:	f7f1 f9a9 	bl	800fe98 <osDelay>
	// Turn the motor off
//	this->stop();

	// Read the current position of the motor
	int32_t position_after = this->getPositionRaw();
 801eb46:	6878      	ldr	r0, [r7, #4]
 801eb48:	f000 f895 	bl	801ec76 <_ZN18SimplexMotionMotor14getPositionRawEv>
 801eb4c:	60f8      	str	r0, [r7, #12]

	// Check if the position has changed
	if (position_before == position_after) {
 801eb4e:	693a      	ldr	r2, [r7, #16]
 801eb50:	68fb      	ldr	r3, [r7, #12]
 801eb52:	429a      	cmp	r2, r3
 801eb54:	d101      	bne.n	801eb5a <_ZN18SimplexMotionMotor13startup_checkEv+0x8e>
		return 0;
 801eb56:	2300      	movs	r3, #0
 801eb58:	e01c      	b.n	801eb94 <_ZN18SimplexMotionMotor13startup_checkEv+0xc8>
	}

	this->beep(200);
 801eb5a:	21c8      	movs	r1, #200	@ 0xc8
 801eb5c:	6878      	ldr	r0, [r7, #4]
 801eb5e:	f000 f870 	bl	801ec42 <_ZN18SimplexMotionMotor4beepEt>
	osDelay(150);
 801eb62:	2096      	movs	r0, #150	@ 0x96
 801eb64:	f7f1 f998 	bl	800fe98 <osDelay>
	this->stop();
 801eb68:	6878      	ldr	r0, [r7, #4]
 801eb6a:	f000 f853 	bl	801ec14 <_ZN18SimplexMotionMotor4stopEv>
	osDelay(150);
 801eb6e:	2096      	movs	r0, #150	@ 0x96
 801eb70:	f7f1 f992 	bl	800fe98 <osDelay>
	this->beep(200);
 801eb74:	21c8      	movs	r1, #200	@ 0xc8
 801eb76:	6878      	ldr	r0, [r7, #4]
 801eb78:	f000 f863 	bl	801ec42 <_ZN18SimplexMotionMotor4beepEt>
	osDelay(300);
 801eb7c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 801eb80:	f7f1 f98a 	bl	800fe98 <osDelay>
	this->stop();
 801eb84:	6878      	ldr	r0, [r7, #4]
 801eb86:	f000 f845 	bl	801ec14 <_ZN18SimplexMotionMotor4stopEv>

	this->_checked = 1;
 801eb8a:	687b      	ldr	r3, [r7, #4]
 801eb8c:	2201      	movs	r2, #1
 801eb8e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
	return 1;
 801eb92:	2301      	movs	r3, #1
}
 801eb94:	4618      	mov	r0, r3
 801eb96:	3718      	adds	r7, #24
 801eb98:	46bd      	mov	sp, r7
 801eb9a:	bd80      	pop	{r7, pc}
 801eb9c:	3cf5c28f 	.word	0x3cf5c28f
 801eba0:	00000000 	.word	0x00000000

0801eba4 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>:
uint8_t SimplexMotionMotor::check() {

	return 1;
}
// ==============================================================
uint8_t SimplexMotionMotor::setMode(simplexmotion_mode_t mode) {
 801eba4:	b580      	push	{r7, lr}
 801eba6:	b084      	sub	sp, #16
 801eba8:	af00      	add	r7, sp, #0
 801ebaa:	6078      	str	r0, [r7, #4]
 801ebac:	460b      	mov	r3, r1
 801ebae:	70fb      	strb	r3, [r7, #3]
	uint16_t data = (uint16_t) mode;
 801ebb0:	78fb      	ldrb	r3, [r7, #3]
 801ebb2:	b29b      	uxth	r3, r3
 801ebb4:	81bb      	strh	r3, [r7, #12]

	// Set the mode
	uint8_t write_success = this->writeRegisters(SIMPLEXMOTION_REG_MODE, 1,
 801ebb6:	f107 030c 	add.w	r3, r7, #12
 801ebba:	2201      	movs	r2, #1
 801ebbc:	f240 118f 	movw	r1, #399	@ 0x18f
 801ebc0:	6878      	ldr	r0, [r7, #4]
 801ebc2:	f7ff fe9e 	bl	801e902 <_ZN18SimplexMotionMotor14writeRegistersEttPt>
 801ebc6:	4603      	mov	r3, r0
 801ebc8:	73fb      	strb	r3, [r7, #15]
			&data);
	if (not write_success) {
 801ebca:	7bfb      	ldrb	r3, [r7, #15]
 801ebcc:	2b00      	cmp	r3, #0
 801ebce:	d101      	bne.n	801ebd4 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x30>
		return 0;
 801ebd0:	2300      	movs	r3, #0
 801ebd2:	e01b      	b.n	801ec0c <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x68>
	}

	// Read back the mode
	uint16_t rx_data = 0;
 801ebd4:	2300      	movs	r3, #0
 801ebd6:	817b      	strh	r3, [r7, #10]
	uint8_t read_success = this->readRegisters(SIMPLEXMOTION_REG_MODE, 1,
 801ebd8:	f107 030a 	add.w	r3, r7, #10
 801ebdc:	2201      	movs	r2, #1
 801ebde:	f240 118f 	movw	r1, #399	@ 0x18f
 801ebe2:	6878      	ldr	r0, [r7, #4]
 801ebe4:	f7ff fece 	bl	801e984 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801ebe8:	4603      	mov	r3, r0
 801ebea:	73bb      	strb	r3, [r7, #14]
			&rx_data);

	if (not read_success) {
 801ebec:	7bbb      	ldrb	r3, [r7, #14]
 801ebee:	2b00      	cmp	r3, #0
 801ebf0:	d101      	bne.n	801ebf6 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x52>
		return 0;
 801ebf2:	2300      	movs	r3, #0
 801ebf4:	e00a      	b.n	801ec0c <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x68>
	}

	this->mode = rx_data;
 801ebf6:	897a      	ldrh	r2, [r7, #10]
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	801a      	strh	r2, [r3, #0]

	if (rx_data != mode) {
 801ebfc:	78fb      	ldrb	r3, [r7, #3]
 801ebfe:	b29a      	uxth	r2, r3
 801ec00:	897b      	ldrh	r3, [r7, #10]
 801ec02:	429a      	cmp	r2, r3
 801ec04:	d001      	beq.n	801ec0a <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x66>
		return 0;
 801ec06:	2300      	movs	r3, #0
 801ec08:	e000      	b.n	801ec0c <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t+0x68>
	}
	return 1;
 801ec0a:	2301      	movs	r3, #1
}
 801ec0c:	4618      	mov	r0, r3
 801ec0e:	3710      	adds	r7, #16
 801ec10:	46bd      	mov	sp, r7
 801ec12:	bd80      	pop	{r7, pc}

0801ec14 <_ZN18SimplexMotionMotor4stopEv>:

// ==============================================================
uint8_t SimplexMotionMotor::stop() {
 801ec14:	b580      	push	{r7, lr}
 801ec16:	b084      	sub	sp, #16
 801ec18:	af00      	add	r7, sp, #0
 801ec1a:	6078      	str	r0, [r7, #4]
//	uint16_t data = SIMPLEXMOTION_MODE_QUICKSTOP;
	uint16_t data = SIMPLEXMOTION_MODE_OFF;
 801ec1c:	2300      	movs	r3, #0
 801ec1e:	81fb      	strh	r3, [r7, #14]
	this->setTarget(0);
 801ec20:	2100      	movs	r1, #0
 801ec22:	6878      	ldr	r0, [r7, #4]
 801ec24:	f000 f980 	bl	801ef28 <_ZN18SimplexMotionMotor9setTargetEl>
	return this->writeRegisters(SIMPLEXMOTION_REG_MODE, 1, &data);
 801ec28:	f107 030e 	add.w	r3, r7, #14
 801ec2c:	2201      	movs	r2, #1
 801ec2e:	f240 118f 	movw	r1, #399	@ 0x18f
 801ec32:	6878      	ldr	r0, [r7, #4]
 801ec34:	f7ff fe65 	bl	801e902 <_ZN18SimplexMotionMotor14writeRegistersEttPt>
 801ec38:	4603      	mov	r3, r0
}
 801ec3a:	4618      	mov	r0, r3
 801ec3c:	3710      	adds	r7, #16
 801ec3e:	46bd      	mov	sp, r7
 801ec40:	bd80      	pop	{r7, pc}

0801ec42 <_ZN18SimplexMotionMotor4beepEt>:

// ==============================================================
uint8_t SimplexMotionMotor::beep(uint16_t amplitude) {
 801ec42:	b580      	push	{r7, lr}
 801ec44:	b084      	sub	sp, #16
 801ec46:	af00      	add	r7, sp, #0
 801ec48:	6078      	str	r0, [r7, #4]
 801ec4a:	460b      	mov	r3, r1
 801ec4c:	807b      	strh	r3, [r7, #2]
	uint8_t ret = 0;
 801ec4e:	2300      	movs	r3, #0
 801ec50:	73fb      	strb	r3, [r7, #15]
	ret = this->setMode(SIMPLEXMOTION_MODE_BEEP);
 801ec52:	213c      	movs	r1, #60	@ 0x3c
 801ec54:	6878      	ldr	r0, [r7, #4]
 801ec56:	f7ff ffa5 	bl	801eba4 <_ZN18SimplexMotionMotor7setModeE20simplexmotion_mode_t>
 801ec5a:	4603      	mov	r3, r0
 801ec5c:	73fb      	strb	r3, [r7, #15]



	// Set the amplitude
	ret = this->setTarget((int32_t) amplitude);
 801ec5e:	887b      	ldrh	r3, [r7, #2]
 801ec60:	4619      	mov	r1, r3
 801ec62:	6878      	ldr	r0, [r7, #4]
 801ec64:	f000 f960 	bl	801ef28 <_ZN18SimplexMotionMotor9setTargetEl>
 801ec68:	4603      	mov	r3, r0
 801ec6a:	73fb      	strb	r3, [r7, #15]

	return ret;
 801ec6c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ec6e:	4618      	mov	r0, r3
 801ec70:	3710      	adds	r7, #16
 801ec72:	46bd      	mov	sp, r7
 801ec74:	bd80      	pop	{r7, pc}

0801ec76 <_ZN18SimplexMotionMotor14getPositionRawEv>:
	position = data[0] << 16 | data[1];
	return position / 4096.0 * this->_config.direction;
}

// ==============================================================
int32_t SimplexMotionMotor::getPositionRaw() {
 801ec76:	b580      	push	{r7, lr}
 801ec78:	b086      	sub	sp, #24
 801ec7a:	af00      	add	r7, sp, #0
 801ec7c:	6078      	str	r0, [r7, #4]
	int32_t position = 0;
 801ec7e:	2300      	movs	r3, #0
 801ec80:	617b      	str	r3, [r7, #20]
	uint16_t data[2] = { 0 };
 801ec82:	2300      	movs	r3, #0
 801ec84:	60fb      	str	r3, [r7, #12]

	uint8_t success = this->readRegisters(SIMPLEXMOTION_REG_POSITION, 2, data);
 801ec86:	f107 030c 	add.w	r3, r7, #12
 801ec8a:	2202      	movs	r2, #2
 801ec8c:	21c7      	movs	r1, #199	@ 0xc7
 801ec8e:	6878      	ldr	r0, [r7, #4]
 801ec90:	f7ff fe78 	bl	801e984 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801ec94:	4603      	mov	r3, r0
 801ec96:	74fb      	strb	r3, [r7, #19]

	if (!success) {
 801ec98:	7cfb      	ldrb	r3, [r7, #19]
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d101      	bne.n	801eca2 <_ZN18SimplexMotionMotor14getPositionRawEv+0x2c>
		return 0;
 801ec9e:	2300      	movs	r3, #0
 801eca0:	e005      	b.n	801ecae <_ZN18SimplexMotionMotor14getPositionRawEv+0x38>
	}
	position = data[0] << 16 | data[1];
 801eca2:	89bb      	ldrh	r3, [r7, #12]
 801eca4:	041b      	lsls	r3, r3, #16
 801eca6:	89fa      	ldrh	r2, [r7, #14]
 801eca8:	4313      	orrs	r3, r2
 801ecaa:	617b      	str	r3, [r7, #20]

	return position;
 801ecac:	697b      	ldr	r3, [r7, #20]
}
 801ecae:	4618      	mov	r0, r3
 801ecb0:	3718      	adds	r7, #24
 801ecb2:	46bd      	mov	sp, r7
 801ecb4:	bd80      	pop	{r7, pc}
	...

0801ecb8 <_ZN18SimplexMotionMotor10getVoltageEv>:

// ==============================================================
float SimplexMotionMotor::getVoltage(){
 801ecb8:	b580      	push	{r7, lr}
 801ecba:	b084      	sub	sp, #16
 801ecbc:	af00      	add	r7, sp, #0
 801ecbe:	6078      	str	r0, [r7, #4]
	float voltage = 0;
 801ecc0:	f04f 0300 	mov.w	r3, #0
 801ecc4:	60fb      	str	r3, [r7, #12]
	uint16_t voltage_int = 0;
 801ecc6:	2300      	movs	r3, #0
 801ecc8:	813b      	strh	r3, [r7, #8]
	uint8_t success = this->readRegisters(SIMPLEXMOTION_REG_VOLTAGE, 1, &voltage_int);
 801ecca:	f107 0308 	add.w	r3, r7, #8
 801ecce:	2201      	movs	r2, #1
 801ecd0:	2163      	movs	r1, #99	@ 0x63
 801ecd2:	6878      	ldr	r0, [r7, #4]
 801ecd4:	f7ff fe56 	bl	801e984 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801ecd8:	4603      	mov	r3, r0
 801ecda:	72fb      	strb	r3, [r7, #11]

	if (!success) {
 801ecdc:	7afb      	ldrb	r3, [r7, #11]
 801ecde:	2b00      	cmp	r3, #0
 801ece0:	d102      	bne.n	801ece8 <_ZN18SimplexMotionMotor10getVoltageEv+0x30>
		return 0;
 801ece2:	f04f 0300 	mov.w	r3, #0
 801ece6:	e00d      	b.n	801ed04 <_ZN18SimplexMotionMotor10getVoltageEv+0x4c>
	}
	voltage = voltage_int * 0.01;
 801ece8:	893b      	ldrh	r3, [r7, #8]
 801ecea:	ee07 3a90 	vmov	s15, r3
 801ecee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ecf2:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 801ed18 <_ZN18SimplexMotionMotor10getVoltageEv+0x60>
 801ecf6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ecfa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801ecfe:	edc7 7a03 	vstr	s15, [r7, #12]

	return voltage;
 801ed02:	68fb      	ldr	r3, [r7, #12]
}
 801ed04:	ee07 3a90 	vmov	s15, r3
 801ed08:	eeb0 0a67 	vmov.f32	s0, s15
 801ed0c:	3710      	adds	r7, #16
 801ed0e:	46bd      	mov	sp, r7
 801ed10:	bd80      	pop	{r7, pc}
 801ed12:	bf00      	nop
 801ed14:	f3af 8000 	nop.w
 801ed18:	47ae147b 	.word	0x47ae147b
 801ed1c:	3f847ae1 	.word	0x3f847ae1

0801ed20 <_ZN18SimplexMotionMotor8getSpeedEv>:


// ==============================================================
float SimplexMotionMotor::getSpeed() {
 801ed20:	b580      	push	{r7, lr}
 801ed22:	b086      	sub	sp, #24
 801ed24:	af00      	add	r7, sp, #0
 801ed26:	6078      	str	r0, [r7, #4]
	uint16_t speed_raw = 0;
 801ed28:	2300      	movs	r3, #0
 801ed2a:	81fb      	strh	r3, [r7, #14]
	uint8_t success = this->readRegisters(SIMPLEXMOTION_REG_SPEED, 1,
 801ed2c:	f107 030e 	add.w	r3, r7, #14
 801ed30:	2201      	movs	r2, #1
 801ed32:	21c9      	movs	r1, #201	@ 0xc9
 801ed34:	6878      	ldr	r0, [r7, #4]
 801ed36:	f7ff fe25 	bl	801e984 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801ed3a:	4603      	mov	r3, r0
 801ed3c:	75fb      	strb	r3, [r7, #23]
			&speed_raw);

	int16_t speed_signed = (int16_t) speed_raw;
 801ed3e:	89fb      	ldrh	r3, [r7, #14]
 801ed40:	82bb      	strh	r3, [r7, #20]

	if (!success) {
 801ed42:	7dfb      	ldrb	r3, [r7, #23]
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	d102      	bne.n	801ed4e <_ZN18SimplexMotionMotor8getSpeedEv+0x2e>
		return 0;
 801ed48:	f04f 0300 	mov.w	r3, #0
 801ed4c:	e01a      	b.n	801ed84 <_ZN18SimplexMotionMotor8getSpeedEv+0x64>
	}
	float speed = this->_config.direction * 2 * pi * speed_signed / 256;
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	f993 3051 	ldrsb.w	r3, [r3, #81]	@ 0x51
 801ed54:	005b      	lsls	r3, r3, #1
 801ed56:	ee07 3a90 	vmov	s15, r3
 801ed5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ed5e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801ed94 <_ZN18SimplexMotionMotor8getSpeedEv+0x74>
 801ed62:	ee27 7a87 	vmul.f32	s14, s15, s14
 801ed66:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801ed6a:	ee07 3a90 	vmov	s15, r3
 801ed6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ed72:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ed76:	eddf 6a08 	vldr	s13, [pc, #32]	@ 801ed98 <_ZN18SimplexMotionMotor8getSpeedEv+0x78>
 801ed7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801ed7e:	edc7 7a04 	vstr	s15, [r7, #16]

	return speed;
 801ed82:	693b      	ldr	r3, [r7, #16]
}
 801ed84:	ee07 3a90 	vmov	s15, r3
 801ed88:	eeb0 0a67 	vmov.f32	s0, s15
 801ed8c:	3718      	adds	r7, #24
 801ed8e:	46bd      	mov	sp, r7
 801ed90:	bd80      	pop	{r7, pc}
 801ed92:	bf00      	nop
 801ed94:	40490fdb 	.word	0x40490fdb
 801ed98:	43800000 	.word	0x43800000
 801ed9c:	00000000 	.word	0x00000000

0801eda0 <_ZN18SimplexMotionMotor14setTorqueLimitEf>:

// ==============================================================
uint8_t SimplexMotionMotor::setTorqueLimit(float maxTorque) {
 801eda0:	b580      	push	{r7, lr}
 801eda2:	b084      	sub	sp, #16
 801eda4:	af00      	add	r7, sp, #0
 801eda6:	6078      	str	r0, [r7, #4]
 801eda8:	ed87 0a00 	vstr	s0, [r7]
	uint16_t torque_limit_int = (uint16_t) (maxTorque * 1000);
 801edac:	edd7 7a00 	vldr	s15, [r7]
 801edb0:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 801ee40 <_ZN18SimplexMotionMotor14setTorqueLimitEf+0xa0>
 801edb4:	ee67 7a87 	vmul.f32	s15, s15, s14
 801edb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801edbc:	ee17 3a90 	vmov	r3, s15
 801edc0:	b29b      	uxth	r3, r3
 801edc2:	81bb      	strh	r3, [r7, #12]

	uint8_t ret = 0;
 801edc4:	2300      	movs	r3, #0
 801edc6:	73fb      	strb	r3, [r7, #15]

	ret = this->writeRegisters(SIMPLEXMOTION_REG_TORQUE_LIMIT, 1,
 801edc8:	f107 030c 	add.w	r3, r7, #12
 801edcc:	2201      	movs	r2, #1
 801edce:	21cb      	movs	r1, #203	@ 0xcb
 801edd0:	6878      	ldr	r0, [r7, #4]
 801edd2:	f7ff fd96 	bl	801e902 <_ZN18SimplexMotionMotor14writeRegistersEttPt>
 801edd6:	4603      	mov	r3, r0
 801edd8:	73fb      	strb	r3, [r7, #15]
			&torque_limit_int);

	if (not (ret)) {
 801edda:	7bfb      	ldrb	r3, [r7, #15]
 801eddc:	2b00      	cmp	r3, #0
 801edde:	d101      	bne.n	801ede4 <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x44>
		return 0;
 801ede0:	2300      	movs	r3, #0
 801ede2:	e024      	b.n	801ee2e <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x8e>
	}

	uint16_t torque_limit_int_check = 0;
 801ede4:	2300      	movs	r3, #0
 801ede6:	817b      	strh	r3, [r7, #10]
	ret = this->readRegisters(SIMPLEXMOTION_REG_TORQUE_LIMIT, 1,
 801ede8:	f107 030a 	add.w	r3, r7, #10
 801edec:	2201      	movs	r2, #1
 801edee:	21cb      	movs	r1, #203	@ 0xcb
 801edf0:	6878      	ldr	r0, [r7, #4]
 801edf2:	f7ff fdc7 	bl	801e984 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801edf6:	4603      	mov	r3, r0
 801edf8:	73fb      	strb	r3, [r7, #15]
			&torque_limit_int_check);

	if (not (ret)) {
 801edfa:	7bfb      	ldrb	r3, [r7, #15]
 801edfc:	2b00      	cmp	r3, #0
 801edfe:	d101      	bne.n	801ee04 <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x64>
		return 0;
 801ee00:	2300      	movs	r3, #0
 801ee02:	e014      	b.n	801ee2e <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x8e>
	}

	this->torque_limit = torque_limit_int_check * 0.001;
 801ee04:	897b      	ldrh	r3, [r7, #10]
 801ee06:	ee07 3a90 	vmov	s15, r3
 801ee0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ee0e:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 801ee38 <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x98>
 801ee12:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ee16:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801ee1a:	687b      	ldr	r3, [r7, #4]
 801ee1c:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

	if (!(torque_limit_int == torque_limit_int_check)) {
 801ee20:	89ba      	ldrh	r2, [r7, #12]
 801ee22:	897b      	ldrh	r3, [r7, #10]
 801ee24:	429a      	cmp	r2, r3
 801ee26:	d001      	beq.n	801ee2c <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x8c>
		return 0;
 801ee28:	2300      	movs	r3, #0
 801ee2a:	e000      	b.n	801ee2e <_ZN18SimplexMotionMotor14setTorqueLimitEf+0x8e>
	}

	return 1;
 801ee2c:	2301      	movs	r3, #1
}
 801ee2e:	4618      	mov	r0, r3
 801ee30:	3710      	adds	r7, #16
 801ee32:	46bd      	mov	sp, r7
 801ee34:	bd80      	pop	{r7, pc}
 801ee36:	bf00      	nop
 801ee38:	d2f1a9fc 	.word	0xd2f1a9fc
 801ee3c:	3f50624d 	.word	0x3f50624d
 801ee40:	447a0000 	.word	0x447a0000
 801ee44:	00000000 	.word	0x00000000

0801ee48 <_ZN18SimplexMotionMotor14getTorqueLimitEv>:

// ==============================================================
float SimplexMotionMotor::getTorqueLimit() {
 801ee48:	b580      	push	{r7, lr}
 801ee4a:	b086      	sub	sp, #24
 801ee4c:	af00      	add	r7, sp, #0
 801ee4e:	6078      	str	r0, [r7, #4]

	uint16_t torque_limit_int = 0;
 801ee50:	2300      	movs	r3, #0
 801ee52:	81fb      	strh	r3, [r7, #14]
	uint8_t ret = this->readRegisters(SIMPLEXMOTION_REG_TORQUE_LIMIT, 1,
 801ee54:	f107 030e 	add.w	r3, r7, #14
 801ee58:	2201      	movs	r2, #1
 801ee5a:	21cb      	movs	r1, #203	@ 0xcb
 801ee5c:	6878      	ldr	r0, [r7, #4]
 801ee5e:	f7ff fd91 	bl	801e984 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801ee62:	4603      	mov	r3, r0
 801ee64:	75fb      	strb	r3, [r7, #23]
			&torque_limit_int);

	if (not ret) {
 801ee66:	7dfb      	ldrb	r3, [r7, #23]
 801ee68:	2b00      	cmp	r3, #0
 801ee6a:	d101      	bne.n	801ee70 <_ZN18SimplexMotionMotor14getTorqueLimitEv+0x28>
		return -1;
 801ee6c:	4b0e      	ldr	r3, [pc, #56]	@ (801eea8 <_ZN18SimplexMotionMotor14getTorqueLimitEv+0x60>)
 801ee6e:	e010      	b.n	801ee92 <_ZN18SimplexMotionMotor14getTorqueLimitEv+0x4a>
	}

	float torque_limit = torque_limit_int * 0.001;
 801ee70:	89fb      	ldrh	r3, [r7, #14]
 801ee72:	ee07 3a90 	vmov	s15, r3
 801ee76:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ee7a:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 801eea0 <_ZN18SimplexMotionMotor14getTorqueLimitEv+0x58>
 801ee7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ee82:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801ee86:	edc7 7a04 	vstr	s15, [r7, #16]

	this->torque_limit = torque_limit;
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	693a      	ldr	r2, [r7, #16]
 801ee8e:	649a      	str	r2, [r3, #72]	@ 0x48
	return torque_limit;
 801ee90:	693b      	ldr	r3, [r7, #16]
}
 801ee92:	ee07 3a90 	vmov	s15, r3
 801ee96:	eeb0 0a67 	vmov.f32	s0, s15
 801ee9a:	3718      	adds	r7, #24
 801ee9c:	46bd      	mov	sp, r7
 801ee9e:	bd80      	pop	{r7, pc}
 801eea0:	d2f1a9fc 	.word	0xd2f1a9fc
 801eea4:	3f50624d 	.word	0x3f50624d
 801eea8:	bf800000 	.word	0xbf800000
 801eeac:	00000000 	.word	0x00000000

0801eeb0 <_ZN18SimplexMotionMotor9setTorqueEf>:

	return 0.0;
}

// ==============================================================
uint8_t SimplexMotionMotor::setTorque(float torque) {
 801eeb0:	b580      	push	{r7, lr}
 801eeb2:	b086      	sub	sp, #24
 801eeb4:	af00      	add	r7, sp, #0
 801eeb6:	6078      	str	r0, [r7, #4]
 801eeb8:	ed87 0a00 	vstr	s0, [r7]
	// First check if torque mode has been set
	if (!(this->mode == SIMPLEXMOTION_MODE_TORQUE)) {
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	881b      	ldrh	r3, [r3, #0]
 801eec0:	2b28      	cmp	r3, #40	@ 0x28
 801eec2:	d001      	beq.n	801eec8 <_ZN18SimplexMotionMotor9setTorqueEf+0x18>
		return 0;
 801eec4:	2300      	movs	r3, #0
 801eec6:	e024      	b.n	801ef12 <_ZN18SimplexMotionMotor9setTorqueEf+0x62>
	}

	// Calculate the corresponding torque value
	int16_t torque_value_int = (int16_t) (this->_config.direction * torque
 801eec8:	687b      	ldr	r3, [r7, #4]
 801eeca:	f993 3051 	ldrsb.w	r3, [r3, #81]	@ 0x51
 801eece:	ee07 3a90 	vmov	s15, r3
 801eed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801eed6:	edd7 7a00 	vldr	s15, [r7]
 801eeda:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ this->torque_limit * 32767.0);
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 801eee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eee8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801eeec:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 801ef20 <_ZN18SimplexMotionMotor9setTorqueEf+0x70>
 801eef0:	ee27 7b06 	vmul.f64	d7, d7, d6
	int16_t torque_value_int = (int16_t) (this->_config.direction * torque
 801eef4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801eef8:	ee17 3a90 	vmov	r3, s15
 801eefc:	82fb      	strh	r3, [r7, #22]
	int32_t target_input = (int32_t) torque_value_int;
 801eefe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ef02:	613b      	str	r3, [r7, #16]

	uint8_t ret = this->setTarget(target_input);
 801ef04:	6939      	ldr	r1, [r7, #16]
 801ef06:	6878      	ldr	r0, [r7, #4]
 801ef08:	f000 f80e 	bl	801ef28 <_ZN18SimplexMotionMotor9setTargetEl>
 801ef0c:	4603      	mov	r3, r0
 801ef0e:	73fb      	strb	r3, [r7, #15]
	return ret;
 801ef10:	7bfb      	ldrb	r3, [r7, #15]
}
 801ef12:	4618      	mov	r0, r3
 801ef14:	3718      	adds	r7, #24
 801ef16:	46bd      	mov	sp, r7
 801ef18:	bd80      	pop	{r7, pc}
 801ef1a:	bf00      	nop
 801ef1c:	f3af 8000 	nop.w
 801ef20:	00000000 	.word	0x00000000
 801ef24:	40dfffc0 	.word	0x40dfffc0

0801ef28 <_ZN18SimplexMotionMotor9setTargetEl>:

// ==============================================================
uint8_t SimplexMotionMotor::setTarget(int32_t target) {
 801ef28:	b580      	push	{r7, lr}
 801ef2a:	b084      	sub	sp, #16
 801ef2c:	af00      	add	r7, sp, #0
 801ef2e:	6078      	str	r0, [r7, #4]
 801ef30:	6039      	str	r1, [r7, #0]
	uint8_t ret = 0;
 801ef32:	2300      	movs	r3, #0
 801ef34:	73fb      	strb	r3, [r7, #15]
	uint16_t tx_data[2] = { 0 };
 801ef36:	2300      	movs	r3, #0
 801ef38:	60bb      	str	r3, [r7, #8]

	tx_data[0] = target >> 16;
 801ef3a:	683b      	ldr	r3, [r7, #0]
 801ef3c:	141b      	asrs	r3, r3, #16
 801ef3e:	b29b      	uxth	r3, r3
 801ef40:	813b      	strh	r3, [r7, #8]
	tx_data[1] = target & 0xFFFF;
 801ef42:	683b      	ldr	r3, [r7, #0]
 801ef44:	b29b      	uxth	r3, r3
 801ef46:	817b      	strh	r3, [r7, #10]

	ret = this->writeRegisters(SIMPLEXMOTION_REG_TARGET_INPUT, 2, tx_data);
 801ef48:	f107 0308 	add.w	r3, r7, #8
 801ef4c:	2202      	movs	r2, #2
 801ef4e:	f240 11c1 	movw	r1, #449	@ 0x1c1
 801ef52:	6878      	ldr	r0, [r7, #4]
 801ef54:	f7ff fcd5 	bl	801e902 <_ZN18SimplexMotionMotor14writeRegistersEttPt>
 801ef58:	4603      	mov	r3, r0
 801ef5a:	73fb      	strb	r3, [r7, #15]
	return ret;
 801ef5c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ef5e:	4618      	mov	r0, r3
 801ef60:	3710      	adds	r7, #16
 801ef62:	46bd      	mov	sp, r7
 801ef64:	bd80      	pop	{r7, pc}

0801ef66 <_ZN18SimplexMotionMotor9getStatusEP22simplexmotion_status_t>:

// ==============================================================
uint8_t SimplexMotionMotor::getStatus(simplexmotion_status_t *status) {
 801ef66:	b580      	push	{r7, lr}
 801ef68:	b084      	sub	sp, #16
 801ef6a:	af00      	add	r7, sp, #0
 801ef6c:	6078      	str	r0, [r7, #4]
 801ef6e:	6039      	str	r1, [r7, #0]
	uint16_t status_map = 0;
 801ef70:	2300      	movs	r3, #0
 801ef72:	81bb      	strh	r3, [r7, #12]
	uint8_t ret = this->readRegisters(SIMPLEXMOTION_REG_STATUS, 1, &status_map);
 801ef74:	f107 030c 	add.w	r3, r7, #12
 801ef78:	2201      	movs	r2, #1
 801ef7a:	f240 1199 	movw	r1, #409	@ 0x199
 801ef7e:	6878      	ldr	r0, [r7, #4]
 801ef80:	f7ff fd00 	bl	801e984 <_ZN18SimplexMotionMotor13readRegistersEttPt>
 801ef84:	4603      	mov	r3, r0
 801ef86:	73fb      	strb	r3, [r7, #15]

	if (not (ret)) {
 801ef88:	7bfb      	ldrb	r3, [r7, #15]
 801ef8a:	2b00      	cmp	r3, #0
 801ef8c:	d101      	bne.n	801ef92 <_ZN18SimplexMotionMotor9getStatusEP22simplexmotion_status_t+0x2c>
		return 0;
 801ef8e:	2300      	movs	r3, #0
 801ef90:	e041      	b.n	801f016 <_ZN18SimplexMotionMotor9getStatusEP22simplexmotion_status_t+0xb0>
	}

	status->fail = status_map & 1 << 0;
 801ef92:	89bb      	ldrh	r3, [r7, #12]
 801ef94:	b2db      	uxtb	r3, r3
 801ef96:	f003 0301 	and.w	r3, r3, #1
 801ef9a:	b2da      	uxtb	r2, r3
 801ef9c:	683b      	ldr	r3, [r7, #0]
 801ef9e:	701a      	strb	r2, [r3, #0]
	status->communication_error = status_map & 1 << 1;
 801efa0:	89bb      	ldrh	r3, [r7, #12]
 801efa2:	b2db      	uxtb	r3, r3
 801efa4:	f003 0302 	and.w	r3, r3, #2
 801efa8:	b2da      	uxtb	r2, r3
 801efaa:	683b      	ldr	r3, [r7, #0]
 801efac:	705a      	strb	r2, [r3, #1]
	status->current_error = status_map & 1 << 2;
 801efae:	89bb      	ldrh	r3, [r7, #12]
 801efb0:	b2db      	uxtb	r3, r3
 801efb2:	f003 0304 	and.w	r3, r3, #4
 801efb6:	b2da      	uxtb	r2, r3
 801efb8:	683b      	ldr	r3, [r7, #0]
 801efba:	709a      	strb	r2, [r3, #2]
	status->voltage_error = status_map & 1 << 3;
 801efbc:	89bb      	ldrh	r3, [r7, #12]
 801efbe:	b2db      	uxtb	r3, r3
 801efc0:	f003 0308 	and.w	r3, r3, #8
 801efc4:	b2da      	uxtb	r2, r3
 801efc6:	683b      	ldr	r3, [r7, #0]
 801efc8:	70da      	strb	r2, [r3, #3]
	status->temperature_error = status_map & 1 << 4;
 801efca:	89bb      	ldrh	r3, [r7, #12]
 801efcc:	b2db      	uxtb	r3, r3
 801efce:	f003 0310 	and.w	r3, r3, #16
 801efd2:	b2da      	uxtb	r2, r3
 801efd4:	683b      	ldr	r3, [r7, #0]
 801efd6:	711a      	strb	r2, [r3, #4]
	status->torque_limit = status_map & 1 << 5;
 801efd8:	89bb      	ldrh	r3, [r7, #12]
 801efda:	b2db      	uxtb	r3, r3
 801efdc:	f003 0320 	and.w	r3, r3, #32
 801efe0:	b2da      	uxtb	r2, r3
 801efe2:	683b      	ldr	r3, [r7, #0]
 801efe4:	715a      	strb	r2, [r3, #5]
	status->locked = status_map & 1 << 6;
 801efe6:	89bb      	ldrh	r3, [r7, #12]
 801efe8:	b2db      	uxtb	r3, r3
 801efea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801efee:	b2da      	uxtb	r2, r3
 801eff0:	683b      	ldr	r3, [r7, #0]
 801eff2:	721a      	strb	r2, [r3, #8]
	status->regulator_error = status_map & 1 << 7;
 801eff4:	89bb      	ldrh	r3, [r7, #12]
 801eff6:	b2db      	uxtb	r3, r3
 801eff8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801effc:	b2da      	uxtb	r2, r3
 801effe:	683b      	ldr	r3, [r7, #0]
 801f000:	719a      	strb	r2, [r3, #6]
	status->moving = status_map & 1 << 8;
 801f002:	683b      	ldr	r3, [r7, #0]
 801f004:	2200      	movs	r2, #0
 801f006:	71da      	strb	r2, [r3, #7]
	status->reverse = status_map & 1 << 9;
 801f008:	683b      	ldr	r3, [r7, #0]
 801f00a:	2200      	movs	r2, #0
 801f00c:	725a      	strb	r2, [r3, #9]
	status->target = status_map & 1 << 10;
 801f00e:	683b      	ldr	r3, [r7, #0]
 801f010:	2200      	movs	r2, #0
 801f012:	729a      	strb	r2, [r3, #10]

	return 1;
 801f014:	2301      	movs	r3, #1
}
 801f016:	4618      	mov	r0, r3
 801f018:	3710      	adds	r7, #16
 801f01a:	46bd      	mov	sp, r7
 801f01c:	bd80      	pop	{r7, pc}

0801f01e <_ZN18SimplexMotionMotor13error_handlerE19simplexmotion_error>:
		this->callbacks.error = callback;
	}
}

// ==============================================================
void SimplexMotionMotor::error_handler(simplexmotion_error error) {
 801f01e:	b580      	push	{r7, lr}
 801f020:	b082      	sub	sp, #8
 801f022:	af00      	add	r7, sp, #0
 801f024:	6078      	str	r0, [r7, #4]
 801f026:	460b      	mov	r3, r1
 801f028:	807b      	strh	r3, [r7, #2]
	nop();
 801f02a:	f7f5 fae7 	bl	80145fc <_Z3nopv>
}
 801f02e:	bf00      	nop
 801f030:	3708      	adds	r7, #8
 801f032:	46bd      	mov	sp, r7
 801f034:	bd80      	pop	{r7, pc}

0801f036 <_ZN18bmi160_gyr_calib_tC1Ev>:
	float x;
	float y;
	float z;
} bmi160_acc;

typedef struct bmi160_gyr_calib_t {
 801f036:	b480      	push	{r7}
 801f038:	b083      	sub	sp, #12
 801f03a:	af00      	add	r7, sp, #0
 801f03c:	6078      	str	r0, [r7, #4]
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	f04f 0200 	mov.w	r2, #0
 801f044:	601a      	str	r2, [r3, #0]
 801f046:	687b      	ldr	r3, [r7, #4]
 801f048:	f04f 0200 	mov.w	r2, #0
 801f04c:	605a      	str	r2, [r3, #4]
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	f04f 0200 	mov.w	r2, #0
 801f054:	609a      	str	r2, [r3, #8]
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	4618      	mov	r0, r3
 801f05a:	370c      	adds	r7, #12
 801f05c:	46bd      	mov	sp, r7
 801f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f062:	4770      	bx	lr

0801f064 <_ZN19bmi160_gyr_config_tC1Ev>:
	uint8_t bw = BMI160_ACCEL_BW_NORMAL_AVG4;
	uint8_t range = BMI160_ACCEL_RANGE_8G;
	uint8_t foc_enable = 0;
} bmi160_acc_config_t;

typedef struct bmi160_gyr_config_t {
 801f064:	b480      	push	{r7}
 801f066:	b083      	sub	sp, #12
 801f068:	af00      	add	r7, sp, #0
 801f06a:	6078      	str	r0, [r7, #4]
 801f06c:	687b      	ldr	r3, [r7, #4]
 801f06e:	220a      	movs	r2, #10
 801f070:	701a      	strb	r2, [r3, #0]
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	2220      	movs	r2, #32
 801f076:	705a      	strb	r2, [r3, #1]
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	2201      	movs	r2, #1
 801f07c:	709a      	strb	r2, [r3, #2]
 801f07e:	687b      	ldr	r3, [r7, #4]
 801f080:	2201      	movs	r2, #1
 801f082:	70da      	strb	r2, [r3, #3]
 801f084:	687b      	ldr	r3, [r7, #4]
 801f086:	4618      	mov	r0, r3
 801f088:	370c      	adds	r7, #12
 801f08a:	46bd      	mov	sp, r7
 801f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f090:	4770      	bx	lr

0801f092 <_ZN19bmi160_acc_config_tC1Ev>:
typedef struct bmi160_acc_config_t {
 801f092:	b480      	push	{r7}
 801f094:	b083      	sub	sp, #12
 801f096:	af00      	add	r7, sp, #0
 801f098:	6078      	str	r0, [r7, #4]
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	220a      	movs	r2, #10
 801f09e:	701a      	strb	r2, [r3, #0]
 801f0a0:	687b      	ldr	r3, [r7, #4]
 801f0a2:	2220      	movs	r2, #32
 801f0a4:	705a      	strb	r2, [r3, #1]
 801f0a6:	687b      	ldr	r3, [r7, #4]
 801f0a8:	2208      	movs	r2, #8
 801f0aa:	709a      	strb	r2, [r3, #2]
 801f0ac:	687b      	ldr	r3, [r7, #4]
 801f0ae:	2200      	movs	r2, #0
 801f0b0:	70da      	strb	r2, [r3, #3]
 801f0b2:	687b      	ldr	r3, [r7, #4]
 801f0b4:	4618      	mov	r0, r3
 801f0b6:	370c      	adds	r7, #12
 801f0b8:	46bd      	mov	sp, r7
 801f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0be:	4770      	bx	lr

0801f0c0 <_ZN15bmi160_config_tC1Ev>:
	uint8_t bw = BMI160_GYRO_BW_NORMAL_MODE;
	uint8_t range = BMI160_GYRO_RANGE_1000_DPS;
	uint8_t foc_enable = 1;
} bmi160_gyr_config_t;

typedef struct bmi160_config_t {
 801f0c0:	b580      	push	{r7, lr}
 801f0c2:	b082      	sub	sp, #8
 801f0c4:	af00      	add	r7, sp, #0
 801f0c6:	6078      	str	r0, [r7, #4]
 801f0c8:	687b      	ldr	r3, [r7, #4]
 801f0ca:	330a      	adds	r3, #10
 801f0cc:	4618      	mov	r0, r3
 801f0ce:	f7ff ffc9 	bl	801f064 <_ZN19bmi160_gyr_config_tC1Ev>
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	330e      	adds	r3, #14
 801f0d6:	4618      	mov	r0, r3
 801f0d8:	f7ff ffdb 	bl	801f092 <_ZN19bmi160_acc_config_tC1Ev>
 801f0dc:	687b      	ldr	r3, [r7, #4]
 801f0de:	4618      	mov	r0, r3
 801f0e0:	3708      	adds	r7, #8
 801f0e2:	46bd      	mov	sp, r7
 801f0e4:	bd80      	pop	{r7, pc}

0801f0e6 <_ZN6BMI160C1Ev>:

#include "bmi160.h"

#if CORE_CONFIG_USE_SPI

BMI160::BMI160(){
 801f0e6:	b580      	push	{r7, lr}
 801f0e8:	b082      	sub	sp, #8
 801f0ea:	af00      	add	r7, sp, #0
 801f0ec:	6078      	str	r0, [r7, #4]
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	332c      	adds	r3, #44	@ 0x2c
 801f0f2:	4618      	mov	r0, r3
 801f0f4:	f7ff ff9f 	bl	801f036 <_ZN18bmi160_gyr_calib_tC1Ev>
 801f0f8:	687b      	ldr	r3, [r7, #4]
 801f0fa:	3338      	adds	r3, #56	@ 0x38
 801f0fc:	4618      	mov	r0, r3
 801f0fe:	f7ff ffdf 	bl	801f0c0 <_ZN15bmi160_config_tC1Ev>

}
 801f102:	687b      	ldr	r3, [r7, #4]
 801f104:	4618      	mov	r0, r3
 801f106:	3708      	adds	r7, #8
 801f108:	46bd      	mov	sp, r7
 801f10a:	bd80      	pop	{r7, pc}

0801f10c <_ZN6BMI16013writeRegisterEhh>:

/* ============================================================================= */
uint8_t BMI160::writeRegister(uint8_t reg, uint8_t data) {
 801f10c:	b580      	push	{r7, lr}
 801f10e:	b082      	sub	sp, #8
 801f110:	af00      	add	r7, sp, #0
 801f112:	6078      	str	r0, [r7, #4]
 801f114:	460b      	mov	r3, r1
 801f116:	70fb      	strb	r3, [r7, #3]
 801f118:	4613      	mov	r3, r2
 801f11a:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 801f11c:	687b      	ldr	r3, [r7, #4]
 801f11e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801f126:	2200      	movs	r2, #0
 801f128:	4619      	mov	r1, r3
 801f12a:	f7e7 f8d1 	bl	80062d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 1);
 801f12e:	687b      	ldr	r3, [r7, #4]
 801f130:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801f132:	1cf9      	adds	r1, r7, #3
 801f134:	2301      	movs	r3, #1
 801f136:	2201      	movs	r2, #1
 801f138:	f7ea fe68 	bl	8009e0c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(this->_config.hspi, &data, 1, 1);
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801f140:	1cb9      	adds	r1, r7, #2
 801f142:	2301      	movs	r3, #1
 801f144:	2201      	movs	r2, #1
 801f146:	f7ea fe61 	bl	8009e0c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 801f14a:	687b      	ldr	r3, [r7, #4]
 801f14c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801f14e:	687b      	ldr	r3, [r7, #4]
 801f150:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801f154:	2201      	movs	r2, #1
 801f156:	4619      	mov	r1, r3
 801f158:	f7e7 f8ba 	bl	80062d0 <HAL_GPIO_WritePin>

	return CORE_OK;
 801f15c:	2301      	movs	r3, #1
}
 801f15e:	4618      	mov	r0, r3
 801f160:	3708      	adds	r7, #8
 801f162:	46bd      	mov	sp, r7
 801f164:	bd80      	pop	{r7, pc}

0801f166 <_ZN6BMI1604initE15bmi160_config_t>:

/* ============================================================================= */
uint8_t BMI160::init(bmi160_config_t config) {
 801f166:	b084      	sub	sp, #16
 801f168:	b5b0      	push	{r4, r5, r7, lr}
 801f16a:	b084      	sub	sp, #16
 801f16c:	af00      	add	r7, sp, #0
 801f16e:	6078      	str	r0, [r7, #4]
 801f170:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801f174:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	this->_config = config;
 801f178:	687b      	ldr	r3, [r7, #4]
 801f17a:	f103 0538 	add.w	r5, r3, #56	@ 0x38
 801f17e:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 801f182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801f184:	6028      	str	r0, [r5, #0]
 801f186:	6069      	str	r1, [r5, #4]
 801f188:	60aa      	str	r2, [r5, #8]
 801f18a:	60eb      	str	r3, [r5, #12]
 801f18c:	8823      	ldrh	r3, [r4, #0]
 801f18e:	822b      	strh	r3, [r5, #16]
	// Make a dummy read to turn on SPI mode
//	this->readRegister(0x7F);
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 801f190:	687b      	ldr	r3, [r7, #4]
 801f192:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801f194:	687b      	ldr	r3, [r7, #4]
 801f196:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801f19a:	2201      	movs	r2, #1
 801f19c:	4619      	mov	r1, r3
 801f19e:	f7e7 f897 	bl	80062d0 <HAL_GPIO_WritePin>
	delay(250);
 801f1a2:	20fa      	movs	r0, #250	@ 0xfa
 801f1a4:	f7fb faa3 	bl	801a6ee <_Z5delaym>

	// Check if the IMU can be addressed
	if (not (this->check())) {
 801f1a8:	6878      	ldr	r0, [r7, #4]
 801f1aa:	f000 f8ed 	bl	801f388 <_ZN6BMI1605checkEv>
 801f1ae:	4603      	mov	r3, r0
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	bf0c      	ite	eq
 801f1b4:	2301      	moveq	r3, #1
 801f1b6:	2300      	movne	r3, #0
 801f1b8:	b2db      	uxtb	r3, r3
 801f1ba:	2b00      	cmp	r3, #0
 801f1bc:	d001      	beq.n	801f1c2 <_ZN6BMI1604initE15bmi160_config_t+0x5c>
		return 0;
 801f1be:	2300      	movs	r3, #0
 801f1c0:	e072      	b.n	801f2a8 <_ZN6BMI1604initE15bmi160_config_t+0x142>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
	}

	// Reset the IMU to delete all previously loaded registers
	this->reset();
 801f1c2:	6878      	ldr	r0, [r7, #4]
 801f1c4:	f000 fd35 	bl	801fc32 <_ZN6BMI1605resetEv>

	// Wait until the reset is finished
	delay(250);
 801f1c8:	20fa      	movs	r0, #250	@ 0xfa
 801f1ca:	f7fb fa90 	bl	801a6ee <_Z5delaym>

	// Make a dummy read again to turn on SPI
	this->readRegister(0x7F);
 801f1ce:	217f      	movs	r1, #127	@ 0x7f
 801f1d0:	6878      	ldr	r0, [r7, #4]
 801f1d2:	f000 f870 	bl	801f2b6 <_ZN6BMI16012readRegisterEh>

	// Set the power mode to normal in order for all registers to be writable
	this->setPowerMode(BMI160_Power_Normal);
 801f1d6:	2100      	movs	r1, #0
 801f1d8:	6878      	ldr	r0, [r7, #4]
 801f1da:	f000 fcf5 	bl	801fbc8 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>

	// Set the accelerometer setting
	this->setAccConfig(this->_config.acc.odr | this->_config.acc.bw,
 801f1de:	687b      	ldr	r3, [r7, #4]
 801f1e0:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 801f1e4:	687b      	ldr	r3, [r7, #4]
 801f1e6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 801f1ea:	4313      	orrs	r3, r2
 801f1ec:	b2d9      	uxtb	r1, r3
 801f1ee:	687b      	ldr	r3, [r7, #4]
 801f1f0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801f1f4:	461a      	mov	r2, r3
 801f1f6:	6878      	ldr	r0, [r7, #4]
 801f1f8:	f000 fccd 	bl	801fb96 <_ZN6BMI16012setAccConfigEhh>
			this->_config.acc.range);

	// Set the gyroscope setting
	this->setGyroConfig(this->_config.gyr.odr | this->_config.gyr.bw,
 801f1fc:	687b      	ldr	r3, [r7, #4]
 801f1fe:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 801f202:	687b      	ldr	r3, [r7, #4]
 801f204:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801f208:	4313      	orrs	r3, r2
 801f20a:	b2d9      	uxtb	r1, r3
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801f212:	461a      	mov	r2, r3
 801f214:	6878      	ldr	r0, [r7, #4]
 801f216:	f000 fca5 	bl	801fb64 <_ZN6BMI16013setGyroConfigEhh>
			this->_config.gyr.range);

	// Check if the settings have been set correctly

	uint8_t acc_config_reg = this->readRegister(BMI160_REG_ACCEL_CONFIG);
 801f21a:	2140      	movs	r1, #64	@ 0x40
 801f21c:	6878      	ldr	r0, [r7, #4]
 801f21e:	f000 f84a 	bl	801f2b6 <_ZN6BMI16012readRegisterEh>
 801f222:	4603      	mov	r3, r0
 801f224:	73fb      	strb	r3, [r7, #15]
	uint8_t acc_range_reg = this->readRegister(BMI160_REG_ACCEL_RANGE);
 801f226:	2141      	movs	r1, #65	@ 0x41
 801f228:	6878      	ldr	r0, [r7, #4]
 801f22a:	f000 f844 	bl	801f2b6 <_ZN6BMI16012readRegisterEh>
 801f22e:	4603      	mov	r3, r0
 801f230:	73bb      	strb	r3, [r7, #14]
	uint8_t gyr_config_reg = this->readRegister(BMI160_REG_GYRO_CONFIG);
 801f232:	2142      	movs	r1, #66	@ 0x42
 801f234:	6878      	ldr	r0, [r7, #4]
 801f236:	f000 f83e 	bl	801f2b6 <_ZN6BMI16012readRegisterEh>
 801f23a:	4603      	mov	r3, r0
 801f23c:	737b      	strb	r3, [r7, #13]
	uint8_t gyr_range_reg = this->readRegister(BMI160_REG_GYRO_RANGE);
 801f23e:	2143      	movs	r1, #67	@ 0x43
 801f240:	6878      	ldr	r0, [r7, #4]
 801f242:	f000 f838 	bl	801f2b6 <_ZN6BMI16012readRegisterEh>
 801f246:	4603      	mov	r3, r0
 801f248:	733b      	strb	r3, [r7, #12]

	if (acc_config_reg != (this->_config.acc.odr | this->_config.acc.bw)) {
 801f24a:	687b      	ldr	r3, [r7, #4]
 801f24c:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 801f256:	4313      	orrs	r3, r2
 801f258:	b2db      	uxtb	r3, r3
 801f25a:	7bfa      	ldrb	r2, [r7, #15]
 801f25c:	429a      	cmp	r2, r3
 801f25e:	d002      	beq.n	801f266 <_ZN6BMI1604initE15bmi160_config_t+0x100>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 801f260:	2008      	movs	r0, #8
 801f262:	f000 fde0 	bl	801fe26 <_Z17core_ErrorHandleri>
	}
	if (acc_range_reg != this->_config.acc.range) {
 801f266:	687b      	ldr	r3, [r7, #4]
 801f268:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801f26c:	7bba      	ldrb	r2, [r7, #14]
 801f26e:	429a      	cmp	r2, r3
 801f270:	d002      	beq.n	801f278 <_ZN6BMI1604initE15bmi160_config_t+0x112>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 801f272:	2008      	movs	r0, #8
 801f274:	f000 fdd7 	bl	801fe26 <_Z17core_ErrorHandleri>
	}
	if (gyr_config_reg != (this->_config.gyr.odr | this->_config.gyr.bw)) {
 801f278:	687b      	ldr	r3, [r7, #4]
 801f27a:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 801f27e:	687b      	ldr	r3, [r7, #4]
 801f280:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801f284:	4313      	orrs	r3, r2
 801f286:	b2db      	uxtb	r3, r3
 801f288:	7b7a      	ldrb	r2, [r7, #13]
 801f28a:	429a      	cmp	r2, r3
 801f28c:	d002      	beq.n	801f294 <_ZN6BMI1604initE15bmi160_config_t+0x12e>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 801f28e:	2008      	movs	r0, #8
 801f290:	f000 fdc9 	bl	801fe26 <_Z17core_ErrorHandleri>
	}
	if (gyr_range_reg != this->_config.gyr.range) {
 801f294:	687b      	ldr	r3, [r7, #4]
 801f296:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801f29a:	7b3a      	ldrb	r2, [r7, #12]
 801f29c:	429a      	cmp	r2, r3
 801f29e:	d002      	beq.n	801f2a6 <_ZN6BMI1604initE15bmi160_config_t+0x140>
		core_ErrorHandler(CORE_ERROR_HARDWARE_IMU);
 801f2a0:	2008      	movs	r0, #8
 801f2a2:	f000 fdc0 	bl	801fe26 <_Z17core_ErrorHandleri>
	}

	return CORE_OK;
 801f2a6:	2301      	movs	r3, #1
}
 801f2a8:	4618      	mov	r0, r3
 801f2aa:	3710      	adds	r7, #16
 801f2ac:	46bd      	mov	sp, r7
 801f2ae:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 801f2b2:	b004      	add	sp, #16
 801f2b4:	4770      	bx	lr

0801f2b6 <_ZN6BMI16012readRegisterEh>:

/* ============================================================================= */
uint8_t BMI160::readRegister(uint8_t reg) {
 801f2b6:	b580      	push	{r7, lr}
 801f2b8:	b084      	sub	sp, #16
 801f2ba:	af00      	add	r7, sp, #0
 801f2bc:	6078      	str	r0, [r7, #4]
 801f2be:	460b      	mov	r3, r1
 801f2c0:	70fb      	strb	r3, [r7, #3]
	uint8_t ret = 0;
 801f2c2:	2300      	movs	r3, #0
 801f2c4:	73fb      	strb	r3, [r7, #15]
	reg |= 0x80;
 801f2c6:	78fb      	ldrb	r3, [r7, #3]
 801f2c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801f2cc:	b2db      	uxtb	r3, r3
 801f2ce:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 801f2d0:	687b      	ldr	r3, [r7, #4]
 801f2d2:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801f2d4:	687b      	ldr	r3, [r7, #4]
 801f2d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801f2da:	2200      	movs	r2, #0
 801f2dc:	4619      	mov	r1, r3
 801f2de:	f7e6 fff7 	bl	80062d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 10);
 801f2e2:	687b      	ldr	r3, [r7, #4]
 801f2e4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801f2e6:	1cf9      	adds	r1, r7, #3
 801f2e8:	230a      	movs	r3, #10
 801f2ea:	2201      	movs	r2, #1
 801f2ec:	f7ea fd8e 	bl	8009e0c <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_config.hspi, &ret, 1, 10);
 801f2f0:	687b      	ldr	r3, [r7, #4]
 801f2f2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801f2f4:	f107 010f 	add.w	r1, r7, #15
 801f2f8:	230a      	movs	r3, #10
 801f2fa:	2201      	movs	r2, #1
 801f2fc:	f7ea ff82 	bl	800a204 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 801f300:	687b      	ldr	r3, [r7, #4]
 801f302:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801f304:	687b      	ldr	r3, [r7, #4]
 801f306:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801f30a:	2201      	movs	r2, #1
 801f30c:	4619      	mov	r1, r3
 801f30e:	f7e6 ffdf 	bl	80062d0 <HAL_GPIO_WritePin>

	return ret;
 801f312:	7bfb      	ldrb	r3, [r7, #15]
}
 801f314:	4618      	mov	r0, r3
 801f316:	3710      	adds	r7, #16
 801f318:	46bd      	mov	sp, r7
 801f31a:	bd80      	pop	{r7, pc}

0801f31c <_ZN6BMI16020readMultipleRegisterEhPhh>:

/* ============================================================================= */
uint8_t BMI160::readMultipleRegister(uint8_t reg, uint8_t *data, uint8_t len) {
 801f31c:	b580      	push	{r7, lr}
 801f31e:	b084      	sub	sp, #16
 801f320:	af00      	add	r7, sp, #0
 801f322:	60f8      	str	r0, [r7, #12]
 801f324:	607a      	str	r2, [r7, #4]
 801f326:	461a      	mov	r2, r3
 801f328:	460b      	mov	r3, r1
 801f32a:	72fb      	strb	r3, [r7, #11]
 801f32c:	4613      	mov	r3, r2
 801f32e:	72bb      	strb	r3, [r7, #10]
//	reg += 0x80;
	reg |= 0x80;
 801f330:	7afb      	ldrb	r3, [r7, #11]
 801f332:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801f336:	b2db      	uxtb	r3, r3
 801f338:	72fb      	strb	r3, [r7, #11]

	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_RESET);
 801f33a:	68fb      	ldr	r3, [r7, #12]
 801f33c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801f33e:	68fb      	ldr	r3, [r7, #12]
 801f340:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801f344:	2200      	movs	r2, #0
 801f346:	4619      	mov	r1, r3
 801f348:	f7e6 ffc2 	bl	80062d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(this->_config.hspi, &reg, 1, 10);
 801f34c:	68fb      	ldr	r3, [r7, #12]
 801f34e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801f350:	f107 010b 	add.w	r1, r7, #11
 801f354:	230a      	movs	r3, #10
 801f356:	2201      	movs	r2, #1
 801f358:	f7ea fd58 	bl	8009e0c <HAL_SPI_Transmit>
	HAL_SPI_Receive(this->_config.hspi, data, len, 10);
 801f35c:	68fb      	ldr	r3, [r7, #12]
 801f35e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 801f360:	7abb      	ldrb	r3, [r7, #10]
 801f362:	b29a      	uxth	r2, r3
 801f364:	230a      	movs	r3, #10
 801f366:	6879      	ldr	r1, [r7, #4]
 801f368:	f7ea ff4c 	bl	800a204 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(this->_config.CS_GPIOx, this->_config.CS_GPIO_Pin, GPIO_PIN_SET);
 801f36c:	68fb      	ldr	r3, [r7, #12]
 801f36e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801f370:	68fb      	ldr	r3, [r7, #12]
 801f372:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801f376:	2201      	movs	r2, #1
 801f378:	4619      	mov	r1, r3
 801f37a:	f7e6 ffa9 	bl	80062d0 <HAL_GPIO_WritePin>

	return CORE_OK;
 801f37e:	2301      	movs	r3, #1
}
 801f380:	4618      	mov	r0, r3
 801f382:	3710      	adds	r7, #16
 801f384:	46bd      	mov	sp, r7
 801f386:	bd80      	pop	{r7, pc}

0801f388 <_ZN6BMI1605checkEv>:

/* ============================================================================= */
uint8_t BMI160::check() {
 801f388:	b580      	push	{r7, lr}
 801f38a:	b084      	sub	sp, #16
 801f38c:	af00      	add	r7, sp, #0
 801f38e:	6078      	str	r0, [r7, #4]
	uint8_t id = this->readID();
 801f390:	6878      	ldr	r0, [r7, #4]
 801f392:	f000 f80c 	bl	801f3ae <_ZN6BMI1606readIDEv>
 801f396:	4603      	mov	r3, r0
 801f398:	73fb      	strb	r3, [r7, #15]
	if (id != 209) {
 801f39a:	7bfb      	ldrb	r3, [r7, #15]
 801f39c:	2bd1      	cmp	r3, #209	@ 0xd1
 801f39e:	d001      	beq.n	801f3a4 <_ZN6BMI1605checkEv+0x1c>
		return 0;
 801f3a0:	2300      	movs	r3, #0
 801f3a2:	e000      	b.n	801f3a6 <_ZN6BMI1605checkEv+0x1e>
	}

	return CORE_OK;
 801f3a4:	2301      	movs	r3, #1
}
 801f3a6:	4618      	mov	r0, r3
 801f3a8:	3710      	adds	r7, #16
 801f3aa:	46bd      	mov	sp, r7
 801f3ac:	bd80      	pop	{r7, pc}

0801f3ae <_ZN6BMI1606readIDEv>:

/* ============================================================================= */
uint8_t BMI160::readID() {
 801f3ae:	b580      	push	{r7, lr}
 801f3b0:	b082      	sub	sp, #8
 801f3b2:	af00      	add	r7, sp, #0
 801f3b4:	6078      	str	r0, [r7, #4]
	return this->readRegister(BMI160_REG_CHIP_ID);
 801f3b6:	2100      	movs	r1, #0
 801f3b8:	6878      	ldr	r0, [r7, #4]
 801f3ba:	f7ff ff7c 	bl	801f2b6 <_ZN6BMI16012readRegisterEh>
 801f3be:	4603      	mov	r3, r0
}
 801f3c0:	4618      	mov	r0, r3
 801f3c2:	3708      	adds	r7, #8
 801f3c4:	46bd      	mov	sp, r7
 801f3c6:	bd80      	pop	{r7, pc}

0801f3c8 <_ZN6BMI1606updateEv>:

/* ============================================================================= */
void BMI160::update() {
 801f3c8:	b580      	push	{r7, lr}
 801f3ca:	b082      	sub	sp, #8
 801f3cc:	af00      	add	r7, sp, #0
 801f3ce:	6078      	str	r0, [r7, #4]
	this->fetchData();
 801f3d0:	6878      	ldr	r0, [r7, #4]
 801f3d2:	f000 f807 	bl	801f3e4 <_ZN6BMI1609fetchDataEv>
	this->processData();
 801f3d6:	6878      	ldr	r0, [r7, #4]
 801f3d8:	f000 f816 	bl	801f408 <_ZN6BMI16011processDataEv>
}
 801f3dc:	bf00      	nop
 801f3de:	3708      	adds	r7, #8
 801f3e0:	46bd      	mov	sp, r7
 801f3e2:	bd80      	pop	{r7, pc}

0801f3e4 <_ZN6BMI1609fetchDataEv>:

/* ============================================================================= */
uint8_t BMI160::fetchData() {
 801f3e4:	b580      	push	{r7, lr}
 801f3e6:	b082      	sub	sp, #8
 801f3e8:	af00      	add	r7, sp, #0
 801f3ea:	6078      	str	r0, [r7, #4]
//	this->readSensorTime();
	this->readGyr();
 801f3ec:	6878      	ldr	r0, [r7, #4]
 801f3ee:	f000 fb57 	bl	801faa0 <_ZN6BMI1607readGyrEv>
	this->readAcc();
 801f3f2:	6878      	ldr	r0, [r7, #4]
 801f3f4:	f000 fb85 	bl	801fb02 <_ZN6BMI1607readAccEv>

	return 1;
 801f3f8:	2301      	movs	r3, #1
}
 801f3fa:	4618      	mov	r0, r3
 801f3fc:	3708      	adds	r7, #8
 801f3fe:	46bd      	mov	sp, r7
 801f400:	bd80      	pop	{r7, pc}
 801f402:	0000      	movs	r0, r0
 801f404:	0000      	movs	r0, r0
	...

0801f408 <_ZN6BMI16011processDataEv>:

/* ============================================================================= */
uint8_t BMI160::processData() {
 801f408:	b580      	push	{r7, lr}
 801f40a:	b082      	sub	sp, #8
 801f40c:	af00      	add	r7, sp, #0
 801f40e:	6078      	str	r0, [r7, #4]

	// Gyroscope
	switch (this->_config.gyr.range) {
 801f410:	687b      	ldr	r3, [r7, #4]
 801f412:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801f416:	2b04      	cmp	r3, #4
 801f418:	f200 8200 	bhi.w	801f81c <_ZN6BMI16011processDataEv+0x414>
 801f41c:	a201      	add	r2, pc, #4	@ (adr r2, 801f424 <_ZN6BMI16011processDataEv+0x1c>)
 801f41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f422:	bf00      	nop
 801f424:	0801f761 	.word	0x0801f761
 801f428:	0801f66d 	.word	0x0801f66d
 801f42c:	0801f5b1 	.word	0x0801f5b1
 801f430:	0801f4f5 	.word	0x0801f4f5
 801f434:	0801f439 	.word	0x0801f439
	case BMI160_GYRO_RANGE_125_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 801f438:	687b      	ldr	r3, [r7, #4]
 801f43a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f43e:	ee07 3a90 	vmov	s15, r3
 801f442:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f446:	ed9f 5bc2 	vldr	d5, [pc, #776]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f44a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f44e:	ed9f 6bb6 	vldr	d6, [pc, #728]	@ 801f728 <_ZN6BMI16011processDataEv+0x320>
 801f452:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f456:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f45a:	eeb0 0a67 	vmov.f32	s0, s15
 801f45e:	f7fb fcb1 	bl	801adc4 <_Z7deg2radf>
 801f462:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801f466:	687b      	ldr	r3, [r7, #4]
 801f468:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801f46c:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 125.0)
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 801f476:	687b      	ldr	r3, [r7, #4]
 801f478:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f47c:	ee07 3a90 	vmov	s15, r3
 801f480:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f484:	ed9f 5bb2 	vldr	d5, [pc, #712]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f488:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f48c:	ed9f 6ba6 	vldr	d6, [pc, #664]	@ 801f728 <_ZN6BMI16011processDataEv+0x320>
 801f490:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f494:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f498:	eeb0 0a67 	vmov.f32	s0, s15
 801f49c:	f7fb fc92 	bl	801adc4 <_Z7deg2radf>
 801f4a0:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801f4aa:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 125.0)
 801f4ae:	687b      	ldr	r3, [r7, #4]
 801f4b0:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 801f4b4:	687b      	ldr	r3, [r7, #4]
 801f4b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f4ba:	ee07 3a90 	vmov	s15, r3
 801f4be:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f4c2:	ed9f 5ba3 	vldr	d5, [pc, #652]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f4c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f4ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 801f728 <_ZN6BMI16011processDataEv+0x320>
 801f4ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f4d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f4d6:	eeb0 0a67 	vmov.f32	s0, s15
 801f4da:	f7fb fc73 	bl	801adc4 <_Z7deg2radf>
 801f4de:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801f4e8:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 125.0)
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801f4f2:	e193      	b.n	801f81c <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_250_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 801f4f4:	687b      	ldr	r3, [r7, #4]
 801f4f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f4fa:	ee07 3a90 	vmov	s15, r3
 801f4fe:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f502:	ed9f 5b93 	vldr	d5, [pc, #588]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f506:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f50a:	ed9f 6b89 	vldr	d6, [pc, #548]	@ 801f730 <_ZN6BMI16011processDataEv+0x328>
 801f50e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f512:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f516:	eeb0 0a67 	vmov.f32	s0, s15
 801f51a:	f7fb fc53 	bl	801adc4 <_Z7deg2radf>
 801f51e:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801f522:	687b      	ldr	r3, [r7, #4]
 801f524:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801f528:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 250.0)
 801f52c:	687b      	ldr	r3, [r7, #4]
 801f52e:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 801f532:	687b      	ldr	r3, [r7, #4]
 801f534:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f538:	ee07 3a90 	vmov	s15, r3
 801f53c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f540:	ed9f 5b83 	vldr	d5, [pc, #524]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f544:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f548:	ed9f 6b79 	vldr	d6, [pc, #484]	@ 801f730 <_ZN6BMI16011processDataEv+0x328>
 801f54c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f550:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f554:	eeb0 0a67 	vmov.f32	s0, s15
 801f558:	f7fb fc34 	bl	801adc4 <_Z7deg2radf>
 801f55c:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801f566:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 250.0)
 801f56a:	687b      	ldr	r3, [r7, #4]
 801f56c:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 801f570:	687b      	ldr	r3, [r7, #4]
 801f572:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f576:	ee07 3a90 	vmov	s15, r3
 801f57a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f57e:	ed9f 5b74 	vldr	d5, [pc, #464]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f582:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f586:	ed9f 6b6a 	vldr	d6, [pc, #424]	@ 801f730 <_ZN6BMI16011processDataEv+0x328>
 801f58a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f58e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f592:	eeb0 0a67 	vmov.f32	s0, s15
 801f596:	f7fb fc15 	bl	801adc4 <_Z7deg2radf>
 801f59a:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801f59e:	687b      	ldr	r3, [r7, #4]
 801f5a0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801f5a4:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 250.0)
 801f5a8:	687b      	ldr	r3, [r7, #4]
 801f5aa:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801f5ae:	e135      	b.n	801f81c <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_500_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 801f5b0:	687b      	ldr	r3, [r7, #4]
 801f5b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f5b6:	ee07 3a90 	vmov	s15, r3
 801f5ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f5be:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f5c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f5c6:	ed9f 6b5c 	vldr	d6, [pc, #368]	@ 801f738 <_ZN6BMI16011processDataEv+0x330>
 801f5ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f5ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f5d2:	eeb0 0a67 	vmov.f32	s0, s15
 801f5d6:	f7fb fbf5 	bl	801adc4 <_Z7deg2radf>
 801f5da:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801f5de:	687b      	ldr	r3, [r7, #4]
 801f5e0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801f5e4:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 500.0)
 801f5e8:	687b      	ldr	r3, [r7, #4]
 801f5ea:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 801f5ee:	687b      	ldr	r3, [r7, #4]
 801f5f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f5f4:	ee07 3a90 	vmov	s15, r3
 801f5f8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f5fc:	ed9f 5b54 	vldr	d5, [pc, #336]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f600:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f604:	ed9f 6b4c 	vldr	d6, [pc, #304]	@ 801f738 <_ZN6BMI16011processDataEv+0x330>
 801f608:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f60c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f610:	eeb0 0a67 	vmov.f32	s0, s15
 801f614:	f7fb fbd6 	bl	801adc4 <_Z7deg2radf>
 801f618:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801f61c:	687b      	ldr	r3, [r7, #4]
 801f61e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801f622:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 500.0)
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 801f62c:	687b      	ldr	r3, [r7, #4]
 801f62e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f632:	ee07 3a90 	vmov	s15, r3
 801f636:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f63a:	ed9f 5b45 	vldr	d5, [pc, #276]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f63e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f642:	ed9f 6b3d 	vldr	d6, [pc, #244]	@ 801f738 <_ZN6BMI16011processDataEv+0x330>
 801f646:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f64a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f64e:	eeb0 0a67 	vmov.f32	s0, s15
 801f652:	f7fb fbb7 	bl	801adc4 <_Z7deg2radf>
 801f656:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801f660:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 500.0)
 801f664:	687b      	ldr	r3, [r7, #4]
 801f666:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801f66a:	e0d7      	b.n	801f81c <_ZN6BMI16011processDataEv+0x414>
	}
	case BMI160_GYRO_RANGE_1000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 801f66c:	687b      	ldr	r3, [r7, #4]
 801f66e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f672:	ee07 3a90 	vmov	s15, r3
 801f676:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f67a:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f67e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f682:	ed9f 6b2f 	vldr	d6, [pc, #188]	@ 801f740 <_ZN6BMI16011processDataEv+0x338>
 801f686:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f68a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f68e:	eeb0 0a67 	vmov.f32	s0, s15
 801f692:	f7fb fb97 	bl	801adc4 <_Z7deg2radf>
 801f696:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801f69a:	687b      	ldr	r3, [r7, #4]
 801f69c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801f6a0:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 1000.0)
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f6b0:	ee07 3a90 	vmov	s15, r3
 801f6b4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f6b8:	ed9f 5b25 	vldr	d5, [pc, #148]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f6bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f6c0:	ed9f 6b1f 	vldr	d6, [pc, #124]	@ 801f740 <_ZN6BMI16011processDataEv+0x338>
 801f6c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f6c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f6cc:	eeb0 0a67 	vmov.f32	s0, s15
 801f6d0:	f7fb fb78 	bl	801adc4 <_Z7deg2radf>
 801f6d4:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801f6d8:	687b      	ldr	r3, [r7, #4]
 801f6da:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801f6de:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 1000.0)
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 801f6e8:	687b      	ldr	r3, [r7, #4]
 801f6ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f6ee:	ee07 3a90 	vmov	s15, r3
 801f6f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f6f6:	ed9f 5b16 	vldr	d5, [pc, #88]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f6fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f6fe:	ed9f 6b10 	vldr	d6, [pc, #64]	@ 801f740 <_ZN6BMI16011processDataEv+0x338>
 801f702:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f706:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f70a:	eeb0 0a67 	vmov.f32	s0, s15
 801f70e:	f7fb fb59 	bl	801adc4 <_Z7deg2radf>
 801f712:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801f716:	687b      	ldr	r3, [r7, #4]
 801f718:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801f71c:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 1000.0)
 801f720:	687b      	ldr	r3, [r7, #4]
 801f722:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801f726:	e079      	b.n	801f81c <_ZN6BMI16011processDataEv+0x414>
 801f728:	00000000 	.word	0x00000000
 801f72c:	405f4000 	.word	0x405f4000
 801f730:	00000000 	.word	0x00000000
 801f734:	406f4000 	.word	0x406f4000
 801f738:	00000000 	.word	0x00000000
 801f73c:	407f4000 	.word	0x407f4000
 801f740:	00000000 	.word	0x00000000
 801f744:	408f4000 	.word	0x408f4000
 801f748:	00000000 	.word	0x00000000
 801f74c:	409f4000 	.word	0x409f4000
 801f750:	00000000 	.word	0x00000000
 801f754:	40e00000 	.word	0x40e00000
 801f758:	51eb851f 	.word	0x51eb851f
 801f75c:	40239eb8 	.word	0x40239eb8
	}
	case BMI160_GYRO_RANGE_2000_DPS: {
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 801f760:	687b      	ldr	r3, [r7, #4]
 801f762:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f766:	ee07 3a90 	vmov	s15, r3
 801f76a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f76e:	ed1f 5b08 	vldr	d5, [pc, #-32]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f772:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f776:	ed1f 6b0c 	vldr	d6, [pc, #-48]	@ 801f748 <_ZN6BMI16011processDataEv+0x340>
 801f77a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f77e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f782:	eeb0 0a67 	vmov.f32	s0, s15
 801f786:	f7fb fb1d 	bl	801adc4 <_Z7deg2radf>
 801f78a:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.x;
 801f78e:	687b      	ldr	r3, [r7, #4]
 801f790:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801f794:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.x = deg2rad(this->gyr_raw.x / 32768.0 * 2000.0)
 801f798:	687b      	ldr	r3, [r7, #4]
 801f79a:	edc3 7a02 	vstr	s15, [r3, #8]
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 801f79e:	687b      	ldr	r3, [r7, #4]
 801f7a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801f7a4:	ee07 3a90 	vmov	s15, r3
 801f7a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f7ac:	ed1f 5b18 	vldr	d5, [pc, #-96]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f7b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f7b4:	ed1f 6b1c 	vldr	d6, [pc, #-112]	@ 801f748 <_ZN6BMI16011processDataEv+0x340>
 801f7b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f7bc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f7c0:	eeb0 0a67 	vmov.f32	s0, s15
 801f7c4:	f7fb fafe 	bl	801adc4 <_Z7deg2radf>
 801f7c8:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.y;
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801f7d2:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.y = deg2rad(this->gyr_raw.y / 32768.0 * 2000.0)
 801f7d6:	687b      	ldr	r3, [r7, #4]
 801f7d8:	edc3 7a03 	vstr	s15, [r3, #12]
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 801f7dc:	687b      	ldr	r3, [r7, #4]
 801f7de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801f7e2:	ee07 3a90 	vmov	s15, r3
 801f7e6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f7ea:	ed1f 5b27 	vldr	d5, [pc, #-156]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f7ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f7f2:	ed1f 6b2b 	vldr	d6, [pc, #-172]	@ 801f748 <_ZN6BMI16011processDataEv+0x340>
 801f7f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f7fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f7fe:	eeb0 0a67 	vmov.f32	s0, s15
 801f802:	f7fb fadf 	bl	801adc4 <_Z7deg2radf>
 801f806:	eeb0 7a40 	vmov.f32	s14, s0
				- this->gyr_calib.z;
 801f80a:	687b      	ldr	r3, [r7, #4]
 801f80c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801f810:	ee77 7a67 	vsub.f32	s15, s14, s15
		this->gyr.z = deg2rad(this->gyr_raw.z / 32768.0 * 2000.0)
 801f814:	687b      	ldr	r3, [r7, #4]
 801f816:	edc3 7a04 	vstr	s15, [r3, #16]
		break;
 801f81a:	bf00      	nop
	}
	}

	// Accelerometer
	switch (this->_config.acc.range) {
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801f822:	3b03      	subs	r3, #3
 801f824:	2b09      	cmp	r3, #9
 801f826:	f200 8135 	bhi.w	801fa94 <_ZN6BMI16011processDataEv+0x68c>
 801f82a:	a201      	add	r2, pc, #4	@ (adr r2, 801f830 <_ZN6BMI16011processDataEv+0x428>)
 801f82c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f830:	0801f859 	.word	0x0801f859
 801f834:	0801fa95 	.word	0x0801fa95
 801f838:	0801f8df 	.word	0x0801f8df
 801f83c:	0801fa95 	.word	0x0801fa95
 801f840:	0801fa95 	.word	0x0801fa95
 801f844:	0801f971 	.word	0x0801f971
 801f848:	0801fa95 	.word	0x0801fa95
 801f84c:	0801fa95 	.word	0x0801fa95
 801f850:	0801fa95 	.word	0x0801fa95
 801f854:	0801fa03 	.word	0x0801fa03
	case BMI160_ACCEL_RANGE_2G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 2.0 * 9.81;
 801f858:	687b      	ldr	r3, [r7, #4]
 801f85a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801f85e:	ee07 3a90 	vmov	s15, r3
 801f862:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f866:	ed1f 5b46 	vldr	d5, [pc, #-280]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f86a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f86e:	ee37 7b07 	vadd.f64	d7, d7, d7
 801f872:	ed1f 6b47 	vldr	d6, [pc, #-284]	@ 801f758 <_ZN6BMI16011processDataEv+0x350>
 801f876:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f87a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f87e:	687b      	ldr	r3, [r7, #4]
 801f880:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 2.0 * 9.81;
 801f884:	687b      	ldr	r3, [r7, #4]
 801f886:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801f88a:	ee07 3a90 	vmov	s15, r3
 801f88e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f892:	ed1f 5b51 	vldr	d5, [pc, #-324]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f896:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f89a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801f89e:	ed1f 6b52 	vldr	d6, [pc, #-328]	@ 801f758 <_ZN6BMI16011processDataEv+0x350>
 801f8a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f8a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f8aa:	687b      	ldr	r3, [r7, #4]
 801f8ac:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 2.0 * 9.81;
 801f8b0:	687b      	ldr	r3, [r7, #4]
 801f8b2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801f8b6:	ee07 3a90 	vmov	s15, r3
 801f8ba:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f8be:	ed1f 5b5c 	vldr	d5, [pc, #-368]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f8c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f8c6:	ee37 7b07 	vadd.f64	d7, d7, d7
 801f8ca:	ed1f 6b5d 	vldr	d6, [pc, #-372]	@ 801f758 <_ZN6BMI16011processDataEv+0x350>
 801f8ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f8d2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		break;
 801f8dc:	e0da      	b.n	801fa94 <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_4G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 4.0 * 9.81;
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801f8e4:	ee07 3a90 	vmov	s15, r3
 801f8e8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f8ec:	ed1f 5b68 	vldr	d5, [pc, #-416]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f8f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f8f4:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 801f8f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f8fc:	ed1f 6b6a 	vldr	d6, [pc, #-424]	@ 801f758 <_ZN6BMI16011processDataEv+0x350>
 801f900:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f904:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f908:	687b      	ldr	r3, [r7, #4]
 801f90a:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 4.0 * 9.81;
 801f90e:	687b      	ldr	r3, [r7, #4]
 801f910:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801f914:	ee07 3a90 	vmov	s15, r3
 801f918:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f91c:	ed1f 5b74 	vldr	d5, [pc, #-464]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f920:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f924:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 801f928:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f92c:	ed1f 6b76 	vldr	d6, [pc, #-472]	@ 801f758 <_ZN6BMI16011processDataEv+0x350>
 801f930:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f934:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f938:	687b      	ldr	r3, [r7, #4]
 801f93a:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 4.0 * 9.81;
 801f93e:	687b      	ldr	r3, [r7, #4]
 801f940:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801f944:	ee07 3a90 	vmov	s15, r3
 801f948:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f94c:	ed1f 5b80 	vldr	d5, [pc, #-512]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f950:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f954:	eeb1 6b00 	vmov.f64	d6, #16	@ 0x40800000  4.0
 801f958:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f95c:	ed1f 6b82 	vldr	d6, [pc, #-520]	@ 801f758 <_ZN6BMI16011processDataEv+0x350>
 801f960:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f964:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f968:	687b      	ldr	r3, [r7, #4]
 801f96a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		break;
 801f96e:	e091      	b.n	801fa94 <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_8G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 8.0 * 9.81;
 801f970:	687b      	ldr	r3, [r7, #4]
 801f972:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801f976:	ee07 3a90 	vmov	s15, r3
 801f97a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f97e:	ed1f 5b8c 	vldr	d5, [pc, #-560]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f982:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f986:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 801f98a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f98e:	ed1f 6b8e 	vldr	d6, [pc, #-568]	@ 801f758 <_ZN6BMI16011processDataEv+0x350>
 801f992:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f996:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f99a:	687b      	ldr	r3, [r7, #4]
 801f99c:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 8.0 * 9.81;
 801f9a0:	687b      	ldr	r3, [r7, #4]
 801f9a2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801f9a6:	ee07 3a90 	vmov	s15, r3
 801f9aa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f9ae:	ed1f 5b98 	vldr	d5, [pc, #-608]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f9b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f9b6:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 801f9ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f9be:	ed1f 6b9a 	vldr	d6, [pc, #-616]	@ 801f758 <_ZN6BMI16011processDataEv+0x350>
 801f9c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f9c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 8.0 * 9.81;
 801f9d0:	687b      	ldr	r3, [r7, #4]
 801f9d2:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801f9d6:	ee07 3a90 	vmov	s15, r3
 801f9da:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801f9de:	ed1f 5ba4 	vldr	d5, [pc, #-656]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801f9e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801f9e6:	eeb2 6b00 	vmov.f64	d6, #32	@ 0x41000000  8.0
 801f9ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f9ee:	ed1f 6ba6 	vldr	d6, [pc, #-664]	@ 801f758 <_ZN6BMI16011processDataEv+0x350>
 801f9f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f9f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801f9fa:	687b      	ldr	r3, [r7, #4]
 801f9fc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		break;
 801fa00:	e048      	b.n	801fa94 <_ZN6BMI16011processDataEv+0x68c>
	}
	case BMI160_ACCEL_RANGE_16G: {
		this->acc.x = this->acc_raw.x / 32768.0 * 16.0 * 9.81;
 801fa02:	687b      	ldr	r3, [r7, #4]
 801fa04:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801fa08:	ee07 3a90 	vmov	s15, r3
 801fa0c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fa10:	ed1f 5bb1 	vldr	d5, [pc, #-708]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801fa14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fa18:	eeb3 6b00 	vmov.f64	d6, #48	@ 0x41800000  16.0
 801fa1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fa20:	ed1f 6bb3 	vldr	d6, [pc, #-716]	@ 801f758 <_ZN6BMI16011processDataEv+0x350>
 801fa24:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fa28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fa2c:	687b      	ldr	r3, [r7, #4]
 801fa2e:	edc3 7a07 	vstr	s15, [r3, #28]
		this->acc.y = this->acc_raw.y / 32768.0 * 16.0 * 9.81;
 801fa32:	687b      	ldr	r3, [r7, #4]
 801fa34:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 801fa38:	ee07 3a90 	vmov	s15, r3
 801fa3c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fa40:	ed1f 5bbd 	vldr	d5, [pc, #-756]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801fa44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fa48:	eeb3 6b00 	vmov.f64	d6, #48	@ 0x41800000  16.0
 801fa4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fa50:	ed1f 6bbf 	vldr	d6, [pc, #-764]	@ 801f758 <_ZN6BMI16011processDataEv+0x350>
 801fa54:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fa58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fa5c:	687b      	ldr	r3, [r7, #4]
 801fa5e:	edc3 7a08 	vstr	s15, [r3, #32]
		this->acc.z = this->acc_raw.z / 32768.0 * 16.0 * 9.81;
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 801fa68:	ee07 3a90 	vmov	s15, r3
 801fa6c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801fa70:	ed1f 5bc9 	vldr	d5, [pc, #-804]	@ 801f750 <_ZN6BMI16011processDataEv+0x348>
 801fa74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801fa78:	eeb3 6b00 	vmov.f64	d6, #48	@ 0x41800000  16.0
 801fa7c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fa80:	ed1f 6bcb 	vldr	d6, [pc, #-812]	@ 801f758 <_ZN6BMI16011processDataEv+0x350>
 801fa84:	ee27 7b06 	vmul.f64	d7, d7, d6
 801fa88:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 801fa8c:	687b      	ldr	r3, [r7, #4]
 801fa8e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
		break;
 801fa92:	bf00      	nop
	}
	}

	return 1;
 801fa94:	2301      	movs	r3, #1
}
 801fa96:	4618      	mov	r0, r3
 801fa98:	3708      	adds	r7, #8
 801fa9a:	46bd      	mov	sp, r7
 801fa9c:	bd80      	pop	{r7, pc}
 801fa9e:	bf00      	nop

0801faa0 <_ZN6BMI1607readGyrEv>:
	this->gyr_calib.y = gyr_y;
	this->gyr_calib.z = gyr_z;
}

/* ============================================================================= */
uint8_t BMI160::readGyr() {
 801faa0:	b580      	push	{r7, lr}
 801faa2:	b084      	sub	sp, #16
 801faa4:	af00      	add	r7, sp, #0
 801faa6:	6078      	str	r0, [r7, #4]
	uint8_t gyr_data[6] = { 0 };
 801faa8:	2300      	movs	r3, #0
 801faaa:	60bb      	str	r3, [r7, #8]
 801faac:	2300      	movs	r3, #0
 801faae:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_GYR_X_LOW, gyr_data, 6);
 801fab0:	f107 0208 	add.w	r2, r7, #8
 801fab4:	2306      	movs	r3, #6
 801fab6:	210c      	movs	r1, #12
 801fab8:	6878      	ldr	r0, [r7, #4]
 801faba:	f7ff fc2f 	bl	801f31c <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->gyr_raw.x = bytearray_to_int16(&gyr_data[0]);
 801fabe:	f107 0308 	add.w	r3, r7, #8
 801fac2:	4618      	mov	r0, r3
 801fac4:	f000 f999 	bl	801fdfa <_Z18bytearray_to_int16Ph>
 801fac8:	4603      	mov	r3, r0
 801faca:	461a      	mov	r2, r3
 801facc:	687b      	ldr	r3, [r7, #4]
 801face:	801a      	strh	r2, [r3, #0]
	this->gyr_raw.y = bytearray_to_int16(&gyr_data[2]);
 801fad0:	f107 0308 	add.w	r3, r7, #8
 801fad4:	3302      	adds	r3, #2
 801fad6:	4618      	mov	r0, r3
 801fad8:	f000 f98f 	bl	801fdfa <_Z18bytearray_to_int16Ph>
 801fadc:	4603      	mov	r3, r0
 801fade:	461a      	mov	r2, r3
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	805a      	strh	r2, [r3, #2]
	this->gyr_raw.z = bytearray_to_int16(&gyr_data[4]);
 801fae4:	f107 0308 	add.w	r3, r7, #8
 801fae8:	3304      	adds	r3, #4
 801faea:	4618      	mov	r0, r3
 801faec:	f000 f985 	bl	801fdfa <_Z18bytearray_to_int16Ph>
 801faf0:	4603      	mov	r3, r0
 801faf2:	461a      	mov	r2, r3
 801faf4:	687b      	ldr	r3, [r7, #4]
 801faf6:	809a      	strh	r2, [r3, #4]

	return 1;
 801faf8:	2301      	movs	r3, #1
}
 801fafa:	4618      	mov	r0, r3
 801fafc:	3710      	adds	r7, #16
 801fafe:	46bd      	mov	sp, r7
 801fb00:	bd80      	pop	{r7, pc}

0801fb02 <_ZN6BMI1607readAccEv>:

/* ============================================================================= */
uint8_t BMI160::readAcc() {
 801fb02:	b580      	push	{r7, lr}
 801fb04:	b084      	sub	sp, #16
 801fb06:	af00      	add	r7, sp, #0
 801fb08:	6078      	str	r0, [r7, #4]
	uint8_t acc_data[6] = { 0 };
 801fb0a:	2300      	movs	r3, #0
 801fb0c:	60bb      	str	r3, [r7, #8]
 801fb0e:	2300      	movs	r3, #0
 801fb10:	81bb      	strh	r3, [r7, #12]
	this->readMultipleRegister(BMI160_REG_ACC_X_LOW, acc_data, 6);
 801fb12:	f107 0208 	add.w	r2, r7, #8
 801fb16:	2306      	movs	r3, #6
 801fb18:	2112      	movs	r1, #18
 801fb1a:	6878      	ldr	r0, [r7, #4]
 801fb1c:	f7ff fbfe 	bl	801f31c <_ZN6BMI16020readMultipleRegisterEhPhh>

	this->acc_raw.x = bytearray_to_int16(&acc_data[0]);
 801fb20:	f107 0308 	add.w	r3, r7, #8
 801fb24:	4618      	mov	r0, r3
 801fb26:	f000 f968 	bl	801fdfa <_Z18bytearray_to_int16Ph>
 801fb2a:	4603      	mov	r3, r0
 801fb2c:	461a      	mov	r2, r3
 801fb2e:	687b      	ldr	r3, [r7, #4]
 801fb30:	829a      	strh	r2, [r3, #20]
	this->acc_raw.y = bytearray_to_int16(&acc_data[2]);
 801fb32:	f107 0308 	add.w	r3, r7, #8
 801fb36:	3302      	adds	r3, #2
 801fb38:	4618      	mov	r0, r3
 801fb3a:	f000 f95e 	bl	801fdfa <_Z18bytearray_to_int16Ph>
 801fb3e:	4603      	mov	r3, r0
 801fb40:	461a      	mov	r2, r3
 801fb42:	687b      	ldr	r3, [r7, #4]
 801fb44:	82da      	strh	r2, [r3, #22]
	this->acc_raw.z = bytearray_to_int16(&acc_data[4]);
 801fb46:	f107 0308 	add.w	r3, r7, #8
 801fb4a:	3304      	adds	r3, #4
 801fb4c:	4618      	mov	r0, r3
 801fb4e:	f000 f954 	bl	801fdfa <_Z18bytearray_to_int16Ph>
 801fb52:	4603      	mov	r3, r0
 801fb54:	461a      	mov	r2, r3
 801fb56:	687b      	ldr	r3, [r7, #4]
 801fb58:	831a      	strh	r2, [r3, #24]

	return 1;
 801fb5a:	2301      	movs	r3, #1
}
 801fb5c:	4618      	mov	r0, r3
 801fb5e:	3710      	adds	r7, #16
 801fb60:	46bd      	mov	sp, r7
 801fb62:	bd80      	pop	{r7, pc}

0801fb64 <_ZN6BMI16013setGyroConfigEhh>:
	this->sensortime = bytearray_to_uint32(sensortime_data);
	return CORE_OK;
}

/* ============================================================================= */
uint8_t BMI160::setGyroConfig(uint8_t config, uint8_t range) {
 801fb64:	b580      	push	{r7, lr}
 801fb66:	b082      	sub	sp, #8
 801fb68:	af00      	add	r7, sp, #0
 801fb6a:	6078      	str	r0, [r7, #4]
 801fb6c:	460b      	mov	r3, r1
 801fb6e:	70fb      	strb	r3, [r7, #3]
 801fb70:	4613      	mov	r3, r2
 801fb72:	70bb      	strb	r3, [r7, #2]

	this->writeRegister(BMI160_REG_GYRO_RANGE, range);
 801fb74:	78bb      	ldrb	r3, [r7, #2]
 801fb76:	461a      	mov	r2, r3
 801fb78:	2143      	movs	r1, #67	@ 0x43
 801fb7a:	6878      	ldr	r0, [r7, #4]
 801fb7c:	f7ff fac6 	bl	801f10c <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_GYRO_CONFIG, config);
 801fb80:	78fb      	ldrb	r3, [r7, #3]
 801fb82:	461a      	mov	r2, r3
 801fb84:	2142      	movs	r1, #66	@ 0x42
 801fb86:	6878      	ldr	r0, [r7, #4]
 801fb88:	f7ff fac0 	bl	801f10c <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 801fb8c:	2301      	movs	r3, #1
}
 801fb8e:	4618      	mov	r0, r3
 801fb90:	3708      	adds	r7, #8
 801fb92:	46bd      	mov	sp, r7
 801fb94:	bd80      	pop	{r7, pc}

0801fb96 <_ZN6BMI16012setAccConfigEhh>:

/* ============================================================================= */
uint8_t BMI160::setAccConfig(uint8_t config, uint8_t range) {
 801fb96:	b580      	push	{r7, lr}
 801fb98:	b082      	sub	sp, #8
 801fb9a:	af00      	add	r7, sp, #0
 801fb9c:	6078      	str	r0, [r7, #4]
 801fb9e:	460b      	mov	r3, r1
 801fba0:	70fb      	strb	r3, [r7, #3]
 801fba2:	4613      	mov	r3, r2
 801fba4:	70bb      	strb	r3, [r7, #2]
	this->writeRegister(BMI160_REG_ACCEL_CONFIG, config);
 801fba6:	78fb      	ldrb	r3, [r7, #3]
 801fba8:	461a      	mov	r2, r3
 801fbaa:	2140      	movs	r1, #64	@ 0x40
 801fbac:	6878      	ldr	r0, [r7, #4]
 801fbae:	f7ff faad 	bl	801f10c <_ZN6BMI16013writeRegisterEhh>
	this->writeRegister(BMI160_REG_ACCEL_RANGE, range);
 801fbb2:	78bb      	ldrb	r3, [r7, #2]
 801fbb4:	461a      	mov	r2, r3
 801fbb6:	2141      	movs	r1, #65	@ 0x41
 801fbb8:	6878      	ldr	r0, [r7, #4]
 801fbba:	f7ff faa7 	bl	801f10c <_ZN6BMI16013writeRegisterEhh>

	return CORE_OK;
 801fbbe:	2301      	movs	r3, #1
}
 801fbc0:	4618      	mov	r0, r3
 801fbc2:	3708      	adds	r7, #8
 801fbc4:	46bd      	mov	sp, r7
 801fbc6:	bd80      	pop	{r7, pc}

0801fbc8 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode>:

/* ============================================================================= */
uint8_t BMI160::setPowerMode(BMI160_PowerMode mode) {
 801fbc8:	b580      	push	{r7, lr}
 801fbca:	b082      	sub	sp, #8
 801fbcc:	af00      	add	r7, sp, #0
 801fbce:	6078      	str	r0, [r7, #4]
 801fbd0:	460b      	mov	r3, r1
 801fbd2:	70fb      	strb	r3, [r7, #3]
	if (mode == BMI160_Power_Normal) {
 801fbd4:	78fb      	ldrb	r3, [r7, #3]
 801fbd6:	2b00      	cmp	r3, #0
 801fbd8:	d113      	bne.n	801fc02 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x3a>
		delay(100);
 801fbda:	2064      	movs	r0, #100	@ 0x64
 801fbdc:	f7fa fd87 	bl	801a6ee <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_NORMAL_MODE);
 801fbe0:	2215      	movs	r2, #21
 801fbe2:	217e      	movs	r1, #126	@ 0x7e
 801fbe4:	6878      	ldr	r0, [r7, #4]
 801fbe6:	f7ff fa91 	bl	801f10c <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 801fbea:	20fa      	movs	r0, #250	@ 0xfa
 801fbec:	f7fa fd7f 	bl	801a6ee <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_NORMAL_MODE);
 801fbf0:	2211      	movs	r2, #17
 801fbf2:	217e      	movs	r1, #126	@ 0x7e
 801fbf4:	6878      	ldr	r0, [r7, #4]
 801fbf6:	f7ff fa89 	bl	801f10c <_ZN6BMI16013writeRegisterEhh>
		delay(250);
 801fbfa:	20fa      	movs	r0, #250	@ 0xfa
 801fbfc:	f7fa fd77 	bl	801a6ee <_Z5delaym>
 801fc00:	e012      	b.n	801fc28 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
	} else if (mode == BMI160_Power_Suspend) {
 801fc02:	78fb      	ldrb	r3, [r7, #3]
 801fc04:	2b01      	cmp	r3, #1
 801fc06:	d10f      	bne.n	801fc28 <_ZN6BMI16012setPowerModeE16BMI160_PowerMode+0x60>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_ACCEL_SUSPEND_MODE);
 801fc08:	2210      	movs	r2, #16
 801fc0a:	217e      	movs	r1, #126	@ 0x7e
 801fc0c:	6878      	ldr	r0, [r7, #4]
 801fc0e:	f7ff fa7d 	bl	801f10c <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 801fc12:	2064      	movs	r0, #100	@ 0x64
 801fc14:	f7fa fd6b 	bl	801a6ee <_Z5delaym>
		this->writeRegister(BMI160_REG_COMMAND, BMI160_GYRO_SUSPEND_MODE);
 801fc18:	2214      	movs	r2, #20
 801fc1a:	217e      	movs	r1, #126	@ 0x7e
 801fc1c:	6878      	ldr	r0, [r7, #4]
 801fc1e:	f7ff fa75 	bl	801f10c <_ZN6BMI16013writeRegisterEhh>
		delay(100);
 801fc22:	2064      	movs	r0, #100	@ 0x64
 801fc24:	f7fa fd63 	bl	801a6ee <_Z5delaym>
	}
	return CORE_OK;
 801fc28:	2301      	movs	r3, #1
}
 801fc2a:	4618      	mov	r0, r3
 801fc2c:	3708      	adds	r7, #8
 801fc2e:	46bd      	mov	sp, r7
 801fc30:	bd80      	pop	{r7, pc}

0801fc32 <_ZN6BMI1605resetEv>:
	this->writeRegister(0x77, offset_register);

}

/* ============================================================================= */
void BMI160::reset() {
 801fc32:	b580      	push	{r7, lr}
 801fc34:	b082      	sub	sp, #8
 801fc36:	af00      	add	r7, sp, #0
 801fc38:	6078      	str	r0, [r7, #4]
	this->writeRegister(BMI160_REG_COMMAND, 0xB6);
 801fc3a:	22b6      	movs	r2, #182	@ 0xb6
 801fc3c:	217e      	movs	r1, #126	@ 0x7e
 801fc3e:	6878      	ldr	r0, [r7, #4]
 801fc40:	f7ff fa64 	bl	801f10c <_ZN6BMI16013writeRegisterEhh>
	delay(10);
 801fc44:	200a      	movs	r0, #10
 801fc46:	f7fa fd52 	bl	801a6ee <_Z5delaym>
}
 801fc4a:	bf00      	nop
 801fc4c:	3708      	adds	r7, #8
 801fc4e:	46bd      	mov	sp, r7
 801fc50:	bd80      	pop	{r7, pc}

0801fc52 <_Z10cobsEncodePhhS_>:
	@param buffer Pointer to encoded output buffer
	@return Encoded buffer length in bytes
	@note Does not output delimiter byte
*/
uint8_t cobsEncode(uint8_t *data_in, uint8_t length, uint8_t *data_out)
{
 801fc52:	b480      	push	{r7}
 801fc54:	b089      	sub	sp, #36	@ 0x24
 801fc56:	af00      	add	r7, sp, #0
 801fc58:	60f8      	str	r0, [r7, #12]
 801fc5a:	460b      	mov	r3, r1
 801fc5c:	607a      	str	r2, [r7, #4]
 801fc5e:	72fb      	strb	r3, [r7, #11]

	uint8_t *encode = data_out; // Encoded byte pointer
 801fc60:	687b      	ldr	r3, [r7, #4]
 801fc62:	61fb      	str	r3, [r7, #28]
	uint8_t *codep = encode++; // Output code pointer
 801fc64:	69fb      	ldr	r3, [r7, #28]
 801fc66:	1c5a      	adds	r2, r3, #1
 801fc68:	61fa      	str	r2, [r7, #28]
 801fc6a:	61bb      	str	r3, [r7, #24]
	uint8_t code = 1; // Code value
 801fc6c:	2301      	movs	r3, #1
 801fc6e:	75fb      	strb	r3, [r7, #23]

	for (const uint8_t *byte = (const uint8_t *)data_in; length--; ++byte)
 801fc70:	68fb      	ldr	r3, [r7, #12]
 801fc72:	613b      	str	r3, [r7, #16]
 801fc74:	e027      	b.n	801fcc6 <_Z10cobsEncodePhhS_+0x74>
	{
		if (*byte) // Byte not zero, write it
 801fc76:	693b      	ldr	r3, [r7, #16]
 801fc78:	781b      	ldrb	r3, [r3, #0]
 801fc7a:	2b00      	cmp	r3, #0
 801fc7c:	d008      	beq.n	801fc90 <_Z10cobsEncodePhhS_+0x3e>
			*encode++ = *byte, ++code;
 801fc7e:	69fb      	ldr	r3, [r7, #28]
 801fc80:	1c5a      	adds	r2, r3, #1
 801fc82:	61fa      	str	r2, [r7, #28]
 801fc84:	693a      	ldr	r2, [r7, #16]
 801fc86:	7812      	ldrb	r2, [r2, #0]
 801fc88:	701a      	strb	r2, [r3, #0]
 801fc8a:	7dfb      	ldrb	r3, [r7, #23]
 801fc8c:	3301      	adds	r3, #1
 801fc8e:	75fb      	strb	r3, [r7, #23]

		if (!*byte || code == 0xff) // Input is zero or block completed, restart
 801fc90:	693b      	ldr	r3, [r7, #16]
 801fc92:	781b      	ldrb	r3, [r3, #0]
 801fc94:	2b00      	cmp	r3, #0
 801fc96:	d002      	beq.n	801fc9e <_Z10cobsEncodePhhS_+0x4c>
 801fc98:	7dfb      	ldrb	r3, [r7, #23]
 801fc9a:	2bff      	cmp	r3, #255	@ 0xff
 801fc9c:	d110      	bne.n	801fcc0 <_Z10cobsEncodePhhS_+0x6e>
		{
			*codep = code, code = 1, codep = encode;
 801fc9e:	69bb      	ldr	r3, [r7, #24]
 801fca0:	7dfa      	ldrb	r2, [r7, #23]
 801fca2:	701a      	strb	r2, [r3, #0]
 801fca4:	2301      	movs	r3, #1
 801fca6:	75fb      	strb	r3, [r7, #23]
 801fca8:	69fb      	ldr	r3, [r7, #28]
 801fcaa:	61bb      	str	r3, [r7, #24]
			if (!*byte || length)
 801fcac:	693b      	ldr	r3, [r7, #16]
 801fcae:	781b      	ldrb	r3, [r3, #0]
 801fcb0:	2b00      	cmp	r3, #0
 801fcb2:	d002      	beq.n	801fcba <_Z10cobsEncodePhhS_+0x68>
 801fcb4:	7afb      	ldrb	r3, [r7, #11]
 801fcb6:	2b00      	cmp	r3, #0
 801fcb8:	d002      	beq.n	801fcc0 <_Z10cobsEncodePhhS_+0x6e>
				++encode;
 801fcba:	69fb      	ldr	r3, [r7, #28]
 801fcbc:	3301      	adds	r3, #1
 801fcbe:	61fb      	str	r3, [r7, #28]
	for (const uint8_t *byte = (const uint8_t *)data_in; length--; ++byte)
 801fcc0:	693b      	ldr	r3, [r7, #16]
 801fcc2:	3301      	adds	r3, #1
 801fcc4:	613b      	str	r3, [r7, #16]
 801fcc6:	7afb      	ldrb	r3, [r7, #11]
 801fcc8:	1e5a      	subs	r2, r3, #1
 801fcca:	72fa      	strb	r2, [r7, #11]
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	bf14      	ite	ne
 801fcd0:	2301      	movne	r3, #1
 801fcd2:	2300      	moveq	r3, #0
 801fcd4:	b2db      	uxtb	r3, r3
 801fcd6:	2b00      	cmp	r3, #0
 801fcd8:	d1cd      	bne.n	801fc76 <_Z10cobsEncodePhhS_+0x24>
		}
	}
	*codep = code; // Write final code value
 801fcda:	69bb      	ldr	r3, [r7, #24]
 801fcdc:	7dfa      	ldrb	r2, [r7, #23]
 801fcde:	701a      	strb	r2, [r3, #0]

	return (uint8_t)(encode - data_out);
 801fce0:	69fa      	ldr	r2, [r7, #28]
 801fce2:	687b      	ldr	r3, [r7, #4]
 801fce4:	1ad3      	subs	r3, r2, r3
 801fce6:	b2db      	uxtb	r3, r3
}
 801fce8:	4618      	mov	r0, r3
 801fcea:	3724      	adds	r7, #36	@ 0x24
 801fcec:	46bd      	mov	sp, r7
 801fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcf2:	4770      	bx	lr

0801fcf4 <_Z10cobsDecodePhhS_>:
	@param data Pointer to decoded output data
	@return Number of bytes successfully decoded
	@note Stops decoding if delimiter byte is found
*/
uint8_t cobsDecode(uint8_t *buffer, uint8_t length, uint8_t *data)
{
 801fcf4:	b480      	push	{r7}
 801fcf6:	b089      	sub	sp, #36	@ 0x24
 801fcf8:	af00      	add	r7, sp, #0
 801fcfa:	60f8      	str	r0, [r7, #12]
 801fcfc:	460b      	mov	r3, r1
 801fcfe:	607a      	str	r2, [r7, #4]
 801fd00:	72fb      	strb	r3, [r7, #11]

	const uint8_t *byte = buffer; // Encoded input byte pointer
 801fd02:	68fb      	ldr	r3, [r7, #12]
 801fd04:	61fb      	str	r3, [r7, #28]
	uint8_t *decode = (uint8_t *)data; // Decoded output byte pointer
 801fd06:	687b      	ldr	r3, [r7, #4]
 801fd08:	61bb      	str	r3, [r7, #24]

	for (uint8_t code = 0xff, block = 0; byte < buffer + length; --block)
 801fd0a:	23ff      	movs	r3, #255	@ 0xff
 801fd0c:	75fb      	strb	r3, [r7, #23]
 801fd0e:	2300      	movs	r3, #0
 801fd10:	75bb      	strb	r3, [r7, #22]
 801fd12:	e020      	b.n	801fd56 <_Z10cobsDecodePhhS_+0x62>
	{
		if (block) // Decode block byte
 801fd14:	7dbb      	ldrb	r3, [r7, #22]
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	d008      	beq.n	801fd2c <_Z10cobsDecodePhhS_+0x38>
			*decode++ = *byte++;
 801fd1a:	69fa      	ldr	r2, [r7, #28]
 801fd1c:	1c53      	adds	r3, r2, #1
 801fd1e:	61fb      	str	r3, [r7, #28]
 801fd20:	69bb      	ldr	r3, [r7, #24]
 801fd22:	1c59      	adds	r1, r3, #1
 801fd24:	61b9      	str	r1, [r7, #24]
 801fd26:	7812      	ldrb	r2, [r2, #0]
 801fd28:	701a      	strb	r2, [r3, #0]
 801fd2a:	e011      	b.n	801fd50 <_Z10cobsDecodePhhS_+0x5c>
		else
		{
			if (code != 0xff) // Encoded zero, write it
 801fd2c:	7dfb      	ldrb	r3, [r7, #23]
 801fd2e:	2bff      	cmp	r3, #255	@ 0xff
 801fd30:	d004      	beq.n	801fd3c <_Z10cobsDecodePhhS_+0x48>
				*decode++ = 0;
 801fd32:	69bb      	ldr	r3, [r7, #24]
 801fd34:	1c5a      	adds	r2, r3, #1
 801fd36:	61ba      	str	r2, [r7, #24]
 801fd38:	2200      	movs	r2, #0
 801fd3a:	701a      	strb	r2, [r3, #0]
			block = code = *byte++; // Next block length
 801fd3c:	69fb      	ldr	r3, [r7, #28]
 801fd3e:	1c5a      	adds	r2, r3, #1
 801fd40:	61fa      	str	r2, [r7, #28]
 801fd42:	781b      	ldrb	r3, [r3, #0]
 801fd44:	75fb      	strb	r3, [r7, #23]
 801fd46:	7dfb      	ldrb	r3, [r7, #23]
 801fd48:	75bb      	strb	r3, [r7, #22]
			if (!code) // Delimiter code found
 801fd4a:	7dfb      	ldrb	r3, [r7, #23]
 801fd4c:	2b00      	cmp	r3, #0
 801fd4e:	d009      	beq.n	801fd64 <_Z10cobsDecodePhhS_+0x70>
	for (uint8_t code = 0xff, block = 0; byte < buffer + length; --block)
 801fd50:	7dbb      	ldrb	r3, [r7, #22]
 801fd52:	3b01      	subs	r3, #1
 801fd54:	75bb      	strb	r3, [r7, #22]
 801fd56:	7afb      	ldrb	r3, [r7, #11]
 801fd58:	68fa      	ldr	r2, [r7, #12]
 801fd5a:	4413      	add	r3, r2
 801fd5c:	69fa      	ldr	r2, [r7, #28]
 801fd5e:	429a      	cmp	r2, r3
 801fd60:	d3d8      	bcc.n	801fd14 <_Z10cobsDecodePhhS_+0x20>
 801fd62:	e000      	b.n	801fd66 <_Z10cobsDecodePhhS_+0x72>
				break;
 801fd64:	bf00      	nop
		}
	}

	return (uint8_t)(decode - (uint8_t *)data);
 801fd66:	69ba      	ldr	r2, [r7, #24]
 801fd68:	687b      	ldr	r3, [r7, #4]
 801fd6a:	1ad3      	subs	r3, r2, r3
 801fd6c:	b2db      	uxtb	r3, r3
}
 801fd6e:	4618      	mov	r0, r3
 801fd70:	3724      	adds	r7, #36	@ 0x24
 801fd72:	46bd      	mov	sp, r7
 801fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd78:	4770      	bx	lr
	...

0801fd7c <_Z17cobsDecodeInPlacePhh>:



uint8_t cobsDecodeInPlace(uint8_t *buffer, uint8_t length)
{
 801fd7c:	b580      	push	{r7, lr}
 801fd7e:	b084      	sub	sp, #16
 801fd80:	af00      	add	r7, sp, #0
 801fd82:	6078      	str	r0, [r7, #4]
 801fd84:	460b      	mov	r3, r1
 801fd86:	70fb      	strb	r3, [r7, #3]
	uint8_t decode_len = cobsDecode(buffer, length, cobsDecodeBuffer);
 801fd88:	78fb      	ldrb	r3, [r7, #3]
 801fd8a:	4a0f      	ldr	r2, [pc, #60]	@ (801fdc8 <_Z17cobsDecodeInPlacePhh+0x4c>)
 801fd8c:	4619      	mov	r1, r3
 801fd8e:	6878      	ldr	r0, [r7, #4]
 801fd90:	f7ff ffb0 	bl	801fcf4 <_Z10cobsDecodePhhS_>
 801fd94:	4603      	mov	r3, r0
 801fd96:	72fb      	strb	r3, [r7, #11]

	for (int i = 0; i<decode_len; i++){
 801fd98:	2300      	movs	r3, #0
 801fd9a:	60fb      	str	r3, [r7, #12]
 801fd9c:	e00a      	b.n	801fdb4 <_Z17cobsDecodeInPlacePhh+0x38>
		buffer[i] = cobsDecodeBuffer[i];
 801fd9e:	68fb      	ldr	r3, [r7, #12]
 801fda0:	687a      	ldr	r2, [r7, #4]
 801fda2:	4413      	add	r3, r2
 801fda4:	4908      	ldr	r1, [pc, #32]	@ (801fdc8 <_Z17cobsDecodeInPlacePhh+0x4c>)
 801fda6:	68fa      	ldr	r2, [r7, #12]
 801fda8:	440a      	add	r2, r1
 801fdaa:	7812      	ldrb	r2, [r2, #0]
 801fdac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i<decode_len; i++){
 801fdae:	68fb      	ldr	r3, [r7, #12]
 801fdb0:	3301      	adds	r3, #1
 801fdb2:	60fb      	str	r3, [r7, #12]
 801fdb4:	7afb      	ldrb	r3, [r7, #11]
 801fdb6:	68fa      	ldr	r2, [r7, #12]
 801fdb8:	429a      	cmp	r2, r3
 801fdba:	dbf0      	blt.n	801fd9e <_Z17cobsDecodeInPlacePhh+0x22>
	}

	return decode_len;
 801fdbc:	7afb      	ldrb	r3, [r7, #11]
}
 801fdbe:	4618      	mov	r0, r3
 801fdc0:	3710      	adds	r7, #16
 801fdc2:	46bd      	mov	sp, r7
 801fdc4:	bd80      	pop	{r7, pc}
 801fdc6:	bf00      	nop
 801fdc8:	2401e06c 	.word	0x2401e06c

0801fdcc <_Z15uint8_to_uint16hh>:
	temp = ((bytearray[3] << 24) | (bytearray[2] << 16) | (bytearray[1] << 8)
			| bytearray[0]);
	return *((float*) &temp);
}

uint16_t uint8_to_uint16(uint8_t byte1, uint8_t byte2) {
 801fdcc:	b480      	push	{r7}
 801fdce:	b085      	sub	sp, #20
 801fdd0:	af00      	add	r7, sp, #0
 801fdd2:	4603      	mov	r3, r0
 801fdd4:	460a      	mov	r2, r1
 801fdd6:	71fb      	strb	r3, [r7, #7]
 801fdd8:	4613      	mov	r3, r2
 801fdda:	71bb      	strb	r3, [r7, #6]
	uint16_t out = byte1 << 8 | byte2;
 801fddc:	79fb      	ldrb	r3, [r7, #7]
 801fdde:	021b      	lsls	r3, r3, #8
 801fde0:	b21a      	sxth	r2, r3
 801fde2:	79bb      	ldrb	r3, [r7, #6]
 801fde4:	b21b      	sxth	r3, r3
 801fde6:	4313      	orrs	r3, r2
 801fde8:	b21b      	sxth	r3, r3
 801fdea:	81fb      	strh	r3, [r7, #14]
	return out;
 801fdec:	89fb      	ldrh	r3, [r7, #14]
}
 801fdee:	4618      	mov	r0, r3
 801fdf0:	3714      	adds	r7, #20
 801fdf2:	46bd      	mov	sp, r7
 801fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdf8:	4770      	bx	lr

0801fdfa <_Z18bytearray_to_int16Ph>:
uint16_t bytearray_to_uint16(uint8_t *bytearray) {
	uint16_t out = bytearray[1] << 8 | bytearray[0];
	return out;
}

int16_t bytearray_to_int16(uint8_t *bytearray) {
 801fdfa:	b480      	push	{r7}
 801fdfc:	b085      	sub	sp, #20
 801fdfe:	af00      	add	r7, sp, #0
 801fe00:	6078      	str	r0, [r7, #4]
	int16_t out = bytearray[1] << 8 | bytearray[0];
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	3301      	adds	r3, #1
 801fe06:	781b      	ldrb	r3, [r3, #0]
 801fe08:	021b      	lsls	r3, r3, #8
 801fe0a:	b21a      	sxth	r2, r3
 801fe0c:	687b      	ldr	r3, [r7, #4]
 801fe0e:	781b      	ldrb	r3, [r3, #0]
 801fe10:	b21b      	sxth	r3, r3
 801fe12:	4313      	orrs	r3, r2
 801fe14:	81fb      	strh	r3, [r7, #14]
	return out;
 801fe16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801fe1a:	4618      	mov	r0, r3
 801fe1c:	3714      	adds	r7, #20
 801fe1e:	46bd      	mov	sp, r7
 801fe20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe24:	4770      	bx	lr

0801fe26 <_Z17core_ErrorHandleri>:
 */


#include "core_errors.h"

void core_ErrorHandler(int error_id) {
 801fe26:	b480      	push	{r7}
 801fe28:	b083      	sub	sp, #12
 801fe2a:	af00      	add	r7, sp, #0
 801fe2c:	6078      	str	r0, [r7, #4]
	while(1);
 801fe2e:	bf00      	nop
 801fe30:	e7fd      	b.n	801fe2e <_Z17core_ErrorHandleri+0x8>

0801fe32 <_Z5limitfff>:

	return sum / len;
}


float limit(float data, float min_value, float max_value){
 801fe32:	b480      	push	{r7}
 801fe34:	b085      	sub	sp, #20
 801fe36:	af00      	add	r7, sp, #0
 801fe38:	ed87 0a03 	vstr	s0, [r7, #12]
 801fe3c:	edc7 0a02 	vstr	s1, [r7, #8]
 801fe40:	ed87 1a01 	vstr	s2, [r7, #4]
	if (data > max_value){
 801fe44:	ed97 7a03 	vldr	s14, [r7, #12]
 801fe48:	edd7 7a01 	vldr	s15, [r7, #4]
 801fe4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fe50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe54:	dd01      	ble.n	801fe5a <_Z5limitfff+0x28>
		data = max_value;
 801fe56:	687b      	ldr	r3, [r7, #4]
 801fe58:	60fb      	str	r3, [r7, #12]
	}
	if (data < min_value){
 801fe5a:	ed97 7a03 	vldr	s14, [r7, #12]
 801fe5e:	edd7 7a02 	vldr	s15, [r7, #8]
 801fe62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fe66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe6a:	d501      	bpl.n	801fe70 <_Z5limitfff+0x3e>
		data = min_value;
 801fe6c:	68bb      	ldr	r3, [r7, #8]
 801fe6e:	60fb      	str	r3, [r7, #12]
	}
	return data;
 801fe70:	68fb      	ldr	r3, [r7, #12]
 801fe72:	ee07 3a90 	vmov	s15, r3
}
 801fe76:	eeb0 0a67 	vmov.f32	s0, s15
 801fe7a:	3714      	adds	r7, #20
 801fe7c:	46bd      	mov	sp, r7
 801fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe82:	4770      	bx	lr

0801fe84 <_Z5limitff>:


float limit(float data, float max_value){
 801fe84:	b580      	push	{r7, lr}
 801fe86:	b082      	sub	sp, #8
 801fe88:	af00      	add	r7, sp, #0
 801fe8a:	ed87 0a01 	vstr	s0, [r7, #4]
 801fe8e:	edc7 0a00 	vstr	s1, [r7]
	return limit(data, -max_value, max_value);
 801fe92:	edd7 7a00 	vldr	s15, [r7]
 801fe96:	eef1 7a67 	vneg.f32	s15, s15
 801fe9a:	ed97 1a00 	vldr	s2, [r7]
 801fe9e:	eef0 0a67 	vmov.f32	s1, s15
 801fea2:	ed97 0a01 	vldr	s0, [r7, #4]
 801fea6:	f7ff ffc4 	bl	801fe32 <_Z5limitfff>
 801feaa:	eef0 7a40 	vmov.f32	s15, s0
}
 801feae:	eeb0 0a67 	vmov.f32	s0, s15
 801feb2:	3708      	adds	r7, #8
 801feb4:	46bd      	mov	sp, r7
 801feb6:	bd80      	pop	{r7, pc}

0801feb8 <_ZN15core_utils_GPIOC1EP12GPIO_TypeDeft>:
#include "core_utils_gpio.h"

static core_utils_Callback<void, void> callbacks[16];
static void execute_gpio_callback(uint16_t gpio_pin);

core_utils_GPIO::core_utils_GPIO(GPIO_TypeDef *GPIOx, uint16_t pin) {
 801feb8:	b480      	push	{r7}
 801feba:	b085      	sub	sp, #20
 801febc:	af00      	add	r7, sp, #0
 801febe:	60f8      	str	r0, [r7, #12]
 801fec0:	60b9      	str	r1, [r7, #8]
 801fec2:	4613      	mov	r3, r2
 801fec4:	80fb      	strh	r3, [r7, #6]
	this->GPIOx = GPIOx;
 801fec6:	68fb      	ldr	r3, [r7, #12]
 801fec8:	68ba      	ldr	r2, [r7, #8]
 801feca:	601a      	str	r2, [r3, #0]
	this->pin = pin;
 801fecc:	68fb      	ldr	r3, [r7, #12]
 801fece:	88fa      	ldrh	r2, [r7, #6]
 801fed0:	809a      	strh	r2, [r3, #4]
}
 801fed2:	68fb      	ldr	r3, [r7, #12]
 801fed4:	4618      	mov	r0, r3
 801fed6:	3714      	adds	r7, #20
 801fed8:	46bd      	mov	sp, r7
 801feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fede:	4770      	bx	lr

0801fee0 <_ZN15core_utils_GPIO5writeEh>:

/* -------------------------------------------------------------------------------- */
void core_utils_GPIO::write(uint8_t value) {
 801fee0:	b580      	push	{r7, lr}
 801fee2:	b082      	sub	sp, #8
 801fee4:	af00      	add	r7, sp, #0
 801fee6:	6078      	str	r0, [r7, #4]
 801fee8:	460b      	mov	r3, r1
 801feea:	70fb      	strb	r3, [r7, #3]
	if (value) {
 801feec:	78fb      	ldrb	r3, [r7, #3]
 801feee:	2b00      	cmp	r3, #0
 801fef0:	d008      	beq.n	801ff04 <_ZN15core_utils_GPIO5writeEh+0x24>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 801fef2:	687b      	ldr	r3, [r7, #4]
 801fef4:	6818      	ldr	r0, [r3, #0]
 801fef6:	687b      	ldr	r3, [r7, #4]
 801fef8:	889b      	ldrh	r3, [r3, #4]
 801fefa:	2201      	movs	r2, #1
 801fefc:	4619      	mov	r1, r3
 801fefe:	f7e6 f9e7 	bl	80062d0 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
	}
}
 801ff02:	e007      	b.n	801ff14 <_ZN15core_utils_GPIO5writeEh+0x34>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 801ff04:	687b      	ldr	r3, [r7, #4]
 801ff06:	6818      	ldr	r0, [r3, #0]
 801ff08:	687b      	ldr	r3, [r7, #4]
 801ff0a:	889b      	ldrh	r3, [r3, #4]
 801ff0c:	2200      	movs	r2, #0
 801ff0e:	4619      	mov	r1, r3
 801ff10:	f7e6 f9de 	bl	80062d0 <HAL_GPIO_WritePin>
}
 801ff14:	bf00      	nop
 801ff16:	3708      	adds	r7, #8
 801ff18:	46bd      	mov	sp, r7
 801ff1a:	bd80      	pop	{r7, pc}

0801ff1c <_ZN15core_utils_GPIO6toggleEv>:

/* -------------------------------------------------------------------------------- */
void core_utils_GPIO::toggle() {
 801ff1c:	b580      	push	{r7, lr}
 801ff1e:	b082      	sub	sp, #8
 801ff20:	af00      	add	r7, sp, #0
 801ff22:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOx, pin);
 801ff24:	687b      	ldr	r3, [r7, #4]
 801ff26:	681a      	ldr	r2, [r3, #0]
 801ff28:	687b      	ldr	r3, [r7, #4]
 801ff2a:	889b      	ldrh	r3, [r3, #4]
 801ff2c:	4619      	mov	r1, r3
 801ff2e:	4610      	mov	r0, r2
 801ff30:	f7e6 f9e7 	bl	8006302 <HAL_GPIO_TogglePin>
}
 801ff34:	bf00      	nop
 801ff36:	3708      	adds	r7, #8
 801ff38:	46bd      	mov	sp, r7
 801ff3a:	bd80      	pop	{r7, pc}

0801ff3c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE>:
	core_utils_gpio_registerExtiCallback(line,
			core_utils_Callback<void, void>(function));
}
/* -------------------------------------------------------------------------------- */
void core_utils_gpio_registerExtiCallback(uint16_t line,
		core_utils_Callback<void, void> callback) {
 801ff3c:	b580      	push	{r7, lr}
 801ff3e:	b082      	sub	sp, #8
 801ff40:	af00      	add	r7, sp, #0
 801ff42:	4603      	mov	r3, r0
 801ff44:	6039      	str	r1, [r7, #0]
 801ff46:	80fb      	strh	r3, [r7, #6]
	switch (line) {
 801ff48:	88fb      	ldrh	r3, [r7, #6]
 801ff4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ff4e:	f000 80db 	beq.w	8020108 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1cc>
 801ff52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ff56:	f300 80dc 	bgt.w	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801ff5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ff5e:	f000 80ce 	beq.w	80200fe <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1c2>
 801ff62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ff66:	f300 80d4 	bgt.w	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801ff6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ff6e:	f000 80c1 	beq.w	80200f4 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1b8>
 801ff72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ff76:	f300 80cc 	bgt.w	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801ff7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ff7e:	f000 80b4 	beq.w	80200ea <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1ae>
 801ff82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ff86:	f300 80c4 	bgt.w	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801ff8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801ff8e:	f000 80a7 	beq.w	80200e0 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1a4>
 801ff92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801ff96:	f300 80bc 	bgt.w	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801ff9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ff9e:	f000 809a 	beq.w	80200d6 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x19a>
 801ffa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ffa6:	f300 80b4 	bgt.w	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801ffaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ffae:	f000 808d 	beq.w	80200cc <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x190>
 801ffb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ffb6:	f300 80ac 	bgt.w	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801ffba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ffbe:	f000 8080 	beq.w	80200c2 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x186>
 801ffc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ffc6:	f300 80a4 	bgt.w	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801ffca:	2b80      	cmp	r3, #128	@ 0x80
 801ffcc:	d074      	beq.n	80200b8 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x17c>
 801ffce:	2b80      	cmp	r3, #128	@ 0x80
 801ffd0:	f300 809f 	bgt.w	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801ffd4:	2b20      	cmp	r3, #32
 801ffd6:	dc49      	bgt.n	802006c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x130>
 801ffd8:	2b00      	cmp	r3, #0
 801ffda:	f340 809a 	ble.w	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801ffde:	3b01      	subs	r3, #1
 801ffe0:	2b1f      	cmp	r3, #31
 801ffe2:	f200 8096 	bhi.w	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
 801ffe6:	a201      	add	r2, pc, #4	@ (adr r2, 801ffec <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0xb0>)
 801ffe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ffec:	08020073 	.word	0x08020073
 801fff0:	0802007d 	.word	0x0802007d
 801fff4:	08020113 	.word	0x08020113
 801fff8:	08020087 	.word	0x08020087
 801fffc:	08020113 	.word	0x08020113
 8020000:	08020113 	.word	0x08020113
 8020004:	08020113 	.word	0x08020113
 8020008:	08020091 	.word	0x08020091
 802000c:	08020113 	.word	0x08020113
 8020010:	08020113 	.word	0x08020113
 8020014:	08020113 	.word	0x08020113
 8020018:	08020113 	.word	0x08020113
 802001c:	08020113 	.word	0x08020113
 8020020:	08020113 	.word	0x08020113
 8020024:	08020113 	.word	0x08020113
 8020028:	0802009b 	.word	0x0802009b
 802002c:	08020113 	.word	0x08020113
 8020030:	08020113 	.word	0x08020113
 8020034:	08020113 	.word	0x08020113
 8020038:	08020113 	.word	0x08020113
 802003c:	08020113 	.word	0x08020113
 8020040:	08020113 	.word	0x08020113
 8020044:	08020113 	.word	0x08020113
 8020048:	08020113 	.word	0x08020113
 802004c:	08020113 	.word	0x08020113
 8020050:	08020113 	.word	0x08020113
 8020054:	08020113 	.word	0x08020113
 8020058:	08020113 	.word	0x08020113
 802005c:	08020113 	.word	0x08020113
 8020060:	08020113 	.word	0x08020113
 8020064:	08020113 	.word	0x08020113
 8020068:	080200a5 	.word	0x080200a5
 802006c:	2b40      	cmp	r3, #64	@ 0x40
 802006e:	d01e      	beq.n	80200ae <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x172>
	case GPIO_PIN_15: {
		callbacks[15] = callback;
		break;
	}
	}
}
 8020070:	e04f      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[0] = callback;
 8020072:	6839      	ldr	r1, [r7, #0]
 8020074:	4829      	ldr	r0, [pc, #164]	@ (802011c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e0>)
 8020076:	f7f4 faa1 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 802007a:	e04a      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[1] = callback;
 802007c:	6839      	ldr	r1, [r7, #0]
 802007e:	4828      	ldr	r0, [pc, #160]	@ (8020120 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e4>)
 8020080:	f7f4 fa9c 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020084:	e045      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[2] = callback;
 8020086:	6839      	ldr	r1, [r7, #0]
 8020088:	4826      	ldr	r0, [pc, #152]	@ (8020124 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1e8>)
 802008a:	f7f4 fa97 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 802008e:	e040      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[3] = callback;
 8020090:	6839      	ldr	r1, [r7, #0]
 8020092:	4825      	ldr	r0, [pc, #148]	@ (8020128 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1ec>)
 8020094:	f7f4 fa92 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020098:	e03b      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[4] = callback;
 802009a:	6839      	ldr	r1, [r7, #0]
 802009c:	4823      	ldr	r0, [pc, #140]	@ (802012c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f0>)
 802009e:	f7f4 fa8d 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 80200a2:	e036      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[5] = callback;
 80200a4:	6839      	ldr	r1, [r7, #0]
 80200a6:	4822      	ldr	r0, [pc, #136]	@ (8020130 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f4>)
 80200a8:	f7f4 fa88 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 80200ac:	e031      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[6] = callback;
 80200ae:	6839      	ldr	r1, [r7, #0]
 80200b0:	4820      	ldr	r0, [pc, #128]	@ (8020134 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1f8>)
 80200b2:	f7f4 fa83 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 80200b6:	e02c      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[7] = callback;
 80200b8:	6839      	ldr	r1, [r7, #0]
 80200ba:	481f      	ldr	r0, [pc, #124]	@ (8020138 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1fc>)
 80200bc:	f7f4 fa7e 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 80200c0:	e027      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[8] = callback;
 80200c2:	6839      	ldr	r1, [r7, #0]
 80200c4:	481d      	ldr	r0, [pc, #116]	@ (802013c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x200>)
 80200c6:	f7f4 fa79 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 80200ca:	e022      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[9] = callback;
 80200cc:	6839      	ldr	r1, [r7, #0]
 80200ce:	481c      	ldr	r0, [pc, #112]	@ (8020140 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x204>)
 80200d0:	f7f4 fa74 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 80200d4:	e01d      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[10] = callback;
 80200d6:	6839      	ldr	r1, [r7, #0]
 80200d8:	481a      	ldr	r0, [pc, #104]	@ (8020144 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x208>)
 80200da:	f7f4 fa6f 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 80200de:	e018      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[11] = callback;
 80200e0:	6839      	ldr	r1, [r7, #0]
 80200e2:	4819      	ldr	r0, [pc, #100]	@ (8020148 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x20c>)
 80200e4:	f7f4 fa6a 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 80200e8:	e013      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[12] = callback;
 80200ea:	6839      	ldr	r1, [r7, #0]
 80200ec:	4817      	ldr	r0, [pc, #92]	@ (802014c <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x210>)
 80200ee:	f7f4 fa65 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 80200f2:	e00e      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[13] = callback;
 80200f4:	6839      	ldr	r1, [r7, #0]
 80200f6:	4816      	ldr	r0, [pc, #88]	@ (8020150 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x214>)
 80200f8:	f7f4 fa60 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 80200fc:	e009      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[14] = callback;
 80200fe:	6839      	ldr	r1, [r7, #0]
 8020100:	4814      	ldr	r0, [pc, #80]	@ (8020154 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x218>)
 8020102:	f7f4 fa5b 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020106:	e004      	b.n	8020112 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x1d6>
		callbacks[15] = callback;
 8020108:	6839      	ldr	r1, [r7, #0]
 802010a:	4813      	ldr	r0, [pc, #76]	@ (8020158 <_Z36core_utils_gpio_registerExtiCallbackt19core_utils_CallbackIvvE+0x21c>)
 802010c:	f7f4 fa56 	bl	80145bc <_ZN19core_utils_CallbackIvvEaSERKS0_>
		break;
 8020110:	bf00      	nop
}
 8020112:	bf00      	nop
 8020114:	3708      	adds	r7, #8
 8020116:	46bd      	mov	sp, r7
 8020118:	bd80      	pop	{r7, pc}
 802011a:	bf00      	nop
 802011c:	2401e16c 	.word	0x2401e16c
 8020120:	2401e18c 	.word	0x2401e18c
 8020124:	2401e1ac 	.word	0x2401e1ac
 8020128:	2401e1cc 	.word	0x2401e1cc
 802012c:	2401e1ec 	.word	0x2401e1ec
 8020130:	2401e20c 	.word	0x2401e20c
 8020134:	2401e22c 	.word	0x2401e22c
 8020138:	2401e24c 	.word	0x2401e24c
 802013c:	2401e26c 	.word	0x2401e26c
 8020140:	2401e28c 	.word	0x2401e28c
 8020144:	2401e2ac 	.word	0x2401e2ac
 8020148:	2401e2cc 	.word	0x2401e2cc
 802014c:	2401e2ec 	.word	0x2401e2ec
 8020150:	2401e30c 	.word	0x2401e30c
 8020154:	2401e32c 	.word	0x2401e32c
 8020158:	2401e34c 	.word	0x2401e34c

0802015c <HAL_GPIO_EXTI_Callback>:

/* -------------------------------------------------------------------------------- */
extern "C" {
void HAL_GPIO_EXTI_Callback(uint16_t gpio_pin) {
 802015c:	b580      	push	{r7, lr}
 802015e:	b082      	sub	sp, #8
 8020160:	af00      	add	r7, sp, #0
 8020162:	4603      	mov	r3, r0
 8020164:	80fb      	strh	r3, [r7, #6]
	execute_gpio_callback(gpio_pin);
 8020166:	88fb      	ldrh	r3, [r7, #6]
 8020168:	4618      	mov	r0, r3
 802016a:	f000 f805 	bl	8020178 <_ZL21execute_gpio_callbackt>
}
 802016e:	bf00      	nop
 8020170:	3708      	adds	r7, #8
 8020172:	46bd      	mov	sp, r7
 8020174:	bd80      	pop	{r7, pc}
	...

08020178 <_ZL21execute_gpio_callbackt>:
}

static void execute_gpio_callback(uint16_t gpio_pin) {
 8020178:	b580      	push	{r7, lr}
 802017a:	b082      	sub	sp, #8
 802017c:	af00      	add	r7, sp, #0
 802017e:	4603      	mov	r3, r0
 8020180:	80fb      	strh	r3, [r7, #6]
	switch (gpio_pin) {
 8020182:	88fb      	ldrh	r3, [r7, #6]
 8020184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020188:	f000 80f6 	beq.w	8020378 <_ZL21execute_gpio_callbackt+0x200>
 802018c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8020190:	f300 80f9 	bgt.w	8020386 <_ZL21execute_gpio_callbackt+0x20e>
 8020194:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8020198:	f000 80e7 	beq.w	802036a <_ZL21execute_gpio_callbackt+0x1f2>
 802019c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80201a0:	f300 80f1 	bgt.w	8020386 <_ZL21execute_gpio_callbackt+0x20e>
 80201a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80201a8:	f000 80d8 	beq.w	802035c <_ZL21execute_gpio_callbackt+0x1e4>
 80201ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80201b0:	f300 80e9 	bgt.w	8020386 <_ZL21execute_gpio_callbackt+0x20e>
 80201b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80201b8:	f000 80c9 	beq.w	802034e <_ZL21execute_gpio_callbackt+0x1d6>
 80201bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80201c0:	f300 80e1 	bgt.w	8020386 <_ZL21execute_gpio_callbackt+0x20e>
 80201c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80201c8:	f000 80ba 	beq.w	8020340 <_ZL21execute_gpio_callbackt+0x1c8>
 80201cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80201d0:	f300 80d9 	bgt.w	8020386 <_ZL21execute_gpio_callbackt+0x20e>
 80201d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80201d8:	f000 80ab 	beq.w	8020332 <_ZL21execute_gpio_callbackt+0x1ba>
 80201dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80201e0:	f300 80d1 	bgt.w	8020386 <_ZL21execute_gpio_callbackt+0x20e>
 80201e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80201e8:	f000 809c 	beq.w	8020324 <_ZL21execute_gpio_callbackt+0x1ac>
 80201ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80201f0:	f300 80c9 	bgt.w	8020386 <_ZL21execute_gpio_callbackt+0x20e>
 80201f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80201f8:	f000 808d 	beq.w	8020316 <_ZL21execute_gpio_callbackt+0x19e>
 80201fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020200:	f300 80c1 	bgt.w	8020386 <_ZL21execute_gpio_callbackt+0x20e>
 8020204:	2b80      	cmp	r3, #128	@ 0x80
 8020206:	d07f      	beq.n	8020308 <_ZL21execute_gpio_callbackt+0x190>
 8020208:	2b80      	cmp	r3, #128	@ 0x80
 802020a:	f300 80bc 	bgt.w	8020386 <_ZL21execute_gpio_callbackt+0x20e>
 802020e:	2b20      	cmp	r3, #32
 8020210:	dc4a      	bgt.n	80202a8 <_ZL21execute_gpio_callbackt+0x130>
 8020212:	2b00      	cmp	r3, #0
 8020214:	f340 80b7 	ble.w	8020386 <_ZL21execute_gpio_callbackt+0x20e>
 8020218:	3b01      	subs	r3, #1
 802021a:	2b1f      	cmp	r3, #31
 802021c:	f200 80b3 	bhi.w	8020386 <_ZL21execute_gpio_callbackt+0x20e>
 8020220:	a201      	add	r2, pc, #4	@ (adr r2, 8020228 <_ZL21execute_gpio_callbackt+0xb0>)
 8020222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020226:	bf00      	nop
 8020228:	080202af 	.word	0x080202af
 802022c:	080202bb 	.word	0x080202bb
 8020230:	08020387 	.word	0x08020387
 8020234:	080202c7 	.word	0x080202c7
 8020238:	08020387 	.word	0x08020387
 802023c:	08020387 	.word	0x08020387
 8020240:	08020387 	.word	0x08020387
 8020244:	080202d3 	.word	0x080202d3
 8020248:	08020387 	.word	0x08020387
 802024c:	08020387 	.word	0x08020387
 8020250:	08020387 	.word	0x08020387
 8020254:	08020387 	.word	0x08020387
 8020258:	08020387 	.word	0x08020387
 802025c:	08020387 	.word	0x08020387
 8020260:	08020387 	.word	0x08020387
 8020264:	080202df 	.word	0x080202df
 8020268:	08020387 	.word	0x08020387
 802026c:	08020387 	.word	0x08020387
 8020270:	08020387 	.word	0x08020387
 8020274:	08020387 	.word	0x08020387
 8020278:	08020387 	.word	0x08020387
 802027c:	08020387 	.word	0x08020387
 8020280:	08020387 	.word	0x08020387
 8020284:	08020387 	.word	0x08020387
 8020288:	08020387 	.word	0x08020387
 802028c:	08020387 	.word	0x08020387
 8020290:	08020387 	.word	0x08020387
 8020294:	08020387 	.word	0x08020387
 8020298:	08020387 	.word	0x08020387
 802029c:	08020387 	.word	0x08020387
 80202a0:	08020387 	.word	0x08020387
 80202a4:	080202ed 	.word	0x080202ed
 80202a8:	2b40      	cmp	r3, #64	@ 0x40
 80202aa:	d026      	beq.n	80202fa <_ZL21execute_gpio_callbackt+0x182>
	case GPIO_PIN_15: {
		callbacks[15].call();
		break;
	}
	}
}
 80202ac:	e06b      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[0].call();
 80202ae:	4b38      	ldr	r3, [pc, #224]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 80202b0:	681b      	ldr	r3, [r3, #0]
 80202b2:	681b      	ldr	r3, [r3, #0]
 80202b4:	4836      	ldr	r0, [pc, #216]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 80202b6:	4798      	blx	r3
		break;
 80202b8:	e065      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[1].call();
 80202ba:	4b35      	ldr	r3, [pc, #212]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 80202bc:	6a1b      	ldr	r3, [r3, #32]
 80202be:	681b      	ldr	r3, [r3, #0]
 80202c0:	4834      	ldr	r0, [pc, #208]	@ (8020394 <_ZL21execute_gpio_callbackt+0x21c>)
 80202c2:	4798      	blx	r3
		break;
 80202c4:	e05f      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[2].call();
 80202c6:	4b32      	ldr	r3, [pc, #200]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 80202c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80202ca:	681b      	ldr	r3, [r3, #0]
 80202cc:	4832      	ldr	r0, [pc, #200]	@ (8020398 <_ZL21execute_gpio_callbackt+0x220>)
 80202ce:	4798      	blx	r3
		break;
 80202d0:	e059      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[3].call();
 80202d2:	4b2f      	ldr	r3, [pc, #188]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 80202d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80202d6:	681b      	ldr	r3, [r3, #0]
 80202d8:	4830      	ldr	r0, [pc, #192]	@ (802039c <_ZL21execute_gpio_callbackt+0x224>)
 80202da:	4798      	blx	r3
		break;
 80202dc:	e053      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[4].call();
 80202de:	4b2c      	ldr	r3, [pc, #176]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 80202e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80202e4:	681b      	ldr	r3, [r3, #0]
 80202e6:	482e      	ldr	r0, [pc, #184]	@ (80203a0 <_ZL21execute_gpio_callbackt+0x228>)
 80202e8:	4798      	blx	r3
		break;
 80202ea:	e04c      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[5].call();
 80202ec:	4b28      	ldr	r3, [pc, #160]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 80202ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80202f2:	681b      	ldr	r3, [r3, #0]
 80202f4:	482b      	ldr	r0, [pc, #172]	@ (80203a4 <_ZL21execute_gpio_callbackt+0x22c>)
 80202f6:	4798      	blx	r3
		break;
 80202f8:	e045      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[6].call();
 80202fa:	4b25      	ldr	r3, [pc, #148]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 80202fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8020300:	681b      	ldr	r3, [r3, #0]
 8020302:	4829      	ldr	r0, [pc, #164]	@ (80203a8 <_ZL21execute_gpio_callbackt+0x230>)
 8020304:	4798      	blx	r3
		break;
 8020306:	e03e      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[7].call();
 8020308:	4b21      	ldr	r3, [pc, #132]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 802030a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 802030e:	681b      	ldr	r3, [r3, #0]
 8020310:	4826      	ldr	r0, [pc, #152]	@ (80203ac <_ZL21execute_gpio_callbackt+0x234>)
 8020312:	4798      	blx	r3
		break;
 8020314:	e037      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[8].call();
 8020316:	4b1e      	ldr	r3, [pc, #120]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 8020318:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 802031c:	681b      	ldr	r3, [r3, #0]
 802031e:	4824      	ldr	r0, [pc, #144]	@ (80203b0 <_ZL21execute_gpio_callbackt+0x238>)
 8020320:	4798      	blx	r3
		break;
 8020322:	e030      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[9].call();
 8020324:	4b1a      	ldr	r3, [pc, #104]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 8020326:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 802032a:	681b      	ldr	r3, [r3, #0]
 802032c:	4821      	ldr	r0, [pc, #132]	@ (80203b4 <_ZL21execute_gpio_callbackt+0x23c>)
 802032e:	4798      	blx	r3
		break;
 8020330:	e029      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[10].call();
 8020332:	4b17      	ldr	r3, [pc, #92]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 8020334:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8020338:	681b      	ldr	r3, [r3, #0]
 802033a:	481f      	ldr	r0, [pc, #124]	@ (80203b8 <_ZL21execute_gpio_callbackt+0x240>)
 802033c:	4798      	blx	r3
		break;
 802033e:	e022      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[11].call();
 8020340:	4b13      	ldr	r3, [pc, #76]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 8020342:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8020346:	681b      	ldr	r3, [r3, #0]
 8020348:	481c      	ldr	r0, [pc, #112]	@ (80203bc <_ZL21execute_gpio_callbackt+0x244>)
 802034a:	4798      	blx	r3
		break;
 802034c:	e01b      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[12].call();
 802034e:	4b10      	ldr	r3, [pc, #64]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 8020350:	f8d3 3180 	ldr.w	r3, [r3, #384]	@ 0x180
 8020354:	681b      	ldr	r3, [r3, #0]
 8020356:	481a      	ldr	r0, [pc, #104]	@ (80203c0 <_ZL21execute_gpio_callbackt+0x248>)
 8020358:	4798      	blx	r3
		break;
 802035a:	e014      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[13].call();
 802035c:	4b0c      	ldr	r3, [pc, #48]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 802035e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8020362:	681b      	ldr	r3, [r3, #0]
 8020364:	4817      	ldr	r0, [pc, #92]	@ (80203c4 <_ZL21execute_gpio_callbackt+0x24c>)
 8020366:	4798      	blx	r3
		break;
 8020368:	e00d      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[14].call();
 802036a:	4b09      	ldr	r3, [pc, #36]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 802036c:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8020370:	681b      	ldr	r3, [r3, #0]
 8020372:	4815      	ldr	r0, [pc, #84]	@ (80203c8 <_ZL21execute_gpio_callbackt+0x250>)
 8020374:	4798      	blx	r3
		break;
 8020376:	e006      	b.n	8020386 <_ZL21execute_gpio_callbackt+0x20e>
		callbacks[15].call();
 8020378:	4b05      	ldr	r3, [pc, #20]	@ (8020390 <_ZL21execute_gpio_callbackt+0x218>)
 802037a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 802037e:	681b      	ldr	r3, [r3, #0]
 8020380:	4812      	ldr	r0, [pc, #72]	@ (80203cc <_ZL21execute_gpio_callbackt+0x254>)
 8020382:	4798      	blx	r3
		break;
 8020384:	bf00      	nop
}
 8020386:	bf00      	nop
 8020388:	3708      	adds	r7, #8
 802038a:	46bd      	mov	sp, r7
 802038c:	bd80      	pop	{r7, pc}
 802038e:	bf00      	nop
 8020390:	2401e16c 	.word	0x2401e16c
 8020394:	2401e18c 	.word	0x2401e18c
 8020398:	2401e1ac 	.word	0x2401e1ac
 802039c:	2401e1cc 	.word	0x2401e1cc
 80203a0:	2401e1ec 	.word	0x2401e1ec
 80203a4:	2401e20c 	.word	0x2401e20c
 80203a8:	2401e22c 	.word	0x2401e22c
 80203ac:	2401e24c 	.word	0x2401e24c
 80203b0:	2401e26c 	.word	0x2401e26c
 80203b4:	2401e28c 	.word	0x2401e28c
 80203b8:	2401e2ac 	.word	0x2401e2ac
 80203bc:	2401e2cc 	.word	0x2401e2cc
 80203c0:	2401e2ec 	.word	0x2401e2ec
 80203c4:	2401e30c 	.word	0x2401e30c
 80203c8:	2401e32c 	.word	0x2401e32c
 80203cc:	2401e34c 	.word	0x2401e34c

080203d0 <_Z41__static_initialization_and_destruction_0ii>:
 80203d0:	b5b0      	push	{r4, r5, r7, lr}
 80203d2:	b082      	sub	sp, #8
 80203d4:	af00      	add	r7, sp, #0
 80203d6:	6078      	str	r0, [r7, #4]
 80203d8:	6039      	str	r1, [r7, #0]
 80203da:	687b      	ldr	r3, [r7, #4]
 80203dc:	2b01      	cmp	r3, #1
 80203de:	d10f      	bne.n	8020400 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80203e0:	683b      	ldr	r3, [r7, #0]
 80203e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80203e6:	4293      	cmp	r3, r2
 80203e8:	d10a      	bne.n	8020400 <_Z41__static_initialization_and_destruction_0ii+0x30>
static core_utils_Callback<void, void> callbacks[16];
 80203ea:	4b07      	ldr	r3, [pc, #28]	@ (8020408 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80203ec:	240f      	movs	r4, #15
 80203ee:	461d      	mov	r5, r3
 80203f0:	e004      	b.n	80203fc <_Z41__static_initialization_and_destruction_0ii+0x2c>
 80203f2:	4628      	mov	r0, r5
 80203f4:	f7f4 fb1c 	bl	8014a30 <_ZN19core_utils_CallbackIvvEC1Ev>
 80203f8:	3c01      	subs	r4, #1
 80203fa:	3520      	adds	r5, #32
 80203fc:	2c00      	cmp	r4, #0
 80203fe:	daf8      	bge.n	80203f2 <_Z41__static_initialization_and_destruction_0ii+0x22>
}
 8020400:	bf00      	nop
 8020402:	3708      	adds	r7, #8
 8020404:	46bd      	mov	sp, r7
 8020406:	bdb0      	pop	{r4, r5, r7, pc}
 8020408:	2401e16c 	.word	0x2401e16c

0802040c <_GLOBAL__sub_I__ZN15core_utils_GPIOC2EP12GPIO_TypeDeft>:
 802040c:	b580      	push	{r7, lr}
 802040e:	af00      	add	r7, sp, #0
 8020410:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8020414:	2001      	movs	r0, #1
 8020416:	f7ff ffdb 	bl	80203d0 <_Z41__static_initialization_and_destruction_0ii>
 802041a:	bd80      	pop	{r7, pc}

0802041c <asinf>:
 802041c:	b508      	push	{r3, lr}
 802041e:	ed2d 8b02 	vpush	{d8}
 8020422:	eeb0 8a40 	vmov.f32	s16, s0
 8020426:	f000 f835 	bl	8020494 <__ieee754_asinf>
 802042a:	eeb4 8a48 	vcmp.f32	s16, s16
 802042e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020432:	eef0 8a40 	vmov.f32	s17, s0
 8020436:	d615      	bvs.n	8020464 <asinf+0x48>
 8020438:	eeb0 0a48 	vmov.f32	s0, s16
 802043c:	f000 f81c 	bl	8020478 <fabsf>
 8020440:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8020444:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802044c:	dd0a      	ble.n	8020464 <asinf+0x48>
 802044e:	f000 ffd7 	bl	8021400 <__errno>
 8020452:	ecbd 8b02 	vpop	{d8}
 8020456:	2321      	movs	r3, #33	@ 0x21
 8020458:	6003      	str	r3, [r0, #0]
 802045a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 802045e:	4804      	ldr	r0, [pc, #16]	@ (8020470 <asinf+0x54>)
 8020460:	f000 b812 	b.w	8020488 <nanf>
 8020464:	eeb0 0a68 	vmov.f32	s0, s17
 8020468:	ecbd 8b02 	vpop	{d8}
 802046c:	bd08      	pop	{r3, pc}
 802046e:	bf00      	nop
 8020470:	08023cc6 	.word	0x08023cc6

08020474 <atan2f>:
 8020474:	f000 b8f4 	b.w	8020660 <__ieee754_atan2f>

08020478 <fabsf>:
 8020478:	ee10 3a10 	vmov	r3, s0
 802047c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8020480:	ee00 3a10 	vmov	s0, r3
 8020484:	4770      	bx	lr
	...

08020488 <nanf>:
 8020488:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8020490 <nanf+0x8>
 802048c:	4770      	bx	lr
 802048e:	bf00      	nop
 8020490:	7fc00000 	.word	0x7fc00000

08020494 <__ieee754_asinf>:
 8020494:	b538      	push	{r3, r4, r5, lr}
 8020496:	ee10 5a10 	vmov	r5, s0
 802049a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802049e:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 80204a2:	ed2d 8b04 	vpush	{d8-d9}
 80204a6:	d10c      	bne.n	80204c2 <__ieee754_asinf+0x2e>
 80204a8:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8020620 <__ieee754_asinf+0x18c>
 80204ac:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8020624 <__ieee754_asinf+0x190>
 80204b0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80204b4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80204b8:	eeb0 0a67 	vmov.f32	s0, s15
 80204bc:	ecbd 8b04 	vpop	{d8-d9}
 80204c0:	bd38      	pop	{r3, r4, r5, pc}
 80204c2:	d904      	bls.n	80204ce <__ieee754_asinf+0x3a>
 80204c4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80204c8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80204cc:	e7f6      	b.n	80204bc <__ieee754_asinf+0x28>
 80204ce:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80204d2:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80204d6:	d20b      	bcs.n	80204f0 <__ieee754_asinf+0x5c>
 80204d8:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 80204dc:	d252      	bcs.n	8020584 <__ieee754_asinf+0xf0>
 80204de:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8020628 <__ieee754_asinf+0x194>
 80204e2:	ee70 7a27 	vadd.f32	s15, s0, s15
 80204e6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80204ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204ee:	dce5      	bgt.n	80204bc <__ieee754_asinf+0x28>
 80204f0:	f7ff ffc2 	bl	8020478 <fabsf>
 80204f4:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80204f8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80204fc:	ee28 8a27 	vmul.f32	s16, s16, s15
 8020500:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 802062c <__ieee754_asinf+0x198>
 8020504:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8020630 <__ieee754_asinf+0x19c>
 8020508:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8020634 <__ieee754_asinf+0x1a0>
 802050c:	eea8 7a27 	vfma.f32	s14, s16, s15
 8020510:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8020638 <__ieee754_asinf+0x1a4>
 8020514:	eee7 7a08 	vfma.f32	s15, s14, s16
 8020518:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 802063c <__ieee754_asinf+0x1a8>
 802051c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8020520:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8020640 <__ieee754_asinf+0x1ac>
 8020524:	eee7 7a08 	vfma.f32	s15, s14, s16
 8020528:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8020644 <__ieee754_asinf+0x1b0>
 802052c:	eea7 9a88 	vfma.f32	s18, s15, s16
 8020530:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8020648 <__ieee754_asinf+0x1b4>
 8020534:	eee8 7a07 	vfma.f32	s15, s16, s14
 8020538:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 802064c <__ieee754_asinf+0x1b8>
 802053c:	eea7 7a88 	vfma.f32	s14, s15, s16
 8020540:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8020650 <__ieee754_asinf+0x1bc>
 8020544:	eee7 7a08 	vfma.f32	s15, s14, s16
 8020548:	eeb0 0a48 	vmov.f32	s0, s16
 802054c:	eee7 8a88 	vfma.f32	s17, s15, s16
 8020550:	f000 f924 	bl	802079c <__ieee754_sqrtf>
 8020554:	4b3f      	ldr	r3, [pc, #252]	@ (8020654 <__ieee754_asinf+0x1c0>)
 8020556:	ee29 9a08 	vmul.f32	s18, s18, s16
 802055a:	429c      	cmp	r4, r3
 802055c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8020560:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8020564:	d93d      	bls.n	80205e2 <__ieee754_asinf+0x14e>
 8020566:	eea0 0a06 	vfma.f32	s0, s0, s12
 802056a:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8020658 <__ieee754_asinf+0x1c4>
 802056e:	eee0 7a26 	vfma.f32	s15, s0, s13
 8020572:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8020624 <__ieee754_asinf+0x190>
 8020576:	ee30 0a67 	vsub.f32	s0, s0, s15
 802057a:	2d00      	cmp	r5, #0
 802057c:	bfd8      	it	le
 802057e:	eeb1 0a40 	vnegle.f32	s0, s0
 8020582:	e79b      	b.n	80204bc <__ieee754_asinf+0x28>
 8020584:	ee60 7a00 	vmul.f32	s15, s0, s0
 8020588:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8020630 <__ieee754_asinf+0x19c>
 802058c:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 802062c <__ieee754_asinf+0x198>
 8020590:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8020644 <__ieee754_asinf+0x1b0>
 8020594:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8020598:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8020638 <__ieee754_asinf+0x1a4>
 802059c:	eee7 6a27 	vfma.f32	s13, s14, s15
 80205a0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 802063c <__ieee754_asinf+0x1a8>
 80205a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80205a8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8020640 <__ieee754_asinf+0x1ac>
 80205ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80205b0:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8020634 <__ieee754_asinf+0x1a0>
 80205b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80205b8:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8020648 <__ieee754_asinf+0x1b4>
 80205bc:	eee7 6a86 	vfma.f32	s13, s15, s12
 80205c0:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 802064c <__ieee754_asinf+0x1b8>
 80205c4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80205c8:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8020650 <__ieee754_asinf+0x1bc>
 80205cc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80205d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80205d4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80205d8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80205dc:	eea0 0a27 	vfma.f32	s0, s0, s15
 80205e0:	e76c      	b.n	80204bc <__ieee754_asinf+0x28>
 80205e2:	ee10 3a10 	vmov	r3, s0
 80205e6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80205ea:	f023 030f 	bic.w	r3, r3, #15
 80205ee:	ee07 3a10 	vmov	s14, r3
 80205f2:	eea7 8a47 	vfms.f32	s16, s14, s14
 80205f6:	ee70 5a00 	vadd.f32	s11, s0, s0
 80205fa:	ee30 0a07 	vadd.f32	s0, s0, s14
 80205fe:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8020620 <__ieee754_asinf+0x18c>
 8020602:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8020606:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 802065c <__ieee754_asinf+0x1c8>
 802060a:	eee5 7a66 	vfms.f32	s15, s10, s13
 802060e:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8020612:	eeb0 6a40 	vmov.f32	s12, s0
 8020616:	eea7 6a66 	vfms.f32	s12, s14, s13
 802061a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 802061e:	e7aa      	b.n	8020576 <__ieee754_asinf+0xe2>
 8020620:	b33bbd2e 	.word	0xb33bbd2e
 8020624:	3fc90fdb 	.word	0x3fc90fdb
 8020628:	7149f2ca 	.word	0x7149f2ca
 802062c:	3a4f7f04 	.word	0x3a4f7f04
 8020630:	3811ef08 	.word	0x3811ef08
 8020634:	3e2aaaab 	.word	0x3e2aaaab
 8020638:	bd241146 	.word	0xbd241146
 802063c:	3e4e0aa8 	.word	0x3e4e0aa8
 8020640:	bea6b090 	.word	0xbea6b090
 8020644:	3d9dc62e 	.word	0x3d9dc62e
 8020648:	bf303361 	.word	0xbf303361
 802064c:	4001572d 	.word	0x4001572d
 8020650:	c019d139 	.word	0xc019d139
 8020654:	3f799999 	.word	0x3f799999
 8020658:	333bbd2e 	.word	0x333bbd2e
 802065c:	3f490fdb 	.word	0x3f490fdb

08020660 <__ieee754_atan2f>:
 8020660:	ee10 2a90 	vmov	r2, s1
 8020664:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8020668:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802066c:	b510      	push	{r4, lr}
 802066e:	eef0 7a40 	vmov.f32	s15, s0
 8020672:	d806      	bhi.n	8020682 <__ieee754_atan2f+0x22>
 8020674:	ee10 0a10 	vmov	r0, s0
 8020678:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802067c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8020680:	d904      	bls.n	802068c <__ieee754_atan2f+0x2c>
 8020682:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8020686:	eeb0 0a67 	vmov.f32	s0, s15
 802068a:	bd10      	pop	{r4, pc}
 802068c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8020690:	d103      	bne.n	802069a <__ieee754_atan2f+0x3a>
 8020692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020696:	f000 b885 	b.w	80207a4 <atanf>
 802069a:	1794      	asrs	r4, r2, #30
 802069c:	f004 0402 	and.w	r4, r4, #2
 80206a0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80206a4:	b93b      	cbnz	r3, 80206b6 <__ieee754_atan2f+0x56>
 80206a6:	2c02      	cmp	r4, #2
 80206a8:	d05c      	beq.n	8020764 <__ieee754_atan2f+0x104>
 80206aa:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8020778 <__ieee754_atan2f+0x118>
 80206ae:	2c03      	cmp	r4, #3
 80206b0:	fe47 7a00 	vseleq.f32	s15, s14, s0
 80206b4:	e7e7      	b.n	8020686 <__ieee754_atan2f+0x26>
 80206b6:	b939      	cbnz	r1, 80206c8 <__ieee754_atan2f+0x68>
 80206b8:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802077c <__ieee754_atan2f+0x11c>
 80206bc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8020780 <__ieee754_atan2f+0x120>
 80206c0:	2800      	cmp	r0, #0
 80206c2:	fe67 7a87 	vselge.f32	s15, s15, s14
 80206c6:	e7de      	b.n	8020686 <__ieee754_atan2f+0x26>
 80206c8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80206cc:	d110      	bne.n	80206f0 <__ieee754_atan2f+0x90>
 80206ce:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80206d2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 80206d6:	d107      	bne.n	80206e8 <__ieee754_atan2f+0x88>
 80206d8:	2c02      	cmp	r4, #2
 80206da:	d846      	bhi.n	802076a <__ieee754_atan2f+0x10a>
 80206dc:	4b29      	ldr	r3, [pc, #164]	@ (8020784 <__ieee754_atan2f+0x124>)
 80206de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80206e2:	edd3 7a00 	vldr	s15, [r3]
 80206e6:	e7ce      	b.n	8020686 <__ieee754_atan2f+0x26>
 80206e8:	2c02      	cmp	r4, #2
 80206ea:	d841      	bhi.n	8020770 <__ieee754_atan2f+0x110>
 80206ec:	4b26      	ldr	r3, [pc, #152]	@ (8020788 <__ieee754_atan2f+0x128>)
 80206ee:	e7f6      	b.n	80206de <__ieee754_atan2f+0x7e>
 80206f0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80206f4:	d0e0      	beq.n	80206b8 <__ieee754_atan2f+0x58>
 80206f6:	1a5b      	subs	r3, r3, r1
 80206f8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80206fc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8020700:	da1a      	bge.n	8020738 <__ieee754_atan2f+0xd8>
 8020702:	2a00      	cmp	r2, #0
 8020704:	da01      	bge.n	802070a <__ieee754_atan2f+0xaa>
 8020706:	313c      	adds	r1, #60	@ 0x3c
 8020708:	db19      	blt.n	802073e <__ieee754_atan2f+0xde>
 802070a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802070e:	f7ff feb3 	bl	8020478 <fabsf>
 8020712:	f000 f847 	bl	80207a4 <atanf>
 8020716:	eef0 7a40 	vmov.f32	s15, s0
 802071a:	2c01      	cmp	r4, #1
 802071c:	d012      	beq.n	8020744 <__ieee754_atan2f+0xe4>
 802071e:	2c02      	cmp	r4, #2
 8020720:	d017      	beq.n	8020752 <__ieee754_atan2f+0xf2>
 8020722:	2c00      	cmp	r4, #0
 8020724:	d0af      	beq.n	8020686 <__ieee754_atan2f+0x26>
 8020726:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802078c <__ieee754_atan2f+0x12c>
 802072a:	ee77 7a87 	vadd.f32	s15, s15, s14
 802072e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8020790 <__ieee754_atan2f+0x130>
 8020732:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020736:	e7a6      	b.n	8020686 <__ieee754_atan2f+0x26>
 8020738:	eddf 7a10 	vldr	s15, [pc, #64]	@ 802077c <__ieee754_atan2f+0x11c>
 802073c:	e7ed      	b.n	802071a <__ieee754_atan2f+0xba>
 802073e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8020794 <__ieee754_atan2f+0x134>
 8020742:	e7ea      	b.n	802071a <__ieee754_atan2f+0xba>
 8020744:	ee17 3a90 	vmov	r3, s15
 8020748:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 802074c:	ee07 3a90 	vmov	s15, r3
 8020750:	e799      	b.n	8020686 <__ieee754_atan2f+0x26>
 8020752:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802078c <__ieee754_atan2f+0x12c>
 8020756:	ee77 7a87 	vadd.f32	s15, s15, s14
 802075a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8020790 <__ieee754_atan2f+0x130>
 802075e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8020762:	e790      	b.n	8020686 <__ieee754_atan2f+0x26>
 8020764:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8020790 <__ieee754_atan2f+0x130>
 8020768:	e78d      	b.n	8020686 <__ieee754_atan2f+0x26>
 802076a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8020798 <__ieee754_atan2f+0x138>
 802076e:	e78a      	b.n	8020686 <__ieee754_atan2f+0x26>
 8020770:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8020794 <__ieee754_atan2f+0x134>
 8020774:	e787      	b.n	8020686 <__ieee754_atan2f+0x26>
 8020776:	bf00      	nop
 8020778:	c0490fdb 	.word	0xc0490fdb
 802077c:	3fc90fdb 	.word	0x3fc90fdb
 8020780:	bfc90fdb 	.word	0xbfc90fdb
 8020784:	08023938 	.word	0x08023938
 8020788:	0802392c 	.word	0x0802392c
 802078c:	33bbbd2e 	.word	0x33bbbd2e
 8020790:	40490fdb 	.word	0x40490fdb
 8020794:	00000000 	.word	0x00000000
 8020798:	3f490fdb 	.word	0x3f490fdb

0802079c <__ieee754_sqrtf>:
 802079c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80207a0:	4770      	bx	lr
	...

080207a4 <atanf>:
 80207a4:	b538      	push	{r3, r4, r5, lr}
 80207a6:	ee10 5a10 	vmov	r5, s0
 80207aa:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80207ae:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80207b2:	eef0 7a40 	vmov.f32	s15, s0
 80207b6:	d30f      	bcc.n	80207d8 <atanf+0x34>
 80207b8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80207bc:	d904      	bls.n	80207c8 <atanf+0x24>
 80207be:	ee70 7a00 	vadd.f32	s15, s0, s0
 80207c2:	eeb0 0a67 	vmov.f32	s0, s15
 80207c6:	bd38      	pop	{r3, r4, r5, pc}
 80207c8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8020900 <atanf+0x15c>
 80207cc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8020904 <atanf+0x160>
 80207d0:	2d00      	cmp	r5, #0
 80207d2:	fe77 7a27 	vselgt.f32	s15, s14, s15
 80207d6:	e7f4      	b.n	80207c2 <atanf+0x1e>
 80207d8:	4b4b      	ldr	r3, [pc, #300]	@ (8020908 <atanf+0x164>)
 80207da:	429c      	cmp	r4, r3
 80207dc:	d810      	bhi.n	8020800 <atanf+0x5c>
 80207de:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80207e2:	d20a      	bcs.n	80207fa <atanf+0x56>
 80207e4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802090c <atanf+0x168>
 80207e8:	ee30 7a07 	vadd.f32	s14, s0, s14
 80207ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80207f0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80207f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80207f8:	dce3      	bgt.n	80207c2 <atanf+0x1e>
 80207fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80207fe:	e013      	b.n	8020828 <atanf+0x84>
 8020800:	f7ff fe3a 	bl	8020478 <fabsf>
 8020804:	4b42      	ldr	r3, [pc, #264]	@ (8020910 <atanf+0x16c>)
 8020806:	429c      	cmp	r4, r3
 8020808:	d84f      	bhi.n	80208aa <atanf+0x106>
 802080a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 802080e:	429c      	cmp	r4, r3
 8020810:	d841      	bhi.n	8020896 <atanf+0xf2>
 8020812:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8020816:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802081a:	eea0 7a27 	vfma.f32	s14, s0, s15
 802081e:	2300      	movs	r3, #0
 8020820:	ee30 0a27 	vadd.f32	s0, s0, s15
 8020824:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020828:	1c5a      	adds	r2, r3, #1
 802082a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 802082e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8020914 <atanf+0x170>
 8020832:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8020918 <atanf+0x174>
 8020836:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 802091c <atanf+0x178>
 802083a:	ee66 6a06 	vmul.f32	s13, s12, s12
 802083e:	eee6 5a87 	vfma.f32	s11, s13, s14
 8020842:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8020920 <atanf+0x17c>
 8020846:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802084a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8020924 <atanf+0x180>
 802084e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8020852:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8020928 <atanf+0x184>
 8020856:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802085a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802092c <atanf+0x188>
 802085e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8020862:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8020930 <atanf+0x18c>
 8020866:	eea6 5a87 	vfma.f32	s10, s13, s14
 802086a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8020934 <atanf+0x190>
 802086e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8020872:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8020938 <atanf+0x194>
 8020876:	eea7 5a26 	vfma.f32	s10, s14, s13
 802087a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 802093c <atanf+0x198>
 802087e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8020882:	ee27 7a26 	vmul.f32	s14, s14, s13
 8020886:	eea5 7a86 	vfma.f32	s14, s11, s12
 802088a:	ee27 7a87 	vmul.f32	s14, s15, s14
 802088e:	d121      	bne.n	80208d4 <atanf+0x130>
 8020890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8020894:	e795      	b.n	80207c2 <atanf+0x1e>
 8020896:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802089a:	ee30 7a67 	vsub.f32	s14, s0, s15
 802089e:	ee30 0a27 	vadd.f32	s0, s0, s15
 80208a2:	2301      	movs	r3, #1
 80208a4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80208a8:	e7be      	b.n	8020828 <atanf+0x84>
 80208aa:	4b25      	ldr	r3, [pc, #148]	@ (8020940 <atanf+0x19c>)
 80208ac:	429c      	cmp	r4, r3
 80208ae:	d80b      	bhi.n	80208c8 <atanf+0x124>
 80208b0:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80208b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80208b8:	eea0 7a27 	vfma.f32	s14, s0, s15
 80208bc:	2302      	movs	r3, #2
 80208be:	ee70 6a67 	vsub.f32	s13, s0, s15
 80208c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80208c6:	e7af      	b.n	8020828 <atanf+0x84>
 80208c8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80208cc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80208d0:	2303      	movs	r3, #3
 80208d2:	e7a9      	b.n	8020828 <atanf+0x84>
 80208d4:	4a1b      	ldr	r2, [pc, #108]	@ (8020944 <atanf+0x1a0>)
 80208d6:	491c      	ldr	r1, [pc, #112]	@ (8020948 <atanf+0x1a4>)
 80208d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80208dc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80208e0:	edd3 6a00 	vldr	s13, [r3]
 80208e4:	ee37 7a66 	vsub.f32	s14, s14, s13
 80208e8:	2d00      	cmp	r5, #0
 80208ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80208ee:	edd2 7a00 	vldr	s15, [r2]
 80208f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80208f6:	bfb8      	it	lt
 80208f8:	eef1 7a67 	vneglt.f32	s15, s15
 80208fc:	e761      	b.n	80207c2 <atanf+0x1e>
 80208fe:	bf00      	nop
 8020900:	bfc90fdb 	.word	0xbfc90fdb
 8020904:	3fc90fdb 	.word	0x3fc90fdb
 8020908:	3edfffff 	.word	0x3edfffff
 802090c:	7149f2ca 	.word	0x7149f2ca
 8020910:	3f97ffff 	.word	0x3f97ffff
 8020914:	3c8569d7 	.word	0x3c8569d7
 8020918:	3d4bda59 	.word	0x3d4bda59
 802091c:	bd6ef16b 	.word	0xbd6ef16b
 8020920:	3d886b35 	.word	0x3d886b35
 8020924:	3dba2e6e 	.word	0x3dba2e6e
 8020928:	3e124925 	.word	0x3e124925
 802092c:	3eaaaaab 	.word	0x3eaaaaab
 8020930:	bd15a221 	.word	0xbd15a221
 8020934:	bd9d8795 	.word	0xbd9d8795
 8020938:	bde38e38 	.word	0xbde38e38
 802093c:	be4ccccd 	.word	0xbe4ccccd
 8020940:	401bffff 	.word	0x401bffff
 8020944:	08023954 	.word	0x08023954
 8020948:	08023944 	.word	0x08023944

0802094c <__cvt>:
 802094c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802094e:	ed2d 8b02 	vpush	{d8}
 8020952:	eeb0 8b40 	vmov.f64	d8, d0
 8020956:	b085      	sub	sp, #20
 8020958:	4617      	mov	r7, r2
 802095a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 802095c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 802095e:	ee18 2a90 	vmov	r2, s17
 8020962:	f025 0520 	bic.w	r5, r5, #32
 8020966:	2a00      	cmp	r2, #0
 8020968:	bfb6      	itet	lt
 802096a:	222d      	movlt	r2, #45	@ 0x2d
 802096c:	2200      	movge	r2, #0
 802096e:	eeb1 8b40 	vneglt.f64	d8, d0
 8020972:	2d46      	cmp	r5, #70	@ 0x46
 8020974:	460c      	mov	r4, r1
 8020976:	701a      	strb	r2, [r3, #0]
 8020978:	d004      	beq.n	8020984 <__cvt+0x38>
 802097a:	2d45      	cmp	r5, #69	@ 0x45
 802097c:	d100      	bne.n	8020980 <__cvt+0x34>
 802097e:	3401      	adds	r4, #1
 8020980:	2102      	movs	r1, #2
 8020982:	e000      	b.n	8020986 <__cvt+0x3a>
 8020984:	2103      	movs	r1, #3
 8020986:	ab03      	add	r3, sp, #12
 8020988:	9301      	str	r3, [sp, #4]
 802098a:	ab02      	add	r3, sp, #8
 802098c:	9300      	str	r3, [sp, #0]
 802098e:	4622      	mov	r2, r4
 8020990:	4633      	mov	r3, r6
 8020992:	eeb0 0b48 	vmov.f64	d0, d8
 8020996:	f000 fdf7 	bl	8021588 <_dtoa_r>
 802099a:	2d47      	cmp	r5, #71	@ 0x47
 802099c:	d114      	bne.n	80209c8 <__cvt+0x7c>
 802099e:	07fb      	lsls	r3, r7, #31
 80209a0:	d50a      	bpl.n	80209b8 <__cvt+0x6c>
 80209a2:	1902      	adds	r2, r0, r4
 80209a4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80209a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209ac:	bf08      	it	eq
 80209ae:	9203      	streq	r2, [sp, #12]
 80209b0:	2130      	movs	r1, #48	@ 0x30
 80209b2:	9b03      	ldr	r3, [sp, #12]
 80209b4:	4293      	cmp	r3, r2
 80209b6:	d319      	bcc.n	80209ec <__cvt+0xa0>
 80209b8:	9b03      	ldr	r3, [sp, #12]
 80209ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80209bc:	1a1b      	subs	r3, r3, r0
 80209be:	6013      	str	r3, [r2, #0]
 80209c0:	b005      	add	sp, #20
 80209c2:	ecbd 8b02 	vpop	{d8}
 80209c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80209c8:	2d46      	cmp	r5, #70	@ 0x46
 80209ca:	eb00 0204 	add.w	r2, r0, r4
 80209ce:	d1e9      	bne.n	80209a4 <__cvt+0x58>
 80209d0:	7803      	ldrb	r3, [r0, #0]
 80209d2:	2b30      	cmp	r3, #48	@ 0x30
 80209d4:	d107      	bne.n	80209e6 <__cvt+0x9a>
 80209d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80209da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80209de:	bf1c      	itt	ne
 80209e0:	f1c4 0401 	rsbne	r4, r4, #1
 80209e4:	6034      	strne	r4, [r6, #0]
 80209e6:	6833      	ldr	r3, [r6, #0]
 80209e8:	441a      	add	r2, r3
 80209ea:	e7db      	b.n	80209a4 <__cvt+0x58>
 80209ec:	1c5c      	adds	r4, r3, #1
 80209ee:	9403      	str	r4, [sp, #12]
 80209f0:	7019      	strb	r1, [r3, #0]
 80209f2:	e7de      	b.n	80209b2 <__cvt+0x66>

080209f4 <__exponent>:
 80209f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80209f6:	2900      	cmp	r1, #0
 80209f8:	bfba      	itte	lt
 80209fa:	4249      	neglt	r1, r1
 80209fc:	232d      	movlt	r3, #45	@ 0x2d
 80209fe:	232b      	movge	r3, #43	@ 0x2b
 8020a00:	2909      	cmp	r1, #9
 8020a02:	7002      	strb	r2, [r0, #0]
 8020a04:	7043      	strb	r3, [r0, #1]
 8020a06:	dd29      	ble.n	8020a5c <__exponent+0x68>
 8020a08:	f10d 0307 	add.w	r3, sp, #7
 8020a0c:	461d      	mov	r5, r3
 8020a0e:	270a      	movs	r7, #10
 8020a10:	461a      	mov	r2, r3
 8020a12:	fbb1 f6f7 	udiv	r6, r1, r7
 8020a16:	fb07 1416 	mls	r4, r7, r6, r1
 8020a1a:	3430      	adds	r4, #48	@ 0x30
 8020a1c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8020a20:	460c      	mov	r4, r1
 8020a22:	2c63      	cmp	r4, #99	@ 0x63
 8020a24:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8020a28:	4631      	mov	r1, r6
 8020a2a:	dcf1      	bgt.n	8020a10 <__exponent+0x1c>
 8020a2c:	3130      	adds	r1, #48	@ 0x30
 8020a2e:	1e94      	subs	r4, r2, #2
 8020a30:	f803 1c01 	strb.w	r1, [r3, #-1]
 8020a34:	1c41      	adds	r1, r0, #1
 8020a36:	4623      	mov	r3, r4
 8020a38:	42ab      	cmp	r3, r5
 8020a3a:	d30a      	bcc.n	8020a52 <__exponent+0x5e>
 8020a3c:	f10d 0309 	add.w	r3, sp, #9
 8020a40:	1a9b      	subs	r3, r3, r2
 8020a42:	42ac      	cmp	r4, r5
 8020a44:	bf88      	it	hi
 8020a46:	2300      	movhi	r3, #0
 8020a48:	3302      	adds	r3, #2
 8020a4a:	4403      	add	r3, r0
 8020a4c:	1a18      	subs	r0, r3, r0
 8020a4e:	b003      	add	sp, #12
 8020a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020a52:	f813 6b01 	ldrb.w	r6, [r3], #1
 8020a56:	f801 6f01 	strb.w	r6, [r1, #1]!
 8020a5a:	e7ed      	b.n	8020a38 <__exponent+0x44>
 8020a5c:	2330      	movs	r3, #48	@ 0x30
 8020a5e:	3130      	adds	r1, #48	@ 0x30
 8020a60:	7083      	strb	r3, [r0, #2]
 8020a62:	70c1      	strb	r1, [r0, #3]
 8020a64:	1d03      	adds	r3, r0, #4
 8020a66:	e7f1      	b.n	8020a4c <__exponent+0x58>

08020a68 <_printf_float>:
 8020a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a6c:	b08d      	sub	sp, #52	@ 0x34
 8020a6e:	460c      	mov	r4, r1
 8020a70:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8020a74:	4616      	mov	r6, r2
 8020a76:	461f      	mov	r7, r3
 8020a78:	4605      	mov	r5, r0
 8020a7a:	f000 fc67 	bl	802134c <_localeconv_r>
 8020a7e:	f8d0 b000 	ldr.w	fp, [r0]
 8020a82:	4658      	mov	r0, fp
 8020a84:	f7df fc7c 	bl	8000380 <strlen>
 8020a88:	2300      	movs	r3, #0
 8020a8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8020a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8020a90:	f894 9018 	ldrb.w	r9, [r4, #24]
 8020a94:	6822      	ldr	r2, [r4, #0]
 8020a96:	9005      	str	r0, [sp, #20]
 8020a98:	3307      	adds	r3, #7
 8020a9a:	f023 0307 	bic.w	r3, r3, #7
 8020a9e:	f103 0108 	add.w	r1, r3, #8
 8020aa2:	f8c8 1000 	str.w	r1, [r8]
 8020aa6:	ed93 0b00 	vldr	d0, [r3]
 8020aaa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8020d08 <_printf_float+0x2a0>
 8020aae:	eeb0 7bc0 	vabs.f64	d7, d0
 8020ab2:	eeb4 7b46 	vcmp.f64	d7, d6
 8020ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020aba:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8020abe:	dd24      	ble.n	8020b0a <_printf_float+0xa2>
 8020ac0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8020ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ac8:	d502      	bpl.n	8020ad0 <_printf_float+0x68>
 8020aca:	232d      	movs	r3, #45	@ 0x2d
 8020acc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020ad0:	498f      	ldr	r1, [pc, #572]	@ (8020d10 <_printf_float+0x2a8>)
 8020ad2:	4b90      	ldr	r3, [pc, #576]	@ (8020d14 <_printf_float+0x2ac>)
 8020ad4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8020ad8:	bf94      	ite	ls
 8020ada:	4688      	movls	r8, r1
 8020adc:	4698      	movhi	r8, r3
 8020ade:	f022 0204 	bic.w	r2, r2, #4
 8020ae2:	2303      	movs	r3, #3
 8020ae4:	6123      	str	r3, [r4, #16]
 8020ae6:	6022      	str	r2, [r4, #0]
 8020ae8:	f04f 0a00 	mov.w	sl, #0
 8020aec:	9700      	str	r7, [sp, #0]
 8020aee:	4633      	mov	r3, r6
 8020af0:	aa0b      	add	r2, sp, #44	@ 0x2c
 8020af2:	4621      	mov	r1, r4
 8020af4:	4628      	mov	r0, r5
 8020af6:	f000 f9d1 	bl	8020e9c <_printf_common>
 8020afa:	3001      	adds	r0, #1
 8020afc:	f040 8089 	bne.w	8020c12 <_printf_float+0x1aa>
 8020b00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020b04:	b00d      	add	sp, #52	@ 0x34
 8020b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b0a:	eeb4 0b40 	vcmp.f64	d0, d0
 8020b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020b12:	d709      	bvc.n	8020b28 <_printf_float+0xc0>
 8020b14:	ee10 3a90 	vmov	r3, s1
 8020b18:	2b00      	cmp	r3, #0
 8020b1a:	bfbc      	itt	lt
 8020b1c:	232d      	movlt	r3, #45	@ 0x2d
 8020b1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8020b22:	497d      	ldr	r1, [pc, #500]	@ (8020d18 <_printf_float+0x2b0>)
 8020b24:	4b7d      	ldr	r3, [pc, #500]	@ (8020d1c <_printf_float+0x2b4>)
 8020b26:	e7d5      	b.n	8020ad4 <_printf_float+0x6c>
 8020b28:	6863      	ldr	r3, [r4, #4]
 8020b2a:	1c59      	adds	r1, r3, #1
 8020b2c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8020b30:	d139      	bne.n	8020ba6 <_printf_float+0x13e>
 8020b32:	2306      	movs	r3, #6
 8020b34:	6063      	str	r3, [r4, #4]
 8020b36:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8020b3a:	2300      	movs	r3, #0
 8020b3c:	6022      	str	r2, [r4, #0]
 8020b3e:	9303      	str	r3, [sp, #12]
 8020b40:	ab0a      	add	r3, sp, #40	@ 0x28
 8020b42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8020b46:	ab09      	add	r3, sp, #36	@ 0x24
 8020b48:	9300      	str	r3, [sp, #0]
 8020b4a:	6861      	ldr	r1, [r4, #4]
 8020b4c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8020b50:	4628      	mov	r0, r5
 8020b52:	f7ff fefb 	bl	802094c <__cvt>
 8020b56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8020b5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020b5c:	4680      	mov	r8, r0
 8020b5e:	d129      	bne.n	8020bb4 <_printf_float+0x14c>
 8020b60:	1cc8      	adds	r0, r1, #3
 8020b62:	db02      	blt.n	8020b6a <_printf_float+0x102>
 8020b64:	6863      	ldr	r3, [r4, #4]
 8020b66:	4299      	cmp	r1, r3
 8020b68:	dd41      	ble.n	8020bee <_printf_float+0x186>
 8020b6a:	f1a9 0902 	sub.w	r9, r9, #2
 8020b6e:	fa5f f989 	uxtb.w	r9, r9
 8020b72:	3901      	subs	r1, #1
 8020b74:	464a      	mov	r2, r9
 8020b76:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8020b7a:	9109      	str	r1, [sp, #36]	@ 0x24
 8020b7c:	f7ff ff3a 	bl	80209f4 <__exponent>
 8020b80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020b82:	1813      	adds	r3, r2, r0
 8020b84:	2a01      	cmp	r2, #1
 8020b86:	4682      	mov	sl, r0
 8020b88:	6123      	str	r3, [r4, #16]
 8020b8a:	dc02      	bgt.n	8020b92 <_printf_float+0x12a>
 8020b8c:	6822      	ldr	r2, [r4, #0]
 8020b8e:	07d2      	lsls	r2, r2, #31
 8020b90:	d501      	bpl.n	8020b96 <_printf_float+0x12e>
 8020b92:	3301      	adds	r3, #1
 8020b94:	6123      	str	r3, [r4, #16]
 8020b96:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8020b9a:	2b00      	cmp	r3, #0
 8020b9c:	d0a6      	beq.n	8020aec <_printf_float+0x84>
 8020b9e:	232d      	movs	r3, #45	@ 0x2d
 8020ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020ba4:	e7a2      	b.n	8020aec <_printf_float+0x84>
 8020ba6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8020baa:	d1c4      	bne.n	8020b36 <_printf_float+0xce>
 8020bac:	2b00      	cmp	r3, #0
 8020bae:	d1c2      	bne.n	8020b36 <_printf_float+0xce>
 8020bb0:	2301      	movs	r3, #1
 8020bb2:	e7bf      	b.n	8020b34 <_printf_float+0xcc>
 8020bb4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8020bb8:	d9db      	bls.n	8020b72 <_printf_float+0x10a>
 8020bba:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8020bbe:	d118      	bne.n	8020bf2 <_printf_float+0x18a>
 8020bc0:	2900      	cmp	r1, #0
 8020bc2:	6863      	ldr	r3, [r4, #4]
 8020bc4:	dd0b      	ble.n	8020bde <_printf_float+0x176>
 8020bc6:	6121      	str	r1, [r4, #16]
 8020bc8:	b913      	cbnz	r3, 8020bd0 <_printf_float+0x168>
 8020bca:	6822      	ldr	r2, [r4, #0]
 8020bcc:	07d0      	lsls	r0, r2, #31
 8020bce:	d502      	bpl.n	8020bd6 <_printf_float+0x16e>
 8020bd0:	3301      	adds	r3, #1
 8020bd2:	440b      	add	r3, r1
 8020bd4:	6123      	str	r3, [r4, #16]
 8020bd6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8020bd8:	f04f 0a00 	mov.w	sl, #0
 8020bdc:	e7db      	b.n	8020b96 <_printf_float+0x12e>
 8020bde:	b913      	cbnz	r3, 8020be6 <_printf_float+0x17e>
 8020be0:	6822      	ldr	r2, [r4, #0]
 8020be2:	07d2      	lsls	r2, r2, #31
 8020be4:	d501      	bpl.n	8020bea <_printf_float+0x182>
 8020be6:	3302      	adds	r3, #2
 8020be8:	e7f4      	b.n	8020bd4 <_printf_float+0x16c>
 8020bea:	2301      	movs	r3, #1
 8020bec:	e7f2      	b.n	8020bd4 <_printf_float+0x16c>
 8020bee:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8020bf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020bf4:	4299      	cmp	r1, r3
 8020bf6:	db05      	blt.n	8020c04 <_printf_float+0x19c>
 8020bf8:	6823      	ldr	r3, [r4, #0]
 8020bfa:	6121      	str	r1, [r4, #16]
 8020bfc:	07d8      	lsls	r0, r3, #31
 8020bfe:	d5ea      	bpl.n	8020bd6 <_printf_float+0x16e>
 8020c00:	1c4b      	adds	r3, r1, #1
 8020c02:	e7e7      	b.n	8020bd4 <_printf_float+0x16c>
 8020c04:	2900      	cmp	r1, #0
 8020c06:	bfd4      	ite	le
 8020c08:	f1c1 0202 	rsble	r2, r1, #2
 8020c0c:	2201      	movgt	r2, #1
 8020c0e:	4413      	add	r3, r2
 8020c10:	e7e0      	b.n	8020bd4 <_printf_float+0x16c>
 8020c12:	6823      	ldr	r3, [r4, #0]
 8020c14:	055a      	lsls	r2, r3, #21
 8020c16:	d407      	bmi.n	8020c28 <_printf_float+0x1c0>
 8020c18:	6923      	ldr	r3, [r4, #16]
 8020c1a:	4642      	mov	r2, r8
 8020c1c:	4631      	mov	r1, r6
 8020c1e:	4628      	mov	r0, r5
 8020c20:	47b8      	blx	r7
 8020c22:	3001      	adds	r0, #1
 8020c24:	d12a      	bne.n	8020c7c <_printf_float+0x214>
 8020c26:	e76b      	b.n	8020b00 <_printf_float+0x98>
 8020c28:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8020c2c:	f240 80e0 	bls.w	8020df0 <_printf_float+0x388>
 8020c30:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8020c34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c3c:	d133      	bne.n	8020ca6 <_printf_float+0x23e>
 8020c3e:	4a38      	ldr	r2, [pc, #224]	@ (8020d20 <_printf_float+0x2b8>)
 8020c40:	2301      	movs	r3, #1
 8020c42:	4631      	mov	r1, r6
 8020c44:	4628      	mov	r0, r5
 8020c46:	47b8      	blx	r7
 8020c48:	3001      	adds	r0, #1
 8020c4a:	f43f af59 	beq.w	8020b00 <_printf_float+0x98>
 8020c4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8020c52:	4543      	cmp	r3, r8
 8020c54:	db02      	blt.n	8020c5c <_printf_float+0x1f4>
 8020c56:	6823      	ldr	r3, [r4, #0]
 8020c58:	07d8      	lsls	r0, r3, #31
 8020c5a:	d50f      	bpl.n	8020c7c <_printf_float+0x214>
 8020c5c:	9b05      	ldr	r3, [sp, #20]
 8020c5e:	465a      	mov	r2, fp
 8020c60:	4631      	mov	r1, r6
 8020c62:	4628      	mov	r0, r5
 8020c64:	47b8      	blx	r7
 8020c66:	3001      	adds	r0, #1
 8020c68:	f43f af4a 	beq.w	8020b00 <_printf_float+0x98>
 8020c6c:	f04f 0900 	mov.w	r9, #0
 8020c70:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8020c74:	f104 0a1a 	add.w	sl, r4, #26
 8020c78:	45c8      	cmp	r8, r9
 8020c7a:	dc09      	bgt.n	8020c90 <_printf_float+0x228>
 8020c7c:	6823      	ldr	r3, [r4, #0]
 8020c7e:	079b      	lsls	r3, r3, #30
 8020c80:	f100 8107 	bmi.w	8020e92 <_printf_float+0x42a>
 8020c84:	68e0      	ldr	r0, [r4, #12]
 8020c86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8020c88:	4298      	cmp	r0, r3
 8020c8a:	bfb8      	it	lt
 8020c8c:	4618      	movlt	r0, r3
 8020c8e:	e739      	b.n	8020b04 <_printf_float+0x9c>
 8020c90:	2301      	movs	r3, #1
 8020c92:	4652      	mov	r2, sl
 8020c94:	4631      	mov	r1, r6
 8020c96:	4628      	mov	r0, r5
 8020c98:	47b8      	blx	r7
 8020c9a:	3001      	adds	r0, #1
 8020c9c:	f43f af30 	beq.w	8020b00 <_printf_float+0x98>
 8020ca0:	f109 0901 	add.w	r9, r9, #1
 8020ca4:	e7e8      	b.n	8020c78 <_printf_float+0x210>
 8020ca6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	dc3b      	bgt.n	8020d24 <_printf_float+0x2bc>
 8020cac:	4a1c      	ldr	r2, [pc, #112]	@ (8020d20 <_printf_float+0x2b8>)
 8020cae:	2301      	movs	r3, #1
 8020cb0:	4631      	mov	r1, r6
 8020cb2:	4628      	mov	r0, r5
 8020cb4:	47b8      	blx	r7
 8020cb6:	3001      	adds	r0, #1
 8020cb8:	f43f af22 	beq.w	8020b00 <_printf_float+0x98>
 8020cbc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8020cc0:	ea59 0303 	orrs.w	r3, r9, r3
 8020cc4:	d102      	bne.n	8020ccc <_printf_float+0x264>
 8020cc6:	6823      	ldr	r3, [r4, #0]
 8020cc8:	07d9      	lsls	r1, r3, #31
 8020cca:	d5d7      	bpl.n	8020c7c <_printf_float+0x214>
 8020ccc:	9b05      	ldr	r3, [sp, #20]
 8020cce:	465a      	mov	r2, fp
 8020cd0:	4631      	mov	r1, r6
 8020cd2:	4628      	mov	r0, r5
 8020cd4:	47b8      	blx	r7
 8020cd6:	3001      	adds	r0, #1
 8020cd8:	f43f af12 	beq.w	8020b00 <_printf_float+0x98>
 8020cdc:	f04f 0a00 	mov.w	sl, #0
 8020ce0:	f104 0b1a 	add.w	fp, r4, #26
 8020ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020ce6:	425b      	negs	r3, r3
 8020ce8:	4553      	cmp	r3, sl
 8020cea:	dc01      	bgt.n	8020cf0 <_printf_float+0x288>
 8020cec:	464b      	mov	r3, r9
 8020cee:	e794      	b.n	8020c1a <_printf_float+0x1b2>
 8020cf0:	2301      	movs	r3, #1
 8020cf2:	465a      	mov	r2, fp
 8020cf4:	4631      	mov	r1, r6
 8020cf6:	4628      	mov	r0, r5
 8020cf8:	47b8      	blx	r7
 8020cfa:	3001      	adds	r0, #1
 8020cfc:	f43f af00 	beq.w	8020b00 <_printf_float+0x98>
 8020d00:	f10a 0a01 	add.w	sl, sl, #1
 8020d04:	e7ee      	b.n	8020ce4 <_printf_float+0x27c>
 8020d06:	bf00      	nop
 8020d08:	ffffffff 	.word	0xffffffff
 8020d0c:	7fefffff 	.word	0x7fefffff
 8020d10:	08023964 	.word	0x08023964
 8020d14:	08023968 	.word	0x08023968
 8020d18:	0802396c 	.word	0x0802396c
 8020d1c:	08023970 	.word	0x08023970
 8020d20:	08023974 	.word	0x08023974
 8020d24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8020d26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8020d2a:	4553      	cmp	r3, sl
 8020d2c:	bfa8      	it	ge
 8020d2e:	4653      	movge	r3, sl
 8020d30:	2b00      	cmp	r3, #0
 8020d32:	4699      	mov	r9, r3
 8020d34:	dc37      	bgt.n	8020da6 <_printf_float+0x33e>
 8020d36:	2300      	movs	r3, #0
 8020d38:	9307      	str	r3, [sp, #28]
 8020d3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8020d3e:	f104 021a 	add.w	r2, r4, #26
 8020d42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8020d44:	9907      	ldr	r1, [sp, #28]
 8020d46:	9306      	str	r3, [sp, #24]
 8020d48:	eba3 0309 	sub.w	r3, r3, r9
 8020d4c:	428b      	cmp	r3, r1
 8020d4e:	dc31      	bgt.n	8020db4 <_printf_float+0x34c>
 8020d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d52:	459a      	cmp	sl, r3
 8020d54:	dc3b      	bgt.n	8020dce <_printf_float+0x366>
 8020d56:	6823      	ldr	r3, [r4, #0]
 8020d58:	07da      	lsls	r2, r3, #31
 8020d5a:	d438      	bmi.n	8020dce <_printf_float+0x366>
 8020d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d5e:	ebaa 0903 	sub.w	r9, sl, r3
 8020d62:	9b06      	ldr	r3, [sp, #24]
 8020d64:	ebaa 0303 	sub.w	r3, sl, r3
 8020d68:	4599      	cmp	r9, r3
 8020d6a:	bfa8      	it	ge
 8020d6c:	4699      	movge	r9, r3
 8020d6e:	f1b9 0f00 	cmp.w	r9, #0
 8020d72:	dc34      	bgt.n	8020dde <_printf_float+0x376>
 8020d74:	f04f 0800 	mov.w	r8, #0
 8020d78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8020d7c:	f104 0b1a 	add.w	fp, r4, #26
 8020d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020d82:	ebaa 0303 	sub.w	r3, sl, r3
 8020d86:	eba3 0309 	sub.w	r3, r3, r9
 8020d8a:	4543      	cmp	r3, r8
 8020d8c:	f77f af76 	ble.w	8020c7c <_printf_float+0x214>
 8020d90:	2301      	movs	r3, #1
 8020d92:	465a      	mov	r2, fp
 8020d94:	4631      	mov	r1, r6
 8020d96:	4628      	mov	r0, r5
 8020d98:	47b8      	blx	r7
 8020d9a:	3001      	adds	r0, #1
 8020d9c:	f43f aeb0 	beq.w	8020b00 <_printf_float+0x98>
 8020da0:	f108 0801 	add.w	r8, r8, #1
 8020da4:	e7ec      	b.n	8020d80 <_printf_float+0x318>
 8020da6:	4642      	mov	r2, r8
 8020da8:	4631      	mov	r1, r6
 8020daa:	4628      	mov	r0, r5
 8020dac:	47b8      	blx	r7
 8020dae:	3001      	adds	r0, #1
 8020db0:	d1c1      	bne.n	8020d36 <_printf_float+0x2ce>
 8020db2:	e6a5      	b.n	8020b00 <_printf_float+0x98>
 8020db4:	2301      	movs	r3, #1
 8020db6:	4631      	mov	r1, r6
 8020db8:	4628      	mov	r0, r5
 8020dba:	9206      	str	r2, [sp, #24]
 8020dbc:	47b8      	blx	r7
 8020dbe:	3001      	adds	r0, #1
 8020dc0:	f43f ae9e 	beq.w	8020b00 <_printf_float+0x98>
 8020dc4:	9b07      	ldr	r3, [sp, #28]
 8020dc6:	9a06      	ldr	r2, [sp, #24]
 8020dc8:	3301      	adds	r3, #1
 8020dca:	9307      	str	r3, [sp, #28]
 8020dcc:	e7b9      	b.n	8020d42 <_printf_float+0x2da>
 8020dce:	9b05      	ldr	r3, [sp, #20]
 8020dd0:	465a      	mov	r2, fp
 8020dd2:	4631      	mov	r1, r6
 8020dd4:	4628      	mov	r0, r5
 8020dd6:	47b8      	blx	r7
 8020dd8:	3001      	adds	r0, #1
 8020dda:	d1bf      	bne.n	8020d5c <_printf_float+0x2f4>
 8020ddc:	e690      	b.n	8020b00 <_printf_float+0x98>
 8020dde:	9a06      	ldr	r2, [sp, #24]
 8020de0:	464b      	mov	r3, r9
 8020de2:	4442      	add	r2, r8
 8020de4:	4631      	mov	r1, r6
 8020de6:	4628      	mov	r0, r5
 8020de8:	47b8      	blx	r7
 8020dea:	3001      	adds	r0, #1
 8020dec:	d1c2      	bne.n	8020d74 <_printf_float+0x30c>
 8020dee:	e687      	b.n	8020b00 <_printf_float+0x98>
 8020df0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8020df4:	f1b9 0f01 	cmp.w	r9, #1
 8020df8:	dc01      	bgt.n	8020dfe <_printf_float+0x396>
 8020dfa:	07db      	lsls	r3, r3, #31
 8020dfc:	d536      	bpl.n	8020e6c <_printf_float+0x404>
 8020dfe:	2301      	movs	r3, #1
 8020e00:	4642      	mov	r2, r8
 8020e02:	4631      	mov	r1, r6
 8020e04:	4628      	mov	r0, r5
 8020e06:	47b8      	blx	r7
 8020e08:	3001      	adds	r0, #1
 8020e0a:	f43f ae79 	beq.w	8020b00 <_printf_float+0x98>
 8020e0e:	9b05      	ldr	r3, [sp, #20]
 8020e10:	465a      	mov	r2, fp
 8020e12:	4631      	mov	r1, r6
 8020e14:	4628      	mov	r0, r5
 8020e16:	47b8      	blx	r7
 8020e18:	3001      	adds	r0, #1
 8020e1a:	f43f ae71 	beq.w	8020b00 <_printf_float+0x98>
 8020e1e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8020e22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8020e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e2a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8020e2e:	d018      	beq.n	8020e62 <_printf_float+0x3fa>
 8020e30:	464b      	mov	r3, r9
 8020e32:	f108 0201 	add.w	r2, r8, #1
 8020e36:	4631      	mov	r1, r6
 8020e38:	4628      	mov	r0, r5
 8020e3a:	47b8      	blx	r7
 8020e3c:	3001      	adds	r0, #1
 8020e3e:	d10c      	bne.n	8020e5a <_printf_float+0x3f2>
 8020e40:	e65e      	b.n	8020b00 <_printf_float+0x98>
 8020e42:	2301      	movs	r3, #1
 8020e44:	465a      	mov	r2, fp
 8020e46:	4631      	mov	r1, r6
 8020e48:	4628      	mov	r0, r5
 8020e4a:	47b8      	blx	r7
 8020e4c:	3001      	adds	r0, #1
 8020e4e:	f43f ae57 	beq.w	8020b00 <_printf_float+0x98>
 8020e52:	f108 0801 	add.w	r8, r8, #1
 8020e56:	45c8      	cmp	r8, r9
 8020e58:	dbf3      	blt.n	8020e42 <_printf_float+0x3da>
 8020e5a:	4653      	mov	r3, sl
 8020e5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8020e60:	e6dc      	b.n	8020c1c <_printf_float+0x1b4>
 8020e62:	f04f 0800 	mov.w	r8, #0
 8020e66:	f104 0b1a 	add.w	fp, r4, #26
 8020e6a:	e7f4      	b.n	8020e56 <_printf_float+0x3ee>
 8020e6c:	2301      	movs	r3, #1
 8020e6e:	4642      	mov	r2, r8
 8020e70:	e7e1      	b.n	8020e36 <_printf_float+0x3ce>
 8020e72:	2301      	movs	r3, #1
 8020e74:	464a      	mov	r2, r9
 8020e76:	4631      	mov	r1, r6
 8020e78:	4628      	mov	r0, r5
 8020e7a:	47b8      	blx	r7
 8020e7c:	3001      	adds	r0, #1
 8020e7e:	f43f ae3f 	beq.w	8020b00 <_printf_float+0x98>
 8020e82:	f108 0801 	add.w	r8, r8, #1
 8020e86:	68e3      	ldr	r3, [r4, #12]
 8020e88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8020e8a:	1a5b      	subs	r3, r3, r1
 8020e8c:	4543      	cmp	r3, r8
 8020e8e:	dcf0      	bgt.n	8020e72 <_printf_float+0x40a>
 8020e90:	e6f8      	b.n	8020c84 <_printf_float+0x21c>
 8020e92:	f04f 0800 	mov.w	r8, #0
 8020e96:	f104 0919 	add.w	r9, r4, #25
 8020e9a:	e7f4      	b.n	8020e86 <_printf_float+0x41e>

08020e9c <_printf_common>:
 8020e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020ea0:	4616      	mov	r6, r2
 8020ea2:	4698      	mov	r8, r3
 8020ea4:	688a      	ldr	r2, [r1, #8]
 8020ea6:	690b      	ldr	r3, [r1, #16]
 8020ea8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020eac:	4293      	cmp	r3, r2
 8020eae:	bfb8      	it	lt
 8020eb0:	4613      	movlt	r3, r2
 8020eb2:	6033      	str	r3, [r6, #0]
 8020eb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020eb8:	4607      	mov	r7, r0
 8020eba:	460c      	mov	r4, r1
 8020ebc:	b10a      	cbz	r2, 8020ec2 <_printf_common+0x26>
 8020ebe:	3301      	adds	r3, #1
 8020ec0:	6033      	str	r3, [r6, #0]
 8020ec2:	6823      	ldr	r3, [r4, #0]
 8020ec4:	0699      	lsls	r1, r3, #26
 8020ec6:	bf42      	ittt	mi
 8020ec8:	6833      	ldrmi	r3, [r6, #0]
 8020eca:	3302      	addmi	r3, #2
 8020ecc:	6033      	strmi	r3, [r6, #0]
 8020ece:	6825      	ldr	r5, [r4, #0]
 8020ed0:	f015 0506 	ands.w	r5, r5, #6
 8020ed4:	d106      	bne.n	8020ee4 <_printf_common+0x48>
 8020ed6:	f104 0a19 	add.w	sl, r4, #25
 8020eda:	68e3      	ldr	r3, [r4, #12]
 8020edc:	6832      	ldr	r2, [r6, #0]
 8020ede:	1a9b      	subs	r3, r3, r2
 8020ee0:	42ab      	cmp	r3, r5
 8020ee2:	dc26      	bgt.n	8020f32 <_printf_common+0x96>
 8020ee4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020ee8:	6822      	ldr	r2, [r4, #0]
 8020eea:	3b00      	subs	r3, #0
 8020eec:	bf18      	it	ne
 8020eee:	2301      	movne	r3, #1
 8020ef0:	0692      	lsls	r2, r2, #26
 8020ef2:	d42b      	bmi.n	8020f4c <_printf_common+0xb0>
 8020ef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020ef8:	4641      	mov	r1, r8
 8020efa:	4638      	mov	r0, r7
 8020efc:	47c8      	blx	r9
 8020efe:	3001      	adds	r0, #1
 8020f00:	d01e      	beq.n	8020f40 <_printf_common+0xa4>
 8020f02:	6823      	ldr	r3, [r4, #0]
 8020f04:	6922      	ldr	r2, [r4, #16]
 8020f06:	f003 0306 	and.w	r3, r3, #6
 8020f0a:	2b04      	cmp	r3, #4
 8020f0c:	bf02      	ittt	eq
 8020f0e:	68e5      	ldreq	r5, [r4, #12]
 8020f10:	6833      	ldreq	r3, [r6, #0]
 8020f12:	1aed      	subeq	r5, r5, r3
 8020f14:	68a3      	ldr	r3, [r4, #8]
 8020f16:	bf0c      	ite	eq
 8020f18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020f1c:	2500      	movne	r5, #0
 8020f1e:	4293      	cmp	r3, r2
 8020f20:	bfc4      	itt	gt
 8020f22:	1a9b      	subgt	r3, r3, r2
 8020f24:	18ed      	addgt	r5, r5, r3
 8020f26:	2600      	movs	r6, #0
 8020f28:	341a      	adds	r4, #26
 8020f2a:	42b5      	cmp	r5, r6
 8020f2c:	d11a      	bne.n	8020f64 <_printf_common+0xc8>
 8020f2e:	2000      	movs	r0, #0
 8020f30:	e008      	b.n	8020f44 <_printf_common+0xa8>
 8020f32:	2301      	movs	r3, #1
 8020f34:	4652      	mov	r2, sl
 8020f36:	4641      	mov	r1, r8
 8020f38:	4638      	mov	r0, r7
 8020f3a:	47c8      	blx	r9
 8020f3c:	3001      	adds	r0, #1
 8020f3e:	d103      	bne.n	8020f48 <_printf_common+0xac>
 8020f40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020f48:	3501      	adds	r5, #1
 8020f4a:	e7c6      	b.n	8020eda <_printf_common+0x3e>
 8020f4c:	18e1      	adds	r1, r4, r3
 8020f4e:	1c5a      	adds	r2, r3, #1
 8020f50:	2030      	movs	r0, #48	@ 0x30
 8020f52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8020f56:	4422      	add	r2, r4
 8020f58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8020f5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8020f60:	3302      	adds	r3, #2
 8020f62:	e7c7      	b.n	8020ef4 <_printf_common+0x58>
 8020f64:	2301      	movs	r3, #1
 8020f66:	4622      	mov	r2, r4
 8020f68:	4641      	mov	r1, r8
 8020f6a:	4638      	mov	r0, r7
 8020f6c:	47c8      	blx	r9
 8020f6e:	3001      	adds	r0, #1
 8020f70:	d0e6      	beq.n	8020f40 <_printf_common+0xa4>
 8020f72:	3601      	adds	r6, #1
 8020f74:	e7d9      	b.n	8020f2a <_printf_common+0x8e>
	...

08020f78 <_printf_i>:
 8020f78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020f7c:	7e0f      	ldrb	r7, [r1, #24]
 8020f7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020f80:	2f78      	cmp	r7, #120	@ 0x78
 8020f82:	4691      	mov	r9, r2
 8020f84:	4680      	mov	r8, r0
 8020f86:	460c      	mov	r4, r1
 8020f88:	469a      	mov	sl, r3
 8020f8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8020f8e:	d807      	bhi.n	8020fa0 <_printf_i+0x28>
 8020f90:	2f62      	cmp	r7, #98	@ 0x62
 8020f92:	d80a      	bhi.n	8020faa <_printf_i+0x32>
 8020f94:	2f00      	cmp	r7, #0
 8020f96:	f000 80d2 	beq.w	802113e <_printf_i+0x1c6>
 8020f9a:	2f58      	cmp	r7, #88	@ 0x58
 8020f9c:	f000 80b9 	beq.w	8021112 <_printf_i+0x19a>
 8020fa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020fa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020fa8:	e03a      	b.n	8021020 <_printf_i+0xa8>
 8020faa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8020fae:	2b15      	cmp	r3, #21
 8020fb0:	d8f6      	bhi.n	8020fa0 <_printf_i+0x28>
 8020fb2:	a101      	add	r1, pc, #4	@ (adr r1, 8020fb8 <_printf_i+0x40>)
 8020fb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020fb8:	08021011 	.word	0x08021011
 8020fbc:	08021025 	.word	0x08021025
 8020fc0:	08020fa1 	.word	0x08020fa1
 8020fc4:	08020fa1 	.word	0x08020fa1
 8020fc8:	08020fa1 	.word	0x08020fa1
 8020fcc:	08020fa1 	.word	0x08020fa1
 8020fd0:	08021025 	.word	0x08021025
 8020fd4:	08020fa1 	.word	0x08020fa1
 8020fd8:	08020fa1 	.word	0x08020fa1
 8020fdc:	08020fa1 	.word	0x08020fa1
 8020fe0:	08020fa1 	.word	0x08020fa1
 8020fe4:	08021125 	.word	0x08021125
 8020fe8:	0802104f 	.word	0x0802104f
 8020fec:	080210df 	.word	0x080210df
 8020ff0:	08020fa1 	.word	0x08020fa1
 8020ff4:	08020fa1 	.word	0x08020fa1
 8020ff8:	08021147 	.word	0x08021147
 8020ffc:	08020fa1 	.word	0x08020fa1
 8021000:	0802104f 	.word	0x0802104f
 8021004:	08020fa1 	.word	0x08020fa1
 8021008:	08020fa1 	.word	0x08020fa1
 802100c:	080210e7 	.word	0x080210e7
 8021010:	6833      	ldr	r3, [r6, #0]
 8021012:	1d1a      	adds	r2, r3, #4
 8021014:	681b      	ldr	r3, [r3, #0]
 8021016:	6032      	str	r2, [r6, #0]
 8021018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802101c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8021020:	2301      	movs	r3, #1
 8021022:	e09d      	b.n	8021160 <_printf_i+0x1e8>
 8021024:	6833      	ldr	r3, [r6, #0]
 8021026:	6820      	ldr	r0, [r4, #0]
 8021028:	1d19      	adds	r1, r3, #4
 802102a:	6031      	str	r1, [r6, #0]
 802102c:	0606      	lsls	r6, r0, #24
 802102e:	d501      	bpl.n	8021034 <_printf_i+0xbc>
 8021030:	681d      	ldr	r5, [r3, #0]
 8021032:	e003      	b.n	802103c <_printf_i+0xc4>
 8021034:	0645      	lsls	r5, r0, #25
 8021036:	d5fb      	bpl.n	8021030 <_printf_i+0xb8>
 8021038:	f9b3 5000 	ldrsh.w	r5, [r3]
 802103c:	2d00      	cmp	r5, #0
 802103e:	da03      	bge.n	8021048 <_printf_i+0xd0>
 8021040:	232d      	movs	r3, #45	@ 0x2d
 8021042:	426d      	negs	r5, r5
 8021044:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021048:	4859      	ldr	r0, [pc, #356]	@ (80211b0 <_printf_i+0x238>)
 802104a:	230a      	movs	r3, #10
 802104c:	e011      	b.n	8021072 <_printf_i+0xfa>
 802104e:	6821      	ldr	r1, [r4, #0]
 8021050:	6833      	ldr	r3, [r6, #0]
 8021052:	0608      	lsls	r0, r1, #24
 8021054:	f853 5b04 	ldr.w	r5, [r3], #4
 8021058:	d402      	bmi.n	8021060 <_printf_i+0xe8>
 802105a:	0649      	lsls	r1, r1, #25
 802105c:	bf48      	it	mi
 802105e:	b2ad      	uxthmi	r5, r5
 8021060:	2f6f      	cmp	r7, #111	@ 0x6f
 8021062:	4853      	ldr	r0, [pc, #332]	@ (80211b0 <_printf_i+0x238>)
 8021064:	6033      	str	r3, [r6, #0]
 8021066:	bf14      	ite	ne
 8021068:	230a      	movne	r3, #10
 802106a:	2308      	moveq	r3, #8
 802106c:	2100      	movs	r1, #0
 802106e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8021072:	6866      	ldr	r6, [r4, #4]
 8021074:	60a6      	str	r6, [r4, #8]
 8021076:	2e00      	cmp	r6, #0
 8021078:	bfa2      	ittt	ge
 802107a:	6821      	ldrge	r1, [r4, #0]
 802107c:	f021 0104 	bicge.w	r1, r1, #4
 8021080:	6021      	strge	r1, [r4, #0]
 8021082:	b90d      	cbnz	r5, 8021088 <_printf_i+0x110>
 8021084:	2e00      	cmp	r6, #0
 8021086:	d04b      	beq.n	8021120 <_printf_i+0x1a8>
 8021088:	4616      	mov	r6, r2
 802108a:	fbb5 f1f3 	udiv	r1, r5, r3
 802108e:	fb03 5711 	mls	r7, r3, r1, r5
 8021092:	5dc7      	ldrb	r7, [r0, r7]
 8021094:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021098:	462f      	mov	r7, r5
 802109a:	42bb      	cmp	r3, r7
 802109c:	460d      	mov	r5, r1
 802109e:	d9f4      	bls.n	802108a <_printf_i+0x112>
 80210a0:	2b08      	cmp	r3, #8
 80210a2:	d10b      	bne.n	80210bc <_printf_i+0x144>
 80210a4:	6823      	ldr	r3, [r4, #0]
 80210a6:	07df      	lsls	r7, r3, #31
 80210a8:	d508      	bpl.n	80210bc <_printf_i+0x144>
 80210aa:	6923      	ldr	r3, [r4, #16]
 80210ac:	6861      	ldr	r1, [r4, #4]
 80210ae:	4299      	cmp	r1, r3
 80210b0:	bfde      	ittt	le
 80210b2:	2330      	movle	r3, #48	@ 0x30
 80210b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80210b8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80210bc:	1b92      	subs	r2, r2, r6
 80210be:	6122      	str	r2, [r4, #16]
 80210c0:	f8cd a000 	str.w	sl, [sp]
 80210c4:	464b      	mov	r3, r9
 80210c6:	aa03      	add	r2, sp, #12
 80210c8:	4621      	mov	r1, r4
 80210ca:	4640      	mov	r0, r8
 80210cc:	f7ff fee6 	bl	8020e9c <_printf_common>
 80210d0:	3001      	adds	r0, #1
 80210d2:	d14a      	bne.n	802116a <_printf_i+0x1f2>
 80210d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80210d8:	b004      	add	sp, #16
 80210da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80210de:	6823      	ldr	r3, [r4, #0]
 80210e0:	f043 0320 	orr.w	r3, r3, #32
 80210e4:	6023      	str	r3, [r4, #0]
 80210e6:	4833      	ldr	r0, [pc, #204]	@ (80211b4 <_printf_i+0x23c>)
 80210e8:	2778      	movs	r7, #120	@ 0x78
 80210ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80210ee:	6823      	ldr	r3, [r4, #0]
 80210f0:	6831      	ldr	r1, [r6, #0]
 80210f2:	061f      	lsls	r7, r3, #24
 80210f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80210f8:	d402      	bmi.n	8021100 <_printf_i+0x188>
 80210fa:	065f      	lsls	r7, r3, #25
 80210fc:	bf48      	it	mi
 80210fe:	b2ad      	uxthmi	r5, r5
 8021100:	6031      	str	r1, [r6, #0]
 8021102:	07d9      	lsls	r1, r3, #31
 8021104:	bf44      	itt	mi
 8021106:	f043 0320 	orrmi.w	r3, r3, #32
 802110a:	6023      	strmi	r3, [r4, #0]
 802110c:	b11d      	cbz	r5, 8021116 <_printf_i+0x19e>
 802110e:	2310      	movs	r3, #16
 8021110:	e7ac      	b.n	802106c <_printf_i+0xf4>
 8021112:	4827      	ldr	r0, [pc, #156]	@ (80211b0 <_printf_i+0x238>)
 8021114:	e7e9      	b.n	80210ea <_printf_i+0x172>
 8021116:	6823      	ldr	r3, [r4, #0]
 8021118:	f023 0320 	bic.w	r3, r3, #32
 802111c:	6023      	str	r3, [r4, #0]
 802111e:	e7f6      	b.n	802110e <_printf_i+0x196>
 8021120:	4616      	mov	r6, r2
 8021122:	e7bd      	b.n	80210a0 <_printf_i+0x128>
 8021124:	6833      	ldr	r3, [r6, #0]
 8021126:	6825      	ldr	r5, [r4, #0]
 8021128:	6961      	ldr	r1, [r4, #20]
 802112a:	1d18      	adds	r0, r3, #4
 802112c:	6030      	str	r0, [r6, #0]
 802112e:	062e      	lsls	r6, r5, #24
 8021130:	681b      	ldr	r3, [r3, #0]
 8021132:	d501      	bpl.n	8021138 <_printf_i+0x1c0>
 8021134:	6019      	str	r1, [r3, #0]
 8021136:	e002      	b.n	802113e <_printf_i+0x1c6>
 8021138:	0668      	lsls	r0, r5, #25
 802113a:	d5fb      	bpl.n	8021134 <_printf_i+0x1bc>
 802113c:	8019      	strh	r1, [r3, #0]
 802113e:	2300      	movs	r3, #0
 8021140:	6123      	str	r3, [r4, #16]
 8021142:	4616      	mov	r6, r2
 8021144:	e7bc      	b.n	80210c0 <_printf_i+0x148>
 8021146:	6833      	ldr	r3, [r6, #0]
 8021148:	1d1a      	adds	r2, r3, #4
 802114a:	6032      	str	r2, [r6, #0]
 802114c:	681e      	ldr	r6, [r3, #0]
 802114e:	6862      	ldr	r2, [r4, #4]
 8021150:	2100      	movs	r1, #0
 8021152:	4630      	mov	r0, r6
 8021154:	f7df f8c4 	bl	80002e0 <memchr>
 8021158:	b108      	cbz	r0, 802115e <_printf_i+0x1e6>
 802115a:	1b80      	subs	r0, r0, r6
 802115c:	6060      	str	r0, [r4, #4]
 802115e:	6863      	ldr	r3, [r4, #4]
 8021160:	6123      	str	r3, [r4, #16]
 8021162:	2300      	movs	r3, #0
 8021164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021168:	e7aa      	b.n	80210c0 <_printf_i+0x148>
 802116a:	6923      	ldr	r3, [r4, #16]
 802116c:	4632      	mov	r2, r6
 802116e:	4649      	mov	r1, r9
 8021170:	4640      	mov	r0, r8
 8021172:	47d0      	blx	sl
 8021174:	3001      	adds	r0, #1
 8021176:	d0ad      	beq.n	80210d4 <_printf_i+0x15c>
 8021178:	6823      	ldr	r3, [r4, #0]
 802117a:	079b      	lsls	r3, r3, #30
 802117c:	d413      	bmi.n	80211a6 <_printf_i+0x22e>
 802117e:	68e0      	ldr	r0, [r4, #12]
 8021180:	9b03      	ldr	r3, [sp, #12]
 8021182:	4298      	cmp	r0, r3
 8021184:	bfb8      	it	lt
 8021186:	4618      	movlt	r0, r3
 8021188:	e7a6      	b.n	80210d8 <_printf_i+0x160>
 802118a:	2301      	movs	r3, #1
 802118c:	4632      	mov	r2, r6
 802118e:	4649      	mov	r1, r9
 8021190:	4640      	mov	r0, r8
 8021192:	47d0      	blx	sl
 8021194:	3001      	adds	r0, #1
 8021196:	d09d      	beq.n	80210d4 <_printf_i+0x15c>
 8021198:	3501      	adds	r5, #1
 802119a:	68e3      	ldr	r3, [r4, #12]
 802119c:	9903      	ldr	r1, [sp, #12]
 802119e:	1a5b      	subs	r3, r3, r1
 80211a0:	42ab      	cmp	r3, r5
 80211a2:	dcf2      	bgt.n	802118a <_printf_i+0x212>
 80211a4:	e7eb      	b.n	802117e <_printf_i+0x206>
 80211a6:	2500      	movs	r5, #0
 80211a8:	f104 0619 	add.w	r6, r4, #25
 80211ac:	e7f5      	b.n	802119a <_printf_i+0x222>
 80211ae:	bf00      	nop
 80211b0:	08023976 	.word	0x08023976
 80211b4:	08023987 	.word	0x08023987

080211b8 <std>:
 80211b8:	2300      	movs	r3, #0
 80211ba:	b510      	push	{r4, lr}
 80211bc:	4604      	mov	r4, r0
 80211be:	e9c0 3300 	strd	r3, r3, [r0]
 80211c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80211c6:	6083      	str	r3, [r0, #8]
 80211c8:	8181      	strh	r1, [r0, #12]
 80211ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80211cc:	81c2      	strh	r2, [r0, #14]
 80211ce:	6183      	str	r3, [r0, #24]
 80211d0:	4619      	mov	r1, r3
 80211d2:	2208      	movs	r2, #8
 80211d4:	305c      	adds	r0, #92	@ 0x5c
 80211d6:	f000 f8b1 	bl	802133c <memset>
 80211da:	4b0d      	ldr	r3, [pc, #52]	@ (8021210 <std+0x58>)
 80211dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80211de:	4b0d      	ldr	r3, [pc, #52]	@ (8021214 <std+0x5c>)
 80211e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80211e2:	4b0d      	ldr	r3, [pc, #52]	@ (8021218 <std+0x60>)
 80211e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80211e6:	4b0d      	ldr	r3, [pc, #52]	@ (802121c <std+0x64>)
 80211e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80211ea:	4b0d      	ldr	r3, [pc, #52]	@ (8021220 <std+0x68>)
 80211ec:	6224      	str	r4, [r4, #32]
 80211ee:	429c      	cmp	r4, r3
 80211f0:	d006      	beq.n	8021200 <std+0x48>
 80211f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80211f6:	4294      	cmp	r4, r2
 80211f8:	d002      	beq.n	8021200 <std+0x48>
 80211fa:	33d0      	adds	r3, #208	@ 0xd0
 80211fc:	429c      	cmp	r4, r3
 80211fe:	d105      	bne.n	802120c <std+0x54>
 8021200:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021208:	f000 b924 	b.w	8021454 <__retarget_lock_init_recursive>
 802120c:	bd10      	pop	{r4, pc}
 802120e:	bf00      	nop
 8021210:	08022a91 	.word	0x08022a91
 8021214:	08022ab3 	.word	0x08022ab3
 8021218:	08022aeb 	.word	0x08022aeb
 802121c:	08022b0f 	.word	0x08022b0f
 8021220:	2401e36c 	.word	0x2401e36c

08021224 <stdio_exit_handler>:
 8021224:	4a02      	ldr	r2, [pc, #8]	@ (8021230 <stdio_exit_handler+0xc>)
 8021226:	4903      	ldr	r1, [pc, #12]	@ (8021234 <stdio_exit_handler+0x10>)
 8021228:	4803      	ldr	r0, [pc, #12]	@ (8021238 <stdio_exit_handler+0x14>)
 802122a:	f000 b869 	b.w	8021300 <_fwalk_sglue>
 802122e:	bf00      	nop
 8021230:	2400005c 	.word	0x2400005c
 8021234:	08022325 	.word	0x08022325
 8021238:	2400006c 	.word	0x2400006c

0802123c <cleanup_stdio>:
 802123c:	6841      	ldr	r1, [r0, #4]
 802123e:	4b0c      	ldr	r3, [pc, #48]	@ (8021270 <cleanup_stdio+0x34>)
 8021240:	4299      	cmp	r1, r3
 8021242:	b510      	push	{r4, lr}
 8021244:	4604      	mov	r4, r0
 8021246:	d001      	beq.n	802124c <cleanup_stdio+0x10>
 8021248:	f001 f86c 	bl	8022324 <_fflush_r>
 802124c:	68a1      	ldr	r1, [r4, #8]
 802124e:	4b09      	ldr	r3, [pc, #36]	@ (8021274 <cleanup_stdio+0x38>)
 8021250:	4299      	cmp	r1, r3
 8021252:	d002      	beq.n	802125a <cleanup_stdio+0x1e>
 8021254:	4620      	mov	r0, r4
 8021256:	f001 f865 	bl	8022324 <_fflush_r>
 802125a:	68e1      	ldr	r1, [r4, #12]
 802125c:	4b06      	ldr	r3, [pc, #24]	@ (8021278 <cleanup_stdio+0x3c>)
 802125e:	4299      	cmp	r1, r3
 8021260:	d004      	beq.n	802126c <cleanup_stdio+0x30>
 8021262:	4620      	mov	r0, r4
 8021264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021268:	f001 b85c 	b.w	8022324 <_fflush_r>
 802126c:	bd10      	pop	{r4, pc}
 802126e:	bf00      	nop
 8021270:	2401e36c 	.word	0x2401e36c
 8021274:	2401e3d4 	.word	0x2401e3d4
 8021278:	2401e43c 	.word	0x2401e43c

0802127c <global_stdio_init.part.0>:
 802127c:	b510      	push	{r4, lr}
 802127e:	4b0b      	ldr	r3, [pc, #44]	@ (80212ac <global_stdio_init.part.0+0x30>)
 8021280:	4c0b      	ldr	r4, [pc, #44]	@ (80212b0 <global_stdio_init.part.0+0x34>)
 8021282:	4a0c      	ldr	r2, [pc, #48]	@ (80212b4 <global_stdio_init.part.0+0x38>)
 8021284:	601a      	str	r2, [r3, #0]
 8021286:	4620      	mov	r0, r4
 8021288:	2200      	movs	r2, #0
 802128a:	2104      	movs	r1, #4
 802128c:	f7ff ff94 	bl	80211b8 <std>
 8021290:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021294:	2201      	movs	r2, #1
 8021296:	2109      	movs	r1, #9
 8021298:	f7ff ff8e 	bl	80211b8 <std>
 802129c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80212a0:	2202      	movs	r2, #2
 80212a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80212a6:	2112      	movs	r1, #18
 80212a8:	f7ff bf86 	b.w	80211b8 <std>
 80212ac:	2401e4a4 	.word	0x2401e4a4
 80212b0:	2401e36c 	.word	0x2401e36c
 80212b4:	08021225 	.word	0x08021225

080212b8 <__sfp_lock_acquire>:
 80212b8:	4801      	ldr	r0, [pc, #4]	@ (80212c0 <__sfp_lock_acquire+0x8>)
 80212ba:	f000 b8cc 	b.w	8021456 <__retarget_lock_acquire_recursive>
 80212be:	bf00      	nop
 80212c0:	2401e4ad 	.word	0x2401e4ad

080212c4 <__sfp_lock_release>:
 80212c4:	4801      	ldr	r0, [pc, #4]	@ (80212cc <__sfp_lock_release+0x8>)
 80212c6:	f000 b8c7 	b.w	8021458 <__retarget_lock_release_recursive>
 80212ca:	bf00      	nop
 80212cc:	2401e4ad 	.word	0x2401e4ad

080212d0 <__sinit>:
 80212d0:	b510      	push	{r4, lr}
 80212d2:	4604      	mov	r4, r0
 80212d4:	f7ff fff0 	bl	80212b8 <__sfp_lock_acquire>
 80212d8:	6a23      	ldr	r3, [r4, #32]
 80212da:	b11b      	cbz	r3, 80212e4 <__sinit+0x14>
 80212dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80212e0:	f7ff bff0 	b.w	80212c4 <__sfp_lock_release>
 80212e4:	4b04      	ldr	r3, [pc, #16]	@ (80212f8 <__sinit+0x28>)
 80212e6:	6223      	str	r3, [r4, #32]
 80212e8:	4b04      	ldr	r3, [pc, #16]	@ (80212fc <__sinit+0x2c>)
 80212ea:	681b      	ldr	r3, [r3, #0]
 80212ec:	2b00      	cmp	r3, #0
 80212ee:	d1f5      	bne.n	80212dc <__sinit+0xc>
 80212f0:	f7ff ffc4 	bl	802127c <global_stdio_init.part.0>
 80212f4:	e7f2      	b.n	80212dc <__sinit+0xc>
 80212f6:	bf00      	nop
 80212f8:	0802123d 	.word	0x0802123d
 80212fc:	2401e4a4 	.word	0x2401e4a4

08021300 <_fwalk_sglue>:
 8021300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021304:	4607      	mov	r7, r0
 8021306:	4688      	mov	r8, r1
 8021308:	4614      	mov	r4, r2
 802130a:	2600      	movs	r6, #0
 802130c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021310:	f1b9 0901 	subs.w	r9, r9, #1
 8021314:	d505      	bpl.n	8021322 <_fwalk_sglue+0x22>
 8021316:	6824      	ldr	r4, [r4, #0]
 8021318:	2c00      	cmp	r4, #0
 802131a:	d1f7      	bne.n	802130c <_fwalk_sglue+0xc>
 802131c:	4630      	mov	r0, r6
 802131e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021322:	89ab      	ldrh	r3, [r5, #12]
 8021324:	2b01      	cmp	r3, #1
 8021326:	d907      	bls.n	8021338 <_fwalk_sglue+0x38>
 8021328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802132c:	3301      	adds	r3, #1
 802132e:	d003      	beq.n	8021338 <_fwalk_sglue+0x38>
 8021330:	4629      	mov	r1, r5
 8021332:	4638      	mov	r0, r7
 8021334:	47c0      	blx	r8
 8021336:	4306      	orrs	r6, r0
 8021338:	3568      	adds	r5, #104	@ 0x68
 802133a:	e7e9      	b.n	8021310 <_fwalk_sglue+0x10>

0802133c <memset>:
 802133c:	4402      	add	r2, r0
 802133e:	4603      	mov	r3, r0
 8021340:	4293      	cmp	r3, r2
 8021342:	d100      	bne.n	8021346 <memset+0xa>
 8021344:	4770      	bx	lr
 8021346:	f803 1b01 	strb.w	r1, [r3], #1
 802134a:	e7f9      	b.n	8021340 <memset+0x4>

0802134c <_localeconv_r>:
 802134c:	4800      	ldr	r0, [pc, #0]	@ (8021350 <_localeconv_r+0x4>)
 802134e:	4770      	bx	lr
 8021350:	240001a8 	.word	0x240001a8

08021354 <_reclaim_reent>:
 8021354:	4b29      	ldr	r3, [pc, #164]	@ (80213fc <_reclaim_reent+0xa8>)
 8021356:	681b      	ldr	r3, [r3, #0]
 8021358:	4283      	cmp	r3, r0
 802135a:	b570      	push	{r4, r5, r6, lr}
 802135c:	4604      	mov	r4, r0
 802135e:	d04b      	beq.n	80213f8 <_reclaim_reent+0xa4>
 8021360:	69c3      	ldr	r3, [r0, #28]
 8021362:	b1ab      	cbz	r3, 8021390 <_reclaim_reent+0x3c>
 8021364:	68db      	ldr	r3, [r3, #12]
 8021366:	b16b      	cbz	r3, 8021384 <_reclaim_reent+0x30>
 8021368:	2500      	movs	r5, #0
 802136a:	69e3      	ldr	r3, [r4, #28]
 802136c:	68db      	ldr	r3, [r3, #12]
 802136e:	5959      	ldr	r1, [r3, r5]
 8021370:	2900      	cmp	r1, #0
 8021372:	d13b      	bne.n	80213ec <_reclaim_reent+0x98>
 8021374:	3504      	adds	r5, #4
 8021376:	2d80      	cmp	r5, #128	@ 0x80
 8021378:	d1f7      	bne.n	802136a <_reclaim_reent+0x16>
 802137a:	69e3      	ldr	r3, [r4, #28]
 802137c:	4620      	mov	r0, r4
 802137e:	68d9      	ldr	r1, [r3, #12]
 8021380:	f000 fe58 	bl	8022034 <_free_r>
 8021384:	69e3      	ldr	r3, [r4, #28]
 8021386:	6819      	ldr	r1, [r3, #0]
 8021388:	b111      	cbz	r1, 8021390 <_reclaim_reent+0x3c>
 802138a:	4620      	mov	r0, r4
 802138c:	f000 fe52 	bl	8022034 <_free_r>
 8021390:	6961      	ldr	r1, [r4, #20]
 8021392:	b111      	cbz	r1, 802139a <_reclaim_reent+0x46>
 8021394:	4620      	mov	r0, r4
 8021396:	f000 fe4d 	bl	8022034 <_free_r>
 802139a:	69e1      	ldr	r1, [r4, #28]
 802139c:	b111      	cbz	r1, 80213a4 <_reclaim_reent+0x50>
 802139e:	4620      	mov	r0, r4
 80213a0:	f000 fe48 	bl	8022034 <_free_r>
 80213a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80213a6:	b111      	cbz	r1, 80213ae <_reclaim_reent+0x5a>
 80213a8:	4620      	mov	r0, r4
 80213aa:	f000 fe43 	bl	8022034 <_free_r>
 80213ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80213b0:	b111      	cbz	r1, 80213b8 <_reclaim_reent+0x64>
 80213b2:	4620      	mov	r0, r4
 80213b4:	f000 fe3e 	bl	8022034 <_free_r>
 80213b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80213ba:	b111      	cbz	r1, 80213c2 <_reclaim_reent+0x6e>
 80213bc:	4620      	mov	r0, r4
 80213be:	f000 fe39 	bl	8022034 <_free_r>
 80213c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80213c4:	b111      	cbz	r1, 80213cc <_reclaim_reent+0x78>
 80213c6:	4620      	mov	r0, r4
 80213c8:	f000 fe34 	bl	8022034 <_free_r>
 80213cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80213ce:	b111      	cbz	r1, 80213d6 <_reclaim_reent+0x82>
 80213d0:	4620      	mov	r0, r4
 80213d2:	f000 fe2f 	bl	8022034 <_free_r>
 80213d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80213d8:	b111      	cbz	r1, 80213e0 <_reclaim_reent+0x8c>
 80213da:	4620      	mov	r0, r4
 80213dc:	f000 fe2a 	bl	8022034 <_free_r>
 80213e0:	6a23      	ldr	r3, [r4, #32]
 80213e2:	b14b      	cbz	r3, 80213f8 <_reclaim_reent+0xa4>
 80213e4:	4620      	mov	r0, r4
 80213e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80213ea:	4718      	bx	r3
 80213ec:	680e      	ldr	r6, [r1, #0]
 80213ee:	4620      	mov	r0, r4
 80213f0:	f000 fe20 	bl	8022034 <_free_r>
 80213f4:	4631      	mov	r1, r6
 80213f6:	e7bb      	b.n	8021370 <_reclaim_reent+0x1c>
 80213f8:	bd70      	pop	{r4, r5, r6, pc}
 80213fa:	bf00      	nop
 80213fc:	24000068 	.word	0x24000068

08021400 <__errno>:
 8021400:	4b01      	ldr	r3, [pc, #4]	@ (8021408 <__errno+0x8>)
 8021402:	6818      	ldr	r0, [r3, #0]
 8021404:	4770      	bx	lr
 8021406:	bf00      	nop
 8021408:	24000068 	.word	0x24000068

0802140c <__libc_init_array>:
 802140c:	b570      	push	{r4, r5, r6, lr}
 802140e:	4d0d      	ldr	r5, [pc, #52]	@ (8021444 <__libc_init_array+0x38>)
 8021410:	4c0d      	ldr	r4, [pc, #52]	@ (8021448 <__libc_init_array+0x3c>)
 8021412:	1b64      	subs	r4, r4, r5
 8021414:	10a4      	asrs	r4, r4, #2
 8021416:	2600      	movs	r6, #0
 8021418:	42a6      	cmp	r6, r4
 802141a:	d109      	bne.n	8021430 <__libc_init_array+0x24>
 802141c:	4d0b      	ldr	r5, [pc, #44]	@ (802144c <__libc_init_array+0x40>)
 802141e:	4c0c      	ldr	r4, [pc, #48]	@ (8021450 <__libc_init_array+0x44>)
 8021420:	f001 fed8 	bl	80231d4 <_init>
 8021424:	1b64      	subs	r4, r4, r5
 8021426:	10a4      	asrs	r4, r4, #2
 8021428:	2600      	movs	r6, #0
 802142a:	42a6      	cmp	r6, r4
 802142c:	d105      	bne.n	802143a <__libc_init_array+0x2e>
 802142e:	bd70      	pop	{r4, r5, r6, pc}
 8021430:	f855 3b04 	ldr.w	r3, [r5], #4
 8021434:	4798      	blx	r3
 8021436:	3601      	adds	r6, #1
 8021438:	e7ee      	b.n	8021418 <__libc_init_array+0xc>
 802143a:	f855 3b04 	ldr.w	r3, [r5], #4
 802143e:	4798      	blx	r3
 8021440:	3601      	adds	r6, #1
 8021442:	e7f2      	b.n	802142a <__libc_init_array+0x1e>
 8021444:	08023ce0 	.word	0x08023ce0
 8021448:	08023ce0 	.word	0x08023ce0
 802144c:	08023ce0 	.word	0x08023ce0
 8021450:	08023cf8 	.word	0x08023cf8

08021454 <__retarget_lock_init_recursive>:
 8021454:	4770      	bx	lr

08021456 <__retarget_lock_acquire_recursive>:
 8021456:	4770      	bx	lr

08021458 <__retarget_lock_release_recursive>:
 8021458:	4770      	bx	lr

0802145a <memcpy>:
 802145a:	440a      	add	r2, r1
 802145c:	4291      	cmp	r1, r2
 802145e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8021462:	d100      	bne.n	8021466 <memcpy+0xc>
 8021464:	4770      	bx	lr
 8021466:	b510      	push	{r4, lr}
 8021468:	f811 4b01 	ldrb.w	r4, [r1], #1
 802146c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021470:	4291      	cmp	r1, r2
 8021472:	d1f9      	bne.n	8021468 <memcpy+0xe>
 8021474:	bd10      	pop	{r4, pc}

08021476 <quorem>:
 8021476:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802147a:	6903      	ldr	r3, [r0, #16]
 802147c:	690c      	ldr	r4, [r1, #16]
 802147e:	42a3      	cmp	r3, r4
 8021480:	4607      	mov	r7, r0
 8021482:	db7e      	blt.n	8021582 <quorem+0x10c>
 8021484:	3c01      	subs	r4, #1
 8021486:	f101 0814 	add.w	r8, r1, #20
 802148a:	00a3      	lsls	r3, r4, #2
 802148c:	f100 0514 	add.w	r5, r0, #20
 8021490:	9300      	str	r3, [sp, #0]
 8021492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021496:	9301      	str	r3, [sp, #4]
 8021498:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 802149c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80214a0:	3301      	adds	r3, #1
 80214a2:	429a      	cmp	r2, r3
 80214a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80214a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80214ac:	d32e      	bcc.n	802150c <quorem+0x96>
 80214ae:	f04f 0a00 	mov.w	sl, #0
 80214b2:	46c4      	mov	ip, r8
 80214b4:	46ae      	mov	lr, r5
 80214b6:	46d3      	mov	fp, sl
 80214b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80214bc:	b298      	uxth	r0, r3
 80214be:	fb06 a000 	mla	r0, r6, r0, sl
 80214c2:	0c02      	lsrs	r2, r0, #16
 80214c4:	0c1b      	lsrs	r3, r3, #16
 80214c6:	fb06 2303 	mla	r3, r6, r3, r2
 80214ca:	f8de 2000 	ldr.w	r2, [lr]
 80214ce:	b280      	uxth	r0, r0
 80214d0:	b292      	uxth	r2, r2
 80214d2:	1a12      	subs	r2, r2, r0
 80214d4:	445a      	add	r2, fp
 80214d6:	f8de 0000 	ldr.w	r0, [lr]
 80214da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80214de:	b29b      	uxth	r3, r3
 80214e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80214e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80214e8:	b292      	uxth	r2, r2
 80214ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80214ee:	45e1      	cmp	r9, ip
 80214f0:	f84e 2b04 	str.w	r2, [lr], #4
 80214f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80214f8:	d2de      	bcs.n	80214b8 <quorem+0x42>
 80214fa:	9b00      	ldr	r3, [sp, #0]
 80214fc:	58eb      	ldr	r3, [r5, r3]
 80214fe:	b92b      	cbnz	r3, 802150c <quorem+0x96>
 8021500:	9b01      	ldr	r3, [sp, #4]
 8021502:	3b04      	subs	r3, #4
 8021504:	429d      	cmp	r5, r3
 8021506:	461a      	mov	r2, r3
 8021508:	d32f      	bcc.n	802156a <quorem+0xf4>
 802150a:	613c      	str	r4, [r7, #16]
 802150c:	4638      	mov	r0, r7
 802150e:	f001 f9b7 	bl	8022880 <__mcmp>
 8021512:	2800      	cmp	r0, #0
 8021514:	db25      	blt.n	8021562 <quorem+0xec>
 8021516:	4629      	mov	r1, r5
 8021518:	2000      	movs	r0, #0
 802151a:	f858 2b04 	ldr.w	r2, [r8], #4
 802151e:	f8d1 c000 	ldr.w	ip, [r1]
 8021522:	fa1f fe82 	uxth.w	lr, r2
 8021526:	fa1f f38c 	uxth.w	r3, ip
 802152a:	eba3 030e 	sub.w	r3, r3, lr
 802152e:	4403      	add	r3, r0
 8021530:	0c12      	lsrs	r2, r2, #16
 8021532:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8021536:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 802153a:	b29b      	uxth	r3, r3
 802153c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8021540:	45c1      	cmp	r9, r8
 8021542:	f841 3b04 	str.w	r3, [r1], #4
 8021546:	ea4f 4022 	mov.w	r0, r2, asr #16
 802154a:	d2e6      	bcs.n	802151a <quorem+0xa4>
 802154c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021550:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8021554:	b922      	cbnz	r2, 8021560 <quorem+0xea>
 8021556:	3b04      	subs	r3, #4
 8021558:	429d      	cmp	r5, r3
 802155a:	461a      	mov	r2, r3
 802155c:	d30b      	bcc.n	8021576 <quorem+0x100>
 802155e:	613c      	str	r4, [r7, #16]
 8021560:	3601      	adds	r6, #1
 8021562:	4630      	mov	r0, r6
 8021564:	b003      	add	sp, #12
 8021566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802156a:	6812      	ldr	r2, [r2, #0]
 802156c:	3b04      	subs	r3, #4
 802156e:	2a00      	cmp	r2, #0
 8021570:	d1cb      	bne.n	802150a <quorem+0x94>
 8021572:	3c01      	subs	r4, #1
 8021574:	e7c6      	b.n	8021504 <quorem+0x8e>
 8021576:	6812      	ldr	r2, [r2, #0]
 8021578:	3b04      	subs	r3, #4
 802157a:	2a00      	cmp	r2, #0
 802157c:	d1ef      	bne.n	802155e <quorem+0xe8>
 802157e:	3c01      	subs	r4, #1
 8021580:	e7ea      	b.n	8021558 <quorem+0xe2>
 8021582:	2000      	movs	r0, #0
 8021584:	e7ee      	b.n	8021564 <quorem+0xee>
	...

08021588 <_dtoa_r>:
 8021588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802158c:	ed2d 8b02 	vpush	{d8}
 8021590:	69c7      	ldr	r7, [r0, #28]
 8021592:	b091      	sub	sp, #68	@ 0x44
 8021594:	ed8d 0b02 	vstr	d0, [sp, #8]
 8021598:	ec55 4b10 	vmov	r4, r5, d0
 802159c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 802159e:	9107      	str	r1, [sp, #28]
 80215a0:	4681      	mov	r9, r0
 80215a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80215a4:	930d      	str	r3, [sp, #52]	@ 0x34
 80215a6:	b97f      	cbnz	r7, 80215c8 <_dtoa_r+0x40>
 80215a8:	2010      	movs	r0, #16
 80215aa:	f000 fd8d 	bl	80220c8 <malloc>
 80215ae:	4602      	mov	r2, r0
 80215b0:	f8c9 001c 	str.w	r0, [r9, #28]
 80215b4:	b920      	cbnz	r0, 80215c0 <_dtoa_r+0x38>
 80215b6:	4ba0      	ldr	r3, [pc, #640]	@ (8021838 <_dtoa_r+0x2b0>)
 80215b8:	21ef      	movs	r1, #239	@ 0xef
 80215ba:	48a0      	ldr	r0, [pc, #640]	@ (802183c <_dtoa_r+0x2b4>)
 80215bc:	f001 fb02 	bl	8022bc4 <__assert_func>
 80215c0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80215c4:	6007      	str	r7, [r0, #0]
 80215c6:	60c7      	str	r7, [r0, #12]
 80215c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80215cc:	6819      	ldr	r1, [r3, #0]
 80215ce:	b159      	cbz	r1, 80215e8 <_dtoa_r+0x60>
 80215d0:	685a      	ldr	r2, [r3, #4]
 80215d2:	604a      	str	r2, [r1, #4]
 80215d4:	2301      	movs	r3, #1
 80215d6:	4093      	lsls	r3, r2
 80215d8:	608b      	str	r3, [r1, #8]
 80215da:	4648      	mov	r0, r9
 80215dc:	f000 ff16 	bl	802240c <_Bfree>
 80215e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80215e4:	2200      	movs	r2, #0
 80215e6:	601a      	str	r2, [r3, #0]
 80215e8:	1e2b      	subs	r3, r5, #0
 80215ea:	bfbb      	ittet	lt
 80215ec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80215f0:	9303      	strlt	r3, [sp, #12]
 80215f2:	2300      	movge	r3, #0
 80215f4:	2201      	movlt	r2, #1
 80215f6:	bfac      	ite	ge
 80215f8:	6033      	strge	r3, [r6, #0]
 80215fa:	6032      	strlt	r2, [r6, #0]
 80215fc:	4b90      	ldr	r3, [pc, #576]	@ (8021840 <_dtoa_r+0x2b8>)
 80215fe:	9e03      	ldr	r6, [sp, #12]
 8021600:	43b3      	bics	r3, r6
 8021602:	d110      	bne.n	8021626 <_dtoa_r+0x9e>
 8021604:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021606:	f242 730f 	movw	r3, #9999	@ 0x270f
 802160a:	6013      	str	r3, [r2, #0]
 802160c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8021610:	4323      	orrs	r3, r4
 8021612:	f000 84de 	beq.w	8021fd2 <_dtoa_r+0xa4a>
 8021616:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021618:	4f8a      	ldr	r7, [pc, #552]	@ (8021844 <_dtoa_r+0x2bc>)
 802161a:	2b00      	cmp	r3, #0
 802161c:	f000 84e0 	beq.w	8021fe0 <_dtoa_r+0xa58>
 8021620:	1cfb      	adds	r3, r7, #3
 8021622:	f000 bcdb 	b.w	8021fdc <_dtoa_r+0xa54>
 8021626:	ed9d 8b02 	vldr	d8, [sp, #8]
 802162a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 802162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021632:	d10a      	bne.n	802164a <_dtoa_r+0xc2>
 8021634:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8021636:	2301      	movs	r3, #1
 8021638:	6013      	str	r3, [r2, #0]
 802163a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802163c:	b113      	cbz	r3, 8021644 <_dtoa_r+0xbc>
 802163e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8021640:	4b81      	ldr	r3, [pc, #516]	@ (8021848 <_dtoa_r+0x2c0>)
 8021642:	6013      	str	r3, [r2, #0]
 8021644:	4f81      	ldr	r7, [pc, #516]	@ (802184c <_dtoa_r+0x2c4>)
 8021646:	f000 bccb 	b.w	8021fe0 <_dtoa_r+0xa58>
 802164a:	aa0e      	add	r2, sp, #56	@ 0x38
 802164c:	a90f      	add	r1, sp, #60	@ 0x3c
 802164e:	4648      	mov	r0, r9
 8021650:	eeb0 0b48 	vmov.f64	d0, d8
 8021654:	f001 f9c4 	bl	80229e0 <__d2b>
 8021658:	f3c6 530a 	ubfx	r3, r6, #20, #11
 802165c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802165e:	9001      	str	r0, [sp, #4]
 8021660:	2b00      	cmp	r3, #0
 8021662:	d045      	beq.n	80216f0 <_dtoa_r+0x168>
 8021664:	eeb0 7b48 	vmov.f64	d7, d8
 8021668:	ee18 1a90 	vmov	r1, s17
 802166c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8021670:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8021674:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8021678:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 802167c:	2500      	movs	r5, #0
 802167e:	ee07 1a90 	vmov	s15, r1
 8021682:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8021686:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8021820 <_dtoa_r+0x298>
 802168a:	ee37 7b46 	vsub.f64	d7, d7, d6
 802168e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8021828 <_dtoa_r+0x2a0>
 8021692:	eea7 6b05 	vfma.f64	d6, d7, d5
 8021696:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8021830 <_dtoa_r+0x2a8>
 802169a:	ee07 3a90 	vmov	s15, r3
 802169e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80216a2:	eeb0 7b46 	vmov.f64	d7, d6
 80216a6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80216aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80216ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80216b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216b6:	ee16 8a90 	vmov	r8, s13
 80216ba:	d508      	bpl.n	80216ce <_dtoa_r+0x146>
 80216bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80216c0:	eeb4 6b47 	vcmp.f64	d6, d7
 80216c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216c8:	bf18      	it	ne
 80216ca:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 80216ce:	f1b8 0f16 	cmp.w	r8, #22
 80216d2:	d82b      	bhi.n	802172c <_dtoa_r+0x1a4>
 80216d4:	495e      	ldr	r1, [pc, #376]	@ (8021850 <_dtoa_r+0x2c8>)
 80216d6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80216da:	ed91 7b00 	vldr	d7, [r1]
 80216de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80216e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80216e6:	d501      	bpl.n	80216ec <_dtoa_r+0x164>
 80216e8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80216ec:	2100      	movs	r1, #0
 80216ee:	e01e      	b.n	802172e <_dtoa_r+0x1a6>
 80216f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80216f2:	4413      	add	r3, r2
 80216f4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80216f8:	2920      	cmp	r1, #32
 80216fa:	bfc1      	itttt	gt
 80216fc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8021700:	408e      	lslgt	r6, r1
 8021702:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8021706:	fa24 f101 	lsrgt.w	r1, r4, r1
 802170a:	bfd6      	itet	le
 802170c:	f1c1 0120 	rsble	r1, r1, #32
 8021710:	4331      	orrgt	r1, r6
 8021712:	fa04 f101 	lslle.w	r1, r4, r1
 8021716:	ee07 1a90 	vmov	s15, r1
 802171a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 802171e:	3b01      	subs	r3, #1
 8021720:	ee17 1a90 	vmov	r1, s15
 8021724:	2501      	movs	r5, #1
 8021726:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 802172a:	e7a8      	b.n	802167e <_dtoa_r+0xf6>
 802172c:	2101      	movs	r1, #1
 802172e:	1ad2      	subs	r2, r2, r3
 8021730:	1e53      	subs	r3, r2, #1
 8021732:	9306      	str	r3, [sp, #24]
 8021734:	bf45      	ittet	mi
 8021736:	f1c2 0301 	rsbmi	r3, r2, #1
 802173a:	9305      	strmi	r3, [sp, #20]
 802173c:	2300      	movpl	r3, #0
 802173e:	2300      	movmi	r3, #0
 8021740:	bf4c      	ite	mi
 8021742:	9306      	strmi	r3, [sp, #24]
 8021744:	9305      	strpl	r3, [sp, #20]
 8021746:	f1b8 0f00 	cmp.w	r8, #0
 802174a:	910c      	str	r1, [sp, #48]	@ 0x30
 802174c:	db18      	blt.n	8021780 <_dtoa_r+0x1f8>
 802174e:	9b06      	ldr	r3, [sp, #24]
 8021750:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8021754:	4443      	add	r3, r8
 8021756:	9306      	str	r3, [sp, #24]
 8021758:	2300      	movs	r3, #0
 802175a:	9a07      	ldr	r2, [sp, #28]
 802175c:	2a09      	cmp	r2, #9
 802175e:	d849      	bhi.n	80217f4 <_dtoa_r+0x26c>
 8021760:	2a05      	cmp	r2, #5
 8021762:	bfc4      	itt	gt
 8021764:	3a04      	subgt	r2, #4
 8021766:	9207      	strgt	r2, [sp, #28]
 8021768:	9a07      	ldr	r2, [sp, #28]
 802176a:	f1a2 0202 	sub.w	r2, r2, #2
 802176e:	bfcc      	ite	gt
 8021770:	2400      	movgt	r4, #0
 8021772:	2401      	movle	r4, #1
 8021774:	2a03      	cmp	r2, #3
 8021776:	d848      	bhi.n	802180a <_dtoa_r+0x282>
 8021778:	e8df f002 	tbb	[pc, r2]
 802177c:	3a2c2e0b 	.word	0x3a2c2e0b
 8021780:	9b05      	ldr	r3, [sp, #20]
 8021782:	2200      	movs	r2, #0
 8021784:	eba3 0308 	sub.w	r3, r3, r8
 8021788:	9305      	str	r3, [sp, #20]
 802178a:	920a      	str	r2, [sp, #40]	@ 0x28
 802178c:	f1c8 0300 	rsb	r3, r8, #0
 8021790:	e7e3      	b.n	802175a <_dtoa_r+0x1d2>
 8021792:	2200      	movs	r2, #0
 8021794:	9208      	str	r2, [sp, #32]
 8021796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021798:	2a00      	cmp	r2, #0
 802179a:	dc39      	bgt.n	8021810 <_dtoa_r+0x288>
 802179c:	f04f 0b01 	mov.w	fp, #1
 80217a0:	46da      	mov	sl, fp
 80217a2:	465a      	mov	r2, fp
 80217a4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80217a8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80217ac:	2100      	movs	r1, #0
 80217ae:	2004      	movs	r0, #4
 80217b0:	f100 0614 	add.w	r6, r0, #20
 80217b4:	4296      	cmp	r6, r2
 80217b6:	d930      	bls.n	802181a <_dtoa_r+0x292>
 80217b8:	6079      	str	r1, [r7, #4]
 80217ba:	4648      	mov	r0, r9
 80217bc:	9304      	str	r3, [sp, #16]
 80217be:	f000 fde5 	bl	802238c <_Balloc>
 80217c2:	9b04      	ldr	r3, [sp, #16]
 80217c4:	4607      	mov	r7, r0
 80217c6:	2800      	cmp	r0, #0
 80217c8:	d146      	bne.n	8021858 <_dtoa_r+0x2d0>
 80217ca:	4b22      	ldr	r3, [pc, #136]	@ (8021854 <_dtoa_r+0x2cc>)
 80217cc:	4602      	mov	r2, r0
 80217ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80217d2:	e6f2      	b.n	80215ba <_dtoa_r+0x32>
 80217d4:	2201      	movs	r2, #1
 80217d6:	e7dd      	b.n	8021794 <_dtoa_r+0x20c>
 80217d8:	2200      	movs	r2, #0
 80217da:	9208      	str	r2, [sp, #32]
 80217dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80217de:	eb08 0b02 	add.w	fp, r8, r2
 80217e2:	f10b 0a01 	add.w	sl, fp, #1
 80217e6:	4652      	mov	r2, sl
 80217e8:	2a01      	cmp	r2, #1
 80217ea:	bfb8      	it	lt
 80217ec:	2201      	movlt	r2, #1
 80217ee:	e7db      	b.n	80217a8 <_dtoa_r+0x220>
 80217f0:	2201      	movs	r2, #1
 80217f2:	e7f2      	b.n	80217da <_dtoa_r+0x252>
 80217f4:	2401      	movs	r4, #1
 80217f6:	2200      	movs	r2, #0
 80217f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80217fc:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8021800:	2100      	movs	r1, #0
 8021802:	46da      	mov	sl, fp
 8021804:	2212      	movs	r2, #18
 8021806:	9109      	str	r1, [sp, #36]	@ 0x24
 8021808:	e7ce      	b.n	80217a8 <_dtoa_r+0x220>
 802180a:	2201      	movs	r2, #1
 802180c:	9208      	str	r2, [sp, #32]
 802180e:	e7f5      	b.n	80217fc <_dtoa_r+0x274>
 8021810:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8021814:	46da      	mov	sl, fp
 8021816:	465a      	mov	r2, fp
 8021818:	e7c6      	b.n	80217a8 <_dtoa_r+0x220>
 802181a:	3101      	adds	r1, #1
 802181c:	0040      	lsls	r0, r0, #1
 802181e:	e7c7      	b.n	80217b0 <_dtoa_r+0x228>
 8021820:	636f4361 	.word	0x636f4361
 8021824:	3fd287a7 	.word	0x3fd287a7
 8021828:	8b60c8b3 	.word	0x8b60c8b3
 802182c:	3fc68a28 	.word	0x3fc68a28
 8021830:	509f79fb 	.word	0x509f79fb
 8021834:	3fd34413 	.word	0x3fd34413
 8021838:	080239a5 	.word	0x080239a5
 802183c:	080239bc 	.word	0x080239bc
 8021840:	7ff00000 	.word	0x7ff00000
 8021844:	080239a1 	.word	0x080239a1
 8021848:	08023975 	.word	0x08023975
 802184c:	08023974 	.word	0x08023974
 8021850:	08023ab8 	.word	0x08023ab8
 8021854:	08023a14 	.word	0x08023a14
 8021858:	f8d9 201c 	ldr.w	r2, [r9, #28]
 802185c:	f1ba 0f0e 	cmp.w	sl, #14
 8021860:	6010      	str	r0, [r2, #0]
 8021862:	d86f      	bhi.n	8021944 <_dtoa_r+0x3bc>
 8021864:	2c00      	cmp	r4, #0
 8021866:	d06d      	beq.n	8021944 <_dtoa_r+0x3bc>
 8021868:	f1b8 0f00 	cmp.w	r8, #0
 802186c:	f340 80c2 	ble.w	80219f4 <_dtoa_r+0x46c>
 8021870:	4aca      	ldr	r2, [pc, #808]	@ (8021b9c <_dtoa_r+0x614>)
 8021872:	f008 010f 	and.w	r1, r8, #15
 8021876:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 802187a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 802187e:	ed92 7b00 	vldr	d7, [r2]
 8021882:	ea4f 1128 	mov.w	r1, r8, asr #4
 8021886:	f000 80a9 	beq.w	80219dc <_dtoa_r+0x454>
 802188a:	4ac5      	ldr	r2, [pc, #788]	@ (8021ba0 <_dtoa_r+0x618>)
 802188c:	ed92 6b08 	vldr	d6, [r2, #32]
 8021890:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8021894:	ed8d 6b02 	vstr	d6, [sp, #8]
 8021898:	f001 010f 	and.w	r1, r1, #15
 802189c:	2203      	movs	r2, #3
 802189e:	48c0      	ldr	r0, [pc, #768]	@ (8021ba0 <_dtoa_r+0x618>)
 80218a0:	2900      	cmp	r1, #0
 80218a2:	f040 809d 	bne.w	80219e0 <_dtoa_r+0x458>
 80218a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80218aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80218ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80218b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80218b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80218b8:	2900      	cmp	r1, #0
 80218ba:	f000 80c1 	beq.w	8021a40 <_dtoa_r+0x4b8>
 80218be:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80218c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80218c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80218ca:	f140 80b9 	bpl.w	8021a40 <_dtoa_r+0x4b8>
 80218ce:	f1ba 0f00 	cmp.w	sl, #0
 80218d2:	f000 80b5 	beq.w	8021a40 <_dtoa_r+0x4b8>
 80218d6:	f1bb 0f00 	cmp.w	fp, #0
 80218da:	dd31      	ble.n	8021940 <_dtoa_r+0x3b8>
 80218dc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80218e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80218e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80218e8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80218ec:	9104      	str	r1, [sp, #16]
 80218ee:	3201      	adds	r2, #1
 80218f0:	465c      	mov	r4, fp
 80218f2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80218f6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80218fa:	ee07 2a90 	vmov	s15, r2
 80218fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8021902:	eea7 5b06 	vfma.f64	d5, d7, d6
 8021906:	ee15 2a90 	vmov	r2, s11
 802190a:	ec51 0b15 	vmov	r0, r1, d5
 802190e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8021912:	2c00      	cmp	r4, #0
 8021914:	f040 8098 	bne.w	8021a48 <_dtoa_r+0x4c0>
 8021918:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 802191c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8021920:	ec41 0b17 	vmov	d7, r0, r1
 8021924:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802192c:	f300 8261 	bgt.w	8021df2 <_dtoa_r+0x86a>
 8021930:	eeb1 7b47 	vneg.f64	d7, d7
 8021934:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802193c:	f100 80f5 	bmi.w	8021b2a <_dtoa_r+0x5a2>
 8021940:	ed8d 8b02 	vstr	d8, [sp, #8]
 8021944:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021946:	2a00      	cmp	r2, #0
 8021948:	f2c0 812c 	blt.w	8021ba4 <_dtoa_r+0x61c>
 802194c:	f1b8 0f0e 	cmp.w	r8, #14
 8021950:	f300 8128 	bgt.w	8021ba4 <_dtoa_r+0x61c>
 8021954:	4b91      	ldr	r3, [pc, #580]	@ (8021b9c <_dtoa_r+0x614>)
 8021956:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 802195a:	ed93 6b00 	vldr	d6, [r3]
 802195e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021960:	2b00      	cmp	r3, #0
 8021962:	da03      	bge.n	802196c <_dtoa_r+0x3e4>
 8021964:	f1ba 0f00 	cmp.w	sl, #0
 8021968:	f340 80d2 	ble.w	8021b10 <_dtoa_r+0x588>
 802196c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8021970:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021974:	463e      	mov	r6, r7
 8021976:	ee87 5b06 	vdiv.f64	d5, d7, d6
 802197a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 802197e:	ee15 3a10 	vmov	r3, s10
 8021982:	3330      	adds	r3, #48	@ 0x30
 8021984:	f806 3b01 	strb.w	r3, [r6], #1
 8021988:	1bf3      	subs	r3, r6, r7
 802198a:	459a      	cmp	sl, r3
 802198c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8021990:	eea3 7b46 	vfms.f64	d7, d3, d6
 8021994:	f040 80f8 	bne.w	8021b88 <_dtoa_r+0x600>
 8021998:	ee37 7b07 	vadd.f64	d7, d7, d7
 802199c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80219a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219a4:	f300 80dd 	bgt.w	8021b62 <_dtoa_r+0x5da>
 80219a8:	eeb4 7b46 	vcmp.f64	d7, d6
 80219ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219b0:	d104      	bne.n	80219bc <_dtoa_r+0x434>
 80219b2:	ee15 3a10 	vmov	r3, s10
 80219b6:	07db      	lsls	r3, r3, #31
 80219b8:	f100 80d3 	bmi.w	8021b62 <_dtoa_r+0x5da>
 80219bc:	9901      	ldr	r1, [sp, #4]
 80219be:	4648      	mov	r0, r9
 80219c0:	f000 fd24 	bl	802240c <_Bfree>
 80219c4:	2300      	movs	r3, #0
 80219c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80219c8:	7033      	strb	r3, [r6, #0]
 80219ca:	f108 0301 	add.w	r3, r8, #1
 80219ce:	6013      	str	r3, [r2, #0]
 80219d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80219d2:	2b00      	cmp	r3, #0
 80219d4:	f000 8304 	beq.w	8021fe0 <_dtoa_r+0xa58>
 80219d8:	601e      	str	r6, [r3, #0]
 80219da:	e301      	b.n	8021fe0 <_dtoa_r+0xa58>
 80219dc:	2202      	movs	r2, #2
 80219de:	e75e      	b.n	802189e <_dtoa_r+0x316>
 80219e0:	07cc      	lsls	r4, r1, #31
 80219e2:	d504      	bpl.n	80219ee <_dtoa_r+0x466>
 80219e4:	ed90 6b00 	vldr	d6, [r0]
 80219e8:	3201      	adds	r2, #1
 80219ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80219ee:	1049      	asrs	r1, r1, #1
 80219f0:	3008      	adds	r0, #8
 80219f2:	e755      	b.n	80218a0 <_dtoa_r+0x318>
 80219f4:	d022      	beq.n	8021a3c <_dtoa_r+0x4b4>
 80219f6:	f1c8 0100 	rsb	r1, r8, #0
 80219fa:	4a68      	ldr	r2, [pc, #416]	@ (8021b9c <_dtoa_r+0x614>)
 80219fc:	f001 000f 	and.w	r0, r1, #15
 8021a00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8021a04:	ed92 7b00 	vldr	d7, [r2]
 8021a08:	ee28 7b07 	vmul.f64	d7, d8, d7
 8021a0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021a10:	4863      	ldr	r0, [pc, #396]	@ (8021ba0 <_dtoa_r+0x618>)
 8021a12:	1109      	asrs	r1, r1, #4
 8021a14:	2400      	movs	r4, #0
 8021a16:	2202      	movs	r2, #2
 8021a18:	b929      	cbnz	r1, 8021a26 <_dtoa_r+0x49e>
 8021a1a:	2c00      	cmp	r4, #0
 8021a1c:	f43f af49 	beq.w	80218b2 <_dtoa_r+0x32a>
 8021a20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8021a24:	e745      	b.n	80218b2 <_dtoa_r+0x32a>
 8021a26:	07ce      	lsls	r6, r1, #31
 8021a28:	d505      	bpl.n	8021a36 <_dtoa_r+0x4ae>
 8021a2a:	ed90 6b00 	vldr	d6, [r0]
 8021a2e:	3201      	adds	r2, #1
 8021a30:	2401      	movs	r4, #1
 8021a32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021a36:	1049      	asrs	r1, r1, #1
 8021a38:	3008      	adds	r0, #8
 8021a3a:	e7ed      	b.n	8021a18 <_dtoa_r+0x490>
 8021a3c:	2202      	movs	r2, #2
 8021a3e:	e738      	b.n	80218b2 <_dtoa_r+0x32a>
 8021a40:	f8cd 8010 	str.w	r8, [sp, #16]
 8021a44:	4654      	mov	r4, sl
 8021a46:	e754      	b.n	80218f2 <_dtoa_r+0x36a>
 8021a48:	4a54      	ldr	r2, [pc, #336]	@ (8021b9c <_dtoa_r+0x614>)
 8021a4a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8021a4e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8021a52:	9a08      	ldr	r2, [sp, #32]
 8021a54:	ec41 0b17 	vmov	d7, r0, r1
 8021a58:	443c      	add	r4, r7
 8021a5a:	b34a      	cbz	r2, 8021ab0 <_dtoa_r+0x528>
 8021a5c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8021a60:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8021a64:	463e      	mov	r6, r7
 8021a66:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8021a6a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8021a6e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8021a72:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021a76:	ee14 2a90 	vmov	r2, s9
 8021a7a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021a7e:	3230      	adds	r2, #48	@ 0x30
 8021a80:	ee36 6b45 	vsub.f64	d6, d6, d5
 8021a84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a8c:	f806 2b01 	strb.w	r2, [r6], #1
 8021a90:	d438      	bmi.n	8021b04 <_dtoa_r+0x57c>
 8021a92:	ee32 5b46 	vsub.f64	d5, d2, d6
 8021a96:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8021a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a9e:	d462      	bmi.n	8021b66 <_dtoa_r+0x5de>
 8021aa0:	42a6      	cmp	r6, r4
 8021aa2:	f43f af4d 	beq.w	8021940 <_dtoa_r+0x3b8>
 8021aa6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8021aaa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021aae:	e7e0      	b.n	8021a72 <_dtoa_r+0x4ea>
 8021ab0:	4621      	mov	r1, r4
 8021ab2:	463e      	mov	r6, r7
 8021ab4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021ab8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8021abc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8021ac0:	ee14 2a90 	vmov	r2, s9
 8021ac4:	3230      	adds	r2, #48	@ 0x30
 8021ac6:	f806 2b01 	strb.w	r2, [r6], #1
 8021aca:	42a6      	cmp	r6, r4
 8021acc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8021ad0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8021ad4:	d119      	bne.n	8021b0a <_dtoa_r+0x582>
 8021ad6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8021ada:	ee37 4b05 	vadd.f64	d4, d7, d5
 8021ade:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8021ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021ae6:	dc3e      	bgt.n	8021b66 <_dtoa_r+0x5de>
 8021ae8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8021aec:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8021af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021af4:	f57f af24 	bpl.w	8021940 <_dtoa_r+0x3b8>
 8021af8:	460e      	mov	r6, r1
 8021afa:	3901      	subs	r1, #1
 8021afc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8021b00:	2b30      	cmp	r3, #48	@ 0x30
 8021b02:	d0f9      	beq.n	8021af8 <_dtoa_r+0x570>
 8021b04:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8021b08:	e758      	b.n	80219bc <_dtoa_r+0x434>
 8021b0a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8021b0e:	e7d5      	b.n	8021abc <_dtoa_r+0x534>
 8021b10:	d10b      	bne.n	8021b2a <_dtoa_r+0x5a2>
 8021b12:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8021b16:	ee26 6b07 	vmul.f64	d6, d6, d7
 8021b1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8021b1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8021b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b26:	f2c0 8161 	blt.w	8021dec <_dtoa_r+0x864>
 8021b2a:	2400      	movs	r4, #0
 8021b2c:	4625      	mov	r5, r4
 8021b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021b30:	43db      	mvns	r3, r3
 8021b32:	9304      	str	r3, [sp, #16]
 8021b34:	463e      	mov	r6, r7
 8021b36:	f04f 0800 	mov.w	r8, #0
 8021b3a:	4621      	mov	r1, r4
 8021b3c:	4648      	mov	r0, r9
 8021b3e:	f000 fc65 	bl	802240c <_Bfree>
 8021b42:	2d00      	cmp	r5, #0
 8021b44:	d0de      	beq.n	8021b04 <_dtoa_r+0x57c>
 8021b46:	f1b8 0f00 	cmp.w	r8, #0
 8021b4a:	d005      	beq.n	8021b58 <_dtoa_r+0x5d0>
 8021b4c:	45a8      	cmp	r8, r5
 8021b4e:	d003      	beq.n	8021b58 <_dtoa_r+0x5d0>
 8021b50:	4641      	mov	r1, r8
 8021b52:	4648      	mov	r0, r9
 8021b54:	f000 fc5a 	bl	802240c <_Bfree>
 8021b58:	4629      	mov	r1, r5
 8021b5a:	4648      	mov	r0, r9
 8021b5c:	f000 fc56 	bl	802240c <_Bfree>
 8021b60:	e7d0      	b.n	8021b04 <_dtoa_r+0x57c>
 8021b62:	f8cd 8010 	str.w	r8, [sp, #16]
 8021b66:	4633      	mov	r3, r6
 8021b68:	461e      	mov	r6, r3
 8021b6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021b6e:	2a39      	cmp	r2, #57	@ 0x39
 8021b70:	d106      	bne.n	8021b80 <_dtoa_r+0x5f8>
 8021b72:	429f      	cmp	r7, r3
 8021b74:	d1f8      	bne.n	8021b68 <_dtoa_r+0x5e0>
 8021b76:	9a04      	ldr	r2, [sp, #16]
 8021b78:	3201      	adds	r2, #1
 8021b7a:	9204      	str	r2, [sp, #16]
 8021b7c:	2230      	movs	r2, #48	@ 0x30
 8021b7e:	703a      	strb	r2, [r7, #0]
 8021b80:	781a      	ldrb	r2, [r3, #0]
 8021b82:	3201      	adds	r2, #1
 8021b84:	701a      	strb	r2, [r3, #0]
 8021b86:	e7bd      	b.n	8021b04 <_dtoa_r+0x57c>
 8021b88:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021b8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8021b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b94:	f47f aeef 	bne.w	8021976 <_dtoa_r+0x3ee>
 8021b98:	e710      	b.n	80219bc <_dtoa_r+0x434>
 8021b9a:	bf00      	nop
 8021b9c:	08023ab8 	.word	0x08023ab8
 8021ba0:	08023a90 	.word	0x08023a90
 8021ba4:	9908      	ldr	r1, [sp, #32]
 8021ba6:	2900      	cmp	r1, #0
 8021ba8:	f000 80e3 	beq.w	8021d72 <_dtoa_r+0x7ea>
 8021bac:	9907      	ldr	r1, [sp, #28]
 8021bae:	2901      	cmp	r1, #1
 8021bb0:	f300 80c8 	bgt.w	8021d44 <_dtoa_r+0x7bc>
 8021bb4:	2d00      	cmp	r5, #0
 8021bb6:	f000 80c1 	beq.w	8021d3c <_dtoa_r+0x7b4>
 8021bba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8021bbe:	9e05      	ldr	r6, [sp, #20]
 8021bc0:	461c      	mov	r4, r3
 8021bc2:	9304      	str	r3, [sp, #16]
 8021bc4:	9b05      	ldr	r3, [sp, #20]
 8021bc6:	4413      	add	r3, r2
 8021bc8:	9305      	str	r3, [sp, #20]
 8021bca:	9b06      	ldr	r3, [sp, #24]
 8021bcc:	2101      	movs	r1, #1
 8021bce:	4413      	add	r3, r2
 8021bd0:	4648      	mov	r0, r9
 8021bd2:	9306      	str	r3, [sp, #24]
 8021bd4:	f000 fcce 	bl	8022574 <__i2b>
 8021bd8:	9b04      	ldr	r3, [sp, #16]
 8021bda:	4605      	mov	r5, r0
 8021bdc:	b166      	cbz	r6, 8021bf8 <_dtoa_r+0x670>
 8021bde:	9a06      	ldr	r2, [sp, #24]
 8021be0:	2a00      	cmp	r2, #0
 8021be2:	dd09      	ble.n	8021bf8 <_dtoa_r+0x670>
 8021be4:	42b2      	cmp	r2, r6
 8021be6:	9905      	ldr	r1, [sp, #20]
 8021be8:	bfa8      	it	ge
 8021bea:	4632      	movge	r2, r6
 8021bec:	1a89      	subs	r1, r1, r2
 8021bee:	9105      	str	r1, [sp, #20]
 8021bf0:	9906      	ldr	r1, [sp, #24]
 8021bf2:	1ab6      	subs	r6, r6, r2
 8021bf4:	1a8a      	subs	r2, r1, r2
 8021bf6:	9206      	str	r2, [sp, #24]
 8021bf8:	b1fb      	cbz	r3, 8021c3a <_dtoa_r+0x6b2>
 8021bfa:	9a08      	ldr	r2, [sp, #32]
 8021bfc:	2a00      	cmp	r2, #0
 8021bfe:	f000 80bc 	beq.w	8021d7a <_dtoa_r+0x7f2>
 8021c02:	b19c      	cbz	r4, 8021c2c <_dtoa_r+0x6a4>
 8021c04:	4629      	mov	r1, r5
 8021c06:	4622      	mov	r2, r4
 8021c08:	4648      	mov	r0, r9
 8021c0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021c0c:	f000 fd72 	bl	80226f4 <__pow5mult>
 8021c10:	9a01      	ldr	r2, [sp, #4]
 8021c12:	4601      	mov	r1, r0
 8021c14:	4605      	mov	r5, r0
 8021c16:	4648      	mov	r0, r9
 8021c18:	f000 fcc2 	bl	80225a0 <__multiply>
 8021c1c:	9901      	ldr	r1, [sp, #4]
 8021c1e:	9004      	str	r0, [sp, #16]
 8021c20:	4648      	mov	r0, r9
 8021c22:	f000 fbf3 	bl	802240c <_Bfree>
 8021c26:	9a04      	ldr	r2, [sp, #16]
 8021c28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021c2a:	9201      	str	r2, [sp, #4]
 8021c2c:	1b1a      	subs	r2, r3, r4
 8021c2e:	d004      	beq.n	8021c3a <_dtoa_r+0x6b2>
 8021c30:	9901      	ldr	r1, [sp, #4]
 8021c32:	4648      	mov	r0, r9
 8021c34:	f000 fd5e 	bl	80226f4 <__pow5mult>
 8021c38:	9001      	str	r0, [sp, #4]
 8021c3a:	2101      	movs	r1, #1
 8021c3c:	4648      	mov	r0, r9
 8021c3e:	f000 fc99 	bl	8022574 <__i2b>
 8021c42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021c44:	4604      	mov	r4, r0
 8021c46:	2b00      	cmp	r3, #0
 8021c48:	f000 81d0 	beq.w	8021fec <_dtoa_r+0xa64>
 8021c4c:	461a      	mov	r2, r3
 8021c4e:	4601      	mov	r1, r0
 8021c50:	4648      	mov	r0, r9
 8021c52:	f000 fd4f 	bl	80226f4 <__pow5mult>
 8021c56:	9b07      	ldr	r3, [sp, #28]
 8021c58:	2b01      	cmp	r3, #1
 8021c5a:	4604      	mov	r4, r0
 8021c5c:	f300 8095 	bgt.w	8021d8a <_dtoa_r+0x802>
 8021c60:	9b02      	ldr	r3, [sp, #8]
 8021c62:	2b00      	cmp	r3, #0
 8021c64:	f040 808b 	bne.w	8021d7e <_dtoa_r+0x7f6>
 8021c68:	9b03      	ldr	r3, [sp, #12]
 8021c6a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8021c6e:	2a00      	cmp	r2, #0
 8021c70:	f040 8087 	bne.w	8021d82 <_dtoa_r+0x7fa>
 8021c74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8021c78:	0d12      	lsrs	r2, r2, #20
 8021c7a:	0512      	lsls	r2, r2, #20
 8021c7c:	2a00      	cmp	r2, #0
 8021c7e:	f000 8082 	beq.w	8021d86 <_dtoa_r+0x7fe>
 8021c82:	9b05      	ldr	r3, [sp, #20]
 8021c84:	3301      	adds	r3, #1
 8021c86:	9305      	str	r3, [sp, #20]
 8021c88:	9b06      	ldr	r3, [sp, #24]
 8021c8a:	3301      	adds	r3, #1
 8021c8c:	9306      	str	r3, [sp, #24]
 8021c8e:	2301      	movs	r3, #1
 8021c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021c92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021c94:	2b00      	cmp	r3, #0
 8021c96:	f000 81af 	beq.w	8021ff8 <_dtoa_r+0xa70>
 8021c9a:	6922      	ldr	r2, [r4, #16]
 8021c9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021ca0:	6910      	ldr	r0, [r2, #16]
 8021ca2:	f000 fc1b 	bl	80224dc <__hi0bits>
 8021ca6:	f1c0 0020 	rsb	r0, r0, #32
 8021caa:	9b06      	ldr	r3, [sp, #24]
 8021cac:	4418      	add	r0, r3
 8021cae:	f010 001f 	ands.w	r0, r0, #31
 8021cb2:	d076      	beq.n	8021da2 <_dtoa_r+0x81a>
 8021cb4:	f1c0 0220 	rsb	r2, r0, #32
 8021cb8:	2a04      	cmp	r2, #4
 8021cba:	dd69      	ble.n	8021d90 <_dtoa_r+0x808>
 8021cbc:	9b05      	ldr	r3, [sp, #20]
 8021cbe:	f1c0 001c 	rsb	r0, r0, #28
 8021cc2:	4403      	add	r3, r0
 8021cc4:	9305      	str	r3, [sp, #20]
 8021cc6:	9b06      	ldr	r3, [sp, #24]
 8021cc8:	4406      	add	r6, r0
 8021cca:	4403      	add	r3, r0
 8021ccc:	9306      	str	r3, [sp, #24]
 8021cce:	9b05      	ldr	r3, [sp, #20]
 8021cd0:	2b00      	cmp	r3, #0
 8021cd2:	dd05      	ble.n	8021ce0 <_dtoa_r+0x758>
 8021cd4:	9901      	ldr	r1, [sp, #4]
 8021cd6:	461a      	mov	r2, r3
 8021cd8:	4648      	mov	r0, r9
 8021cda:	f000 fd65 	bl	80227a8 <__lshift>
 8021cde:	9001      	str	r0, [sp, #4]
 8021ce0:	9b06      	ldr	r3, [sp, #24]
 8021ce2:	2b00      	cmp	r3, #0
 8021ce4:	dd05      	ble.n	8021cf2 <_dtoa_r+0x76a>
 8021ce6:	4621      	mov	r1, r4
 8021ce8:	461a      	mov	r2, r3
 8021cea:	4648      	mov	r0, r9
 8021cec:	f000 fd5c 	bl	80227a8 <__lshift>
 8021cf0:	4604      	mov	r4, r0
 8021cf2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8021cf4:	2b00      	cmp	r3, #0
 8021cf6:	d056      	beq.n	8021da6 <_dtoa_r+0x81e>
 8021cf8:	9801      	ldr	r0, [sp, #4]
 8021cfa:	4621      	mov	r1, r4
 8021cfc:	f000 fdc0 	bl	8022880 <__mcmp>
 8021d00:	2800      	cmp	r0, #0
 8021d02:	da50      	bge.n	8021da6 <_dtoa_r+0x81e>
 8021d04:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8021d08:	9304      	str	r3, [sp, #16]
 8021d0a:	9901      	ldr	r1, [sp, #4]
 8021d0c:	2300      	movs	r3, #0
 8021d0e:	220a      	movs	r2, #10
 8021d10:	4648      	mov	r0, r9
 8021d12:	f000 fb9d 	bl	8022450 <__multadd>
 8021d16:	9b08      	ldr	r3, [sp, #32]
 8021d18:	9001      	str	r0, [sp, #4]
 8021d1a:	2b00      	cmp	r3, #0
 8021d1c:	f000 816e 	beq.w	8021ffc <_dtoa_r+0xa74>
 8021d20:	4629      	mov	r1, r5
 8021d22:	2300      	movs	r3, #0
 8021d24:	220a      	movs	r2, #10
 8021d26:	4648      	mov	r0, r9
 8021d28:	f000 fb92 	bl	8022450 <__multadd>
 8021d2c:	f1bb 0f00 	cmp.w	fp, #0
 8021d30:	4605      	mov	r5, r0
 8021d32:	dc64      	bgt.n	8021dfe <_dtoa_r+0x876>
 8021d34:	9b07      	ldr	r3, [sp, #28]
 8021d36:	2b02      	cmp	r3, #2
 8021d38:	dc3e      	bgt.n	8021db8 <_dtoa_r+0x830>
 8021d3a:	e060      	b.n	8021dfe <_dtoa_r+0x876>
 8021d3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021d3e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8021d42:	e73c      	b.n	8021bbe <_dtoa_r+0x636>
 8021d44:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8021d48:	42a3      	cmp	r3, r4
 8021d4a:	bfbf      	itttt	lt
 8021d4c:	1ae2      	sublt	r2, r4, r3
 8021d4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8021d50:	189b      	addlt	r3, r3, r2
 8021d52:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8021d54:	bfae      	itee	ge
 8021d56:	1b1c      	subge	r4, r3, r4
 8021d58:	4623      	movlt	r3, r4
 8021d5a:	2400      	movlt	r4, #0
 8021d5c:	f1ba 0f00 	cmp.w	sl, #0
 8021d60:	bfb5      	itete	lt
 8021d62:	9a05      	ldrlt	r2, [sp, #20]
 8021d64:	9e05      	ldrge	r6, [sp, #20]
 8021d66:	eba2 060a 	sublt.w	r6, r2, sl
 8021d6a:	4652      	movge	r2, sl
 8021d6c:	bfb8      	it	lt
 8021d6e:	2200      	movlt	r2, #0
 8021d70:	e727      	b.n	8021bc2 <_dtoa_r+0x63a>
 8021d72:	9e05      	ldr	r6, [sp, #20]
 8021d74:	9d08      	ldr	r5, [sp, #32]
 8021d76:	461c      	mov	r4, r3
 8021d78:	e730      	b.n	8021bdc <_dtoa_r+0x654>
 8021d7a:	461a      	mov	r2, r3
 8021d7c:	e758      	b.n	8021c30 <_dtoa_r+0x6a8>
 8021d7e:	2300      	movs	r3, #0
 8021d80:	e786      	b.n	8021c90 <_dtoa_r+0x708>
 8021d82:	9b02      	ldr	r3, [sp, #8]
 8021d84:	e784      	b.n	8021c90 <_dtoa_r+0x708>
 8021d86:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021d88:	e783      	b.n	8021c92 <_dtoa_r+0x70a>
 8021d8a:	2300      	movs	r3, #0
 8021d8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021d8e:	e784      	b.n	8021c9a <_dtoa_r+0x712>
 8021d90:	d09d      	beq.n	8021cce <_dtoa_r+0x746>
 8021d92:	9b05      	ldr	r3, [sp, #20]
 8021d94:	321c      	adds	r2, #28
 8021d96:	4413      	add	r3, r2
 8021d98:	9305      	str	r3, [sp, #20]
 8021d9a:	9b06      	ldr	r3, [sp, #24]
 8021d9c:	4416      	add	r6, r2
 8021d9e:	4413      	add	r3, r2
 8021da0:	e794      	b.n	8021ccc <_dtoa_r+0x744>
 8021da2:	4602      	mov	r2, r0
 8021da4:	e7f5      	b.n	8021d92 <_dtoa_r+0x80a>
 8021da6:	f1ba 0f00 	cmp.w	sl, #0
 8021daa:	f8cd 8010 	str.w	r8, [sp, #16]
 8021dae:	46d3      	mov	fp, sl
 8021db0:	dc21      	bgt.n	8021df6 <_dtoa_r+0x86e>
 8021db2:	9b07      	ldr	r3, [sp, #28]
 8021db4:	2b02      	cmp	r3, #2
 8021db6:	dd1e      	ble.n	8021df6 <_dtoa_r+0x86e>
 8021db8:	f1bb 0f00 	cmp.w	fp, #0
 8021dbc:	f47f aeb7 	bne.w	8021b2e <_dtoa_r+0x5a6>
 8021dc0:	4621      	mov	r1, r4
 8021dc2:	465b      	mov	r3, fp
 8021dc4:	2205      	movs	r2, #5
 8021dc6:	4648      	mov	r0, r9
 8021dc8:	f000 fb42 	bl	8022450 <__multadd>
 8021dcc:	4601      	mov	r1, r0
 8021dce:	4604      	mov	r4, r0
 8021dd0:	9801      	ldr	r0, [sp, #4]
 8021dd2:	f000 fd55 	bl	8022880 <__mcmp>
 8021dd6:	2800      	cmp	r0, #0
 8021dd8:	f77f aea9 	ble.w	8021b2e <_dtoa_r+0x5a6>
 8021ddc:	463e      	mov	r6, r7
 8021dde:	2331      	movs	r3, #49	@ 0x31
 8021de0:	f806 3b01 	strb.w	r3, [r6], #1
 8021de4:	9b04      	ldr	r3, [sp, #16]
 8021de6:	3301      	adds	r3, #1
 8021de8:	9304      	str	r3, [sp, #16]
 8021dea:	e6a4      	b.n	8021b36 <_dtoa_r+0x5ae>
 8021dec:	f8cd 8010 	str.w	r8, [sp, #16]
 8021df0:	4654      	mov	r4, sl
 8021df2:	4625      	mov	r5, r4
 8021df4:	e7f2      	b.n	8021ddc <_dtoa_r+0x854>
 8021df6:	9b08      	ldr	r3, [sp, #32]
 8021df8:	2b00      	cmp	r3, #0
 8021dfa:	f000 8103 	beq.w	8022004 <_dtoa_r+0xa7c>
 8021dfe:	2e00      	cmp	r6, #0
 8021e00:	dd05      	ble.n	8021e0e <_dtoa_r+0x886>
 8021e02:	4629      	mov	r1, r5
 8021e04:	4632      	mov	r2, r6
 8021e06:	4648      	mov	r0, r9
 8021e08:	f000 fcce 	bl	80227a8 <__lshift>
 8021e0c:	4605      	mov	r5, r0
 8021e0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021e10:	2b00      	cmp	r3, #0
 8021e12:	d058      	beq.n	8021ec6 <_dtoa_r+0x93e>
 8021e14:	6869      	ldr	r1, [r5, #4]
 8021e16:	4648      	mov	r0, r9
 8021e18:	f000 fab8 	bl	802238c <_Balloc>
 8021e1c:	4606      	mov	r6, r0
 8021e1e:	b928      	cbnz	r0, 8021e2c <_dtoa_r+0x8a4>
 8021e20:	4b82      	ldr	r3, [pc, #520]	@ (802202c <_dtoa_r+0xaa4>)
 8021e22:	4602      	mov	r2, r0
 8021e24:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8021e28:	f7ff bbc7 	b.w	80215ba <_dtoa_r+0x32>
 8021e2c:	692a      	ldr	r2, [r5, #16]
 8021e2e:	3202      	adds	r2, #2
 8021e30:	0092      	lsls	r2, r2, #2
 8021e32:	f105 010c 	add.w	r1, r5, #12
 8021e36:	300c      	adds	r0, #12
 8021e38:	f7ff fb0f 	bl	802145a <memcpy>
 8021e3c:	2201      	movs	r2, #1
 8021e3e:	4631      	mov	r1, r6
 8021e40:	4648      	mov	r0, r9
 8021e42:	f000 fcb1 	bl	80227a8 <__lshift>
 8021e46:	1c7b      	adds	r3, r7, #1
 8021e48:	9305      	str	r3, [sp, #20]
 8021e4a:	eb07 030b 	add.w	r3, r7, fp
 8021e4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021e50:	9b02      	ldr	r3, [sp, #8]
 8021e52:	f003 0301 	and.w	r3, r3, #1
 8021e56:	46a8      	mov	r8, r5
 8021e58:	9308      	str	r3, [sp, #32]
 8021e5a:	4605      	mov	r5, r0
 8021e5c:	9b05      	ldr	r3, [sp, #20]
 8021e5e:	9801      	ldr	r0, [sp, #4]
 8021e60:	4621      	mov	r1, r4
 8021e62:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8021e66:	f7ff fb06 	bl	8021476 <quorem>
 8021e6a:	4641      	mov	r1, r8
 8021e6c:	9002      	str	r0, [sp, #8]
 8021e6e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8021e72:	9801      	ldr	r0, [sp, #4]
 8021e74:	f000 fd04 	bl	8022880 <__mcmp>
 8021e78:	462a      	mov	r2, r5
 8021e7a:	9006      	str	r0, [sp, #24]
 8021e7c:	4621      	mov	r1, r4
 8021e7e:	4648      	mov	r0, r9
 8021e80:	f000 fd1a 	bl	80228b8 <__mdiff>
 8021e84:	68c2      	ldr	r2, [r0, #12]
 8021e86:	4606      	mov	r6, r0
 8021e88:	b9fa      	cbnz	r2, 8021eca <_dtoa_r+0x942>
 8021e8a:	4601      	mov	r1, r0
 8021e8c:	9801      	ldr	r0, [sp, #4]
 8021e8e:	f000 fcf7 	bl	8022880 <__mcmp>
 8021e92:	4602      	mov	r2, r0
 8021e94:	4631      	mov	r1, r6
 8021e96:	4648      	mov	r0, r9
 8021e98:	920a      	str	r2, [sp, #40]	@ 0x28
 8021e9a:	f000 fab7 	bl	802240c <_Bfree>
 8021e9e:	9b07      	ldr	r3, [sp, #28]
 8021ea0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021ea2:	9e05      	ldr	r6, [sp, #20]
 8021ea4:	ea43 0102 	orr.w	r1, r3, r2
 8021ea8:	9b08      	ldr	r3, [sp, #32]
 8021eaa:	4319      	orrs	r1, r3
 8021eac:	d10f      	bne.n	8021ece <_dtoa_r+0x946>
 8021eae:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8021eb2:	d028      	beq.n	8021f06 <_dtoa_r+0x97e>
 8021eb4:	9b06      	ldr	r3, [sp, #24]
 8021eb6:	2b00      	cmp	r3, #0
 8021eb8:	dd02      	ble.n	8021ec0 <_dtoa_r+0x938>
 8021eba:	9b02      	ldr	r3, [sp, #8]
 8021ebc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8021ec0:	f88b a000 	strb.w	sl, [fp]
 8021ec4:	e639      	b.n	8021b3a <_dtoa_r+0x5b2>
 8021ec6:	4628      	mov	r0, r5
 8021ec8:	e7bd      	b.n	8021e46 <_dtoa_r+0x8be>
 8021eca:	2201      	movs	r2, #1
 8021ecc:	e7e2      	b.n	8021e94 <_dtoa_r+0x90c>
 8021ece:	9b06      	ldr	r3, [sp, #24]
 8021ed0:	2b00      	cmp	r3, #0
 8021ed2:	db04      	blt.n	8021ede <_dtoa_r+0x956>
 8021ed4:	9907      	ldr	r1, [sp, #28]
 8021ed6:	430b      	orrs	r3, r1
 8021ed8:	9908      	ldr	r1, [sp, #32]
 8021eda:	430b      	orrs	r3, r1
 8021edc:	d120      	bne.n	8021f20 <_dtoa_r+0x998>
 8021ede:	2a00      	cmp	r2, #0
 8021ee0:	ddee      	ble.n	8021ec0 <_dtoa_r+0x938>
 8021ee2:	9901      	ldr	r1, [sp, #4]
 8021ee4:	2201      	movs	r2, #1
 8021ee6:	4648      	mov	r0, r9
 8021ee8:	f000 fc5e 	bl	80227a8 <__lshift>
 8021eec:	4621      	mov	r1, r4
 8021eee:	9001      	str	r0, [sp, #4]
 8021ef0:	f000 fcc6 	bl	8022880 <__mcmp>
 8021ef4:	2800      	cmp	r0, #0
 8021ef6:	dc03      	bgt.n	8021f00 <_dtoa_r+0x978>
 8021ef8:	d1e2      	bne.n	8021ec0 <_dtoa_r+0x938>
 8021efa:	f01a 0f01 	tst.w	sl, #1
 8021efe:	d0df      	beq.n	8021ec0 <_dtoa_r+0x938>
 8021f00:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8021f04:	d1d9      	bne.n	8021eba <_dtoa_r+0x932>
 8021f06:	2339      	movs	r3, #57	@ 0x39
 8021f08:	f88b 3000 	strb.w	r3, [fp]
 8021f0c:	4633      	mov	r3, r6
 8021f0e:	461e      	mov	r6, r3
 8021f10:	3b01      	subs	r3, #1
 8021f12:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8021f16:	2a39      	cmp	r2, #57	@ 0x39
 8021f18:	d053      	beq.n	8021fc2 <_dtoa_r+0xa3a>
 8021f1a:	3201      	adds	r2, #1
 8021f1c:	701a      	strb	r2, [r3, #0]
 8021f1e:	e60c      	b.n	8021b3a <_dtoa_r+0x5b2>
 8021f20:	2a00      	cmp	r2, #0
 8021f22:	dd07      	ble.n	8021f34 <_dtoa_r+0x9ac>
 8021f24:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8021f28:	d0ed      	beq.n	8021f06 <_dtoa_r+0x97e>
 8021f2a:	f10a 0301 	add.w	r3, sl, #1
 8021f2e:	f88b 3000 	strb.w	r3, [fp]
 8021f32:	e602      	b.n	8021b3a <_dtoa_r+0x5b2>
 8021f34:	9b05      	ldr	r3, [sp, #20]
 8021f36:	9a05      	ldr	r2, [sp, #20]
 8021f38:	f803 ac01 	strb.w	sl, [r3, #-1]
 8021f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021f3e:	4293      	cmp	r3, r2
 8021f40:	d029      	beq.n	8021f96 <_dtoa_r+0xa0e>
 8021f42:	9901      	ldr	r1, [sp, #4]
 8021f44:	2300      	movs	r3, #0
 8021f46:	220a      	movs	r2, #10
 8021f48:	4648      	mov	r0, r9
 8021f4a:	f000 fa81 	bl	8022450 <__multadd>
 8021f4e:	45a8      	cmp	r8, r5
 8021f50:	9001      	str	r0, [sp, #4]
 8021f52:	f04f 0300 	mov.w	r3, #0
 8021f56:	f04f 020a 	mov.w	r2, #10
 8021f5a:	4641      	mov	r1, r8
 8021f5c:	4648      	mov	r0, r9
 8021f5e:	d107      	bne.n	8021f70 <_dtoa_r+0x9e8>
 8021f60:	f000 fa76 	bl	8022450 <__multadd>
 8021f64:	4680      	mov	r8, r0
 8021f66:	4605      	mov	r5, r0
 8021f68:	9b05      	ldr	r3, [sp, #20]
 8021f6a:	3301      	adds	r3, #1
 8021f6c:	9305      	str	r3, [sp, #20]
 8021f6e:	e775      	b.n	8021e5c <_dtoa_r+0x8d4>
 8021f70:	f000 fa6e 	bl	8022450 <__multadd>
 8021f74:	4629      	mov	r1, r5
 8021f76:	4680      	mov	r8, r0
 8021f78:	2300      	movs	r3, #0
 8021f7a:	220a      	movs	r2, #10
 8021f7c:	4648      	mov	r0, r9
 8021f7e:	f000 fa67 	bl	8022450 <__multadd>
 8021f82:	4605      	mov	r5, r0
 8021f84:	e7f0      	b.n	8021f68 <_dtoa_r+0x9e0>
 8021f86:	f1bb 0f00 	cmp.w	fp, #0
 8021f8a:	bfcc      	ite	gt
 8021f8c:	465e      	movgt	r6, fp
 8021f8e:	2601      	movle	r6, #1
 8021f90:	443e      	add	r6, r7
 8021f92:	f04f 0800 	mov.w	r8, #0
 8021f96:	9901      	ldr	r1, [sp, #4]
 8021f98:	2201      	movs	r2, #1
 8021f9a:	4648      	mov	r0, r9
 8021f9c:	f000 fc04 	bl	80227a8 <__lshift>
 8021fa0:	4621      	mov	r1, r4
 8021fa2:	9001      	str	r0, [sp, #4]
 8021fa4:	f000 fc6c 	bl	8022880 <__mcmp>
 8021fa8:	2800      	cmp	r0, #0
 8021faa:	dcaf      	bgt.n	8021f0c <_dtoa_r+0x984>
 8021fac:	d102      	bne.n	8021fb4 <_dtoa_r+0xa2c>
 8021fae:	f01a 0f01 	tst.w	sl, #1
 8021fb2:	d1ab      	bne.n	8021f0c <_dtoa_r+0x984>
 8021fb4:	4633      	mov	r3, r6
 8021fb6:	461e      	mov	r6, r3
 8021fb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021fbc:	2a30      	cmp	r2, #48	@ 0x30
 8021fbe:	d0fa      	beq.n	8021fb6 <_dtoa_r+0xa2e>
 8021fc0:	e5bb      	b.n	8021b3a <_dtoa_r+0x5b2>
 8021fc2:	429f      	cmp	r7, r3
 8021fc4:	d1a3      	bne.n	8021f0e <_dtoa_r+0x986>
 8021fc6:	9b04      	ldr	r3, [sp, #16]
 8021fc8:	3301      	adds	r3, #1
 8021fca:	9304      	str	r3, [sp, #16]
 8021fcc:	2331      	movs	r3, #49	@ 0x31
 8021fce:	703b      	strb	r3, [r7, #0]
 8021fd0:	e5b3      	b.n	8021b3a <_dtoa_r+0x5b2>
 8021fd2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8021fd4:	4f16      	ldr	r7, [pc, #88]	@ (8022030 <_dtoa_r+0xaa8>)
 8021fd6:	b11b      	cbz	r3, 8021fe0 <_dtoa_r+0xa58>
 8021fd8:	f107 0308 	add.w	r3, r7, #8
 8021fdc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8021fde:	6013      	str	r3, [r2, #0]
 8021fe0:	4638      	mov	r0, r7
 8021fe2:	b011      	add	sp, #68	@ 0x44
 8021fe4:	ecbd 8b02 	vpop	{d8}
 8021fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021fec:	9b07      	ldr	r3, [sp, #28]
 8021fee:	2b01      	cmp	r3, #1
 8021ff0:	f77f ae36 	ble.w	8021c60 <_dtoa_r+0x6d8>
 8021ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021ff6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8021ff8:	2001      	movs	r0, #1
 8021ffa:	e656      	b.n	8021caa <_dtoa_r+0x722>
 8021ffc:	f1bb 0f00 	cmp.w	fp, #0
 8022000:	f77f aed7 	ble.w	8021db2 <_dtoa_r+0x82a>
 8022004:	463e      	mov	r6, r7
 8022006:	9801      	ldr	r0, [sp, #4]
 8022008:	4621      	mov	r1, r4
 802200a:	f7ff fa34 	bl	8021476 <quorem>
 802200e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8022012:	f806 ab01 	strb.w	sl, [r6], #1
 8022016:	1bf2      	subs	r2, r6, r7
 8022018:	4593      	cmp	fp, r2
 802201a:	ddb4      	ble.n	8021f86 <_dtoa_r+0x9fe>
 802201c:	9901      	ldr	r1, [sp, #4]
 802201e:	2300      	movs	r3, #0
 8022020:	220a      	movs	r2, #10
 8022022:	4648      	mov	r0, r9
 8022024:	f000 fa14 	bl	8022450 <__multadd>
 8022028:	9001      	str	r0, [sp, #4]
 802202a:	e7ec      	b.n	8022006 <_dtoa_r+0xa7e>
 802202c:	08023a14 	.word	0x08023a14
 8022030:	08023998 	.word	0x08023998

08022034 <_free_r>:
 8022034:	b538      	push	{r3, r4, r5, lr}
 8022036:	4605      	mov	r5, r0
 8022038:	2900      	cmp	r1, #0
 802203a:	d041      	beq.n	80220c0 <_free_r+0x8c>
 802203c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022040:	1f0c      	subs	r4, r1, #4
 8022042:	2b00      	cmp	r3, #0
 8022044:	bfb8      	it	lt
 8022046:	18e4      	addlt	r4, r4, r3
 8022048:	f000 f994 	bl	8022374 <__malloc_lock>
 802204c:	4a1d      	ldr	r2, [pc, #116]	@ (80220c4 <_free_r+0x90>)
 802204e:	6813      	ldr	r3, [r2, #0]
 8022050:	b933      	cbnz	r3, 8022060 <_free_r+0x2c>
 8022052:	6063      	str	r3, [r4, #4]
 8022054:	6014      	str	r4, [r2, #0]
 8022056:	4628      	mov	r0, r5
 8022058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802205c:	f000 b990 	b.w	8022380 <__malloc_unlock>
 8022060:	42a3      	cmp	r3, r4
 8022062:	d908      	bls.n	8022076 <_free_r+0x42>
 8022064:	6820      	ldr	r0, [r4, #0]
 8022066:	1821      	adds	r1, r4, r0
 8022068:	428b      	cmp	r3, r1
 802206a:	bf01      	itttt	eq
 802206c:	6819      	ldreq	r1, [r3, #0]
 802206e:	685b      	ldreq	r3, [r3, #4]
 8022070:	1809      	addeq	r1, r1, r0
 8022072:	6021      	streq	r1, [r4, #0]
 8022074:	e7ed      	b.n	8022052 <_free_r+0x1e>
 8022076:	461a      	mov	r2, r3
 8022078:	685b      	ldr	r3, [r3, #4]
 802207a:	b10b      	cbz	r3, 8022080 <_free_r+0x4c>
 802207c:	42a3      	cmp	r3, r4
 802207e:	d9fa      	bls.n	8022076 <_free_r+0x42>
 8022080:	6811      	ldr	r1, [r2, #0]
 8022082:	1850      	adds	r0, r2, r1
 8022084:	42a0      	cmp	r0, r4
 8022086:	d10b      	bne.n	80220a0 <_free_r+0x6c>
 8022088:	6820      	ldr	r0, [r4, #0]
 802208a:	4401      	add	r1, r0
 802208c:	1850      	adds	r0, r2, r1
 802208e:	4283      	cmp	r3, r0
 8022090:	6011      	str	r1, [r2, #0]
 8022092:	d1e0      	bne.n	8022056 <_free_r+0x22>
 8022094:	6818      	ldr	r0, [r3, #0]
 8022096:	685b      	ldr	r3, [r3, #4]
 8022098:	6053      	str	r3, [r2, #4]
 802209a:	4408      	add	r0, r1
 802209c:	6010      	str	r0, [r2, #0]
 802209e:	e7da      	b.n	8022056 <_free_r+0x22>
 80220a0:	d902      	bls.n	80220a8 <_free_r+0x74>
 80220a2:	230c      	movs	r3, #12
 80220a4:	602b      	str	r3, [r5, #0]
 80220a6:	e7d6      	b.n	8022056 <_free_r+0x22>
 80220a8:	6820      	ldr	r0, [r4, #0]
 80220aa:	1821      	adds	r1, r4, r0
 80220ac:	428b      	cmp	r3, r1
 80220ae:	bf04      	itt	eq
 80220b0:	6819      	ldreq	r1, [r3, #0]
 80220b2:	685b      	ldreq	r3, [r3, #4]
 80220b4:	6063      	str	r3, [r4, #4]
 80220b6:	bf04      	itt	eq
 80220b8:	1809      	addeq	r1, r1, r0
 80220ba:	6021      	streq	r1, [r4, #0]
 80220bc:	6054      	str	r4, [r2, #4]
 80220be:	e7ca      	b.n	8022056 <_free_r+0x22>
 80220c0:	bd38      	pop	{r3, r4, r5, pc}
 80220c2:	bf00      	nop
 80220c4:	2401e4b4 	.word	0x2401e4b4

080220c8 <malloc>:
 80220c8:	4b02      	ldr	r3, [pc, #8]	@ (80220d4 <malloc+0xc>)
 80220ca:	4601      	mov	r1, r0
 80220cc:	6818      	ldr	r0, [r3, #0]
 80220ce:	f000 b825 	b.w	802211c <_malloc_r>
 80220d2:	bf00      	nop
 80220d4:	24000068 	.word	0x24000068

080220d8 <sbrk_aligned>:
 80220d8:	b570      	push	{r4, r5, r6, lr}
 80220da:	4e0f      	ldr	r6, [pc, #60]	@ (8022118 <sbrk_aligned+0x40>)
 80220dc:	460c      	mov	r4, r1
 80220de:	6831      	ldr	r1, [r6, #0]
 80220e0:	4605      	mov	r5, r0
 80220e2:	b911      	cbnz	r1, 80220ea <sbrk_aligned+0x12>
 80220e4:	f000 fd4c 	bl	8022b80 <_sbrk_r>
 80220e8:	6030      	str	r0, [r6, #0]
 80220ea:	4621      	mov	r1, r4
 80220ec:	4628      	mov	r0, r5
 80220ee:	f000 fd47 	bl	8022b80 <_sbrk_r>
 80220f2:	1c43      	adds	r3, r0, #1
 80220f4:	d103      	bne.n	80220fe <sbrk_aligned+0x26>
 80220f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80220fa:	4620      	mov	r0, r4
 80220fc:	bd70      	pop	{r4, r5, r6, pc}
 80220fe:	1cc4      	adds	r4, r0, #3
 8022100:	f024 0403 	bic.w	r4, r4, #3
 8022104:	42a0      	cmp	r0, r4
 8022106:	d0f8      	beq.n	80220fa <sbrk_aligned+0x22>
 8022108:	1a21      	subs	r1, r4, r0
 802210a:	4628      	mov	r0, r5
 802210c:	f000 fd38 	bl	8022b80 <_sbrk_r>
 8022110:	3001      	adds	r0, #1
 8022112:	d1f2      	bne.n	80220fa <sbrk_aligned+0x22>
 8022114:	e7ef      	b.n	80220f6 <sbrk_aligned+0x1e>
 8022116:	bf00      	nop
 8022118:	2401e4b0 	.word	0x2401e4b0

0802211c <_malloc_r>:
 802211c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022120:	1ccd      	adds	r5, r1, #3
 8022122:	f025 0503 	bic.w	r5, r5, #3
 8022126:	3508      	adds	r5, #8
 8022128:	2d0c      	cmp	r5, #12
 802212a:	bf38      	it	cc
 802212c:	250c      	movcc	r5, #12
 802212e:	2d00      	cmp	r5, #0
 8022130:	4606      	mov	r6, r0
 8022132:	db01      	blt.n	8022138 <_malloc_r+0x1c>
 8022134:	42a9      	cmp	r1, r5
 8022136:	d904      	bls.n	8022142 <_malloc_r+0x26>
 8022138:	230c      	movs	r3, #12
 802213a:	6033      	str	r3, [r6, #0]
 802213c:	2000      	movs	r0, #0
 802213e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022142:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022218 <_malloc_r+0xfc>
 8022146:	f000 f915 	bl	8022374 <__malloc_lock>
 802214a:	f8d8 3000 	ldr.w	r3, [r8]
 802214e:	461c      	mov	r4, r3
 8022150:	bb44      	cbnz	r4, 80221a4 <_malloc_r+0x88>
 8022152:	4629      	mov	r1, r5
 8022154:	4630      	mov	r0, r6
 8022156:	f7ff ffbf 	bl	80220d8 <sbrk_aligned>
 802215a:	1c43      	adds	r3, r0, #1
 802215c:	4604      	mov	r4, r0
 802215e:	d158      	bne.n	8022212 <_malloc_r+0xf6>
 8022160:	f8d8 4000 	ldr.w	r4, [r8]
 8022164:	4627      	mov	r7, r4
 8022166:	2f00      	cmp	r7, #0
 8022168:	d143      	bne.n	80221f2 <_malloc_r+0xd6>
 802216a:	2c00      	cmp	r4, #0
 802216c:	d04b      	beq.n	8022206 <_malloc_r+0xea>
 802216e:	6823      	ldr	r3, [r4, #0]
 8022170:	4639      	mov	r1, r7
 8022172:	4630      	mov	r0, r6
 8022174:	eb04 0903 	add.w	r9, r4, r3
 8022178:	f000 fd02 	bl	8022b80 <_sbrk_r>
 802217c:	4581      	cmp	r9, r0
 802217e:	d142      	bne.n	8022206 <_malloc_r+0xea>
 8022180:	6821      	ldr	r1, [r4, #0]
 8022182:	1a6d      	subs	r5, r5, r1
 8022184:	4629      	mov	r1, r5
 8022186:	4630      	mov	r0, r6
 8022188:	f7ff ffa6 	bl	80220d8 <sbrk_aligned>
 802218c:	3001      	adds	r0, #1
 802218e:	d03a      	beq.n	8022206 <_malloc_r+0xea>
 8022190:	6823      	ldr	r3, [r4, #0]
 8022192:	442b      	add	r3, r5
 8022194:	6023      	str	r3, [r4, #0]
 8022196:	f8d8 3000 	ldr.w	r3, [r8]
 802219a:	685a      	ldr	r2, [r3, #4]
 802219c:	bb62      	cbnz	r2, 80221f8 <_malloc_r+0xdc>
 802219e:	f8c8 7000 	str.w	r7, [r8]
 80221a2:	e00f      	b.n	80221c4 <_malloc_r+0xa8>
 80221a4:	6822      	ldr	r2, [r4, #0]
 80221a6:	1b52      	subs	r2, r2, r5
 80221a8:	d420      	bmi.n	80221ec <_malloc_r+0xd0>
 80221aa:	2a0b      	cmp	r2, #11
 80221ac:	d917      	bls.n	80221de <_malloc_r+0xc2>
 80221ae:	1961      	adds	r1, r4, r5
 80221b0:	42a3      	cmp	r3, r4
 80221b2:	6025      	str	r5, [r4, #0]
 80221b4:	bf18      	it	ne
 80221b6:	6059      	strne	r1, [r3, #4]
 80221b8:	6863      	ldr	r3, [r4, #4]
 80221ba:	bf08      	it	eq
 80221bc:	f8c8 1000 	streq.w	r1, [r8]
 80221c0:	5162      	str	r2, [r4, r5]
 80221c2:	604b      	str	r3, [r1, #4]
 80221c4:	4630      	mov	r0, r6
 80221c6:	f000 f8db 	bl	8022380 <__malloc_unlock>
 80221ca:	f104 000b 	add.w	r0, r4, #11
 80221ce:	1d23      	adds	r3, r4, #4
 80221d0:	f020 0007 	bic.w	r0, r0, #7
 80221d4:	1ac2      	subs	r2, r0, r3
 80221d6:	bf1c      	itt	ne
 80221d8:	1a1b      	subne	r3, r3, r0
 80221da:	50a3      	strne	r3, [r4, r2]
 80221dc:	e7af      	b.n	802213e <_malloc_r+0x22>
 80221de:	6862      	ldr	r2, [r4, #4]
 80221e0:	42a3      	cmp	r3, r4
 80221e2:	bf0c      	ite	eq
 80221e4:	f8c8 2000 	streq.w	r2, [r8]
 80221e8:	605a      	strne	r2, [r3, #4]
 80221ea:	e7eb      	b.n	80221c4 <_malloc_r+0xa8>
 80221ec:	4623      	mov	r3, r4
 80221ee:	6864      	ldr	r4, [r4, #4]
 80221f0:	e7ae      	b.n	8022150 <_malloc_r+0x34>
 80221f2:	463c      	mov	r4, r7
 80221f4:	687f      	ldr	r7, [r7, #4]
 80221f6:	e7b6      	b.n	8022166 <_malloc_r+0x4a>
 80221f8:	461a      	mov	r2, r3
 80221fa:	685b      	ldr	r3, [r3, #4]
 80221fc:	42a3      	cmp	r3, r4
 80221fe:	d1fb      	bne.n	80221f8 <_malloc_r+0xdc>
 8022200:	2300      	movs	r3, #0
 8022202:	6053      	str	r3, [r2, #4]
 8022204:	e7de      	b.n	80221c4 <_malloc_r+0xa8>
 8022206:	230c      	movs	r3, #12
 8022208:	6033      	str	r3, [r6, #0]
 802220a:	4630      	mov	r0, r6
 802220c:	f000 f8b8 	bl	8022380 <__malloc_unlock>
 8022210:	e794      	b.n	802213c <_malloc_r+0x20>
 8022212:	6005      	str	r5, [r0, #0]
 8022214:	e7d6      	b.n	80221c4 <_malloc_r+0xa8>
 8022216:	bf00      	nop
 8022218:	2401e4b4 	.word	0x2401e4b4

0802221c <__sflush_r>:
 802221c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022224:	0716      	lsls	r6, r2, #28
 8022226:	4605      	mov	r5, r0
 8022228:	460c      	mov	r4, r1
 802222a:	d454      	bmi.n	80222d6 <__sflush_r+0xba>
 802222c:	684b      	ldr	r3, [r1, #4]
 802222e:	2b00      	cmp	r3, #0
 8022230:	dc02      	bgt.n	8022238 <__sflush_r+0x1c>
 8022232:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022234:	2b00      	cmp	r3, #0
 8022236:	dd48      	ble.n	80222ca <__sflush_r+0xae>
 8022238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802223a:	2e00      	cmp	r6, #0
 802223c:	d045      	beq.n	80222ca <__sflush_r+0xae>
 802223e:	2300      	movs	r3, #0
 8022240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022244:	682f      	ldr	r7, [r5, #0]
 8022246:	6a21      	ldr	r1, [r4, #32]
 8022248:	602b      	str	r3, [r5, #0]
 802224a:	d030      	beq.n	80222ae <__sflush_r+0x92>
 802224c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 802224e:	89a3      	ldrh	r3, [r4, #12]
 8022250:	0759      	lsls	r1, r3, #29
 8022252:	d505      	bpl.n	8022260 <__sflush_r+0x44>
 8022254:	6863      	ldr	r3, [r4, #4]
 8022256:	1ad2      	subs	r2, r2, r3
 8022258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802225a:	b10b      	cbz	r3, 8022260 <__sflush_r+0x44>
 802225c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802225e:	1ad2      	subs	r2, r2, r3
 8022260:	2300      	movs	r3, #0
 8022262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022264:	6a21      	ldr	r1, [r4, #32]
 8022266:	4628      	mov	r0, r5
 8022268:	47b0      	blx	r6
 802226a:	1c43      	adds	r3, r0, #1
 802226c:	89a3      	ldrh	r3, [r4, #12]
 802226e:	d106      	bne.n	802227e <__sflush_r+0x62>
 8022270:	6829      	ldr	r1, [r5, #0]
 8022272:	291d      	cmp	r1, #29
 8022274:	d82b      	bhi.n	80222ce <__sflush_r+0xb2>
 8022276:	4a2a      	ldr	r2, [pc, #168]	@ (8022320 <__sflush_r+0x104>)
 8022278:	410a      	asrs	r2, r1
 802227a:	07d6      	lsls	r6, r2, #31
 802227c:	d427      	bmi.n	80222ce <__sflush_r+0xb2>
 802227e:	2200      	movs	r2, #0
 8022280:	6062      	str	r2, [r4, #4]
 8022282:	04d9      	lsls	r1, r3, #19
 8022284:	6922      	ldr	r2, [r4, #16]
 8022286:	6022      	str	r2, [r4, #0]
 8022288:	d504      	bpl.n	8022294 <__sflush_r+0x78>
 802228a:	1c42      	adds	r2, r0, #1
 802228c:	d101      	bne.n	8022292 <__sflush_r+0x76>
 802228e:	682b      	ldr	r3, [r5, #0]
 8022290:	b903      	cbnz	r3, 8022294 <__sflush_r+0x78>
 8022292:	6560      	str	r0, [r4, #84]	@ 0x54
 8022294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022296:	602f      	str	r7, [r5, #0]
 8022298:	b1b9      	cbz	r1, 80222ca <__sflush_r+0xae>
 802229a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802229e:	4299      	cmp	r1, r3
 80222a0:	d002      	beq.n	80222a8 <__sflush_r+0x8c>
 80222a2:	4628      	mov	r0, r5
 80222a4:	f7ff fec6 	bl	8022034 <_free_r>
 80222a8:	2300      	movs	r3, #0
 80222aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80222ac:	e00d      	b.n	80222ca <__sflush_r+0xae>
 80222ae:	2301      	movs	r3, #1
 80222b0:	4628      	mov	r0, r5
 80222b2:	47b0      	blx	r6
 80222b4:	4602      	mov	r2, r0
 80222b6:	1c50      	adds	r0, r2, #1
 80222b8:	d1c9      	bne.n	802224e <__sflush_r+0x32>
 80222ba:	682b      	ldr	r3, [r5, #0]
 80222bc:	2b00      	cmp	r3, #0
 80222be:	d0c6      	beq.n	802224e <__sflush_r+0x32>
 80222c0:	2b1d      	cmp	r3, #29
 80222c2:	d001      	beq.n	80222c8 <__sflush_r+0xac>
 80222c4:	2b16      	cmp	r3, #22
 80222c6:	d11e      	bne.n	8022306 <__sflush_r+0xea>
 80222c8:	602f      	str	r7, [r5, #0]
 80222ca:	2000      	movs	r0, #0
 80222cc:	e022      	b.n	8022314 <__sflush_r+0xf8>
 80222ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80222d2:	b21b      	sxth	r3, r3
 80222d4:	e01b      	b.n	802230e <__sflush_r+0xf2>
 80222d6:	690f      	ldr	r7, [r1, #16]
 80222d8:	2f00      	cmp	r7, #0
 80222da:	d0f6      	beq.n	80222ca <__sflush_r+0xae>
 80222dc:	0793      	lsls	r3, r2, #30
 80222de:	680e      	ldr	r6, [r1, #0]
 80222e0:	bf08      	it	eq
 80222e2:	694b      	ldreq	r3, [r1, #20]
 80222e4:	600f      	str	r7, [r1, #0]
 80222e6:	bf18      	it	ne
 80222e8:	2300      	movne	r3, #0
 80222ea:	eba6 0807 	sub.w	r8, r6, r7
 80222ee:	608b      	str	r3, [r1, #8]
 80222f0:	f1b8 0f00 	cmp.w	r8, #0
 80222f4:	dde9      	ble.n	80222ca <__sflush_r+0xae>
 80222f6:	6a21      	ldr	r1, [r4, #32]
 80222f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80222fa:	4643      	mov	r3, r8
 80222fc:	463a      	mov	r2, r7
 80222fe:	4628      	mov	r0, r5
 8022300:	47b0      	blx	r6
 8022302:	2800      	cmp	r0, #0
 8022304:	dc08      	bgt.n	8022318 <__sflush_r+0xfc>
 8022306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802230a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802230e:	81a3      	strh	r3, [r4, #12]
 8022310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022318:	4407      	add	r7, r0
 802231a:	eba8 0800 	sub.w	r8, r8, r0
 802231e:	e7e7      	b.n	80222f0 <__sflush_r+0xd4>
 8022320:	dfbffffe 	.word	0xdfbffffe

08022324 <_fflush_r>:
 8022324:	b538      	push	{r3, r4, r5, lr}
 8022326:	690b      	ldr	r3, [r1, #16]
 8022328:	4605      	mov	r5, r0
 802232a:	460c      	mov	r4, r1
 802232c:	b913      	cbnz	r3, 8022334 <_fflush_r+0x10>
 802232e:	2500      	movs	r5, #0
 8022330:	4628      	mov	r0, r5
 8022332:	bd38      	pop	{r3, r4, r5, pc}
 8022334:	b118      	cbz	r0, 802233e <_fflush_r+0x1a>
 8022336:	6a03      	ldr	r3, [r0, #32]
 8022338:	b90b      	cbnz	r3, 802233e <_fflush_r+0x1a>
 802233a:	f7fe ffc9 	bl	80212d0 <__sinit>
 802233e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022342:	2b00      	cmp	r3, #0
 8022344:	d0f3      	beq.n	802232e <_fflush_r+0xa>
 8022346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8022348:	07d0      	lsls	r0, r2, #31
 802234a:	d404      	bmi.n	8022356 <_fflush_r+0x32>
 802234c:	0599      	lsls	r1, r3, #22
 802234e:	d402      	bmi.n	8022356 <_fflush_r+0x32>
 8022350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8022352:	f7ff f880 	bl	8021456 <__retarget_lock_acquire_recursive>
 8022356:	4628      	mov	r0, r5
 8022358:	4621      	mov	r1, r4
 802235a:	f7ff ff5f 	bl	802221c <__sflush_r>
 802235e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8022360:	07da      	lsls	r2, r3, #31
 8022362:	4605      	mov	r5, r0
 8022364:	d4e4      	bmi.n	8022330 <_fflush_r+0xc>
 8022366:	89a3      	ldrh	r3, [r4, #12]
 8022368:	059b      	lsls	r3, r3, #22
 802236a:	d4e1      	bmi.n	8022330 <_fflush_r+0xc>
 802236c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802236e:	f7ff f873 	bl	8021458 <__retarget_lock_release_recursive>
 8022372:	e7dd      	b.n	8022330 <_fflush_r+0xc>

08022374 <__malloc_lock>:
 8022374:	4801      	ldr	r0, [pc, #4]	@ (802237c <__malloc_lock+0x8>)
 8022376:	f7ff b86e 	b.w	8021456 <__retarget_lock_acquire_recursive>
 802237a:	bf00      	nop
 802237c:	2401e4ac 	.word	0x2401e4ac

08022380 <__malloc_unlock>:
 8022380:	4801      	ldr	r0, [pc, #4]	@ (8022388 <__malloc_unlock+0x8>)
 8022382:	f7ff b869 	b.w	8021458 <__retarget_lock_release_recursive>
 8022386:	bf00      	nop
 8022388:	2401e4ac 	.word	0x2401e4ac

0802238c <_Balloc>:
 802238c:	b570      	push	{r4, r5, r6, lr}
 802238e:	69c6      	ldr	r6, [r0, #28]
 8022390:	4604      	mov	r4, r0
 8022392:	460d      	mov	r5, r1
 8022394:	b976      	cbnz	r6, 80223b4 <_Balloc+0x28>
 8022396:	2010      	movs	r0, #16
 8022398:	f7ff fe96 	bl	80220c8 <malloc>
 802239c:	4602      	mov	r2, r0
 802239e:	61e0      	str	r0, [r4, #28]
 80223a0:	b920      	cbnz	r0, 80223ac <_Balloc+0x20>
 80223a2:	4b18      	ldr	r3, [pc, #96]	@ (8022404 <_Balloc+0x78>)
 80223a4:	4818      	ldr	r0, [pc, #96]	@ (8022408 <_Balloc+0x7c>)
 80223a6:	216b      	movs	r1, #107	@ 0x6b
 80223a8:	f000 fc0c 	bl	8022bc4 <__assert_func>
 80223ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80223b0:	6006      	str	r6, [r0, #0]
 80223b2:	60c6      	str	r6, [r0, #12]
 80223b4:	69e6      	ldr	r6, [r4, #28]
 80223b6:	68f3      	ldr	r3, [r6, #12]
 80223b8:	b183      	cbz	r3, 80223dc <_Balloc+0x50>
 80223ba:	69e3      	ldr	r3, [r4, #28]
 80223bc:	68db      	ldr	r3, [r3, #12]
 80223be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80223c2:	b9b8      	cbnz	r0, 80223f4 <_Balloc+0x68>
 80223c4:	2101      	movs	r1, #1
 80223c6:	fa01 f605 	lsl.w	r6, r1, r5
 80223ca:	1d72      	adds	r2, r6, #5
 80223cc:	0092      	lsls	r2, r2, #2
 80223ce:	4620      	mov	r0, r4
 80223d0:	f000 fc16 	bl	8022c00 <_calloc_r>
 80223d4:	b160      	cbz	r0, 80223f0 <_Balloc+0x64>
 80223d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80223da:	e00e      	b.n	80223fa <_Balloc+0x6e>
 80223dc:	2221      	movs	r2, #33	@ 0x21
 80223de:	2104      	movs	r1, #4
 80223e0:	4620      	mov	r0, r4
 80223e2:	f000 fc0d 	bl	8022c00 <_calloc_r>
 80223e6:	69e3      	ldr	r3, [r4, #28]
 80223e8:	60f0      	str	r0, [r6, #12]
 80223ea:	68db      	ldr	r3, [r3, #12]
 80223ec:	2b00      	cmp	r3, #0
 80223ee:	d1e4      	bne.n	80223ba <_Balloc+0x2e>
 80223f0:	2000      	movs	r0, #0
 80223f2:	bd70      	pop	{r4, r5, r6, pc}
 80223f4:	6802      	ldr	r2, [r0, #0]
 80223f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80223fa:	2300      	movs	r3, #0
 80223fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8022400:	e7f7      	b.n	80223f2 <_Balloc+0x66>
 8022402:	bf00      	nop
 8022404:	080239a5 	.word	0x080239a5
 8022408:	08023a25 	.word	0x08023a25

0802240c <_Bfree>:
 802240c:	b570      	push	{r4, r5, r6, lr}
 802240e:	69c6      	ldr	r6, [r0, #28]
 8022410:	4605      	mov	r5, r0
 8022412:	460c      	mov	r4, r1
 8022414:	b976      	cbnz	r6, 8022434 <_Bfree+0x28>
 8022416:	2010      	movs	r0, #16
 8022418:	f7ff fe56 	bl	80220c8 <malloc>
 802241c:	4602      	mov	r2, r0
 802241e:	61e8      	str	r0, [r5, #28]
 8022420:	b920      	cbnz	r0, 802242c <_Bfree+0x20>
 8022422:	4b09      	ldr	r3, [pc, #36]	@ (8022448 <_Bfree+0x3c>)
 8022424:	4809      	ldr	r0, [pc, #36]	@ (802244c <_Bfree+0x40>)
 8022426:	218f      	movs	r1, #143	@ 0x8f
 8022428:	f000 fbcc 	bl	8022bc4 <__assert_func>
 802242c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022430:	6006      	str	r6, [r0, #0]
 8022432:	60c6      	str	r6, [r0, #12]
 8022434:	b13c      	cbz	r4, 8022446 <_Bfree+0x3a>
 8022436:	69eb      	ldr	r3, [r5, #28]
 8022438:	6862      	ldr	r2, [r4, #4]
 802243a:	68db      	ldr	r3, [r3, #12]
 802243c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022440:	6021      	str	r1, [r4, #0]
 8022442:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8022446:	bd70      	pop	{r4, r5, r6, pc}
 8022448:	080239a5 	.word	0x080239a5
 802244c:	08023a25 	.word	0x08023a25

08022450 <__multadd>:
 8022450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022454:	690d      	ldr	r5, [r1, #16]
 8022456:	4607      	mov	r7, r0
 8022458:	460c      	mov	r4, r1
 802245a:	461e      	mov	r6, r3
 802245c:	f101 0c14 	add.w	ip, r1, #20
 8022460:	2000      	movs	r0, #0
 8022462:	f8dc 3000 	ldr.w	r3, [ip]
 8022466:	b299      	uxth	r1, r3
 8022468:	fb02 6101 	mla	r1, r2, r1, r6
 802246c:	0c1e      	lsrs	r6, r3, #16
 802246e:	0c0b      	lsrs	r3, r1, #16
 8022470:	fb02 3306 	mla	r3, r2, r6, r3
 8022474:	b289      	uxth	r1, r1
 8022476:	3001      	adds	r0, #1
 8022478:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802247c:	4285      	cmp	r5, r0
 802247e:	f84c 1b04 	str.w	r1, [ip], #4
 8022482:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8022486:	dcec      	bgt.n	8022462 <__multadd+0x12>
 8022488:	b30e      	cbz	r6, 80224ce <__multadd+0x7e>
 802248a:	68a3      	ldr	r3, [r4, #8]
 802248c:	42ab      	cmp	r3, r5
 802248e:	dc19      	bgt.n	80224c4 <__multadd+0x74>
 8022490:	6861      	ldr	r1, [r4, #4]
 8022492:	4638      	mov	r0, r7
 8022494:	3101      	adds	r1, #1
 8022496:	f7ff ff79 	bl	802238c <_Balloc>
 802249a:	4680      	mov	r8, r0
 802249c:	b928      	cbnz	r0, 80224aa <__multadd+0x5a>
 802249e:	4602      	mov	r2, r0
 80224a0:	4b0c      	ldr	r3, [pc, #48]	@ (80224d4 <__multadd+0x84>)
 80224a2:	480d      	ldr	r0, [pc, #52]	@ (80224d8 <__multadd+0x88>)
 80224a4:	21ba      	movs	r1, #186	@ 0xba
 80224a6:	f000 fb8d 	bl	8022bc4 <__assert_func>
 80224aa:	6922      	ldr	r2, [r4, #16]
 80224ac:	3202      	adds	r2, #2
 80224ae:	f104 010c 	add.w	r1, r4, #12
 80224b2:	0092      	lsls	r2, r2, #2
 80224b4:	300c      	adds	r0, #12
 80224b6:	f7fe ffd0 	bl	802145a <memcpy>
 80224ba:	4621      	mov	r1, r4
 80224bc:	4638      	mov	r0, r7
 80224be:	f7ff ffa5 	bl	802240c <_Bfree>
 80224c2:	4644      	mov	r4, r8
 80224c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80224c8:	3501      	adds	r5, #1
 80224ca:	615e      	str	r6, [r3, #20]
 80224cc:	6125      	str	r5, [r4, #16]
 80224ce:	4620      	mov	r0, r4
 80224d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224d4:	08023a14 	.word	0x08023a14
 80224d8:	08023a25 	.word	0x08023a25

080224dc <__hi0bits>:
 80224dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80224e0:	4603      	mov	r3, r0
 80224e2:	bf36      	itet	cc
 80224e4:	0403      	lslcc	r3, r0, #16
 80224e6:	2000      	movcs	r0, #0
 80224e8:	2010      	movcc	r0, #16
 80224ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80224ee:	bf3c      	itt	cc
 80224f0:	021b      	lslcc	r3, r3, #8
 80224f2:	3008      	addcc	r0, #8
 80224f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80224f8:	bf3c      	itt	cc
 80224fa:	011b      	lslcc	r3, r3, #4
 80224fc:	3004      	addcc	r0, #4
 80224fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8022502:	bf3c      	itt	cc
 8022504:	009b      	lslcc	r3, r3, #2
 8022506:	3002      	addcc	r0, #2
 8022508:	2b00      	cmp	r3, #0
 802250a:	db05      	blt.n	8022518 <__hi0bits+0x3c>
 802250c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8022510:	f100 0001 	add.w	r0, r0, #1
 8022514:	bf08      	it	eq
 8022516:	2020      	moveq	r0, #32
 8022518:	4770      	bx	lr

0802251a <__lo0bits>:
 802251a:	6803      	ldr	r3, [r0, #0]
 802251c:	4602      	mov	r2, r0
 802251e:	f013 0007 	ands.w	r0, r3, #7
 8022522:	d00b      	beq.n	802253c <__lo0bits+0x22>
 8022524:	07d9      	lsls	r1, r3, #31
 8022526:	d421      	bmi.n	802256c <__lo0bits+0x52>
 8022528:	0798      	lsls	r0, r3, #30
 802252a:	bf49      	itett	mi
 802252c:	085b      	lsrmi	r3, r3, #1
 802252e:	089b      	lsrpl	r3, r3, #2
 8022530:	2001      	movmi	r0, #1
 8022532:	6013      	strmi	r3, [r2, #0]
 8022534:	bf5c      	itt	pl
 8022536:	6013      	strpl	r3, [r2, #0]
 8022538:	2002      	movpl	r0, #2
 802253a:	4770      	bx	lr
 802253c:	b299      	uxth	r1, r3
 802253e:	b909      	cbnz	r1, 8022544 <__lo0bits+0x2a>
 8022540:	0c1b      	lsrs	r3, r3, #16
 8022542:	2010      	movs	r0, #16
 8022544:	b2d9      	uxtb	r1, r3
 8022546:	b909      	cbnz	r1, 802254c <__lo0bits+0x32>
 8022548:	3008      	adds	r0, #8
 802254a:	0a1b      	lsrs	r3, r3, #8
 802254c:	0719      	lsls	r1, r3, #28
 802254e:	bf04      	itt	eq
 8022550:	091b      	lsreq	r3, r3, #4
 8022552:	3004      	addeq	r0, #4
 8022554:	0799      	lsls	r1, r3, #30
 8022556:	bf04      	itt	eq
 8022558:	089b      	lsreq	r3, r3, #2
 802255a:	3002      	addeq	r0, #2
 802255c:	07d9      	lsls	r1, r3, #31
 802255e:	d403      	bmi.n	8022568 <__lo0bits+0x4e>
 8022560:	085b      	lsrs	r3, r3, #1
 8022562:	f100 0001 	add.w	r0, r0, #1
 8022566:	d003      	beq.n	8022570 <__lo0bits+0x56>
 8022568:	6013      	str	r3, [r2, #0]
 802256a:	4770      	bx	lr
 802256c:	2000      	movs	r0, #0
 802256e:	4770      	bx	lr
 8022570:	2020      	movs	r0, #32
 8022572:	4770      	bx	lr

08022574 <__i2b>:
 8022574:	b510      	push	{r4, lr}
 8022576:	460c      	mov	r4, r1
 8022578:	2101      	movs	r1, #1
 802257a:	f7ff ff07 	bl	802238c <_Balloc>
 802257e:	4602      	mov	r2, r0
 8022580:	b928      	cbnz	r0, 802258e <__i2b+0x1a>
 8022582:	4b05      	ldr	r3, [pc, #20]	@ (8022598 <__i2b+0x24>)
 8022584:	4805      	ldr	r0, [pc, #20]	@ (802259c <__i2b+0x28>)
 8022586:	f240 1145 	movw	r1, #325	@ 0x145
 802258a:	f000 fb1b 	bl	8022bc4 <__assert_func>
 802258e:	2301      	movs	r3, #1
 8022590:	6144      	str	r4, [r0, #20]
 8022592:	6103      	str	r3, [r0, #16]
 8022594:	bd10      	pop	{r4, pc}
 8022596:	bf00      	nop
 8022598:	08023a14 	.word	0x08023a14
 802259c:	08023a25 	.word	0x08023a25

080225a0 <__multiply>:
 80225a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225a4:	4614      	mov	r4, r2
 80225a6:	690a      	ldr	r2, [r1, #16]
 80225a8:	6923      	ldr	r3, [r4, #16]
 80225aa:	429a      	cmp	r2, r3
 80225ac:	bfa8      	it	ge
 80225ae:	4623      	movge	r3, r4
 80225b0:	460f      	mov	r7, r1
 80225b2:	bfa4      	itt	ge
 80225b4:	460c      	movge	r4, r1
 80225b6:	461f      	movge	r7, r3
 80225b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80225bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80225c0:	68a3      	ldr	r3, [r4, #8]
 80225c2:	6861      	ldr	r1, [r4, #4]
 80225c4:	eb0a 0609 	add.w	r6, sl, r9
 80225c8:	42b3      	cmp	r3, r6
 80225ca:	b085      	sub	sp, #20
 80225cc:	bfb8      	it	lt
 80225ce:	3101      	addlt	r1, #1
 80225d0:	f7ff fedc 	bl	802238c <_Balloc>
 80225d4:	b930      	cbnz	r0, 80225e4 <__multiply+0x44>
 80225d6:	4602      	mov	r2, r0
 80225d8:	4b44      	ldr	r3, [pc, #272]	@ (80226ec <__multiply+0x14c>)
 80225da:	4845      	ldr	r0, [pc, #276]	@ (80226f0 <__multiply+0x150>)
 80225dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80225e0:	f000 faf0 	bl	8022bc4 <__assert_func>
 80225e4:	f100 0514 	add.w	r5, r0, #20
 80225e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80225ec:	462b      	mov	r3, r5
 80225ee:	2200      	movs	r2, #0
 80225f0:	4543      	cmp	r3, r8
 80225f2:	d321      	bcc.n	8022638 <__multiply+0x98>
 80225f4:	f107 0114 	add.w	r1, r7, #20
 80225f8:	f104 0214 	add.w	r2, r4, #20
 80225fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8022600:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8022604:	9302      	str	r3, [sp, #8]
 8022606:	1b13      	subs	r3, r2, r4
 8022608:	3b15      	subs	r3, #21
 802260a:	f023 0303 	bic.w	r3, r3, #3
 802260e:	3304      	adds	r3, #4
 8022610:	f104 0715 	add.w	r7, r4, #21
 8022614:	42ba      	cmp	r2, r7
 8022616:	bf38      	it	cc
 8022618:	2304      	movcc	r3, #4
 802261a:	9301      	str	r3, [sp, #4]
 802261c:	9b02      	ldr	r3, [sp, #8]
 802261e:	9103      	str	r1, [sp, #12]
 8022620:	428b      	cmp	r3, r1
 8022622:	d80c      	bhi.n	802263e <__multiply+0x9e>
 8022624:	2e00      	cmp	r6, #0
 8022626:	dd03      	ble.n	8022630 <__multiply+0x90>
 8022628:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802262c:	2b00      	cmp	r3, #0
 802262e:	d05b      	beq.n	80226e8 <__multiply+0x148>
 8022630:	6106      	str	r6, [r0, #16]
 8022632:	b005      	add	sp, #20
 8022634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022638:	f843 2b04 	str.w	r2, [r3], #4
 802263c:	e7d8      	b.n	80225f0 <__multiply+0x50>
 802263e:	f8b1 a000 	ldrh.w	sl, [r1]
 8022642:	f1ba 0f00 	cmp.w	sl, #0
 8022646:	d024      	beq.n	8022692 <__multiply+0xf2>
 8022648:	f104 0e14 	add.w	lr, r4, #20
 802264c:	46a9      	mov	r9, r5
 802264e:	f04f 0c00 	mov.w	ip, #0
 8022652:	f85e 7b04 	ldr.w	r7, [lr], #4
 8022656:	f8d9 3000 	ldr.w	r3, [r9]
 802265a:	fa1f fb87 	uxth.w	fp, r7
 802265e:	b29b      	uxth	r3, r3
 8022660:	fb0a 330b 	mla	r3, sl, fp, r3
 8022664:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8022668:	f8d9 7000 	ldr.w	r7, [r9]
 802266c:	4463      	add	r3, ip
 802266e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8022672:	fb0a c70b 	mla	r7, sl, fp, ip
 8022676:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 802267a:	b29b      	uxth	r3, r3
 802267c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8022680:	4572      	cmp	r2, lr
 8022682:	f849 3b04 	str.w	r3, [r9], #4
 8022686:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 802268a:	d8e2      	bhi.n	8022652 <__multiply+0xb2>
 802268c:	9b01      	ldr	r3, [sp, #4]
 802268e:	f845 c003 	str.w	ip, [r5, r3]
 8022692:	9b03      	ldr	r3, [sp, #12]
 8022694:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8022698:	3104      	adds	r1, #4
 802269a:	f1b9 0f00 	cmp.w	r9, #0
 802269e:	d021      	beq.n	80226e4 <__multiply+0x144>
 80226a0:	682b      	ldr	r3, [r5, #0]
 80226a2:	f104 0c14 	add.w	ip, r4, #20
 80226a6:	46ae      	mov	lr, r5
 80226a8:	f04f 0a00 	mov.w	sl, #0
 80226ac:	f8bc b000 	ldrh.w	fp, [ip]
 80226b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80226b4:	fb09 770b 	mla	r7, r9, fp, r7
 80226b8:	4457      	add	r7, sl
 80226ba:	b29b      	uxth	r3, r3
 80226bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80226c0:	f84e 3b04 	str.w	r3, [lr], #4
 80226c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80226c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80226cc:	f8be 3000 	ldrh.w	r3, [lr]
 80226d0:	fb09 330a 	mla	r3, r9, sl, r3
 80226d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80226d8:	4562      	cmp	r2, ip
 80226da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80226de:	d8e5      	bhi.n	80226ac <__multiply+0x10c>
 80226e0:	9f01      	ldr	r7, [sp, #4]
 80226e2:	51eb      	str	r3, [r5, r7]
 80226e4:	3504      	adds	r5, #4
 80226e6:	e799      	b.n	802261c <__multiply+0x7c>
 80226e8:	3e01      	subs	r6, #1
 80226ea:	e79b      	b.n	8022624 <__multiply+0x84>
 80226ec:	08023a14 	.word	0x08023a14
 80226f0:	08023a25 	.word	0x08023a25

080226f4 <__pow5mult>:
 80226f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80226f8:	4615      	mov	r5, r2
 80226fa:	f012 0203 	ands.w	r2, r2, #3
 80226fe:	4607      	mov	r7, r0
 8022700:	460e      	mov	r6, r1
 8022702:	d007      	beq.n	8022714 <__pow5mult+0x20>
 8022704:	4c25      	ldr	r4, [pc, #148]	@ (802279c <__pow5mult+0xa8>)
 8022706:	3a01      	subs	r2, #1
 8022708:	2300      	movs	r3, #0
 802270a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802270e:	f7ff fe9f 	bl	8022450 <__multadd>
 8022712:	4606      	mov	r6, r0
 8022714:	10ad      	asrs	r5, r5, #2
 8022716:	d03d      	beq.n	8022794 <__pow5mult+0xa0>
 8022718:	69fc      	ldr	r4, [r7, #28]
 802271a:	b97c      	cbnz	r4, 802273c <__pow5mult+0x48>
 802271c:	2010      	movs	r0, #16
 802271e:	f7ff fcd3 	bl	80220c8 <malloc>
 8022722:	4602      	mov	r2, r0
 8022724:	61f8      	str	r0, [r7, #28]
 8022726:	b928      	cbnz	r0, 8022734 <__pow5mult+0x40>
 8022728:	4b1d      	ldr	r3, [pc, #116]	@ (80227a0 <__pow5mult+0xac>)
 802272a:	481e      	ldr	r0, [pc, #120]	@ (80227a4 <__pow5mult+0xb0>)
 802272c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8022730:	f000 fa48 	bl	8022bc4 <__assert_func>
 8022734:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022738:	6004      	str	r4, [r0, #0]
 802273a:	60c4      	str	r4, [r0, #12]
 802273c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8022740:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022744:	b94c      	cbnz	r4, 802275a <__pow5mult+0x66>
 8022746:	f240 2171 	movw	r1, #625	@ 0x271
 802274a:	4638      	mov	r0, r7
 802274c:	f7ff ff12 	bl	8022574 <__i2b>
 8022750:	2300      	movs	r3, #0
 8022752:	f8c8 0008 	str.w	r0, [r8, #8]
 8022756:	4604      	mov	r4, r0
 8022758:	6003      	str	r3, [r0, #0]
 802275a:	f04f 0900 	mov.w	r9, #0
 802275e:	07eb      	lsls	r3, r5, #31
 8022760:	d50a      	bpl.n	8022778 <__pow5mult+0x84>
 8022762:	4631      	mov	r1, r6
 8022764:	4622      	mov	r2, r4
 8022766:	4638      	mov	r0, r7
 8022768:	f7ff ff1a 	bl	80225a0 <__multiply>
 802276c:	4631      	mov	r1, r6
 802276e:	4680      	mov	r8, r0
 8022770:	4638      	mov	r0, r7
 8022772:	f7ff fe4b 	bl	802240c <_Bfree>
 8022776:	4646      	mov	r6, r8
 8022778:	106d      	asrs	r5, r5, #1
 802277a:	d00b      	beq.n	8022794 <__pow5mult+0xa0>
 802277c:	6820      	ldr	r0, [r4, #0]
 802277e:	b938      	cbnz	r0, 8022790 <__pow5mult+0x9c>
 8022780:	4622      	mov	r2, r4
 8022782:	4621      	mov	r1, r4
 8022784:	4638      	mov	r0, r7
 8022786:	f7ff ff0b 	bl	80225a0 <__multiply>
 802278a:	6020      	str	r0, [r4, #0]
 802278c:	f8c0 9000 	str.w	r9, [r0]
 8022790:	4604      	mov	r4, r0
 8022792:	e7e4      	b.n	802275e <__pow5mult+0x6a>
 8022794:	4630      	mov	r0, r6
 8022796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802279a:	bf00      	nop
 802279c:	08023a80 	.word	0x08023a80
 80227a0:	080239a5 	.word	0x080239a5
 80227a4:	08023a25 	.word	0x08023a25

080227a8 <__lshift>:
 80227a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80227ac:	460c      	mov	r4, r1
 80227ae:	6849      	ldr	r1, [r1, #4]
 80227b0:	6923      	ldr	r3, [r4, #16]
 80227b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80227b6:	68a3      	ldr	r3, [r4, #8]
 80227b8:	4607      	mov	r7, r0
 80227ba:	4691      	mov	r9, r2
 80227bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80227c0:	f108 0601 	add.w	r6, r8, #1
 80227c4:	42b3      	cmp	r3, r6
 80227c6:	db0b      	blt.n	80227e0 <__lshift+0x38>
 80227c8:	4638      	mov	r0, r7
 80227ca:	f7ff fddf 	bl	802238c <_Balloc>
 80227ce:	4605      	mov	r5, r0
 80227d0:	b948      	cbnz	r0, 80227e6 <__lshift+0x3e>
 80227d2:	4602      	mov	r2, r0
 80227d4:	4b28      	ldr	r3, [pc, #160]	@ (8022878 <__lshift+0xd0>)
 80227d6:	4829      	ldr	r0, [pc, #164]	@ (802287c <__lshift+0xd4>)
 80227d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80227dc:	f000 f9f2 	bl	8022bc4 <__assert_func>
 80227e0:	3101      	adds	r1, #1
 80227e2:	005b      	lsls	r3, r3, #1
 80227e4:	e7ee      	b.n	80227c4 <__lshift+0x1c>
 80227e6:	2300      	movs	r3, #0
 80227e8:	f100 0114 	add.w	r1, r0, #20
 80227ec:	f100 0210 	add.w	r2, r0, #16
 80227f0:	4618      	mov	r0, r3
 80227f2:	4553      	cmp	r3, sl
 80227f4:	db33      	blt.n	802285e <__lshift+0xb6>
 80227f6:	6920      	ldr	r0, [r4, #16]
 80227f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80227fc:	f104 0314 	add.w	r3, r4, #20
 8022800:	f019 091f 	ands.w	r9, r9, #31
 8022804:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022808:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802280c:	d02b      	beq.n	8022866 <__lshift+0xbe>
 802280e:	f1c9 0e20 	rsb	lr, r9, #32
 8022812:	468a      	mov	sl, r1
 8022814:	2200      	movs	r2, #0
 8022816:	6818      	ldr	r0, [r3, #0]
 8022818:	fa00 f009 	lsl.w	r0, r0, r9
 802281c:	4310      	orrs	r0, r2
 802281e:	f84a 0b04 	str.w	r0, [sl], #4
 8022822:	f853 2b04 	ldr.w	r2, [r3], #4
 8022826:	459c      	cmp	ip, r3
 8022828:	fa22 f20e 	lsr.w	r2, r2, lr
 802282c:	d8f3      	bhi.n	8022816 <__lshift+0x6e>
 802282e:	ebac 0304 	sub.w	r3, ip, r4
 8022832:	3b15      	subs	r3, #21
 8022834:	f023 0303 	bic.w	r3, r3, #3
 8022838:	3304      	adds	r3, #4
 802283a:	f104 0015 	add.w	r0, r4, #21
 802283e:	4584      	cmp	ip, r0
 8022840:	bf38      	it	cc
 8022842:	2304      	movcc	r3, #4
 8022844:	50ca      	str	r2, [r1, r3]
 8022846:	b10a      	cbz	r2, 802284c <__lshift+0xa4>
 8022848:	f108 0602 	add.w	r6, r8, #2
 802284c:	3e01      	subs	r6, #1
 802284e:	4638      	mov	r0, r7
 8022850:	612e      	str	r6, [r5, #16]
 8022852:	4621      	mov	r1, r4
 8022854:	f7ff fdda 	bl	802240c <_Bfree>
 8022858:	4628      	mov	r0, r5
 802285a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802285e:	f842 0f04 	str.w	r0, [r2, #4]!
 8022862:	3301      	adds	r3, #1
 8022864:	e7c5      	b.n	80227f2 <__lshift+0x4a>
 8022866:	3904      	subs	r1, #4
 8022868:	f853 2b04 	ldr.w	r2, [r3], #4
 802286c:	f841 2f04 	str.w	r2, [r1, #4]!
 8022870:	459c      	cmp	ip, r3
 8022872:	d8f9      	bhi.n	8022868 <__lshift+0xc0>
 8022874:	e7ea      	b.n	802284c <__lshift+0xa4>
 8022876:	bf00      	nop
 8022878:	08023a14 	.word	0x08023a14
 802287c:	08023a25 	.word	0x08023a25

08022880 <__mcmp>:
 8022880:	690a      	ldr	r2, [r1, #16]
 8022882:	4603      	mov	r3, r0
 8022884:	6900      	ldr	r0, [r0, #16]
 8022886:	1a80      	subs	r0, r0, r2
 8022888:	b530      	push	{r4, r5, lr}
 802288a:	d10e      	bne.n	80228aa <__mcmp+0x2a>
 802288c:	3314      	adds	r3, #20
 802288e:	3114      	adds	r1, #20
 8022890:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8022894:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8022898:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802289c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80228a0:	4295      	cmp	r5, r2
 80228a2:	d003      	beq.n	80228ac <__mcmp+0x2c>
 80228a4:	d205      	bcs.n	80228b2 <__mcmp+0x32>
 80228a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80228aa:	bd30      	pop	{r4, r5, pc}
 80228ac:	42a3      	cmp	r3, r4
 80228ae:	d3f3      	bcc.n	8022898 <__mcmp+0x18>
 80228b0:	e7fb      	b.n	80228aa <__mcmp+0x2a>
 80228b2:	2001      	movs	r0, #1
 80228b4:	e7f9      	b.n	80228aa <__mcmp+0x2a>
	...

080228b8 <__mdiff>:
 80228b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228bc:	4689      	mov	r9, r1
 80228be:	4606      	mov	r6, r0
 80228c0:	4611      	mov	r1, r2
 80228c2:	4648      	mov	r0, r9
 80228c4:	4614      	mov	r4, r2
 80228c6:	f7ff ffdb 	bl	8022880 <__mcmp>
 80228ca:	1e05      	subs	r5, r0, #0
 80228cc:	d112      	bne.n	80228f4 <__mdiff+0x3c>
 80228ce:	4629      	mov	r1, r5
 80228d0:	4630      	mov	r0, r6
 80228d2:	f7ff fd5b 	bl	802238c <_Balloc>
 80228d6:	4602      	mov	r2, r0
 80228d8:	b928      	cbnz	r0, 80228e6 <__mdiff+0x2e>
 80228da:	4b3f      	ldr	r3, [pc, #252]	@ (80229d8 <__mdiff+0x120>)
 80228dc:	f240 2137 	movw	r1, #567	@ 0x237
 80228e0:	483e      	ldr	r0, [pc, #248]	@ (80229dc <__mdiff+0x124>)
 80228e2:	f000 f96f 	bl	8022bc4 <__assert_func>
 80228e6:	2301      	movs	r3, #1
 80228e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80228ec:	4610      	mov	r0, r2
 80228ee:	b003      	add	sp, #12
 80228f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228f4:	bfbc      	itt	lt
 80228f6:	464b      	movlt	r3, r9
 80228f8:	46a1      	movlt	r9, r4
 80228fa:	4630      	mov	r0, r6
 80228fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8022900:	bfba      	itte	lt
 8022902:	461c      	movlt	r4, r3
 8022904:	2501      	movlt	r5, #1
 8022906:	2500      	movge	r5, #0
 8022908:	f7ff fd40 	bl	802238c <_Balloc>
 802290c:	4602      	mov	r2, r0
 802290e:	b918      	cbnz	r0, 8022918 <__mdiff+0x60>
 8022910:	4b31      	ldr	r3, [pc, #196]	@ (80229d8 <__mdiff+0x120>)
 8022912:	f240 2145 	movw	r1, #581	@ 0x245
 8022916:	e7e3      	b.n	80228e0 <__mdiff+0x28>
 8022918:	f8d9 7010 	ldr.w	r7, [r9, #16]
 802291c:	6926      	ldr	r6, [r4, #16]
 802291e:	60c5      	str	r5, [r0, #12]
 8022920:	f109 0310 	add.w	r3, r9, #16
 8022924:	f109 0514 	add.w	r5, r9, #20
 8022928:	f104 0e14 	add.w	lr, r4, #20
 802292c:	f100 0b14 	add.w	fp, r0, #20
 8022930:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8022934:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8022938:	9301      	str	r3, [sp, #4]
 802293a:	46d9      	mov	r9, fp
 802293c:	f04f 0c00 	mov.w	ip, #0
 8022940:	9b01      	ldr	r3, [sp, #4]
 8022942:	f85e 0b04 	ldr.w	r0, [lr], #4
 8022946:	f853 af04 	ldr.w	sl, [r3, #4]!
 802294a:	9301      	str	r3, [sp, #4]
 802294c:	fa1f f38a 	uxth.w	r3, sl
 8022950:	4619      	mov	r1, r3
 8022952:	b283      	uxth	r3, r0
 8022954:	1acb      	subs	r3, r1, r3
 8022956:	0c00      	lsrs	r0, r0, #16
 8022958:	4463      	add	r3, ip
 802295a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802295e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8022962:	b29b      	uxth	r3, r3
 8022964:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8022968:	4576      	cmp	r6, lr
 802296a:	f849 3b04 	str.w	r3, [r9], #4
 802296e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8022972:	d8e5      	bhi.n	8022940 <__mdiff+0x88>
 8022974:	1b33      	subs	r3, r6, r4
 8022976:	3b15      	subs	r3, #21
 8022978:	f023 0303 	bic.w	r3, r3, #3
 802297c:	3415      	adds	r4, #21
 802297e:	3304      	adds	r3, #4
 8022980:	42a6      	cmp	r6, r4
 8022982:	bf38      	it	cc
 8022984:	2304      	movcc	r3, #4
 8022986:	441d      	add	r5, r3
 8022988:	445b      	add	r3, fp
 802298a:	461e      	mov	r6, r3
 802298c:	462c      	mov	r4, r5
 802298e:	4544      	cmp	r4, r8
 8022990:	d30e      	bcc.n	80229b0 <__mdiff+0xf8>
 8022992:	f108 0103 	add.w	r1, r8, #3
 8022996:	1b49      	subs	r1, r1, r5
 8022998:	f021 0103 	bic.w	r1, r1, #3
 802299c:	3d03      	subs	r5, #3
 802299e:	45a8      	cmp	r8, r5
 80229a0:	bf38      	it	cc
 80229a2:	2100      	movcc	r1, #0
 80229a4:	440b      	add	r3, r1
 80229a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80229aa:	b191      	cbz	r1, 80229d2 <__mdiff+0x11a>
 80229ac:	6117      	str	r7, [r2, #16]
 80229ae:	e79d      	b.n	80228ec <__mdiff+0x34>
 80229b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80229b4:	46e6      	mov	lr, ip
 80229b6:	0c08      	lsrs	r0, r1, #16
 80229b8:	fa1c fc81 	uxtah	ip, ip, r1
 80229bc:	4471      	add	r1, lr
 80229be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80229c2:	b289      	uxth	r1, r1
 80229c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80229c8:	f846 1b04 	str.w	r1, [r6], #4
 80229cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80229d0:	e7dd      	b.n	802298e <__mdiff+0xd6>
 80229d2:	3f01      	subs	r7, #1
 80229d4:	e7e7      	b.n	80229a6 <__mdiff+0xee>
 80229d6:	bf00      	nop
 80229d8:	08023a14 	.word	0x08023a14
 80229dc:	08023a25 	.word	0x08023a25

080229e0 <__d2b>:
 80229e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80229e4:	460f      	mov	r7, r1
 80229e6:	2101      	movs	r1, #1
 80229e8:	ec59 8b10 	vmov	r8, r9, d0
 80229ec:	4616      	mov	r6, r2
 80229ee:	f7ff fccd 	bl	802238c <_Balloc>
 80229f2:	4604      	mov	r4, r0
 80229f4:	b930      	cbnz	r0, 8022a04 <__d2b+0x24>
 80229f6:	4602      	mov	r2, r0
 80229f8:	4b23      	ldr	r3, [pc, #140]	@ (8022a88 <__d2b+0xa8>)
 80229fa:	4824      	ldr	r0, [pc, #144]	@ (8022a8c <__d2b+0xac>)
 80229fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8022a00:	f000 f8e0 	bl	8022bc4 <__assert_func>
 8022a04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8022a08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022a0c:	b10d      	cbz	r5, 8022a12 <__d2b+0x32>
 8022a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8022a12:	9301      	str	r3, [sp, #4]
 8022a14:	f1b8 0300 	subs.w	r3, r8, #0
 8022a18:	d023      	beq.n	8022a62 <__d2b+0x82>
 8022a1a:	4668      	mov	r0, sp
 8022a1c:	9300      	str	r3, [sp, #0]
 8022a1e:	f7ff fd7c 	bl	802251a <__lo0bits>
 8022a22:	e9dd 1200 	ldrd	r1, r2, [sp]
 8022a26:	b1d0      	cbz	r0, 8022a5e <__d2b+0x7e>
 8022a28:	f1c0 0320 	rsb	r3, r0, #32
 8022a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8022a30:	430b      	orrs	r3, r1
 8022a32:	40c2      	lsrs	r2, r0
 8022a34:	6163      	str	r3, [r4, #20]
 8022a36:	9201      	str	r2, [sp, #4]
 8022a38:	9b01      	ldr	r3, [sp, #4]
 8022a3a:	61a3      	str	r3, [r4, #24]
 8022a3c:	2b00      	cmp	r3, #0
 8022a3e:	bf0c      	ite	eq
 8022a40:	2201      	moveq	r2, #1
 8022a42:	2202      	movne	r2, #2
 8022a44:	6122      	str	r2, [r4, #16]
 8022a46:	b1a5      	cbz	r5, 8022a72 <__d2b+0x92>
 8022a48:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8022a4c:	4405      	add	r5, r0
 8022a4e:	603d      	str	r5, [r7, #0]
 8022a50:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8022a54:	6030      	str	r0, [r6, #0]
 8022a56:	4620      	mov	r0, r4
 8022a58:	b003      	add	sp, #12
 8022a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022a5e:	6161      	str	r1, [r4, #20]
 8022a60:	e7ea      	b.n	8022a38 <__d2b+0x58>
 8022a62:	a801      	add	r0, sp, #4
 8022a64:	f7ff fd59 	bl	802251a <__lo0bits>
 8022a68:	9b01      	ldr	r3, [sp, #4]
 8022a6a:	6163      	str	r3, [r4, #20]
 8022a6c:	3020      	adds	r0, #32
 8022a6e:	2201      	movs	r2, #1
 8022a70:	e7e8      	b.n	8022a44 <__d2b+0x64>
 8022a72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022a76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8022a7a:	6038      	str	r0, [r7, #0]
 8022a7c:	6918      	ldr	r0, [r3, #16]
 8022a7e:	f7ff fd2d 	bl	80224dc <__hi0bits>
 8022a82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022a86:	e7e5      	b.n	8022a54 <__d2b+0x74>
 8022a88:	08023a14 	.word	0x08023a14
 8022a8c:	08023a25 	.word	0x08023a25

08022a90 <__sread>:
 8022a90:	b510      	push	{r4, lr}
 8022a92:	460c      	mov	r4, r1
 8022a94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022a98:	f000 f860 	bl	8022b5c <_read_r>
 8022a9c:	2800      	cmp	r0, #0
 8022a9e:	bfab      	itete	ge
 8022aa0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022aa2:	89a3      	ldrhlt	r3, [r4, #12]
 8022aa4:	181b      	addge	r3, r3, r0
 8022aa6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8022aaa:	bfac      	ite	ge
 8022aac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8022aae:	81a3      	strhlt	r3, [r4, #12]
 8022ab0:	bd10      	pop	{r4, pc}

08022ab2 <__swrite>:
 8022ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ab6:	461f      	mov	r7, r3
 8022ab8:	898b      	ldrh	r3, [r1, #12]
 8022aba:	05db      	lsls	r3, r3, #23
 8022abc:	4605      	mov	r5, r0
 8022abe:	460c      	mov	r4, r1
 8022ac0:	4616      	mov	r6, r2
 8022ac2:	d505      	bpl.n	8022ad0 <__swrite+0x1e>
 8022ac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022ac8:	2302      	movs	r3, #2
 8022aca:	2200      	movs	r2, #0
 8022acc:	f000 f834 	bl	8022b38 <_lseek_r>
 8022ad0:	89a3      	ldrh	r3, [r4, #12]
 8022ad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022ad6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8022ada:	81a3      	strh	r3, [r4, #12]
 8022adc:	4632      	mov	r2, r6
 8022ade:	463b      	mov	r3, r7
 8022ae0:	4628      	mov	r0, r5
 8022ae2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022ae6:	f000 b85b 	b.w	8022ba0 <_write_r>

08022aea <__sseek>:
 8022aea:	b510      	push	{r4, lr}
 8022aec:	460c      	mov	r4, r1
 8022aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022af2:	f000 f821 	bl	8022b38 <_lseek_r>
 8022af6:	1c43      	adds	r3, r0, #1
 8022af8:	89a3      	ldrh	r3, [r4, #12]
 8022afa:	bf15      	itete	ne
 8022afc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8022afe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8022b02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8022b06:	81a3      	strheq	r3, [r4, #12]
 8022b08:	bf18      	it	ne
 8022b0a:	81a3      	strhne	r3, [r4, #12]
 8022b0c:	bd10      	pop	{r4, pc}

08022b0e <__sclose>:
 8022b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022b12:	f000 b801 	b.w	8022b18 <_close_r>
	...

08022b18 <_close_r>:
 8022b18:	b538      	push	{r3, r4, r5, lr}
 8022b1a:	4d06      	ldr	r5, [pc, #24]	@ (8022b34 <_close_r+0x1c>)
 8022b1c:	2300      	movs	r3, #0
 8022b1e:	4604      	mov	r4, r0
 8022b20:	4608      	mov	r0, r1
 8022b22:	602b      	str	r3, [r5, #0]
 8022b24:	f7df fa7c 	bl	8002020 <_close>
 8022b28:	1c43      	adds	r3, r0, #1
 8022b2a:	d102      	bne.n	8022b32 <_close_r+0x1a>
 8022b2c:	682b      	ldr	r3, [r5, #0]
 8022b2e:	b103      	cbz	r3, 8022b32 <_close_r+0x1a>
 8022b30:	6023      	str	r3, [r4, #0]
 8022b32:	bd38      	pop	{r3, r4, r5, pc}
 8022b34:	2401e4a8 	.word	0x2401e4a8

08022b38 <_lseek_r>:
 8022b38:	b538      	push	{r3, r4, r5, lr}
 8022b3a:	4d07      	ldr	r5, [pc, #28]	@ (8022b58 <_lseek_r+0x20>)
 8022b3c:	4604      	mov	r4, r0
 8022b3e:	4608      	mov	r0, r1
 8022b40:	4611      	mov	r1, r2
 8022b42:	2200      	movs	r2, #0
 8022b44:	602a      	str	r2, [r5, #0]
 8022b46:	461a      	mov	r2, r3
 8022b48:	f7df fa91 	bl	800206e <_lseek>
 8022b4c:	1c43      	adds	r3, r0, #1
 8022b4e:	d102      	bne.n	8022b56 <_lseek_r+0x1e>
 8022b50:	682b      	ldr	r3, [r5, #0]
 8022b52:	b103      	cbz	r3, 8022b56 <_lseek_r+0x1e>
 8022b54:	6023      	str	r3, [r4, #0]
 8022b56:	bd38      	pop	{r3, r4, r5, pc}
 8022b58:	2401e4a8 	.word	0x2401e4a8

08022b5c <_read_r>:
 8022b5c:	b538      	push	{r3, r4, r5, lr}
 8022b5e:	4d07      	ldr	r5, [pc, #28]	@ (8022b7c <_read_r+0x20>)
 8022b60:	4604      	mov	r4, r0
 8022b62:	4608      	mov	r0, r1
 8022b64:	4611      	mov	r1, r2
 8022b66:	2200      	movs	r2, #0
 8022b68:	602a      	str	r2, [r5, #0]
 8022b6a:	461a      	mov	r2, r3
 8022b6c:	f7df fa1f 	bl	8001fae <_read>
 8022b70:	1c43      	adds	r3, r0, #1
 8022b72:	d102      	bne.n	8022b7a <_read_r+0x1e>
 8022b74:	682b      	ldr	r3, [r5, #0]
 8022b76:	b103      	cbz	r3, 8022b7a <_read_r+0x1e>
 8022b78:	6023      	str	r3, [r4, #0]
 8022b7a:	bd38      	pop	{r3, r4, r5, pc}
 8022b7c:	2401e4a8 	.word	0x2401e4a8

08022b80 <_sbrk_r>:
 8022b80:	b538      	push	{r3, r4, r5, lr}
 8022b82:	4d06      	ldr	r5, [pc, #24]	@ (8022b9c <_sbrk_r+0x1c>)
 8022b84:	2300      	movs	r3, #0
 8022b86:	4604      	mov	r4, r0
 8022b88:	4608      	mov	r0, r1
 8022b8a:	602b      	str	r3, [r5, #0]
 8022b8c:	f7df fa7c 	bl	8002088 <_sbrk>
 8022b90:	1c43      	adds	r3, r0, #1
 8022b92:	d102      	bne.n	8022b9a <_sbrk_r+0x1a>
 8022b94:	682b      	ldr	r3, [r5, #0]
 8022b96:	b103      	cbz	r3, 8022b9a <_sbrk_r+0x1a>
 8022b98:	6023      	str	r3, [r4, #0]
 8022b9a:	bd38      	pop	{r3, r4, r5, pc}
 8022b9c:	2401e4a8 	.word	0x2401e4a8

08022ba0 <_write_r>:
 8022ba0:	b538      	push	{r3, r4, r5, lr}
 8022ba2:	4d07      	ldr	r5, [pc, #28]	@ (8022bc0 <_write_r+0x20>)
 8022ba4:	4604      	mov	r4, r0
 8022ba6:	4608      	mov	r0, r1
 8022ba8:	4611      	mov	r1, r2
 8022baa:	2200      	movs	r2, #0
 8022bac:	602a      	str	r2, [r5, #0]
 8022bae:	461a      	mov	r2, r3
 8022bb0:	f7df fa1a 	bl	8001fe8 <_write>
 8022bb4:	1c43      	adds	r3, r0, #1
 8022bb6:	d102      	bne.n	8022bbe <_write_r+0x1e>
 8022bb8:	682b      	ldr	r3, [r5, #0]
 8022bba:	b103      	cbz	r3, 8022bbe <_write_r+0x1e>
 8022bbc:	6023      	str	r3, [r4, #0]
 8022bbe:	bd38      	pop	{r3, r4, r5, pc}
 8022bc0:	2401e4a8 	.word	0x2401e4a8

08022bc4 <__assert_func>:
 8022bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022bc6:	4614      	mov	r4, r2
 8022bc8:	461a      	mov	r2, r3
 8022bca:	4b09      	ldr	r3, [pc, #36]	@ (8022bf0 <__assert_func+0x2c>)
 8022bcc:	681b      	ldr	r3, [r3, #0]
 8022bce:	4605      	mov	r5, r0
 8022bd0:	68d8      	ldr	r0, [r3, #12]
 8022bd2:	b954      	cbnz	r4, 8022bea <__assert_func+0x26>
 8022bd4:	4b07      	ldr	r3, [pc, #28]	@ (8022bf4 <__assert_func+0x30>)
 8022bd6:	461c      	mov	r4, r3
 8022bd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022bdc:	9100      	str	r1, [sp, #0]
 8022bde:	462b      	mov	r3, r5
 8022be0:	4905      	ldr	r1, [pc, #20]	@ (8022bf8 <__assert_func+0x34>)
 8022be2:	f000 f833 	bl	8022c4c <fiprintf>
 8022be6:	f000 f850 	bl	8022c8a <abort>
 8022bea:	4b04      	ldr	r3, [pc, #16]	@ (8022bfc <__assert_func+0x38>)
 8022bec:	e7f4      	b.n	8022bd8 <__assert_func+0x14>
 8022bee:	bf00      	nop
 8022bf0:	24000068 	.word	0x24000068
 8022bf4:	08023cc6 	.word	0x08023cc6
 8022bf8:	08023c98 	.word	0x08023c98
 8022bfc:	08023c8b 	.word	0x08023c8b

08022c00 <_calloc_r>:
 8022c00:	b570      	push	{r4, r5, r6, lr}
 8022c02:	fba1 5402 	umull	r5, r4, r1, r2
 8022c06:	b93c      	cbnz	r4, 8022c18 <_calloc_r+0x18>
 8022c08:	4629      	mov	r1, r5
 8022c0a:	f7ff fa87 	bl	802211c <_malloc_r>
 8022c0e:	4606      	mov	r6, r0
 8022c10:	b928      	cbnz	r0, 8022c1e <_calloc_r+0x1e>
 8022c12:	2600      	movs	r6, #0
 8022c14:	4630      	mov	r0, r6
 8022c16:	bd70      	pop	{r4, r5, r6, pc}
 8022c18:	220c      	movs	r2, #12
 8022c1a:	6002      	str	r2, [r0, #0]
 8022c1c:	e7f9      	b.n	8022c12 <_calloc_r+0x12>
 8022c1e:	462a      	mov	r2, r5
 8022c20:	4621      	mov	r1, r4
 8022c22:	f7fe fb8b 	bl	802133c <memset>
 8022c26:	e7f5      	b.n	8022c14 <_calloc_r+0x14>

08022c28 <__ascii_mbtowc>:
 8022c28:	b082      	sub	sp, #8
 8022c2a:	b901      	cbnz	r1, 8022c2e <__ascii_mbtowc+0x6>
 8022c2c:	a901      	add	r1, sp, #4
 8022c2e:	b142      	cbz	r2, 8022c42 <__ascii_mbtowc+0x1a>
 8022c30:	b14b      	cbz	r3, 8022c46 <__ascii_mbtowc+0x1e>
 8022c32:	7813      	ldrb	r3, [r2, #0]
 8022c34:	600b      	str	r3, [r1, #0]
 8022c36:	7812      	ldrb	r2, [r2, #0]
 8022c38:	1e10      	subs	r0, r2, #0
 8022c3a:	bf18      	it	ne
 8022c3c:	2001      	movne	r0, #1
 8022c3e:	b002      	add	sp, #8
 8022c40:	4770      	bx	lr
 8022c42:	4610      	mov	r0, r2
 8022c44:	e7fb      	b.n	8022c3e <__ascii_mbtowc+0x16>
 8022c46:	f06f 0001 	mvn.w	r0, #1
 8022c4a:	e7f8      	b.n	8022c3e <__ascii_mbtowc+0x16>

08022c4c <fiprintf>:
 8022c4c:	b40e      	push	{r1, r2, r3}
 8022c4e:	b503      	push	{r0, r1, lr}
 8022c50:	4601      	mov	r1, r0
 8022c52:	ab03      	add	r3, sp, #12
 8022c54:	4805      	ldr	r0, [pc, #20]	@ (8022c6c <fiprintf+0x20>)
 8022c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8022c5a:	6800      	ldr	r0, [r0, #0]
 8022c5c:	9301      	str	r3, [sp, #4]
 8022c5e:	f000 f845 	bl	8022cec <_vfiprintf_r>
 8022c62:	b002      	add	sp, #8
 8022c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8022c68:	b003      	add	sp, #12
 8022c6a:	4770      	bx	lr
 8022c6c:	24000068 	.word	0x24000068

08022c70 <__ascii_wctomb>:
 8022c70:	4603      	mov	r3, r0
 8022c72:	4608      	mov	r0, r1
 8022c74:	b141      	cbz	r1, 8022c88 <__ascii_wctomb+0x18>
 8022c76:	2aff      	cmp	r2, #255	@ 0xff
 8022c78:	d904      	bls.n	8022c84 <__ascii_wctomb+0x14>
 8022c7a:	228a      	movs	r2, #138	@ 0x8a
 8022c7c:	601a      	str	r2, [r3, #0]
 8022c7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022c82:	4770      	bx	lr
 8022c84:	700a      	strb	r2, [r1, #0]
 8022c86:	2001      	movs	r0, #1
 8022c88:	4770      	bx	lr

08022c8a <abort>:
 8022c8a:	b508      	push	{r3, lr}
 8022c8c:	2006      	movs	r0, #6
 8022c8e:	f000 fa85 	bl	802319c <raise>
 8022c92:	2001      	movs	r0, #1
 8022c94:	f7df f980 	bl	8001f98 <_exit>

08022c98 <__sfputc_r>:
 8022c98:	6893      	ldr	r3, [r2, #8]
 8022c9a:	3b01      	subs	r3, #1
 8022c9c:	2b00      	cmp	r3, #0
 8022c9e:	b410      	push	{r4}
 8022ca0:	6093      	str	r3, [r2, #8]
 8022ca2:	da08      	bge.n	8022cb6 <__sfputc_r+0x1e>
 8022ca4:	6994      	ldr	r4, [r2, #24]
 8022ca6:	42a3      	cmp	r3, r4
 8022ca8:	db01      	blt.n	8022cae <__sfputc_r+0x16>
 8022caa:	290a      	cmp	r1, #10
 8022cac:	d103      	bne.n	8022cb6 <__sfputc_r+0x1e>
 8022cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022cb2:	f000 b933 	b.w	8022f1c <__swbuf_r>
 8022cb6:	6813      	ldr	r3, [r2, #0]
 8022cb8:	1c58      	adds	r0, r3, #1
 8022cba:	6010      	str	r0, [r2, #0]
 8022cbc:	7019      	strb	r1, [r3, #0]
 8022cbe:	4608      	mov	r0, r1
 8022cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022cc4:	4770      	bx	lr

08022cc6 <__sfputs_r>:
 8022cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022cc8:	4606      	mov	r6, r0
 8022cca:	460f      	mov	r7, r1
 8022ccc:	4614      	mov	r4, r2
 8022cce:	18d5      	adds	r5, r2, r3
 8022cd0:	42ac      	cmp	r4, r5
 8022cd2:	d101      	bne.n	8022cd8 <__sfputs_r+0x12>
 8022cd4:	2000      	movs	r0, #0
 8022cd6:	e007      	b.n	8022ce8 <__sfputs_r+0x22>
 8022cd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022cdc:	463a      	mov	r2, r7
 8022cde:	4630      	mov	r0, r6
 8022ce0:	f7ff ffda 	bl	8022c98 <__sfputc_r>
 8022ce4:	1c43      	adds	r3, r0, #1
 8022ce6:	d1f3      	bne.n	8022cd0 <__sfputs_r+0xa>
 8022ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022cec <_vfiprintf_r>:
 8022cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022cf0:	460d      	mov	r5, r1
 8022cf2:	b09d      	sub	sp, #116	@ 0x74
 8022cf4:	4614      	mov	r4, r2
 8022cf6:	4698      	mov	r8, r3
 8022cf8:	4606      	mov	r6, r0
 8022cfa:	b118      	cbz	r0, 8022d04 <_vfiprintf_r+0x18>
 8022cfc:	6a03      	ldr	r3, [r0, #32]
 8022cfe:	b90b      	cbnz	r3, 8022d04 <_vfiprintf_r+0x18>
 8022d00:	f7fe fae6 	bl	80212d0 <__sinit>
 8022d04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022d06:	07d9      	lsls	r1, r3, #31
 8022d08:	d405      	bmi.n	8022d16 <_vfiprintf_r+0x2a>
 8022d0a:	89ab      	ldrh	r3, [r5, #12]
 8022d0c:	059a      	lsls	r2, r3, #22
 8022d0e:	d402      	bmi.n	8022d16 <_vfiprintf_r+0x2a>
 8022d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022d12:	f7fe fba0 	bl	8021456 <__retarget_lock_acquire_recursive>
 8022d16:	89ab      	ldrh	r3, [r5, #12]
 8022d18:	071b      	lsls	r3, r3, #28
 8022d1a:	d501      	bpl.n	8022d20 <_vfiprintf_r+0x34>
 8022d1c:	692b      	ldr	r3, [r5, #16]
 8022d1e:	b99b      	cbnz	r3, 8022d48 <_vfiprintf_r+0x5c>
 8022d20:	4629      	mov	r1, r5
 8022d22:	4630      	mov	r0, r6
 8022d24:	f000 f938 	bl	8022f98 <__swsetup_r>
 8022d28:	b170      	cbz	r0, 8022d48 <_vfiprintf_r+0x5c>
 8022d2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022d2c:	07dc      	lsls	r4, r3, #31
 8022d2e:	d504      	bpl.n	8022d3a <_vfiprintf_r+0x4e>
 8022d30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022d34:	b01d      	add	sp, #116	@ 0x74
 8022d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022d3a:	89ab      	ldrh	r3, [r5, #12]
 8022d3c:	0598      	lsls	r0, r3, #22
 8022d3e:	d4f7      	bmi.n	8022d30 <_vfiprintf_r+0x44>
 8022d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022d42:	f7fe fb89 	bl	8021458 <__retarget_lock_release_recursive>
 8022d46:	e7f3      	b.n	8022d30 <_vfiprintf_r+0x44>
 8022d48:	2300      	movs	r3, #0
 8022d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022d4c:	2320      	movs	r3, #32
 8022d4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8022d52:	f8cd 800c 	str.w	r8, [sp, #12]
 8022d56:	2330      	movs	r3, #48	@ 0x30
 8022d58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8022f08 <_vfiprintf_r+0x21c>
 8022d5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022d60:	f04f 0901 	mov.w	r9, #1
 8022d64:	4623      	mov	r3, r4
 8022d66:	469a      	mov	sl, r3
 8022d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022d6c:	b10a      	cbz	r2, 8022d72 <_vfiprintf_r+0x86>
 8022d6e:	2a25      	cmp	r2, #37	@ 0x25
 8022d70:	d1f9      	bne.n	8022d66 <_vfiprintf_r+0x7a>
 8022d72:	ebba 0b04 	subs.w	fp, sl, r4
 8022d76:	d00b      	beq.n	8022d90 <_vfiprintf_r+0xa4>
 8022d78:	465b      	mov	r3, fp
 8022d7a:	4622      	mov	r2, r4
 8022d7c:	4629      	mov	r1, r5
 8022d7e:	4630      	mov	r0, r6
 8022d80:	f7ff ffa1 	bl	8022cc6 <__sfputs_r>
 8022d84:	3001      	adds	r0, #1
 8022d86:	f000 80a7 	beq.w	8022ed8 <_vfiprintf_r+0x1ec>
 8022d8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022d8c:	445a      	add	r2, fp
 8022d8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8022d90:	f89a 3000 	ldrb.w	r3, [sl]
 8022d94:	2b00      	cmp	r3, #0
 8022d96:	f000 809f 	beq.w	8022ed8 <_vfiprintf_r+0x1ec>
 8022d9a:	2300      	movs	r3, #0
 8022d9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8022da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022da4:	f10a 0a01 	add.w	sl, sl, #1
 8022da8:	9304      	str	r3, [sp, #16]
 8022daa:	9307      	str	r3, [sp, #28]
 8022dac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022db0:	931a      	str	r3, [sp, #104]	@ 0x68
 8022db2:	4654      	mov	r4, sl
 8022db4:	2205      	movs	r2, #5
 8022db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022dba:	4853      	ldr	r0, [pc, #332]	@ (8022f08 <_vfiprintf_r+0x21c>)
 8022dbc:	f7dd fa90 	bl	80002e0 <memchr>
 8022dc0:	9a04      	ldr	r2, [sp, #16]
 8022dc2:	b9d8      	cbnz	r0, 8022dfc <_vfiprintf_r+0x110>
 8022dc4:	06d1      	lsls	r1, r2, #27
 8022dc6:	bf44      	itt	mi
 8022dc8:	2320      	movmi	r3, #32
 8022dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022dce:	0713      	lsls	r3, r2, #28
 8022dd0:	bf44      	itt	mi
 8022dd2:	232b      	movmi	r3, #43	@ 0x2b
 8022dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8022ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8022dde:	d015      	beq.n	8022e0c <_vfiprintf_r+0x120>
 8022de0:	9a07      	ldr	r2, [sp, #28]
 8022de2:	4654      	mov	r4, sl
 8022de4:	2000      	movs	r0, #0
 8022de6:	f04f 0c0a 	mov.w	ip, #10
 8022dea:	4621      	mov	r1, r4
 8022dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022df0:	3b30      	subs	r3, #48	@ 0x30
 8022df2:	2b09      	cmp	r3, #9
 8022df4:	d94b      	bls.n	8022e8e <_vfiprintf_r+0x1a2>
 8022df6:	b1b0      	cbz	r0, 8022e26 <_vfiprintf_r+0x13a>
 8022df8:	9207      	str	r2, [sp, #28]
 8022dfa:	e014      	b.n	8022e26 <_vfiprintf_r+0x13a>
 8022dfc:	eba0 0308 	sub.w	r3, r0, r8
 8022e00:	fa09 f303 	lsl.w	r3, r9, r3
 8022e04:	4313      	orrs	r3, r2
 8022e06:	9304      	str	r3, [sp, #16]
 8022e08:	46a2      	mov	sl, r4
 8022e0a:	e7d2      	b.n	8022db2 <_vfiprintf_r+0xc6>
 8022e0c:	9b03      	ldr	r3, [sp, #12]
 8022e0e:	1d19      	adds	r1, r3, #4
 8022e10:	681b      	ldr	r3, [r3, #0]
 8022e12:	9103      	str	r1, [sp, #12]
 8022e14:	2b00      	cmp	r3, #0
 8022e16:	bfbb      	ittet	lt
 8022e18:	425b      	neglt	r3, r3
 8022e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8022e1e:	9307      	strge	r3, [sp, #28]
 8022e20:	9307      	strlt	r3, [sp, #28]
 8022e22:	bfb8      	it	lt
 8022e24:	9204      	strlt	r2, [sp, #16]
 8022e26:	7823      	ldrb	r3, [r4, #0]
 8022e28:	2b2e      	cmp	r3, #46	@ 0x2e
 8022e2a:	d10a      	bne.n	8022e42 <_vfiprintf_r+0x156>
 8022e2c:	7863      	ldrb	r3, [r4, #1]
 8022e2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8022e30:	d132      	bne.n	8022e98 <_vfiprintf_r+0x1ac>
 8022e32:	9b03      	ldr	r3, [sp, #12]
 8022e34:	1d1a      	adds	r2, r3, #4
 8022e36:	681b      	ldr	r3, [r3, #0]
 8022e38:	9203      	str	r2, [sp, #12]
 8022e3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022e3e:	3402      	adds	r4, #2
 8022e40:	9305      	str	r3, [sp, #20]
 8022e42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8022f18 <_vfiprintf_r+0x22c>
 8022e46:	7821      	ldrb	r1, [r4, #0]
 8022e48:	2203      	movs	r2, #3
 8022e4a:	4650      	mov	r0, sl
 8022e4c:	f7dd fa48 	bl	80002e0 <memchr>
 8022e50:	b138      	cbz	r0, 8022e62 <_vfiprintf_r+0x176>
 8022e52:	9b04      	ldr	r3, [sp, #16]
 8022e54:	eba0 000a 	sub.w	r0, r0, sl
 8022e58:	2240      	movs	r2, #64	@ 0x40
 8022e5a:	4082      	lsls	r2, r0
 8022e5c:	4313      	orrs	r3, r2
 8022e5e:	3401      	adds	r4, #1
 8022e60:	9304      	str	r3, [sp, #16]
 8022e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022e66:	4829      	ldr	r0, [pc, #164]	@ (8022f0c <_vfiprintf_r+0x220>)
 8022e68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022e6c:	2206      	movs	r2, #6
 8022e6e:	f7dd fa37 	bl	80002e0 <memchr>
 8022e72:	2800      	cmp	r0, #0
 8022e74:	d03f      	beq.n	8022ef6 <_vfiprintf_r+0x20a>
 8022e76:	4b26      	ldr	r3, [pc, #152]	@ (8022f10 <_vfiprintf_r+0x224>)
 8022e78:	bb1b      	cbnz	r3, 8022ec2 <_vfiprintf_r+0x1d6>
 8022e7a:	9b03      	ldr	r3, [sp, #12]
 8022e7c:	3307      	adds	r3, #7
 8022e7e:	f023 0307 	bic.w	r3, r3, #7
 8022e82:	3308      	adds	r3, #8
 8022e84:	9303      	str	r3, [sp, #12]
 8022e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022e88:	443b      	add	r3, r7
 8022e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022e8c:	e76a      	b.n	8022d64 <_vfiprintf_r+0x78>
 8022e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8022e92:	460c      	mov	r4, r1
 8022e94:	2001      	movs	r0, #1
 8022e96:	e7a8      	b.n	8022dea <_vfiprintf_r+0xfe>
 8022e98:	2300      	movs	r3, #0
 8022e9a:	3401      	adds	r4, #1
 8022e9c:	9305      	str	r3, [sp, #20]
 8022e9e:	4619      	mov	r1, r3
 8022ea0:	f04f 0c0a 	mov.w	ip, #10
 8022ea4:	4620      	mov	r0, r4
 8022ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022eaa:	3a30      	subs	r2, #48	@ 0x30
 8022eac:	2a09      	cmp	r2, #9
 8022eae:	d903      	bls.n	8022eb8 <_vfiprintf_r+0x1cc>
 8022eb0:	2b00      	cmp	r3, #0
 8022eb2:	d0c6      	beq.n	8022e42 <_vfiprintf_r+0x156>
 8022eb4:	9105      	str	r1, [sp, #20]
 8022eb6:	e7c4      	b.n	8022e42 <_vfiprintf_r+0x156>
 8022eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8022ebc:	4604      	mov	r4, r0
 8022ebe:	2301      	movs	r3, #1
 8022ec0:	e7f0      	b.n	8022ea4 <_vfiprintf_r+0x1b8>
 8022ec2:	ab03      	add	r3, sp, #12
 8022ec4:	9300      	str	r3, [sp, #0]
 8022ec6:	462a      	mov	r2, r5
 8022ec8:	4b12      	ldr	r3, [pc, #72]	@ (8022f14 <_vfiprintf_r+0x228>)
 8022eca:	a904      	add	r1, sp, #16
 8022ecc:	4630      	mov	r0, r6
 8022ece:	f7fd fdcb 	bl	8020a68 <_printf_float>
 8022ed2:	4607      	mov	r7, r0
 8022ed4:	1c78      	adds	r0, r7, #1
 8022ed6:	d1d6      	bne.n	8022e86 <_vfiprintf_r+0x19a>
 8022ed8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022eda:	07d9      	lsls	r1, r3, #31
 8022edc:	d405      	bmi.n	8022eea <_vfiprintf_r+0x1fe>
 8022ede:	89ab      	ldrh	r3, [r5, #12]
 8022ee0:	059a      	lsls	r2, r3, #22
 8022ee2:	d402      	bmi.n	8022eea <_vfiprintf_r+0x1fe>
 8022ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022ee6:	f7fe fab7 	bl	8021458 <__retarget_lock_release_recursive>
 8022eea:	89ab      	ldrh	r3, [r5, #12]
 8022eec:	065b      	lsls	r3, r3, #25
 8022eee:	f53f af1f 	bmi.w	8022d30 <_vfiprintf_r+0x44>
 8022ef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022ef4:	e71e      	b.n	8022d34 <_vfiprintf_r+0x48>
 8022ef6:	ab03      	add	r3, sp, #12
 8022ef8:	9300      	str	r3, [sp, #0]
 8022efa:	462a      	mov	r2, r5
 8022efc:	4b05      	ldr	r3, [pc, #20]	@ (8022f14 <_vfiprintf_r+0x228>)
 8022efe:	a904      	add	r1, sp, #16
 8022f00:	4630      	mov	r0, r6
 8022f02:	f7fe f839 	bl	8020f78 <_printf_i>
 8022f06:	e7e4      	b.n	8022ed2 <_vfiprintf_r+0x1e6>
 8022f08:	08023cc7 	.word	0x08023cc7
 8022f0c:	08023cd1 	.word	0x08023cd1
 8022f10:	08020a69 	.word	0x08020a69
 8022f14:	08022cc7 	.word	0x08022cc7
 8022f18:	08023ccd 	.word	0x08023ccd

08022f1c <__swbuf_r>:
 8022f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f1e:	460e      	mov	r6, r1
 8022f20:	4614      	mov	r4, r2
 8022f22:	4605      	mov	r5, r0
 8022f24:	b118      	cbz	r0, 8022f2e <__swbuf_r+0x12>
 8022f26:	6a03      	ldr	r3, [r0, #32]
 8022f28:	b90b      	cbnz	r3, 8022f2e <__swbuf_r+0x12>
 8022f2a:	f7fe f9d1 	bl	80212d0 <__sinit>
 8022f2e:	69a3      	ldr	r3, [r4, #24]
 8022f30:	60a3      	str	r3, [r4, #8]
 8022f32:	89a3      	ldrh	r3, [r4, #12]
 8022f34:	071a      	lsls	r2, r3, #28
 8022f36:	d501      	bpl.n	8022f3c <__swbuf_r+0x20>
 8022f38:	6923      	ldr	r3, [r4, #16]
 8022f3a:	b943      	cbnz	r3, 8022f4e <__swbuf_r+0x32>
 8022f3c:	4621      	mov	r1, r4
 8022f3e:	4628      	mov	r0, r5
 8022f40:	f000 f82a 	bl	8022f98 <__swsetup_r>
 8022f44:	b118      	cbz	r0, 8022f4e <__swbuf_r+0x32>
 8022f46:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8022f4a:	4638      	mov	r0, r7
 8022f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022f4e:	6823      	ldr	r3, [r4, #0]
 8022f50:	6922      	ldr	r2, [r4, #16]
 8022f52:	1a98      	subs	r0, r3, r2
 8022f54:	6963      	ldr	r3, [r4, #20]
 8022f56:	b2f6      	uxtb	r6, r6
 8022f58:	4283      	cmp	r3, r0
 8022f5a:	4637      	mov	r7, r6
 8022f5c:	dc05      	bgt.n	8022f6a <__swbuf_r+0x4e>
 8022f5e:	4621      	mov	r1, r4
 8022f60:	4628      	mov	r0, r5
 8022f62:	f7ff f9df 	bl	8022324 <_fflush_r>
 8022f66:	2800      	cmp	r0, #0
 8022f68:	d1ed      	bne.n	8022f46 <__swbuf_r+0x2a>
 8022f6a:	68a3      	ldr	r3, [r4, #8]
 8022f6c:	3b01      	subs	r3, #1
 8022f6e:	60a3      	str	r3, [r4, #8]
 8022f70:	6823      	ldr	r3, [r4, #0]
 8022f72:	1c5a      	adds	r2, r3, #1
 8022f74:	6022      	str	r2, [r4, #0]
 8022f76:	701e      	strb	r6, [r3, #0]
 8022f78:	6962      	ldr	r2, [r4, #20]
 8022f7a:	1c43      	adds	r3, r0, #1
 8022f7c:	429a      	cmp	r2, r3
 8022f7e:	d004      	beq.n	8022f8a <__swbuf_r+0x6e>
 8022f80:	89a3      	ldrh	r3, [r4, #12]
 8022f82:	07db      	lsls	r3, r3, #31
 8022f84:	d5e1      	bpl.n	8022f4a <__swbuf_r+0x2e>
 8022f86:	2e0a      	cmp	r6, #10
 8022f88:	d1df      	bne.n	8022f4a <__swbuf_r+0x2e>
 8022f8a:	4621      	mov	r1, r4
 8022f8c:	4628      	mov	r0, r5
 8022f8e:	f7ff f9c9 	bl	8022324 <_fflush_r>
 8022f92:	2800      	cmp	r0, #0
 8022f94:	d0d9      	beq.n	8022f4a <__swbuf_r+0x2e>
 8022f96:	e7d6      	b.n	8022f46 <__swbuf_r+0x2a>

08022f98 <__swsetup_r>:
 8022f98:	b538      	push	{r3, r4, r5, lr}
 8022f9a:	4b29      	ldr	r3, [pc, #164]	@ (8023040 <__swsetup_r+0xa8>)
 8022f9c:	4605      	mov	r5, r0
 8022f9e:	6818      	ldr	r0, [r3, #0]
 8022fa0:	460c      	mov	r4, r1
 8022fa2:	b118      	cbz	r0, 8022fac <__swsetup_r+0x14>
 8022fa4:	6a03      	ldr	r3, [r0, #32]
 8022fa6:	b90b      	cbnz	r3, 8022fac <__swsetup_r+0x14>
 8022fa8:	f7fe f992 	bl	80212d0 <__sinit>
 8022fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022fb0:	0719      	lsls	r1, r3, #28
 8022fb2:	d422      	bmi.n	8022ffa <__swsetup_r+0x62>
 8022fb4:	06da      	lsls	r2, r3, #27
 8022fb6:	d407      	bmi.n	8022fc8 <__swsetup_r+0x30>
 8022fb8:	2209      	movs	r2, #9
 8022fba:	602a      	str	r2, [r5, #0]
 8022fbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022fc0:	81a3      	strh	r3, [r4, #12]
 8022fc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8022fc6:	e033      	b.n	8023030 <__swsetup_r+0x98>
 8022fc8:	0758      	lsls	r0, r3, #29
 8022fca:	d512      	bpl.n	8022ff2 <__swsetup_r+0x5a>
 8022fcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022fce:	b141      	cbz	r1, 8022fe2 <__swsetup_r+0x4a>
 8022fd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022fd4:	4299      	cmp	r1, r3
 8022fd6:	d002      	beq.n	8022fde <__swsetup_r+0x46>
 8022fd8:	4628      	mov	r0, r5
 8022fda:	f7ff f82b 	bl	8022034 <_free_r>
 8022fde:	2300      	movs	r3, #0
 8022fe0:	6363      	str	r3, [r4, #52]	@ 0x34
 8022fe2:	89a3      	ldrh	r3, [r4, #12]
 8022fe4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022fe8:	81a3      	strh	r3, [r4, #12]
 8022fea:	2300      	movs	r3, #0
 8022fec:	6063      	str	r3, [r4, #4]
 8022fee:	6923      	ldr	r3, [r4, #16]
 8022ff0:	6023      	str	r3, [r4, #0]
 8022ff2:	89a3      	ldrh	r3, [r4, #12]
 8022ff4:	f043 0308 	orr.w	r3, r3, #8
 8022ff8:	81a3      	strh	r3, [r4, #12]
 8022ffa:	6923      	ldr	r3, [r4, #16]
 8022ffc:	b94b      	cbnz	r3, 8023012 <__swsetup_r+0x7a>
 8022ffe:	89a3      	ldrh	r3, [r4, #12]
 8023000:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8023004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023008:	d003      	beq.n	8023012 <__swsetup_r+0x7a>
 802300a:	4621      	mov	r1, r4
 802300c:	4628      	mov	r0, r5
 802300e:	f000 f83f 	bl	8023090 <__smakebuf_r>
 8023012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023016:	f013 0201 	ands.w	r2, r3, #1
 802301a:	d00a      	beq.n	8023032 <__swsetup_r+0x9a>
 802301c:	2200      	movs	r2, #0
 802301e:	60a2      	str	r2, [r4, #8]
 8023020:	6962      	ldr	r2, [r4, #20]
 8023022:	4252      	negs	r2, r2
 8023024:	61a2      	str	r2, [r4, #24]
 8023026:	6922      	ldr	r2, [r4, #16]
 8023028:	b942      	cbnz	r2, 802303c <__swsetup_r+0xa4>
 802302a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802302e:	d1c5      	bne.n	8022fbc <__swsetup_r+0x24>
 8023030:	bd38      	pop	{r3, r4, r5, pc}
 8023032:	0799      	lsls	r1, r3, #30
 8023034:	bf58      	it	pl
 8023036:	6962      	ldrpl	r2, [r4, #20]
 8023038:	60a2      	str	r2, [r4, #8]
 802303a:	e7f4      	b.n	8023026 <__swsetup_r+0x8e>
 802303c:	2000      	movs	r0, #0
 802303e:	e7f7      	b.n	8023030 <__swsetup_r+0x98>
 8023040:	24000068 	.word	0x24000068

08023044 <__swhatbuf_r>:
 8023044:	b570      	push	{r4, r5, r6, lr}
 8023046:	460c      	mov	r4, r1
 8023048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802304c:	2900      	cmp	r1, #0
 802304e:	b096      	sub	sp, #88	@ 0x58
 8023050:	4615      	mov	r5, r2
 8023052:	461e      	mov	r6, r3
 8023054:	da0d      	bge.n	8023072 <__swhatbuf_r+0x2e>
 8023056:	89a3      	ldrh	r3, [r4, #12]
 8023058:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802305c:	f04f 0100 	mov.w	r1, #0
 8023060:	bf14      	ite	ne
 8023062:	2340      	movne	r3, #64	@ 0x40
 8023064:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023068:	2000      	movs	r0, #0
 802306a:	6031      	str	r1, [r6, #0]
 802306c:	602b      	str	r3, [r5, #0]
 802306e:	b016      	add	sp, #88	@ 0x58
 8023070:	bd70      	pop	{r4, r5, r6, pc}
 8023072:	466a      	mov	r2, sp
 8023074:	f000 f848 	bl	8023108 <_fstat_r>
 8023078:	2800      	cmp	r0, #0
 802307a:	dbec      	blt.n	8023056 <__swhatbuf_r+0x12>
 802307c:	9901      	ldr	r1, [sp, #4]
 802307e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023082:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023086:	4259      	negs	r1, r3
 8023088:	4159      	adcs	r1, r3
 802308a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802308e:	e7eb      	b.n	8023068 <__swhatbuf_r+0x24>

08023090 <__smakebuf_r>:
 8023090:	898b      	ldrh	r3, [r1, #12]
 8023092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023094:	079d      	lsls	r5, r3, #30
 8023096:	4606      	mov	r6, r0
 8023098:	460c      	mov	r4, r1
 802309a:	d507      	bpl.n	80230ac <__smakebuf_r+0x1c>
 802309c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80230a0:	6023      	str	r3, [r4, #0]
 80230a2:	6123      	str	r3, [r4, #16]
 80230a4:	2301      	movs	r3, #1
 80230a6:	6163      	str	r3, [r4, #20]
 80230a8:	b003      	add	sp, #12
 80230aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80230ac:	ab01      	add	r3, sp, #4
 80230ae:	466a      	mov	r2, sp
 80230b0:	f7ff ffc8 	bl	8023044 <__swhatbuf_r>
 80230b4:	9f00      	ldr	r7, [sp, #0]
 80230b6:	4605      	mov	r5, r0
 80230b8:	4639      	mov	r1, r7
 80230ba:	4630      	mov	r0, r6
 80230bc:	f7ff f82e 	bl	802211c <_malloc_r>
 80230c0:	b948      	cbnz	r0, 80230d6 <__smakebuf_r+0x46>
 80230c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80230c6:	059a      	lsls	r2, r3, #22
 80230c8:	d4ee      	bmi.n	80230a8 <__smakebuf_r+0x18>
 80230ca:	f023 0303 	bic.w	r3, r3, #3
 80230ce:	f043 0302 	orr.w	r3, r3, #2
 80230d2:	81a3      	strh	r3, [r4, #12]
 80230d4:	e7e2      	b.n	802309c <__smakebuf_r+0xc>
 80230d6:	89a3      	ldrh	r3, [r4, #12]
 80230d8:	6020      	str	r0, [r4, #0]
 80230da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80230de:	81a3      	strh	r3, [r4, #12]
 80230e0:	9b01      	ldr	r3, [sp, #4]
 80230e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80230e6:	b15b      	cbz	r3, 8023100 <__smakebuf_r+0x70>
 80230e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80230ec:	4630      	mov	r0, r6
 80230ee:	f000 f81d 	bl	802312c <_isatty_r>
 80230f2:	b128      	cbz	r0, 8023100 <__smakebuf_r+0x70>
 80230f4:	89a3      	ldrh	r3, [r4, #12]
 80230f6:	f023 0303 	bic.w	r3, r3, #3
 80230fa:	f043 0301 	orr.w	r3, r3, #1
 80230fe:	81a3      	strh	r3, [r4, #12]
 8023100:	89a3      	ldrh	r3, [r4, #12]
 8023102:	431d      	orrs	r5, r3
 8023104:	81a5      	strh	r5, [r4, #12]
 8023106:	e7cf      	b.n	80230a8 <__smakebuf_r+0x18>

08023108 <_fstat_r>:
 8023108:	b538      	push	{r3, r4, r5, lr}
 802310a:	4d07      	ldr	r5, [pc, #28]	@ (8023128 <_fstat_r+0x20>)
 802310c:	2300      	movs	r3, #0
 802310e:	4604      	mov	r4, r0
 8023110:	4608      	mov	r0, r1
 8023112:	4611      	mov	r1, r2
 8023114:	602b      	str	r3, [r5, #0]
 8023116:	f7de ff8f 	bl	8002038 <_fstat>
 802311a:	1c43      	adds	r3, r0, #1
 802311c:	d102      	bne.n	8023124 <_fstat_r+0x1c>
 802311e:	682b      	ldr	r3, [r5, #0]
 8023120:	b103      	cbz	r3, 8023124 <_fstat_r+0x1c>
 8023122:	6023      	str	r3, [r4, #0]
 8023124:	bd38      	pop	{r3, r4, r5, pc}
 8023126:	bf00      	nop
 8023128:	2401e4a8 	.word	0x2401e4a8

0802312c <_isatty_r>:
 802312c:	b538      	push	{r3, r4, r5, lr}
 802312e:	4d06      	ldr	r5, [pc, #24]	@ (8023148 <_isatty_r+0x1c>)
 8023130:	2300      	movs	r3, #0
 8023132:	4604      	mov	r4, r0
 8023134:	4608      	mov	r0, r1
 8023136:	602b      	str	r3, [r5, #0]
 8023138:	f7de ff8e 	bl	8002058 <_isatty>
 802313c:	1c43      	adds	r3, r0, #1
 802313e:	d102      	bne.n	8023146 <_isatty_r+0x1a>
 8023140:	682b      	ldr	r3, [r5, #0]
 8023142:	b103      	cbz	r3, 8023146 <_isatty_r+0x1a>
 8023144:	6023      	str	r3, [r4, #0]
 8023146:	bd38      	pop	{r3, r4, r5, pc}
 8023148:	2401e4a8 	.word	0x2401e4a8

0802314c <_raise_r>:
 802314c:	291f      	cmp	r1, #31
 802314e:	b538      	push	{r3, r4, r5, lr}
 8023150:	4605      	mov	r5, r0
 8023152:	460c      	mov	r4, r1
 8023154:	d904      	bls.n	8023160 <_raise_r+0x14>
 8023156:	2316      	movs	r3, #22
 8023158:	6003      	str	r3, [r0, #0]
 802315a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802315e:	bd38      	pop	{r3, r4, r5, pc}
 8023160:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023162:	b112      	cbz	r2, 802316a <_raise_r+0x1e>
 8023164:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023168:	b94b      	cbnz	r3, 802317e <_raise_r+0x32>
 802316a:	4628      	mov	r0, r5
 802316c:	f000 f830 	bl	80231d0 <_getpid_r>
 8023170:	4622      	mov	r2, r4
 8023172:	4601      	mov	r1, r0
 8023174:	4628      	mov	r0, r5
 8023176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802317a:	f000 b817 	b.w	80231ac <_kill_r>
 802317e:	2b01      	cmp	r3, #1
 8023180:	d00a      	beq.n	8023198 <_raise_r+0x4c>
 8023182:	1c59      	adds	r1, r3, #1
 8023184:	d103      	bne.n	802318e <_raise_r+0x42>
 8023186:	2316      	movs	r3, #22
 8023188:	6003      	str	r3, [r0, #0]
 802318a:	2001      	movs	r0, #1
 802318c:	e7e7      	b.n	802315e <_raise_r+0x12>
 802318e:	2100      	movs	r1, #0
 8023190:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8023194:	4620      	mov	r0, r4
 8023196:	4798      	blx	r3
 8023198:	2000      	movs	r0, #0
 802319a:	e7e0      	b.n	802315e <_raise_r+0x12>

0802319c <raise>:
 802319c:	4b02      	ldr	r3, [pc, #8]	@ (80231a8 <raise+0xc>)
 802319e:	4601      	mov	r1, r0
 80231a0:	6818      	ldr	r0, [r3, #0]
 80231a2:	f7ff bfd3 	b.w	802314c <_raise_r>
 80231a6:	bf00      	nop
 80231a8:	24000068 	.word	0x24000068

080231ac <_kill_r>:
 80231ac:	b538      	push	{r3, r4, r5, lr}
 80231ae:	4d07      	ldr	r5, [pc, #28]	@ (80231cc <_kill_r+0x20>)
 80231b0:	2300      	movs	r3, #0
 80231b2:	4604      	mov	r4, r0
 80231b4:	4608      	mov	r0, r1
 80231b6:	4611      	mov	r1, r2
 80231b8:	602b      	str	r3, [r5, #0]
 80231ba:	f7de fedd 	bl	8001f78 <_kill>
 80231be:	1c43      	adds	r3, r0, #1
 80231c0:	d102      	bne.n	80231c8 <_kill_r+0x1c>
 80231c2:	682b      	ldr	r3, [r5, #0]
 80231c4:	b103      	cbz	r3, 80231c8 <_kill_r+0x1c>
 80231c6:	6023      	str	r3, [r4, #0]
 80231c8:	bd38      	pop	{r3, r4, r5, pc}
 80231ca:	bf00      	nop
 80231cc:	2401e4a8 	.word	0x2401e4a8

080231d0 <_getpid_r>:
 80231d0:	f7de beca 	b.w	8001f68 <_getpid>

080231d4 <_init>:
 80231d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80231d6:	bf00      	nop
 80231d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80231da:	bc08      	pop	{r3}
 80231dc:	469e      	mov	lr, r3
 80231de:	4770      	bx	lr

080231e0 <_fini>:
 80231e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80231e2:	bf00      	nop
 80231e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80231e6:	bc08      	pop	{r3}
 80231e8:	469e      	mov	lr, r3
 80231ea:	4770      	bx	lr
